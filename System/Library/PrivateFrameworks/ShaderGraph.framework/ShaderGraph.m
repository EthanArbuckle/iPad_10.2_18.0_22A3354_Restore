ShaderGraph::NodePersonality::ShaderType_optional __swiftcall NodePersonality.ShaderType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShaderGraph::NodePersonality::ShaderType_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodePersonality.ShaderType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = ShaderGraph_NodePersonality_ShaderType_geometryModifier;
  else
    v4.value = ShaderGraph_NodePersonality_ShaderType_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t NodePersonality.ShaderType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0x65636166727573;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodePersonality.ShaderType(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0xD000000000000010;
  else
    v3 = 0x65636166727573;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x8000000245FC6360;
  if (*a2)
    v5 = 0xD000000000000010;
  else
    v5 = 0x65636166727573;
  if (*a2)
    v6 = 0x8000000245FC6360;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodePersonality.ShaderType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NodePersonality.ShaderType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodePersonality.ShaderType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NodePersonality.ShaderType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodePersonality.ShaderType.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NodePersonality.ShaderType(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x65636166727573;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x8000000245FC6360;
  if (!*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void NodePersonality.hash(into:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_245E47E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[480];

  outlined init with take of SGDataTypeStorage(v1 + 16, (uint64_t)v4);
  v2 = *(_QWORD *)(v1 + 88);
  Hasher._combine(_:)(0);
  outlined retain of SGDataTypeStorage((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  swift_retain();
  SGDataTypeStorage.hash(into:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 120))(v0);
  outlined retain of SGDataTypeStorage((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  return swift_release();
}

Swift::Int NodePersonality.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  NodePersonality.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodePersonality()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonality.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NodePersonality(uint64_t a1)
{
  uint64_t *v1;

  NodePersonality.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodePersonality()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonality.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance NodePersonality(uint64_t *a1)
{
  specialized static NodePersonality.== infix(_:_:)(*a1);
}

uint64_t NodePersonalityType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245E481B4 + 4 * byte_245FBE548[a1]))(0x746E6174736E6F43, 0xED000065756C6156);
}

unint64_t sub_245E481B4()
{
  return 0xD000000000000014;
}

uint64_t sub_245E4824C()
{
  return 0x746C75736552;
}

uint64_t sub_245E48260()
{
  return 0x65706F7250746547;
}

unint64_t sub_245E48280()
{
  return 0xD000000000000010;
}

uint64_t sub_245E4829C()
{
  return 0x6C6169726574614DLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NodePersonalityType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = NodePersonalityType.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == NodePersonalityType.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NodePersonalityType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonalityType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NodePersonalityType()
{
  unsigned __int8 *v0;

  NodePersonalityType.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NodePersonalityType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  NodePersonalityType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NodePersonalityType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized NodePersonalityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NodePersonalityType@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = NodePersonalityType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t NodePersonality.typeName.getter(unint64_t a1)
{
  return ((uint64_t (*)())((char *)sub_245E484B8 + 4 * byte_245FBE552[a1 >> 61]))();
}

uint64_t sub_245E484B8()
{
  return 4;
}

uint64_t sub_245E484C0()
{
  return 5;
}

uint64_t sub_245E484C8()
{
  return 2;
}

uint64_t sub_245E484D0()
{
  return 7;
}

uint64_t sub_245E484D8()
{
  return 8;
}

uint64_t sub_245E484E0()
{
  return 9;
}

uint64_t sub_245E484E8@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;

  if (a1 == 0xE000000000000008)
    v1 = 3;
  else
    v1 = 6;
  if (a1 == 0xE000000000000000)
    return 1;
  else
    return v1;
}

uint64_t NodePersonality.emitFunctionNodes(node:context:into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  char v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  Swift::String v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  Swift::String v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  void *object;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  Swift::String v110;
  Swift::String v111;
  __int128 v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  Swift::String v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t countAndFlagsBits;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _OWORD *v129;
  Swift::String v130;
  Swift::String v131;
  __int128 v132;
  uint64_t *v133;
  __int128 *v134;
  __int128 v135;
  __int128 v136;
  Swift::String v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  Swift::String v144;
  Swift::String v145;
  Swift::String v146;
  Swift::String v147;
  __int128 v148;
  uint64_t *v149;
  __int128 *v150;
  __int128 v151;
  __int128 v152;
  Swift::String v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t *v161;
  uint64_t v162;
  uint64_t *v163;
  __int128 *v164;
  __int128 v165;
  __int128 v166;
  Swift::String v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  __int128 *v179;
  __int128 v180;
  __int128 v181;
  Swift::String v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 *v189;
  __int128 v190;
  __int128 v191;
  Swift::String v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  Swift::String v199;
  Swift::String v200;
  Swift::String v201;
  Swift::String v202;
  Swift::String v203;
  Swift::String v204;
  __int128 v205;
  __int128 *v206;
  __int128 v207;
  __int128 v208;
  Swift::String v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 *v216;
  __int128 v217;
  __int128 v218;
  Swift::String v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  _OWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  Swift::String v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  Swift::String v240;
  Swift::String v241;
  Swift::String v242;
  int64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  void *v249;
  char v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t (*v264)(uint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  Swift::String v272;
  Swift::String v273;
  __int128 v274;
  _OWORD v275[3];
  Swift::String v276;
  Swift::String v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  _BYTE v281[40];
  uint64_t v282;
  __int128 v283;
  Swift::String v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  char v289;
  __int128 v290;
  Swift::String v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  _QWORD v323[5];
  char v324;
  uint64_t v325;
  _BYTE v326[72];
  _QWORD v327[5];
  char v328;
  void *v329;
  uint64_t *v330;

  v4 = a4;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v330 = (uint64_t *)a1;
  v11 = *(_BYTE *)(a1 + 40);
  v303 = a3;
  switch(a4 >> 61)
  {
    case 0uLL:
      v267 = a2;
      outlined init with take of SGDataTypeStorage(a4 + 16, (uint64_t)v326);
      v261 = *(_QWORD *)(v4 + 88);
      v12 = v330[2];
      v308 = v12;
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        if (v13 != 1)
        {
          *(_QWORD *)&v283 = v6;
          *((_QWORD *)&v283 + 1) = v7;
          v284._countAndFlagsBits = v8;
          v284._object = (void *)v9;
          *(_QWORD *)&v285 = v10;
          BYTE8(v285) = v11 & 1;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v283);
          *(_QWORD *)&v290 = 0;
          *((_QWORD *)&v290 + 1) = 0xE000000000000000;
          swift_retain();
          swift_retain();
          outlined retain of SGDataTypeStorage((uint64_t)v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
          _StringGuts.grow(_:)(84);
          v144._object = (void *)0x8000000245FC7BC0;
          v144._countAndFlagsBits = 0xD000000000000025;
          String.append(_:)(v144);
          v145._countAndFlagsBits = 0xD000000000000046;
          v145._object = (void *)0x8000000245FC7D50;
          String.append(_:)(v145);
          v276._countAndFlagsBits = v13;
          v146._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v146);
          swift_bridgeObjectRelease();
          v147._countAndFlagsBits = 0x74757074756F2029;
          v147._object = (void *)0xEA00000000002E73;
          String.append(_:)(v147);
          v148 = v290;
          v149 = v330;
          outlined init with take of NodePersonality(v330, &v307);
          v306 = v149[1];
          outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
          v302 = v148;
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          swift_allocError();
          *v150 = v290;
          v151 = v294;
          v153 = v291;
          v152 = v292;
          v150[3] = v293;
          v150[4] = v151;
          v150[1] = (__int128)v153;
          v150[2] = v152;
          v154 = v298;
          v156 = v295;
          v155 = v296;
          v150[7] = v297;
          v150[8] = v154;
          v150[5] = v156;
          v150[6] = v155;
          v157 = v302;
          v159 = v299;
          v158 = v300;
          v150[11] = v301;
          v150[12] = v157;
          v150[9] = v159;
          v150[10] = v158;
          outlined retain of NodePersonality(&v307);
          outlined retain of [Input]((uint64_t)&v306);
          outlined retain of [Input]((uint64_t)&v308);
          swift_willThrow();
          outlined retain of SGDataTypeStorage((uint64_t)v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
          swift_release();
          return swift_release();
        }
        v14 = *(_QWORD *)(v12 + 32);
        v15 = *(_QWORD *)(v12 + 40);
        v16 = *(_QWORD *)(v12 + 48);
        v17 = *(_QWORD *)(v12 + 56);
        v18 = *(_QWORD *)(v12 + 64);
        v19 = *(_BYTE *)(v12 + 72);
        v20 = *(_QWORD *)(v12 + 80);
        v323[0] = v14;
        v323[1] = v15;
        v323[2] = v16;
        v323[3] = v17;
        v323[4] = v18;
        v324 = v19;
        v325 = v20;
        v21 = v261;
        v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v261 + 144);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        v23 = outlined retain of SGDataTypeStorage((uint64_t)v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
        v24 = v22(v23);
        if (v24)
        {
          v25 = *(_QWORD *)(a3 + 48);
          v26 = v25 + 1;
          if (!__OFADD__(v25, 1))
          {
            v27 = v24;
            *(_QWORD *)(a3 + 48) = v26;
            type metadata accessor for MetalLiteralValueNode();
            swift_allocObject();
            swift_retain();
            outlined retain of SGDataTypeStorage((uint64_t)v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
            swift_retain();
            v28 = MetalLiteralValueNode.init(id:resultType:value:)(v25, v27, (uint64_t)v326);
            v29 = specialized MetalShaderProgram.add<A>(_:)(v28, (uint64_t (*)(_QWORD))type metadata accessor for MetalLiteralValueNode, (uint64_t)&protocol witness table for MetalLiteralValueNode);
            swift_retain();
            swift_release();
            v30 = swift_release();
            v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 128))(v30);
            swift_retain();
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v290 = *(_QWORD *)(v267 + 192);
            *(_QWORD *)(v267 + 192) = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, (uint64_t)v323, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)(v267 + 192) = v290;
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease_n();
            swift_release_n();
            swift_bridgeObjectRelease();
            outlined retain of SGDataTypeStorage((uint64_t)v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
            return v303;
          }
          __break(1u);
LABEL_116:
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v9, 1);
          v175 = v282;
LABEL_72:
          *(_QWORD *)(v175 + 16) = v9;
          outlined init with take of MetalFunctionNode((__int128 *)&v276._countAndFlagsBits, v175 + 40 * v21 + 32);
          swift_release();
          specialized MetalFunctionNode.setInputs(_:)(v175);
          swift_bridgeObjectRelease();
          v176 = v330[3];
          swift_beginAccess();
          v177 = *(_QWORD *)(v270 + 88);
          v178 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v283 = *(_QWORD *)(v267 + 176);
          *(_QWORD *)(v267 + 176) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v177, v176, v178);
          *(_QWORD *)(v267 + 176) = v283;
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          return v303;
        }
        *(_QWORD *)&v283 = v261;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)&v283);
        outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v302 = 0uLL;
        swift_allocError();
        *v189 = v290;
        v190 = v294;
        v192 = v291;
        v191 = v292;
        v189[3] = v293;
        v189[4] = v190;
        v189[1] = (__int128)v192;
        v189[2] = v191;
        v193 = v298;
        v195 = v295;
        v194 = v296;
        v189[7] = v297;
        v189[8] = v193;
        v189[5] = v195;
        v189[6] = v194;
        v196 = v302;
        v198 = v299;
        v197 = v300;
        v189[11] = v301;
        v189[12] = v196;
        v189[9] = v198;
        v189[10] = v197;
        swift_retain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        *(_QWORD *)&v283 = v6;
        *((_QWORD *)&v283 + 1) = v7;
        v284._countAndFlagsBits = v8;
        v284._object = (void *)v9;
        *(_QWORD *)&v285 = v10;
        BYTE8(v285) = v11 & 1;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v283);
        *(_QWORD *)&v290 = 0;
        *((_QWORD *)&v290 + 1) = 0xE000000000000000;
        swift_retain();
        swift_retain();
        outlined retain of SGDataTypeStorage((uint64_t)v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
        _StringGuts.grow(_:)(73);
        v130._object = (void *)0x8000000245FC7BC0;
        v130._countAndFlagsBits = 0xD000000000000025;
        String.append(_:)(v130);
        v131._countAndFlagsBits = 0xD000000000000047;
        v131._object = (void *)0x8000000245FC7DA0;
        String.append(_:)(v131);
        v132 = v290;
        v133 = v330;
        outlined init with take of NodePersonality(v330, &v305);
        v304 = v133[1];
        outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
        v302 = v132;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        *v134 = v290;
        v135 = v294;
        v137 = v291;
        v136 = v292;
        v134[3] = v293;
        v134[4] = v135;
        v134[1] = (__int128)v137;
        v134[2] = v136;
        v138 = v298;
        v140 = v295;
        v139 = v296;
        v134[7] = v297;
        v134[8] = v138;
        v134[5] = v140;
        v134[6] = v139;
        v141 = v302;
        v143 = v299;
        v142 = v300;
        v134[11] = v301;
        v134[12] = v141;
        v134[9] = v143;
        v134[10] = v142;
        outlined retain of [Input]((uint64_t)&v308);
        outlined retain of NodePersonality(&v305);
        outlined retain of [Input]((uint64_t)&v304);
        swift_willThrow();
      }
      outlined retain of SGDataTypeStorage((uint64_t)v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
      swift_release();
      return swift_release();
    case 1uLL:
      v33 = *(_QWORD *)(a4 + 16);
      v262 = *(_QWORD *)(a4 + 24);
      v34 = *(_QWORD *)(a4 + 32);
      v36 = v330;
      outlined init with take of NodePersonality(v330, &v310);
      v309 = v36[2];
      swift_retain();
      outlined retain of NodePersonality(&v310);
      swift_bridgeObjectRetain();
      outlined retain of [Input]((uint64_t)&v309);
      swift_retain();
      v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D476897context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(v7, a2, (uint64_t)v36, &v303);
      if (v269)
      {
        outlined release of NodePersonality(&v310);
        outlined release of [Input]((uint64_t)&v309);
        swift_release();
LABEL_64:
        swift_release();
        return swift_bridgeObjectRelease();
      }
      v86 = v37;
      v258 = v33;
      outlined release of NodePersonality(&v310);
      outlined release of [Input]((uint64_t)&v309);
      v87 = swift_bridgeObjectRelease();
      v88 = *(_QWORD *)(v86 + 16);
      v259 = v34;
      v260 = v86;
      v89 = v262;
      if (!v88)
        goto LABEL_36;
      v90 = v86 + 32;
      swift_bridgeObjectRetain();
      v91 = v90;
      v92 = v88;
      do
      {
        outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v91, (uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        v93 = v295;
        outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        if (!v93)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          while (1)
          {
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v90, (uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            if (!(_QWORD)v295)
              break;
            outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            v90 += 96;
            if (!--v88)
            {
              swift_bridgeObjectRelease_n();
              __break(1u);
              break;
            }
          }
          swift_bridgeObjectRelease();
          v274 = v292;
          v275[0] = v293;
          v275[1] = v294;
          v275[2] = v295;
          v272 = (Swift::String)v290;
          v273 = v291;
          swift_bridgeObjectRelease();
          if (!v272._object)
          {
LABEL_122:
            __break(1u);
            JUMPOUT(0x245E4A750);
          }
          v276 = v272;
          v277 = v273;
          v278 = v274;
          v279 = BYTE8(v274);
          v280 = *(_QWORD *)&v275[0];
          outlined init with take of MetalFunctionNode?((uint64_t)v275 + 8, (uint64_t)v281, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          v290 = (__int128)v272;
          v291 = v273;
          *(_QWORD *)&v292 = v274;
          BYTE8(v292) = BYTE8(v274);
          *(_QWORD *)&v293 = *(_QWORD *)&v275[0];
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v281, (uint64_t)&v293 + 8, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          swift_bridgeObjectRetain();
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v293 + 8, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v283);
          *(_QWORD *)&v290 = 0;
          *((_QWORD *)&v290 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(77);
          v199._object = (void *)0x8000000245FC7BC0;
          v199._countAndFlagsBits = 0xD000000000000025;
          String.append(_:)(v199);
          v200._countAndFlagsBits = 0xD000000000000016;
          v200._object = (void *)0x8000000245FC7CF0;
          String.append(_:)(v200);
          v282 = v330[3];
          v201._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v201);
          swift_bridgeObjectRelease();
          v202._countAndFlagsBits = 1701080942;
          v202._object = (void *)0xE400000000000000;
          String.append(_:)(v202);
          swift_bridgeObjectRelease();
          v203._countAndFlagsBits = 0xD00000000000001DLL;
          v203._object = (void *)0x8000000245FC7D10;
          String.append(_:)(v203);
          String.append(_:)(v273);
          swift_bridgeObjectRelease();
          v204._countAndFlagsBits = 0xD000000000000014;
          v204._object = (void *)0x8000000245FC7D30;
          String.append(_:)(v204);
          v205 = v290;
          outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
          v302 = v205;
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          swift_allocError();
          *v206 = v290;
          v207 = v294;
          v209 = v291;
          v208 = v292;
          v206[3] = v293;
          v206[4] = v207;
          v206[1] = (__int128)v209;
          v206[2] = v208;
          v210 = v298;
          v212 = v295;
          v211 = v296;
          v206[7] = v297;
          v206[8] = v210;
          v206[5] = v212;
          v206[6] = v211;
          v213 = v302;
          v215 = v299;
          v214 = v300;
          v206[11] = v301;
          v206[12] = v213;
          v206[9] = v215;
          v206[10] = v214;
          swift_willThrow();
          swift_release();
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v276, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          return swift_release();
        }
        v91 += 96;
        --v92;
      }
      while (v92);
      v87 = swift_bridgeObjectRelease();
      v34 = v259;
LABEL_36:
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 144))(v87);
      if (!v94)
      {
        swift_bridgeObjectRelease();
        *(_QWORD *)&v283 = v34;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)&v283);
        outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v302 = 0uLL;
        swift_allocError();
        *v216 = v290;
        v217 = v294;
        v219 = v291;
        v218 = v292;
        v216[3] = v293;
        v216[4] = v217;
        v216[1] = (__int128)v219;
        v216[2] = v218;
        v220 = v298;
        v222 = v295;
        v221 = v296;
        v216[7] = v297;
        v216[8] = v220;
        v216[5] = v222;
        v216[6] = v221;
        v223 = v302;
        v225 = v299;
        v224 = v300;
        v216[11] = v301;
        v216[12] = v223;
        v216[9] = v225;
        v216[10] = v224;
LABEL_84:
        swift_willThrow();
        return swift_release();
      }
      v95 = v303;
      v96 = *(_QWORD *)(v303 + 48);
      if (!__OFADD__(v96, 1))
      {
        v97 = v94;
        *(_QWORD *)(v303 + 48) = v96 + 1;
        v255 = type metadata accessor for MetalFunctionCallNode();
        v98 = swift_allocObject();
        v99 = (_QWORD *)MEMORY[0x24BEE4AF8];
        *(_BYTE *)(v98 + 72) = 0;
        *(_QWORD *)(v98 + 40) = 0;
        *(_QWORD *)(v98 + 24) = v99;
        *(_QWORD *)(v98 + 32) = v97;
        *(_QWORD *)(v98 + 48) = 0;
        *(_QWORD *)(v98 + 56) = v258;
        *(_QWORD *)(v98 + 64) = v262;
        *(_QWORD *)&v290 = v258;
        *((_QWORD *)&v290 + 1) = v262;
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        v100._countAndFlagsBits = 0x6974636E75666E5CLL;
        v100._object = (void *)0xEA00000000006E6FLL;
        String.append(_:)(v100);
        swift_release();
        v101 = v290;
        swift_beginAccess();
        *(_OWORD *)(v98 + 40) = v101;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v98 + 16) = v96;
        v102 = specialized MetalShaderProgram.add<A>(_:)(v98, (uint64_t (*)(_QWORD))type metadata accessor for MetalFunctionCallNode, (uint64_t)&protocol witness table for MetalFunctionCallNode);
        swift_retain();
        swift_release();
        swift_release();
        if (v88)
        {
          v103 = v260 + 32;
          swift_bridgeObjectRetain();
          do
          {
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v103, (uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            v283 = v290;
            v284 = v291;
            *(_QWORD *)&v285 = v292;
            BYTE8(v285) = BYTE8(v292);
            *(_QWORD *)&v286 = v293;
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v293 + 8, (uint64_t)&v286 + 8, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
            outlined init with take of MetalFunctionNode?((uint64_t)&v286 + 8, (uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
            object = v277._object;
            if (v277._object)
            {
              v105 = v278;
              __swift_project_boxed_opaque_existential_1(&v276, (uint64_t)v277._object);
              v106 = (*(uint64_t (**)(void *, uint64_t))(v105 + 24))(object, v105);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v276);
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99[2] + 1, 1, v99);
              v108 = v99[2];
              v107 = v99[3];
              if (v108 >= v107 >> 1)
                v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v107 > 1), v108 + 1, 1, v99);
              v99[2] = v108 + 1;
              v99[v108 + 4] = v106;
            }
            else
            {
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v276, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            }
            v103 += 96;
            --v88;
          }
          while (v88);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        (*(void (**)(_QWORD *))(*(_QWORD *)v102 + 160))(v99);
        *(_QWORD *)&v292 = &protocol witness table for MetalFunctionCallNode;
        v291._object = (void *)v255;
        *(_QWORD *)&v290 = v102;
        swift_retain();
        UserGraphCompiler.CompileContext.setOutput(_:for:)(&v290, v330);
        swift_release();
        swift_release();
        goto LABEL_111;
      }
      __break(1u);
LABEL_118:
      swift_once();
LABEL_98:
      v232 = *(_QWORD *)(v89 + 48);
      if (__OFADD__(v232, 1))
      {
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
      v233 = static MetalDataType.sampler;
      *(_QWORD *)(v89 + 48) = v232 + 1;
      v266 = type metadata accessor for MetalFunctionCallNode();
      v234 = swift_allocObject();
      *(_BYTE *)(v234 + 72) = 0;
      *(_QWORD *)(v234 + 40) = 0;
      v235 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v234 + 24) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v234 + 32) = v233;
      *(_QWORD *)(v234 + 48) = 0;
      *(_QWORD *)(v234 + 56) = 0x72656C706D6173;
      *(_QWORD *)(v234 + 64) = 0xE700000000000000;
      *(_QWORD *)&v290 = 0x72656C706D6173;
      *((_QWORD *)&v290 + 1) = 0xE700000000000000;
      swift_retain_n();
      v236._countAndFlagsBits = 0x6974636E75666E5CLL;
      v236._object = (void *)0xEA00000000006E6FLL;
      String.append(_:)(v236);
      swift_release();
      v237 = v290;
      swift_beginAccess();
      *(_OWORD *)(v234 + 40) = v237;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v234 + 16) = v232;
      v238 = specialized MetalShaderProgram.add<A>(_:)(v234, (uint64_t (*)(_QWORD))type metadata accessor for MetalFunctionCallNode, (uint64_t)&protocol witness table for MetalFunctionCallNode);
      swift_retain();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t))(*(_QWORD *)v238 + 232))(1);
      *(_QWORD *)&v290 = 0;
      *((_QWORD *)&v290 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v290 = 0xD000000000000011;
      *((_QWORD *)&v290 + 1) = 0x8000000245FC7BF0;
      v239 = v330[3];
      *(_QWORD *)&v283 = 1701080942;
      *((_QWORD *)&v283 + 1) = 0xE400000000000000;
      v276._countAndFlagsBits = v239;
      v240._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v240);
      swift_bridgeObjectRelease();
      v241._countAndFlagsBits = 1701080942;
      v241._object = (void *)0xE400000000000000;
      String.append(_:)(v241);
      swift_bridgeObjectRelease();
      v242._countAndFlagsBits = 39;
      v242._object = (void *)0xE100000000000000;
      String.append(_:)(v242);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v238 + 208))(v290, *((_QWORD *)&v290 + 1));
      v243 = *(_QWORD *)(v95 + 16);
      if (v243)
      {
        v271 = v235;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v243, 0);
        v244 = v95 + 32;
        do
        {
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v244, (uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          v283 = v290;
          v284 = v291;
          *(_QWORD *)&v285 = v292;
          BYTE8(v285) = BYTE8(v292);
          *(_QWORD *)&v286 = v293;
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v293 + 8, (uint64_t)&v286 + 8, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          if (!(_QWORD)v288)
            goto LABEL_120;
          outlined init with take of MetalFunctionNode((__int128 *)((char *)&v286 + 8), (uint64_t)&v276);
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          v245 = v271;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v271 + 16) + 1, 1);
            v245 = v271;
          }
          v247 = *(_QWORD *)(v245 + 16);
          v246 = *(_QWORD *)(v245 + 24);
          if (v247 >= v246 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v246 > 1, v247 + 1, 1);
            v245 = v271;
          }
          *(_QWORD *)(v245 + 16) = v247 + 1;
          outlined init with take of MetalFunctionNode((__int128 *)&v276._countAndFlagsBits, v245 + 40 * v247 + 32);
          v244 += 96;
          --v243;
        }
        while (v243);
        swift_release();
        v248 = v266;
      }
      else
      {
        swift_release();
        v245 = MEMORY[0x24BEE4AF8];
        v248 = v266;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v238 + 256))(v245);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v292 = &protocol witness table for MetalFunctionCallNode;
      v291._object = (void *)v248;
      *(_QWORD *)&v290 = v238;
      swift_retain();
      UserGraphCompiler.CompileContext.setOutput(_:for:)(&v290, v330);
LABEL_111:
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v290);
      return v303;
    case 2uLL:
      v267 = a2;
      v38 = *(_QWORD *)(a4 + 24);
      if ((*(_BYTE *)(a4 + 16) & 1) != 0)
      {
        v39 = one-time initialization token for geometry_parameters_private;
        swift_retain();
        swift_retain();
        v40 = 0x8000000245FC7C50;
        v41 = v269;
        v42 = v330;
        v263 = 0xD00000000000001BLL;
        if (v39 != -1)
          swift_once();
        v43 = &static MetalDataType.re.geometry_parameters_private;
      }
      else
      {
        v77 = one-time initialization token for surface_parameters_private;
        swift_retain();
        swift_retain();
        v40 = 0x8000000245FC7CD0;
        v41 = v269;
        v42 = v330;
        v263 = 0xD000000000000018;
        if (v77 != -1)
          swift_once();
        v43 = &static MetalDataType.re.surface_parameters_private;
      }
      v78 = *v43;
      swift_retain();
      v79 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 200);
      v80 = swift_retain();
      v81 = v79(v80);
      type metadata accessor for MetalDataType.Reference();
      swift_allocObject();
      specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(v38, v81 & 1, 0);
      v83 = v82;
      swift_release();
      v84 = v42[1];
      outlined init with take of NodePersonality(v42, &v312);
      v311 = v42[2];
      outlined retain of NodePersonality(&v312);
      swift_bridgeObjectRetain();
      outlined retain of [Input]((uint64_t)&v311);
      v85 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D476897context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(v84, v267, (uint64_t)v42, &v303);
      if (v41)
      {
        outlined release of NodePersonality(&v312);
        outlined release of [Input]((uint64_t)&v311);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      v123 = v85;
      v256 = v40;
      outlined release of NodePersonality(&v312);
      outlined release of [Input]((uint64_t)&v311);
      swift_bridgeObjectRelease();
      countAndFlagsBits = MEMORY[0x24BEE4AF8];
      v276._countAndFlagsBits = MEMORY[0x24BEE4AF8];
      v125 = *(_QWORD *)(v123 + 16);
      if (!v125)
      {
LABEL_67:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(countAndFlagsBits + 16) == 1)
        {
          swift_retain();
          swift_retain();
          v174 = MetalShaderProgram.createRESurfaceShaderFunctionNode(named:paramsInput:uniformsInput:)(v263, v256, 12324, 0xE200000000000000, v78, 12580, 0xE200000000000000, v83);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v270 = v174;
          swift_beginAccess();
          *(_QWORD *)(v174 + 104) = 0xD00000000000001BLL;
          *(_QWORD *)(v174 + 112) = 0x8000000245FC7CB0;
          swift_bridgeObjectRelease();
          v282 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(countAndFlagsBits + 32, (uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
          v283 = v290;
          v284 = v291;
          *(_QWORD *)&v285 = v292;
          BYTE8(v285) = BYTE8(v292);
          *(_QWORD *)&v286 = v293;
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v293 + 8, (uint64_t)&v286 + 8, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
          if ((_QWORD)v288)
          {
            outlined init with take of MetalFunctionNode((__int128 *)((char *)&v286 + 8), (uint64_t)&v276);
            outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            v175 = v282;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v175 + 16) + 1, 1);
              v175 = v282;
            }
            v21 = *(_QWORD *)(v175 + 16);
            v26 = *(_QWORD *)(v175 + 24);
            v9 = v21 + 1;
            if (v21 < v26 >> 1)
              goto LABEL_72;
            goto LABEL_116;
          }
          goto LABEL_121;
        }
        swift_release();
        swift_bridgeObjectRelease();
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_((uint64_t)&v283);
        outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
        *(_QWORD *)&v302 = 0xD000000000000037;
        *((_QWORD *)&v302 + 1) = 0x8000000245FC7C70;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        *v179 = v290;
        v180 = v294;
        v182 = v291;
        v181 = v292;
        v179[3] = v293;
        v179[4] = v180;
        v179[1] = (__int128)v182;
        v179[2] = v181;
        v183 = v298;
        v185 = v295;
        v184 = v296;
        v179[7] = v297;
        v179[8] = v183;
        v179[5] = v185;
        v179[6] = v184;
        v186 = v302;
        v188 = v299;
        v187 = v300;
        v179[11] = v301;
        v179[12] = v186;
        v179[9] = v188;
        v179[10] = v187;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
      v4 = 0;
      v126 = v123 + 32;
      while (v4 < *(_QWORD *)(v123 + 16))
      {
        outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v126, (uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        if ((_QWORD)v295)
        {
          v285 = v292;
          v286 = v293;
          v287 = v294;
          v288 = v295;
          v283 = v290;
          v284 = v291;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(countAndFlagsBits + 16) + 1, 1);
          countAndFlagsBits = v276._countAndFlagsBits;
          v128 = *(_QWORD *)(v276._countAndFlagsBits + 16);
          v127 = *(_QWORD *)(v276._countAndFlagsBits + 24);
          if (v128 >= v127 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v127 > 1, v128 + 1, 1);
            countAndFlagsBits = v276._countAndFlagsBits;
          }
          *(_QWORD *)(countAndFlagsBits + 16) = v128 + 1;
          v129 = (_OWORD *)(countAndFlagsBits + 96 * v128);
          v129[4] = v285;
          v129[5] = v286;
          v129[6] = v287;
          v129[7] = v288;
          v129[2] = v283;
          v129[3] = v284;
        }
        else
        {
          outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
        }
        ++v4;
        v126 += 96;
        if (v125 == v4)
          goto LABEL_67;
      }
      __break(1u);
      goto LABEL_113;
    case 3uLL:
      v44 = *(_QWORD *)(a4 + 16);
      v45 = *(void **)(a4 + 24);
      v317 = v8;
      v46 = *(_QWORD *)(v8 + 16);
      if (!v46)
      {
        *(_QWORD *)&v283 = v6;
        *((_QWORD *)&v283 + 1) = v7;
        v284._countAndFlagsBits = v8;
        v284._object = (void *)v9;
        *(_QWORD *)&v285 = v10;
        BYTE8(v285) = v11 & 1;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_((uint64_t)&v283);
        *(_QWORD *)&v290 = 0;
        *((_QWORD *)&v290 + 1) = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v290 = 0xD00000000000001CLL;
        *((_QWORD *)&v290 + 1) = 0x8000000245FC7C10;
        v109 = v330;
        v276._countAndFlagsBits = 1701080942;
        v276._object = (void *)0xE400000000000000;
        v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v110);
        swift_bridgeObjectRelease();
        String.append(_:)(v276);
        swift_bridgeObjectRelease();
        v111._countAndFlagsBits = 0xD000000000000010;
        v111._object = (void *)0x8000000245FC7C30;
        String.append(_:)(v111);
        v112 = v290;
        outlined init with take of NodePersonality(v109, &v314);
        v313 = v109[1];
        outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
        v302 = v112;
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        swift_allocError();
        *v113 = v290;
        v114 = v294;
        v116 = v291;
        v115 = v292;
        v113[3] = v293;
        v113[4] = v114;
        v113[1] = (__int128)v116;
        v113[2] = v115;
        v117 = v298;
        v119 = v295;
        v118 = v296;
        v113[7] = v297;
        v113[8] = v117;
        v113[5] = v119;
        v113[6] = v118;
        v120 = v302;
        v122 = v299;
        v121 = v300;
        v113[11] = v301;
        v113[12] = v120;
        v113[9] = v122;
        v113[10] = v121;
        outlined retain of [Input]((uint64_t)&v317);
        outlined retain of NodePersonality(&v314);
        outlined retain of [Input]((uint64_t)&v313);
        goto LABEL_84;
      }
      v254 = v45;
      v257 = v44;
      v47 = (void **)(v8 + 56 * v46);
      v48 = (uint64_t)*(v47 - 3);
      v49 = (uint64_t)*(v47 - 2);
      v50 = (uint64_t)*(v47 - 1);
      v51 = *v47;
      v52 = v47[1];
      v53 = *((_BYTE *)v47 + 16);
      v54 = v47[3];
      v252 = v50;
      v253 = v48;
      v327[0] = v48;
      v327[1] = v49;
      v327[2] = v50;
      v327[3] = v51;
      v251 = v52;
      v327[4] = v52;
      v250 = v53;
      v328 = v53;
      v249 = v54;
      v329 = v54;
      v264 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 144);
      swift_retain();
      swift_retain();
      v55 = swift_bridgeObjectRetain();
      v56 = v264(v55);
      if (v56)
      {
        v57 = v56;
        swift_retain();
        v58 = MetalShaderProgram.createGetArgument(resultType:argumentName:)(v57, v257, (uint64_t)v254);
        swift_release();
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v290 = 0x6772412064616552;
        *((_QWORD *)&v290 + 1) = 0xEF5B20746E656D75;
        v59._countAndFlagsBits = v257;
        v59._object = v254;
        String.append(_:)(v59);
        v60._countAndFlagsBits = 93;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        v61 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v58 + 176))(0x6772412064616552, 0xEF5B20746E656D75);
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 120))(v61);
        swift_retain();
        swift_bridgeObjectRetain();
        v63 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v290 = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a2 + 192) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v62, (uint64_t)v327, v63);
        *(_QWORD *)(a2 + 192) = v290;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease();
        return v303;
      }
      v163 = v330;
      outlined init with take of NodePersonality(v330, &v316);
      v315 = v163[1];
      *(_QWORD *)&v283 = v253;
      *((_QWORD *)&v283 + 1) = v49;
      v284._countAndFlagsBits = v252;
      v284._object = v51;
      *(_QWORD *)&v285 = v251;
      BYTE8(v285) = v250;
      *(_QWORD *)&v286 = v249;
      *((_QWORD *)&v286 + 1) = v6;
      *(_QWORD *)&v287 = v7;
      *((_QWORD *)&v287 + 1) = v8;
      *(_QWORD *)&v288 = v9;
      *((_QWORD *)&v288 + 1) = v10;
      v289 = v11 & 1;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi27_((uint64_t)&v283);
      outlined init with take of UserGraphError.ErrorType(&v283, (uint64_t)&v290);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v302 = 0uLL;
      swift_allocError();
      *v164 = v290;
      v165 = v294;
      v167 = v291;
      v166 = v292;
      v164[3] = v293;
      v164[4] = v165;
      v164[1] = (__int128)v167;
      v164[2] = v166;
      v168 = v298;
      v170 = v295;
      v169 = v296;
      v164[7] = v297;
      v164[8] = v168;
      v164[5] = v170;
      v164[6] = v169;
      v171 = v302;
      v173 = v299;
      v172 = v300;
      v164[11] = v301;
      v164[12] = v171;
      v164[9] = v173;
      v164[10] = v172;
      outlined retain of [Input]((uint64_t)&v317);
      outlined retain of NodePersonality(&v316);
      outlined retain of [Input]((uint64_t)&v315);
      swift_willThrow();
      return swift_release();
    case 7uLL:
      switch(a4)
      {
        case 0xE000000000000000:
          goto LABEL_19;
        case 0xE000000000000008:
          v161 = v330;
          outlined init with take of NodePersonality(v330, &v319);
          v318 = v161[2];
          swift_retain();
          outlined retain of NodePersonality(&v319);
          swift_bridgeObjectRetain();
          outlined retain of [Input]((uint64_t)&v318);
          v162 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D476897context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(v7, a2, (uint64_t)v161, &v303);
          if (v269)
          {
            outlined release of NodePersonality(&v319);
            outlined release of [Input]((uint64_t)&v318);
            goto LABEL_64;
          }
          v226 = v162;
          outlined release of NodePersonality(&v319);
          outlined release of [Input]((uint64_t)&v318);
          swift_bridgeObjectRelease();
          v95 = MEMORY[0x24BEE4AF8];
          v276._countAndFlagsBits = MEMORY[0x24BEE4AF8];
          v265 = *(_QWORD *)(v226 + 16);
          if (!v265)
          {
LABEL_97:
            swift_bridgeObjectRelease();
            v89 = v303;
            v231 = one-time initialization token for sampler;
            swift_retain();
            if (v231 != -1)
              goto LABEL_118;
            goto LABEL_98;
          }
          v227 = 0;
          v4 = v226 + 32;
          while (v227 < *(_QWORD *)(v226 + 16))
          {
            outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v4, (uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            if ((_QWORD)v295)
            {
              v285 = v292;
              v286 = v293;
              v287 = v294;
              v288 = v295;
              v283 = v290;
              v284 = v291;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v95 + 16) + 1, 1);
              v95 = v276._countAndFlagsBits;
              v229 = *(_QWORD *)(v276._countAndFlagsBits + 16);
              v228 = *(_QWORD *)(v276._countAndFlagsBits + 24);
              if (v229 >= v228 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v228 > 1, v229 + 1, 1);
                v95 = v276._countAndFlagsBits;
              }
              *(_QWORD *)(v95 + 16) = v229 + 1;
              v230 = (_OWORD *)(v95 + 96 * v229);
              v230[4] = v285;
              v230[5] = v286;
              v230[6] = v287;
              v230[7] = v288;
              v230[2] = v283;
              v230[3] = v284;
            }
            else
            {
              outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v290, &demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
            }
            ++v227;
            v4 += 96;
            if (v265 == v227)
              goto LABEL_97;
          }
LABEL_113:
          __break(1u);
          break;
        case 0xE000000000000010:
LABEL_19:
          swift_retain();
          return v303;
        default:
LABEL_20:
          v64 = one-time initialization token for logger;
          swift_retain();
          if (v64 == -1)
            goto LABEL_21;
          break;
      }
      swift_once();
LABEL_21:
      v65 = type metadata accessor for Logger();
      __swift_project_value_buffer(v65, (uint64_t)logger);
      v66 = v330;
      outlined init with take of NodePersonality(v330, &v322);
      v67 = v66[2];
      v321 = v66[1];
      v320 = v67;
      outlined copy of NodePersonality(v4);
      outlined retain of NodePersonality(&v322);
      outlined retain of [Input]((uint64_t)&v321);
      outlined retain of [Input]((uint64_t)&v320);
      outlined copy of NodePersonality(v4);
      outlined retain of NodePersonality(&v322);
      outlined retain of [Input]((uint64_t)&v321);
      outlined retain of [Input]((uint64_t)&v320);
      v68 = Logger.logObject.getter();
      v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = swift_slowAlloc();
        v71 = swift_slowAlloc();
        *(_QWORD *)&v283 = v71;
        *(_DWORD *)v70 = 136315650;
        *(_QWORD *)&v290 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x8000000245FC7BC0, (uint64_t *)&v283);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v70 + 12) = 2080;
        *(_QWORD *)&v290 = v4;
        outlined copy of NodePersonality(v4);
        v72 = String.init<A>(describing:)();
        *(_QWORD *)&v290 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)&v283);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v4);
        outlined consume of NodePersonality(v4);
        *(_WORD *)(v70 + 22) = 2080;
        v74 = v330[3];
        *(_QWORD *)&v290 = 1701080942;
        *((_QWORD *)&v290 + 1) = 0xE400000000000000;
        v276._countAndFlagsBits = v74;
        v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v290 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v290, *((unint64_t *)&v290 + 1), (uint64_t *)&v283);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of NodePersonality(&v322);
        outlined release of [Input]((uint64_t)&v321);
        outlined release of [Input]((uint64_t)&v320);
        outlined release of NodePersonality(&v322);
        outlined release of [Input]((uint64_t)&v321);
        outlined release of [Input]((uint64_t)&v320);
        _os_log_impl(&dword_245E46000, v68, v69, "%s: Called with unhandled node type %s. Node: '%s'", (uint8_t *)v70, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v71, -1, -1);
        MEMORY[0x24954C33C](v70, -1, -1);
      }
      else
      {
        outlined consume of NodePersonality(v4);
        outlined consume of NodePersonality(v4);
        outlined release of NodePersonality(&v322);
        outlined release of [Input]((uint64_t)&v321);
        outlined release of [Input]((uint64_t)&v320);
        outlined release of NodePersonality(&v322);
        outlined release of [Input]((uint64_t)&v321);
        outlined release of [Input]((uint64_t)&v320);
      }

      return v303;
    default:
      goto LABEL_20;
  }
}

uint64_t specialized MetalFunctionNode.setInputs(_:)(uint64_t a1)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v5 = a1 + 32;
    v3 = v16;
    do
    {
      outlined init with copy of MetalFunctionNode(v5, (uint64_t)v13);
      v6 = v14;
      v7 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v16;
      }
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v3 = v16;
      }
      *(_QWORD *)(v3 + 16) = v10 + 1;
      *(_QWORD *)(v3 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v2;
    }
    while (v2);
  }
  v11 = *v1;
  swift_beginAccess();
  *(_QWORD *)(v11 + 96) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for FunctionGraphInsertable.emitFunctionNodes(node:context:into:) in conformance NodePersonality(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;

  return NodePersonality.emitFunctionNodes(node:context:into:)(a1, a2, a3, *v3);
}

uint64_t closure #1 in ShaderGraphNode.mapConnectedInputs(context:into:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  Swift::String v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t result;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  __int128 v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  Swift::String v65;
  uint64_t v66;
  __int128 v67[12];
  __int128 v68;
  uint64_t v69[14];
  char v70[8];
  uint64_t v71;
  __int128 v72;
  Swift::String v73;
  __int128 v74;
  uint64_t v75;
  _OWORD v76[12];
  uint64_t v77;
  _OWORD v78[9];
  _OWORD v79[2];
  Swift::String v80;
  Swift::String v81;
  uint64_t v82;

  v8 = (Swift::String)a1[1];
  v72 = *a1;
  v73 = v8;
  v74 = a1[2];
  v75 = *((_QWORD *)a1 + 6);
  v9 = *(_OWORD *)(a2 + 128);
  v10 = *(_OWORD *)(a2 + 144);
  v11 = *(_OWORD *)(a2 + 96);
  v78[7] = *(_OWORD *)(a2 + 112);
  v78[8] = v9;
  v79[0] = v10;
  *(_OWORD *)((char *)v79 + 9) = *(_OWORD *)(a2 + 153);
  v12 = *(_OWORD *)(a2 + 80);
  v78[4] = *(_OWORD *)(a2 + 64);
  v78[5] = v12;
  v78[6] = v11;
  v13 = *(_OWORD *)(a2 + 16);
  v78[0] = *(_OWORD *)a2;
  v78[1] = v13;
  v14 = *(_OWORD *)(a2 + 48);
  v78[2] = *(_OWORD *)(a2 + 32);
  v78[3] = v14;
  outlined retain of Graph((uint64_t)v78);
  Graph.edge(to:)((uint64_t)&v72, v69);
  v15 = outlined init with take of MetalFunctionNode?((uint64_t)v69, (uint64_t)v70, &demangling cache variable for type metadata for Edge?);
  v16 = v71;
  if (v71)
  {
    v17 = *(uint64_t (**)(uint64_t))(**((_QWORD **)&v72 + 1) + 144);
    v82 = *((_QWORD *)&v72 + 1);
    v18 = v17(v15);
    if (v18 || (v18 = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 144))()) != 0)
    {
      v19 = *(_OWORD *)(a2 + 176);
      v76[10] = *(_OWORD *)(a2 + 160);
      v76[11] = v19;
      v77 = *(_QWORD *)(a2 + 192);
      v20 = *(_OWORD *)(a2 + 112);
      v76[6] = *(_OWORD *)(a2 + 96);
      v76[7] = v20;
      v21 = *(_OWORD *)(a2 + 144);
      v76[8] = *(_OWORD *)(a2 + 128);
      v76[9] = v21;
      v22 = *(_OWORD *)(a2 + 48);
      v76[2] = *(_OWORD *)(a2 + 32);
      v76[3] = v22;
      v23 = *(_OWORD *)(a2 + 80);
      v76[4] = *(_OWORD *)(a2 + 64);
      v76[5] = v23;
      v24 = *(_OWORD *)(a2 + 16);
      v76[0] = *(_OWORD *)a2;
      v76[1] = v24;
      v25 = *a3;
      outlined retain of UserGraphCompiler.CompileContext((uint64_t)v76);
      swift_retain();
      UserGraphCompiler.CompileContext.compiledNode(for:in:)((uint64_t)&v72, v25, (uint64_t)&v65);
      swift_release();
      outlined release of UserGraphCompiler.CompileContext((uint64_t)v76);
      if (v66)
      {
        outlined release of Graph((uint64_t)v78);
        outlined release of Edge?(v69);
        swift_release();
        outlined init with take of MetalFunctionNode((__int128 *)&v65._countAndFlagsBits, (uint64_t)v67);
        v26 = v73;
        v81 = v73;
        *(_OWORD *)a5 = v72;
        *(Swift::String *)(a5 + 16) = v26;
        *(_OWORD *)(a5 + 32) = v74;
        *(_QWORD *)(a5 + 48) = v75;
        outlined init with take of MetalFunctionNode(v67, a5 + 56);
        swift_retain();
        return outlined retain of String((uint64_t)&v81);
      }
      else
      {
        result = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v65, (uint64_t *)&demangling cache variable for type metadata for MetalFunctionNode?);
        v29 = *(_QWORD *)(*a3 + 48);
        if (__OFADD__(v29, 1))
        {
          __break(1u);
        }
        else
        {
          *(_QWORD *)(*a3 + 48) = v29 + 1;
          v63 = type metadata accessor for MetalPassthroughNode();
          v30 = swift_allocObject();
          *(_QWORD *)(v30 + 32) = 0;
          *(_QWORD *)(v30 + 40) = 0;
          *(_QWORD *)(v30 + 48) = MEMORY[0x24BEE4AF8];
          *(_BYTE *)(v30 + 56) = 0;
          *(_QWORD *)(v30 + 16) = v29;
          *(_QWORD *)(v30 + 24) = v18;
          swift_retain();
          swift_retain();
          v31 = specialized MetalShaderProgram.add<A>(_:)(v30, (uint64_t (*)(_QWORD))type metadata accessor for MetalPassthroughNode, (uint64_t)&protocol witness table for MetalPassthroughNode);
          swift_retain();
          swift_release();
          swift_release();
          *(_QWORD *)&v67[0] = 0;
          *((_QWORD *)&v67[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(25);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v67[0] = 0xD000000000000013;
          *((_QWORD *)&v67[0] + 1) = 0x8000000245FC7F20;
          v65._countAndFlagsBits = 1701080942;
          v65._object = (void *)0xE400000000000000;
          v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          String.append(_:)(v65);
          swift_bridgeObjectRelease();
          v33._countAndFlagsBits = 58;
          v33._object = (void *)0xE100000000000000;
          String.append(_:)(v33);
          v34 = v73;
          swift_bridgeObjectRetain();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          v35._countAndFlagsBits = 93;
          v35._object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          v36 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v31 + 152))(*(_QWORD *)&v67[0], *((_QWORD *)&v67[0] + 1));
          v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 120))(v36);
          swift_retain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v67[0] = *(_QWORD *)(a2 + 184);
          *(_QWORD *)(a2 + 184) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, (uint64_t)&v72, isUniquelyReferenced_nonNull_native);
          *(_QWORD *)(a2 + 184) = *(_QWORD *)&v67[0];
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          v39 = v73;
          *(_OWORD *)a5 = v72;
          *(Swift::String *)(a5 + 16) = v39;
          *(_OWORD *)(a5 + 32) = v74;
          *(_QWORD *)(a5 + 48) = v75;
          *(_QWORD *)(a5 + 80) = v63;
          *(_QWORD *)(a5 + 88) = &protocol witness table for MetalPassthroughNode;
          swift_retain();
          swift_bridgeObjectRetain();
          outlined release of Graph((uint64_t)v78);
          outlined release of Edge?(v69);
          result = swift_release();
          *(_QWORD *)(a5 + 56) = v31;
        }
      }
    }
    else
    {
      v40 = v82;
      v65._countAndFlagsBits = v82;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_((uint64_t)&v65);
      *(_QWORD *)&v67[0] = 0;
      *((_QWORD *)&v67[0] + 1) = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(61);
      v41._countAndFlagsBits = 0xD000000000000022;
      v41._object = (void *)0x8000000245FC7EF0;
      String.append(_:)(v41);
      v42 = v73;
      swift_bridgeObjectRetain();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = 0x646F6E206E6F2027;
      v43._object = (void *)0xEB00000000272065;
      String.append(_:)(v43);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 1701080942;
      v45._object = (void *)0xE400000000000000;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46._countAndFlagsBits = 0x3D65707954202E27;
      v46._object = (void *)0xE900000000000027;
      String.append(_:)(v46);
      v47 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 136);
      v48 = swift_retain();
      v49._countAndFlagsBits = v47(v48);
      String.append(_:)(v49);
      swift_release();
      swift_bridgeObjectRelease();
      v50._countAndFlagsBits = 39;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      v51 = v67[0];
      outlined init with take of UserGraphError.ErrorType((__int128 *)&v65._countAndFlagsBits, (uint64_t)v67);
      v68 = v51;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v52 = swift_allocError();
      *v53 = v67[0];
      v54 = v67[4];
      v56 = v67[1];
      v55 = v67[2];
      v53[3] = v67[3];
      v53[4] = v54;
      v53[1] = v56;
      v53[2] = v55;
      v57 = v67[8];
      v59 = v67[5];
      v58 = v67[6];
      v53[7] = v67[7];
      v53[8] = v57;
      v53[5] = v59;
      v53[6] = v58;
      v60 = v68;
      v62 = v67[9];
      v61 = v67[10];
      v53[11] = v67[11];
      v53[12] = v60;
      v53[9] = v62;
      v53[10] = v61;
      swift_willThrow();
      outlined release of Edge?(v69);
      result = outlined release of Graph((uint64_t)v78);
      *a4 = v52;
    }
  }
  else
  {
    outlined release of Graph((uint64_t)v78);
    v28 = v73;
    v80 = v73;
    *(_OWORD *)a5 = v72;
    *(Swift::String *)(a5 + 16) = v28;
    *(_OWORD *)(a5 + 32) = v74;
    *(_QWORD *)(a5 + 48) = v75;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 72) = 0u;
    *(_QWORD *)(a5 + 88) = 0;
    swift_retain();
    return outlined retain of String((uint64_t)&v80);
  }
  return result;
}

uint64_t (*default argument 2 of SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)())()
{
  return default argument 1 of OSSignpostIntervalState.init(id:isOpen:);
}

uint64_t default argument 2 of SGInput.init(name:type:attachment:)()
{
  return 0;
}

uint64_t default argument 2 of SGOutput.init(name:type:attachment:)()
{
  return 0;
}

uint64_t default argument 2 of DataTypeProperty.init(label:type:attributes:index:visible:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 4 of DataTypeProperty.init(label:type:attributes:index:visible:)()
{
  return 1;
}

uint64_t default argument 1 of MetalDataType.Pointer.init(to:isConst:addressSpace:)()
{
  return 0;
}

uint64_t default argument 0 of MetalDataType.Function.init(resultType:argumentTypes:)()
{
  if (one-time initialization token for void != -1)
    swift_once();
  return swift_retain();
}

uint64_t default argument 1 of MetalDataType.Function.init(resultType:argumentTypes:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 1 of MetalDataType.Reference.init(to:isConst:addressSpace:)()
{
  return 0;
}

uint64_t default argument 1 of SGGraph.ReplacementNode.init(name:_:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 10 of NodeDef.init(name:nodeName:inherit:nodegroup:version:isdefaultversion:targets:uiName:inputs:outputs:available:)()
{
  return 0;
}

uint64_t default argument 1 of createDotText(representing:inputNodeIDs:outputNodeIDs:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of createDotText(representing:inputNodeIDs:outputNodeIDs:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 1 of Graph.init(label:inputs:outputs:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of Graph.init(label:inputs:outputs:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 0 of OrderedSet.removeAll(keepingCapacity:)()
{
  return 0;
}

uint64_t outlined retain of Graph(uint64_t a1)
{
  unint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t outlined copy of NodePersonality(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined release of Graph(uint64_t a1)
{
  unint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NodePersonality(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t outlined consume of NodePersonality(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t default argument 1 of OrderedSet.init(minimumCapacity:persistent:)()
{
  return 0;
}

uint64_t default argument 1 of OrderedDictionary.init(minimumCapacity:persistent:)()
{
  return 0;
}

uint64_t default argument 2 of MetalFunctionGraphError.init(_:details:underlyingErrors:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t outlined init with take of SGDataTypeStorage(uint64_t a1, uint64_t a2)
{
  __swift_memcpy65_16(a2, a1);
  return a2;
}

id outlined copy of SGDataTypeStorage(id result, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 23 || a9 == 22)
    return result;
  if (a9 == 6)
    return (id)swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined retain of SGDataTypeStorage(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  return a1;
}

void outlined consume of SGDataTypeStorage(void *a1, id a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a9 == 23 || a9 == 22)
  {

  }
  else if (a9 == 6)
  {
    swift_bridgeObjectRelease();
  }
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance SGDataType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGDataType(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGDataType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SGDataType()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGDataType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef(uint64_t a1)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for CGColorRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  MEMORY[0x24954C264](&protocol conformance descriptor for CGColorRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x24954C264](&protocol conformance descriptor for CGColorRef, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x24954AF98](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SGDataType(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for CGColorRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSURLResourceKey@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x24954AF98](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSURLResourceKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSURLResourceKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(void (*a1)(uint64_t *__return_ptr))
{
  Swift::String v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  a1(&v3);
  v4 = 1701080942;
  v5 = 0xE400000000000000;
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(_QWORD *(*a1)(uint64_t *__return_ptr))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = a1(&v4);
  v2 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 136))(v1);
  swift_release();
  return v2;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<XMLElement>, &demangling cache variable for type metadata for XMLElement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>, (uint64_t)&type metadata for InputSpec, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalConstExprFunctionNode>, &demangling cache variable for type metadata for MetalConstExprFunctionNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<XMLNode>, &demangling cache variable for type metadata for XMLNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.IOSpec>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>, (uint64_t)&type metadata for OutputSpec, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MaterialXDataType)>, (uint64_t)&demangling cache variable for type metadata for (name: String, type: MaterialXDataType), (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(element: XMLElement, node: ShaderGraphNode)>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalSourceGenerator>, (uint64_t *)&demangling cache variable for type metadata for MetalSourceGenerator);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MetalDataType)>, (uint64_t)&demangling cache variable for type metadata for (name: String, type: MetalDataType), (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGOutput)>, (uint64_t)&demangling cache variable for type metadata for (String, SGOutput), (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGInput)>, (uint64_t)&demangling cache variable for type metadata for (String, SGInput), (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int?>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FunctionNodeID>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 176);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[22 * v8 + 4])
          memmove(v12, a4 + 4, 176 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (String, MetalDataType))>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Context #1 in SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedTexture>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Path>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ObjectIdentifier, ShaderGraphNode.ID)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MTLLibrary)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(DataTypeProperty, UInt32)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Element>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Node>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4])
          memmove(v12, a4 + 4, 160 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DebugConfig.Group>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v9 + 4])
          memmove(v13, a4 + 4, 56 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.Implementation>, type metadata accessor for NodeDef.Implementation);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakBox<SGEdge>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = (unint64_t)(v10 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = MEMORY[0x24BEE4AF8] + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 8 * v8)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (_QWORD *)a4)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          swift_arrayInitWithTakeBackToFront();
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t a6, void (*a7)(_QWORD, int64_t, _QWORD *, _QWORD *, uint64_t))
{
  char v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;

  v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    v12 = a2;
    goto LABEL_8;
  }
  v11 = a4[3];
  v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2)
    goto LABEL_8;
  if (v12 + 0x4000000000000000 >= 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v12 = a2;
LABEL_8:
    v13 = a4[2];
    if (v12 <= v13)
      v14 = a4[2];
    else
      v14 = v12;
    if (v14)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v15 = (_QWORD *)swift_allocObject();
      v16 = _swift_stdlib_malloc_size(v15);
      v15[2] = v13;
      v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
      v17 = v15 + 4;
      if ((v10 & 1) != 0)
      {
LABEL_13:
        if (v15 != a4 || v17 >= &a4[3 * v13 + 4])
          memmove(v17, a4 + 4, 24 * v13);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v17 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a7(0, v13, v17, a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v15;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 + 31;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 6);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[8 * v11 + 4])
          memmove(v16, a4 + 4, v11 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<FunctionNodeID>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode.ID>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.IOSpec>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[ShaderGraphNode.ID]>, &demangling cache variable for type metadata for [ShaderGraphNode.ID]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalConstExprFunctionNode>, &demangling cache variable for type metadata for MetalConstExprFunctionNode);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[(FunctionNodeID, MetalFunctionNode)]>, &demangling cache variable for type metadata for [(FunctionNodeID, MetalFunctionNode)]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[TypedTexture]>, &demangling cache variable for type metadata for [TypedTexture]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TextureAssignment>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, type: MaterialXDataType)>, (uint64_t *)&demangling cache variable for type metadata for (name: String, type: MaterialXDataType));
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGNode)>, &demangling cache variable for type metadata for (String, SGNode));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGOutput)>, &demangling cache variable for type metadata for (String, SGOutput));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGInput)>, &demangling cache variable for type metadata for (String, SGInput));
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Output>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Input>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.GeomProp>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef.Implementation>, type metadata accessor for NodeDef.Implementation);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DataTypeProperty>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<FunctionNodeID>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode.ID>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Graph.Adjacent>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Edge>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8])
      memmove(v12, v13, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[112 * v8] || v12 >= &v13[112 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BuiltInDefinition>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedTexture>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureSource>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Path>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BuiltInDefinition.OutputSpec>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BuiltInDefinition.InputSpec>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TopologicalSort.Element>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8])
      memmove(v13, v14, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDef>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[144 * v8])
      memmove(v12, v13, 144 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[144 * v8] || v12 >= &v13[144 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MetalLibrary>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NodeDefinitionStore.Node>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[160 * v8])
      memmove(v12, v13, 160 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[160 * v8] || v12 >= &v13[160 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MetalDataType?)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetalDataType?));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(input: Input, fNode: MetalFunctionNode?)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8)
      memmove(v10 + 4, a4 + 4, 96 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (input: Input, fNode: MetalFunctionNode?));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OrderedSet<Input>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrderedSet<Input>);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Output?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8)
      memmove(v10 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Output?);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (uniformPropertyName: String, type: MetalDataType))>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (uniformPropertyName: String, type: MetalDataType)));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FunctionNodeID, MetalFunctionNode)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<XMLNode>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XMLNode);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, BuiltInDefinition)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v10 + 4, a4 + 4, v8 << 6);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, BuiltInDefinition));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakBox<SGEdge>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v13 >= v14 + 8 * v8)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexingIterator<[SGNode]>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[SGNode]>);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[TypedTexture]>, &demangling cache variable for type metadata for [TypedTexture]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(BuiltInDefinition.InputSpec, SGInput)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BuiltInDefinition.InputSpec, SGInput));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ShaderGraphNode)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  v15 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= (_QWORD *)((char *)v14 + v15))
      memmove(v10 + 4, a4 + 4, v15);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= (_QWORD *)((char *)v13 + v15) || v13 >= (_QWORD *)((char *)v14 + v15))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ShaderGraphNode));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Key, String)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8)
      memmove(v10 + 4, a4 + 4, 96 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Key, String));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, GeomPropDef)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 10 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GeomPropDef));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NodeDef)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 160 * v8)
      memmove(v10 + 4, a4 + 4, 160 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 160 * v8 || v12 >= v13 + 160 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NodeDef));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9])
      memmove(v13, v14, 56 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[56 * v9] || v13 >= &v14[56 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9])
      memmove(v14, v15, 4 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 48 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9])
      memmove(v13, v14, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v9] || v13 >= &v14[24 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 144);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 144 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = v9 << 6;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 24 * v11)
      memmove(v13 + 4, a4 + 4, 24 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 24 * v11 || v15 >= v16 + 24 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_1Tm(v17);
        return outlined init with take of MetalFunctionNode(a1, v17);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v18 = *(_OWORD *)(a2 + 16);
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
  swift_retain();
  return outlined retain of String((uint64_t)&v18);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v18 = *(_OWORD *)(a2 + 16);
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
  swift_retain();
  return outlined retain of String((uint64_t)&v18);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of GeomPropDef((uint64_t)a1, v18[7] + (v12 << 6));
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of GeomPropDef((uint64_t)a1, v18[7] + (v12 << 6));
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of NodeDef((uint64_t)a1, v18[7] + 144 * v12);
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return outlined assign with take of NodeDef((uint64_t)a1, v18[7] + 144 * v12);
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_bridgeObjectRelease();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, _OWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  char v21;
  _BYTE v22[80];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7] + 48 * v10;
      outlined consume of NodePersonality(*(_QWORD *)v17);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v19 = a1[1];
      *(_OWORD *)v17 = *a1;
      *(_OWORD *)(v17 + 16) = v19;
      *(_OWORD *)(v17 + 25) = *(_OWORD *)((char *)a1 + 25);
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v20;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with take of SGDataTypeStorage((uint64_t)a2, (uint64_t)v22);
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
  outlined retain of SGDataTypeStorage((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  return swift_retain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, _OWORD *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  _BYTE v23[80];

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    v18 = *v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (uint64_t *)(v18[7] + 16 * v12);
      result = swift_bridgeObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = v21;
  v18 = *v5;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with take of SGDataTypeStorage((uint64_t)a3, (uint64_t)v23);
  specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
  outlined retain of SGDataTypeStorage((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  return swift_retain();
}

void specialized static NodePersonality.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_245E53A5C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  _BYTE v7[176];
  _BYTE v8[240];

  outlined init with take of SGDataTypeStorage(v1 + 16, (uint64_t)v7);
  if (v0 >> 61)
    goto LABEL_5;
  v2 = *(_QWORD *)(v1 + 88);
  outlined init with take of SGDataTypeStorage(v0 + 16, (uint64_t)v8);
  v3 = *(_QWORD *)(v0 + 88);
  outlined retain of SGDataTypeStorage((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  outlined retain of SGDataTypeStorage((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of SGDataTypeStorage);
  swift_retain();
  swift_retain();
  specialized static SGDataTypeStorage.== infix(_:_:)((uint64_t)v7);
  if ((v4 & 1) == 0)
  {
    swift_release();
    swift_release();
    outlined retain of SGDataTypeStorage((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
    outlined retain of SGDataTypeStorage((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
LABEL_5:
    v5 = 0;
    return v5 & 1;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v3);
  swift_release();
  swift_release();
  outlined retain of SGDataTypeStorage((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  outlined retain of SGDataTypeStorage((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of SGDataTypeStorage);
  return v5 & 1;
}

unint64_t specialized NodePersonalityType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NodePersonalityType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

_QWORD *outlined init with take of NodePersonality(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return a2;
}

unint64_t *outlined retain of NodePersonality(unint64_t *a1)
{
  outlined copy of NodePersonality(*a1);
  return a1;
}

uint64_t outlined retain of [Input](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t *outlined release of NodePersonality(unint64_t *a1)
{
  outlined consume of NodePersonality(*a1);
  return a1;
}

uint64_t outlined release of [Input](uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DataTypeProperty, UInt32));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (element: XMLElement, node: ShaderGraphNode));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MTLLibrary));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 176 * a1 + 32;
    v6 = a3 + 176 * v4;
    if (v5 >= v6 || v5 + 176 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (String, MetalDataType)));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 160 * a1 + 32;
    v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MetalShaderProgram.add<A>(_:)(uint64_t a1)
{
  return specialized MetalShaderProgram.add<A>(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for MetalLiteralValueNode, (uint64_t)&protocol witness table for MetalLiteralValueNode);
}

{
  return specialized MetalShaderProgram.add<A>(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for MetalPassthroughNode, (uint64_t)&protocol witness table for MetalPassthroughNode);
}

{
  return specialized MetalShaderProgram.add<A>(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for MetalFunctionCallNode, (uint64_t)&protocol witness table for MetalFunctionCallNode);
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;

  v3 = (_QWORD *)(v1 + 16);
  swift_beginAccess();
  v4 = *(_QWORD **)(v1 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 16) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v3 = v4;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v3 = v4;
  }
  v8 = type metadata accessor for RESurfaceShaderFunctionNode();
  v12 = v8;
  v13 = &protocol witness table for RESurfaceShaderFunctionNode;
  *(_QWORD *)&v11 = a1;
  v4[2] = v7 + 1;
  outlined init with take of MetalFunctionNode(&v11, (uint64_t)&v4[5 * v7 + 4]);
  swift_endAccess();
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 88);
  v12 = v8;
  v13 = &protocol witness table for RESurfaceShaderFunctionNode;
  *(_QWORD *)&v11 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  swift_endAccess();
  return a1;
}

{
  return specialized MetalShaderProgram.add<A>(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for MetalFunctionParameterNode, (uint64_t)&protocol witness table for MetalFunctionParameterNode);
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v2 = v1;
  v4 = (_QWORD *)(v1 + 16);
  swift_beginAccess();
  v5 = *(_QWORD **)(v2 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v4 = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v4 = v5;
  }
  v9 = type metadata accessor for MetalFunctionDefinitionNode();
  v14 = v9;
  v15 = &protocol witness table for MetalFunctionDefinitionNode;
  *(_QWORD *)&v13 = a1;
  v5[2] = v8 + 1;
  outlined init with take of MetalFunctionNode(&v13, (uint64_t)&v5[5 * v8 + 4]);
  v10 = swift_endAccess();
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(v10);
  v14 = v9;
  v15 = &protocol witness table for MetalFunctionDefinitionNode;
  *(_QWORD *)&v13 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v13, v11);
  swift_endAccess();
  return a1;
}

{
  return specialized MetalShaderProgram.add<A>(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for MetalStructGetterNode, (uint64_t)&protocol witness table for MetalStructGetterNode);
}

{
  return specialized MetalShaderProgram.add<A>(_:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for MetalStructGetterOffsetNode, (uint64_t)&protocol witness table for MetalStructGetterOffsetNode);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph5InputVG_AH5input_AF17MetalFunctionNode_pSg01fJ0tsAE_pTg504_s11d9Graph0aB4j77V18mapConnectedInputs33_F5CF7A5B5C82F3474CCCF23EC0D47689LL7context4intoSayAA5f13V5input_AA013hI85C0_pSg01fC0tGAA04UserB8CompilerC14CompileContextVz_AA0tA7ProgramCztKFAiJ_AlMtAIKXEfU_AF04UserE8CompilerC14CompileContextVAF0deJ0VAF0hD7ProgramCTf1cn_nTf4nngn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _OWORD v33[6];
  uint64_t v34;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v34 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v34;
    v11 = (_QWORD *)(a1 + 80);
    while (1)
    {
      v12 = *(v11 - 5);
      v13 = *(v11 - 4);
      v14 = *(v11 - 3);
      v15 = *(v11 - 2);
      v16 = *((_BYTE *)v11 - 8);
      v17 = *v11;
      *(_QWORD *)&v27 = *(v11 - 6);
      *((_QWORD *)&v27 + 1) = v12;
      v28 = v13;
      v29 = v14;
      v30 = v15;
      v31 = v16;
      v32 = v17;
      swift_retain();
      swift_bridgeObjectRetain();
      closure #1 in ShaderGraphNode.mapConnectedInputs(context:into:)(&v27, a2, a4, &v26, (uint64_t)v33);
      if (v5)
        break;
      v5 = 0;
      swift_bridgeObjectRelease();
      swift_release();
      v34 = v7;
      v19 = *(_QWORD *)(v7 + 16);
      v18 = *(_QWORD *)(v7 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v7 = v34;
      }
      v11 += 7;
      *(_QWORD *)(v7 + 16) = v19 + 1;
      v20 = (_OWORD *)(v7 + 96 * v19);
      v21 = v33[1];
      v20[2] = v33[0];
      v20[3] = v21;
      v22 = v33[2];
      v23 = v33[3];
      v24 = v33[5];
      v20[6] = v33[4];
      v20[7] = v24;
      v20[4] = v22;
      v20[5] = v23;
      if (!--v6)
        return v7;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v7;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24954C24C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of MetalFunctionNode(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi27_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x7000000000000000;
  return result;
}

uint64_t outlined init with take of UserGraphError.ErrorType(__int128 *a1, uint64_t a2)
{
  __swift_memcpy192_8(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UserGraphError and conformance UserGraphError;
  if (!lazy protocol witness table cache variable for type UserGraphError and conformance UserGraphError)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for UserGraphError, &type metadata for UserGraphError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserGraphError and conformance UserGraphError);
  }
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi30_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x7C00000000000000;
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi47_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 13;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t outlined destroy of (input: Input, fNode: MetalFunctionNode?)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 10;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi28_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x7400000000000000;
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t specialized MetalShaderProgram.add<A>(_:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = v3;
  v8 = (_QWORD *)(v3 + 16);
  swift_beginAccess();
  v9 = *(_QWORD **)(v6 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v8 = v9;
  }
  v13 = a2(0);
  v18 = v13;
  v19 = a3;
  *(_QWORD *)&v17 = a1;
  v9[2] = v12 + 1;
  outlined init with take of MetalFunctionNode(&v17, (uint64_t)&v9[5 * v12 + 4]);
  v14 = swift_endAccess();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(v14);
  v18 = v13;
  v19 = a3;
  *(_QWORD *)&v17 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v17, v15);
  swift_endAccess();
  return a1;
}

{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = v3;
  v8 = (_QWORD *)(v3 + 16);
  swift_beginAccess();
  v9 = *(_QWORD **)(v6 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v9, &demangling cache variable for type metadata for _ContiguousArrayStorage<MetalFunctionNode>, &demangling cache variable for type metadata for MetalFunctionNode);
    *v8 = v9;
  }
  v13 = a2(0);
  v18 = v13;
  v19 = a3;
  *(_QWORD *)&v17 = a1;
  v9[2] = v12 + 1;
  outlined init with take of MetalFunctionNode(&v17, (uint64_t)&v9[5 * v12 + 4]);
  v14 = swift_endAccess();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(v14);
  v18 = v13;
  v19 = a3;
  *(_QWORD *)&v17 = a1;
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v17, v15);
  swift_endAccess();
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 24 * a1 + 32;
    v7 = a3 + 24 * v5;
    if (v6 >= v7 || v6 + 24 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType;
  if (!lazy protocol witness table cache variable for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodePersonality.ShaderType, &type metadata for NodePersonality.ShaderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodePersonality.ShaderType and conformance NodePersonality.ShaderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodePersonality and conformance NodePersonality()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodePersonality and conformance NodePersonality;
  if (!lazy protocol witness table cache variable for type NodePersonality and conformance NodePersonality)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodePersonality, &type metadata for NodePersonality);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodePersonality and conformance NodePersonality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NodePersonalityType and conformance NodePersonalityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NodePersonalityType and conformance NodePersonalityType;
  if (!lazy protocol witness table cache variable for type NodePersonalityType and conformance NodePersonalityType)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for NodePersonalityType, &type metadata for NodePersonalityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NodePersonalityType and conformance NodePersonalityType);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for NodePersonality(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of NodePersonality(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for NodePersonality(unint64_t *a1)
{
  return outlined consume of NodePersonality(*a1);
}

unint64_t *assignWithCopy for NodePersonality(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of NodePersonality(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of NodePersonality(v4);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for NodePersonality(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of NodePersonality(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodePersonality(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x79 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 121);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x78)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NodePersonality(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x78)
  {
    *(_QWORD *)result = a2 - 121;
    if (a3 >= 0x79)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x79)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for NodePersonality(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 61;
  if ((_DWORD)v1 == 7)
    return (*a1 >> 3) + 7;
  else
    return v1;
}

_QWORD *destructiveProjectEnumData for NodePersonality(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for NodePersonality(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 7)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 61;
  }
  else
  {
    v2 = 8 * (a2 - 7);
    v3 = 0xE000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for NodePersonality()
{
  return &type metadata for NodePersonality;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NodePersonality.ShaderType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NodePersonality.ShaderType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245E56760 + 4 * byte_245FBE575[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245E56794 + 4 * byte_245FBE570[v4]))();
}

uint64_t sub_245E56794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E5679C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245E567A4);
  return result;
}

uint64_t sub_245E567B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245E567B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245E567BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E567C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for NodePersonality.ShaderType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for NodePersonality.ShaderType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NodePersonality.ShaderType()
{
  return &type metadata for NodePersonality.ShaderType;
}

uint64_t getEnumTagSinglePayload for NodePersonalityType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NodePersonalityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_245E568D4 + 4 * byte_245FBE57F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_245E56908 + 4 * byte_245FBE57A[v4]))();
}

uint64_t sub_245E56908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E56910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245E56918);
  return result;
}

uint64_t sub_245E56924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245E5692CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_245E56930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E56938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for NodePersonalityType(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NodePersonalityType()
{
  return &type metadata for NodePersonalityType;
}

void type metadata accessor for CGColorSpaceRef(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, &lazy cache variable for type metadata for CGColorSpaceRef);
}

void type metadata accessor for SGBlending(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, &lazy cache variable for type metadata for SGBlending);
}

void type metadata accessor for SGLightingModel(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, &lazy cache variable for type metadata for SGLightingModel);
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, &lazy cache variable for type metadata for NSURLResourceKey);
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, &lazy cache variable for type metadata for CGColorRef);
}

void type metadata accessor for SGDataType(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, &lazy cache variable for type metadata for SGDataType);
}

uint64_t base witness table accessor for Equatable in SGDataType()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, (uint64_t (*)(uint64_t))type metadata accessor for SGDataType, (uint64_t)&protocol conformance descriptor for SGDataType);
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t lazy protocol witness table accessor for type SGDataType and conformance SGDataType(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24954C264](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t outlined assign with take of NodeDef(uint64_t a1, uint64_t a2)
{
  assignWithTake for NodeDef(a2, a1);
  return a2;
}

uint64_t outlined assign with take of GeomPropDef(uint64_t a1, uint64_t a2)
{
  assignWithTake for GeomPropDef(a2, a1);
  return a2;
}

uint64_t outlined retain of String(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of MetalFunctionNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of MetalFunctionNode?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *outlined release of Edge?(uint64_t *a1)
{
  outlined consume of Edge?(*a1, a1[1]);
  return a1;
}

uint64_t outlined consume of Edge?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of UserGraphCompiler.CompileContext(uint64_t a1)
{
  unint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of UserGraphCompiler.CompileContext(uint64_t a1)
{
  unint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NodePersonality(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for CGColorSpaceRef(a1, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
}

void type metadata accessor for CGColorSpaceRef(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void MetalDataType.__allocating_init(note:typeName:size:alignment:isConst:fields:)()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t OrderedSet.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a4;
  v23 = a5;
  v8 = type metadata accessor for Mirror.AncestorRepresentation();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  v26 = a2;
  v24 = a2;
  v15 = *MEMORY[0x24BEE4368];
  v16 = type metadata accessor for Mirror.DisplayStyle();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  type metadata accessor for OrderedSet(0, a3, v22, v18);
  v19 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE43C0], v8);
  swift_retain();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BEE43C0];
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedSet<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return OrderedSet.customMirror.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

Swift::String __swiftcall NestedError.summarized()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t i;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String result;
  uint64_t v21;

  v1 = v0;
  v21 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (unint64_t *)(v2 + 16);
  swift_retain();
  outlined copy of NestedError(v1);
  swift_beginAccess();
  for (i = *v3; (~*v3 & 0xF000000000000007) != 0; i = *v3)
  {
    if ((i & 0x8000000000000000) != 0)
    {
      v11 = *(void **)(i + 16);
      v10 = *(_QWORD *)(i + 24);
      *v3 = v10;
      v12 = v11;
    }
    else
    {
      *v3 = 0xF000000000000007;
      v10 = i;
    }
    outlined copy of NestedError(v10);
    outlined consume of NestedError?(i);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(describing:)();
    v15 = v14;
    v16 = v21;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
      v16 = v21;
    }
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      v16 = v21;
    }
    *(_QWORD *)(v16 + 16) = v18 + 1;
    v19 = v16 + 16 * v18;
    *(_QWORD *)(v19 + 32) = v13;
    *(_QWORD *)(v19 + 40) = v15;
  }
  swift_release_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v5 = BidirectionalCollection<>.joined(separator:)();
  v7 = v6;
  swift_release();
  v8 = v5;
  v9 = v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

void NestedError.last()(unint64_t a1)
{
  uint64_t v2;
  id v3;

  outlined copy of NestedError(a1);
  specialized Sequence.reversed()(a1);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(id *)(v2 + 32);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void specialized Sequence.reversed()(unint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t i;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  _QWORD *v14;

  specialized _copySequenceToContiguousArray<A>(_:)(a1);
  v3 = v2;
  v4 = v2[2];
  outlined consume of NestedError(a1);
  if (v4 < 2)
    return;
  v5 = 0;
  v6 = v4 >> 1;
  for (i = v4 + 3; ; --i)
  {
    v8 = i - 4;
    if (v5 == i - 4)
      goto LABEL_4;
    v9 = v3[2];
    if (v5 >= v9)
      break;
    if (v8 >= v9)
      goto LABEL_13;
    v10 = (void *)v3[v5 + 4];
    v11 = (void *)v3[i];
    v12 = v10;
    v13 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    v14 = &v3[v5];

    v14[4] = v11;
    if (v8 >= v3[2])
      goto LABEL_14;

    v3[i] = v10;
LABEL_4:
    if (v6 == ++v5)
      return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
}

uint64_t specialized Sequence.reversed()(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v15 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease();
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    v14 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v14 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v6 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        if ((v15 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x24954B748](v5, v15);
          v10 = (id)MEMORY[0x24954B748](v3 - (v5 + 1), v15);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v7)
            goto LABEL_34;
          v8 = *(id *)(v15 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v7)
            goto LABEL_37;
          v9 = (uint64_t)v8;
          v10 = *(id *)(v15 + 32 + 8 * v1);
        }
        v11 = v10;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v15 < 0
          || (v15 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        }
        v12 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v12 + 32) = v11;
        specialized Array._endMutation()();
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v15 < 0
          || (v15 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;

        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1 + 0x20) = v9;
        specialized Array._endMutation()();
      }
      v5 = v6;
      if (v4 == v6)
        return v15;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    v15 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

id NestedError.first()(unint64_t a1)
{
  id v1;
  id v2;

  v1 = (id)a1;
  if ((a1 & 0x8000000000000000) != 0)
    v1 = *(id *)(a1 + 16);
  v2 = v1;
  return v1;
}

uint64_t NestedError.debugDescription.getter(unint64_t a1)
{
  _QWORD *v1;

  if ((a1 & 0x8000000000000000) != 0)
    a1 = *(_QWORD *)(a1 + 16);
  v1 = (id)a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NestedError()
{
  _QWORD **v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *v0;
  if (((unint64_t)*v0 & 0x8000000000000000) != 0)
    v1 = (_QWORD *)v1[2];
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t NestedError.makeIterator()(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Error>>);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in NestedError.makeIterator();
  *(_QWORD *)(v3 + 24) = v2;
  outlined copy of NestedError(a1);
  return v3;
}

void closure #1 in NestedError.makeIterator()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v4 = (unint64_t *)(a1 + 16);
  swift_beginAccess();
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if ((~v6 & 0xF000000000000007) != 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      v5 = *(void **)(v6 + 16);
      v8 = *(_QWORD *)(v6 + 24);
      swift_beginAccess();
      v9 = *v4;
      *v4 = v8;
      v10 = v5;
      outlined copy of NestedError(v8);
      outlined consume of NestedError?(v9);
    }
    else
    {
      swift_beginAccess();
      v7 = *v4;
      *v4 = 0xF000000000000007;
      outlined copy of NestedError(v6);
      outlined consume of NestedError?(v7);
      v5 = (void *)v6;
    }
  }
  *a2 = v5;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance NestedError@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Error>>);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in NestedError.makeIterator();
  *(_QWORD *)(result + 24) = v4;
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance NestedError()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NestedError()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  v3 = v2;
  outlined consume of NestedError(v1);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NestedError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NestedError()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1)
{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;

  v4 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v4 + 24) >> 1)
    return a2();
  return result;
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(_QWORD, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v2;
  if ((result & 1) == 0)
    return a1(0, *(_QWORD *)(v2 + 16) + 1, 1);
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
    return a2(v3 > 1);
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = type metadata accessor for URL();
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, a2, v6);
}

unint64_t specialized NestedError.init(_:_:)(uint64_t a1, id a2)
{
  id v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = v7;

  }
  else
  {

    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
  }
  return v5 | 0x8000000000000000;
}

uint64_t sub_245E57CB4()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if ((~v1 & 0xF000000000000007) != 0)
    outlined consume of NestedError(v1);
  return swift_deallocObject();
}

void outlined consume of NestedError(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
    swift_release();
  else

}

id outlined copy of NestedError(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
    return (id)swift_retain();
  else
    return (id)a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24954C258](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void outlined consume of NestedError?(unint64_t a1)
{
  if ((~a1 & 0xF000000000000007) != 0)
    outlined consume of NestedError(a1);
}

void partial apply for closure #1 in NestedError.makeIterator()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in NestedError.makeIterator()(v1, a1);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NestedError()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type AnyIterator<Error> and conformance AnyIterator<A>, &demangling cache variable for type metadata for AnyIterator<Error>, MEMORY[0x24BEE2420]);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24954C264](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for NestedError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of NestedError(*a2);
  *a1 = v3;
  return a1;
}

void destroy for NestedError(unint64_t *a1)
{
  outlined consume of NestedError(*a1);
}

unint64_t *assignWithCopy for NestedError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of NestedError(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of NestedError(v4);
  return a1;
}

unint64_t *assignWithTake for NestedError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of NestedError(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NestedError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NestedError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for NestedError(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *destructiveProjectEnumData for NestedError(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for NestedError(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for NestedError()
{
  return &type metadata for NestedError;
}

uint64_t sub_245E57F5C()
{
  uint64_t v0;

  outlined consume of NestedError(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t specialized Array.count.getter(unint64_t a1)
{
  uint64_t v2;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

void *RESurfaceShaderMaterial.surfaceShaderFunctionName.unsafeMutableAddressor()
{
  return &static RESurfaceShaderMaterial.surfaceShaderFunctionName;
}

void *RESurfaceShaderMaterial.geometryModifierFunctionName.unsafeMutableAddressor()
{
  return &static RESurfaceShaderMaterial.geometryModifierFunctionName;
}

uint64_t RESurfaceShaderMaterial.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RESurfaceShaderMaterial.surfaceShader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  outlined copy of NodePersonality(v3);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderMaterial.geometryModifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v1 + 64, a1, &demangling cache variable for type metadata for ShaderGraphNode?);
}

uint64_t RESurfaceShaderMaterial.graph.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Graph(v1 + 112, a1);
}

uint64_t outlined init with copy of Graph(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Graph(a2, a1);
  return a2;
}

uint64_t RESurfaceShaderMaterial.uniforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderMaterial.textureAssignments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RESurfaceShaderMaterial.customUniformsType.getter()
{
  return swift_retain();
}

double RESurfaceShaderMaterial.init(name:surfaceShader:geometryModifier:graph:uniforms:textureAssignments:customUniformsType:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double result;
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  char v36;
  _BYTE v37[176];
  char v38;

  outlined init with take of MetalFunctionNode?(a4, (uint64_t)v34, &demangling cache variable for type metadata for ShaderGraphNode?);
  v17 = a5[6];
  *(_OWORD *)&v37[119] = a5[7];
  v18 = a5[9];
  *(_OWORD *)&v37[135] = a5[8];
  *(_OWORD *)&v37[151] = v18;
  *(_OWORD *)&v37[160] = *(_OWORD *)((char *)a5 + 153);
  v19 = a5[2];
  *(_OWORD *)&v37[55] = a5[3];
  v20 = a5[5];
  *(_OWORD *)&v37[71] = a5[4];
  v21 = v35;
  v22 = v36;
  v23 = *a3;
  v38 = a3[5] & 1;
  v24 = v38;
  *(_OWORD *)&v37[87] = v20;
  *(_OWORD *)&v37[103] = v17;
  v25 = a5[1];
  *(_OWORD *)&v37[7] = *a5;
  *(_OWORD *)&v37[23] = v25;
  *(_OWORD *)&v37[39] = v19;
  v26 = v34[0];
  v27 = v34[1];
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = v23;
  *(_OWORD *)(a9 + 24) = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(a9 + 40) = *(_OWORD *)(a3 + 3);
  *(_BYTE *)(a9 + 56) = v24;
  *(_OWORD *)(a9 + 64) = v26;
  *(_OWORD *)(a9 + 80) = v27;
  *(_QWORD *)(a9 + 96) = v21;
  *(_BYTE *)(a9 + 104) = v22;
  v28 = *(_OWORD *)&v37[128];
  *(_OWORD *)(a9 + 217) = *(_OWORD *)&v37[112];
  *(_OWORD *)(a9 + 233) = v28;
  v29 = *(_OWORD *)&v37[160];
  *(_OWORD *)(a9 + 249) = *(_OWORD *)&v37[144];
  *(_OWORD *)(a9 + 265) = v29;
  v30 = *(_OWORD *)&v37[32];
  *(_OWORD *)(a9 + 153) = *(_OWORD *)&v37[48];
  *(_OWORD *)(a9 + 169) = *(_OWORD *)&v37[64];
  v31 = *(_OWORD *)&v37[96];
  *(_OWORD *)(a9 + 185) = *(_OWORD *)&v37[80];
  *(_OWORD *)(a9 + 201) = v31;
  result = *(double *)v37;
  v33 = *(_OWORD *)&v37[16];
  *(_OWORD *)(a9 + 105) = *(_OWORD *)v37;
  *(_OWORD *)(a9 + 121) = v33;
  *(_OWORD *)(a9 + 137) = v30;
  *(_QWORD *)(a9 + 288) = a6;
  *(_QWORD *)(a9 + 296) = a7;
  *(_QWORD *)(a9 + 304) = a8;
  return result;
}

unint64_t static RESurfaceShaderMaterial.surfaceShaderFunctionName.getter()
{
  return 0xD000000000000018;
}

unint64_t static RESurfaceShaderMaterial.geometryModifierFunctionName.getter()
{
  return 0xD00000000000001BLL;
}

void *RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, void *a7@<X8>)
{
  uint64_t v7;
  void *result;
  _BYTE __src[312];

  result = specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(a1, a2, a3, a4, a5, a6, __src);
  if (!v7)
    return memcpy(a7, __src, 0x138uLL);
  return result;
}

{
  uint64_t v7;
  uint64_t v14;
  void *result;
  _BYTE __src[312];

  v14 = specialized Dictionary<>.init(_:)(a3);
  result = specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(a1, a2, v14, a4, a5, a6, __src);
  if (!v7)
    return memcpy(a7, __src, 0x138uLL);
  return result;
}

uint64_t $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_signpost_type_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v17;
  os_signpost_id_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v21 = type metadata accessor for OSSignpostError();
  v0 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSSignpostID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v20 - v8;
  v10 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v11 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v12 = v21;
    v13 = v7;
    v14 = v3;
    if ((*(unsigned int (**)(char *, uint64_t))(v0 + 88))(v2, v21) == *MEMORY[0x24BEE7810])
    {
      v15 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v12);
      v15 = "";
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v13, v9, v14);
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    v18 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v10, v11, v18, "transform", v15, v17, 2u);
    MEMORY[0x24954C33C](v17, -1, -1);

    v19 = *(void (**)(char *, uint64_t))(v4 + 8);
    v19(v9, v14);
    return ((uint64_t (*)(char *, uint64_t))v19)(v13, v14);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
}

uint64_t Graph.surfaceNode()@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38[12];
  _OWORD v39[12];
  __int128 v40;
  __int128 v41;
  _OWORD v42[3];
  uint64_t v43;

  v3 = v1[9];
  v41 = v1[8];
  v42[0] = v3;
  *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v1 + 153);
  Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v41, (uint64_t)v39);
  v4 = *(_QWORD *)&v39[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v36 = a1;
  v43 = v5;
  if (v6)
  {
    v7 = (uint64_t *)(v5 + 40);
    v8 = MEMORY[0x24BEE4AF8];
    do
    {
      v9 = *(v7 - 1);
      if (v9 >> 61 == 5)
      {
        v10 = *v7;
        v11 = v7[1];
        v37 = *((_OWORD *)v7 + 1);
        v12 = *((_BYTE *)v7 + 32);
        v13 = *(_QWORD *)(v9 + 16);
        v14 = *(_QWORD *)(v9 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v9);
        if (specialized Surface.init(nodeDefID:)(v13, v14) >= 3u)
        {
          outlined consume of NodePersonality(v9);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v39[0] = v8;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
            v8 = *(_QWORD *)&v39[0];
          }
          v17 = *(_QWORD *)(v8 + 16);
          v16 = *(_QWORD *)(v8 + 24);
          if (v17 >= v16 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
            v8 = *(_QWORD *)&v39[0];
          }
          *(_QWORD *)(v8 + 16) = v17 + 1;
          v18 = v8 + 48 * v17;
          *(_QWORD *)(v18 + 32) = v9;
          *(_QWORD *)(v18 + 40) = v10;
          *(_QWORD *)(v18 + 48) = v11;
          *(_OWORD *)(v18 + 56) = v37;
          *(_BYTE *)(v18 + 72) = v12;
        }
      }
      v7 += 6;
      --v6;
    }
    while (v6);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v8 + 16))
  {
    v19 = *(_QWORD *)(v8 + 32);
    v20 = *(_QWORD *)(v8 + 40);
    v22 = *(_QWORD *)(v8 + 48);
    v21 = *(_QWORD *)(v8 + 56);
    v23 = *(_QWORD *)(v8 + 64);
    v24 = *(_BYTE *)(v8 + 72);
    outlined copy of NodePersonality(v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_release();
    *(_QWORD *)v36 = v19;
    *(_QWORD *)(v36 + 8) = v20;
    *(_QWORD *)(v36 + 16) = v22;
    *(_QWORD *)(v36 + 24) = v21;
    *(_QWORD *)(v36 + 32) = v23;
    *(_BYTE *)(v36 + 40) = v24;
  }
  else
  {
    swift_release();
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi35_((uint64_t)v38);
    outlined init with take of UserGraphError.ErrorType(v38, (uint64_t)v39);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v40 = 0uLL;
    swift_allocError();
    *v26 = v39[0];
    v27 = v39[4];
    v29 = v39[1];
    v28 = v39[2];
    v26[3] = v39[3];
    v26[4] = v27;
    v26[1] = v29;
    v26[2] = v28;
    v30 = v39[8];
    v32 = v39[5];
    v31 = v39[6];
    v26[7] = v39[7];
    v26[8] = v30;
    v26[5] = v32;
    v26[6] = v31;
    v33 = v40;
    v35 = v39[9];
    v34 = v39[10];
    v26[11] = v39[11];
    v26[12] = v33;
    v26[9] = v35;
    v26[10] = v34;
    return swift_willThrow();
  }
  return result;
}

uint64_t Graph.geometryModifierNode()@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  _OWORD v29[2];

  v3 = v1[9];
  v28 = v1[8];
  v29[0] = v3;
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v1 + 153);
  Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v28, (uint64_t)&v27);
  v4 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 40);
    v7 = MEMORY[0x24BEE4AF8];
    do
    {
      v8 = *(v6 - 1);
      if (v8 >> 61 == 5)
      {
        v9 = *v6;
        v10 = v6[1];
        v26 = *((_OWORD *)v6 + 1);
        v11 = *((_BYTE *)v6 + 32);
        v12 = *(_QWORD *)(v8 + 16);
        v13 = *(_QWORD *)(v8 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v8);
        if (specialized Surface.init(nodeDefID:)(v12, v13) == 3)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v27 = v7;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
            v7 = v27;
          }
          v15 = v26;
          v17 = *(_QWORD *)(v7 + 16);
          v16 = *(_QWORD *)(v7 + 24);
          if (v17 >= v16 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
            v15 = v26;
            v7 = v27;
          }
          *(_QWORD *)(v7 + 16) = v17 + 1;
          v18 = v7 + 48 * v17;
          *(_QWORD *)(v18 + 32) = v8;
          *(_QWORD *)(v18 + 40) = v9;
          *(_QWORD *)(v18 + 48) = v10;
          *(_OWORD *)(v18 + 56) = v15;
          *(_BYTE *)(v18 + 72) = v11;
        }
        else
        {
          outlined consume of NodePersonality(v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      v6 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + 16))
  {
    v19 = *(_QWORD *)(v7 + 32);
    v20 = *(_QWORD *)(v7 + 40);
    v21 = *(_QWORD *)(v7 + 48);
    v22 = *(_QWORD *)(v7 + 56);
    v23 = *(_QWORD *)(v7 + 64);
    v24 = *(_BYTE *)(v7 + 72);
    outlined copy of NodePersonality(v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  result = swift_release();
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v22;
  *(_QWORD *)(a1 + 32) = v23;
  *(_BYTE *)(a1 + 40) = v24;
  return result;
}

void Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)(a1, a3, a4);
}

uint64_t Graph.replaceRootNodeWithInternal(root:customUniformsType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  BOOL v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  _OWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  __int128 *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  Swift::String v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char v144;
  char v145;
  uint64_t v146;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  unint64_t v199[5];
  char v200;
  unint64_t v201;
  __int128 v202;
  _QWORD *v203;
  uint64_t v204;
  char v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209[8];
  __int128 v210;
  char v211[8];
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  __int128 v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  __int128 v224;
  __int128 v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD v236[5];
  char v237;
  uint64_t v238;
  _QWORD v239[5];
  char v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  _QWORD v249[5];
  char v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  _QWORD *v265;

  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 >> 61 != 5)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi38_((uint64_t)&v177);
    *(_QWORD *)&v186 = 0;
    *((_QWORD *)&v186 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v25._countAndFlagsBits = 0xD000000000000035;
    v25._object = (void *)0x8000000245FC8120;
    String.append(_:)(v25);
    v26._countAndFlagsBits = 0xD000000000000022;
    v26._object = (void *)0x8000000245FC8160;
    String.append(_:)(v26);
    v27 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)&v167 = 1701080942;
    *((_QWORD *)&v167 + 1) = 0xE400000000000000;
    v176 = v27;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 1701080942;
    v29._object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30 = 0xD000000000000012;
    v31 = 0x8000000245FC8190;
LABEL_29:
    String.append(_:)(*(Swift::String *)&v30);
    v32 = v186;
    outlined init with take of UserGraphError.ErrorType(&v177, (uint64_t)&v186);
    v198 = v32;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
LABEL_30:
    swift_allocError();
    *v33 = v186;
    v34 = v190;
    v36 = v187;
    v35 = v188;
    v33[3] = v189;
    v33[4] = v34;
    v33[1] = v36;
    v33[2] = v35;
    v37 = v194;
    v39 = v191;
    v38 = v192;
    v33[7] = v193;
    v33[8] = v37;
    v33[5] = v39;
    v33[6] = v38;
    v40 = v198;
    v42 = v195;
    v41 = v196;
    v33[11] = v197;
    v33[12] = v40;
    v33[9] = v42;
    v33[10] = v41;
    return swift_willThrow();
  }
  v148 = v4;
  v156 = v3;
  v9 = v7[2];
  v8 = (void *)v7[3];
  if ((v9 != 0xD000000000000022 || v8 != (void *)0x8000000245FC6480)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (v9 != 0xD000000000000021 || v8 != (void *)0x8000000245FC64B0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (v9 != 0xD00000000000001FLL || v8 != (void *)0x8000000245FC64E0))
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v11 = v9 == 0xD000000000000021 && v8 == (void *)0x8000000245FC81B0;
    v12 = v11;
    if ((v10 & 1) == 0 && !v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v9 == 0xD00000000000002BLL && v8 == (void *)0x8000000245FC81E0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v9 == 0xD00000000000002FLL && v8 == (void *)0x8000000245FC8210
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (one-time initialization token for geometry_parameters_private != -1)
          goto LABEL_99;
        goto LABEL_90;
      }
      v128 = one-time initialization token for shared;
      swift_bridgeObjectRetain();
      if (v128 != -1)
        swift_once();
      v129 = static NodeDefStore.shared;
      if (*(_QWORD *)(static NodeDefStore.shared + 16))
      {
        swift_bridgeObjectRetain();
        v130 = specialized __RawDictionaryStorage.find<A>(_:)(v9, (uint64_t)v8);
        if ((v131 & 1) != 0)
        {
          v132 = (__int128 *)(*(_QWORD *)(v129 + 56) + 144 * v130);
          v167 = *v132;
          v133 = v132[3];
          v134 = v132[4];
          v135 = v132[2];
          v168 = v132[1];
          v169 = v135;
          v170 = v133;
          v171 = v134;
          v136 = v132[5];
          v137 = v132[6];
          v138 = v132[8];
          v174 = v132[7];
          v175 = v138;
          v172 = v136;
          v173 = v137;
          outlined retain of NodeDef((uint64_t)&v167);
          swift_bridgeObjectRelease();
          v183 = v173;
          v184 = v174;
          v185 = v175;
          v179 = v169;
          v180 = v170;
          v181 = v171;
          v182 = v172;
          v177 = v167;
          v178 = v168;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi19_((uint64_t)&v177);
          *(_QWORD *)&v186 = 0;
          *((_QWORD *)&v186 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v186 = 0xD000000000000054;
          *((_QWORD *)&v186 + 1) = 0x8000000245FC8240;
          v139._countAndFlagsBits = v9;
          v139._object = v8;
          String.append(_:)(v139);
          swift_bridgeObjectRelease();
          v30 = 39;
          v31 = 0xE100000000000000;
          goto LABEL_29;
        }
        swift_bridgeObjectRelease();
      }
      *(_QWORD *)&v177 = v9;
      *((_QWORD *)&v177 + 1) = v8;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v177);
      outlined init with take of UserGraphError.ErrorType(&v177, (uint64_t)&v186);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v198 = 0uLL;
      goto LABEL_30;
    }
  }
  if (one-time initialization token for surface_parameters_private != -1)
    swift_once();
  v145 = 0;
  for (i = &static MetalDataType.re.surface_parameters_private; ; i = &static MetalDataType.re.geometry_parameters_private)
  {
    v140 = a3;
    v14 = *i;
    swift_retain();
    v15 = *(_QWORD *)(a1 + 8);
    v235 = v15;
    v16 = *(_QWORD *)(v15 + 16);
    v17 = MEMORY[0x24BEE4AF8];
    v151 = v14;
    v154 = v16;
    v165 = v15;
    if (v16)
    {
      v265 = v7;
      *(_QWORD *)&v186 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
      v17 = v186;
      v18 = (uint64_t *)(v15 + 56);
      do
      {
        v19 = *(v18 - 2);
        v20 = *(v18 - 1);
        v21 = *v18;
        *(_QWORD *)&v186 = v17;
        v23 = *(_QWORD *)(v17 + 16);
        v22 = *(_QWORD *)(v17 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          v17 = v186;
        }
        *(_QWORD *)(v17 + 16) = v23 + 1;
        v24 = (_QWORD *)(v17 + 24 * v23);
        v24[4] = v20;
        v24[5] = v21;
        v24[6] = v19;
        v18 += 7;
        --v16;
      }
      while (v16);
      outlined release of [Input]((uint64_t)&v235);
      v14 = v151;
      v7 = v265;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v44 + 32) = 12324;
    *(_QWORD *)(v44 + 40) = 0xE200000000000000;
    *(_QWORD *)(v44 + 48) = v14;
    *(_QWORD *)&v186 = v44;
    swift_retain_n();
    specialized Array.append<A>(contentsOf:)(v17);
    v45 = v186;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OutputSpec>);
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_245FBECD0;
    if (one-time initialization token for void != -1)
      swift_once();
    v47 = static MetalDataType.void;
    *(_QWORD *)(v46 + 32) = 7632239;
    *(_QWORD *)(v46 + 40) = 0xE300000000000000;
    *(_QWORD *)(v46 + 48) = v47;
    v48 = *(_QWORD *)(v156 + 40);
    swift_retain();
    v146 = v156 + 64;
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v48, v45, v46, (unint64_t)v7, v156 + 64, v156, v199);
    v49 = v199[1];
    v150 = v199[2];
    v141 = v199[0];
    v142 = v199[3];
    v143 = v199[4];
    v144 = v200;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_bridgeObjectRelease();
    v234 = v49;
    v149 = v49;
    v159 = *(_QWORD *)(v49 + 16);
    if (!v159)
      goto LABEL_50;
    v157 = v49 + 32;
    swift_bridgeObjectRetain();
    v50 = 0;
    v51 = v154;
    while (2)
    {
      v53 = v157 + 56 * v50;
      v54 = *(_QWORD *)v53;
      v55 = *(_QWORD *)(v53 + 8);
      v56 = *(_QWORD *)(v53 + 16);
      v57 = *(_QWORD *)(v53 + 24);
      v58 = *(_QWORD *)(v53 + 32);
      v59 = *(_BYTE *)(v53 + 40);
      v60 = *(_QWORD *)(v53 + 48);
      *(_QWORD *)&v259 = v54;
      *((_QWORD *)&v259 + 1) = v55;
      v260 = v56;
      v261 = v57;
      v262 = v58;
      v263 = v59;
      v264 = v60;
      if (!v51)
        goto LABEL_38;
      v162 = v50;
      v61 = (_QWORD *)(v165 + 80);
      do
      {
        v62 = (_QWORD *)*(v61 - 6);
        v63 = *(v61 - 5);
        v65 = *(v61 - 4);
        v64 = *(v61 - 3);
        v66 = *(v61 - 2);
        v67 = *((_BYTE *)v61 - 8);
        v68 = *v61;
        if (v65 == v56 && v64 == v57)
        {
          v52 = v57;
LABEL_36:
          v252 = v62;
          v253 = v63;
          v254 = v56;
          v255 = v52;
          v256 = v66;
          v257 = v67;
          v258 = v68;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.moveEdge(from:to:)((uint64_t)&v252, &v259);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_37;
        }
        v265 = (_QWORD *)*(v61 - 6);
        v70 = v64;
        v71 = v56;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v56 = v65;
          v52 = v70;
          v62 = v265;
          goto LABEL_36;
        }
        v61 += 7;
        --v51;
        v56 = v71;
      }
      while (v51);
      v252 = v265;
      v253 = v63;
      v254 = v65;
      v255 = v70;
      v256 = v66;
      v257 = v67;
      v258 = v68;
LABEL_37:
      v51 = v154;
      v50 = v162;
LABEL_38:
      if (++v50 != v159)
        continue;
      break;
    }
    outlined release of [Input]((uint64_t)&v234);
LABEL_50:
    v233 = v150;
    v160 = *(_QWORD *)(v150 + 16);
    if (!v160)
      goto LABEL_67;
    v72 = *(_QWORD *)(a1 + 16);
    v73 = *(_QWORD *)(v72 + 16);
    swift_bridgeObjectRetain();
    v74 = 0;
    v153 = (_QWORD *)(v72 + 80);
    v155 = v73;
    while (2)
    {
      v76 = v150 + 32 + 56 * v74;
      v77 = *(_QWORD *)v76;
      v78 = *(_QWORD *)(v76 + 8);
      v79 = *(_QWORD *)(v76 + 16);
      v80 = *(_QWORD *)(v76 + 24);
      v81 = *(_QWORD *)(v76 + 32);
      v82 = *(_BYTE *)(v76 + 40);
      v83 = *(_QWORD *)(v76 + 48);
      v249[0] = v77;
      v249[1] = v78;
      v249[2] = v79;
      v249[3] = v80;
      v249[4] = v81;
      v250 = v82;
      v251 = v83;
      if (!v73)
        goto LABEL_55;
      v163 = v74;
      v84 = v153;
      while (2)
      {
        v85 = (_QWORD *)*(v84 - 6);
        v86 = *(v84 - 5);
        v88 = *(v84 - 4);
        v87 = *(v84 - 3);
        v89 = *(v84 - 2);
        v90 = *((_BYTE *)v84 - 8);
        v91 = *v84;
        if (v88 == v79 && v87 == v80)
        {
          v75 = v80;
LABEL_53:
          v242 = v85;
          v243 = v86;
          v244 = v79;
          v245 = v75;
          v246 = v89;
          v247 = v90;
          v248 = v91;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          Graph.moveEdges(from:to:)((uint64_t)&v242, (uint64_t)v249);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_54;
        }
        v265 = (_QWORD *)*(v84 - 6);
        v75 = v87;
        v93 = v79;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v79 = v88;
          v85 = v265;
          goto LABEL_53;
        }
        v84 += 7;
        --v73;
        v79 = v93;
        if (v73)
          continue;
        break;
      }
      v242 = v265;
      v243 = v86;
      v244 = v88;
      v245 = v75;
      v246 = v89;
      v247 = v90;
      v248 = v91;
LABEL_54:
      v73 = v155;
      v74 = v163;
LABEL_55:
      if (++v74 != v160)
        continue;
      break;
    }
    outlined release of [Input]((uint64_t)&v233);
LABEL_67:
    specialized Graph.remove(_:)(*(_QWORD *)(a1 + 24));
    v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = xmmword_245FBECD0;
    v95 = static MetalDataType.void;
    *(_QWORD *)(v94 + 32) = 28265;
    *(_QWORD *)(v94 + 40) = 0xE200000000000000;
    *(_QWORD *)(v94 + 48) = v95;
    v96 = swift_allocObject();
    *(_OWORD *)(v96 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v96 + 32) = 7632239;
    *(_QWORD *)(v96 + 40) = 0xE300000000000000;
    *(_QWORD *)(v96 + 48) = v95;
    v97 = swift_allocObject();
    *(_BYTE *)(v97 + 16) = v145;
    *(_QWORD *)(v97 + 24) = a2;
    v98 = v97 | 0x4000000000000000;
    v99 = *(_QWORD *)(v156 + 40);
    swift_retain_n();
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v99, v94, v96, v98, v146, v156, &v201);
    v166 = v202;
    v158 = v201;
    v265 = v203;
    v164 = v204;
    v161 = v205;
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v100 = swift_allocObject();
    *(_OWORD *)(v100 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v100 + 32) = 7632239;
    *(_QWORD *)(v100 + 40) = 0xE300000000000000;
    *(_QWORD *)(v100 + 48) = v151;
    v101 = swift_allocObject();
    *(_QWORD *)(v101 + 16) = 12324;
    *(_QWORD *)(v101 + 24) = 0xE200000000000000;
    v102 = v101 | 0x6000000000000000;
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v99, MEMORY[0x24BEE4AF8], v100, v102, v146, v156, &v206);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    ShaderGraphNode.out.getter((uint64_t)v209);
    if (v148)
    {
      swift_release();
      outlined init with take of NodePersonality(&v206, &v232);
      outlined release of NodePersonality(&v232);
      v231 = v207;
      outlined release of [Input]((uint64_t)&v231);
      v230 = v208;
      outlined release of [Input]((uint64_t)&v230);
      outlined init with take of NodePersonality(&v201, &v229);
      outlined release of NodePersonality(&v229);
      v228 = v202;
      outlined release of [Input]((uint64_t)&v228);
      v227 = *((_QWORD *)&v202 + 1);
      outlined release of [Input]((uint64_t)&v227);
      outlined init with take of NodePersonality(v199, &v226);
      outlined release of NodePersonality(&v226);
      outlined release of [Input]((uint64_t)&v234);
      outlined release of [Input]((uint64_t)&v233);
      return swift_release();
    }
    v103 = *(_QWORD *)(v149 + 16);
    if (!v103)
      break;
    v7 = (_QWORD *)(v149 + 80);
    while (1)
    {
      v105 = *(v7 - 6);
      v104 = *(v7 - 5);
      v106 = *(v7 - 4);
      v107 = *(v7 - 3);
      v108 = *(v7 - 2);
      v109 = *((_BYTE *)v7 - 8);
      v110 = *v7;
      if (v106 == 12324 && v107 == 0xE200000000000000)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_79;
      v7 += 7;
      if (!--v103)
        goto LABEL_77;
    }
    v107 = 0xE200000000000000;
LABEL_79:
    v239[0] = v105;
    v239[1] = v104;
    v239[2] = v106;
    v239[3] = v107;
    v239[4] = v108;
    v240 = v109;
    v241 = v110;
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.connect(_:to:)((uint64_t)v209, (unint64_t)v239);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v225 = v210;
    outlined release of String((uint64_t)&v225);
    ShaderGraphNode.out.getter((uint64_t)v211);
    a3 = 0;
    if (*(_QWORD *)(v202 + 16))
    {
      v122 = *(_QWORD *)(v202 + 40);
      v123 = *(_QWORD *)(v202 + 48);
      v124 = *(_QWORD *)(v202 + 56);
      v125 = *(_QWORD *)(v202 + 64);
      v126 = *(_BYTE *)(v202 + 72);
      v127 = *(_QWORD *)(v202 + 80);
      v236[0] = *(_QWORD *)(v202 + 32);
      v236[1] = v122;
      v236[2] = v123;
      v236[3] = v124;
      v236[4] = v125;
      v237 = v126;
      v238 = v127;
      swift_retain();
      swift_bridgeObjectRetain();
      Graph.connect(_:to:)((uint64_t)v211, (unint64_t)v236);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      swift_release();
      v224 = v212;
      outlined release of String((uint64_t)&v224);
      outlined init with take of NodePersonality(&v206, &v223);
      outlined release of NodePersonality(&v223);
      v222 = v207;
      outlined release of [Input]((uint64_t)&v222);
      v221 = v208;
      result = outlined release of [Input]((uint64_t)&v221);
      *(_QWORD *)v140 = v141;
      *(_QWORD *)(v140 + 8) = v149;
      *(_QWORD *)(v140 + 16) = v150;
      *(_QWORD *)(v140 + 24) = v142;
      *(_QWORD *)(v140 + 32) = v143;
      *(_BYTE *)(v140 + 40) = v144;
      *(_QWORD *)(v140 + 48) = v158;
      *(_OWORD *)(v140 + 56) = v166;
      *(_QWORD *)(v140 + 72) = v265;
      *(_QWORD *)(v140 + 80) = v164;
      *(_BYTE *)(v140 + 88) = v161;
      return result;
    }
    __break(1u);
LABEL_99:
    swift_once();
LABEL_90:
    v145 = 1;
  }
LABEL_77:
  outlined init with take of NodePersonality(v199, &v220);
  *(_QWORD *)&v177 = v141;
  *((_QWORD *)&v177 + 1) = v149;
  *(_QWORD *)&v178 = v150;
  *((_QWORD *)&v178 + 1) = v142;
  *(_QWORD *)&v179 = v143;
  BYTE8(v179) = v144;
  *(_QWORD *)&v180 = 12324;
  *((_QWORD *)&v180 + 1) = 0xE200000000000000;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v177);
  outlined init with take of UserGraphError.ErrorType(&v177, (uint64_t)&v186);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  v198 = 0uLL;
  swift_allocError();
  *v112 = v186;
  v113 = v190;
  v115 = v187;
  v114 = v188;
  v112[3] = v189;
  v112[4] = v113;
  v112[1] = v115;
  v112[2] = v114;
  v116 = v194;
  v118 = v191;
  v117 = v192;
  v112[7] = v193;
  v112[8] = v116;
  v112[5] = v118;
  v112[6] = v117;
  v119 = v198;
  v121 = v195;
  v120 = v196;
  v112[11] = v197;
  v112[12] = v119;
  v112[9] = v121;
  v112[10] = v120;
  outlined retain of [Input]((uint64_t)&v234);
  outlined retain of [Input]((uint64_t)&v233);
  outlined retain of NodePersonality(&v220);
  swift_willThrow();
  swift_release();
  swift_release();
  v219 = v210;
  outlined release of String((uint64_t)&v219);
  outlined init with take of NodePersonality(&v206, &v218);
  outlined release of NodePersonality(&v218);
  v217 = v207;
  outlined release of [Input]((uint64_t)&v217);
  v216 = v208;
  outlined release of [Input]((uint64_t)&v216);
  outlined init with take of NodePersonality(&v201, &v215);
  outlined release of NodePersonality(&v215);
  v214 = v202;
  outlined release of [Input]((uint64_t)&v214);
  v213 = *((_QWORD *)&v202 + 1);
  outlined release of [Input]((uint64_t)&v213);
  outlined release of NodePersonality(&v220);
  outlined release of [Input]((uint64_t)&v234);
  outlined release of [Input]((uint64_t)&v233);
  return swift_release();
}

uint64_t *closure #2 in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  __int128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[12];
  __int128 v25;
  uint64_t v26;

  v1 = *result;
  if (!((unint64_t)*result >> 61))
  {
    v2 = result[3];
    type metadata accessor for MaterialXDataType();
    result = (uint64_t *)swift_dynamicCastClass();
    if (result)
    {
      if (result[3])
      {
        *(_QWORD *)&v24[0] = 0;
        *((_QWORD *)&v24[0] + 1) = 0xE000000000000000;
        swift_retain_n();
        _StringGuts.grow(_:)(35);
        v3._object = (void *)0x8000000245FC84B0;
        v3._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v3);
        *((_QWORD *)&v23 + 1) = 0xE400000000000000;
        v26 = v2;
        v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v4);
        swift_bridgeObjectRelease();
        v5._countAndFlagsBits = 1701080942;
        v5._object = (void *)0xE400000000000000;
        String.append(_:)(v5);
        swift_bridgeObjectRelease();
        v6._countAndFlagsBits = 0x6574614D20736920;
        v6._object = (void *)0xEE0020586C616972;
        String.append(_:)(v6);
        *(_QWORD *)&v23 = v1;
        _print_unlocked<A, B>(_:_:)();
        v7 = v24[0];
        if (one-time initialization token for logger != -1)
          swift_once();
        v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)logger);
        swift_bridgeObjectRetain();
        v9 = Logger.logObject.getter();
        v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          v11 = (uint8_t *)swift_slowAlloc();
          v12 = swift_slowAlloc();
          *(_QWORD *)&v24[0] = v12;
          *(_DWORD *)v11 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)&v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, *((unint64_t *)&v7 + 1), (uint64_t *)v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_245E46000, v9, v10, "%s", v11, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24954C33C](v12, -1, -1);
          MEMORY[0x24954C33C](v11, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi44_((uint64_t)&v23);
        outlined init with take of UserGraphError.ErrorType(&v23, (uint64_t)v24);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v25 = 0uLL;
        swift_allocError();
        *v13 = v24[0];
        v14 = v24[4];
        v15 = v24[2];
        v16 = v24[1];
        v13[3] = v24[3];
        v13[4] = v14;
        v13[1] = v16;
        v13[2] = v15;
        v17 = v24[8];
        v18 = v24[6];
        v19 = v24[5];
        v13[7] = v24[7];
        v13[8] = v17;
        v13[5] = v19;
        v13[6] = v18;
        v20 = v25;
        v21 = v24[10];
        v22 = v24[9];
        v13[11] = v24[11];
        v13[12] = v20;
        v13[9] = v22;
        v13[10] = v21;
        swift_willThrow();
        return (uint64_t *)swift_release_n();
      }
    }
  }
  return result;
}

Swift::Bool __swiftcall RESurfaceShaderMaterial.surfaceShaderUsesCustomUniformType()()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v8;
  _OWORD v9[11];
  _OWORD v10[2];

  v1 = v0[16];
  v9[10] = v0[15];
  v10[0] = v1;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v0 + 265);
  v2 = v0[12];
  v9[6] = v0[11];
  v9[7] = v2;
  v3 = v0[14];
  v9[8] = v0[13];
  v9[9] = v3;
  v4 = v0[8];
  v9[2] = v0[7];
  v9[3] = v4;
  v5 = v0[10];
  v9[4] = v0[9];
  v9[5] = v5;
  v6 = v0[2];
  v8 = v0[1];
  v9[0] = v6;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 41);
  return (unint64_t)Graph.uniqueArgumentCount(for:)((uint64_t)&v8) > 1;
}

uint64_t Graph.uniqueArgumentCount(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)&v14);
  v1 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = 32;
    do
    {
      v6 = *(_QWORD *)(v1 + v4);
      if (v6 >> 61 == 3)
      {
        v8 = *(_QWORD *)(v6 + 16);
        v7 = *(_QWORD *)(v6 + 24);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v10 = v3[2];
        v9 = v3[3];
        if (v10 >= v9 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v3);
        v3[2] = v10 + 1;
        v5 = &v3[2 * v10];
        v5[4] = v8;
        v5[5] = v7;
      }
      v4 += 48;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v11 = specialized Set.init<A>(_:)((uint64_t)v3);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease();
  return v12;
}

Swift::Bool __swiftcall RESurfaceShaderMaterial.geometryModifierUsesCustomUniformType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[5];
  char v9;

  v1 = *(_QWORD *)(v0 + 72);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v8[0] = v5;
  v8[1] = v1;
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = *(_BYTE *)(v0 + 104) & 1;
  outlined copy of NodePersonality(v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = Graph.uniqueArgumentCount(for:)((uint64_t)v8);
  outlined consume of ShaderGraphNode?(v5, v1);
  return v6 > 1;
}

uint64_t Graph.firstSurfaceOfType(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  _OWORD v33[2];

  v5 = v2[9];
  v32 = v2[8];
  v33[0] = v5;
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v2 + 153);
  Graph.connectedUpstreamSubgraph(rootedAt:)((uint64_t)&v32, (uint64_t)&v31);
  v6 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v7 = *(_QWORD *)(v6 + 16);
  v29 = a2;
  if (v7)
  {
    if ((a1 & 1) != 0)
      v8 = 54;
    else
      v8 = 53;
    v9 = (uint64_t *)(v6 + 40);
    v10 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v11 = *(v9 - 1);
      if (v11 >> 61 == 5)
      {
        v12 = *v9;
        v13 = v9[1];
        v30 = *((_OWORD *)v9 + 1);
        v14 = *((_BYTE *)v9 + 32);
        v15 = *(_QWORD *)(v11 + 16);
        v16 = *(_QWORD *)(v11 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of NodePersonality(v11);
        v17 = specialized Surface.init(nodeDefID:)(v15, v16);
        if (v17 >= 3)
        {
          if (v17 == 3 && v8 == 54)
          {
LABEL_14:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v31 = v10;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
              v10 = v31;
            }
            v20 = *(_QWORD *)(v10 + 16);
            v19 = *(_QWORD *)(v10 + 24);
            if (v20 >= v19 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
              v10 = v31;
            }
            *(_QWORD *)(v10 + 16) = v20 + 1;
            v21 = v10 + 48 * v20;
            *(_QWORD *)(v21 + 32) = v11;
            *(_QWORD *)(v21 + 40) = v12;
            *(_QWORD *)(v21 + 48) = v13;
            *(_OWORD *)(v21 + 56) = v30;
            *(_BYTE *)(v21 + 72) = v14;
            goto LABEL_7;
          }
        }
        else if (v8 == 53)
        {
          goto LABEL_14;
        }
        outlined consume of NodePersonality(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_7:
      v9 += 6;
      if (!--v7)
        goto LABEL_20;
    }
  }
  v10 = MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v10 + 16))
  {
    v22 = *(_QWORD *)(v10 + 32);
    v23 = *(_QWORD *)(v10 + 40);
    v25 = *(_QWORD *)(v10 + 48);
    v24 = *(_QWORD *)(v10 + 56);
    v26 = *(_QWORD *)(v10 + 64);
    v27 = *(_BYTE *)(v10 + 72);
    outlined copy of NodePersonality(v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v25 = 0;
    v24 = 0;
    v26 = 0;
    v27 = 0;
  }
  result = swift_release();
  *(_QWORD *)v29 = v22;
  *(_QWORD *)(v29 + 8) = v23;
  *(_QWORD *)(v29 + 16) = v25;
  *(_QWORD *)(v29 + 24) = v24;
  *(_QWORD *)(v29 + 32) = v26;
  *(_BYTE *)(v29 + 40) = v27;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Graph.replaceInvalidImageNodes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    v18 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRetain_n();
    v5 = 0;
    while (1)
    {
      v6 = v4 + 48 * v5;
      v7 = *(_QWORD *)(v6 + 24);
      if (v7 == -7)
      {
        if ((uint64_t)++v5 >= v3)
          goto LABEL_10;
      }
      else
      {
        v9 = *(_QWORD *)v6;
        v8 = *(_QWORD *)(v6 + 8);
        v10 = *(_QWORD *)(v6 + 16);
        v11 = *(_BYTE *)(v6 + 40);
        v12 = *(_QWORD *)(v6 + 32);
        *(_QWORD *)&v13 = v9;
        *((_QWORD *)&v13 + 1) = v8;
        v14 = v10;
        v15 = v7;
        v16 = v12;
        v17 = v11;
        outlined copy of NodePersonality(v9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.replaceInvalidImageNodes()(&v13, (_OWORD *)v0);
        if (v1)
        {
          outlined consume of NodePersonality(v9);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        ++v5;
        outlined consume of NodePersonality(v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((uint64_t)v5 >= v3)
          goto LABEL_10;
      }
      if (v5 >= v3)
      {
        __break(1u);
LABEL_10:
        swift_bridgeObjectRelease_n();
        return;
      }
    }
  }
}

void closure #1 in Graph.replaceInvalidImageNodes()(__int128 *a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  _QWORD *v7;
  char v8;
  Swift::String v9;
  Swift::Bool v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v19;
  Swift::String v20;
  Swift::Bool v21;
  Swift::String v22;
  Swift::Bool v23;
  Swift::String v24;
  Swift::Bool v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 *v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD *v56;
  Swift::String v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  Swift::UInt *v129;
  Swift::UInt v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  Swift::Int v154;
  char v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t);
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  uint8_t *v171;
  Swift::String v172;
  unint64_t v173;
  _OWORD *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint8_t *v185;
  _QWORD *v186;
  Swift::String v187;
  os_log_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  __int128 *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  Swift::UInt *v209;
  Swift::UInt v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  char v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  __int128 *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t *v259;
  unsigned __int8 *v260;
  uint64_t *v261;
  uint64_t v262;
  Swift::UInt *v263;
  Swift::UInt v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  char v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  Swift::Int v287;
  char v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t (*v299)(uint64_t);
  char v300;
  char v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  __int128 *v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  uint64_t v317;
  Swift::UInt *v318;
  uint64_t *v319;
  unint64_t v320;
  Swift::UInt *i;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t v326;
  Swift::UInt *v327;
  uint64_t v328;
  Swift::UInt v329;
  uint64_t v330;
  Swift::UInt *v331;
  uint64_t v332;
  Swift::UInt v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  Swift::Int v345;
  uint64_t v346;
  unint64_t v347;
  Swift::Int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  char v365;
  char v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  char v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t v426;
  char v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  os_log_t log[2];
  uint64_t loga;
  unint64_t logb;
  uint64_t logc;
  uint64_t logd;
  _OWORD *v442;
  _OWORD *v443;
  _QWORD *v444;
  __int128 v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  _QWORD *v455;
  __int128 v456;
  __int128 v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  _OWORD v470[3];
  uint64_t v471;
  uint64_t v472;
  uint64_t v473[14];
  uint64_t v474[14];
  char v475[8];
  __int128 v476;
  uint64_t v477[14];
  uint64_t v478[14];
  char v479[8];
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  uint64_t v484;
  char v485[8];
  uint64_t v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  uint64_t v490;
  char v491[8];
  uint64_t v492;
  _OWORD v493[3];
  uint64_t v494;
  __int128 v495;
  _OWORD v496[3];
  uint64_t v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  _OWORD v501[7];
  uint64_t v502[5];
  char v503;
  uint64_t v504;
  _OWORD v505[7];
  uint64_t v506[5];
  char v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  char v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  char v520;
  uint64_t v521;
  _OWORD v522[9];
  _OWORD v523[2];
  _QWORD v524[5];
  char v525;
  uint64_t v526;
  _OWORD v527[4];
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  _OWORD v533[2];
  uint64_t v534;
  os_log_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  char v539;
  uint64_t v540;
  _OWORD v541[9];
  _OWORD v542[2];
  _OWORD v543[7];
  uint64_t v544[5];
  char v545;
  Swift::UInt v546;
  _OWORD v547[7];
  uint64_t v548[5];
  char v549;
  uint64_t v550;
  __int128 v551;
  _BYTE v552[25];
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  char v558;
  uint64_t v559;
  _OWORD v560[9];
  _OWORD v561[2];
  _QWORD v562[5];
  char v563;
  __int128 *v564;
  _OWORD v565[4];
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  _OWORD v571[2];
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576[3];
  os_log_t v577;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)&v552[9] = *(__int128 *)((char *)a1 + 25);
  v551 = v3;
  *(_OWORD *)v552 = v4;
  v5 = v3;
  if ((unint64_t)v3 >> 61 != 5)
    return;
  v7 = *(_QWORD **)a1;
  v445 = *(__int128 *)((char *)a1 + 8);
  *(_OWORD *)log = *(__int128 *)((char *)a1 + 24);
  v8 = *((_BYTE *)a1 + 40);
  swift_bridgeObjectRetain();
  v9._object = (void *)0x8000000245FC8330;
  v9._countAndFlagsBits = 0xD000000000000013;
  v10 = String.hasPrefix(_:)(v9);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = 0x6567616D695F444ELL;
    v20._object = (void *)0xE800000000000000;
    v21 = String.hasPrefix(_:)(v20);
    swift_bridgeObjectRelease();
    if (!v21)
    {
      swift_bridgeObjectRetain();
      v22._countAndFlagsBits = 0xD000000000000017;
      v22._object = (void *)0x8000000245FC8310;
      v23 = String.hasPrefix(_:)(v22);
      swift_bridgeObjectRelease();
      if (!v23)
      {
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = 0xD000000000000014;
        v24._object = (void *)0x8000000245FC82F0;
        v25 = String.hasPrefix(_:)(v24);
        swift_bridgeObjectRelease();
        if (!v25)
          return;
      }
    }
    v427 = v8;
    v26 = *(_QWORD *)(*((_QWORD *)&v551 + 1) + 16);
    if (!v26)
      return;
    v424 = v7;
    v435 = v5;
    v443 = a2;
    v448 = v2;
    swift_bridgeObjectRetain_n();
    v430 = *((_QWORD *)&v551 + 1);
    v27 = (_QWORD *)(*((_QWORD *)&v551 + 1) + 80);
    while (1)
    {
      v29 = *(v27 - 6);
      v28 = *(v27 - 5);
      v31 = *(v27 - 4);
      v30 = *(v27 - 3);
      v32 = *(v27 - 2);
      v33 = *((_BYTE *)v27 - 8);
      v34 = (__int128 *)*v27;
      v35 = one-time initialization token for filename;
      swift_retain();
      v577 = v30;
      swift_bridgeObjectRetain();
      if (v35 != -1)
        swift_once();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 128))(static MaterialXDataType.filename) & 1) != 0)
        break;
      v27 += 7;
      swift_bridgeObjectRelease();
      swift_release();
      if (!--v26)
      {
        swift_bridgeObjectRelease_n();
        return;
      }
    }
    v562[0] = v29;
    v562[1] = v28;
    v562[2] = v31;
    v562[3] = v577;
    v562[4] = v32;
    v563 = v33;
    v564 = v34;
    v36 = *((_QWORD *)&v551 + 1);
    swift_bridgeObjectRelease_n();
    v37 = v443[8];
    v38 = v443[9];
    v39 = v443[6];
    v569 = v443[7];
    v570 = v37;
    v571[0] = v38;
    *(_OWORD *)((char *)v571 + 9) = *(_OWORD *)((char *)v443 + 153);
    v40 = v443[5];
    v566 = v443[4];
    v567 = v40;
    v568 = v39;
    v41 = v443[1];
    v565[0] = *v443;
    v565[1] = v41;
    v42 = v443[3];
    v565[2] = v443[2];
    v565[3] = v42;
    outlined retain of Graph((uint64_t)v565);
    Graph.edge(to:)((uint64_t)v562, v477);
    v43 = v477[0];
    outlined init with take of MetalFunctionNode?((uint64_t)v477, (uint64_t)v491, &demangling cache variable for type metadata for Edge?);
    if (!v492)
    {
LABEL_25:
      outlined release of Graph((uint64_t)v565);
      swift_release();
      goto LABEL_26;
    }
    if (v43 == -7)
    {
      outlined release of Edge?(v477);
      goto LABEL_25;
    }
    if ((v43 & 0x8000000000000000) != 0)
    {
LABEL_357:
      __break(1u);
      goto LABEL_358;
    }
    if (v43 >= *(_QWORD *)(v566 + 16))
    {
LABEL_358:
      __break(1u);
LABEL_359:
      __break(1u);
LABEL_360:
      __break(1u);
LABEL_361:
      __break(1u);
LABEL_362:
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      swift_once();
      goto LABEL_153;
    }
    v77 = *(_QWORD *)(v566 + 48 * v43 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v77);
    outlined release of Edge?(v477);
    outlined release of Graph((uint64_t)v565);
    if (v77 >> 61 || *(_BYTE *)(v77 + 80) != 6)
    {
      outlined consume of NodePersonality(v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v78 = *(_QWORD *)(v77 + 72);
      v421 = *(_QWORD *)(v77 + 56);
      v423 = *(_QWORD *)(v77 + 64);
      v415 = *(_QWORD *)(v77 + 40);
      v418 = *(_QWORD *)(v77 + 48);
      v413 = *(_QWORD *)(v77 + 32);
      v80 = *(_QWORD *)(v77 + 16);
      v79 = *(_QWORD *)(v77 + 24);
      outlined copy of SGDataTypeStorage((id)v80, (id)v79, v413, v415, v418, v421, v423, v78, 6);
      outlined consume of NodePersonality(v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SGDataTypeStorage((void *)v80, (id)v79, v413, v415, v418, v421, v423, v78, 6);
      v81 = HIBYTE(v79) & 0xF;
      if ((v79 & 0x2000000000000000) == 0)
        v81 = v80 & 0xFFFFFFFFFFFFLL;
      if (!v81)
      {
        v82 = *(_QWORD *)(v430 + 16);
        if (!v82)
          goto LABEL_65;
        v83 = (_QWORD *)(v430 + 80);
        while (1)
        {
          v85 = *(v83 - 6);
          v84 = *(v83 - 5);
          v86 = *(v83 - 4);
          v87 = *(v83 - 2);
          v88 = *((_BYTE *)v83 - 8);
          v89 = *v83;
          if (v86 == 0x746C7561666564 && *(v83 - 3) == 0xE700000000000000)
          {
            v173 = 0xE700000000000000;
            goto LABEL_159;
          }
          v91 = *(v83 - 5);
          v92 = *(v83 - 3);
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          v83 += 7;
          if (!--v82)
          {
            v553 = v85;
            v554 = v91;
            v555 = v86;
            v556 = v92;
            v557 = v87;
            v558 = v88;
            v559 = v89;
LABEL_65:
            v576[0] = *(_QWORD *)v552;
            v455 = v424;
            v456 = v445;
            v457 = *(_OWORD *)log;
            LOBYTE(v458) = v427;
            v459 = 0x746C7561666564;
            v460 = 0xE700000000000000;
            _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v455);
            outlined init with take of UserGraphError.ErrorType((__int128 *)&v455, (uint64_t)&v461);
            v472 = 0;
            v471 = 0;
            outlined copy of NodePersonality(v435);
            swift_bridgeObjectRetain();
            outlined retain of [Input]((uint64_t)v576);
            outlined release of UserGraphError((unint64_t *)&v461);
LABEL_163:
            if (one-time initialization token for logger == -1)
            {
LABEL_164:
              v182 = type metadata accessor for Logger();
              __swift_project_value_buffer(v182, (uint64_t)logger);
              v575 = *(_QWORD *)v552;
              outlined copy of NodePersonality(v435);
              swift_bridgeObjectRetain();
              outlined retain of [Input]((uint64_t)&v575);
              outlined copy of NodePersonality(v435);
              swift_bridgeObjectRetain();
              outlined retain of [Input]((uint64_t)&v575);
              v183 = Logger.logObject.getter();
              v184 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v183, v184))
              {
                v185 = (uint8_t *)swift_slowAlloc();
                v186 = (_QWORD *)swift_slowAlloc();
                v577 = v183;
                *(_DWORD *)v185 = 136315138;
                *(_QWORD *)&v461 = 1701080942;
                *((_QWORD *)&v461 + 1) = 0xE400000000000000;
                v455 = v186;
                v187._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v187);
                swift_bridgeObjectRelease();
                *(_QWORD *)&v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v461, *((unint64_t *)&v461 + 1), (uint64_t *)&v455);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                outlined consume of NodePersonality(v435);
                swift_bridgeObjectRelease();
                outlined release of [Input]((uint64_t)&v575);
                outlined consume of NodePersonality(v435);
                swift_bridgeObjectRelease();
                outlined release of [Input]((uint64_t)&v575);
                v188 = v577;
                _os_log_impl(&dword_245E46000, v577, v184, "Could not replace image node '%s' with an invalid asset name by its default value because its default input is not connected to anything.", v185, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x24954C33C](v186, -1, -1);
                MEMORY[0x24954C33C](v185, -1, -1);

                swift_bridgeObjectRelease();
                swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release();
                outlined consume of NodePersonality(v435);
                swift_bridgeObjectRelease();
                outlined release of [Input]((uint64_t)&v575);
                outlined consume of NodePersonality(v435);
                swift_bridgeObjectRelease();
                outlined release of [Input]((uint64_t)&v575);

              }
              return;
            }
LABEL_374:
            swift_once();
            goto LABEL_164;
          }
        }
        v84 = v91;
        v173 = v92;
LABEL_159:
        v553 = v85;
        v554 = v84;
        v555 = v86;
        v556 = v173;
        v557 = v87;
        v558 = v88;
        v559 = v89;
        v174 = v443;
        v175 = v443[8];
        v176 = v443[9];
        v177 = v443[6];
        v560[7] = v443[7];
        v560[8] = v175;
        v561[0] = v176;
        *(_OWORD *)((char *)v561 + 9) = *(_OWORD *)((char *)v443 + 153);
        v178 = v443[5];
        v560[4] = v443[4];
        v560[5] = v178;
        v560[6] = v177;
        v179 = v443[1];
        v560[0] = *v443;
        v560[1] = v179;
        v180 = v443[3];
        v560[2] = v443[2];
        v560[3] = v180;
        swift_retain();
        swift_bridgeObjectRetain();
        outlined retain of Graph((uint64_t)v560);
        Graph.edge(to:)((uint64_t)&v553, v478);
        outlined release of Graph((uint64_t)v560);
        outlined init with take of MetalFunctionNode?((uint64_t)v478, (uint64_t)&v487, &demangling cache variable for type metadata for Edge?);
        if (!*((_QWORD *)&v487 + 1))
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_163;
        }
        v34 = &v461;
        v493[0] = v487;
        v493[1] = v488;
        v493[2] = v489;
        v494 = v490;
        v495 = v488;
        swift_retain();
        outlined retain of String((uint64_t)&v495);
        outlined release of Edge?(v478);
        ShaderGraphNode.out.getter((uint64_t)v479);
        v181 = v448;
        if (v448)
          goto LABEL_352;
        Graph.moveEdges(from:to:)((uint64_t)v479, (uint64_t)v493);
        swift_release();
        v500 = v480;
        outlined release of String((uint64_t)&v500);
        v254 = *(_QWORD *)v552;
        v572 = *(_QWORD *)v552;
        v419 = *(_QWORD *)(*(_QWORD *)v552 + 16);
        if (v419)
        {
          v255 = *(_QWORD *)v552 + 32;
          swift_bridgeObjectRetain_n();
          v256 = (uint64_t *)(v254 + 40);
          v257 = (uint64_t *)(v254 + 48);
          v258 = (uint64_t *)(v254 + 56);
          v259 = (uint64_t *)(v254 + 64);
          v260 = (unsigned __int8 *)(v254 + 72);
          v261 = (uint64_t *)(v254 + 80);
          v262 = 1;
          v263 = (Swift::UInt *)(v254 + 32);
          v401 = v254 + 32;
          while (1)
          {
            v264 = *v263;
            v265 = *v256;
            v266 = *v257;
            v267 = *v258;
            v268 = *v259;
            v269 = *v260;
            v270 = *v261;
            v548[0] = v264;
            v548[1] = v265;
            v436 = v266;
            v548[2] = v266;
            v548[3] = v267;
            v548[4] = v268;
            LODWORD(v423) = v269;
            v549 = v269;
            v422 = v270;
            v550 = v270;
            v271 = v174[9];
            v469 = v174[8];
            v470[0] = v271;
            *(_OWORD *)((char *)v470 + 9) = *(_OWORD *)((char *)v174 + 153);
            v272 = v174[5];
            v465 = v174[4];
            v466 = v272;
            v273 = v174[7];
            v467 = v174[6];
            v468 = v273;
            v274 = v174[1];
            v461 = *v174;
            v462 = v274;
            v275 = v174[3];
            v463 = v174[2];
            v464 = v275;
            v276 = v274;
            v277 = (_QWORD *)(*((_QWORD *)&v461 + 1) + 32);
            v278 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 16);
            v446 = v267;
            if ((_QWORD)v461)
            {
              v279 = v265;
              v280 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v264, (uint64_t)v277, v278, (_QWORD *)(v461 + 16), v461 + 32);
              if ((v281 & 1) != 0)
                goto LABEL_263;
              v265 = v279;
              if ((v280 & 0x8000000000000000) != 0)
                goto LABEL_273;
            }
            else
            {
              if (!v278)
                goto LABEL_263;
              if (*v277 == v264)
              {
                v280 = 0;
              }
              else
              {
                if (v278 == 1)
                  goto LABEL_263;
                if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 40) == v264)
                {
                  v280 = 1;
                }
                else
                {
                  if (v278 == 2)
                  {
LABEL_262:
                    v174 = v443;
                    v34 = &v461;
                    v255 = v401;
LABEL_263:
                    swift_retain();
                    swift_bridgeObjectRetain();
                    outlined retain of Graph((uint64_t)&v461);
                    v293 = MEMORY[0x24BEE4AF8];
                    goto LABEL_264;
                  }
                  if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 48) == v264)
                  {
                    v280 = 2;
                    v174 = v443;
                    v34 = &v461;
                  }
                  else
                  {
                    v303 = 0;
                    do
                    {
                      if (v278 - 3 == v303)
                        goto LABEL_262;
                      v304 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 56 + 8 * v303++);
                    }
                    while (v304 != v264);
                    v280 = v303 + 2;
                    v174 = v443;
                    v34 = &v461;
                    if (v303 + 2 < 0)
                    {
LABEL_273:
                      __break(1u);
                      goto LABEL_274;
                    }
                  }
                }
              }
            }
            if (v280 >= *(_QWORD *)(v276 + 16))
              goto LABEL_379;
            v451 = v181;
            v282 = (_QWORD *)(v276 + 48 * v280);
            v284 = v282[4];
            v283 = v282[5];
            v285 = v282[6];
            v286 = *(_QWORD *)(v283 + 16);
            v416 = v262;
            logc = v265;
            if (!v284)
            {
              swift_retain();
              swift_bridgeObjectRetain();
              outlined retain of Graph((uint64_t)&v461);
              swift_retain();
              v410 = v285;
              swift_retain();
              if (!v286)
              {
LABEL_256:
                swift_release();
                swift_release();
                v293 = MEMORY[0x24BEE4AF8];
                v181 = v451;
                v34 = &v461;
                v255 = v401;
                v262 = v416;
                goto LABEL_264;
              }
              v400 = v268;
              v289 = 0;
              v294 = (_QWORD *)(v283 + 80);
              while (2)
              {
                if (*(v294 - 6) == v264)
                {
                  v295 = v286;
                  v296 = *(v294 - 4);
                  v297 = *(v294 - 3);
                  v425 = *(v294 - 2);
                  v298 = *((_BYTE *)v294 - 8);
                  v428 = *v294;
                  v299 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v294 - 5) + 128);
                  swift_retain();
                  swift_bridgeObjectRetain();
                  if ((v299(logc) & 1) != 0)
                  {
                    if (v296 == v436 && v297 == v446)
                    {
                      swift_bridgeObjectRelease();
                      swift_release();
                      v286 = v295;
LABEL_247:
                      if ((v298 & 1) != 0)
                      {
                        v301 = v423;
                        if (v428 != v422)
                          v301 = 0;
                        if ((v301 & 1) != 0)
                        {
LABEL_255:
                          v290 = v451;
                          v34 = &v461;
LABEL_234:
                          if (v289 < *(_QWORD *)(v410 + 16))
                          {
                            v291 = *(_QWORD *)(v410 + 16 * v289 + 40);
                            swift_retain();
                            swift_retain();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_retain();
                            swift_bridgeObjectRetain();
                            v292 = v290;
                            v293 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v291, v548);
                            v181 = v292;
                            swift_release();
                            swift_release();
                            swift_bridgeObjectRelease();
                            swift_release();
                            v255 = v401;
                            v262 = v416;
                            goto LABEL_264;
                          }
LABEL_380:
                          __break(1u);
LABEL_381:
                          __break(1u);
                          return;
                        }
                      }
                      else if ((v423 & 1) == 0 && v425 == v400 && v428 == v422)
                      {
                        goto LABEL_255;
                      }
                    }
                    else
                    {
                      v300 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_release();
                      v286 = v295;
                      if ((v300 & 1) != 0)
                        goto LABEL_247;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                    v286 = v295;
                  }
                }
                v294 += 7;
                if (v286 == ++v289)
                  goto LABEL_256;
                continue;
              }
            }
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v461);
            swift_retain();
            swift_retain();
            swift_retain();
            v287 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v548, v283 + 32, v286, (_QWORD *)(v284 + 16), v284 + 32);
            if ((v288 & 1) == 0)
            {
              v289 = v287;
              v410 = v285;
              v290 = v451;
              if ((v287 & 0x8000000000000000) == 0)
                goto LABEL_234;
              goto LABEL_381;
            }
            swift_release();
            swift_release();
            swift_release();
            v293 = MEMORY[0x24BEE4AF8];
            v181 = v451;
            v255 = v401;
LABEL_264:
            outlined release of Graph((uint64_t)&v461);
            v302 = *(_QWORD *)(v293 + 16);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            if (v302)
            {
              outlined release of [Input]((uint64_t)&v572);
              outlined release of [Input]((uint64_t)&v572);
              goto LABEL_352;
            }
            if (v262 == v419)
            {
              outlined release of [Input]((uint64_t)&v572);
              outlined release of [Input]((uint64_t)&v572);
              break;
            }
            v263 = (Swift::UInt *)(v255 + 56 * v262);
            v256 = (uint64_t *)(v263 + 1);
            v257 = (uint64_t *)(v263 + 2);
            v258 = (uint64_t *)(v263 + 3);
            v259 = (uint64_t *)(v263 + 4);
            v260 = (unsigned __int8 *)(v263 + 5);
            v261 = (uint64_t *)(v263 + 6);
            ++v262;
          }
        }
        v305 = swift_bridgeObjectRetain();
        v306 = specialized Sequence.compactMap<A>(_:)(v305, v174);
        swift_bridgeObjectRelease();
        v420 = *(_QWORD *)(v306 + 16);
        if (!v420)
        {
          swift_bridgeObjectRelease();
          goto LABEL_351;
        }
        v417 = v306 + 32;
        swift_bridgeObjectRetain();
        v307 = 0;
LABEL_285:
        v426 = v307;
        v308 = (__int128 *)(v417 + 112 * v307);
        v309 = *v308;
        v310 = v308[2];
        v547[1] = v308[1];
        v547[2] = v310;
        v547[0] = v309;
        v311 = v308[3];
        v312 = v308[4];
        v313 = v308[6];
        v547[5] = v308[5];
        v547[6] = v313;
        v547[3] = v311;
        v547[4] = v312;
        outlined retain of Edge((uint64_t)v547);
        Graph.remove(_:)((uint64_t)v547);
        if (*(_QWORD *)&v547[0] == -7)
          goto LABEL_284;
        if ((*(_QWORD *)&v547[0] & 0x8000000000000000) != 0)
          goto LABEL_377;
        v314 = *((_QWORD *)v174 + 8);
        if (*(_QWORD *)&v547[0] >= *(_QWORD *)(v314 + 16))
        {
LABEL_378:
          __break(1u);
LABEL_379:
          __break(1u);
          goto LABEL_380;
        }
        v315 = (_QWORD *)(v314 + 48 * *(_QWORD *)&v547[0]);
        v316 = v315[4];
        v317 = v315[6];
        v411 = v315[7];
        v414 = v316;
        v433 = *(_QWORD *)(v317 + 16);
        if (!v433)
        {
          swift_bridgeObjectRetain();
          outlined copy of NodePersonality(v316);
          swift_bridgeObjectRetain();
          goto LABEL_337;
        }
        v318 = (Swift::UInt *)(v317 + 32);
        v319 = (uint64_t *)v315[6];
        swift_bridgeObjectRetain_n();
        v320 = v316;
        i = v318;
        outlined copy of NodePersonality(v320);
        swift_bridgeObjectRetain();
        v322 = 0;
        v323 = v319 + 5;
        v324 = v319 + 6;
        v325 = v319 + 7;
        v326 = 1;
        v327 = i;
        v435 = (unint64_t)i;
        while (1)
        {
          v328 = v322;
          v329 = *v327;
          v330 = *v323;
          v331 = &i[7 * v328];
          logd = v326;
          v332 = *v325;
          v333 = v331[6];
          v334 = *((_BYTE *)v331 + 40);
          v335 = v331[4];
          v336 = *v324;
          v544[0] = *v327;
          v544[1] = v330;
          v544[2] = v336;
          v544[3] = v332;
          v544[4] = v335;
          v545 = v334;
          v546 = v333;
          v337 = v174[9];
          v469 = v174[8];
          v470[0] = v337;
          *(_OWORD *)((char *)v470 + 9) = *(_OWORD *)((char *)v174 + 153);
          v338 = v174[5];
          v465 = v174[4];
          v466 = v338;
          v339 = v174[7];
          v467 = v174[6];
          v468 = v339;
          v340 = v174[1];
          v461 = *v174;
          v462 = v340;
          v341 = v174[3];
          v463 = v174[2];
          v464 = v341;
          v34 = (__int128 *)v461;
          v36 = *((_QWORD *)&v461 + 1) + 32;
          v342 = v340;
          if ((_QWORD)v461)
          {
            v452 = v462;
            v343 = v181;
            v344 = (_QWORD *)(v461 + 16);
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v329);
            v345 = Hasher._finalize()();
            v346 = 1 << *v344;
            v347 = v346 - 1;
            if (__OFSUB__(v346, 1))
              goto LABEL_363;
            v348 = v347 & v345;
            v349 = _HashTable.UnsafeHandle._startIterator(bucket:)(v347 & v345, (_QWORD *)v34 + 2, (uint64_t)(v34 + 2));
            v455 = v34 + 1;
            *(_QWORD *)&v456 = v34 + 2;
            *((_QWORD *)&v456 + 1) = v348;
            *(_QWORD *)&v457 = v349;
            *((_QWORD *)&v457 + 1) = v350;
            v458 = v351;
            LOBYTE(v459) = 0;
            if (!v349)
            {
              v181 = v343;
LABEL_312:
              v174 = v443;
              v34 = &v461;
              i = (Swift::UInt *)v435;
LABEL_313:
              v322 = logd;
LABEL_321:
              swift_retain();
              swift_bridgeObjectRetain();
              outlined retain of Graph((uint64_t)&v461);
              v368 = MEMORY[0x24BEE4AF8];
              goto LABEL_323;
            }
            v352 = (v349 ^ v347) + (*((uint64_t *)v34 + 3) >> 6);
            if (v352 >= v347)
              v353 = v347;
            else
              v353 = 0;
            v354 = v352 - v353;
            v181 = v343;
            v174 = v443;
            v34 = &v461;
            for (i = (Swift::UInt *)v435; *(_QWORD *)(v36 + 8 * v354) != v329; v354 = v356 - v357)
            {
              _HashTable.BucketIterator.advance()();
              if (!(_QWORD)v457)
                goto LABEL_313;
              v355 = -1 << *v455;
              v356 = (v355 ^ ~(_QWORD)v457) + ((uint64_t)v455[1] >> 6);
              if (v356 >= ~v355)
                v357 = ~v355;
              else
                v357 = 0;
            }
          }
          else
          {
            v358 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 16);
            if (!v358)
            {
              v34 = &v461;
LABEL_320:
              v322 = logd;
              goto LABEL_321;
            }
            if (*(_QWORD *)v36 == v329)
            {
              v354 = 0;
              v34 = &v461;
              goto LABEL_307;
            }
            v34 = &v461;
            if (v358 == 1)
              goto LABEL_320;
            if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 40) == v329)
            {
              v354 = 1;
              goto LABEL_307;
            }
            if (v358 == 2)
              goto LABEL_320;
            if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 48) == v329)
            {
              v354 = 2;
              goto LABEL_307;
            }
            v452 = v462;
            v370 = 0;
            v371 = v358 - 3;
            do
            {
              if (v371 == v370)
                goto LABEL_312;
              v372 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 56 + 8 * v370++);
            }
            while (v372 != v329);
            v354 = v370 + 2;
            v174 = v443;
            v34 = &v461;
          }
          v342 = v452;
          if ((v354 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_365:
            __break(1u);
LABEL_366:
            __break(1u);
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
            goto LABEL_369;
          }
LABEL_307:
          v453 = v181;
          if (v354 >= *(_QWORD *)(v342 + 16))
            goto LABEL_365;
          v359 = (_QWORD *)(v342 + 48 * v354);
          v360 = v359[4];
          v361 = v359[5];
          v362 = v359[6];
          v363 = *(_QWORD *)(v361 + 16);
          if (v360)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v461);
            swift_retain();
            swift_retain();
            swift_retain();
            v34 = &v461;
            v364 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v544, v361 + 32, v363, (_QWORD *)(v360 + 16), v360 + 32);
            if ((v365 & 1) != 0)
              goto LABEL_322;
          }
          else
          {
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v461);
            swift_retain();
            swift_retain();
            v364 = specialized Collection<>.firstIndex(of:)(v544, v361 + 32, v363);
            if ((v366 & 1) != 0)
            {
LABEL_322:
              swift_release();
              swift_release();
              swift_release();
              v368 = MEMORY[0x24BEE4AF8];
              v181 = v453;
              i = (Swift::UInt *)v435;
              v322 = logd;
              goto LABEL_323;
            }
          }
          if ((v364 & 0x8000000000000000) != 0)
            goto LABEL_372;
          if (v364 >= *(_QWORD *)(v362 + 16))
            goto LABEL_373;
          v367 = *(_QWORD *)(v362 + 16 * v364 + 40);
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          v368 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v367, v544);
          v181 = v453;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v34 = &v461;
          i = (Swift::UInt *)v435;
          v322 = logd;
LABEL_323:
          outlined release of Graph((uint64_t)&v461);
          v369 = *(_QWORD *)(v368 + 16);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (v369)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_283;
          }
          if (v322 == v433)
          {
            swift_bridgeObjectRelease_n();
LABEL_337:
            v373 = swift_bridgeObjectRetain();
            v36 = specialized Sequence.compactMap<A>(_:)(v373, v174);
            swift_bridgeObjectRelease();
            v374 = *(_QWORD *)(v36 + 16);
            if (v374)
            {
              swift_bridgeObjectRetain();
              v375 = 32;
              do
              {
                v379 = *(_OWORD *)(v36 + v375);
                v380 = *(_OWORD *)(v36 + v375 + 32);
                v543[1] = *(_OWORD *)(v36 + v375 + 16);
                v543[2] = v380;
                v543[0] = v379;
                v381 = *(_OWORD *)(v36 + v375 + 48);
                v382 = *(_OWORD *)(v36 + v375 + 64);
                v383 = *(_OWORD *)(v36 + v375 + 96);
                v543[5] = *(_OWORD *)(v36 + v375 + 80);
                v543[6] = v383;
                v543[3] = v381;
                v543[4] = v382;
                outlined retain of Edge((uint64_t)v543);
                Graph.remove(_:)((uint64_t)v543);
                if (*(_QWORD *)&v543[0] != -7)
                {
                  if ((*(_QWORD *)&v543[0] & 0x8000000000000000) != 0)
                    goto LABEL_361;
                  v384 = *((_QWORD *)v174 + 8);
                  if (*(_QWORD *)&v543[0] >= *(_QWORD *)(v384 + 16))
                    goto LABEL_362;
                  v385 = v384 + 48 * *(_QWORD *)&v543[0];
                  v386 = *(_QWORD *)(v385 + 32);
                  v387 = *(_QWORD *)(v385 + 56);
                  outlined copy of NodePersonality(v386);
                  swift_bridgeObjectRetain();
                  v388 = swift_bridgeObjectRetain();
                  if ((specialized Sequence.allSatisfy(_:)(v388, v174) & 1) != 0)
                  {
                    v376 = swift_bridgeObjectRetain();
                    v377 = specialized Sequence.compactMap<A>(_:)(v376, v174);
                    v454 = v387;
                    swift_bridgeObjectRelease();
                    specialized Sequence.forEach(_:)(v377, v174);
                    v378 = v181;
                    swift_bridgeObjectRelease();
                    specialized Graph.remove(_:)(v454);
                  }
                  else
                  {
                    v378 = v181;
                  }
                  outlined consume of NodePersonality(v386);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v181 = v378;
                  v34 = &v461;
                }
                outlined release of Edge((uint64_t)v543);
                v375 += 112;
                --v374;
              }
              while (v374);
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            specialized Graph.remove(_:)(v411);
LABEL_283:
            outlined consume of NodePersonality(v414);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_284:
            outlined release of Edge((uint64_t)v547);
            v307 = v426 + 1;
            if (v426 + 1 != v420)
              goto LABEL_285;
            swift_bridgeObjectRelease_n();
LABEL_351:
            specialized Graph.remove(_:)(*(uint64_t *)&v552[8]);
LABEL_352:
            swift_release();
            outlined release of String((uint64_t)&v495);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            return;
          }
          v327 = &i[7 * v322];
          v323 = (uint64_t *)(v327 + 1);
          v324 = (uint64_t *)(v327 + 2);
          v325 = (uint64_t *)(v327 + 3);
          v326 = v322 + 1;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  v573 = *(_QWORD *)v552;
  v11 = *(_QWORD *)(*(_QWORD *)v552 + 16);
  v447 = v2;
  if (!v11)
  {
LABEL_33:
    if (one-time initialization token for logger != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)logger);
    v574 = *((_QWORD *)&v551 + 1);
    outlined retain of [Input]((uint64_t)&v573);
    outlined copy of NodePersonality(v5);
    outlined retain of [Input]((uint64_t)&v574);
    outlined retain of [Input]((uint64_t)&v573);
    outlined copy of NodePersonality(v5);
    outlined retain of [Input]((uint64_t)&v574);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      v56 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v55 = 136315138;
      *(_QWORD *)&v461 = 1701080942;
      *((_QWORD *)&v461 + 1) = 0xE400000000000000;
      v455 = v56;
      v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701080942, 0xE400000000000000, (uint64_t *)&v455);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v5);
      outlined release of [Input]((uint64_t)&v574);
      outlined release of [Input]((uint64_t)&v573);
      outlined consume of NodePersonality(v5);
      outlined release of [Input]((uint64_t)&v574);
      outlined release of [Input]((uint64_t)&v573);
      _os_log_impl(&dword_245E46000, v53, v54, "Unable to find sample node connected to %s", v55, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v56, -1, -1);
      MEMORY[0x24954C33C](v55, -1, -1);
    }
    else
    {
      outlined consume of NodePersonality(v5);
      outlined release of [Input]((uint64_t)&v574);
      outlined release of [Input]((uint64_t)&v573);
      outlined consume of NodePersonality(v5);
      outlined release of [Input]((uint64_t)&v574);
      outlined release of [Input]((uint64_t)&v573);
    }

    return;
  }
  v442 = a2;
  v434 = v5;
  loga = *(_QWORD *)v552 + 32;
  v429 = *(_QWORD *)v552;
  v12 = (_QWORD *)(*(_QWORD *)v552 + 80);
  while (1)
  {
    v13 = *(v12 - 6);
    v577 = (os_log_t)*(v12 - 5);
    v14 = *(v12 - 4);
    v15 = *(v12 - 2);
    v16 = *((_BYTE *)v12 - 8);
    v17 = *v12;
    if (v14 == 7632239 && *(v12 - 3) == 0xE300000000000000)
      break;
    v19 = *(v12 - 3);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_28;
    v12 += 7;
    if (!--v11)
    {
      v534 = v13;
      v535 = v577;
      v536 = v14;
      v537 = v19;
      v538 = v15;
      v539 = v16;
      v540 = v17;
      goto LABEL_32;
    }
  }
  v19 = 0xE300000000000000;
LABEL_28:
  v534 = v13;
  v535 = v577;
  v536 = v14;
  v537 = v19;
  v538 = v15;
  v539 = v16;
  v540 = v17;
  v44 = v442[8];
  v45 = v442[9];
  v46 = v442[6];
  v541[7] = v442[7];
  v541[8] = v44;
  v542[0] = v45;
  *(_OWORD *)((char *)v542 + 9) = *(_OWORD *)((char *)v442 + 153);
  v47 = v442[5];
  v541[4] = v442[4];
  v541[5] = v47;
  v541[6] = v46;
  v48 = v442[1];
  v541[0] = *v442;
  v541[1] = v48;
  v49 = v442[3];
  v541[2] = v442[2];
  v541[3] = v49;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of Graph((uint64_t)v541);
  v50 = (_QWORD *)Graph.edges(from:)((uint64_t)&v534);
  outlined release of Graph((uint64_t)v541);
  if (!v50[2])
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v51 = v50[11];
  v34 = (__int128 *)v50[12];
  v36 = v50[14];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v51 == -7)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_32:
    v5 = v434;
    goto LABEL_33;
  }
  if ((v51 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_354;
  }
  v58 = *((_QWORD *)v442 + 8);
  if (v51 >= *(_QWORD *)(v58 + 16))
  {
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
LABEL_356:
    __break(1u);
    goto LABEL_357;
  }
  v59 = v58 + 48 * v51;
  v61 = *(_QWORD *)(v59 + 32);
  v60 = *(_QWORD *)(v59 + 40);
  v63 = *(_QWORD *)(v59 + 48);
  v62 = *(_QWORD *)(v59 + 56);
  v64 = *(_QWORD *)(v59 + 64);
  v65 = *(_BYTE *)(v59 + 72);
  v509 = v61;
  v510 = v60;
  v511 = v63;
  v512 = v62;
  v513 = v64;
  v514 = v65;
  v66 = *(_QWORD *)(*((_QWORD *)&v551 + 1) + 16);
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_83;
  }
  v402 = v65;
  v405 = v64;
  v408 = v62;
  v67 = *((_QWORD *)&v551 + 1);
  swift_bridgeObjectRetain_n();
  v412 = v63;
  swift_bridgeObjectRetain();
  v423 = v61;
  outlined copy of NodePersonality(v61);
  v435 = v60;
  swift_bridgeObjectRetain();
  v68 = (_QWORD *)(v67 + 80);
  while (1)
  {
    v70 = *(v68 - 6);
    v69 = *(v68 - 5);
    v71 = *(v68 - 4);
    v72 = *(v68 - 3);
    v73 = *(v68 - 2);
    v74 = *((_BYTE *)v68 - 8);
    v75 = *v68;
    v76 = one-time initialization token for filename;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v76 != -1)
      swift_once();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 128))(static MaterialXDataType.filename) & 1) != 0)
      break;
    v68 += 7;
    swift_bridgeObjectRelease();
    swift_release();
    if (!--v66)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of NodePersonality(v423);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_83:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
  }
  v524[0] = v70;
  v524[1] = v69;
  v524[2] = v71;
  v524[3] = v72;
  v524[4] = v73;
  v525 = v74;
  v526 = v75;
  swift_bridgeObjectRelease_n();
  v93 = v442[8];
  v94 = v442[9];
  v95 = v442[6];
  v531 = v442[7];
  v532 = v93;
  v533[0] = v94;
  *(_OWORD *)((char *)v533 + 9) = *(_OWORD *)((char *)v442 + 153);
  v96 = v442[5];
  v528 = v442[4];
  v529 = v96;
  v530 = v95;
  v97 = v442[1];
  v527[0] = *v442;
  v527[1] = v97;
  v98 = v442[3];
  v527[2] = v442[2];
  v527[3] = v98;
  outlined retain of Graph((uint64_t)v527);
  Graph.edge(to:)((uint64_t)v524, v473);
  v99 = v473[0];
  outlined init with take of MetalFunctionNode?((uint64_t)v473, (uint64_t)v485, &demangling cache variable for type metadata for Edge?);
  v100 = v435;
  if (v486)
  {
    if (v99 != -7)
    {
      if ((v99 & 0x8000000000000000) != 0)
        goto LABEL_370;
      if (v99 >= *(_QWORD *)(v528 + 16))
      {
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
LABEL_373:
        __break(1u);
        goto LABEL_374;
      }
      v111 = v528 + 48 * v99;
      v36 = *(_QWORD *)(v111 + 32);
      v112 = *(_QWORD *)(v111 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v36);
      outlined release of Edge?(v473);
      outlined release of Graph((uint64_t)v527);
      if (v36 >> 61 || *(_BYTE *)(v36 + 80) != 6)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of NodePersonality(v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v423);
        goto LABEL_156;
      }
      v113 = *(_QWORD *)(v36 + 24);
      if ((v113 & 0x2000000000000000) != 0)
        v114 = HIBYTE(v113) & 0xF;
      else
        v114 = *(_QWORD *)(v36 + 16) & 0xFFFFFFFFFFFFLL;
      if (v114)
      {
        outlined consume of NodePersonality(v36);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v423);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_156;
      }
      v399 = v112;
      goto LABEL_73;
    }
    outlined release of Edge?(v473);
  }
  outlined release of Graph((uint64_t)v527);
  v36 = 0;
  v399 = 0;
LABEL_73:
  v101 = *(_QWORD *)(v435 + 16);
  v398 = v36;
  if (!v101)
    goto LABEL_82;
  v102 = (_QWORD *)(v435 + 80);
  do
  {
    v104 = *(v102 - 6);
    v103 = *(v102 - 5);
    v105 = *(v102 - 4);
    v106 = *(v102 - 2);
    v107 = *((_BYTE *)v102 - 8);
    v108 = *v102;
    if (v105 == 0x746C7561666564 && *(v102 - 3) == 0xE700000000000000)
    {
      v110 = 0xE700000000000000;
LABEL_95:
      v515 = v104;
      v516 = v103;
      v517 = v105;
      v518 = v110;
      v519 = v106;
      v520 = v107;
      v521 = v108;
      v115 = v442;
      v116 = v442[6];
      v34 = &v461;
      v522[7] = v442[7];
      v117 = v442[9];
      v522[8] = v442[8];
      v523[0] = v117;
      *(_OWORD *)((char *)v523 + 9) = *(_OWORD *)((char *)v442 + 153);
      v118 = v442[5];
      v522[4] = v442[4];
      v522[5] = v118;
      v522[6] = v116;
      v119 = v442[1];
      v522[0] = *v442;
      v522[1] = v119;
      v120 = v442[3];
      v522[2] = v442[2];
      v522[3] = v120;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined retain of Graph((uint64_t)v522);
      Graph.edge(to:)((uint64_t)&v515, v474);
      outlined release of Graph((uint64_t)v522);
      outlined init with take of MetalFunctionNode?((uint64_t)v474, (uint64_t)&v481, &demangling cache variable for type metadata for Edge?);
      if (!*((_QWORD *)&v481 + 1))
      {
        swift_bridgeObjectRelease();
        swift_release();
        v34 = (__int128 *)v423;
        v36 = v398;
        goto LABEL_152;
      }
      v496[0] = v481;
      v496[1] = v482;
      v496[2] = v483;
      v497 = v484;
      v498 = v482;
      swift_retain();
      outlined retain of String((uint64_t)&v498);
      outlined release of Edge?(v474);
      ShaderGraphNode.out.getter((uint64_t)v475);
      if (!v447)
      {
        Graph.moveEdges(from:to:)((uint64_t)v475, (uint64_t)v496);
        v121 = *(_QWORD *)(v429 + 16);
        if (!v121)
          goto LABEL_170;
        swift_bridgeObjectRetain_n();
        v122 = (uint64_t *)(v429 + 40);
        v123 = (uint64_t *)(v429 + 48);
        v124 = (uint64_t *)(v429 + 56);
        v125 = (uint64_t *)(v429 + 64);
        v126 = (char *)(v429 + 72);
        v127 = (uint64_t *)(v429 + 80);
        v128 = 1;
        v129 = (Swift::UInt *)loga;
        v390 = v121;
        while (2)
        {
          v130 = *v129;
          v131 = *v122;
          v132 = *v123;
          v133 = *v124;
          v134 = *v125;
          v135 = *v126;
          v136 = *v127;
          v506[0] = v130;
          v506[1] = v131;
          v409 = v132;
          v506[2] = v132;
          v506[3] = v133;
          v392 = v134;
          v393 = v136;
          v506[4] = v134;
          v394 = v135;
          v507 = v135;
          v508 = v136;
          v137 = v115[9];
          v469 = v115[8];
          v470[0] = v137;
          *(_OWORD *)((char *)v470 + 9) = *(_OWORD *)((char *)v115 + 153);
          v138 = v115[5];
          v465 = v115[4];
          v466 = v138;
          v139 = v115[7];
          v467 = v115[6];
          v468 = v139;
          v140 = v115[1];
          v461 = *v115;
          v462 = v140;
          v141 = v115[3];
          v463 = v115[2];
          v464 = v141;
          v142 = v140;
          v143 = (_QWORD *)(*((_QWORD *)&v461 + 1) + 32);
          v144 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 16);
          v449 = v133;
          if ((_QWORD)v461)
          {
            v145 = v131;
            v146 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v130, (uint64_t)v143, v144, (_QWORD *)(v461 + 16), v461 + 32);
            if ((v147 & 1) == 0)
            {
              v131 = v145;
              if ((v146 & 0x8000000000000000) != 0)
                goto LABEL_369;
              goto LABEL_111;
            }
LABEL_108:
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v461);
            v148 = MEMORY[0x24BEE4AF8];
            goto LABEL_139;
          }
          if (!v144)
            goto LABEL_108;
          if (*v143 == v130)
          {
            v146 = 0;
            goto LABEL_111;
          }
          if (v144 == 1)
            goto LABEL_108;
          if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 40) == v130)
          {
            v146 = 1;
            goto LABEL_111;
          }
          if (v144 == 2)
            goto LABEL_108;
          if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 48) == v130)
          {
            v146 = 2;
            goto LABEL_111;
          }
          v166 = 0;
          do
          {
            if (v144 - 3 == v166)
            {
              v115 = v442;
              v34 = &v461;
              goto LABEL_108;
            }
            v167 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 56 + 8 * v166++);
          }
          while (v167 != v130);
          v146 = v166 + 2;
          v115 = v442;
          v34 = &v461;
          if (v166 + 2 < 0)
          {
LABEL_369:
            __break(1u);
LABEL_370:
            __break(1u);
            goto LABEL_371;
          }
LABEL_111:
          if (v146 >= *(_QWORD *)(v142 + 16))
            goto LABEL_368;
          v149 = (_QWORD *)(v142 + 48 * v146);
          v151 = v149[4];
          v150 = v149[5];
          v152 = v149[6];
          v153 = *(_QWORD *)(v150 + 16);
          v391 = v128;
          v431 = v131;
          if (!v151)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            outlined retain of Graph((uint64_t)&v461);
            swift_retain();
            v389 = v152;
            swift_retain();
            if (!v153)
            {
LABEL_136:
              swift_release();
              swift_release();
              v148 = MEMORY[0x24BEE4AF8];
              v34 = &v461;
              goto LABEL_138;
            }
            v158 = v153;
            v156 = 0;
            v159 = (_QWORD *)(v150 + 80);
            while (2)
            {
              if (*(v159 - 6) == v130)
              {
                v160 = *(v159 - 4);
                v161 = *(v159 - 3);
                v396 = *(v159 - 2);
                v406 = *((_BYTE *)v159 - 8);
                v403 = *v159;
                v162 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*(v159 - 5) + 128);
                swift_retain();
                swift_bridgeObjectRetain();
                if ((v162(v431) & 1) != 0)
                {
                  if (v160 == v409 && v161 == v449)
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
LABEL_127:
                    if ((v406 & 1) != 0)
                    {
                      v164 = v394;
                      if (v403 != v393)
                        v164 = 0;
                      if ((v164 & 1) != 0)
                      {
LABEL_135:
                        v34 = &v461;
                        v152 = v389;
LABEL_115:
                        if (v156 < *(_QWORD *)(v152 + 16))
                        {
                          v157 = *(_QWORD *)(v152 + 16 * v156 + 40);
                          swift_retain();
                          swift_retain();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_retain();
                          swift_bridgeObjectRetain();
                          v148 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v157, v506);
                          swift_release();
                          swift_release();
                          swift_bridgeObjectRelease();
                          swift_release();
                          v121 = v390;
                          v128 = v391;
                          goto LABEL_139;
                        }
LABEL_376:
                        __break(1u);
LABEL_377:
                        __break(1u);
                        goto LABEL_378;
                      }
                    }
                    else if ((v394 & 1) == 0 && v396 == v392 && v403 == v393)
                    {
                      goto LABEL_135;
                    }
                  }
                  else
                  {
                    v163 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_release();
                    if ((v163 & 1) != 0)
                      goto LABEL_127;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_release();
                }
              }
              v159 += 7;
              if (v158 == ++v156)
                goto LABEL_136;
              continue;
            }
          }
          swift_retain();
          swift_bridgeObjectRetain();
          outlined retain of Graph((uint64_t)&v461);
          swift_retain();
          swift_retain();
          swift_retain();
          v154 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v506, v150 + 32, v153, (_QWORD *)(v151 + 16), v151 + 32);
          if ((v155 & 1) == 0)
          {
            v156 = v154;
            if ((v154 & 0x8000000000000000) == 0)
              goto LABEL_115;
            __break(1u);
            goto LABEL_376;
          }
          swift_release();
          swift_release();
          swift_release();
          v148 = MEMORY[0x24BEE4AF8];
LABEL_138:
          v121 = v390;
          v128 = v391;
LABEL_139:
          outlined release of Graph((uint64_t)&v461);
          v165 = *(_QWORD *)(v148 + 16);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          if (v165)
          {
            outlined release of [Input]((uint64_t)&v573);
            outlined release of [Input]((uint64_t)&v573);
            goto LABEL_276;
          }
          if (v128 != v121)
          {
            v129 = (Swift::UInt *)(loga + 56 * v128);
            v122 = (uint64_t *)(v129 + 1);
            v123 = (uint64_t *)(v129 + 2);
            v124 = (uint64_t *)(v129 + 3);
            v125 = (uint64_t *)(v129 + 4);
            v126 = (char *)(v129 + 5);
            v127 = (uint64_t *)(v129 + 6);
            ++v128;
            continue;
          }
          break;
        }
        outlined release of [Input]((uint64_t)&v573);
        outlined release of [Input]((uint64_t)&v573);
LABEL_170:
        v189 = swift_bridgeObjectRetain();
        v190 = specialized Sequence.compactMap<A>(_:)(v189, v115);
        swift_bridgeObjectRelease();
        v407 = *(_QWORD *)(v190 + 16);
        if (v407)
        {
          v404 = v190 + 32;
          swift_bridgeObjectRetain();
          v191 = 0;
          do
          {
            v432 = v191;
            v192 = (__int128 *)(v404 + 112 * v191);
            v193 = *v192;
            v194 = v192[1];
            v505[2] = v192[2];
            v505[1] = v194;
            v505[0] = v193;
            v195 = v192[3];
            v196 = v192[4];
            v197 = v192[5];
            v505[6] = v192[6];
            v505[5] = v197;
            v505[4] = v196;
            v505[3] = v195;
            outlined retain of Edge((uint64_t)v505);
            Graph.remove(_:)((uint64_t)v505);
            if (*(_QWORD *)&v505[0] != -7)
            {
              if ((*(_QWORD *)&v505[0] & 0x8000000000000000) != 0)
                goto LABEL_366;
              v198 = *((_QWORD *)v115 + 8);
              if (*(_QWORD *)&v505[0] >= *(_QWORD *)(v198 + 16))
                goto LABEL_367;
              v199 = (_QWORD *)(v198 + 48 * *(_QWORD *)&v505[0]);
              v200 = v199[4];
              v201 = v199[6];
              v395 = v199[7];
              v397 = v200;
              v202 = *(_QWORD *)(v201 + 16);
              if (v202)
              {
                v36 = v201 + 32;
                v203 = (uint64_t *)v199[6];
                swift_bridgeObjectRetain_n();
                outlined copy of NodePersonality(v200);
                swift_bridgeObjectRetain();
                v204 = 0;
                v205 = v203 + 5;
                v206 = v203 + 6;
                v207 = v203 + 7;
                v208 = 1;
                v209 = (Swift::UInt *)v36;
                logb = v36;
                while (1)
                {
                  v210 = *v209;
                  v211 = *v205;
                  v212 = v36 + 56 * v204;
                  v204 = v208;
                  v213 = *v207;
                  v214 = *(_QWORD *)(v212 + 48);
                  v215 = *(_BYTE *)(v212 + 40);
                  v216 = *(_QWORD *)(v212 + 32);
                  v217 = *v206;
                  v502[0] = *v209;
                  v502[1] = v211;
                  v502[2] = v217;
                  v502[3] = v213;
                  v502[4] = v216;
                  v503 = v215;
                  v504 = v214;
                  v218 = v115[9];
                  v469 = v115[8];
                  v470[0] = v218;
                  *(_OWORD *)((char *)v470 + 9) = *(_OWORD *)((char *)v115 + 153);
                  v219 = v115[5];
                  v465 = v115[4];
                  v466 = v219;
                  v220 = v115[7];
                  v467 = v115[6];
                  v468 = v220;
                  v221 = v115[1];
                  v461 = *v115;
                  v462 = v221;
                  v222 = v115[3];
                  v463 = v115[2];
                  v464 = v222;
                  v223 = v221;
                  v224 = (_QWORD *)(*((_QWORD *)&v461 + 1) + 32);
                  v225 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 16);
                  if ((_QWORD)v461)
                  {
                    v226 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v210, (uint64_t)v224, v225, (_QWORD *)(v461 + 16), v461 + 32);
                    if ((v227 & 1) != 0)
                      goto LABEL_193;
                    if ((v226 & 0x8000000000000000) != 0)
                      goto LABEL_360;
                  }
                  else
                  {
                    if (!v225)
                      goto LABEL_193;
                    if (*v224 == v210)
                    {
                      v226 = 0;
                    }
                    else
                    {
                      if (v225 == 1)
                        goto LABEL_193;
                      if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 40) == v210)
                      {
                        v226 = 1;
                      }
                      else
                      {
                        if (v225 == 2)
                          goto LABEL_193;
                        if (*(_QWORD *)(*((_QWORD *)&v461 + 1) + 48) != v210)
                        {
                          v237 = 0;
                          while (v225 - 3 != v237)
                          {
                            v238 = *(_QWORD *)(*((_QWORD *)&v461 + 1) + 56 + 8 * v237++);
                            if (v238 == v210)
                            {
                              v226 = v237 + 2;
                              if (((v237 + 2) & 0x8000000000000000) == 0)
                                goto LABEL_187;
                              goto LABEL_360;
                            }
                          }
LABEL_193:
                          swift_retain();
                          swift_bridgeObjectRetain();
                          outlined retain of Graph((uint64_t)&v461);
                          v235 = MEMORY[0x24BEE4AF8];
                          goto LABEL_194;
                        }
                        v226 = 2;
                      }
                    }
                  }
LABEL_187:
                  if (v226 >= *(_QWORD *)(v223 + 16))
                    goto LABEL_359;
                  v228 = v202;
                  v229 = (_QWORD *)(v223 + 48 * v226);
                  v230 = v229[4];
                  v231 = v229[5];
                  v232 = v229[6];
                  swift_retain_n();
                  swift_bridgeObjectRetain_n();
                  outlined retain of Graph((uint64_t)&v461);
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  specialized OrderedDictionary.subscript.getter((uint64_t)v502, v230, v231, v232);
                  v234 = v233;
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  if (v234)
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    v235 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v234, v502);
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_release();
                  }
                  else
                  {
                    v235 = MEMORY[0x24BEE4AF8];
                  }
                  v34 = &v461;
                  v202 = v228;
                  v36 = logb;
LABEL_194:
                  outlined release of Graph((uint64_t)&v461);
                  v236 = *(_QWORD *)(v235 + 16);
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_bridgeObjectRelease();
                  if (v236)
                  {
                    swift_bridgeObjectRelease_n();
                    outlined consume of NodePersonality(v397);
                    swift_bridgeObjectRelease();
                    v115 = v442;
                    goto LABEL_173;
                  }
                  v115 = v442;
                  if (v204 == v202)
                  {
                    swift_bridgeObjectRelease_n();
                    goto LABEL_209;
                  }
                  v209 = (Swift::UInt *)(v36 + 56 * v204);
                  v205 = (uint64_t *)(v209 + 1);
                  v206 = (uint64_t *)(v209 + 2);
                  v207 = (uint64_t *)(v209 + 3);
                  v208 = v204 + 1;
                }
              }
              swift_bridgeObjectRetain();
              outlined copy of NodePersonality(v200);
              swift_bridgeObjectRetain();
LABEL_209:
              v239 = swift_bridgeObjectRetain();
              v240 = specialized Sequence.compactMap<A>(_:)(v239, v115);
              swift_bridgeObjectRelease();
              v241 = *(_QWORD *)(v240 + 16);
              if (v241)
              {
                swift_bridgeObjectRetain();
                v36 = 32;
                do
                {
                  v242 = *(_OWORD *)(v240 + v36);
                  v243 = *(_OWORD *)(v240 + v36 + 16);
                  v501[2] = *(_OWORD *)(v240 + v36 + 32);
                  v501[1] = v243;
                  v501[0] = v242;
                  v244 = *(_OWORD *)(v240 + v36 + 48);
                  v245 = *(_OWORD *)(v240 + v36 + 64);
                  v246 = *(_OWORD *)(v240 + v36 + 80);
                  v501[6] = *(_OWORD *)(v240 + v36 + 96);
                  v501[5] = v246;
                  v501[4] = v245;
                  v501[3] = v244;
                  outlined retain of Edge((uint64_t)v501);
                  Graph.remove(_:)((uint64_t)v501);
                  if (*(_QWORD *)&v501[0] != -7)
                  {
                    if ((*(_QWORD *)&v501[0] & 0x8000000000000000) != 0)
                      goto LABEL_355;
                    v247 = *((_QWORD *)v115 + 8);
                    if (*(_QWORD *)(v247 + 16) <= *(_QWORD *)&v501[0])
                      goto LABEL_356;
                    v248 = v115;
                    v249 = v247 + 48 * *(_QWORD *)&v501[0];
                    v250 = *(_QWORD *)(v249 + 32);
                    v450 = *(_QWORD *)(v249 + 56);
                    outlined copy of NodePersonality(v250);
                    swift_bridgeObjectRetain();
                    v251 = swift_bridgeObjectRetain();
                    if ((specialized Sequence.allSatisfy(_:)(v251, v248) & 1) != 0)
                    {
                      v252 = swift_bridgeObjectRetain();
                      v253 = specialized Sequence.compactMap<A>(_:)(v252, v248);
                      swift_bridgeObjectRelease();
                      specialized Sequence.forEach(_:)(v253, v248);
                      v34 = &v461;
                      swift_bridgeObjectRelease();
                      specialized Graph.remove(_:)(v450);
                    }
                    outlined consume of NodePersonality(v250);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v115 = v442;
                  }
                  outlined release of Edge((uint64_t)v501);
                  v36 += 112;
                  --v241;
                }
                while (v241);
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              specialized Graph.remove(_:)(v395);
              outlined consume of NodePersonality(v397);
              swift_bridgeObjectRelease();
LABEL_173:
              swift_bridgeObjectRelease();
            }
            outlined release of Edge((uint64_t)v505);
            v191 = v432 + 1;
          }
          while (v432 + 1 != v407);
          swift_bridgeObjectRelease_n();
        }
        else
        {
LABEL_274:
          swift_bridgeObjectRelease();
        }
        specialized Graph.remove(_:)(*(uint64_t *)&v552[8]);
LABEL_276:
        swift_release();
        v499 = v476;
        outlined release of String((uint64_t)&v499);
      }
      swift_release();
      outlined release of String((uint64_t)&v498);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of ShaderGraphNode?(v398, v399);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of NodePersonality(v423);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v110 = *(v102 - 3);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_95;
    v102 += 7;
    --v101;
  }
  while (v101);
  v515 = v104;
  v516 = v103;
  v517 = v105;
  v518 = v110;
  v519 = v106;
  v520 = v107;
  v521 = v108;
  v100 = v435;
  v36 = v398;
LABEL_82:
  v34 = (__int128 *)v423;
  v455 = (_QWORD *)v423;
  *(_QWORD *)&v456 = v100;
  *((_QWORD *)&v456 + 1) = v412;
  *(_QWORD *)&v457 = v408;
  *((_QWORD *)&v457 + 1) = v405;
  LOBYTE(v458) = v402;
  v459 = 0x746C7561666564;
  v460 = 0xE700000000000000;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v455);
  outlined init with take of UserGraphError.ErrorType((__int128 *)&v455, (uint64_t)&v461);
  v472 = 0;
  v471 = 0;
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v423);
  swift_bridgeObjectRetain();
  outlined release of UserGraphError((unint64_t *)&v461);
LABEL_152:
  if (one-time initialization token for logger != -1)
    goto LABEL_364;
LABEL_153:
  v168 = type metadata accessor for Logger();
  __swift_project_value_buffer(v168, (uint64_t)logger);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality((unint64_t)v34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality((unint64_t)v34);
  swift_bridgeObjectRetain();
  v169 = Logger.logObject.getter();
  v170 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v169, v170))
  {
    v171 = (uint8_t *)swift_slowAlloc();
    v444 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v171 = 136315138;
    *(_QWORD *)&v461 = 1701080942;
    *((_QWORD *)&v461 + 1) = 0xE400000000000000;
    v455 = v444;
    v172._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v172);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v461 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v461, *((unint64_t *)&v461 + 1), (uint64_t *)&v455);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality((unint64_t)v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality((unint64_t)v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_245E46000, v169, v170, "Could not replace image node '%s' with an invalid asset name by its default value because its default input is not connected to anything.", v171, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v444, -1, -1);
    MEMORY[0x24954C33C](v171, -1, -1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of ShaderGraphNode?(v398, v399);
    outlined consume of NodePersonality((unint64_t)v34);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality((unint64_t)v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v36, v399);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NodePersonality((unint64_t)v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality((unint64_t)v34);

  }
LABEL_156:
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
}

uint64_t UserGraphCompiler.compiledShaderProgram(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for MetalShaderProgram();
  v3 = (_QWORD *)swift_allocObject();
  v4 = MEMORY[0x24BEE4AF8];
  v3[2] = MEMORY[0x24BEE4AF8];
  v3[3] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v3[4] = v4;
  v3[5] = v4;
  v3[6] = 1;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 120))(a1, v3);
  swift_release();
  return v5;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = a1 + 64;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (String, MetalDataType)));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (uniformPropertyName: String, type: MetalDataType)));
      swift_dynamicCast();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v13;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v13;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 40 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      *(_QWORD *)(v7 + 48) = v11;
      *(_OWORD *)(v7 + 56) = v12;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = *(_OWORD *)(a1 + 144);
  v39 = *(_OWORD *)(a1 + 128);
  v40 = v4;
  v5 = *(_OWORD *)(a1 + 176);
  v41 = *(_OWORD *)(a1 + 160);
  v42 = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v35 = *(_OWORD *)(a1 + 64);
  v36 = v6;
  v7 = *(_OWORD *)(a1 + 112);
  v37 = *(_OWORD *)(a1 + 96);
  v38 = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v33 = *(_OWORD *)(a1 + 32);
  v34 = v8;
  v10 = *((_QWORD *)&v33 + 1);
  v9 = v33;
  outlined retain of (String, NodeDef)((uint64_t)&v33);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
  if ((v12 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v13 = 192;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v2[6] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = (_OWORD *)(v2[7] + 144 * result);
    *v15 = v34;
    v16 = v35;
    v17 = v36;
    v18 = v38;
    v15[3] = v37;
    v15[4] = v18;
    v15[1] = v16;
    v15[2] = v17;
    v19 = v39;
    v20 = v40;
    v21 = v42;
    v15[7] = v41;
    v15[8] = v21;
    v15[5] = v19;
    v15[6] = v20;
    v22 = v2[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      break;
    v2[2] = v24;
    if (!--v3)
      goto LABEL_9;
    v25 = v13 + 160;
    v26 = (__int128 *)(a1 + v13);
    v27 = v26[7];
    v39 = v26[6];
    v40 = v27;
    v28 = v26[9];
    v41 = v26[8];
    v42 = v28;
    v29 = v26[3];
    v35 = v26[2];
    v36 = v29;
    v30 = v26[5];
    v37 = v26[4];
    v38 = v30;
    v31 = v26[1];
    v33 = *v26;
    v34 = v31;
    v10 = *((_QWORD *)&v33 + 1);
    v9 = v33;
    outlined retain of (String, NodeDef)((uint64_t)&v33);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    v13 = v25;
    if ((v32 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, GeomPropDef>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v21 = v2 + 64;
  swift_retain();
  v5 = (_BYTE *)(a1 + 104);
  while (1)
  {
    v22 = v4;
    v6 = *((_QWORD *)v5 - 9);
    v7 = *((_QWORD *)v5 - 8);
    v9 = *((_QWORD *)v5 - 7);
    v8 = *((_QWORD *)v5 - 6);
    v10 = *((_QWORD *)v5 - 5);
    v11 = *((_QWORD *)v5 - 4);
    v12 = *((_QWORD *)v5 - 3);
    v13 = *(v5 - 16);
    v25 = *(v5 - 15);
    v24 = *((_QWORD *)v5 - 1);
    v23 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of GeomPropDef.GeomProp(v11, v12, v13);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v3[6] + 16 * result);
    *v16 = v6;
    v16[1] = v7;
    v17 = v3[7] + (result << 6);
    *(_QWORD *)v17 = v9;
    *(_QWORD *)(v17 + 8) = v8;
    *(_QWORD *)(v17 + 16) = v10;
    *(_QWORD *)(v17 + 24) = v11;
    *(_QWORD *)(v17 + 32) = v12;
    *(_BYTE *)(v17 + 40) = v13;
    *(_BYTE *)(v17 + 41) = v25;
    *(_QWORD *)(v17 + 48) = v24;
    *(_BYTE *)(v17 + 56) = v23;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v3[2] = v20;
    v5 += 80;
    v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDef.Implementation]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Input, FunctionNodeID>, (uint64_t (*)(__int128 *))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Output, FunctionNodeID>, (uint64_t (*)(__int128 *))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SGGraph.ReplacementNode>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 56);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 3);
    v6 = *((_QWORD *)v4 - 2);
    v7 = *((_QWORD *)v4 - 1);
    v15 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[7] + 24 * result;
    *(_QWORD *)v11 = v7;
    *(_OWORD *)(v11 + 8) = v15;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 = (_OWORD *)((char *)v4 + 40);
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[41];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, ShaderGraphNode>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = v3 - 1;
  for (i = 32; ; i += 128)
  {
    *(_OWORD *)&v28[16] = *(_OWORD *)(a1 + i + 96);
    *(_OWORD *)&v28[25] = *(_OWORD *)(a1 + i + 105);
    v6 = *(_OWORD *)(a1 + i + 80);
    v27 = *(_OWORD *)(a1 + i + 64);
    *(_OWORD *)v28 = v6;
    v7 = *(_OWORD *)(a1 + i + 16);
    v23 = *(_OWORD *)(a1 + i);
    v24 = v7;
    v8 = *(_OWORD *)(a1 + i + 48);
    v25 = *(_OWORD *)(a1 + i + 32);
    v26 = v8;
    v22 = *(_OWORD *)&v28[8];
    v9 = *(_QWORD *)&v28[24];
    v10 = *(_QWORD *)&v28[32];
    v11 = v28[40];
    v12 = v6;
    v29 = v23;
    v30 = v24;
    v31 = v25;
    v32 = v8;
    LOBYTE(v33) = v27;
    *((_QWORD *)&v33 + 1) = *((_QWORD *)&v27 + 1);
    outlined retain of (Key, ShaderGraphNode)((uint64_t)&v23);
    result = specialized __RawDictionaryStorage.find<A>(_:)(&v29);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (_OWORD *)(v2[6] + 80 * result);
    v16 = v32;
    v15[2] = v31;
    v15[3] = v16;
    v15[4] = v33;
    v17 = v30;
    *v15 = v29;
    v15[1] = v17;
    v18 = v2[7] + 48 * result;
    *(_QWORD *)v18 = v12;
    *(_OWORD *)(v18 + 8) = v22;
    *(_QWORD *)(v18 + 24) = v9;
    *(_QWORD *)(v18 + 32) = v10;
    *(_BYTE *)(v18 + 40) = v11;
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_12;
    v2[2] = v21;
    if (!v4)
    {
      swift_release();
      goto LABEL_10;
    }
    --v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:), String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    v5 = (void *)*(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    v9 = v4[1];
    v10 = v4[2];
    v11 = v4[3];
    v12 = *((_BYTE *)v4 + 32);
    v13 = v4[5];
    v14 = v4[6];
    v15 = v4[7];
    *(_QWORD *)&v25 = *(v4 - 4);
    *((_QWORD *)&v25 + 1) = v5;
    *(_QWORD *)&v26 = v6;
    *((_QWORD *)&v26 + 1) = v7;
    *(_QWORD *)&v27 = v8;
    *((_QWORD *)&v27 + 1) = v9;
    *(_QWORD *)&v28 = v10;
    *((_QWORD *)&v28 + 1) = v11;
    LOBYTE(v29) = v12;
    *((_QWORD *)&v29 + 1) = v13;
    outlined copy of SGDataTypeStorage((id)v25, v5, v6, v7, v8, v9, v10, v11, v12);
    swift_retain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(&v25);
    if ((v17 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v18 = (_OWORD *)(v2[6] + 80 * result);
    v19 = v28;
    v18[2] = v27;
    v18[3] = v19;
    v18[4] = v29;
    v20 = v26;
    *v18 = v25;
    v18[1] = v20;
    v21 = (_QWORD *)(v2[7] + 16 * result);
    *v21 = v14;
    v21[1] = v15;
    v22 = v2[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v4 += 12;
    v2[2] = v24;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : String]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, InputSpec>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 56);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 3);
    v6 = *((_QWORD *)v4 - 2);
    v7 = *((_QWORD *)v4 - 1);
    v15 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[7] + 24 * result;
    *(_QWORD *)v11 = v7;
    *(_OWORD *)(v11 + 8) = v15;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 = (_OWORD *)((char *)v4 + 40);
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ShaderGraphNode.ID>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MetalDataType, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_retain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v5;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v6;
    v10[1] = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (MetalDataType, Any?)?>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, (MetalDataType, Any?)?));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = outlined init with take of MetalFunctionNode?((uint64_t)&v17, v3[7] + 40 * result, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MTLFunctionStitchingInputNode>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ShaderGraphNode.ID>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, ShaderGraphNode.ID>);
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, MetalFunctionNode>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (FunctionNodeID, MetalFunctionNode));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = outlined init with take of MetalFunctionNode(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, FunctionNodeID>);
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(__int128 *))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    v10 = v7[1];
    v11 = v7[2];
    v12 = *((_BYTE *)v7 + 24);
    v13 = v7[4];
    v14 = v7[5];
    *(_QWORD *)&v22 = *(v7 - 2);
    *((_QWORD *)&v22 + 1) = v8;
    *(_QWORD *)&v23 = v9;
    *((_QWORD *)&v23 + 1) = v10;
    *(_QWORD *)&v24 = v11;
    BYTE8(v24) = v12;
    v25 = v13;
    swift_retain();
    swift_bridgeObjectRetain();
    result = a3(&v22);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = v5[6] + 56 * result;
    v18 = v23;
    *(_OWORD *)v17 = v22;
    *(_OWORD *)(v17 + 16) = v18;
    *(_OWORD *)(v17 + 32) = v24;
    *(_QWORD *)(v17 + 48) = v25;
    *(_QWORD *)(v5[7] + 8 * result) = v14;
    v19 = v5[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7 += 8;
    v5[2] = v21;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v6 = *(i - 1);
      v7 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
      if ((v9 & 1) != 0)
        break;
      *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v10 = 8 * result;
      *(_QWORD *)(v4[6] + v10) = v6;
      *(_QWORD *)(v4[7] + v10) = v7;
      v11 = v4[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v4[2] = v13;
      if (!--v2)
        return (unint64_t)v4;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XMLElement);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, (void (*)(_QWORD))type metadata accessor for MaterialXTarget);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, (void (*)(_QWORD))type metadata accessor for SGWarning);
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    a2(0);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

unint64_t specialized Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t result;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  Swift::String v37;
  Swift::Bool v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *i;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  __int128 v87;
  unint64_t v88;
  _OWORD v89[9];
  _OWORD v90[2];
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96[5];
  char v97;
  uint64_t v98;
  _QWORD v99[5];
  char v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  char v106;
  char *v107;

  v4 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v84 = a1 + 32;
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v8 = v84 + 48 * v6;
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v86 = v7;
        v12 = *(_QWORD *)v8;
        v11 = *(_QWORD *)(v8 + 8);
        v82 = *(_OWORD *)(v8 + 24);
        v81 = *(_BYTE *)(v8 + 40);
        swift_bridgeObjectRetain_n();
        v107 = (char *)v12;
        outlined copy of NodePersonality(v12);
        swift_bridgeObjectRetain();
        v13 = v9 + 56;
        while (1)
        {
          v14 = *(_QWORD *)(v13 - 16);
          v15 = one-time initialization token for sampler;
          swift_retain();
          swift_bridgeObjectRetain();
          if (v15 != -1)
            swift_once();
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 128))(static MaterialXDataType.sampler);
          swift_bridgeObjectRelease();
          swift_release();
          if ((v16 & 1) != 0)
            break;
          v13 += 56;
          if (!--v10)
          {
            swift_bridgeObjectRelease();
            outlined consume of NodePersonality((unint64_t)v107);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v5 = v79;
            v7 = v86;
            goto LABEL_3;
          }
        }
        swift_bridgeObjectRelease();
        v7 = v86;
        *(_QWORD *)&v89[0] = v86;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v86[2] + 1, 1);
          v7 = *(_QWORD **)&v89[0];
        }
        v5 = v79;
        v18 = v7[2];
        v17 = v7[3];
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v7 = *(_QWORD **)&v89[0];
        }
        v7[2] = v18 + 1;
        v19 = &v7[6 * v18];
        v19[4] = v107;
        v19[5] = v11;
        v19[6] = v9;
        *(_OWORD *)(v19 + 7) = v82;
        *((_BYTE *)v19 + 72) = v81;
      }
LABEL_3:
      ++v6;
    }
    while (v6 != v5);
    v4 = a1;
    swift_bridgeObjectRelease();
    v20 = v78;
    v21 = v7[2];
    if (v21)
      goto LABEL_17;
LABEL_54:
    swift_release();
    if (v5)
      goto LABEL_26;
    goto LABEL_55;
  }
  v20 = v3;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v21 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (!v21)
    goto LABEL_54;
LABEL_17:
  v22 = *(_QWORD **)(v80 + 64);
  swift_retain();
  v23 = v7 + 7;
  while (1)
  {
    v24 = *(v23 - 3);
    v25 = *v23;
    outlined copy of NodePersonality(v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      v22 = (_QWORD *)result;
      if ((v25 & 0x8000000000000000) == 0)
        goto LABEL_20;
LABEL_24:
      __break(1u);
LABEL_25:
      swift_release_n();
      v5 = v79;
      *(_QWORD *)(v80 + 64) = v22;
      v20 = v78;
      v4 = a1;
      if (v79)
      {
LABEL_26:
        swift_bridgeObjectRetain();
        v29 = MEMORY[0x24BEE4AF8];
        v30 = (uint64_t *)(v4 + 40);
        v107 = (char *)0x8000000245FC8330;
        do
        {
          v31 = *(v30 - 1);
          if (v31 >> 61 == 5)
          {
            v32 = v5;
            v33 = v29;
            v34 = *v30;
            v35 = v30[1];
            v87 = *((_OWORD *)v30 + 1);
            v36 = *((_BYTE *)v30 + 32);
            outlined copy of NodePersonality(v31);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v37._countAndFlagsBits = 0xD000000000000013;
            v37._object = v107;
            v38 = String.hasPrefix(_:)(v37);
            swift_bridgeObjectRelease();
            if (v38)
            {
              v29 = v33;
              *(_QWORD *)&v89[0] = v33;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
                v29 = *(_QWORD *)&v89[0];
              }
              v39 = v87;
              v41 = *(_QWORD *)(v29 + 16);
              v40 = *(_QWORD *)(v29 + 24);
              if (v41 >= v40 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
                v39 = v87;
                v29 = *(_QWORD *)&v89[0];
              }
              *(_QWORD *)(v29 + 16) = v41 + 1;
              v42 = v29 + 48 * v41;
              *(_QWORD *)(v42 + 32) = v31;
              *(_QWORD *)(v42 + 40) = v34;
              *(_QWORD *)(v42 + 48) = v35;
              *(_OWORD *)(v42 + 56) = v39;
              *(_BYTE *)(v42 + 72) = v36;
            }
            else
            {
              outlined consume of NodePersonality(v31);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v29 = v33;
            }
            v5 = v32;
          }
          v30 += 6;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease();
        v20 = v78;
        v43 = *(_QWORD *)(v29 + 16);
        if (v43)
        {
LABEL_38:
          swift_retain();
          v44 = (uint64_t *)(v29 + 40);
          for (i = (char *)(v43 - 1); ; i = v107 - 1)
          {
            v107 = i;
            v46 = *v44;
            v47 = v44[1];
            v48 = *((_BYTE *)v44 + 32);
            v102 = *(v44 - 1);
            v103 = v46;
            v104 = v47;
            v85 = v44;
            v88 = v102;
            v105 = *((_OWORD *)v44 + 1);
            v106 = v48;
            outlined copy of NodePersonality(v102);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            ShaderGraphNode.out.getter((uint64_t)&v91);
            if (v20)
            {
              outlined consume of NodePersonality(v88);
              swift_bridgeObjectRelease();
              swift_release_n();
              return swift_bridgeObjectRelease();
            }
            v49 = *(_OWORD *)(v80 + 144);
            v89[8] = *(_OWORD *)(v80 + 128);
            v90[0] = v49;
            *(_OWORD *)((char *)v90 + 9) = *(_OWORD *)(v80 + 153);
            v50 = *(_OWORD *)(v80 + 80);
            v89[4] = *(_OWORD *)(v80 + 64);
            v89[5] = v50;
            v51 = *(_OWORD *)(v80 + 112);
            v89[6] = *(_OWORD *)(v80 + 96);
            v89[7] = v51;
            v52 = *(_OWORD *)(v80 + 16);
            v89[0] = *(_OWORD *)v80;
            v89[1] = v52;
            v53 = *(_OWORD *)(v80 + 48);
            v89[2] = *(_OWORD *)(v80 + 32);
            v89[3] = v53;
            v54 = v52;
            result = specialized OrderedSet._find(_:)(v91, *(uint64_t *)&v89[0], *((_QWORD **)&v89[0] + 1));
            if ((v55 & 1) != 0)
            {
              v62 = MEMORY[0x24BEE4AF8];
              if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
                goto LABEL_50;
            }
            else
            {
              if ((result & 0x8000000000000000) != 0)
                goto LABEL_61;
              if (result >= *(_QWORD *)(v54 + 16))
                goto LABEL_62;
              v56 = (_QWORD *)(v54 + 48 * result);
              v57 = v56[4];
              v58 = v56[5];
              v59 = v56[6];
              v95 = v92;
              swift_retain();
              swift_retain();
              swift_retain();
              outlined retain of String((uint64_t)&v95);
              outlined retain of Graph((uint64_t)v89);
              swift_retain();
              specialized OrderedDictionary.subscript.getter((uint64_t)&v91, v57, v58, v59);
              v61 = v60;
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              outlined release of String((uint64_t)&v95);
              if (v61)
              {
                swift_retain();
                outlined retain of String((uint64_t)&v95);
                v62 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF11ShaderGraph10OrderedSetVyAF5InputVG_AF4EdgeVs5NeverOTg504_s11d26Graph0B0V5edges4fromSayAA4i19VGAA6OutputV_tFAgA5H6VXEfU_AF0R0VTf1cn_nTf4xg_n(v61, &v91);
                swift_release();
                outlined release of String((uint64_t)&v95);
                swift_release();
                swift_release();
              }
              else
              {
                v62 = MEMORY[0x24BEE4AF8];
              }
              outlined release of Graph((uint64_t)v89);
              if (!*(_QWORD *)(v62 + 16))
              {
LABEL_50:
                swift_bridgeObjectRelease();
                swift_release();
                v93 = v92;
                outlined release of String((uint64_t)&v93);
                outlined consume of NodePersonality(v88);
                swift_bridgeObjectRelease();
                goto LABEL_51;
              }
            }
            v63 = *(_QWORD *)(v62 + 88);
            v64 = *(_QWORD *)(v62 + 96);
            v66 = *(_QWORD *)(v62 + 104);
            v65 = *(_QWORD *)(v62 + 112);
            v67 = *(_QWORD *)(v62 + 120);
            v83 = *(_BYTE *)(v62 + 128);
            v68 = *(_QWORD *)(v62 + 136);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            result = swift_bridgeObjectRelease();
            v99[0] = v63;
            v99[1] = v64;
            v99[2] = v66;
            v99[3] = v65;
            v99[4] = v67;
            v100 = v83;
            v101 = v68;
            if (!*(_QWORD *)(v46 + 16))
              goto LABEL_60;
            v69 = *(_QWORD *)(v46 + 40);
            v70 = *(_QWORD *)(v46 + 48);
            v71 = *(_QWORD *)(v46 + 56);
            v72 = *(_QWORD *)(v46 + 64);
            v73 = *(_BYTE *)(v46 + 72);
            v74 = *(_QWORD *)(v46 + 80);
            v96[0] = *(_QWORD *)(v46 + 32);
            v96[1] = v69;
            v96[2] = v70;
            v96[3] = v71;
            v96[4] = v72;
            v97 = v73;
            v98 = v74;
            swift_retain();
            swift_bridgeObjectRetain();
            Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v96, (unint64_t)v99, a2, a3);
            swift_release();
            v94 = v92;
            outlined release of String((uint64_t)&v94);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of NodePersonality(v88);
            swift_bridgeObjectRelease();
            v20 = 0;
LABEL_51:
            swift_bridgeObjectRelease();
            if (!v107)
              return swift_release_n();
            v44 = v85 + 6;
          }
        }
        return swift_release();
      }
LABEL_55:
      v29 = MEMORY[0x24BEE4AF8];
      v43 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (v43)
        goto LABEL_38;
      return swift_release();
    }
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_24;
LABEL_20:
    if (v25 >= v22[2])
      break;
    v23 += 6;
    v27 = &v22[6 * v25];
    v28 = v27[4];
    v27[4] = 0xE000000000000008;
    outlined consume of NodePersonality(v28);
    outlined consume of NodePersonality(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v21)
      goto LABEL_25;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

unint64_t specialized Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  Swift::String v13;
  Swift::Bool v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  __int128 *v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  _OWORD *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t *v193;
  _OWORD *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _OWORD *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  _OWORD *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  _OWORD *v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  _OWORD *v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  _OWORD *v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _OWORD *v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  _OWORD *v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  _OWORD *v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  char v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  char v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  char v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  char v360[8];
  uint64_t v361;
  __int128 v362;
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  char v368[8];
  __int128 v369;
  _OWORD v370[2];
  uint64_t v371;
  char v372;
  uint64_t v373;
  char v374[8];
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  char v381[8];
  __int128 v382;
  _QWORD v383[7];
  uint64_t v384[7];
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  _OWORD v392[3];
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;
  __int128 v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  __int128 v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  __int128 v433;
  uint64_t v434;
  unint64_t v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  uint64_t v439[5];
  char v440;
  uint64_t v441;
  _QWORD v442[5];
  char v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  char v449;
  uint64_t v450;
  _QWORD v451[5];
  char v452;
  uint64_t v453;
  _QWORD v454[5];
  char v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  char v461;
  uint64_t v462;
  __int128 v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  char v467;
  uint64_t v468;
  _QWORD v469[5];
  char v470;
  uint64_t v471;
  _QWORD v472[5];
  char v473;
  uint64_t v474;
  _QWORD v475[5];
  char v476;
  uint64_t v477;
  _QWORD v478[5];
  char v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  char v486;
  unint64_t v487;

  v4 = v3;
  v5 = *(_QWORD *)(result + 16);
  if (!v5)
    return result;
  v312 = result + 32;
  swift_bridgeObjectRetain();
  v6 = 0;
  v307 = v5;
  while (1)
  {
    v7 = v312 + 48 * v6;
    v8 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    v11 = *(_QWORD *)(v7 + 32);
    v12 = *(_BYTE *)(v7 + 40);
    v481 = *(_QWORD *)v7;
    v482 = v8;
    v483 = v10;
    v484 = v9;
    v485 = v11;
    v486 = v12;
    if (v481 >> 61 != 5)
      goto LABEL_5;
    v308 = v6;
    v313 = v481;
    outlined copy of NodePersonality(v481);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = 0x6567616D695F444ELL;
    v13._object = (void *)0xE800000000000000;
    v14 = String.hasPrefix(_:)(v13);
    swift_bridgeObjectRelease();
    if (v14)
      break;
LABEL_4:
    outlined consume of NodePersonality(v313);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v307;
    v6 = v308;
LABEL_5:
    if (++v6 == v5)
      return swift_bridgeObjectRelease();
  }
  ShaderGraphNode.out.getter((uint64_t)v360);
  if (v4)
  {
    swift_bridgeObjectRelease();
LABEL_283:
    outlined consume of NodePersonality(v313);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v15 = v361;
  v438 = v362;
  v16 = outlined release of String((uint64_t)&v438);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 144))(v16);
  swift_release();
  if (!v17)
  {
    ShaderGraphNode.out.getter((uint64_t)v370);
    *(_QWORD *)&v337 = v313;
    *((_QWORD *)&v337 + 1) = v8;
    v338 = v10;
    v339 = v9;
    v340 = v11;
    v341 = v12;
    v342 = v370[0];
    v343 = v370[1];
    v344 = v371;
    v345 = v372;
    v346 = v373;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v359 = 0uLL;
    swift_allocError();
    *v224 = v347;
    v225 = v351;
    v227 = v348;
    v226 = v349;
    v224[3] = v350;
    v224[4] = v225;
    v224[1] = v227;
    v224[2] = v226;
    v228 = v355;
    v230 = v352;
    v229 = v353;
    v224[7] = v354;
    v224[8] = v228;
    v224[5] = v230;
    v224[6] = v229;
    v231 = v359;
    v233 = v356;
    v232 = v357;
    v224[11] = v358;
    v224[12] = v231;
    v224[9] = v233;
    v224[10] = v232;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  specialized ShaderGraphNode.metalTextureType.getter(v313);
  v18 = swift_retain();
  Graph.insertImageNode(metalTextureType:resultType:)(v18, v17, &v363);
  v303 = v363;
  v304 = v364;
  v305 = v365;
  v306 = v366;
  v19 = v367;
  swift_release();
  ShaderGraphNode.out.getter((uint64_t)v368);
  ShaderGraphNode.out.getter((uint64_t)v374);
  v302 = v19;
  Graph.moveEdges(from:to:)((uint64_t)v368, (uint64_t)v374);
  swift_release();
  v437 = v375;
  outlined release of String((uint64_t)&v437);
  swift_release();
  v436 = v369;
  outlined release of String((uint64_t)&v436);
  *(_QWORD *)&v347 = 0;
  *((_QWORD *)&v347 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v347 = 0xD000000000000018;
  *((_QWORD *)&v347 + 1) = 0x8000000245FC83A0;
  *(_QWORD *)&v337 = 1701080942;
  *((_QWORD *)&v337 + 1) = 0xE400000000000000;
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 1701080942;
  v21._object = (void *)0xE400000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 39;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  specialized Graph.insertCreateSampler(label:)(&v376);
  v299 = v376;
  v300 = v377;
  v301 = v378;
  v23 = v379;
  v24 = v380;
  swift_bridgeObjectRelease();
  ShaderGraphNode.out.getter((uint64_t)v381);
  v297 = v23;
  v298 = v24;
  v25 = *((_QWORD *)&v363 + 1);
  specialized Sequence.first(where:)(*((uint64_t *)&v363 + 1), 115, 0xE100000000000000, v383);
  v4 = 0;
  outlined init with take of MetalFunctionNode?((uint64_t)v383, (uint64_t)v392, (uint64_t *)&demangling cache variable for type metadata for Input?);
  if (!*((_QWORD *)&v392[0] + 1))
  {
    outlined init with take of NodePersonality(&v363, &v435);
    v434 = v364;
    v337 = v303;
    v338 = v304;
    v339 = v305;
    v340 = v306;
    v341 = v302;
    *(_QWORD *)&v342 = 115;
    *((_QWORD *)&v342 + 1) = 0xE100000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v359 = 0uLL;
    swift_allocError();
    *v204 = v347;
    v205 = v351;
    v207 = v348;
    v206 = v349;
    v204[3] = v350;
    v204[4] = v205;
    v204[1] = v207;
    v204[2] = v206;
    v208 = v355;
    v210 = v352;
    v209 = v353;
    v204[7] = v354;
    v204[8] = v208;
    v204[5] = v210;
    v204[6] = v209;
    v211 = v359;
    v213 = v356;
    v212 = v357;
    v204[11] = v358;
    v204[12] = v211;
    v204[9] = v213;
    v204[10] = v212;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v435);
    outlined retain of [Input]((uint64_t)&v434);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    v433 = v382;
    outlined release of String((uint64_t)&v433);
    outlined init with take of NodePersonality(&v376, &v432);
    outlined release of NodePersonality(&v432);
    v431 = *((_QWORD *)&v376 + 1);
    outlined release of [Input]((uint64_t)&v431);
    v430 = v377;
    outlined release of [Input]((uint64_t)&v430);
    outlined release of NodePersonality(&v435);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v434);
    swift_release();
    goto LABEL_283;
  }
  v394 = v392[0];
  v395 = v392[1];
  v396 = v392[2];
  v397 = v393;
  Graph.connect(_:to:)((uint64_t)v381, (unint64_t)&v394);
  swift_release();
  v398 = v395;
  outlined release of String((uint64_t)&v398);
  swift_release();
  v429 = v382;
  outlined release of String((uint64_t)&v429);
  v314 = *(_QWORD *)(v8 + 16);
  if (!v314)
  {
LABEL_3:
    outlined init with take of NodePersonality(&v376, &v403);
    outlined release of NodePersonality(&v403);
    v402 = *((_QWORD *)&v376 + 1);
    outlined release of [Input]((uint64_t)&v402);
    v401 = v377;
    outlined release of [Input]((uint64_t)&v401);
    outlined init with take of NodePersonality(&v363, &v400);
    outlined release of NodePersonality(&v400);
    swift_bridgeObjectRelease();
    v399 = v364;
    outlined release of [Input]((uint64_t)&v399);
    swift_release();
    goto LABEL_4;
  }
  v316 = v8 + 32;
  swift_bridgeObjectRetain();
  v26 = 0;
  v296 = (_QWORD *)(v25 + 192);
  v309 = v25;
  v315 = v8;
  while (1)
  {
    if (v26 >= *(_QWORD *)(v8 + 16))
    {
      __break(1u);
LABEL_289:
      v337 = v299;
      v338 = v300;
      v339 = v301;
      v340 = v297;
      v341 = v298;
      *(_QWORD *)&v342 = 0x746C69665F67616DLL;
      *((_QWORD *)&v342 + 1) = 0xEA00000000007265;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
      outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v359 = 0uLL;
      swift_allocError();
      *v244 = v347;
      v245 = v351;
      v247 = v348;
      v246 = v349;
      v244[3] = v350;
      v244[4] = v245;
      v244[1] = v247;
      v244[2] = v246;
      v248 = v355;
      v250 = v352;
      v249 = v353;
      v244[7] = v354;
      v244[8] = v248;
      v244[5] = v250;
      v244[6] = v249;
      v251 = v359;
      v253 = v356;
      v252 = v357;
      v244[11] = v358;
      v244[12] = v251;
      v244[9] = v253;
      v244[10] = v252;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      outlined init with take of NodePersonality(&v363, &v424);
      outlined release of NodePersonality(&v424);
      swift_bridgeObjectRelease();
      v423 = v364;
      v193 = &v423;
LABEL_294:
      outlined release of [Input]((uint64_t)v193);
      swift_bridgeObjectRelease();
      goto LABEL_279;
    }
    v27 = v316 + 56 * v26;
    v28 = *(_QWORD *)v27;
    v335 = v4;
    v336 = *(_QWORD *)(v27 + 8);
    v30 = *(_QWORD *)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v31 = *(_QWORD *)(v27 + 32);
    v32 = *(_BYTE *)(v27 + 40);
    v33 = *(_QWORD *)(v27 + 48);
    v439[0] = v28;
    v439[1] = v336;
    v439[2] = v30;
    v439[3] = v29;
    v439[4] = v31;
    v440 = v32;
    v441 = v33;
    v34 = v30 == 1701603686 && v29 == 0xE400000000000000;
    v487 = v29;
    v334 = v26;
    if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v35 = *(_QWORD *)(v25 + 16);
      if (!v35)
        goto LABEL_277;
      v36 = *(_QWORD *)(v25 + 32);
      v37 = *(_QWORD *)(v25 + 40);
      v38 = *(_QWORD *)(v25 + 48);
      v39 = *(_QWORD *)(v25 + 56);
      v40 = *(_QWORD *)(v25 + 64);
      v41 = *(_BYTE *)(v25 + 72);
      v42 = *(_QWORD *)(v25 + 80);
      if (v38 == 1701603686 && v39 == 0xE400000000000000)
      {
        v318 = *(_QWORD *)(v25 + 80);
        v325 = *(_BYTE *)(v25 + 72);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        v39 = 0xE400000000000000;
        v38 = 1701603686;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v318 = v42;
          v325 = v41;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
        }
        else
        {
          if (v35 == 1)
            goto LABEL_277;
          v36 = *(_QWORD *)(v25 + 88);
          v37 = *(_QWORD *)(v25 + 96);
          v38 = *(_QWORD *)(v25 + 104);
          v39 = *(_QWORD *)(v25 + 112);
          v40 = *(_QWORD *)(v25 + 120);
          v52 = *(_BYTE *)(v25 + 128);
          v53 = *(_QWORD *)(v25 + 136);
          if (v38 == 1701603686 && v39 == 0xE400000000000000)
          {
            v318 = *(_QWORD *)(v25 + 136);
            v325 = *(_BYTE *)(v25 + 128);
            swift_retain();
            swift_bridgeObjectRetain();
            v39 = 0xE400000000000000;
            v38 = 1701603686;
          }
          else
          {
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              if (v35 == 2)
              {
LABEL_277:
                swift_retain();
                swift_bridgeObjectRetain();
                outlined init with take of NodePersonality(&v363, &v408);
                v407 = v364;
                v337 = v303;
                v338 = v304;
                v339 = v305;
                v340 = v306;
                v341 = v302;
                *(_QWORD *)&v342 = 1701603686;
                *((_QWORD *)&v342 + 1) = 0xE400000000000000;
                _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
                outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
                lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
                v359 = 0uLL;
                swift_allocError();
                *v183 = v347;
                v184 = v351;
                v186 = v348;
                v185 = v349;
                v183[3] = v350;
                v183[4] = v184;
                v183[1] = v186;
                v183[2] = v185;
                v187 = v355;
                v189 = v352;
                v188 = v353;
                v183[7] = v354;
                v183[8] = v187;
                v183[5] = v189;
                v183[6] = v188;
                v190 = v359;
                v192 = v356;
                v191 = v357;
                v183[11] = v358;
                v183[12] = v190;
                v183[9] = v192;
                v183[10] = v191;
                swift_bridgeObjectRetain();
                outlined retain of NodePersonality(&v408);
                outlined retain of [Input]((uint64_t)&v407);
                swift_willThrow();
                outlined init with take of NodePersonality(&v376, &v406);
                outlined release of NodePersonality(&v406);
                v405 = *((_QWORD *)&v376 + 1);
                outlined release of [Input]((uint64_t)&v405);
                v404 = v377;
                outlined release of [Input]((uint64_t)&v404);
                outlined release of NodePersonality(&v408);
                swift_bridgeObjectRelease();
                v193 = &v407;
                goto LABEL_294;
              }
              v63 = 2;
              v64 = v296;
              while (1)
              {
                v65 = v63 + 1;
                if (__OFADD__(v63, 1))
                  break;
                v36 = *(v64 - 6);
                v37 = *(v64 - 5);
                v38 = *(v64 - 4);
                v39 = *(v64 - 3);
                v40 = *(v64 - 2);
                v325 = *((_BYTE *)v64 - 8);
                v318 = *v64;
                if (v38 == 1701603686 && v39 == 0xE400000000000000)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  v39 = 0xE400000000000000;
                  v38 = 1701603686;
LABEL_80:
                  v25 = v309;
                  goto LABEL_81;
                }
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  goto LABEL_80;
                }
                v64 += 7;
                ++v63;
                if (v65 == v35)
                  goto LABEL_277;
              }
              __break(1u);
              goto LABEL_291;
            }
            v318 = v53;
            v325 = v52;
            swift_retain();
            swift_bridgeObjectRetain();
          }
LABEL_81:
          swift_retain();
        }
        swift_bridgeObjectRetain();
      }
      v442[0] = v36;
      v442[1] = v37;
      v442[2] = v38;
      v442[3] = v39;
      v442[4] = v40;
      v443 = v325;
      v444 = v318;
      Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(v439, (unint64_t)v442, a2, a3);
      v4 = v335;
      goto LABEL_114;
    }
    v43 = v30 == 0x746C7561666564 && v29 == 0xE700000000000000;
    if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      break;
    v44 = *(_QWORD *)(v25 + 16);
    if (!v44)
      goto LABEL_278;
    v45 = *(_QWORD *)(v25 + 32);
    v46 = *(_QWORD *)(v25 + 40);
    v47 = *(_QWORD *)(v25 + 48);
    v48 = *(_QWORD *)(v25 + 56);
    v49 = *(_QWORD *)(v25 + 64);
    v50 = *(_BYTE *)(v25 + 72);
    v51 = *(_QWORD *)(v25 + 80);
    if (v47 == 0x56746C7561666564 && v48 == 0xEA00000000006C61)
    {
      v326 = *(_QWORD *)(v25 + 80);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v48 = 0xEA00000000006C61;
      v47 = 0x56746C7561666564;
LABEL_112:
      v4 = v335;
      goto LABEL_113;
    }
    v319 = *(_QWORD *)(v25 + 32);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v44 == 1)
        goto LABEL_278;
      v45 = *(_QWORD *)(v25 + 88);
      v46 = *(_QWORD *)(v25 + 96);
      v47 = *(_QWORD *)(v25 + 104);
      v48 = *(_QWORD *)(v25 + 112);
      v49 = *(_QWORD *)(v25 + 120);
      v50 = *(_BYTE *)(v25 + 128);
      v62 = *(_QWORD *)(v25 + 136);
      if (v47 == 0x56746C7561666564 && v48 == 0xEA00000000006C61)
      {
        v326 = *(_QWORD *)(v25 + 136);
        swift_retain();
        swift_bridgeObjectRetain();
        v47 = 0x56746C7561666564;
        v48 = 0xEA00000000006C61;
      }
      else
      {
        v67 = *(_BYTE *)(v25 + 128);
        v68 = *(_QWORD *)(v25 + 120);
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v44 != 2)
          {
            v77 = 2;
            v78 = v296;
            while (1)
            {
              v79 = v77 + 1;
              if (__OFADD__(v77, 1))
                break;
              v45 = *(v78 - 6);
              v46 = *(v78 - 5);
              v47 = *(v78 - 4);
              v48 = *(v78 - 3);
              v49 = *(v78 - 2);
              v50 = *((_BYTE *)v78 - 8);
              v326 = *v78;
              if (v47 == 0x56746C7561666564 && v48 == 0xEA00000000006C61)
              {
                swift_retain();
                swift_bridgeObjectRetain();
                v47 = 0x56746C7561666564;
                v48 = 0xEA00000000006C61;
                v25 = v309;
                goto LABEL_111;
              }
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
              {
                swift_retain();
                swift_bridgeObjectRetain();
                v25 = v309;
                goto LABEL_111;
              }
              v78 += 7;
              ++v77;
              if (v79 == v44)
                goto LABEL_278;
            }
            __break(1u);
LABEL_296:
            __break(1u);
            goto LABEL_297;
          }
LABEL_278:
          swift_retain();
          swift_bridgeObjectRetain();
          outlined init with take of NodePersonality(&v363, &v413);
          v412 = v364;
          v337 = v303;
          v338 = v304;
          v339 = v305;
          v340 = v306;
          v341 = v302;
          *(_QWORD *)&v342 = 0x56746C7561666564;
          *((_QWORD *)&v342 + 1) = 0xEA00000000006C61;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
          outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v359 = 0uLL;
          swift_allocError();
          *v194 = v347;
          v195 = v351;
          v197 = v348;
          v196 = v349;
          v194[3] = v350;
          v194[4] = v195;
          v194[1] = v197;
          v194[2] = v196;
          v198 = v355;
          v200 = v352;
          v199 = v353;
          v194[7] = v354;
          v194[8] = v198;
          v194[5] = v200;
          v194[6] = v199;
          v201 = v359;
          v203 = v356;
          v202 = v357;
          v194[11] = v358;
          v194[12] = v201;
          v194[9] = v203;
          v194[10] = v202;
          swift_bridgeObjectRetain();
          outlined retain of NodePersonality(&v413);
          outlined retain of [Input]((uint64_t)&v412);
          swift_willThrow();
          outlined init with take of NodePersonality(&v376, &v411);
          outlined release of NodePersonality(&v411);
          v410 = *((_QWORD *)&v376 + 1);
          outlined release of [Input]((uint64_t)&v410);
          v409 = v377;
          outlined release of [Input]((uint64_t)&v409);
          outlined release of NodePersonality(&v413);
          swift_bridgeObjectRelease();
          outlined release of [Input]((uint64_t)&v412);
          swift_bridgeObjectRelease();
          goto LABEL_279;
        }
        v326 = v62;
        swift_retain();
        swift_bridgeObjectRetain();
        v49 = v68;
        v50 = v67;
      }
LABEL_111:
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_112;
    }
    v326 = v51;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v4 = v335;
    v45 = v319;
LABEL_113:
    *(_QWORD *)&v445 = v45;
    *((_QWORD *)&v445 + 1) = v46;
    v446 = v47;
    v447 = v48;
    v448 = v49;
    v449 = v50;
    v450 = v326;
    Graph.moveEdge(from:to:)((uint64_t)v439, &v445);
LABEL_114:
    swift_bridgeObjectRelease();
LABEL_115:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_116:
    v26 = v334;
LABEL_117:
    ++v26;
    v8 = v315;
    if (v26 == v314)
    {
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
  }
  v54 = v30 == 0x64726F6F63786574 && v29 == 0xE800000000000000;
  if (v54 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v55 = *(_QWORD *)(v25 + 16);
    if (!v55)
      goto LABEL_284;
    v56 = *(_QWORD *)(v309 + 32);
    v57 = *(_QWORD *)(v309 + 40);
    v58 = *(_QWORD *)(v309 + 48);
    v59 = *(_QWORD *)(v309 + 56);
    v60 = *(_BYTE *)(v309 + 72);
    v320 = *(_QWORD *)(v309 + 80);
    v327 = *(_QWORD *)(v309 + 64);
    if (v58 == 0x64726F6F63786574 && v59 == 0xE800000000000000)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v59 = 0xE800000000000000;
      v25 = v309;
      v61 = v320;
      v58 = 0x64726F6F63786574;
      goto LABEL_151;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v25 = v309;
      v61 = v320;
      goto LABEL_151;
    }
    if (v55 == 1)
      goto LABEL_284;
    v56 = *(_QWORD *)(v309 + 88);
    v57 = *(_QWORD *)(v309 + 96);
    v59 = *(_QWORD *)(v309 + 112);
    v327 = *(_QWORD *)(v309 + 120);
    v60 = *(_BYTE *)(v309 + 128);
    v61 = *(_QWORD *)(v309 + 136);
    if (*(_QWORD *)(v309 + 104) == 0x64726F6F63786574 && v59 == 0xE800000000000000)
    {
LABEL_87:
      swift_retain();
      swift_bridgeObjectRetain();
      v59 = 0xE800000000000000;
      v58 = 0x64726F6F63786574;
      v4 = v335;
LABEL_150:
      swift_retain();
      swift_bridgeObjectRetain();
      v25 = v309;
LABEL_151:
      v451[0] = v56;
      v451[1] = v57;
      v451[2] = v58;
      v451[3] = v59;
      v451[4] = v327;
      v452 = v60;
      v453 = v61;
      v104 = (__int128 *)v451;
LABEL_152:
      Graph.moveEdge(from:to:)((uint64_t)v439, v104);
      swift_bridgeObjectRelease();
      goto LABEL_115;
    }
    v58 = *(_QWORD *)(v309 + 104);
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_150;
    }
    if (v55 != 2)
    {
      v91 = 2;
      v92 = v296;
      do
      {
        v93 = v91 + 1;
        if (__OFADD__(v91, 1))
          goto LABEL_296;
        v56 = *(v92 - 6);
        v57 = *(v92 - 5);
        v58 = *(v92 - 4);
        v59 = *(v92 - 3);
        v327 = *(v92 - 2);
        v60 = *((_BYTE *)v92 - 8);
        v61 = *v92;
        if (v58 == 0x64726F6F63786574 && v59 == 0xE800000000000000)
          goto LABEL_87;
        v322 = *v92;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          v4 = v335;
          v61 = v322;
          goto LABEL_150;
        }
        v92 += 7;
        ++v91;
      }
      while (v93 != v55);
    }
LABEL_284:
    swift_retain();
    swift_bridgeObjectRetain();
    outlined init with take of NodePersonality(&v363, &v418);
    v417 = v364;
    v337 = v303;
    v338 = v304;
    v339 = v305;
    v340 = v306;
    v341 = v302;
    *(_QWORD *)&v342 = 0x64726F6F63786574;
    *((_QWORD *)&v342 + 1) = 0xE800000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v359 = 0uLL;
    swift_allocError();
    *v214 = v347;
    v215 = v351;
    v217 = v348;
    v216 = v349;
    v214[3] = v350;
    v214[4] = v215;
    v214[1] = v217;
    v214[2] = v216;
    v218 = v355;
    v220 = v352;
    v219 = v353;
    v214[7] = v354;
    v214[8] = v218;
    v214[5] = v220;
    v214[6] = v219;
    v221 = v359;
    v223 = v356;
    v222 = v357;
    v214[11] = v358;
    v214[12] = v221;
    v214[9] = v223;
    v214[10] = v222;
    swift_bridgeObjectRetain();
    outlined retain of NodePersonality(&v418);
    outlined retain of [Input]((uint64_t)&v417);
    swift_willThrow();
    outlined init with take of NodePersonality(&v376, &v416);
    outlined release of NodePersonality(&v416);
    v415 = *((_QWORD *)&v376 + 1);
    outlined release of [Input]((uint64_t)&v415);
    v414 = v377;
    outlined release of [Input]((uint64_t)&v414);
    outlined release of NodePersonality(&v418);
    swift_bridgeObjectRelease();
    outlined release of [Input]((uint64_t)&v417);
    swift_bridgeObjectRelease();
LABEL_279:
    swift_release();
    swift_release();
    outlined consume of NodePersonality(v313);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  v69 = v30 == 0x7373657264646175 && v29 == 0xEC00000065646F6DLL;
  if (!v69 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if ((v30 != 0x7373657264646176 || v29 != 0xEC00000065646F6DLL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if ((v30 != 0x79747265746C6966 || v29 != 0xEA00000000006570)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v30 != 0x726579616CLL || v29 != 0xE500000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v30 != 0x6E6172656D617266 || v29 != 0xEA00000000006567)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v110 = v26;
          if ((v30 != 0x66666F656D617266 || v29 != 0xEB00000000746573)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v30 != 0x646E65656D617266 || v29 != 0xEE006E6F69746361)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v111 = one-time initialization token for logger;
            swift_retain();
            swift_bridgeObjectRetain();
            if (v111 != -1)
              swift_once();
            v112 = type metadata accessor for Logger();
            __swift_project_value_buffer(v112, (uint64_t)logger);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            v113 = Logger.logObject.getter();
            v114 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v113, v114))
            {
              v115 = swift_slowAlloc();
              v116 = swift_slowAlloc();
              *(_QWORD *)&v347 = v116;
              *(_DWORD *)v115 = 136315138;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v115 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, (uint64_t *)&v347);
              swift_release_n();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_245E46000, v113, v114, "Ignoring unexpected image node input '%s'", (uint8_t *)v115, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x24954C33C](v116, -1, -1);
              MEMORY[0x24954C33C](v115, -1, -1);
              swift_bridgeObjectRelease();
              swift_release();

            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
          }
          v25 = v309;
          v26 = v110;
        }
        goto LABEL_117;
      }
      v323 = *((_QWORD *)&v376 + 1);
      v95 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 16);
      if (!v95)
        goto LABEL_289;
      v96 = (_QWORD *)(*((_QWORD *)&v376 + 1) + 80);
      v295 = *((_QWORD *)&v376 + 1) + 80;
      while (1)
      {
        v97 = *(v96 - 6);
        v330 = *(v96 - 5);
        v98 = *(v96 - 4);
        v99 = *(v96 - 3);
        v100 = *(v96 - 2);
        v101 = *((_BYTE *)v96 - 8);
        v102 = *v96;
        if (v98 == 0x746C69665F67616DLL && v99 == 0xEA00000000007265)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_186;
        v96 += 7;
        if (!--v95)
          goto LABEL_289;
      }
      v99 = 0xEA00000000007265;
LABEL_186:
      v478[0] = v97;
      v478[1] = v330;
      v478[2] = v98;
      v478[3] = v99;
      v478[4] = v100;
      v479 = v101;
      v480 = v102;
      v117 = v317[2];
      v287 = (_QWORD *)v317[1];
      v290 = *v317;
      result = specialized OrderedSet._find(_:)(v97, *v317, v287);
      if ((v118 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        goto LABEL_218;
      }
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_299;
      if (result >= *(_QWORD *)(v117 + 16))
        goto LABEL_300;
      v119 = (_QWORD *)(v117 + 48 * result);
      v120 = v119[7];
      v121 = v119[8];
      v122 = v119[9];
      v123 = *(_QWORD *)(v121 + 16);
      if (v120)
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v478, v121 + 32, v123, (_QWORD *)(v120 + 16), v120 + 32);
        if ((v124 & 1) != 0)
        {
LABEL_217:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_218;
        }
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        result = specialized Collection<>.firstIndex(of:)(v478, v121 + 32, v123);
        if ((v132 & 1) != 0)
          goto LABEL_217;
      }
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_307;
      if (result >= *(_QWORD *)(v122 + 16))
        goto LABEL_308;
      v133 = v122 + 56 * result;
      v134 = *(_QWORD *)(v133 + 40);
      outlined copy of Output?(*(_QWORD *)(v133 + 32), v134);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v134)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_232;
      }
LABEL_218:
      result = specialized OrderedSet._find(_:)(v28, v290, v287);
      if ((v135 & 1) != 0)
        goto LABEL_229;
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_301;
      if (result >= *(_QWORD *)(v117 + 16))
        goto LABEL_302;
      v136 = (_QWORD *)(v117 + 48 * result);
      v137 = v136[7];
      v138 = v136[8];
      v139 = v136[9];
      v140 = *(_QWORD *)(v138 + 16);
      if (v137)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v439, v138 + 32, v140, (_QWORD *)(v137 + 16), v137 + 32);
        if ((v141 & 1) != 0)
        {
LABEL_230:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_231;
        }
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        result = specialized Collection<>.firstIndex(of:)(v439, v138 + 32, v140);
        if ((v142 & 1) != 0)
          goto LABEL_230;
      }
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_309;
      if (result >= *(_QWORD *)(v139 + 16))
        goto LABEL_310;
      v143 = (_QWORD *)(v139 + 56 * result);
      v144 = v143[5];
      v145 = v143[7];
      v285 = v143[6];
      v288 = v143[4];
      v284 = v143[8];
      v291 = v143[9];
      v332 = v143[10];
      outlined copy of Output?(v288, v144);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (!v144)
      {
LABEL_229:
        swift_bridgeObjectRelease();
      }
      else
      {
        v475[0] = v288;
        v475[1] = v144;
        v475[2] = v285;
        v475[3] = v145;
        v475[4] = v284;
        v476 = v291 & 1;
        v477 = v332;
        swift_retain();
        swift_release();
        Graph.connect(_:to:)((uint64_t)v475, (unint64_t)v478);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
      }
LABEL_231:
      swift_release();
LABEL_232:
      v146 = *(_QWORD *)(v323 + 16);
      if (!v146)
      {
LABEL_292:
        v337 = v299;
        v338 = v300;
        v339 = v301;
        v340 = v297;
        v341 = v298;
        *(_QWORD *)&v342 = 0x746C69665F70696DLL;
        *((_QWORD *)&v342 + 1) = 0xEA00000000007265;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
        outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v359 = 0uLL;
        swift_allocError();
        *v264 = v347;
        v265 = v351;
        v267 = v348;
        v266 = v349;
        v264[3] = v350;
        v264[4] = v265;
        v264[1] = v267;
        v264[2] = v266;
        v268 = v355;
        v270 = v352;
        v269 = v353;
        v264[7] = v354;
        v264[8] = v268;
        v264[5] = v270;
        v264[6] = v269;
        v271 = v359;
        v273 = v356;
        v272 = v357;
        v264[11] = v358;
        v264[12] = v271;
        v264[9] = v273;
        v264[10] = v272;
        swift_willThrow();
        outlined init with take of NodePersonality(&v363, &v426);
        outlined release of NodePersonality(&v426);
        swift_bridgeObjectRelease();
        v425 = v364;
        v193 = &v425;
        goto LABEL_294;
      }
      v147 = (_QWORD *)v295;
      while (1)
      {
        v148 = *(v147 - 6);
        v333 = *(v147 - 5);
        v150 = *(v147 - 4);
        v149 = *(v147 - 3);
        v151 = *(v147 - 2);
        v152 = *((_BYTE *)v147 - 8);
        v153 = *v147;
        if (v150 == 0x746C69665F70696DLL && v149 == 0xEA00000000007265)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_242;
        v147 += 7;
        if (!--v146)
          goto LABEL_292;
      }
      v149 = 0xEA00000000007265;
LABEL_242:
      v472[0] = v148;
      v472[1] = v333;
      v472[2] = v150;
      v472[3] = v149;
      v472[4] = v151;
      v473 = v152;
      v474 = v153;
      v156 = *v317;
      v155 = (_QWORD *)v317[1];
      v157 = v317[2];
      result = specialized OrderedSet._find(_:)(v148, *v317, v155);
      if ((v158 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        goto LABEL_255;
      }
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_303;
      v293 = v155;
      if (result >= *(_QWORD *)(v157 + 16))
        goto LABEL_304;
      v159 = (_QWORD *)(v157 + 48 * result);
      v160 = v159[7];
      v161 = v159[8];
      v162 = v159[9];
      v292 = v161 + 32;
      v286 = v157;
      v289 = *(_QWORD *)(v161 + 16);
      if (v160)
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        v163 = v162;
        swift_retain();
        swift_retain();
        result = specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v472, v292, v289, (_QWORD *)(v160 + 16), v160 + 32);
        if ((v164 & 1) != 0)
        {
LABEL_254:
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v155 = v293;
          v157 = v286;
          goto LABEL_255;
        }
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        v163 = v162;
        swift_retain();
        result = specialized Collection<>.firstIndex(of:)(v472, v292, v289);
        if ((v165 & 1) != 0)
          goto LABEL_254;
      }
      if ((result & 0x8000000000000000) != 0)
        goto LABEL_311;
      if (result >= *(_QWORD *)(v163 + 16))
        goto LABEL_312;
      v166 = v163 + 56 * result;
      v167 = *(_QWORD *)(v166 + 40);
      outlined copy of Output?(*(_QWORD *)(v166 + 32), v167);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v155 = v293;
      v157 = v286;
      if (v167)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_265:
        v173 = *(_QWORD *)(v323 + 16);
        v174 = (_QWORD *)v295;
        if (!v173)
        {
LABEL_293:
          v337 = v299;
          v338 = v300;
          v339 = v301;
          v340 = v297;
          v341 = v298;
          *(_QWORD *)&v342 = 0x746C69665F6E696DLL;
          *((_QWORD *)&v342 + 1) = 0xEA00000000007265;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
          outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v359 = 0uLL;
          swift_allocError();
          *v274 = v347;
          v275 = v351;
          v277 = v348;
          v276 = v349;
          v274[3] = v350;
          v274[4] = v275;
          v274[1] = v277;
          v274[2] = v276;
          v278 = v355;
          v280 = v352;
          v279 = v353;
          v274[7] = v354;
          v274[8] = v278;
          v274[5] = v280;
          v274[6] = v279;
          v281 = v359;
          v283 = v356;
          v282 = v357;
          v274[11] = v358;
          v274[12] = v281;
          v274[9] = v283;
          v274[10] = v282;
          swift_willThrow();
          outlined init with take of NodePersonality(&v363, &v428);
          outlined release of NodePersonality(&v428);
          swift_bridgeObjectRelease();
          v427 = v364;
          v193 = &v427;
          goto LABEL_294;
        }
        while (1)
        {
          v176 = *(v174 - 6);
          v175 = *(v174 - 5);
          v177 = *(v174 - 4);
          v178 = *(v174 - 3);
          v179 = *(v174 - 2);
          v180 = *((_BYTE *)v174 - 8);
          v181 = *v174;
          if (v177 == 0x746C69665F6E696DLL && v178 == 0xEA00000000007265)
            break;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_274;
          v174 += 7;
          if (!--v173)
            goto LABEL_293;
        }
        v178 = 0xEA00000000007265;
LABEL_274:
        *(_QWORD *)&v463 = v176;
        *((_QWORD *)&v463 + 1) = v175;
        v464 = v177;
        v465 = v178;
        v466 = v179;
        v467 = v180;
        v468 = v181;
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.moveEdge(from:to:)((uint64_t)v439, &v463);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v4 = v335;
        v25 = v309;
        goto LABEL_116;
      }
LABEL_255:
      result = specialized OrderedSet._find(_:)(v28, v156, v155);
      if ((v168 & 1) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
          goto LABEL_305;
        if (result >= *(_QWORD *)(v157 + 16))
          goto LABEL_306;
        v169 = (_QWORD *)(v157 + 48 * result);
        v170 = v169[7];
        v171 = v169[8];
        v172 = v169[9];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        specialized OrderedDictionary.subscript.getter((uint64_t)v439, v170, v171, v172, v384);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined init with take of MetalFunctionNode?((uint64_t)v384, (uint64_t)&v385, &demangling cache variable for type metadata for Output??);
        if (v386)
        {
          if (v386 != 1)
          {
            v469[0] = v385;
            v469[1] = v386;
            v469[2] = v387;
            v469[3] = v388;
            v469[4] = v389;
            v470 = v390 & 1;
            v471 = v391;
            swift_retain();
            swift_release();
            Graph.connect(_:to:)((uint64_t)v469, (unint64_t)v472);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
LABEL_264:
            swift_release();
            goto LABEL_265;
          }
        }
        else
        {
          outlined release of Output??(v384);
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_264;
    }
    v81 = *((_QWORD *)&v376 + 1);
    v82 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 16);
    if (!v82)
      goto LABEL_291;
    v84 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 32);
    v83 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 40);
    v85 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 48);
    v86 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 56);
    v87 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 64);
    v88 = *(_BYTE *)(*((_QWORD *)&v376 + 1) + 72);
    v89 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 80);
    if (v85 == 0x7365726464615F74 && v86 == 0xE900000000000073)
    {
      v90 = *(_BYTE *)(*((_QWORD *)&v376 + 1) + 72);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v85 = 0x7365726464615F74;
      v86 = 0xE900000000000073;
      goto LABEL_215;
    }
    v329 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 64);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v90 = v88;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v4 = v335;
      v87 = v329;
    }
    else
    {
      if (v82 == 1)
        goto LABEL_291;
      v84 = *(_QWORD *)(v81 + 88);
      v83 = *(_QWORD *)(v81 + 96);
      v85 = *(_QWORD *)(v81 + 104);
      v86 = *(_QWORD *)(v81 + 112);
      v87 = *(_QWORD *)(v81 + 120);
      v105 = *(_BYTE *)(v81 + 128);
      v89 = *(_QWORD *)(v81 + 136);
      if (v85 == 0x7365726464615F74 && v86 == 0xE900000000000073)
      {
        v90 = *(_BYTE *)(v81 + 128);
        swift_retain();
        swift_bridgeObjectRetain();
        v85 = 0x7365726464615F74;
        v86 = 0xE900000000000073;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v82 != 2)
          {
            v125 = (_QWORD *)(v81 + 192);
            v126 = 2;
            while (1)
            {
              v127 = v126 + 1;
              if (__OFADD__(v126, 1))
                goto LABEL_298;
              v128 = *(v125 - 5);
              v85 = *(v125 - 4);
              v86 = *(v125 - 3);
              v324 = *(v125 - 6);
              v331 = *(v125 - 2);
              v129 = *((_BYTE *)v125 - 8);
              v130 = *v125;
              if (v85 == 0x7365726464615F74 && v86 == 0xE900000000000073)
                break;
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
              {
                swift_retain();
                swift_bridgeObjectRetain();
                goto LABEL_213;
              }
              v125 += 7;
              ++v126;
              if (v127 == v82)
                goto LABEL_291;
            }
            swift_retain();
            swift_bridgeObjectRetain();
            v85 = 0x7365726464615F74;
            v86 = 0xE900000000000073;
LABEL_213:
            v83 = v128;
            v90 = v129;
            v87 = v331;
            v89 = v130;
            v84 = v324;
            goto LABEL_214;
          }
LABEL_291:
          swift_retain();
          swift_bridgeObjectRetain();
          v337 = v299;
          v338 = v300;
          v339 = v301;
          v340 = v297;
          v341 = v298;
          *(_QWORD *)&v342 = 0x7365726464615F74;
          *((_QWORD *)&v342 + 1) = 0xE900000000000073;
          _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
          outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
          lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
          v359 = 0uLL;
          swift_allocError();
          *v254 = v347;
          v255 = v351;
          v257 = v348;
          v256 = v349;
          v254[3] = v350;
          v254[4] = v255;
          v254[1] = v257;
          v254[2] = v256;
          v258 = v355;
          v260 = v352;
          v259 = v353;
          v254[7] = v354;
          v254[8] = v258;
          v254[5] = v260;
          v254[6] = v259;
          v261 = v359;
          v263 = v356;
          v262 = v357;
          v254[11] = v358;
          v254[12] = v261;
          v254[9] = v263;
          v254[10] = v262;
          swift_willThrow();
          outlined init with take of NodePersonality(&v363, &v422);
          outlined release of NodePersonality(&v422);
          swift_bridgeObjectRelease();
          v421 = v364;
          v193 = &v421;
          goto LABEL_294;
        }
        v90 = v105;
        swift_retain();
        swift_bridgeObjectRetain();
      }
LABEL_214:
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_215:
      v4 = v335;
    }
    *(_QWORD *)&v457 = v84;
    *((_QWORD *)&v457 + 1) = v83;
    v458 = v85;
    v459 = v86;
    v460 = v87;
    v461 = v90;
    v462 = v89;
    Graph.moveEdge(from:to:)((uint64_t)v439, &v457);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v25 = v309;
    goto LABEL_116;
  }
  v70 = *((_QWORD *)&v376 + 1);
  v71 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 16);
  if (!v71)
    goto LABEL_287;
  v72 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 32);
  v73 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 40);
  v75 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 48);
  v74 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 56);
  v294 = *(_BYTE *)(*((_QWORD *)&v376 + 1) + 72);
  v321 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 80);
  v328 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 64);
  if (v75 == 0x7365726464615F73 && v74 == 0xE900000000000073)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v74 = 0xE900000000000073;
    v4 = v335;
    v75 = 0x7365726464615F73;
    v25 = v309;
    v76 = v294;
LABEL_195:
    v454[0] = v72;
    v454[1] = v73;
    v454[2] = v75;
    v454[3] = v74;
    v454[4] = v328;
    v455 = v76;
    v456 = v321;
    v104 = (__int128 *)v454;
    goto LABEL_152;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v4 = v335;
    v25 = v309;
    v76 = v294;
    goto LABEL_195;
  }
  if (v71 == 1)
    goto LABEL_287;
  v72 = *(_QWORD *)(v70 + 88);
  v73 = *(_QWORD *)(v70 + 96);
  v74 = *(_QWORD *)(v70 + 112);
  v76 = *(_BYTE *)(v70 + 128);
  v321 = *(_QWORD *)(v70 + 136);
  v328 = *(_QWORD *)(v70 + 120);
  if (*(_QWORD *)(v70 + 104) == 0x7365726464615F73 && v74 == 0xE900000000000073)
  {
LABEL_122:
    swift_retain();
    swift_bridgeObjectRetain();
    v75 = 0x7365726464615F73;
    v74 = 0xE900000000000073;
LABEL_194:
    swift_retain();
    swift_bridgeObjectRetain();
    v4 = v335;
    v25 = v309;
    goto LABEL_195;
  }
  v75 = *(_QWORD *)(v70 + 104);
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
  {
LABEL_193:
    swift_retain();
    swift_bridgeObjectRetain();
    goto LABEL_194;
  }
  if (v71 == 2)
  {
LABEL_287:
    swift_retain();
    swift_bridgeObjectRetain();
    v337 = v299;
    v338 = v300;
    v339 = v301;
    v340 = v297;
    v341 = v298;
    *(_QWORD *)&v342 = 0x7365726464615F73;
    *((_QWORD *)&v342 + 1) = 0xE900000000000073;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v337);
    outlined init with take of UserGraphError.ErrorType(&v337, (uint64_t)&v347);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v359 = 0uLL;
    swift_allocError();
    *v234 = v347;
    v235 = v351;
    v237 = v348;
    v236 = v349;
    v234[3] = v350;
    v234[4] = v235;
    v234[1] = v237;
    v234[2] = v236;
    v238 = v355;
    v240 = v352;
    v239 = v353;
    v234[7] = v354;
    v234[8] = v238;
    v234[5] = v240;
    v234[6] = v239;
    v241 = v359;
    v243 = v356;
    v242 = v357;
    v234[11] = v358;
    v234[12] = v241;
    v234[9] = v243;
    v234[10] = v242;
    swift_willThrow();
    outlined init with take of NodePersonality(&v363, &v420);
    outlined release of NodePersonality(&v420);
    swift_bridgeObjectRelease();
    v419 = v364;
    v193 = &v419;
    goto LABEL_294;
  }
  v106 = (_QWORD *)(v70 + 192);
  v107 = 2;
  while (1)
  {
    v108 = v107 + 1;
    if (__OFADD__(v107, 1))
      break;
    v72 = *(v106 - 6);
    v73 = *(v106 - 5);
    v75 = *(v106 - 4);
    v74 = *(v106 - 3);
    v76 = *((_BYTE *)v106 - 8);
    v321 = *v106;
    v328 = *(v106 - 2);
    if (v75 == 0x7365726464615F73 && v74 == 0xE900000000000073)
      goto LABEL_122;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_193;
    v106 += 7;
    ++v107;
    if (v108 == v71)
      goto LABEL_287;
  }
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
  return result;
}

uint64_t specialized Graph.transformMaterialXCubeimageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  Swift::String v19;
  Swift::Bool v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _OWORD *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t *v115;
  _OWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  _OWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _OWORD *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _OWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  Swift::String v167;
  Swift::String v168;
  Swift::String v169;
  __int128 v170;
  _OWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _OWORD *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _OWORD *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _OWORD *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  _OWORD *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  _OWORD *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  _OWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  __int128 *v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  unint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  char v280[8];
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288[14];
  uint64_t v289[14];
  uint64_t v290[14];
  uint64_t v291[14];
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  _QWORD v297[7];
  _QWORD v298[7];
  _QWORD v299[7];
  _QWORD v300[3];
  char v301;
  __int128 v302;
  _QWORD v303[3];
  char v304;
  __int128 v305;
  char v306[8];
  __int128 v307;
  _OWORD v308[3];
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  _OWORD v314[3];
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  _OWORD v320[3];
  uint64_t v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  _OWORD v326[3];
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  _OWORD v332[3];
  uint64_t v333;
  __int128 v334;
  _OWORD v335[2];
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  char v341[8];
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  char v347[8];
  uint64_t v348;
  _OWORD v349[3];
  uint64_t v350;
  __int128 v351;
  _OWORD v352[3];
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  unint64_t v388;
  __int128 v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  __int128 v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  char v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  char v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  char v435;
  uint64_t v436;
  __int128 v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  char v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  char v448;
  uint64_t v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  _OWORD v459[2];
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  char v465;
  uint64_t v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  _OWORD v476[3];
  uint64_t v477;

  result = MEMORY[0x24BDAC7A8](a1);
  v6 = v2;
  v259 = v1;
  v7 = *(_QWORD *)(result + 16);
  if (!v7)
    return result;
  v8 = result;
  v233 = v4;
  v234 = v5;
  v9 = result + 32;
  v10 = v335;
  swift_bridgeObjectRetain();
  v11 = 0;
  v250 = v9;
  v251 = v7;
  while (1)
  {
    v12 = v9 + 48 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v16 = *(_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    v17 = *(_QWORD *)(v12 + 32);
    v18 = *(_BYTE *)(v12 + 40);
    v410 = v13;
    v411 = v14;
    v412 = v16;
    v413 = v15;
    v414 = v17;
    v415 = v18;
    if (v13 >> 61 != 5)
      goto LABEL_4;
    v254 = v17;
    v255 = v18;
    v258 = v15;
    v256 = v11;
    outlined copy of NodePersonality(v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 0xD000000000000017;
    v19._object = (void *)0x8000000245FC8310;
    v20 = String.hasPrefix(_:)(v19);
    swift_bridgeObjectRelease();
    if (v20)
      break;
LABEL_3:
    outlined consume of NodePersonality(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v250;
    v7 = v251;
    v11 = v256;
LABEL_4:
    if (++v11 == v7)
      return swift_bridgeObjectRelease();
  }
  ShaderGraphNode.out.getter((uint64_t)v280);
  if (v6)
  {
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  v21 = v281;
  v409 = v282;
  v22 = outlined release of String((uint64_t)&v409);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 144))(v22);
  swift_release();
  v249 = v23;
  if (!v23)
  {
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi34_((uint64_t)&v260);
    *(_QWORD *)&v267 = 0;
    *((_QWORD *)&v267 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v267 = 0xD000000000000025;
    *((_QWORD *)&v267 + 1) = 0x8000000245FC8350;
    v167._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v167);
    swift_bridgeObjectRelease();
    v168._countAndFlagsBits = 1701080942;
    v168._object = (void *)0xE400000000000000;
    String.append(_:)(v168);
    swift_bridgeObjectRelease();
    v169._countAndFlagsBits = 39;
    v169._object = (void *)0xE100000000000000;
    String.append(_:)(v169);
    v170 = v267;
    outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
    v279 = v170;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v171 = v267;
    v172 = v271;
    v174 = v268;
    v173 = v269;
    v171[3] = v270;
    v171[4] = v172;
    v171[1] = v174;
    v171[2] = v173;
    v175 = v275;
    v177 = v272;
    v176 = v273;
    v171[7] = v274;
    v171[8] = v175;
    v171[5] = v177;
    v171[6] = v176;
    v178 = v279;
    v180 = v276;
    v179 = v277;
    v171[11] = v278;
    v171[12] = v178;
    v171[9] = v180;
    v171[10] = v179;
    swift_willThrow();
    outlined consume of NodePersonality(v13);
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v267 = 0xD00000000000001CLL;
  *((_QWORD *)&v267 + 1) = 0x8000000245FC8380;
  *(_QWORD *)&v260 = 1701080942;
  *((_QWORD *)&v260 + 1) = 0xE400000000000000;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 1701080942;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 39;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  specialized Graph.insertCreateSampler(label:)(&v283);
  v240 = v283;
  v243 = v284;
  v244 = v285;
  v252 = v286;
  v27 = v287;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v14 + 16);
  if (!v28)
  {
LABEL_83:
    *(_QWORD *)&v260 = v13;
    *((_QWORD *)&v260 + 1) = v14;
    v261 = v16;
    v262 = v258;
    v263 = v254;
    v264 = v255;
    v265 = 0x79747265746C6966;
    v266 = 0xEA00000000006570;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v279 = 0uLL;
    swift_allocError();
    *v105 = v267;
    v106 = v271;
    v108 = v268;
    v107 = v269;
    v105[3] = v270;
    v105[4] = v106;
    v105[1] = v108;
    v105[2] = v107;
    v109 = v275;
    v111 = v272;
    v110 = v273;
    v105[7] = v274;
    v105[8] = v109;
    v105[5] = v111;
    v105[6] = v110;
    v112 = v279;
    v114 = v276;
    v113 = v277;
    v105[11] = v278;
    v105[12] = v112;
    v105[9] = v114;
    v105[10] = v113;
    outlined copy of NodePersonality(v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v283, &v364);
    outlined release of NodePersonality(&v364);
    v363 = *((_QWORD *)&v283 + 1);
    outlined release of [Input]((uint64_t)&v363);
    v362 = v284;
    v115 = &v362;
LABEL_84:
    outlined release of [Input]((uint64_t)v115);
    swift_release();
LABEL_85:
    outlined consume of NodePersonality(v13);
LABEL_86:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v238 = v27;
  v231 = v10;
  v257 = v13;
  v247 = v16;
  v248 = v8;
  v29 = v14;
  v30 = (_QWORD *)(v14 + 80);
  v232 = (_QWORD *)(v14 + 80);
  while (1)
  {
    v31 = *(v30 - 6);
    v477 = *(v30 - 5);
    v32 = *(v30 - 4);
    v33 = *(v30 - 2);
    v34 = *((_BYTE *)v30 - 8);
    v35 = *v30;
    v36 = 0xEA00000000006570;
    if (v32 == 0x79747265746C6966 && *(v30 - 3) == 0xEA00000000006570)
    {
      v246 = v29;
      goto LABEL_20;
    }
    v38 = *(v30 - 3);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    v30 += 7;
    if (!--v28)
    {
      v430 = v31;
      v431 = v477;
      v432 = v32;
      v433 = v38;
      v434 = v33;
      v435 = v34;
      v436 = v35;
      v16 = v247;
      v14 = v29;
      v13 = v257;
      goto LABEL_83;
    }
  }
  v246 = v29;
  v36 = v38;
LABEL_20:
  v430 = v31;
  v431 = v477;
  v432 = v32;
  v433 = v36;
  v434 = v33;
  v435 = v34;
  v436 = v35;
  v408 = *((_QWORD *)&v283 + 1);
  v39 = *(_QWORD *)(*((_QWORD *)&v283 + 1) + 16);
  v40 = v257;
  if (!v39)
  {
LABEL_87:
    outlined init with take of NodePersonality(&v283, &v366);
    v365 = v284;
    v260 = v240;
    v261 = v243;
    v262 = v244;
    v263 = v252;
    v264 = v238;
    v265 = 0x746C69665F67616DLL;
    v266 = 0xEA00000000007265;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v279 = 0uLL;
    swift_allocError();
    *v116 = v267;
    v117 = v271;
    v119 = v268;
    v118 = v269;
    v116[3] = v270;
    v116[4] = v117;
    v116[1] = v119;
    v116[2] = v118;
    v120 = v275;
    v122 = v272;
    v121 = v273;
    v116[7] = v274;
    v116[8] = v120;
    v116[5] = v122;
    v116[6] = v121;
    v123 = v279;
    v125 = v276;
    v124 = v277;
    v116[11] = v278;
    v116[12] = v123;
    v116[9] = v125;
    v116[10] = v124;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of [Input]((uint64_t)&v408);
    outlined retain of NodePersonality(&v366);
    outlined retain of [Input]((uint64_t)&v365);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v366);
    outlined release of [Input]((uint64_t)&v408);
    outlined release of [Input]((uint64_t)&v365);
    swift_release();
    v126 = v40;
    goto LABEL_93;
  }
  v41 = (_QWORD *)(*((_QWORD *)&v283 + 1) + 80);
  v235 = *((_QWORD *)&v283 + 1) + 80;
  v236 = *((_QWORD *)&v283 + 1);
  while (1)
  {
    v43 = *(v41 - 6);
    v42 = *(v41 - 5);
    v44 = *(v41 - 4);
    v45 = *(v41 - 3);
    v46 = *(v41 - 2);
    v47 = *((_BYTE *)v41 - 8);
    v48 = *v41;
    if (v44 == 0x746C69665F67616DLL && v45 == 0xEA00000000007265)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_30;
    v41 += 7;
    if (!--v39)
    {
      v460 = v43;
      v461 = v42;
      v462 = v44;
      v463 = v45;
      v464 = v46;
      v465 = v47;
      v466 = v48;
      v40 = v257;
      goto LABEL_87;
    }
  }
  v45 = 0xEA00000000007265;
LABEL_30:
  v460 = v43;
  v461 = v42;
  v462 = v44;
  v463 = v45;
  v464 = v46;
  v465 = v47;
  v466 = v48;
  v50 = v259[8];
  v51 = v259[9];
  v52 = v259[6];
  v474 = v259[7];
  v475 = v50;
  v476[0] = v51;
  *(_OWORD *)((char *)v476 + 9) = *(__int128 *)((char *)v259 + 153);
  v53 = v259[5];
  v471 = v259[4];
  v472 = v53;
  v473 = v52;
  v54 = v259[1];
  v467 = *v259;
  v468 = v54;
  v55 = v259[3];
  v469 = v259[2];
  v470 = v55;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)&v460, v288);
  outlined init with take of MetalFunctionNode?((uint64_t)v288, (uint64_t)v347, &demangling cache variable for type metadata for Edge?);
  v56 = v257;
  if (v348)
  {
    outlined release of Edge?(v288);
  }
  else
  {
    Graph.edge(to:)((uint64_t)&v430, v289);
    outlined init with take of MetalFunctionNode?((uint64_t)v289, (uint64_t)&v343, &demangling cache variable for type metadata for Edge?);
    if (*((_QWORD *)&v343 + 1))
    {
      v349[0] = v343;
      v349[1] = v344;
      v349[2] = v345;
      v350 = v346;
      v351 = v344;
      swift_retain();
      outlined retain of String((uint64_t)&v351);
      outlined release of Edge?(v289);
      Graph.connect(_:to:)((uint64_t)v349, (unint64_t)&v460);
      swift_release();
      outlined release of String((uint64_t)&v351);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  v57 = *(_QWORD *)(v236 + 16);
  if (!v57)
  {
LABEL_88:
    outlined init with take of NodePersonality(&v283, &v368);
    v367 = v284;
    v260 = v240;
    v261 = v243;
    v262 = v244;
    v263 = v252;
    v264 = v238;
    v265 = 0x746C69665F70696DLL;
    v266 = 0xEA00000000007265;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v279 = 0uLL;
    swift_allocError();
    *v127 = v267;
    v128 = v271;
    v130 = v268;
    v129 = v269;
    v127[3] = v270;
    v127[4] = v128;
    v127[1] = v130;
    v127[2] = v129;
    v131 = v275;
    v133 = v272;
    v132 = v273;
    v127[7] = v274;
    v127[8] = v131;
    v127[5] = v133;
    v127[6] = v132;
    v134 = v279;
    v136 = v276;
    v135 = v277;
    v127[11] = v278;
    v127[12] = v134;
    v127[9] = v136;
    v127[10] = v135;
    outlined retain of [Input]((uint64_t)&v408);
    outlined retain of NodePersonality(&v368);
    outlined retain of [Input]((uint64_t)&v367);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v368);
    outlined release of [Input]((uint64_t)&v408);
    outlined release of [Input]((uint64_t)&v367);
    swift_release();
    v126 = v56;
    goto LABEL_93;
  }
  v58 = (_QWORD *)v235;
  while (1)
  {
    v60 = *(v58 - 6);
    v59 = *(v58 - 5);
    v61 = *(v58 - 4);
    v62 = *(v58 - 3);
    v63 = *(v58 - 2);
    v64 = *((_BYTE *)v58 - 8);
    v65 = *v58;
    if (v61 == 0x746C69665F70696DLL && v62 == 0xEA00000000007265)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_44;
    v58 += 7;
    if (!--v57)
    {
      v443 = v60;
      v444 = v59;
      v445 = v61;
      v446 = v62;
      v447 = v63;
      v448 = v64;
      v449 = v65;
      v56 = v257;
      goto LABEL_88;
    }
  }
  v62 = 0xEA00000000007265;
LABEL_44:
  v443 = v60;
  v444 = v59;
  v445 = v61;
  v446 = v62;
  v447 = v63;
  v448 = v64;
  v449 = v65;
  v67 = v259[6];
  v457 = v259[7];
  v68 = v259[9];
  v458 = v259[8];
  v459[0] = v68;
  *(_OWORD *)((char *)v459 + 9) = *(__int128 *)((char *)v259 + 153);
  v69 = v259[5];
  v454 = v259[4];
  v455 = v69;
  v456 = v67;
  v70 = v259[1];
  v450 = *v259;
  v451 = v70;
  v71 = v259[3];
  v452 = v259[2];
  v453 = v71;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.edge(to:)((uint64_t)&v443, v290);
  outlined init with take of MetalFunctionNode?((uint64_t)v290, (uint64_t)v341, &demangling cache variable for type metadata for Edge?);
  v72 = v257;
  if (v342)
  {
    outlined release of Edge?(v290);
  }
  else
  {
    Graph.edge(to:)((uint64_t)&v430, v291);
    outlined init with take of MetalFunctionNode?((uint64_t)v291, (uint64_t)&v337, &demangling cache variable for type metadata for Edge?);
    if (*((_QWORD *)&v337 + 1))
    {
      v352[0] = v337;
      v352[1] = v338;
      v352[2] = v339;
      v353 = v340;
      v354 = v338;
      swift_retain();
      outlined retain of String((uint64_t)&v354);
      outlined release of Edge?(v291);
      Graph.connect(_:to:)((uint64_t)v352, (unint64_t)&v443);
      swift_release();
      outlined release of String((uint64_t)&v354);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  v73 = *(_QWORD *)(v236 + 16);
  if (!v73)
  {
LABEL_90:
    outlined init with take of NodePersonality(&v283, &v370);
    v369 = v284;
    v260 = v240;
    v261 = v243;
    v262 = v244;
    v263 = v252;
    v264 = v238;
    v265 = 0x746C69665F6E696DLL;
    v266 = 0xEA00000000007265;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v279 = 0uLL;
    swift_allocError();
    *v137 = v267;
    v138 = v271;
    v140 = v268;
    v139 = v269;
    v137[3] = v270;
    v137[4] = v138;
    v137[1] = v140;
    v137[2] = v139;
    v141 = v275;
    v143 = v272;
    v142 = v273;
    v137[7] = v274;
    v137[8] = v141;
    v137[5] = v143;
    v137[6] = v142;
    v144 = v279;
    v146 = v276;
    v145 = v277;
    v137[11] = v278;
    v137[12] = v144;
    v137[9] = v146;
    v137[10] = v145;
    outlined retain of [Input]((uint64_t)&v408);
    outlined retain of NodePersonality(&v370);
    outlined retain of [Input]((uint64_t)&v369);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined release of NodePersonality(&v370);
    outlined release of [Input]((uint64_t)&v408);
    outlined release of [Input]((uint64_t)&v369);
    swift_release();
    v126 = v72;
    goto LABEL_93;
  }
  v74 = (_QWORD *)v235;
  while (1)
  {
    v76 = *(v74 - 6);
    v75 = *(v74 - 5);
    v77 = *(v74 - 4);
    v78 = *(v74 - 3);
    v79 = *(v74 - 2);
    v80 = *((_BYTE *)v74 - 8);
    v81 = v74;
    v82 = *v74;
    if (v77 == 0x746C69665F6E696DLL && v78 == 0xEA00000000007265)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_58;
    v74 = v81 + 7;
    if (!--v73)
    {
      *(_QWORD *)&v437 = v76;
      *((_QWORD *)&v437 + 1) = v75;
      v438 = v77;
      v439 = v78;
      v440 = v79;
      v441 = v80;
      v442 = v82;
      v72 = v257;
      goto LABEL_90;
    }
  }
  v78 = 0xEA00000000007265;
LABEL_58:
  *(_QWORD *)&v437 = v76;
  *((_QWORD *)&v437 + 1) = v75;
  v438 = v77;
  v439 = v78;
  v440 = v79;
  v441 = v80;
  v442 = v82;
  swift_retain();
  swift_bridgeObjectRetain();
  Graph.moveEdge(from:to:)((uint64_t)&v430, &v437);
  swift_bridgeObjectRelease();
  swift_release();
  specialized ShaderGraphNode.metalTextureType.getter(v257);
  v84 = swift_retain();
  Graph.insertCubeimageNode(metalTextureType:resultType:)(v84, v249, &v292);
  v85 = v292;
  v237 = v293;
  v239 = v294;
  v241 = v295;
  v242 = v296;
  swift_release();
  v86 = *(_QWORD *)(v246 + 16);
  v87 = v232;
  if (!v86)
  {
LABEL_91:
    *(_QWORD *)&v260 = v257;
    *((_QWORD *)&v260 + 1) = v246;
    v261 = v247;
    v262 = v258;
    v263 = v254;
    v264 = v255;
    v265 = 1701603686;
    v266 = 0xE400000000000000;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
    outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v279 = 0uLL;
    swift_allocError();
    *v147 = v267;
    v148 = v271;
    v150 = v268;
    v149 = v269;
    v147[3] = v270;
    v147[4] = v148;
    v147[1] = v150;
    v147[2] = v149;
    v151 = v275;
    v153 = v272;
    v152 = v273;
    v147[7] = v274;
    v147[8] = v151;
    v147[5] = v153;
    v147[6] = v152;
    v154 = v279;
    v156 = v276;
    v155 = v277;
    v147[11] = v278;
    v147[12] = v154;
    v147[9] = v156;
    v147[10] = v155;
    outlined copy of NodePersonality(v257);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    outlined init with take of NodePersonality(&v292, &v375);
    outlined release of NodePersonality(&v375);
    v374 = *((_QWORD *)&v292 + 1);
    outlined release of [Input]((uint64_t)&v374);
    v373 = v293;
    outlined release of [Input]((uint64_t)&v373);
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with take of NodePersonality(&v283, &v372);
    outlined release of NodePersonality(&v372);
    outlined release of [Input]((uint64_t)&v408);
    v371 = v284;
    outlined release of [Input]((uint64_t)&v371);
    swift_release();
    outlined consume of NodePersonality(v257);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  while (1)
  {
    v88 = *(v87 - 6);
    v253 = *(v87 - 5);
    v89 = *(v87 - 4);
    v90 = *(v87 - 2);
    v91 = *((_BYTE *)v87 - 8);
    v92 = *v87;
    if (v89 == 1701603686 && *(v87 - 3) == 0xE400000000000000)
      break;
    v94 = *(v87 - 3);
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_67;
    v87 += 7;
    if (!--v86)
    {
      v416 = v88;
      v417 = v253;
      v418 = v89;
      v419 = v94;
      v420 = v90;
      v421 = v91;
      v422 = v92;
      goto LABEL_91;
    }
  }
  v94 = 0xE400000000000000;
LABEL_67:
  v416 = v88;
  v417 = v253;
  v418 = v89;
  v419 = v94;
  v420 = v90;
  v421 = v91;
  v422 = v92;
  v95 = *(_QWORD *)(*((_QWORD *)&v292 + 1) + 16);
  if (v95)
  {
    v245 = *((_QWORD *)&v292 + 1);
    v96 = (_QWORD *)(*((_QWORD *)&v292 + 1) + 80);
    while (1)
    {
      v98 = *(v96 - 6);
      v97 = *(v96 - 5);
      v100 = *(v96 - 4);
      v99 = *(v96 - 3);
      v101 = *(v96 - 2);
      v102 = *((_BYTE *)v96 - 8);
      v103 = *v96;
      if (v100 == 1701603686 && v99 == 0xE400000000000000)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_77;
      v96 += 7;
      if (!--v95)
      {
        v423 = v98;
        v424 = v97;
        v425 = v100;
        v426 = v99;
        v427 = v101;
        v428 = v102;
        v429 = v103;
        goto LABEL_92;
      }
    }
    v99 = 0xE400000000000000;
LABEL_77:
    v423 = v98;
    v424 = v97;
    v425 = v100;
    v426 = v99;
    v427 = v101;
    v428 = v102;
    v429 = v103;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    Graph.convertFilenameInput(_:movingTo:textureAssignments:customUniformsType:)(&v416, (unint64_t)&v423, v233, v234);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    specialized Sequence.first(where:)(v246, 0x746C7561666564, 0xE700000000000000, v297);
    outlined init with take of MetalFunctionNode?((uint64_t)v297, (uint64_t)v332, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((_QWORD *)&v332[0] + 1))
    {
      *(_QWORD *)&v260 = v257;
      *((_QWORD *)&v260 + 1) = v246;
      v261 = v247;
      v262 = v258;
      v263 = v254;
      v264 = v255;
      v265 = 0x746C7561666564;
      v266 = 0xE700000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
      outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v279 = 0uLL;
      swift_allocError();
      *v181 = v267;
      v182 = v271;
      v184 = v268;
      v183 = v269;
      v181[3] = v270;
      v181[4] = v182;
      v181[1] = v184;
      v181[2] = v183;
      v185 = v275;
      v187 = v272;
      v186 = v273;
      v181[7] = v274;
      v181[8] = v185;
      v181[5] = v187;
      v181[6] = v186;
      v188 = v279;
      v190 = v276;
      v189 = v277;
      v181[11] = v278;
      v181[12] = v188;
      v181[9] = v190;
      v181[10] = v189;
      outlined copy of NodePersonality(v257);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v292, &v407);
      outlined release of NodePersonality(&v407);
      swift_bridgeObjectRelease();
      v406 = v293;
      outlined release of [Input]((uint64_t)&v406);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v283, &v405);
      outlined release of NodePersonality(&v405);
      outlined release of [Input]((uint64_t)&v408);
      v404 = v284;
      outlined release of [Input]((uint64_t)&v404);
      swift_release();
      outlined consume of NodePersonality(v257);
      goto LABEL_86;
    }
    v334 = v332[0];
    v335[0] = v332[1];
    v335[1] = v332[2];
    v336 = v333;
    specialized Sequence.first(where:)(v245, 0x56746C7561666564, 0xEA00000000006C61, v298);
    outlined init with take of MetalFunctionNode?((uint64_t)v298, (uint64_t)v326, (uint64_t *)&demangling cache variable for type metadata for Input?);
    if (!*((_QWORD *)&v326[0] + 1))
    {
      outlined init with take of NodePersonality(&v292, &v403);
      v402 = v293;
      v260 = v85;
      v261 = v237;
      v262 = v239;
      v263 = v241;
      v264 = v242;
      v265 = 0x56746C7561666564;
      v266 = 0xEA00000000006C61;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
      outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v279 = 0uLL;
      swift_allocError();
      *v191 = v267;
      v192 = v271;
      v194 = v268;
      v193 = v269;
      v191[3] = v270;
      v191[4] = v192;
      v191[1] = v194;
      v191[2] = v193;
      v195 = v275;
      v197 = v272;
      v196 = v273;
      v191[7] = v274;
      v191[8] = v195;
      v191[5] = v197;
      v191[6] = v196;
      v198 = v279;
      v200 = v276;
      v199 = v277;
      v191[11] = v278;
      v191[12] = v198;
      v191[9] = v200;
      v191[10] = v199;
      swift_bridgeObjectRetain();
      outlined retain of NodePersonality(&v403);
      outlined retain of [Input]((uint64_t)&v402);
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      v356 = *v231;
      outlined release of String((uint64_t)&v356);
      outlined release of NodePersonality(&v403);
      swift_bridgeObjectRelease();
      outlined release of [Input]((uint64_t)&v402);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v283, &v401);
      outlined release of NodePersonality(&v401);
      outlined release of [Input]((uint64_t)&v408);
      v400 = v284;
      outlined release of [Input]((uint64_t)&v400);
      swift_release();
      outlined consume of NodePersonality(v257);
      goto LABEL_86;
    }
    v328 = v326[0];
    v329 = v326[1];
    v330 = v326[2];
    v331 = v327;
    Graph.moveEdge(from:to:)((uint64_t)&v334, &v328);
    swift_release();
    v357 = v329;
    outlined release of String((uint64_t)&v357);
    swift_release();
    v10 = v231;
    v355 = *v231;
    outlined release of String((uint64_t)&v355);
    specialized Sequence.first(where:)(v246, 0x64726F6F63786574, 0xE800000000000000, v299);
    outlined init with take of MetalFunctionNode?((uint64_t)v299, (uint64_t)v320, (uint64_t *)&demangling cache variable for type metadata for Input?);
    v8 = v248;
    v13 = v257;
    if (*((_QWORD *)&v320[0] + 1))
    {
      v322 = v320[0];
      v323 = v320[1];
      v324 = v320[2];
      v325 = v321;
      specialized Sequence.first(where:)(v245, 0x64726F6F63786574, 0xE800000000000000, v300);
      outlined init with take of MetalFunctionNode?((uint64_t)v300, (uint64_t)v314, (uint64_t *)&demangling cache variable for type metadata for Input?);
      if (*((_QWORD *)&v314[0] + 1))
      {
        v316 = v314[0];
        v317 = v314[1];
        v318 = v314[2];
        v319 = v315;
        Graph.moveEdge(from:to:)((uint64_t)&v322, &v316);
        swift_release();
        v360 = v317;
        outlined release of String((uint64_t)&v360);
        swift_release();
        v358 = v323;
        outlined release of String((uint64_t)&v358);
        ShaderGraphNode.out.getter((uint64_t)&v301);
        specialized Sequence.first(where:)(v245, 0x72656C706D6173, 0xE700000000000000, v303);
        outlined init with take of MetalFunctionNode?((uint64_t)v303, (uint64_t)v308, (uint64_t *)&demangling cache variable for type metadata for Input?);
        if (*((_QWORD *)&v308[0] + 1))
        {
          v310 = v308[0];
          v311 = v308[1];
          v312 = v308[2];
          v313 = v309;
          Graph.connect(_:to:)((uint64_t)&v301, (unint64_t)&v310);
          swift_release();
          v361 = v311;
          outlined release of String((uint64_t)&v361);
          swift_release();
          v386 = v302;
          outlined release of String((uint64_t)&v386);
          ShaderGraphNode.out.getter((uint64_t)&v304);
          ShaderGraphNode.out.getter((uint64_t)v306);
          v6 = 0;
          Graph.moveEdges(from:to:)((uint64_t)&v304, (uint64_t)v306);
          swift_release();
          v385 = v307;
          outlined release of String((uint64_t)&v385);
          swift_release();
          v384 = v305;
          outlined release of String((uint64_t)&v384);
          outlined init with take of NodePersonality(&v292, &v383);
          outlined release of NodePersonality(&v383);
          swift_bridgeObjectRelease();
          v382 = v293;
          outlined release of [Input]((uint64_t)&v382);
          swift_bridgeObjectRelease();
          swift_release();
          outlined init with take of NodePersonality(&v283, &v381);
          outlined release of NodePersonality(&v381);
          outlined release of [Input]((uint64_t)&v408);
          v380 = v284;
          outlined release of [Input]((uint64_t)&v380);
          swift_release();
          goto LABEL_3;
        }
        outlined init with take of NodePersonality(&v292, &v391);
        v390 = v293;
        v260 = v85;
        v261 = v237;
        v262 = v239;
        v263 = v241;
        v264 = v242;
        v265 = 0x72656C706D6173;
        v266 = 0xE700000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
        outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v279 = 0uLL;
        swift_allocError();
        *v221 = v267;
        v222 = v271;
        v224 = v268;
        v223 = v269;
        v221[3] = v270;
        v221[4] = v222;
        v221[1] = v224;
        v221[2] = v223;
        v225 = v275;
        v227 = v272;
        v226 = v273;
        v221[7] = v274;
        v221[8] = v225;
        v221[5] = v227;
        v221[6] = v226;
        v228 = v279;
        v230 = v276;
        v229 = v277;
        v221[11] = v278;
        v221[12] = v228;
        v221[9] = v230;
        v221[10] = v229;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v391);
        outlined retain of [Input]((uint64_t)&v390);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        v389 = v302;
        outlined release of String((uint64_t)&v389);
        outlined release of NodePersonality(&v391);
        swift_bridgeObjectRelease();
        outlined release of [Input]((uint64_t)&v390);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v283, &v388);
        outlined release of NodePersonality(&v388);
        outlined release of [Input]((uint64_t)&v408);
        v387 = v284;
        v115 = &v387;
      }
      else
      {
        outlined init with take of NodePersonality(&v292, &v395);
        v394 = v293;
        v260 = v85;
        v261 = v237;
        v262 = v239;
        v263 = v241;
        v264 = v242;
        v265 = 0x64726F6F63786574;
        v266 = 0xE800000000000000;
        _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
        outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
        lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
        v279 = 0uLL;
        swift_allocError();
        *v211 = v267;
        v212 = v271;
        v214 = v268;
        v213 = v269;
        v211[3] = v270;
        v211[4] = v212;
        v211[1] = v214;
        v211[2] = v213;
        v215 = v275;
        v217 = v272;
        v216 = v273;
        v211[7] = v274;
        v211[8] = v215;
        v211[5] = v217;
        v211[6] = v216;
        v218 = v279;
        v220 = v276;
        v219 = v277;
        v211[11] = v278;
        v211[12] = v218;
        v211[9] = v220;
        v211[10] = v219;
        swift_bridgeObjectRetain();
        outlined retain of NodePersonality(&v395);
        outlined retain of [Input]((uint64_t)&v394);
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        v359 = v323;
        outlined release of String((uint64_t)&v359);
        outlined release of NodePersonality(&v395);
        swift_bridgeObjectRelease();
        outlined release of [Input]((uint64_t)&v394);
        swift_bridgeObjectRelease();
        swift_release();
        outlined init with take of NodePersonality(&v283, &v393);
        outlined release of NodePersonality(&v393);
        outlined release of [Input]((uint64_t)&v408);
        v392 = v284;
        v115 = &v392;
      }
    }
    else
    {
      *(_QWORD *)&v260 = v257;
      *((_QWORD *)&v260 + 1) = v246;
      v261 = v247;
      v262 = v258;
      v263 = v254;
      v264 = v255;
      v265 = 0x64726F6F63786574;
      v266 = 0xE800000000000000;
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
      outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      v279 = 0uLL;
      swift_allocError();
      *v201 = v267;
      v202 = v271;
      v204 = v268;
      v203 = v269;
      v201[3] = v270;
      v201[4] = v202;
      v201[1] = v204;
      v201[2] = v203;
      v205 = v275;
      v207 = v272;
      v206 = v273;
      v201[7] = v274;
      v201[8] = v205;
      v201[5] = v207;
      v201[6] = v206;
      v208 = v279;
      v210 = v276;
      v209 = v277;
      v201[11] = v278;
      v201[12] = v208;
      v201[9] = v210;
      v201[10] = v209;
      outlined copy of NodePersonality(v257);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      outlined init with take of NodePersonality(&v292, &v399);
      outlined release of NodePersonality(&v399);
      swift_bridgeObjectRelease();
      v398 = v293;
      outlined release of [Input]((uint64_t)&v398);
      swift_bridgeObjectRelease();
      swift_release();
      outlined init with take of NodePersonality(&v283, &v397);
      outlined release of NodePersonality(&v397);
      outlined release of [Input]((uint64_t)&v408);
      v396 = v284;
      v115 = &v396;
    }
    goto LABEL_84;
  }
LABEL_92:
  outlined init with take of NodePersonality(&v292, &v379);
  v378 = v293;
  v260 = v85;
  v261 = v237;
  v262 = v239;
  v263 = v241;
  v264 = v242;
  v265 = 1701603686;
  v266 = 0xE400000000000000;
  _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_((uint64_t)&v260);
  outlined init with take of UserGraphError.ErrorType(&v260, (uint64_t)&v267);
  lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
  v279 = 0uLL;
  swift_allocError();
  *v157 = v267;
  v158 = v271;
  v160 = v268;
  v159 = v269;
  v157[3] = v270;
  v157[4] = v158;
  v157[1] = v160;
  v157[2] = v159;
  v161 = v275;
  v163 = v272;
  v162 = v273;
  v157[7] = v274;
  v157[8] = v161;
  v157[5] = v163;
  v157[6] = v162;
  v164 = v279;
  v166 = v276;
  v165 = v277;
  v157[11] = v278;
  v157[12] = v164;
  v157[9] = v166;
  v157[10] = v165;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of NodePersonality(&v379);
  outlined retain of [Input]((uint64_t)&v378);
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined release of NodePersonality(&v379);
  swift_bridgeObjectRelease();
  outlined release of [Input]((uint64_t)&v378);
  swift_bridgeObjectRelease();
  swift_release();
  outlined init with take of NodePersonality(&v283, &v377);
  outlined release of NodePersonality(&v377);
  outlined release of [Input]((uint64_t)&v408);
  v376 = v284;
  outlined release of [Input]((uint64_t)&v376);
  swift_release();
  v126 = v257;
LABEL_93:
  outlined consume of NodePersonality(v126);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.filter(_:)(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::Bool v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = result + 72;
    v4 = MEMORY[0x24BEE4AF8];
    v18 = v1 - 1;
    v19 = result + 72;
    v23 = *(_QWORD *)(result + 16);
    while (1)
    {
      v20 = v4;
      v5 = v2 <= v1 ? v1 : v2;
      v6 = (_BYTE *)(v3 + 48 * v2);
      v7 = v2;
      while (1)
      {
        if (v5 == v7)
        {
          __break(1u);
          return result;
        }
        v8 = *((_QWORD *)v6 - 5);
        if (v8 >> 61 == 5)
          break;
LABEL_7:
        ++v7;
        v6 += 48;
        if (v1 == v7)
          return v20;
      }
      v10 = *((_QWORD *)v6 - 4);
      v9 = *((_QWORD *)v6 - 3);
      v22 = *v6;
      v11 = *((_QWORD *)v6 - 2);
      v21 = *((_QWORD *)v6 - 1);
      outlined copy of NodePersonality(v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = 0xD000000000000014;
      v12._object = (void *)0x8000000245FC82F0;
      v13 = String.hasPrefix(_:)(v12);
      swift_bridgeObjectRelease();
      if (!v13)
        break;
      v4 = v20;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v4 = v20;
      }
      v14 = v22;
      v16 = *(_QWORD *)(v4 + 16);
      v15 = *(_QWORD *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v14 = v22;
        v4 = v20;
      }
      v2 = v7 + 1;
      *(_QWORD *)(v4 + 16) = v16 + 1;
      v17 = v4 + 48 * v16;
      *(_QWORD *)(v17 + 32) = v8;
      *(_QWORD *)(v17 + 40) = v10;
      *(_QWORD *)(v17 + 48) = v9;
      *(_QWORD *)(v17 + 56) = v11;
      *(_QWORD *)(v17 + 64) = v21;
      *(_BYTE *)(v17 + 72) = v14;
      v3 = v19;
      v1 = v23;
      if (v18 == v7)
        return v4;
    }
    outlined consume of NodePersonality(v8);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v1 = v23;
    goto LABEL_7;
  }
  return MEMORY[0x24BEE4AF8];
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = MEMORY[0x24BEE4AF8];
  v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v2 << 6);
      goto LABEL_23;
    }
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v8)
      goto LABEL_31;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v2;
    if (!v12)
    {
      v2 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (!v12)
      {
        v2 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_31;
        v12 = *(_QWORD *)(v3 + 8 * v2);
        if (!v12)
        {
          v2 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_31;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v2 << 6);
LABEL_23:
    v14 = (__int128 *)(*(_QWORD *)(v1 + 56) + 144 * v10);
    v30 = *v14;
    v15 = v14[4];
    v17 = v14[1];
    v16 = v14[2];
    v33 = v14[3];
    v34 = v15;
    v31 = v17;
    v32 = v16;
    v18 = v14[8];
    v20 = v14[5];
    v19 = v14[6];
    v37 = v14[7];
    v38 = v18;
    v35 = v20;
    v36 = v19;
    if (*((_QWORD *)&v33 + 1))
    {
      result = v33;
      if (v33 == __PAIR128__(0x8000000245FCDF70, 0xD000000000000013))
        continue;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        continue;
    }
    outlined retain of NodeDef((uint64_t)&v30);
    result = swift_isUniquelyReferenced_nonNull_native();
    v39 = v7;
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v7 = v39;
    }
    v22 = *(_QWORD *)(v7 + 16);
    v21 = *(_QWORD *)(v7 + 24);
    if (v22 >= v21 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v7 = v39;
    }
    *(_QWORD *)(v7 + 16) = v22 + 1;
    v23 = (_OWORD *)(v7 + 144 * v22);
    v23[2] = v30;
    v24 = v31;
    v25 = v32;
    v26 = v34;
    v23[5] = v33;
    v23[6] = v26;
    v23[3] = v24;
    v23[4] = v25;
    v27 = v35;
    v28 = v36;
    v29 = v38;
    v23[9] = v37;
    v23[10] = v29;
    v23[7] = v27;
    v23[8] = v28;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_31:
    swift_release();
    return v7;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v2 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v2 >= v8)
      goto LABEL_31;
    v12 = *(_QWORD *)(v3 + 8 * v2);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
  return result;
}

void specialized Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[3];
  unint64_t v35;

  Graph.replaceInvalidImageNodes()();
  if (!v7)
  {
    v8 = v3[9];
    v33 = v3[8];
    v34[0] = v8;
    *(_OWORD *)((char *)v34 + 9) = *(__int128 *)((char *)v3 + 153);
    v9 = v3[5];
    v29 = v3[4];
    v30 = v9;
    v10 = v3[7];
    v31 = v3[6];
    v32 = v10;
    v11 = v3[1];
    v25 = *v3;
    v26 = v11;
    v12 = v3[3];
    v27 = v3[2];
    v28 = v12;
    Graph.connectedUpstreamSubgraph(rootedAt:)(a1, (uint64_t)v22);
    v13 = v22[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    specialized Graph.transformModernRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(v13, a2, a3);
    specialized Graph.transformMaterialXImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(v13, a2, a3);
    specialized Graph.transformMaterialXCubeimageNodes<A>(_:paramType:textureAssignments:customUniformsType:)(v13);
    v14 = swift_bridgeObjectRetain();
    v15 = specialized Sequence.filter(_:)(v14);
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v35 = v13;
      swift_bridgeObjectRetain();
      v17 = v15 + 40;
      do
      {
        v19 = *(_QWORD *)(v17 - 8);
        v18 = *(_QWORD *)v17;
        v20 = *(_QWORD *)(v17 + 8);
        v21 = *(_BYTE *)(v17 + 32);
        v22[0] = v19;
        v22[1] = v18;
        v22[2] = v20;
        v23 = *(_OWORD *)(v17 + 16);
        LOBYTE(v24) = v21;
        outlined copy of NodePersonality(v19);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        closure #1 in Graph.transformRealityKitImageNodes<A>(_:paramType:textureAssignments:customUniformsType:)((uint64_t)v22);
        outlined consume of NodePersonality(v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 += 48;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void *specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, void *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  NSObject *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  os_signpost_id_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  _OWORD *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  os_signpost_type_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  const char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint8_t *v145;
  os_signpost_id_t v146;
  void (*v147)(char *, uint64_t);
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  NSObject *v153;
  _QWORD *v154;
  void *v155;
  uint64_t v156;
  NSObject *v157;
  unint64_t v158;
  int v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  _QWORD *v164;
  uint8_t *v165;
  os_signpost_id_t v166;
  os_signpost_type_t v167;
  unint64_t v168;
  void (*v169)(char *, uint64_t);
  void *result;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint8_t *v176;
  os_signpost_id_t v177;
  unint64_t v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  NSObject *v181;
  int64_t v182;
  os_signpost_type_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  int64_t v188;
  uint64_t v189;
  char *v190;
  int v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  NSObject *v198;
  os_signpost_type_t v199;
  char *v200;
  const char *v201;
  unint64_t v202;
  int64_t v203;
  _QWORD *v204;
  uint8_t *v205;
  os_signpost_id_t v206;
  void (*v207)(char *, uint64_t);
  uint64_t v208;
  NSObject *v209;
  os_signpost_type_t v210;
  char *v211;
  const char *v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  _QWORD *v216;
  uint8_t *v217;
  os_signpost_id_t v218;
  uint64_t v219;
  uint64_t v220;
  NSObject *v221;
  os_signpost_type_t v222;
  char *v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  unint64_t v228;
  char *v229;
  _QWORD *v230;
  uint8_t *v231;
  os_signpost_id_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  __int128 v237;
  __int128 v238;
  char *v239;
  int v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  int64_t v253;
  uint64_t v254;
  char *v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  char *v261;
  int64_t v262;
  unint64_t v263;
  BOOL v264;
  _QWORD *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t *v274;
  unint64_t v276;
  void (*v277)(_QWORD, _QWORD, _QWORD);
  char v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  Swift::Int v282;
  uint64_t v283;
  unint64_t v284;
  _QWORD *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  void *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  int64_t v329;
  char *v330;
  char *v331;
  char *v332;
  unint64_t v333;
  char *v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void (*v347)(char *, uint64_t);
  NSObject *v348;
  _QWORD *v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  _OWORD *v356;
  char *v357;
  uint64_t v358;
  unint64_t v359;
  _BYTE v360[312];
  _OWORD v361[4];
  _BYTE v362[217];
  _BYTE v363[7];
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _OWORD v367[3];
  __int128 v368;
  _OWORD v369[4];
  _OWORD v370[4];
  _OWORD v371[3];
  __int128 v372;
  _OWORD v373[4];
  _OWORD v374[3];
  _BYTE v375[7];
  _OWORD v376[11];
  _BYTE v377[7];
  __int128 v378;
  _OWORD v379[2];
  _QWORD v380[6];
  _QWORD v381[5];
  unsigned __int8 v382;
  __int128 v383;
  _OWORD v384[2];
  __int128 v385;
  _OWORD v386[2];
  __int128 v387;
  _OWORD v388[2];
  __int128 v389;
  _OWORD v390[2];
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  _OWORD v415[2];
  _QWORD v416[5];
  char v417;
  __int128 v418;
  _OWORD v419[2];
  _QWORD v420[5];
  char v421;
  _OWORD v422[9];
  _OWORD v423[14];
  uint64_t v424;
  ShaderGraph::NodeDefStore v425;

  v349 = a6;
  v424 = a5;
  v348 = a4;
  v354 = a3;
  v346 = a2;
  v305 = a7;
  v8 = type metadata accessor for OSSignpostError();
  v341 = *(_QWORD *)(v8 - 8);
  v342 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v304 = (char *)&v295 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v302 = (char *)&v295 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v301 = (char *)&v295 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v307 = (char *)&v295 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v312 = (char *)&v295 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v315 = (char *)&v295 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v316 = (char *)&v295 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v319 = (char *)&v295 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v321 = (char *)&v295 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v322 = (char *)&v295 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v324 = (char *)&v295 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v326 = (char *)&v295 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v328 = (char *)&v295 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v330 = (char *)&v295 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v332 = (char *)&v295 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v334 = (char *)&v295 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v336 = (char *)&v295 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v339 = (unint64_t)&v295 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v298 = (char *)&v295 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v308 = (char *)&v295 - v48;
  MEMORY[0x24BDAC7A8](v47);
  v311 = (char *)&v295 - v49;
  v50 = type metadata accessor for OSSignpostID();
  v358 = *(_QWORD *)(v50 - 8);
  v51 = MEMORY[0x24BDAC7A8](v50);
  v303 = (char *)&v295 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = MEMORY[0x24BDAC7A8](v51);
  v300 = (char *)&v295 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v299 = (char *)&v295 - v56;
  v57 = MEMORY[0x24BDAC7A8](v55);
  v309 = (char *)&v295 - v58;
  v59 = MEMORY[0x24BDAC7A8](v57);
  v313 = (char *)&v295 - v60;
  v61 = MEMORY[0x24BDAC7A8](v59);
  v318 = (char *)&v295 - v62;
  v63 = MEMORY[0x24BDAC7A8](v61);
  v323 = (char *)&v295 - v64;
  v65 = MEMORY[0x24BDAC7A8](v63);
  v325 = (char *)&v295 - v66;
  v67 = MEMORY[0x24BDAC7A8](v65);
  v329 = (int64_t)&v295 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v333 = (unint64_t)&v295 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v343 = (unint64_t)&v295 - v72;
  v73 = MEMORY[0x24BDAC7A8](v71);
  v306 = (char *)&v295 - v74;
  v75 = MEMORY[0x24BDAC7A8](v73);
  v310 = (char *)&v295 - v76;
  v77 = MEMORY[0x24BDAC7A8](v75);
  v314 = (char *)&v295 - v78;
  v79 = MEMORY[0x24BDAC7A8](v77);
  v317 = (char *)&v295 - v80;
  v81 = MEMORY[0x24BDAC7A8](v79);
  v320 = (char *)&v295 - v82;
  v83 = MEMORY[0x24BDAC7A8](v81);
  v327 = (char *)&v295 - v84;
  v85 = MEMORY[0x24BDAC7A8](v83);
  v331 = (char *)&v295 - v86;
  v87 = MEMORY[0x24BDAC7A8](v85);
  v335 = (uint64_t)&v295 - v88;
  v89 = MEMORY[0x24BDAC7A8](v87);
  v337 = (char *)&v295 - v90;
  v91 = MEMORY[0x24BDAC7A8](v89);
  v340 = (char *)&v295 - v92;
  v93 = MEMORY[0x24BDAC7A8](v91);
  v95 = (char *)&v295 - v94;
  MEMORY[0x24BDAC7A8](v93);
  v97 = (char *)&v295 - v96;
  v98 = type metadata accessor for OSSignposter();
  v344 = *(_QWORD *)(v98 - 8);
  v345 = v98;
  MEMORY[0x24BDAC7A8](v98);
  v100 = (char *)&v295 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = *((_QWORD *)a1 + 3);
  v102 = *((_QWORD *)a1 + 4);
  v356 = a1;
  swift_bridgeObjectRetain_n();
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  v357 = v100;
  v103 = OSSignposter.logHandle.getter();
  LODWORD(v352) = static os_signpost_type_t.begin.getter();
  v104 = OS_os_log.signpostsEnabled.getter();
  v359 = v102;
  v355 = (_QWORD *)v50;
  v351 = v95;
  v338 = v101;
  if ((v104 & 1) != 0)
  {
    v105 = v358;
    v353 = *(_QWORD *)(v358 + 16);
    ((void (*)(char *, char *, uint64_t))v353)(v95, v97, v50);
    v106 = swift_slowAlloc();
    v107 = swift_slowAlloc();
    *(_QWORD *)&v361[0] = v107;
    *(_DWORD *)v106 = 141558275;
    *(_QWORD *)v360 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v106 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(_QWORD *)v360 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v359, (uint64_t *)v361);
    v108 = (unint64_t)v351;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v109 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v103, (os_signpost_type_t)v352, v109, "transform", "%{private,mask.hash}s", (uint8_t *)v106, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v107, -1, -1);
    v110 = v106;
    v95 = (char *)v108;
    v50 = (uint64_t)v355;
    MEMORY[0x24954C33C](v110, -1, -1);

    v111 = v105;
    (*(void (**)(unint64_t, uint64_t))(v105 + 8))(v108, v50);
    v112 = (void (*)(char *, char *, uint64_t))v353;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v111 = v358;
    v112 = *(void (**)(char *, char *, uint64_t))(v358 + 16);
  }
  v353 = (uint64_t)v112;
  v112(v95, v97, v50);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v113 = OSSignpostIntervalState.init(id:isOpen:)();
  v347 = *(void (**)(char *, uint64_t))(v111 + 8);
  v347(v97, v50);
  v114 = v356;
  v115 = v356[7];
  v116 = v356[9];
  v374[0] = v356[8];
  v374[1] = v116;
  *(_OWORD *)((char *)&v374[1] + 9) = *(_OWORD *)((char *)v356 + 153);
  v117 = v356[3];
  v118 = v356[5];
  v119 = v356[6];
  v373[0] = v356[4];
  v373[1] = v118;
  v120 = *((_QWORD *)v356 + 6);
  v373[2] = v119;
  v373[3] = v115;
  v121 = v356[1];
  v371[0] = *v356;
  v371[1] = v121;
  v371[2] = v356[2];
  v372 = v117;
  swift_bridgeObjectRetain_n();
  outlined retain of Graph((uint64_t)v114);
  Graph.flatten()();
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  v122 = static DebugConfig.debugMode;
  v123 = *(_QWORD *)(static DebugConfig.debugMode + 16);
  v358 = v120;
  v352 = v113;
  if (v123)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v124 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v122 + 32));
    if (((*(_QWORD *)(v122 + 56 + ((v124 >> 3) & 0xFFFFFFFFFFFFF8)) >> v124) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v125 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v126 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v125 + 32));
    if (((*(_QWORD *)(v125 + 56 + ((v126 >> 3) & 0xFFFFFFFFFFFFF8)) >> v126) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v127 = v350;
  v422[7] = v373[3];
  v422[8] = v374[0];
  v423[0] = v374[1];
  *(_OWORD *)((char *)v423 + 9) = *(_OWORD *)((char *)&v374[1] + 9);
  v422[4] = v373[0];
  v422[5] = v373[1];
  v422[6] = v373[2];
  v422[0] = v371[0];
  v422[1] = v371[1];
  v422[2] = v371[2];
  v422[3] = v372;
  outlined retain of Graph((uint64_t)v422);
  v128 = v127;
  Graph.surfaceNode()((uint64_t)v380);
  if (v127)
  {
    outlined release of Graph((uint64_t)v422);
    outlined release of Graph((uint64_t)v422);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v129 = OSSignposter.logHandle.getter();
    v130 = v343;
    OSSignpostIntervalState.signpostID.getter();
    v131 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v132 = v339;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v134 = v341;
      v133 = v342;
      v135 = (*(uint64_t (**)(unint64_t, uint64_t))(v341 + 88))(v132, v342);
      v136 = *MEMORY[0x24BEE7810];
      v350 = v128;
      if (v135 == v136)
      {
        v137 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unint64_t, uint64_t))(v134 + 8))(v132, v133);
        v137 = "";
      }
      v142 = v343;
      v143 = (unint64_t)v351;
      v144 = v355;
      ((void (*)(void))v353)();
      v145 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v145 = 0;
      v146 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v129, v131, v146, "transform", v137, v145, 2u);
      MEMORY[0x24954C33C](v145, -1, -1);

      v147 = v347;
      v347((char *)v142, (uint64_t)v144);
      v147((char *)v143, (uint64_t)v144);
      swift_release();
      swift_release();
      outlined release of Graph((uint64_t)v356);
      v148 = 0;
      v150 = v344;
      v149 = v345;
      goto LABEL_33;
    }

    v347((char *)v130, (uint64_t)v355);
    goto LABEL_32;
  }
  outlined release of Graph((uint64_t)v422);
  outlined init with take of NodePersonality(v380, &v405);
  v404 = v380[1];
  v403 = v380[2];
  outlined retain of Graph((uint64_t)v422);
  outlined retain of NodePersonality(&v405);
  outlined retain of [Input]((uint64_t)&v404);
  outlined retain of [Input]((uint64_t)&v403);
  Graph.geometryModifierNode()((uint64_t)v381);
  v339 = v381[0];
  v343 = v381[1];
  v138 = (char *)v381[2];
  v139 = v381[3];
  v140 = v381[4];
  v141 = v382;
  outlined release of Graph((uint64_t)v422);
  outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ShaderGraphNode?);
  specialized Graph.splitSharedNodes(nodeDefStore:surfaceShader:geometryModifier:)((uint64_t)v380, (uint64_t)v381);
  v340 = v138;
  v296 = v139;
  v297 = v140;
  LODWORD(v336) = v141;
  v151 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v152 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v151 + 32));
    if (((*(_QWORD *)(v151 + 56 + ((v152 >> 3) & 0xFFFFFFFFFFFFF8)) >> v152) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    v154 = v355;
    v153 = v348;
  }
  else
  {
    v153 = v348;
    v154 = v355;
  }
  specialized Graph.mapStringInputs(nodeDefStore:)((uint64_t)v153);
  v155 = (void *)v424;
  specialized Graph.insertMaterialXDefaultValues(nodeDefStore:)((uint64_t)v153, v424);
  v425.nodeDefs._rawValue = v153;
  v425.geomPropDefs._rawValue = v155;
  v425.implementations._rawValue = v349;
  Graph.resolvingNodegraphImplementations(nodeDefStore:)(v425);
  if (v156)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v157 = OSSignposter.logHandle.getter();
    v158 = v333;
    OSSignpostIntervalState.signpostID.getter();
    v159 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      LODWORD(v424) = v159;
      swift_retain();
      v160 = v330;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v162 = v341;
      v161 = v342;
      if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v160, v342) == *MEMORY[0x24BEE7810])
      {
        v163 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v162 + 8))(v160, v161);
        v163 = "";
      }
      v174 = v333;
      v175 = v355;
      ((void (*)(char *, unint64_t, _QWORD *))v353)(v351, v333, v355);
      v176 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v176 = 0;
      v177 = OSSignpostID.rawValue.getter();
      v178 = (unint64_t)v351;
      _os_signpost_emit_with_name_impl(&dword_245E46000, v157, (os_signpost_type_t)v424, v177, "transform", v163, v176, 2u);
      MEMORY[0x24954C33C](v176, -1, -1);

      v179 = v347;
      v347((char *)v174, (uint64_t)v175);
      v179((char *)v178, (uint64_t)v175);
      goto LABEL_32;
    }

    v173 = v158;
    goto LABEL_40;
  }
  v171 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v172 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v171 + 32));
    if (((*(_QWORD *)(v171 + 56 + ((v172 >> 3) & 0xFFFFFFFFFFFFF8)) >> v172) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    v154 = v355;
    v153 = v348;
  }
  specialized Graph.insertMaterialXDefaultValues(nodeDefStore:)((uint64_t)v153, v424);
  Graph.replaceMultiOutputNodes()();
  if (v180)
  {
    v350 = v180;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v181 = OSSignposter.logHandle.getter();
    v182 = v329;
    OSSignpostIntervalState.signpostID.getter();
    v183 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v347((char *)v182, (uint64_t)v154);
      goto LABEL_32;
    }
    swift_retain();
    v184 = v326;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v186 = v341;
    v185 = v342;
    if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v184, v342) == *MEMORY[0x24BEE7810])
    {
      v187 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v185);
      v187 = "";
    }
    v188 = v329;
    v164 = v355;
    ((void (*)(char *, int64_t, _QWORD *))v353)(v351, v329, v355);
    v165 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v165 = 0;
    v166 = OSSignpostID.rawValue.getter();
    v167 = v183;
    goto LABEL_31;
  }
  specialized Graph.removePassthroughNodes(nodeDefStore:)((uint64_t)v153);
  Graph.removeEdgesToExplicitlyIgnoredInputs()();
  if (v189)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v181 = OSSignposter.logHandle.getter();
    v190 = v325;
    OSSignpostIntervalState.signpostID.getter();
    v191 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v173 = (unint64_t)v190;
LABEL_40:
      v347((char *)v173, (uint64_t)v154);
      goto LABEL_32;
    }
    LODWORD(v424) = v191;
    swift_retain();
    v192 = v322;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v194 = v341;
    v193 = v342;
    v195 = (*(uint64_t (**)(char *, uint64_t))(v341 + 88))(v192, v342);
    v196 = *MEMORY[0x24BEE7810];
    v350 = v189;
    if (v195 == v196)
    {
      v187 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v194 + 8))(v192, v193);
      v187 = "";
    }
    v188 = (int64_t)v325;
    v164 = v355;
    ((void (*)(char *, char *, _QWORD *))v353)(v351, v325, v355);
    v165 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v165 = 0;
    v166 = OSSignpostID.rawValue.getter();
    v167 = v424;
LABEL_31:
    v168 = (unint64_t)v351;
    _os_signpost_emit_with_name_impl(&dword_245E46000, v181, v167, v166, "transform", v187, v165, 2u);
    MEMORY[0x24954C33C](v165, -1, -1);

    v169 = v347;
    v347((char *)v188, (uint64_t)v164);
    v169((char *)v168, (uint64_t)v164);
LABEL_32:
    swift_release();
    swift_release();
    outlined release of Graph((uint64_t)v356);
    v148 = 0;
    v150 = v344;
    v149 = v345;
    goto LABEL_33;
  }
  Graph.resolveMaterialXEnums()();
  if (v197)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v198 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v199 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v200 = v321;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v200, v342) == *MEMORY[0x24BEE7810])
      {
        v201 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v341 + 8))(v321, v342);
        v201 = "";
      }
      v202 = (unint64_t)v351;
      v203 = (int64_t)v323;
      v204 = v355;
      ((void (*)(char *, char *, _QWORD *))v353)(v351, v323, v355);
      v205 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v205 = 0;
      v206 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v198, v199, v206, "transform", v201, v205, 2u);
      MEMORY[0x24954C33C](v205, -1, -1);

      v207 = v347;
      v347((char *)v203, (uint64_t)v204);
      v207((char *)v202, (uint64_t)v355);
    }
    else
    {

      v347(v323, (uint64_t)v355);
    }
    goto LABEL_32;
  }
  specialized Graph.resolveSwizzleNodes(nodeDefStore:)();
  v350 = 0;
  Graph.resolveEnvironmentRadianceNode()();
  v350 = v208;
  if (v208)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v209 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v210 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v211 = v316;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v211, v342) == *MEMORY[0x24BEE7810])
      {
        v212 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v341 + 8))(v316, v342);
        v212 = "";
      }
      v215 = v318;
      v216 = v355;
      ((void (*)(char *, char *, _QWORD *))v353)(v351, v318, v355);
      v217 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v217 = 0;
      v218 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v209, v210, v218, "transform", v212, v217, 2u);
      MEMORY[0x24954C33C](v217, -1, -1);

      v347(v215, (uint64_t)v216);
    }
    else
    {

      v351 = v318;
    }
    v347(v351, (uint64_t)v355);
    swift_release();
    swift_release();
    outlined release of Graph((uint64_t)v356);
    v148 = 0;
    goto LABEL_80;
  }
  v213 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v214 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v213 + 32));
    if (((*(_QWORD *)(v213 + 56 + ((v214 >> 3) & 0xFFFFFFFFFFFFF8)) >> v214) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v219 = one-time initialization token for surface_parameters_private;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v219 != -1)
    swift_once();
  v220 = v350;
  specialized Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)((uint64_t)v380, v354, v346);
  v350 = v220;
  if (v220)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v221 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v222 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v351 = v317;
LABEL_98:
      v347(v351, (uint64_t)v355);
      swift_release();
      swift_release();
      outlined release of Graph((uint64_t)v356);
      v148 = 1;
LABEL_80:
      v150 = v344;
      v149 = v345;
LABEL_33:
      (*(void (**)(char *, uint64_t))(v150 + 8))(v357, v149);
      swift_bridgeObjectRelease();
      result = (void *)swift_bridgeObjectRelease();
      if (v148)
      {
        swift_release();
        return (void *)swift_bridgeObjectRelease();
      }
      return result;
    }
    swift_retain();
    v223 = v315;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v223, v342) == *MEMORY[0x24BEE7810])
    {
      v224 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v341 + 8))(v315, v342);
      v224 = "";
    }
    v228 = (unint64_t)v351;
    v229 = v317;
LABEL_97:
    v230 = v355;
    ((void (*)(unint64_t, char *, _QWORD *))v353)(v228, v229, v355);
    v231 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v231 = 0;
    v232 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v221, v222, v232, "transform", v224, v231, 2u);
    MEMORY[0x24954C33C](v231, -1, -1);

    v347(v229, (uint64_t)v230);
    goto LABEL_98;
  }
  outlined init with take of MetalFunctionNode?((uint64_t)v381, (uint64_t)&v387, &demangling cache variable for type metadata for ShaderGraphNode?);
  if (*((_QWORD *)&v387 + 1))
  {
    v389 = v387;
    v390[0] = v388[0];
    *(_OWORD *)((char *)v390 + 9) = *(_OWORD *)((char *)v388 + 9);
    outlined copy of NodePersonality(v339);
    v225 = one-time initialization token for geometry_parameters_private;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v225 != -1)
      swift_once();
    v226 = v350;
    specialized Graph.mapImageNodes(connectedTo:paramType:textureAssignments:customUniformsType:)((uint64_t)&v389, v354, v346);
    v350 = v226;
    if (v226)
    {
      outlined init with take of NodePersonality(&v389, &v394);
      outlined release of NodePersonality(&v394);
      v395 = *((_QWORD *)&v389 + 1);
      outlined release of [Input]((uint64_t)&v395);
      v396 = *(_QWORD *)&v390[0];
      outlined release of [Input]((uint64_t)&v396);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
      outlined release of NodePersonality(&v405);
      outlined release of [Input]((uint64_t)&v404);
      outlined release of [Input]((uint64_t)&v403);
      outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
      outlined release of NodePersonality(&v405);
      outlined release of [Input]((uint64_t)&v404);
      outlined release of [Input]((uint64_t)&v403);
      *(_OWORD *)&v362[64] = v374[0];
      *(_OWORD *)&v362[80] = v374[1];
      *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
      *(_OWORD *)v362 = v373[0];
      *(_OWORD *)&v362[16] = v373[1];
      *(_OWORD *)&v362[32] = v373[2];
      *(_OWORD *)&v362[48] = v373[3];
      v361[0] = v371[0];
      v361[1] = v371[1];
      v361[2] = v371[2];
      v361[3] = v372;
      outlined release of Graph((uint64_t)v361);
      v221 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v222 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {

        v351 = v314;
        goto LABEL_98;
      }
      swift_retain();
      v227 = v311;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v227, v342) == *MEMORY[0x24BEE7810])
      {
        v224 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v341 + 8))(v311, v342);
        v224 = "";
      }
      v228 = (unint64_t)v351;
      v229 = v314;
      goto LABEL_97;
    }
    outlined init with take of NodePersonality(&v389, &v391);
    outlined release of NodePersonality(&v391);
    v392 = *((_QWORD *)&v389 + 1);
    outlined release of [Input]((uint64_t)&v392);
    v393 = *(_QWORD *)&v390[0];
    outlined release of [Input]((uint64_t)&v393);
  }
  v233 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v234 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v233 + 32));
    if (((*(_QWORD *)(v233 + 56 + ((v234 >> 3) & 0xFFFFFFFFFFFFF8)) >> v234) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v235 = v350;
  Graph.replaceRootNodeWithInternal(root:customUniformsType:)((uint64_t)v380, v346, (uint64_t)v361);
  v350 = v235;
  if (v235)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined release of NodePersonality(&v405);
    outlined release of [Input]((uint64_t)&v404);
    outlined release of [Input]((uint64_t)&v403);
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v221 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v222 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v351 = v313;
      goto LABEL_98;
    }
    swift_retain();
    v236 = v312;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v236, v342) == *MEMORY[0x24BEE7810])
    {
      v224 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v341 + 8))(v312, v342);
      v224 = "";
    }
    v228 = (unint64_t)v351;
    v229 = v313;
    goto LABEL_97;
  }
  v237 = v361[0];
  v238 = v361[1];
  v239 = *(char **)&v361[2];
  v240 = BYTE8(v361[2]);
  v337 = (char *)*((_QWORD *)&v361[3] + 1);
  v241 = *(_QWORD *)&v361[3];
  v242 = *(_QWORD *)v362;
  v328 = *(char **)&v362[16];
  v329 = *(_QWORD *)&v362[8];
  LODWORD(v327) = v362[24];
  outlined release of NodePersonality(&v405);
  outlined release of [Input]((uint64_t)&v404);
  outlined release of [Input]((uint64_t)&v403);
  outlined release of NodePersonality(&v405);
  outlined release of [Input]((uint64_t)&v404);
  outlined release of [Input]((uint64_t)&v403);
  v418 = v237;
  v419[0] = v238;
  v325 = v239;
  v326 = (char *)*((_QWORD *)&v238 + 1);
  *(_QWORD *)&v419[1] = v239;
  LODWORD(v324) = v240;
  BYTE8(v419[1]) = v240;
  outlined init with take of MetalFunctionNode?((uint64_t)v381, (uint64_t)&v383, &demangling cache variable for type metadata for ShaderGraphNode?);
  if (*((_QWORD *)&v383 + 1))
  {
    v385 = v383;
    v386[0] = v384[0];
    *(_OWORD *)((char *)v386 + 9) = *(_OWORD *)((char *)v384 + 9);
    outlined copy of NodePersonality(v237);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v241);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v243 = v350;
    Graph.replaceRootNodeWithInternal(root:customUniformsType:)((uint64_t)&v385, v346, (uint64_t)v361);
    v350 = v243;
    if (v243)
    {
      outlined init with take of NodePersonality(&v385, &v400);
      outlined release of NodePersonality(&v400);
      v401 = *((_QWORD *)&v385 + 1);
      outlined release of [Input]((uint64_t)&v401);
      v402 = *(_QWORD *)&v386[0];
      outlined release of [Input]((uint64_t)&v402);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v241);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v237);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v241);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
      outlined consume of NodePersonality(v237);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_OWORD *)&v362[64] = v374[0];
      *(_OWORD *)&v362[80] = v374[1];
      *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
      *(_OWORD *)v362 = v373[0];
      *(_OWORD *)&v362[16] = v373[1];
      *(_OWORD *)&v362[32] = v373[2];
      *(_OWORD *)&v362[48] = v373[3];
      v361[0] = v371[0];
      v361[1] = v371[1];
      v361[2] = v371[2];
      v361[3] = v372;
      outlined release of Graph((uint64_t)v361);
      v221 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v222 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {

        v351 = v309;
        goto LABEL_98;
      }
      swift_retain();
      v244 = v307;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v244, v342) == *MEMORY[0x24BEE7810])
      {
        v224 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v341 + 8))(v307, v342);
        v224 = "";
      }
      v228 = (unint64_t)v351;
      v229 = v309;
      goto LABEL_97;
    }
    v343 = *((_QWORD *)&v361[0] + 1);
    v339 = *(_QWORD *)&v361[0];
    v296 = *((_QWORD *)&v361[1] + 1);
    v340 = *(char **)&v361[1];
    v297 = *(_QWORD *)&v361[2];
    LODWORD(v336) = BYTE8(v361[2]);
    v335 = *((_QWORD *)&v361[3] + 1);
    v333 = *(_QWORD *)&v361[3];
    v334 = *(char **)v362;
    v331 = *(char **)&v362[8];
    v332 = *(char **)&v362[16];
    LODWORD(v330) = v362[24];
    outlined retain of ShaderGraphNode?((uint64_t)v381, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ShaderGraphNode?);
    outlined init with take of NodePersonality(&v385, &v397);
    outlined release of NodePersonality(&v397);
    v398 = *((_QWORD *)&v385 + 1);
    outlined release of [Input]((uint64_t)&v398);
    v399 = *(_QWORD *)&v386[0];
    outlined release of [Input]((uint64_t)&v399);
  }
  else
  {
    outlined copy of NodePersonality(v237);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of NodePersonality(v241);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v333 = 0;
    v334 = 0;
    v335 = 0;
    v331 = 0;
    v332 = 0;
    LODWORD(v330) = 0;
  }
  v245 = v350;
  specialized Graph.transformGeomPropValueNodes(surface:geometryModifier:nodeDefStore:)(v348, v424);
  v350 = v245;
  if (v245)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v241);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v339, v343);
    outlined consume of NodePersonality(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v333, v335);
    outlined consume of NodePersonality(v241);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v221 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v222 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v351 = v310;
      goto LABEL_98;
    }
    swift_retain();
    v246 = v308;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v246, v342) == *MEMORY[0x24BEE7810])
    {
      v224 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v341 + 8))(v308, v342);
      v224 = "";
    }
    v228 = (unint64_t)v351;
    v229 = v310;
    goto LABEL_97;
  }
  specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)&v418, 0);
  v350 = 0;
  if (v343)
  {
    v420[0] = v339;
    v420[1] = v343;
    v420[2] = v340;
    v420[3] = v296;
    v420[4] = v297;
    v421 = v336 & 1;
    outlined copy of NodePersonality(v339);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v248 = v350;
    specialized Graph.insertParamsInputs(surface:type:nodeDefStore:)((uint64_t)v420, 1);
    v350 = v248;
    if (v248)
    {
      outlined consume of ShaderGraphNode?(v339, v343);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v241);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ShaderGraphNode?(v339, v343);
      outlined consume of NodePersonality(v237);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ShaderGraphNode?(v333, v335);
      outlined consume of NodePersonality(v241);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v237);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_OWORD *)&v362[64] = v374[0];
      *(_OWORD *)&v362[80] = v374[1];
      *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
      *(_OWORD *)v362 = v373[0];
      *(_OWORD *)&v362[16] = v373[1];
      *(_OWORD *)&v362[32] = v373[2];
      *(_OWORD *)&v362[48] = v373[3];
      v361[0] = v371[0];
      v361[1] = v371[1];
      v361[2] = v371[2];
      v361[3] = v372;
      outlined release of Graph((uint64_t)v361);
      v221 = OSSignposter.logHandle.getter();
      OSSignpostIntervalState.signpostID.getter();
      v222 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {

        v351 = v306;
        goto LABEL_98;
      }
      swift_retain();
      v247 = v298;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v247, v342) == *MEMORY[0x24BEE7810])
      {
        v224 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v341 + 8))(v298, v342);
        v224 = "";
      }
      v228 = (unint64_t)v351;
      v229 = v306;
      goto LABEL_97;
    }
    outlined consume of ShaderGraphNode?(v339, v343);
  }
  Graph.resolveMaterialXEnums()();
  v350 = v249;
  if (v249)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v241);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v339, v343);
    outlined consume of NodePersonality(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v333, v335);
    outlined consume of NodePersonality(v241);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v221 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v222 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v351 = v299;
      goto LABEL_98;
    }
    swift_retain();
    v250 = v301;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v250, v342) == *MEMORY[0x24BEE7810])
    {
      v224 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v341 + 8))(v301, v342);
      v224 = "";
    }
    v228 = (unint64_t)v351;
    v229 = v299;
    goto LABEL_97;
  }
  Graph.rewireUniformInputs(customUniformsType:)(v346);
  v350 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ShaderGraphNode?>);
  v251 = swift_allocObject();
  *(_OWORD *)(v251 + 16) = xmmword_245FBECE0;
  v252 = v337;
  *(_QWORD *)(v251 + 32) = v241;
  *(_QWORD *)(v251 + 40) = v252;
  v253 = v329;
  *(_QWORD *)(v251 + 48) = v242;
  *(_QWORD *)(v251 + 56) = v253;
  *(_QWORD *)(v251 + 64) = v328;
  *(_BYTE *)(v251 + 72) = (_BYTE)v327;
  v254 = v335;
  *(_QWORD *)(v251 + 80) = v333;
  *(_QWORD *)(v251 + 88) = v254;
  v255 = v331;
  *(_QWORD *)(v251 + 96) = v334;
  *(_QWORD *)(v251 + 104) = v255;
  *(_QWORD *)(v251 + 112) = v332;
  *(_BYTE *)(v251 + 120) = (_BYTE)v330;
  outlined copy of NodePersonality(v241);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ShaderGraphNode?(v333, v335);
  v256 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v257 = v256;
  v259 = v256[2];
  v258 = v256[3];
  v323 = (char *)(v259 + 1);
  if (v259 >= v258 >> 1)
    goto LABEL_190;
LABEL_151:
  v257[2] = v323;
  v260 = &v257[6 * v259];
  v261 = v337;
  v260[4] = v241;
  v260[5] = v261;
  v262 = v329;
  v260[6] = v242;
  v260[7] = v262;
  v260[8] = v328;
  *((_BYTE *)v260 + 72) = (_BYTE)v327;
  if (v335)
  {
    outlined copy of NodePersonality(v333);
    v259 = v257[2];
    v263 = v257[3];
    v329 = v259 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v259 >= v263 >> 1)
      v257 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v263 > 1), v329, 1, v257);
    v264 = (_DWORD)v330 != 0;
    v257[2] = v329;
    v265 = &v257[6 * v259];
    v266 = v335;
    v265[4] = v333;
    v265[5] = v266;
    v267 = v331;
    v265[6] = v334;
    v265[7] = v267;
    v265[8] = v332;
    *((_BYTE *)v265 + 72) = v264;
  }
  swift_release();
  Graph.removeUnconnectedNodesAndEdges(roots:)((Swift::OpaquePointer)v257);
  swift_bridgeObjectRelease();
  v268 = v350;
  Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)((uint64_t)&v418, (uint64_t)v348, v424, (uint64_t)v349, 0);
  v350 = v268;
  if (v268)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v339, v343);
    outlined consume of NodePersonality(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ShaderGraphNode?(v333, v335);
    outlined consume of NodePersonality(v241);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v237);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)&v362[64] = v374[0];
    *(_OWORD *)&v362[80] = v374[1];
    *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
    *(_OWORD *)v362 = v373[0];
    *(_OWORD *)&v362[16] = v373[1];
    *(_OWORD *)&v362[32] = v373[2];
    *(_OWORD *)&v362[48] = v373[3];
    v361[0] = v371[0];
    v361[1] = v371[1];
    v361[2] = v371[2];
    v361[3] = v372;
    outlined release of Graph((uint64_t)v361);
    v221 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v222 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {

      v351 = v303;
      goto LABEL_98;
    }
    swift_retain();
    v269 = v304;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t))(v341 + 88))(v269, v342) == *MEMORY[0x24BEE7810])
    {
      v224 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v341 + 8))(v304, v342);
      v224 = "";
    }
    v228 = (unint64_t)v351;
    v229 = v303;
    goto LABEL_97;
  }
  if (v343)
  {
    v416[0] = v339;
    v259 = v343;
    v416[1] = v343;
    v416[2] = v340;
    v416[3] = v296;
    v416[4] = v297;
    v417 = v336 & 1;
    outlined copy of NodePersonality(v339);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v270 = v350;
    Graph.resolveMaterialXNodeDefs(connectedTo:nodeDefStore:shaderType:)((uint64_t)v416, (uint64_t)v348, v424, (uint64_t)v349, 1);
    v350 = v270;
    if (v270)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v271 = v339;
      outlined consume of NodePersonality(v339);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v272 = v343;
      swift_bridgeObjectRelease();
      outlined consume of ShaderGraphNode?(v271, v272);
      outlined consume of NodePersonality(v237);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ShaderGraphNode?(v333, v335);
      outlined consume of NodePersonality(v241);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v237);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_OWORD *)&v362[64] = v374[0];
      *(_OWORD *)&v362[80] = v374[1];
      *(_OWORD *)&v362[89] = *(_OWORD *)((char *)&v374[1] + 9);
      *(_OWORD *)v362 = v373[0];
      *(_OWORD *)&v362[16] = v373[1];
      *(_OWORD *)&v362[32] = v373[2];
      *(_OWORD *)&v362[48] = v373[3];
      v361[0] = v371[0];
      v361[1] = v371[1];
      v361[2] = v371[2];
      v361[3] = v372;
LABEL_188:
      outlined release of Graph((uint64_t)v361);
      $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)();
      swift_release();
      swift_release();
      outlined release of Graph((uint64_t)v356);
      v148 = 1;
      goto LABEL_80;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v339);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v349 = *(_QWORD **)&v373[0];
  v424 = specialized Array._getCount()(*(_QWORD *)&v373[0]);
  if (v424 < 0)
  {
    __break(1u);
LABEL_192:
    __break(1u);
    JUMPOUT(0x245E6A59CLL);
  }
  if (v349[2] < (unint64_t)v424)
    goto LABEL_192;
  if (!v424)
    goto LABEL_182;
  v355 = v349 + 4;
  swift_bridgeObjectRetain_n();
  v273 = 0;
  do
  {
    v274 = &v355[6 * v273];
    v258 = v274[3];
    if (v258 == -7)
    {
      if (__OFADD__(v273++, 1))
      {
        __break(1u);
LABEL_190:
        v257 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v258 > 1), (int64_t)v323, 1, v257);
        goto LABEL_151;
      }
    }
    else
    {
      v276 = *v274;
      v277 = (void (*)(_QWORD, _QWORD, _QWORD))v274[1];
      v257 = (_QWORD *)v274[2];
      v278 = *((_BYTE *)v274 + 40);
      v279 = v274[4];
      *(_QWORD *)v360 = v276;
      *(_QWORD *)&v360[8] = v277;
      *(_QWORD *)&v360[16] = v257;
      *(_QWORD *)&v360[24] = v258;
      *(_QWORD *)&v360[32] = v279;
      v360[40] = v278;
      v351 = (char *)v276;
      outlined copy of NodePersonality(v276);
      v353 = (uint64_t)v277;
      swift_bridgeObjectRetain();
      v259 = (unint64_t)v257;
      swift_bridgeObjectRetain();
      v280 = v350;
      closure #2 in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)((uint64_t *)v360);
      v350 = v280;
      if (v280)
      {
        outlined consume of NodePersonality((unint64_t)v351);
        v285 = v349;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v241);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v237);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ShaderGraphNode?(v333, v335);
        outlined consume of ShaderGraphNode?(v339, v343);
        outlined consume of NodePersonality(v237);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_OWORD *)((char *)v361 + 8) = *(_OWORD *)((char *)v371 + 8);
        *(_OWORD *)((char *)&v361[1] + 8) = *(_OWORD *)((char *)&v371[1] + 8);
        *(_QWORD *)&v361[0] = *(_QWORD *)&v371[0];
        *((_QWORD *)&v361[2] + 1) = *((_QWORD *)&v371[2] + 1);
        v361[3] = v372;
        *(_QWORD *)v362 = v285;
        *(_OWORD *)&v362[8] = *(_OWORD *)((char *)v373 + 8);
        *(_OWORD *)&v362[24] = *(_OWORD *)((char *)&v373[1] + 8);
        *(_OWORD *)&v362[40] = *(_OWORD *)((char *)&v373[2] + 8);
        v362[56] = BYTE8(v373[3]);
        *(_QWORD *)&v362[64] = *(_QWORD *)&v374[0];
        *(_OWORD *)&v362[72] = *(_OWORD *)((char *)v374 + 8);
        *(_OWORD *)&v362[88] = *(_OWORD *)((char *)&v374[1] + 8);
        v362[104] = BYTE8(v374[2]);
        goto LABEL_188;
      }
      ++v273;
      outlined consume of NodePersonality((unint64_t)v351);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (v273 >= v424)
      goto LABEL_181;
  }
  while ((v273 & 0x8000000000000000) == 0 && v273 < v424);
  __break(1u);
LABEL_181:
  swift_bridgeObjectRelease_n();
LABEL_182:
  *(_OWORD *)((char *)v367 + 8) = *(_OWORD *)((char *)v371 + 8);
  *(_OWORD *)((char *)&v367[1] + 8) = *(_OWORD *)((char *)&v371[1] + 8);
  *(_QWORD *)&v367[0] = *(_QWORD *)&v371[0];
  *((_QWORD *)&v367[2] + 1) = *((_QWORD *)&v371[2] + 1);
  v368 = v372;
  *(_QWORD *)&v369[0] = v349;
  *(_OWORD *)((char *)v369 + 8) = *(_OWORD *)((char *)v373 + 8);
  *(_OWORD *)((char *)&v369[1] + 8) = *(_OWORD *)((char *)&v373[1] + 8);
  *(_OWORD *)((char *)&v369[2] + 8) = *(_OWORD *)((char *)&v373[2] + 8);
  BYTE8(v369[3]) = BYTE8(v373[3]);
  *(_QWORD *)&v370[0] = *(_QWORD *)&v374[0];
  *(_OWORD *)((char *)v370 + 8) = *(_OWORD *)((char *)v374 + 8);
  *(_OWORD *)((char *)&v370[1] + 8) = *(_OWORD *)((char *)&v374[1] + 8);
  BYTE8(v370[2]) = BYTE8(v374[2]);
  v407 = v367[1];
  v408 = v367[2];
  v406 = v367[0];
  v413 = v369[3];
  v414 = v370[0];
  v415[0] = v370[1];
  *(_OWORD *)((char *)v415 + 9) = *(_OWORD *)((char *)&v370[1] + 9);
  v411 = v369[1];
  v412 = v369[2];
  v409 = v372;
  v410 = v369[0];
  *(_OWORD *)((char *)&v376[7] + 7) = v369[3];
  *(_OWORD *)((char *)&v376[8] + 7) = v370[0];
  *(_OWORD *)((char *)&v376[9] + 7) = v370[1];
  v376[10] = *(_OWORD *)((char *)&v370[1] + 9);
  *(_OWORD *)((char *)&v376[3] + 7) = v372;
  *(_OWORD *)((char *)&v376[4] + 7) = v369[0];
  *(_OWORD *)((char *)&v376[5] + 7) = v369[1];
  *(_OWORD *)((char *)&v376[6] + 7) = v369[2];
  *(_OWORD *)((char *)v376 + 7) = v367[0];
  *(_OWORD *)((char *)&v376[1] + 7) = v367[1];
  *(_OWORD *)((char *)&v376[2] + 7) = v367[2];
  v378 = v418;
  v379[0] = v419[0];
  *(_OWORD *)((char *)v379 + 9) = *(_OWORD *)((char *)v419 + 9);
  v424 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    v281 = v424;
    Hasher.init(_seed:)();
    outlined retain of Graph((uint64_t)v367);
    outlined copy of NodePersonality(v237);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)v367);
    outlined copy of ShaderGraphNode?(v339, v343);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v282 = Hasher._finalize()();
    v283 = -1 << *(_BYTE *)(v281 + 32);
    v284 = v282 & ~v283;
    v355 = (_QWORD *)(v281 + 56);
    if (((*(_QWORD *)(v281 + 56 + ((v284 >> 3) & 0xFFFFFFFFFFFFF8)) >> v284) & 1) != 0)
    {
      v353 = ~v283;
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of Graph((uint64_t)v367);
    outlined copy of NodePersonality(v237);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of Graph((uint64_t)v367);
    outlined copy of ShaderGraphNode?(v339, v343);
  }
  outlined consume of ShaderGraphNode?(v333, v335);
  outlined consume of NodePersonality(v241);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v237);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of Graph((uint64_t)v367);
  v286 = v357;
  $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)();
  swift_release();
  outlined release of Graph((uint64_t)v356);
  (*(void (**)(char *, uint64_t))(v344 + 8))(v286, v345);
  *(_QWORD *)v360 = v338;
  *(_QWORD *)&v360[8] = v359;
  *(_OWORD *)&v360[16] = v237;
  *(_QWORD *)&v360[32] = v238;
  *(_QWORD *)&v360[40] = v326;
  *(_QWORD *)&v360[48] = v325;
  v360[56] = (_BYTE)v324;
  *(_QWORD *)&v360[64] = v339;
  v287 = v343;
  *(_QWORD *)&v360[72] = v343;
  *(_QWORD *)&v360[80] = v340;
  v288 = v297;
  *(_QWORD *)&v360[88] = v296;
  *(_QWORD *)&v360[96] = v297;
  v360[104] = (_BYTE)v336;
  *(_OWORD *)&v360[265] = *(_OWORD *)((char *)&v370[1] + 9);
  *(_OWORD *)&v360[240] = v370[0];
  *(_OWORD *)&v360[256] = v370[1];
  *(_OWORD *)&v360[176] = v369[0];
  *(_OWORD *)&v360[192] = v369[1];
  *(_OWORD *)&v360[224] = v369[3];
  *(_OWORD *)&v360[208] = v369[2];
  *(_OWORD *)&v360[112] = v367[0];
  *(_OWORD *)&v360[128] = v367[1];
  *(_OWORD *)&v360[160] = v368;
  *(_OWORD *)&v360[144] = v367[2];
  *(_QWORD *)&v360[288] = v358;
  v289 = v354;
  *(_QWORD *)&v360[296] = v354;
  v290 = v346;
  *(_QWORD *)&v360[304] = v346;
  outlined retain of RESurfaceShaderMaterial(v360);
  swift_bridgeObjectRelease();
  v291 = v290;
  swift_release();
  outlined release of Graph((uint64_t)v367);
  v292 = v287;
  v293 = v296;
  LOBYTE(v287) = (_BYTE)v336;
  outlined consume of ShaderGraphNode?(v339, v292);
  outlined consume of NodePersonality(v237);
  swift_bridgeObjectRelease();
  v294 = v359;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)&v362[201] = v376[10];
  v361[1] = v378;
  v361[2] = v379[0];
  *(_OWORD *)((char *)&v361[2] + 9) = *(_OWORD *)((char *)v379 + 9);
  *(_OWORD *)&v362[153] = v376[7];
  *(_OWORD *)&v362[169] = v376[8];
  *(_OWORD *)&v362[185] = v376[9];
  *(_OWORD *)&v362[89] = v376[3];
  *(_OWORD *)&v362[105] = v376[4];
  *(_OWORD *)&v362[121] = v376[5];
  *(_OWORD *)&v362[137] = v376[6];
  *(_OWORD *)&v362[41] = v376[0];
  *(_OWORD *)&v362[57] = v376[1];
  *(_QWORD *)&v361[0] = v338;
  *((_QWORD *)&v361[0] + 1) = v294;
  *(_DWORD *)((char *)&v361[3] + 9) = *(_DWORD *)v377;
  HIDWORD(v361[3]) = *(_DWORD *)&v377[3];
  *(_QWORD *)v362 = v339;
  *(_QWORD *)&v362[8] = v343;
  *(_QWORD *)&v362[16] = v340;
  *(_QWORD *)&v362[24] = v293;
  *(_QWORD *)&v362[32] = v288;
  v362[40] = v287;
  *(_OWORD *)&v362[73] = v376[2];
  *(_DWORD *)v363 = *(_DWORD *)v375;
  *(_DWORD *)&v363[3] = *(_DWORD *)&v375[3];
  v364 = v358;
  v365 = v289;
  v366 = v291;
  outlined release of RESurfaceShaderMaterial(v361);
  return memcpy(v305, v360, 0x138uLL);
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi35_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi38_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 4;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x4C00000000000000;
  return result;
}

uint64_t outlined retain of NodeDef(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi19_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x5000000000000000;
  return result;
}

uint64_t sub_245E6A7E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245E6A80C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi6_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x1C00000000000000;
  return result;
}

uint64_t outlined release of String(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  _OWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v5 = (_OWORD *)(swift_bridgeObjectRetain() + 56);
    while (1)
    {
      v13 = *((_QWORD *)v5 - 3);
      v12 = *((_QWORD *)v5 - 2);
      v29 = *((_QWORD *)v5 - 1);
      v30 = v3;
      v31 = *v5;
      v14 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      v17 = v14[2];
      v18 = (v15 & 1) == 0;
      v19 = v17 + v18;
      if (__OFADD__(v17, v18))
        break;
      v20 = v15;
      if (v14[3] >= v19)
      {
        if ((a2 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a2 & 1);
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
        if ((v20 & 1) != (v22 & 1))
          goto LABEL_18;
        v16 = v21;
      }
      v23 = (_QWORD *)*a3;
      if ((v20 & 1) != 0)
      {
        v6 = 24 * v16;
        v7 = (uint64_t *)(v23[7] + 24 * v16);
        v9 = *v7;
        v8 = v7[1];
        v10 = v7[2];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v11 = (_QWORD *)(v23[7] + v6);
        swift_release();
        swift_bridgeObjectRelease();
        *v11 = v9;
        v11[1] = v8;
        v11[2] = v10;
      }
      else
      {
        v23[(v16 >> 6) + 8] |= 1 << v16;
        v24 = (uint64_t *)(v23[6] + 16 * v16);
        *v24 = v13;
        v24[1] = v12;
        v25 = v23[7] + 24 * v16;
        *(_QWORD *)v25 = v29;
        *(_OWORD *)(v25 + 8) = v31;
        v26 = v23[2];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_17;
        v23[2] = v28;
      }
      v5 = (_OWORD *)((char *)v5 + 40);
      a2 = 1;
      v3 = v30 - 1;
      if (v30 == 1)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = v6[4];
    v7 = v6[5];
    v9 = v6[7];
    v54 = v6[6];
    v55 = v6;
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v16 = v11;
    if (v10[3] < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_27:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v12 = v17;
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v20 = (uint64_t *)(v19[7] + 16 * v12);
      v21 = a3;
      v23 = *v20;
      v22 = v20[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = (_QWORD *)(v19[7] + 16 * v12);
      swift_bridgeObjectRelease();
      *v24 = v23;
      v24[1] = v22;
      a3 = v21;
      v25 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease();
LABEL_16:
      v31 = v55 + 11;
      v56 = a3;
      while (1)
      {
        v37 = *(v31 - 3);
        v36 = *(v31 - 2);
        v38 = *(v31 - 1);
        v39 = *v31;
        v40 = *a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v36);
        v43 = *(_QWORD *)(v40 + 16);
        v44 = (v42 & 1) == 0;
        v29 = __OFADD__(v43, v44);
        v45 = v43 + v44;
        if (v29)
          goto LABEL_25;
        v46 = v42;
        if (*(_QWORD *)(v40 + 24) < v45)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, 1);
          v41 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v36);
          if ((v46 & 1) != (v47 & 1))
            goto LABEL_27;
        }
        v48 = (_QWORD *)*a3;
        v49 = 16 * v41;
        if ((v46 & 1) != 0)
        {
          v32 = (uint64_t *)(v48[7] + v49);
          v34 = *v32;
          v33 = v32[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v35 = (_QWORD *)(v48[7] + v49);
          swift_bridgeObjectRelease();
          *v35 = v34;
          v35[1] = v33;
          a3 = v56;
        }
        else
        {
          v48[(v41 >> 6) + 8] |= 1 << v41;
          v50 = (uint64_t *)(v48[6] + v49);
          *v50 = v37;
          v50[1] = v36;
          v51 = (_QWORD *)(v48[7] + v49);
          *v51 = v38;
          v51[1] = v39;
          v52 = v48[2];
          v29 = __OFADD__(v52, 1);
          v53 = v52 + 1;
          a3 = v56;
          if (v29)
            goto LABEL_26;
          v48[2] = v53;
        }
        v31 += 4;
        if (!--v25)
          return swift_bridgeObjectRelease();
      }
    }
    if ((a2 & 1) != 0)
    {
      v19 = (_QWORD *)*a3;
      if ((v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v26 = (uint64_t *)(v19[6] + 16 * v12);
    *v26 = v8;
    v26[1] = v7;
    v27 = (_QWORD *)(v19[7] + 16 * v12);
    *v27 = v54;
    v27[1] = v9;
    v28 = v19[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v19[2] = v30;
    v25 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t specialized Dictionary<>.init(_:)(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (_BYTE *)(a1 + 72);
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((*v3 & 1) == 0)
      {
        v6 = *((_QWORD *)v3 - 5);
        v7 = *((_QWORD *)v3 - 4);
        v8 = *((_QWORD *)v3 - 3);
        v9 = *((_QWORD *)v3 - 2);
        v10 = *((_QWORD *)v3 - 1);
        swift_bridgeObjectRetain();
        swift_retain();
        outlined copy of TextureSource();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        v12 = v4[2];
        v11 = v4[3];
        if (v12 >= v11 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
        v4[2] = v12 + 1;
        v5 = &v4[5 * v12];
        v5[4] = v9;
        v5[5] = v10;
        v5[6] = v6;
        v5[7] = v7;
        v5[8] = v8;
      }
      v3 += 48;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v13 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v4);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v13 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (uniformPropertyName: String, type: MetalDataType)>);
    v14 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v14 = MEMORY[0x24BEE4B00];
  }
  v16 = v14;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v13, 1, &v16);
  swift_bridgeObjectRelease();
  return v16;
}

unint64_t outlined consume of ShaderGraphNode?(unint64_t result, uint64_t a2)
{
  if (a2)
  {
    outlined consume of NodePersonality(result);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RESurfaceShaderMaterial(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for RESurfaceShaderMaterial(unint64_t *a1)
{
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(a1[2]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[9])
  {
    outlined consume of NodePersonality(a1[8]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(a1[24]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(a1[30]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 64);
    outlined copy of NodePersonality(v11);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v10;
    v12 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v12;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
  }
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v15;
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  v17 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v17;
  v18 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v18;
  v19 = *(_QWORD *)(a2 + 192);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v19);
  v20 = *(_QWORD *)(a2 + 200);
  v21 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 192) = v19;
  *(_QWORD *)(a1 + 200) = v20;
  v22 = *(_QWORD *)(a2 + 216);
  v23 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 208) = v21;
  *(_QWORD *)(a1 + 216) = v22;
  *(_QWORD *)(a1 + 224) = v23;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v24 = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v24);
  v25 = *(_QWORD *)(a2 + 248);
  v26 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 240) = v24;
  *(_QWORD *)(a1 + 248) = v25;
  v27 = *(_QWORD *)(a2 + 264);
  v28 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 256) = v26;
  *(_QWORD *)(a1 + 264) = v27;
  *(_QWORD *)(a1 + 272) = v28;
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  v29 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v29;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  outlined copy of NodePersonality(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  outlined consume of NodePersonality(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = (_OWORD *)(a1 + 64);
  v8 = (_OWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 64);
      outlined copy of NodePersonality(v10);
      v11 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v10;
      outlined consume of NodePersonality(v11);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v12 = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v12;
    }
    else
    {
      outlined destroy of ShaderGraphNode((unint64_t *)(a1 + 64));
      v15 = *(_OWORD *)(a2 + 89);
      v16 = *(_OWORD *)(a2 + 80);
      *v7 = *v8;
      *(_OWORD *)(a1 + 80) = v16;
      *(_OWORD *)(a1 + 89) = v15;
    }
  }
  else if (v9)
  {
    v13 = *(_QWORD *)(a2 + 64);
    outlined copy of NodePersonality(v13);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v14 = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *v8;
    v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    *v7 = v17;
    *(_OWORD *)(a1 + 80) = v18;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v19 = *(_QWORD *)(a2 + 192);
  outlined copy of NodePersonality(v19);
  v20 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v19;
  outlined consume of NodePersonality(v20);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v21 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v21;
  v22 = *(_QWORD *)(a2 + 240);
  outlined copy of NodePersonality(v22);
  v23 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v22;
  outlined consume of NodePersonality(v23);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v24 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v24;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *outlined destroy of ShaderGraphNode(unint64_t *a1)
{
  destroy for ShaderGraphNode(a1);
  return a1;
}

void *__swift_memcpy312_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

uint64_t assignWithTake for RESurfaceShaderMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  outlined consume of NodePersonality(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 72))
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 72);
  if (!v7)
  {
    outlined destroy of ShaderGraphNode((unint64_t *)(a1 + 64));
LABEL_5:
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  outlined consume of NodePersonality(v8);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
LABEL_6:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_release();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  outlined consume of NodePersonality(v13);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v14;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v15 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  outlined consume of NodePersonality(v15);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v16;
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RESurfaceShaderMaterial(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 312))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RESurfaceShaderMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 312) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 312) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RESurfaceShaderMaterial()
{
  return &type metadata for RESurfaceShaderMaterial;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, String>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of (Key, ShaderGraphNode)(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 80);
  outlined copy of SGDataTypeStorage(*(id *)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_retain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of GeomPropDef.GeomProp(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined retain of (String, NodeDef)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t *outlined release of UserGraphError(unint64_t *a1)
{
  outlined consume of UserGraphError.ErrorType(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of UserGraphError.ErrorType(unint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  uint64_t result;

  result = a16;
  switch(a22 >> 58)
  {
    case 0uLL:
    case 1uLL:
    case 4uLL:
    case 5uLL:
    case 0xCuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x13uLL:
    case 0x15uLL:
    case 0x1AuLL:
      goto LABEL_13;
    case 2uLL:
    case 3uLL:
    case 0x21uLL:
    case 0x22uLL:
      outlined consume of NodePersonality(a1);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_10;
    case 6uLL:
    case 7uLL:
    case 0xAuLL:
      outlined consume of NodePersonality(a1);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 8uLL:
    case 0xBuLL:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of NodePersonality(a11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(a17);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 9uLL:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 0xDuLL:
    case 0xEuLL:
      goto LABEL_10;
    case 0x11uLL:
      outlined consume of ShaderGraphNode?(a1, a2);
      goto LABEL_13;
    case 0x12uLL:
    case 0x17uLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
      outlined consume of NodePersonality(a1);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 0x14uLL:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(a15, a16);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 0x16uLL:
      outlined consume of GeomPropDef.GeomProp(a1, a2, a3 & 1);
      goto LABEL_15;
    case 0x18uLL:
    case 0x19uLL:
      return outlined consume of Input?(a1, a2);
    case 0x1BuLL:
    case 0x1CuLL:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(a8);
      swift_bridgeObjectRelease();
LABEL_13:
      result = swift_bridgeObjectRelease();
      break;
    case 0x1DuLL:
LABEL_15:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of MaterialXAvailability(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined consume of GeomPropDef.GeomProp(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined consume of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of Edge(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of Edge(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined copy of TextureSource()
{
  return swift_bridgeObjectRetain();
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi34_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi2_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0xC00000000000000;
  return result;
}

uint64_t *outlined release of Output??(uint64_t *a1)
{
  outlined consume of Output??(*a1, a1[1]);
  return a1;
}

uint64_t outlined consume of Output??(uint64_t result, uint64_t a2)
{
  if (a2 != 1)
    return outlined consume of Input?(result, a2);
  return result;
}

uint64_t outlined copy of Output?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t outlined copy of ShaderGraphNode?(unint64_t result, uint64_t a2)
{
  if (a2)
  {
    outlined copy of NodePersonality(result);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of ShaderGraphNode?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

_QWORD *outlined retain of RESurfaceShaderMaterial(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;

  v2 = a1[2];
  v3 = a1[8];
  v4 = a1[9];
  v6 = a1[24];
  v7 = a1[30];
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ShaderGraphNode?(v3, v4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *outlined release of RESurfaceShaderMaterial(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;

  v2 = a1[2];
  v3 = a1[8];
  v4 = a1[9];
  v6 = a1[24];
  v7 = a1[30];
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ShaderGraphNode?(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NodePersonality(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t TextureSource.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Hasher._combine(_:)(a4 & 1);
  return String.hash(into:)();
}

uint64_t static TextureSource.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return specialized static TextureSource.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

Swift::Int TextureSource.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextureSource()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TextureSource()
{
  uint64_t v0;

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureSource()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextureSource(uint64_t a1, uint64_t a2)
{
  return specialized static TextureSource.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t TypedTexture.source.getter(uint64_t a1)
{
  outlined copy of TextureSource();
  return a1;
}

uint64_t TypedTexture.type.getter()
{
  return swift_retain();
}

uint64_t TypedTexture.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  void (*v7)(uint64_t);

  Hasher._combine(_:)(a4 & 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  v7 = *(void (**)(uint64_t))(*(_QWORD *)a5 + 120);
  swift_retain();
  v7(a1);
  return swift_release();
}

uint64_t static TypedTexture.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return specialized static TypedTexture.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6, a7 & 1, a8);
}

Swift::Int TypedTexture.hashValue.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void (*v6)(_BYTE *);
  _BYTE v8[72];

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a3 & 1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  v6 = *(void (**)(_BYTE *))(*(_QWORD *)a4 + 120);
  swift_retain();
  v6(v8);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TypedTexture()
{
  uint64_t v0;

  return TypedTexture.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TypedTexture(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void (*v4)(uint64_t);

  v3 = *(_QWORD *)(v1 + 24);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)v3 + 120);
  swift_retain();
  v4(a1);
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TypedTexture()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  void (*v3)(_BYTE *);
  _BYTE v5[72];

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of TextureSource();
  v3 = *(void (**)(_BYTE *))(*(_QWORD *)v2 + 120);
  swift_retain();
  v3(v5);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TypedTexture(uint64_t a1, uint64_t a2)
{
  return specialized static TypedTexture.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t TextureAssignment.uniformName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextureAssignment.metalType.getter()
{
  return swift_retain();
}

uint64_t TextureAssignment.source.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of TextureSource();
  return v1;
}

uint64_t TextureAssignment.init(uniformName:metalType:source:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_BYTE *)(a7 + 40) = a6 & 1;
  return result;
}

uint64_t NodeDef.metalTextureType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  char v5;
  BOOL v7;
  char v8;
  BOOL v9;
  BOOL v10;
  char v11;
  BOOL v13;
  char v14;
  BOOL v15;
  BOOL v16;
  char v17;
  BOOL v18;
  BOOL v19;
  char v20;
  BOOL v21;
  BOOL v22;
  char v23;
  BOOL v25;
  char v26;
  BOOL v27;
  BOOL v28;
  char v29;
  BOOL v30;
  BOOL v31;
  char v32;
  BOOL v33;
  BOOL v34;
  char v35;
  BOOL v36;
  BOOL v37;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = v1 == 0x7865545655647355 && v2 == 0xEC00000065727574;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 2;
  if (v1 == 0xD000000000000014 && v2 == 0x8000000245FC84D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 5;
  }
  if (v1 == 0x6567616D69 && v2 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0x616D6964656C6974 && v2 == 0xEA00000000006567
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000013 && v2 == 0x8000000245FC84F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000010 && v2 == 0x8000000245FC8510
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (v1 == 0xD000000000000015 && v2 == 0x8000000245FC8530
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000018 && v2 == 0x8000000245FC8550
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD00000000000001DLL && v2 == 0x8000000245FC8570
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 5;
  }
  if (v1 == 0xD000000000000015 && v2 == 0x8000000245FC8590
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (v1 == 0xD00000000000001CLL && v2 == 0x8000000245FC85B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (v1 == 0xD000000000000017 && v2 == 0x8000000245FC85D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 7;
  }
  if (v1 == 0xD000000000000013 && v2 == 0x8000000245FC85F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD000000000000016 && v2 == 0x8000000245FC8610
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v1 == 0xD00000000000001BLL && v2 == 0x8000000245FC8630)
  {
    return 2;
  }
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v7 = v1 == 0xD000000000000018 && v2 == 0x8000000245FC8650;
  result = 2;
  if ((v5 & 1) == 0 && !v7)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v9 = v1 == 0xD00000000000001BLL && v2 == 0x8000000245FC8670;
    v10 = v9;
    result = 2;
    if ((v8 & 1) == 0 && !v10)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v1 == 0xD000000000000020 && v2 == 0x8000000245FC8690
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        return 2;
      }
      if (v1 == 0xD000000000000018 && v2 == 0x8000000245FC86C0)
        return 3;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v13 = v1 == 0xD00000000000001BLL && v2 == 0x8000000245FC86E0;
      result = 3;
      if ((v11 & 1) != 0 || v13)
        return result;
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v15 = v1 == 0xD000000000000020 && v2 == 0x8000000245FC8700;
      v16 = v15;
      result = 3;
      if ((v14 & 1) != 0 || v16)
        return result;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v18 = v1 == 0xD00000000000001DLL && v2 == 0x8000000245FC8730;
      v19 = v18;
      result = 3;
      if ((v17 & 1) != 0 || v19)
        return result;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v21 = v1 == 0xD000000000000020 && v2 == 0x8000000245FC8750;
      v22 = v21;
      result = 3;
      if ((v20 & 1) != 0 || v22)
        return result;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v1 == 0xD000000000000025 && v2 == 0x8000000245FC8780
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        return 3;
      }
      if (v1 == 0xD000000000000013 && v2 == 0x8000000245FC87B0)
        return 7;
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v25 = v1 == 0xD000000000000016 && v2 == 0x8000000245FC87D0;
      result = 7;
      if ((v23 & 1) == 0 && !v25)
      {
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v27 = v1 == 0xD00000000000001BLL && v2 == 0x8000000245FC87F0;
        v28 = v27;
        result = 7;
        if ((v26 & 1) == 0 && !v28)
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v30 = v1 == 0xD000000000000018 && v2 == 0x8000000245FC8810;
          v31 = v30;
          result = 7;
          if ((v29 & 1) == 0 && !v31)
          {
            v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v33 = v1 == 0xD00000000000001BLL && v2 == 0x8000000245FC8830;
            v34 = v33;
            result = 7;
            if ((v32 & 1) == 0 && !v34)
            {
              v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v36 = v1 == 0xD000000000000020 && v2 == 0x8000000245FC8850;
              v37 = v36;
              result = 7;
              if ((v35 & 1) == 0 && !v37)
              {
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  return 7;
                if (v1 != 0xD00000000000001ELL || v2 != 0x8000000245FC8880)
                {
                  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    return 2;
                  else
                    return 0;
                }
                return 2;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t MTLTextureType.sgDebugName.getter(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0x443165707974;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      v3 = 0x443165707974;
      goto LABEL_6;
    case 2:
      result = 0x443265707974;
      break;
    case 3:
      v3 = 0x443265707974;
LABEL_6:
      result = v3 & 0xFFFFFFFFFFFFLL | 0x7241000000000000;
      break;
    case 4:
    case 9:
      result = 0xD000000000000011;
      break;
    case 5:
    case 6:
      result = 0x6562754365707974;
      break;
    case 7:
      result = 0x443365707974;
      break;
    case 8:
      result = 0xD000000000000016;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t metalDataTypeForTexture(type:elementType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  switch(a1)
  {
    case 0:
      if (one-time initialization token for logger != -1)
        swift_once();
      v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_85;
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v53 = v8;
      *(_DWORD *)v7 = 136315394;
      v9 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v11 = 0x443165707974;
      goto LABEL_82;
    case 1:
      if (one-time initialization token for logger != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_85;
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v53 = v8;
      *(_DWORD *)v7 = 136315394;
      v22 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v24 = 0x443165707974;
      goto LABEL_73;
    case 2:
      switch(a2)
      {
        case 3:
          if (one-time initialization token for texture2d_int != -1)
            goto LABEL_86;
          return swift_retain();
        case 7:
          if (one-time initialization token for texture2d_half != -1)
            goto LABEL_86;
          return swift_retain();
        case 9:
          if (one-time initialization token for texture2d_float != -1)
            goto LABEL_86;
          return swift_retain();
      }
      if (one-time initialization token for logger != -1)
        swift_once();
      v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = swift_slowAlloc();
        v8 = swift_slowAlloc();
        v53 = v8;
        *(_DWORD *)v7 = 136315394;
        v44 = SGDataType.stringValue.getter(a2);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v7 + 12) = 2080;
        v11 = 0x443265707974;
        goto LABEL_82;
      }
      goto LABEL_85;
    case 3:
      switch(a2)
      {
        case 3:
          if (one-time initialization token for texture2darray_int != -1)
            goto LABEL_86;
          return swift_retain();
        case 7:
          if (one-time initialization token for texture2darray_half != -1)
            goto LABEL_86;
          return swift_retain();
        case 9:
          if (one-time initialization token for texture2darray_float != -1)
            goto LABEL_86;
          return swift_retain();
      }
      if (one-time initialization token for logger != -1)
        swift_once();
      v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_85;
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v53 = v8;
      *(_DWORD *)v7 = 136315394;
      v47 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v24 = 0x443265707974;
LABEL_73:
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24 & 0xFFFFFFFFFFFFLL | 0x7241000000000000, 0xEB00000000796172, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      goto LABEL_83;
    case 4:
      if (one-time initialization token for logger != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_85;
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v53 = v8;
      *(_DWORD *)v7 = 136315394;
      v26 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v28 = "type2DMultisample";
      goto LABEL_49;
    case 5:
      if (a2 == 7)
      {
        if (one-time initialization token for texturecube_half != -1)
          goto LABEL_86;
        return swift_retain();
      }
      if (a2 == 9)
      {
        if (one-time initialization token for texturecube_float != -1)
          goto LABEL_86;
        return swift_retain();
      }
      if (one-time initialization token for logger != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = swift_slowAlloc();
        v8 = swift_slowAlloc();
        v53 = v8;
        *(_DWORD *)v7 = 136315394;
        v41 = SGDataType.stringValue.getter(a2);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v7 + 12) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6562754365707974, 0xE800000000000000, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        goto LABEL_83;
      }
      goto LABEL_85;
    case 6:
      if (one-time initialization token for logger != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_85;
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v53 = v8;
      *(_DWORD *)v7 = 136315394;
      v30 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6562754365707974, 0xED00007961727241, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      goto LABEL_83;
    case 7:
      switch(a2)
      {
        case 3:
          if (one-time initialization token for texture3d_int == -1)
            return swift_retain();
          goto LABEL_86;
        case 7:
          if (one-time initialization token for texture3d_half == -1)
            return swift_retain();
LABEL_86:
          swift_once();
          return swift_retain();
        case 9:
          if (one-time initialization token for texture3d_float == -1)
            return swift_retain();
          goto LABEL_86;
      }
      if (one-time initialization token for logger != -1)
        swift_once();
      v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = swift_slowAlloc();
        v8 = swift_slowAlloc();
        v53 = v8;
        *(_DWORD *)v7 = 136315394;
        v51 = SGDataType.stringValue.getter(a2);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v7 + 12) = 2080;
        v11 = 0x443365707974;
LABEL_82:
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, 0xE600000000000000, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
LABEL_83:
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_245E46000, v5, v6, "Unsupported element type %s for texture type %s", (uint8_t *)v7, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v8, -1, -1);
        v20 = v7;
LABEL_84:
        MEMORY[0x24954C33C](v20, -1, -1);
      }
LABEL_85:

      return 0;
    case 8:
      if (one-time initialization token for logger != -1)
        swift_once();
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_85;
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v53 = v8;
      *(_DWORD *)v7 = 136315394;
      v33 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v35 = 0xD000000000000016;
      v36 = 0x8000000245FC88C0;
      goto LABEL_50;
    case 9:
      if (one-time initialization token for logger != -1)
        swift_once();
      v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_85;
      v7 = swift_slowAlloc();
      v8 = swift_slowAlloc();
      v53 = v8;
      *(_DWORD *)v7 = 136315394;
      v38 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v28 = "typeTextureBuffer";
LABEL_49:
      v36 = (unint64_t)(v28 - 32) | 0x8000000000000000;
      v35 = 0xD000000000000011;
LABEL_50:
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      goto LABEL_83;
    default:
      if (one-time initialization token for logger != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v13 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v13))
        goto LABEL_85;
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      v53 = v15;
      *(_DWORD *)v14 = 136315394;
      v16 = SGDataType.stringValue.getter(a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      v18 = MTLTextureType.sgDebugName.getter(a1);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_245E46000, v5, v13, "Unsupported element type %s for texture type %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v15, -1, -1);
      v20 = v14;
      goto LABEL_84;
  }
}

uint64_t specialized static TypedTexture.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if ((a3 & 1) != 0)
  {
    if ((a7 & 1) == 0)
      return 0;
  }
  else if ((a7 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a5 && a2 == a6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 128))(a8) & 1;
  return 0;
}

uint64_t specialized static TextureSource.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t outlined consume of TextureSource()
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized SGNode.textureType(nodeDefStore:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45[3];
  uint64_t v46;
  _OWORD v47[9];

  v2 = v1;
  v3 = (uint64_t *)(v1 + OBJC_IVAR___SGNode_data);
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR___SGNode_data + 80) > 0x3Fu || !*(_QWORD *)(a1 + 16))
    return 0;
  v6 = *v3;
  v5 = v3[1];
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 144 * v7);
  v47[0] = *v9;
  v10 = v9[4];
  v12 = v9[1];
  v11 = v9[2];
  v47[3] = v9[3];
  v47[4] = v10;
  v47[1] = v12;
  v47[2] = v11;
  v13 = v9[7];
  v14 = v9[8];
  v15 = v9[6];
  v47[5] = v9[5];
  v47[7] = v13;
  v47[8] = v14;
  v47[6] = v15;
  outlined retain of NodeDef((uint64_t)v47);
  swift_bridgeObjectRelease();
  v16 = v47[0];
  if (v47[0] != __PAIR128__(0xEF65727574786554, 0x56556473555F444ELL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v19 = NodeDef.metalTextureType.getter();
    if ((v20 & 1) != 0)
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)logger);
      outlined retain of NodeDef((uint64_t)v47);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        v33 = swift_slowAlloc();
        v45[0] = v33;
        *(_DWORD *)v32 = 136315138;
        swift_bridgeObjectRetain();
        v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, *((unint64_t *)&v16 + 1), v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined release of NodeDef((uint64_t)v47);
        outlined release of NodeDef((uint64_t)v47);
        _os_log_impl(&dword_245E46000, v30, v31, "Unable to determine texture type for nodeDef %s", v32, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v33, -1, -1);
        MEMORY[0x24954C33C](v32, -1, -1);
      }
      else
      {
        outlined release of NodeDef((uint64_t)v47);
        outlined release of NodeDef((uint64_t)v47);
      }
LABEL_29:

      return 0;
    }
    v21 = v19;
    outlined release of NodeDef((uint64_t)v47);
    v22 = *(_QWORD *)(v2 + OBJC_IVAR___SGNode_outputs);
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_15;
    }
    else
    {
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v23)
      {
LABEL_15:
        if ((v22 & 0xC000000000000001) != 0)
        {
          v24 = (char *)MEMORY[0x24954B748](0, v22);
          goto LABEL_18;
        }
        if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v24 = (char *)*(id *)(v22 + 32);
LABEL_18:
          v25 = v24;
          swift_bridgeObjectRelease();
          v26 = (uint64_t *)&v25[OBJC_IVAR___SGOutput_type];
          swift_beginAccess();
          v27 = SGDataType.vectorElementType()(*v26);
          if ((v28 & 1) == 0)
          {
            v17 = metalDataTypeForTexture(type:elementType:)(v21, v27);

            return v17;
          }
          if (one-time initialization token for logger != -1)
            swift_once();
          v34 = type metadata accessor for Logger();
          __swift_project_value_buffer(v34, (uint64_t)logger);
          v35 = v25;
          v30 = Logger.logObject.getter();
          v36 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v30, v36))
          {

            return 0;
          }
          v37 = (uint8_t *)swift_slowAlloc();
          v38 = swift_slowAlloc();
          v46 = v38;
          *(_DWORD *)v37 = 136315138;
          v39 = SGDataType.stringValue.getter(*v26);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_245E46000, v30, v36, "Output type has no vector element type. %s", v37, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24954C33C](v38, -1, -1);
          MEMORY[0x24954C33C](v37, -1, -1);

          goto LABEL_29;
        }
        __break(1u);
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger == -1)
    {
LABEL_33:
      v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)logger);
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v44 = 0;
        _os_log_impl(&dword_245E46000, v42, v43, "Unable to find expected output on node.", v44, 2u);
        MEMORY[0x24954C33C](v44, -1, -1);
      }

      return 0;
    }
LABEL_38:
    swift_once();
    goto LABEL_33;
  }
  outlined release of NodeDef((uint64_t)v47);
  if (one-time initialization token for texture2d_half != -1)
    swift_once();
  v17 = static MetalDataType.texture2d_half;
  swift_retain();
  return v17;
}

unint64_t lazy protocol witness table accessor for type TextureSource and conformance TextureSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureSource and conformance TextureSource;
  if (!lazy protocol witness table cache variable for type TextureSource and conformance TextureSource)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for TextureSource, &type metadata for TextureSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureSource and conformance TextureSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TypedTexture and conformance TypedTexture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypedTexture and conformance TypedTexture;
  if (!lazy protocol witness table cache variable for type TypedTexture and conformance TypedTexture)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for TypedTexture, &type metadata for TypedTexture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedTexture and conformance TypedTexture);
  }
  return result;
}

uint64_t destroy for TextureSource()
{
  return outlined consume of TextureSource();
}

uint64_t initializeBufferWithCopyOfBuffer for TextureSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of TextureSource();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TextureSource(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of TextureSource();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of TextureSource();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TextureSource(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of TextureSource();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureSource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TextureSource(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for TextureSource(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TextureSource()
{
  return &type metadata for TextureSource;
}

uint64_t destroy for TypedTexture()
{
  outlined consume of TextureSource();
  return swift_release();
}

uint64_t initializeWithCopy for TypedTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of TextureSource();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TypedTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of TextureSource();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of TextureSource();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for TypedTexture(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of TextureSource();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TypedTexture(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TypedTexture(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TypedTexture()
{
  return &type metadata for TypedTexture;
}

uint64_t destroy for TextureAssignment()
{
  swift_bridgeObjectRelease();
  swift_release();
  return outlined consume of TextureSource();
}

uint64_t initializeWithCopy for TextureAssignment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of TextureSource();
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for TextureAssignment(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v2[2];
  swift_retain();
  swift_release();
  v4 = v2[3];
  v5 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  outlined copy of TextureSource();
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  outlined consume of TextureSource();
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TextureAssignment(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of TextureSource();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureAssignment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureAssignment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureAssignment()
{
  return &type metadata for TextureAssignment;
}

uint64_t outlined release of NodeDef(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MaterialXAvailability(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _HashTable.Bucket.offset.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HashTable.Bucket.offset.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

BOOL static _HashTable.Bucket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

ValueMetadata *type metadata accessor for _HashTable.Bucket()
{
  return &type metadata for _HashTable.Bucket;
}

void OrderedSet.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = ContiguousArray.count.getter();
  Hasher._combine(_:)(v6);
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(a4 - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    swift_retain();
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v9 += v10;
      --v7;
    }
    while (v7);
    swift_release();
  }
}

Swift::Int OrderedSet.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[72];

  Hasher.init(_seed:)();
  OrderedSet.hash(into:)((uint64_t)v7, v5, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OrderedSet<A>(uint64_t a1)
{
  uint64_t v1;

  return OrderedSet.hashValue.getter(a1, *(_QWORD *)(v1 + 8), *(_QWORD *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance OrderedSet<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  OrderedSet.hash(into:)(a1, a2, *(_QWORD *)(v2 + 8), *(_QWORD *)(a2 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrderedSet<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[72];

  Hasher.init(_seed:)();
  OrderedSet.hash(into:)((uint64_t)v6, v4, *(_QWORD *)(v2 + 8), *(_QWORD *)(a2 + 16));
  return Hasher._finalize()();
}

void base witness table accessor for Equatable in OrderedSet<A>()
{
  JUMPOUT(0x24954C264);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v33 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v33;
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v27 = v3 + 80;
  v28 = v1;
  v29 = v5;
  v30 = v3 + 64;
  v31 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v32 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v6);
    v17 = *v15;
    v16 = v15[1];
    type metadata accessor for XMLParserDelegate.StringNode();
    v18 = (_QWORD *)swift_allocObject();
    v18[3] = 0;
    swift_unknownObjectWeakInit();
    v18[4] = v13;
    v18[5] = v14;
    v18[6] = MEMORY[0x24BEE4AF8];
    v18[7] = v17;
    v18[8] = v16;
    v18[9] = 0;
    v20 = *(_QWORD *)(v33 + 16);
    v19 = *(_QWORD *)(v33 + 24);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v20 >= v19 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    *(_QWORD *)(v33 + 16) = v20 + 1;
    v21 = v33 + 16 * v20;
    *(_QWORD *)(v21 + 32) = v18;
    *(_QWORD *)(v21 + 40) = &protocol witness table for XMLParserDelegate.StringNode;
    v3 = v31;
    v9 = 1 << *(_BYTE *)(v31 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v30;
    v22 = *(_QWORD *)(v30 + 8 * v11);
    if ((v22 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v29;
    if (*(_DWORD *)(v31 + 36) != v29)
      goto LABEL_27;
    v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v28;
    }
    else
    {
      v24 = v11 + 1;
      v25 = (unint64_t)(v9 + 63) >> 6;
      v10 = v28;
      if (v11 + 1 < v25)
      {
        v26 = *(_QWORD *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_20:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            v26 = *(_QWORD *)(v27 + 8 * v11++);
            if (v26)
            {
              v24 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v32 + 1;
    v6 = v9;
    if (v32 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t XMLDocument.data.getter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t XMLDocument.shouldProcessIncludes.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

void *XMLDocument.Options.documentXInclude.unsafeMutableAddressor()
{
  return &static XMLDocument.Options.documentXInclude;
}

uint64_t XMLDocument.rootElement()(uint64_t a1, unint64_t a2, char a3)
{
  id v6;
  Class isa;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  char *v16;

  v6 = objc_allocWithZone(MEMORY[0x24BDD1978]);
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = (char *)objc_msgSend(v6, sel_initWithData_, isa);
  outlined consume of Data._Representation(a1, a2);

  v9 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for XMLParserDelegate()), sel_init);
  objc_msgSend(v8, sel_setDelegate_, v9);
  objc_msgSend(v8, sel_parse);
  v10 = &v9[OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement];
  swift_beginAccess();
  v11 = *(_QWORD *)v10;
  if (!*(_QWORD *)v10)
  {
    v16 = v8;
    v8 = v9;
LABEL_8:

    return v11;
  }
  if ((a3 & 1) == 0)
  {
    swift_unknownObjectRetain();
    goto LABEL_7;
  }
  ObjectType = swift_getObjectType();
  result = swift_conformsToProtocol2();
  if (result)
  {
    v14 = result;
    v15 = *(void (**)(uint64_t, uint64_t))(result + 24);
    swift_unknownObjectRetain_n();
    v15(ObjectType, v14);
    swift_unknownObjectRelease();
LABEL_7:
    v16 = v9;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

id XMLParserDelegate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t static XMLDocument.Options.documentXInclude.getter()
{
  return 0x10000;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance XMLDocument.Options@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance XMLDocument.Options(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance XMLDocument.Options@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance XMLDocument.Options@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance XMLDocument.Options@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance XMLDocument.Options(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance XMLDocument.Options@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance XMLDocument.Options@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance XMLDocument.Options(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance XMLDocument.Options(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance XMLDocument.Options(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance XMLDocument.Options@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance XMLDocument.Options(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance XMLDocument.Options(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance XMLDocument.Options(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance XMLDocument.Options()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance XMLDocument.Options()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance XMLDocument.Options(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t type metadata accessor for XMLParserDelegate()
{
  return objc_opt_self();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance XMLDocument.Options@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t XMLNodePrivate.detach()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;

  v3 = v2;
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 8))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(ObjectType, v8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = 0;
        v13 = (_QWORD *)(v10 + 32);
        while (1)
        {
          v14 = *v13 != v3;
          if (*v13 == v3)
            break;
          ++v12;
          v13 += 2;
          if (v11 == v12)
          {
            v12 = 0;
            break;
          }
        }
      }
      else
      {
        v12 = 0;
        v14 = 1;
      }
      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOytTg591_s11ShaderGraph14XMLNodePrivate33_E8B134E456AC27412A2E2468BC0E59F0LLPAAE6detachyyFySiXEfU0_0E5Graph0G0_pTf1cn_nTf4ng_n(v12, v14);
      swift_unknownObjectRelease();
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a2 + 16))(0, 0, a1, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall XMLNode.dump()()
{
  XMLNode.dump(indentLevel:)(0);
}

Swift::Void __swiftcall XMLNode.dump(indentLevel:)(Swift::Int indentLevel)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  Swift::String v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = v2;
  v5 = v1;
  v7 = MEMORY[0x24954B0C4](538976288, 0xE400000000000000, indentLevel);
  v9 = v8;
  swift_getObjectType();
  v10 = swift_conformsToProtocol2();
  if (v10)
    v11 = v10;
  else
    v11 = 0;
  if (!v10)
    v3 = 0;
  v78 = indentLevel;
  if (v3
    && (v12 = swift_getObjectType(), (v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 40))(v12)) != 0))
  {
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (v15)
    {
      v74 = v4;
      v76 = v7;
      v73 = v9;
      v80 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
      v16 = (uint64_t *)(v14 + 40);
      do
      {
        v17 = *v16;
        ObjectType = swift_getObjectType();
        v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);
        if (!v20)
          v19 = 0x3E6C696E3CLL;
        v21 = 0xE500000000000000;
        if (v20)
          v22 = v20;
        else
          v22 = 0xE500000000000000;
        v23 = v22;
        String.append(_:)(*(Swift::String *)&v19);
        swift_bridgeObjectRelease();
        v24._countAndFlagsBits = 61;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(ObjectType, v17);
        if (v26)
        {
          String.append(_:)(*(Swift::String *)&v25);
          v27._countAndFlagsBits = 34;
          v27._object = (void *)0xE100000000000000;
          String.append(_:)(v27);
          swift_bridgeObjectRelease();
          v28 = 34;
          v21 = 0xE100000000000000;
        }
        else
        {
          v28 = 0x3E6C696E3CLL;
        }
        v29 = v21;
        String.append(_:)(*(Swift::String *)&v28);
        swift_bridgeObjectRelease();
        v31 = *(_QWORD *)(v80 + 16);
        v30 = *(_QWORD *)(v80 + 24);
        if (v31 >= v30 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        *(_QWORD *)(v80 + 16) = v31 + 1;
        v32 = v80 + 16 * v31;
        *(_QWORD *)(v32 + 32) = 0;
        *(_QWORD *)(v32 + 40) = 0xE000000000000000;
        v16 += 2;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      v9 = v73;
      v4 = v74;
      v7 = v76;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v33 = BidirectionalCollection<>.joined(separator:)();
    v34 = v35;
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v5, v4);
  if (!v36)
    goto LABEL_44;
  v37 = v36;
  v79 = v5;
  v38 = *(_QWORD *)(v36 + 16);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    v5 = v79;
LABEL_44:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_245FBECD0;
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
    if (v64)
    {
      v65 = v64;
    }
    else
    {
      v63 = 0x3E6C696E3CLL;
      v65 = 0xE500000000000000;
    }
    v66 = v65;
    String.append(_:)(*(Swift::String *)&v63);
    swift_bridgeObjectRelease();
    v67._countAndFlagsBits = 32;
    v67._object = (void *)0xE100000000000000;
    String.append(_:)(v67);
    if (v34)
      v68 = v33;
    else
      v68 = 0;
    if (v34)
      v69 = v34;
    else
      v69 = 0xE000000000000000;
    v70 = v69;
    String.append(_:)(*(Swift::String *)&v68);
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 4075296;
    v71._object = (void *)0xE300000000000000;
    String.append(_:)(v71);
    swift_bridgeObjectRetain();
    v72._countAndFlagsBits = 60;
    v72._object = (void *)0xE100000000000000;
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62 = v7;
    v61 = v9;
    *(_QWORD *)(v54 + 56) = MEMORY[0x24BEE0D00];
    goto LABEL_54;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_245FBECD0;
  v40 = v4;
  v41 = *(uint64_t (**)(uint64_t))(v4 + 16);
  v75 = v40;
  v42 = v41(v79);
  if (v43)
  {
    v44 = v43;
  }
  else
  {
    v42 = 0x3E6C696E3CLL;
    v44 = 0xE500000000000000;
  }
  v45 = v44;
  String.append(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 32;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  if (v34)
    v47 = v33;
  else
    v47 = 0;
  if (v34)
    v48 = v34;
  else
    v48 = 0xE000000000000000;
  v49 = v48;
  String.append(_:)(*(Swift::String *)&v47);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 62;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v77 = v7;
  v81 = v7;
  swift_bridgeObjectRetain();
  v51._countAndFlagsBits = 60;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v39 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v39 + 32) = v81;
  *(_QWORD *)(v39 + 40) = v9;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  if (!__OFADD__(v78, 1))
  {
    swift_bridgeObjectRetain();
    v53 = v37 + 40;
    do
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      XMLNode.dump(indentLevel:)(v78 + 1);
      swift_unknownObjectRelease();
      v53 += 16;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease_n();
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = xmmword_245FBECD0;
    v55 = ((uint64_t (*)(uint64_t, uint64_t))v41)(v79, v75);
    if (v56)
    {
      v57 = v56;
    }
    else
    {
      v55 = 0x3E6C696E3CLL;
      v57 = 0xE500000000000000;
    }
    v58 = v57;
    String.append(_:)(*(Swift::String *)&v55);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 62;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    swift_bridgeObjectRetain();
    v60._countAndFlagsBits = 12092;
    v60._object = (void *)0xE200000000000000;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62 = v77;
    v61 = v9;
    *(_QWORD *)(v54 + 56) = v52;
LABEL_54:
    *(_QWORD *)(v54 + 32) = v62;
    *(_QWORD *)(v54 + 40) = v61;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t XMLElementPrivate.replaceIncludeStatements()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 24))();
  if (result)
  {
    v6 = *(_QWORD *)(result + 16);
    if (v6)
    {
      v7 = (__int128 *)(result + 32);
      do
      {
        v8 = *v7++;
        v9 = v8;
        swift_unknownObjectRetain();
        closure #1 in XMLElementPrivate.replaceIncludeStatements()((uint64_t *)&v9, v2, a1, a2);
        swift_unknownObjectRelease();
        --v6;
      }
      while (v6);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in XMLElementPrivate.replaceIncludeStatements()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;

  v6 = *a1;
  v7 = a1[1];
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v7 + 56))(ObjectType, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
  if (!v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + 24))(v6, v7, a3);
  if (v9 == 0x756C636E693A6978 && v10 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + 24))(v6, v7, a3);
  }
  v13 = createDoc(for:)(v6, v7);
  if (v15 != 2)
  {
    v16 = v13;
    v17 = v14;
    v18 = v15;
    v19 = XMLDocument.rootElement()(v13, v14, v15 & 1);
    v26 = v20;
    outlined consume of XMLDocument?(v16, v17, v18);
    if (v19)
    {
      v21 = *(_QWORD *)(v26 + 8);
      v22 = *(_QWORD *)(a4 + 8);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 24);
      v24 = swift_unknownObjectRetain();
      v23(v24, v21, a3, v22);
      return swift_unknownObjectRelease_n();
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + 24))(v6, v7, a3);
}

uint64_t createDoc(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v28[16];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v28[-v12];
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  if (!v16)
    goto LABEL_18;
  if (result != 0x756C636E693A6978 || v16 != 0xEA00000000006564)
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_6;
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_getObjectType();
  v18 = swift_conformsToProtocol2();
  if (v18)
    v19 = v18;
  else
    v19 = 0;
  if (!v18)
    a1 = 0;
  if (a1)
  {
    v20 = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v19 + 16))(1717924456, 0xE400000000000000, v20, v19))
    {
      v22 = v21;
      v23 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v23, v22);
      a1 = v24;
      swift_unknownObjectRelease();
      if (a1)
      {
        v25 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
        v26 = objc_msgSend(v25, sel_currentDirectoryPath);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        URL.init(fileURLWithPath:)();
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v6, v13, v7);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
        URL.init(fileURLWithPath:relativeTo:)();
        swift_bridgeObjectRelease();
        outlined destroy of URL?((uint64_t)v6);
        a1 = Data.init(contentsOf:options:)();
        v27 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
        v27(v11, v7);
        v27(v13, v7);
      }
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

uint64_t XMLParserDelegate.rootElement.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t XMLParserDelegate.rootElement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*XMLParserDelegate.rootElement.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

Swift::Void __swiftcall XMLParserDelegate.parser(_:didStartElement:namespaceURI:qualifiedName:attributes:)(NSXMLParser _, Swift::String didStartElement, Swift::String_optional namespaceURI, Swift::String_optional qualifiedName, Swift::OpaquePointer attributes)
{
  specialized XMLParserDelegate.parser(_:didStartElement:namespaceURI:qualifiedName:attributes:)(didStartElement._countAndFlagsBits, (uint64_t)didStartElement._object);
}

_QWORD *XMLParserDelegate.Element.__allocating_init(name:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_allocObject();
  v6[3] = 0;
  swift_unknownObjectWeakInit();
  v6[6] = 0;
  v6[7] = 0;
  v6[4] = a1;
  v6[5] = a2;
  if (a3)
  {
    v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  swift_beginAccess();
  v6[7] = v7;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t XMLParserDelegate.beginElement(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement;
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (result)
  {
    v7 = result;
    result = swift_unknownObjectRelease();
    if (v6)
    {
      if (v7 == v6)
        goto LABEL_6;
      __break(1u);
    }
  }
  else if (!v6)
  {
LABEL_6:
    *(_QWORD *)(v2 + v5) = a1;
    swift_release();
    return swift_retain();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall XMLParserDelegate.endElement()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (v2)
  {
    v3 = v0;
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112);
    v5 = swift_retain();
    v6 = v4(v5);
    swift_release();
    if (v6)
    {
      type metadata accessor for XMLParserDelegate.Element();
      v7 = swift_dynamicCastClass();
      if (v7)
      {
LABEL_6:
        *(_QWORD *)(v3 + v1) = v7;
        swift_release();
        return;
      }
      swift_unknownObjectRelease();
    }
    v7 = 0;
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t (*XMLParserDelegate.Element.parent.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x24954C3E4](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return XMLParserDelegate.Element.parent.modify;
}

uint64_t (*XMLParserDelegate.Element.children.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

void XMLParserDelegate.Element.stringValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t XMLParserDelegate.Element.attributes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t XMLParserDelegate.Element.attributes.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*XMLParserDelegate.Element.attributes.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

_QWORD *XMLParserDelegate.Element.init(name:attributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;

  v3[3] = 0;
  swift_unknownObjectWeakInit();
  v3[6] = 0;
  v3[7] = 0;
  v3[4] = a1;
  v3[5] = a2;
  if (a3)
  {
    v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  swift_beginAccess();
  v3[7] = v7;
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *XMLParserDelegate.StringNode.__allocating_init(name:stringValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)swift_allocObject();
  v8[3] = 0;
  swift_unknownObjectWeakInit();
  v9 = MEMORY[0x24BEE4AF8];
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = v9;
  v8[7] = a3;
  v8[8] = a4;
  v8[9] = 0;
  return v8;
}

uint64_t XMLParserDelegate.Element.attribute(forName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char v16;

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 168))();
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(v6 + 40); ; i += 2)
  {
    v9 = *(i - 1);
    v10 = *i;
    ObjectType = swift_getObjectType();
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
    swift_unknownObjectRetain();
    v13 = v12(ObjectType, v10);
    if (!v14)
      goto LABEL_4;
    if (v13 == a1 && v14 == a2)
      break;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_16;
LABEL_4:
    swift_unknownObjectRelease();
    if (!--v7)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t XMLParserDelegate.Element.addChild(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t, _UNKNOWN **);
  uint64_t v15;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  v8 = swift_unknownObjectRelease();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v8);
    if (v9)
      v7 = (_QWORD *)v9;
    else
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v10 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_6;
  }
  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
LABEL_6:
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[2 * v12];
  v13[4] = a1;
  v13[5] = a2;
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *))(*(_QWORD *)v3 + 144))(v10);
  type metadata accessor for XMLParserDelegate.Element();
  v14 = *(uint64_t (**)(uint64_t, _UNKNOWN **))(*(_QWORD *)swift_dynamicCastClassUnconditional() + 120);
  v15 = swift_unknownObjectRetain();
  return v14(v15, &protocol witness table for XMLParserDelegate.Element);
}

uint64_t XMLParserDelegate.Element.nodes(forXPath:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, _QWORD);
  uint64_t v32;
  uint64_t v33;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, _QWORD);
  uint64_t v43;
  uint64_t v44;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, _QWORD);
  uint64_t v54;
  uint64_t v55;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, _QWORD);
  uint64_t v70;
  uint64_t v71;
  char v73;
  unint64_t v74;
  unint64_t v75;
  Swift::String v76;
  Swift::String v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 136))();
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  v6 = v5;
  if (a1 == 0x656465646F6E2F2ELL && a2 == (void *)0xE900000000000066
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = (__int128 *)(v6 + 32);
      v9 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v78 = *v8;
        ObjectType = swift_getObjectType();
        v11 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v78 + 1) + 16);
        swift_unknownObjectRetain();
        v12 = v11(ObjectType, *((_QWORD *)&v78 + 1));
        if (v13)
        {
          if (v12 == 0x66656465646F6ELL && v13 == 0xE700000000000000)
          {
            swift_bridgeObjectRelease();
LABEL_17:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
            v17 = *(_QWORD *)(v9 + 16);
            v16 = *(_QWORD *)(v9 + 24);
            if (v17 >= v16 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
            *(_QWORD *)(v9 + 16) = v17 + 1;
            *(_OWORD *)(v9 + 16 * v17 + 32) = v78;
            goto LABEL_8;
          }
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v15 & 1) != 0)
            goto LABEL_17;
        }
        swift_unknownObjectRelease();
LABEL_8:
        ++v8;
        if (!--v7)
          goto LABEL_69;
      }
    }
    goto LABEL_68;
  }
  if (a1 == 0x72706D6F65672F2ELL && a2 == (void *)0xED0000666564706FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v18 = *(_QWORD *)(v6 + 16);
    if (v18)
    {
      v19 = (__int128 *)(v6 + 32);
      v9 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v79 = *v19;
        v20 = swift_getObjectType();
        v21 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v79 + 1) + 16);
        swift_unknownObjectRetain();
        v22 = v21(v20, *((_QWORD *)&v79 + 1));
        if (v23)
        {
          if (v22 == 0x706F72706D6F6567 && v23 == 0xEB00000000666564)
          {
            swift_bridgeObjectRelease();
LABEL_38:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
            v27 = *(_QWORD *)(v9 + 16);
            v26 = *(_QWORD *)(v9 + 24);
            if (v27 >= v26 >> 1)
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            *(_QWORD *)(v9 + 16) = v27 + 1;
            *(_OWORD *)(v9 + 16 * v27 + 32) = v79;
            goto LABEL_29;
          }
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v25 & 1) != 0)
            goto LABEL_38;
        }
        swift_unknownObjectRelease();
LABEL_29:
        ++v19;
        if (!--v18)
          goto LABEL_69;
      }
    }
LABEL_68:
    v9 = MEMORY[0x24BEE4AF8];
LABEL_69:
    swift_bridgeObjectRelease();
    return v9;
  }
  if (a1 == 0x7475706E692F2ELL && a2 == (void *)0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v28 = *(_QWORD *)(v6 + 16);
    if (!v28)
      goto LABEL_68;
    v29 = (__int128 *)(v6 + 32);
    v9 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v80 = *v29;
      v30 = swift_getObjectType();
      v31 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v80 + 1) + 16);
      swift_unknownObjectRetain();
      v32 = v31(v30, *((_QWORD *)&v80 + 1));
      if (v33)
      {
        if (v32 == 0x7475706E69 && v33 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_58:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
          v37 = *(_QWORD *)(v9 + 16);
          v36 = *(_QWORD *)(v9 + 24);
          if (v37 >= v36 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          *(_QWORD *)(v9 + 16) = v37 + 1;
          *(_OWORD *)(v9 + 16 * v37 + 32) = v80;
          goto LABEL_49;
        }
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v35 & 1) != 0)
          goto LABEL_58;
      }
      swift_unknownObjectRelease();
LABEL_49:
      ++v29;
      if (!--v28)
        goto LABEL_69;
    }
  }
  if (a1 == 0x74757074756F2F2ELL && a2 == (void *)0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v38 = *(_QWORD *)(v6 + 16);
    if (!v38)
      goto LABEL_68;
    v39 = (__int128 *)(v6 + 32);
    v9 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v81 = *v39;
      v41 = swift_getObjectType();
      v42 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v81 + 1) + 16);
      swift_unknownObjectRetain();
      v43 = v42(v41, *((_QWORD *)&v81 + 1));
      if (v44)
      {
        if (v43 == 0x74757074756FLL && v44 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_81:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
          v48 = *(_QWORD *)(v9 + 16);
          v47 = *(_QWORD *)(v9 + 24);
          if (v48 >= v47 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
          *(_QWORD *)(v9 + 16) = v48 + 1;
          *(_OWORD *)(v9 + 16 * v48 + 32) = v81;
          goto LABEL_72;
        }
        v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v46 & 1) != 0)
          goto LABEL_81;
      }
      swift_unknownObjectRelease();
LABEL_72:
      ++v39;
      if (!--v38)
        goto LABEL_69;
    }
  }
  if (a1 == 0xD000000000000015 && a2 == (void *)0x8000000245FC8920
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v49 = *(_QWORD *)(v6 + 16);
    if (!v49)
    {
      v9 = MEMORY[0x24BEE4AF8];
      goto LABEL_69;
    }
    v50 = (__int128 *)(v6 + 32);
    v9 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v82 = *v50;
      v51 = *(_QWORD *)v50;
      v52 = swift_getObjectType();
      v53 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v82 + 1) + 16);
      swift_unknownObjectRetain();
      v54 = v53(v52, *((_QWORD *)&v82 + 1));
      if (!v55)
        goto LABEL_91;
      if (v54 == 0x7061726765646F6ELL && v55 == 0xE900000000000068)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v57 & 1) == 0)
          goto LABEL_91;
      }
      swift_getObjectType();
      v58 = swift_conformsToProtocol2();
      if (v58)
        v59 = v58;
      else
        v59 = 0;
      if (v58)
        v60 = v51;
      else
        v60 = 0;
      if (v60)
      {
        v61 = swift_getObjectType();
        v62 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v59 + 16);
        swift_unknownObjectRetain();
        v63 = v62(0x66656465646F6ELL, 0xE700000000000000, v61, v59);
        swift_unknownObjectRelease();
        if (v63)
        {
          swift_unknownObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
          v65 = *(_QWORD *)(v9 + 16);
          v64 = *(_QWORD *)(v9 + 24);
          if (v65 >= v64 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
          *(_QWORD *)(v9 + 16) = v65 + 1;
          *(_OWORD *)(v9 + 16 * v65 + 32) = v82;
          goto LABEL_92;
        }
      }
LABEL_91:
      swift_unknownObjectRelease();
LABEL_92:
      ++v50;
      if (!--v49)
        goto LABEL_69;
    }
  }
  if (a1 == 0xD000000000000010 && a2 == (void *)0x8000000245FC8940
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v66 = *(_QWORD *)(v6 + 16);
    if (!v66)
      goto LABEL_68;
    v67 = (__int128 *)(v6 + 32);
    v9 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v83 = *v67;
      v68 = swift_getObjectType();
      v69 = *(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v83 + 1) + 16);
      swift_unknownObjectRetain();
      v70 = v69(v68, *((_QWORD *)&v83 + 1));
      if (v71)
      {
        if (v70 == 0x6E656D656C706D69 && v71 == 0xEE006E6F69746174)
        {
          swift_bridgeObjectRelease();
LABEL_132:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
          v75 = *(_QWORD *)(v9 + 16);
          v74 = *(_QWORD *)(v9 + 24);
          if (v75 >= v74 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
          *(_QWORD *)(v9 + 16) = v75 + 1;
          *(_OWORD *)(v9 + 16 * v75 + 32) = v83;
          goto LABEL_123;
        }
        v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v73 & 1) != 0)
          goto LABEL_132;
      }
      swift_unknownObjectRelease();
LABEL_123:
      ++v67;
      if (!--v66)
        goto LABEL_69;
    }
  }
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v76._countAndFlagsBits = a1;
  v76._object = a2;
  String.append(_:)(v76);
  v77._countAndFlagsBits = 39;
  v77._object = (void *)0xE100000000000000;
  String.append(_:)(v77);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t XMLParserDelegate.Element.deinit()
{
  uint64_t v0;

  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t XMLParserDelegate.Element.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for XMLElement.attribute(forName:) in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t protocol witness for XMLElement.addChild(_:) in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t protocol witness for XMLNodePrivate.parent.setter in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t (*protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t protocol witness for XMLNode.parent.getter in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t protocol witness for XMLNode.children.getter in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t protocol witness for XMLNode.stringValue.getter in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t protocol witness for XMLNode.attributes.getter in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t protocol witness for XMLNode.nodes(forXPath:) in conformance XMLParserDelegate.Element()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t protocol witness for XMLNode.detach() in conformance XMLParserDelegate.Element(uint64_t a1)
{
  return XMLNodePrivate.detach()(a1, (uint64_t)&protocol witness table for XMLParserDelegate.Element);
}

uint64_t XMLParserDelegate.Element.parent.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x24954C3E4](v0 + 16);
}

uint64_t XMLParserDelegate.Element.parent.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*XMLParserDelegate.StringNode.parent.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x24954C3E4](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return XMLParserDelegate.Element.parent.modify;
}

void XMLParserDelegate.Element.parent.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t XMLParserDelegate.StringNode.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XMLParserDelegate.Element.children.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t XMLParserDelegate.Element.children.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*XMLParserDelegate.StringNode.children.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t XMLParserDelegate.StringNode.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XMLParserDelegate.StringNode.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *XMLParserDelegate.StringNode.init(name:stringValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;

  v4[3] = 0;
  swift_unknownObjectWeakInit();
  v9 = MEMORY[0x24BEE4AF8];
  v4[4] = a1;
  v4[5] = a2;
  v4[6] = v9;
  v4[7] = a3;
  v4[8] = a4;
  v4[9] = 0;
  return v4;
}

void XMLParserDelegate.StringNode.nodes(forXPath:)()
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t XMLParserDelegate.StringNode.deinit()
{
  uint64_t v0;

  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t XMLParserDelegate.StringNode.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak XMLNode?(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for XMLNodePrivate.parent.setter in conformance XMLParserDelegate.StringNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t (*protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.StringNode(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 160))();
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

void protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for XMLNode.parent.getter in conformance XMLParserDelegate.StringNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t protocol witness for XMLNode.name.getter in conformance XMLParserDelegate.StringNode()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for XMLNode.children.getter in conformance XMLParserDelegate.StringNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t protocol witness for XMLNode.stringValue.getter in conformance XMLParserDelegate.StringNode()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for XMLNode.attributes.getter in conformance XMLParserDelegate.StringNode()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for XMLNode.nodes(forXPath:) in conformance XMLParserDelegate.StringNode()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t protocol witness for XMLNode.detach() in conformance XMLParserDelegate.StringNode(uint64_t a1)
{
  return XMLNodePrivate.detach()(a1, (uint64_t)&protocol witness table for XMLParserDelegate.StringNode);
}

id XMLParserDelegate.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement] = 0;
  v2 = &v0[OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id XMLParserDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSi_s5NeverOytTg591_s11ShaderGraph14XMLNodePrivate33_E8B134E456AC27412A2E2468BC0E59F0LLPAAE6detachyyFySiXEfU0_0E5Graph0G0_pTf1cn_nTf4ng_n(unint64_t a1, char a2)
{
  uint64_t ObjectType;
  uint64_t result;
  void (*v6)(_BYTE *, _QWORD);
  _QWORD *v7;
  _BYTE v8[32];

  if ((a2 & 1) != 0)
    return a2 & 1;
  ObjectType = swift_getObjectType();
  result = swift_conformsToProtocol2();
  if (result)
  {
    v6 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(result + 40))(v8, ObjectType, result);
    if (*v7)
    {
      specialized Array.remove(at:)(a1);
      v6(v8, 0);
      swift_unknownObjectRelease();
    }
    else
    {
      v6(v8, 0);
    }
    return a2 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized XMLParserDelegate.parser(_:didStartElement:namespaceURI:qualifiedName:attributes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _UNKNOWN **v11;
  uint64_t v12;
  void (*v13)(_QWORD *, _UNKNOWN **);

  v3 = v2;
  type metadata accessor for XMLParserDelegate.Element();
  v6 = (_QWORD *)swift_allocObject();
  v6[3] = 0;
  swift_unknownObjectWeakInit();
  v6[5] = a2;
  v6[6] = 0;
  v6[7] = 0;
  v6[4] = a1;
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_11ShaderGraph7XMLNode_ps5NeverOTg504_s11d26Graph17XMLParserDelegateC7b39C4name10attributesAESS_SDyS2SGSgtcfcAA7F25_pSS3key_SS5valuet_tXEfU_Tf1cn_n(v7);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v6[7] = v8;
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(v2 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_rootElement);
  swift_beginAccess();
  v10 = (_QWORD *)*v9;
  if (*v9)
  {
    v11 = (_UNKNOWN **)v9[1];
  }
  else
  {
    swift_retain();
    v11 = &protocol witness table for XMLParserDelegate.Element;
    v10 = v6;
  }
  *v9 = v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (v12)
  {
    v13 = *(void (**)(_QWORD *, _UNKNOWN **))(*(_QWORD *)v12 + 208);
    swift_retain();
    swift_retain();
    v13(v6, &protocol witness table for XMLParserDelegate.Element);
    swift_release();
    swift_release();
  }
  XMLParserDelegate.beginElement(_:)((uint64_t)v6);
  return swift_release();
}

void specialized XMLParserDelegate.parser(_:didEndElement:namespaceURI:qualifiedName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11ShaderGraph17XMLParserDelegate_currentElement);
  if (v2)
  {
    v3 = v0;
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112);
    v5 = swift_retain();
    v6 = v4(v5);
    swift_release();
    if (v6)
    {
      type metadata accessor for XMLParserDelegate.Element();
      v7 = swift_dynamicCastClass();
      if (v7)
      {
LABEL_6:
        *(_QWORD *)(v3 + v1) = v7;
        swift_release();
        return;
      }
      swift_unknownObjectRelease();
    }
    v7 = 0;
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t type metadata accessor for XMLParserDelegate.Element()
{
  return objc_opt_self();
}

uint64_t outlined destroy of weak XMLNode?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t lazy protocol witness table accessor for type XMLDocument.Options and conformance XMLDocument.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for XMLDocument.Options, &type metadata for XMLDocument.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for XMLDocument.Options, &type metadata for XMLDocument.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for XMLDocument.Options, &type metadata for XMLDocument.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options;
  if (!lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for XMLDocument.Options, &type metadata for XMLDocument.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XMLDocument.Options and conformance XMLDocument.Options);
  }
  return result;
}

uint64_t sub_245E726A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_245E726D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 120);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_245E72718@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_245E72748(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245E72778@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_245E727A8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_245E727D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_245E72808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 128);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_245E72848@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_245E72878(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 152);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t destroy for XMLDocument(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for XMLDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for XMLDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for XMLDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for XMLDocument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XMLDocument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for XMLDocument()
{
  return &type metadata for XMLDocument;
}

ValueMetadata *type metadata accessor for XMLDocument.Options()
{
  return &type metadata for XMLDocument.Options;
}

uint64_t dispatch thunk of XMLNode.parent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of XMLNode.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of XMLNode.children.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of XMLNode.stringValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of XMLNode.attributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of XMLNode.nodes(forXPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of XMLNode.detach()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of XMLElement.attribute(forName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of XMLElement.addChild(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t method lookup function for XMLParserDelegate.Element()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.parent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.parent.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.parent.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.children.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.children.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.children.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.stringValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attributes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attributes.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attributes.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.__allocating_init(name:attributes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.attribute(forName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.addChild(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of XMLParserDelegate.Element.nodes(forXPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t type metadata accessor for XMLParserDelegate.StringNode()
{
  return objc_opt_self();
}

uint64_t method lookup function for XMLParserDelegate.StringNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.parent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.parent.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.parent.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.children.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.children.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.children.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.__allocating_init(name:stringValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of XMLParserDelegate.StringNode.nodes(forXPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t outlined consume of XMLDocument?(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 != 2)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _UnsafeBitset._count.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _UnsafeBitset._count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_UnsafeBitset._count.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

int8x8_t *_UnsafeBitset._actualCount.getter(int8x8_t *result, uint64_t a2)
{
  int8x8_t *v2;
  uint64_t v3;
  uint8x8_t v4;
  BOOL v5;

  if (result)
  {
    if (a2)
    {
      v2 = result;
      result = 0;
      v3 = 8 * a2;
      while (1)
      {
        v4 = (uint8x8_t)vcnt_s8(*v2);
        v4.i16[0] = vaddlv_u8(v4);
        v5 = __OFADD__(result, v4.u32[0]);
        result = (int8x8_t *)((char *)result + v4.u32[0]);
        if (v5)
          break;
        ++v2;
        v3 -= 8;
        if (!v3)
          return result;
      }
      __break(1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _UnsafeBitset.Word.count.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = a5;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v20 - v14;
  v16 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))((char *)&v20 - v14, 1, 1, a4);
  v22 = a4;
  v23 = v15;
  v24 = a2;
  v25 = a3;
  v17 = v26;
  specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(a1, (uint64_t (*)(_QWORD **))partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:));
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v18 = v21;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, a4);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v18, v13, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;

  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v15 - v12;
  result = a3(a1);
  if (!v5)
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v13, 0, 1, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v13, v10);
  }
  return result;
}

uint64_t partial apply for closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static _UnsafeBitset.withTemporaryBitset<A>(capacity:run:)(a1, *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t static _UnsafeBitset._withTemporaryBitset(capacity:run:)(uint64_t a1, uint64_t (*a2)(_QWORD **))
{
  return specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(a1, a2);
}

unint64_t static _UnsafeBitset.wordCount(forCapacity:)(uint64_t a1)
{
  return (unint64_t)(a1 + 63) >> 6;
}

uint64_t static _UnsafeBitset.Word.empty.getter()
{
  return 0;
}

unint64_t static _UnsafeBitset.word(for:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.Word.capacity.getter()
{
  return 64;
}

uint64_t static _UnsafeBitset.bit(for:)(char a1)
{
  return a1 & 0x3F;
}

unint64_t static _UnsafeBitset.split(_:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.join(word:bit:)(uint64_t a1, uint64_t a2)
{
  return a2 + (a1 << 6);
}

uint64_t _UnsafeBitset.capacity.getter(uint64_t a1, uint64_t a2)
{
  return a2 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.isValid(_:)(Swift::Int a1)
{
  uint64_t v1;

  return a1 >= 0 && a1 < v1 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.contains(_:)(Swift::Int a1)
{
  uint64_t v1;

  return (*(_QWORD *)(v1 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.contains(_:)(Swift::Int a1)
{
  unint64_t v1;

  return (v1 >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.insert(_:)(Swift::Int a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(*v1 + v2);
  *(_QWORD *)(*v1 + v2) = v3 | (1 << a1);
  if ((v3 & (1 << a1)) == 0)
  {
    v4 = v1[2];
    v5 = __OFADD__(v4, 1);
    v6 = v4 + 1;
    if (v5)
    {
      __break(1u);
      return a1;
    }
    v1[2] = v6;
  }
  LOBYTE(a1) = (v3 & (1 << a1)) == 0;
  return a1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.insert(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::Bool result;

  v2 = 1 << a1;
  result = (*v1 & (1 << a1)) == 0;
  *v1 |= v2;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.remove(_:)(Swift::Int a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(*v1 + v2);
  *(_QWORD *)(*v1 + v2) = v3 & ~(1 << a1);
  if ((v3 & (1 << a1)) != 0)
  {
    v4 = v1[2];
    v5 = __OFSUB__(v4, 1);
    v6 = v4 - 1;
    if (v5)
    {
      __break(1u);
      return a1;
    }
    v1[2] = v6;
  }
  LOBYTE(a1) = (v3 & (1 << a1)) != 0;
  return a1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.remove(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::Bool result;

  v2 = 1 << a1;
  result = (*v1 & (1 << a1)) != 0;
  *v1 &= ~v2;
  return result;
}

Swift::Void __swiftcall _UnsafeBitset.clear()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= 1)
  {
    if (*(_QWORD *)v0)
    {
      bzero(*(void **)v0, 8 * v1);
      *(_QWORD *)(v0 + 16) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall _UnsafeBitset.insertAll(upTo:)(Swift::Int upTo)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint8x8_t v5;
  BOOL v6;
  Swift::Int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x8_t v11;
  Swift::Int v12;
  uint64_t v13;
  Swift::Int v14;

  if (upTo >= 1)
  {
    if ((unint64_t)upTo >= 0x40)
    {
      v2 = *(_QWORD *)(v1 + 16);
      v3 = *(_QWORD **)v1;
      v4 = (unint64_t)upTo >> 6;
      while (1)
      {
        v5 = (uint8x8_t)vcnt_s8((int8x8_t)~*v3);
        v5.i16[0] = vaddlv_u8(v5);
        v6 = __OFADD__(v2, v5.u32[0]);
        v2 += v5.u32[0];
        if (v6)
          break;
        *v3++ = -1;
        if (!--v4)
        {
          *(_QWORD *)(v1 + 16) = v2;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_7:
    v7 = upTo & 0x3F;
    if ((upTo & 0x3F) != 0)
    {
      v8 = 8 * ((unint64_t)upTo >> 6);
      v9 = *(_QWORD *)(*(_QWORD *)v1 + v8);
      v10 = -1 << v7;
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)(v9 & ~(-1 << v7)));
      v11.i16[0] = vaddlv_u8(v11);
      v12 = v7 - v11.u32[0];
      *(_QWORD *)(*(_QWORD *)v1 + v8) = v9 | ~v10;
      v13 = *(_QWORD *)(v1 + 16);
      v6 = __OFADD__(v13, v12);
      v14 = v13 + v12;
      if (v6)
      {
LABEL_12:
        __break(1u);
        return;
      }
      *(_QWORD *)(v1 + 16) = v14;
    }
  }
}

uint64_t static _UnsafeBitset.Word.allBits.getter()
{
  return -1;
}

Swift::Int __swiftcall _UnsafeBitset.Word.insert(bitsBelow:)(Swift::Int bitsBelow)
{
  _QWORD *v1;
  uint64_t v2;
  uint8x8_t v3;
  BOOL v4;
  Swift::Int result;

  v2 = -1 << bitsBelow;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)(*v1 & ~(-1 << bitsBelow)));
  v3.i16[0] = vaddlv_u8(v3);
  v4 = __OFSUB__(bitsBelow, v3.u32[0]);
  result = bitsBelow - v3.u32[0];
  if (v4)
    __break(1u);
  else
    *v1 |= ~v2;
  return result;
}

Swift::Void __swiftcall _UnsafeBitset.removeAll(upTo:)(Swift::Int upTo)
{
  uint64_t v1;
  uint64_t v2;
  int8x8_t *v3;
  unint64_t v4;
  uint8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;

  if (upTo >= 1)
  {
    if ((unint64_t)upTo >= 0x40)
    {
      v2 = *(_QWORD *)(v1 + 16);
      v3 = *(int8x8_t **)v1;
      v4 = (unint64_t)upTo >> 6;
      while (1)
      {
        v5 = (uint8x8_t)vcnt_s8(*v3);
        v5.i16[0] = vaddlv_u8(v5);
        v6 = __OFSUB__(v2, v5.u32[0]);
        v2 -= v5.u32[0];
        if (v6)
          break;
        *v3++ = 0;
        if (!--v4)
        {
          *(_QWORD *)(v1 + 16) = v2;
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_7:
    if ((upTo & 0x3F) != 0)
    {
      v7 = 8 * ((unint64_t)upTo >> 6);
      v8 = -1 << (upTo & 0x3F);
      v9 = *(_QWORD *)(*(_QWORD *)v1 + v7);
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)(v9 & ~v8));
      v10.i16[0] = vaddlv_u8(v10);
      *(_QWORD *)(*(_QWORD *)v1 + v7) = v9 & v8;
      v11 = *(_QWORD *)(v1 + 16);
      v6 = __OFSUB__(v11, v10.u32[0]);
      v12 = v11 - v10.u32[0];
      if (v6)
      {
LABEL_12:
        __break(1u);
        return;
      }
      *(_QWORD *)(v1 + 16) = v12;
    }
  }
}

Swift::Int __swiftcall _UnsafeBitset.Word.remove(bitsBelow:)(Swift::Int bitsBelow)
{
  _QWORD *v1;
  uint64_t v2;
  uint8x8_t v3;
  Swift::Int result;

  v2 = -1 << bitsBelow;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)(*v1 & ~(-1 << bitsBelow)));
  v3.i16[0] = vaddlv_u8(v3);
  result = v3.u32[0];
  *v1 &= v2;
  return result;
}

uint64_t _UnsafeBitset.underestimatedCount.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t *_UnsafeBitset.makeIterator()@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v4;

  if (a2 < 1)
    v4 = 0;
  else
    v4 = (uint64_t *)*result;
  *a4 = result;
  a4[1] = (uint64_t *)a2;
  a4[2] = a3;
  a4[3] = 0;
  a4[4] = v4;
  return result;
}

uint64_t *_UnsafeBitset.Iterator.init(_:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t *v4;

  if (a2 < 1)
    v4 = 0;
  else
    v4 = (uint64_t *)*result;
  *a4 = result;
  a4[1] = (uint64_t *)a2;
  a4[2] = a3;
  a4[3] = 0;
  a4[4] = v4;
  return result;
}

uint64_t _UnsafeBitset.Iterator.bitset.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _UnsafeBitset.Iterator.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t _UnsafeBitset.Iterator.index.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*_UnsafeBitset.Iterator.index.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _UnsafeBitset.Iterator.word.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t _UnsafeBitset.Iterator.word.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*_UnsafeBitset.Iterator.word.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Iterator.next()()
{
  uint64_t *v0;
  unint64_t v1;
  Swift::Bool v2;
  Swift::Int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int_optional result;

  v1 = v0[4];
  if (v1)
  {
    v2 = 0;
    v0[4] = (v1 - 1) & v1;
    v3 = __clz(__rbit64(v1)) | (v0[3] << 6);
    goto LABEL_14;
  }
  v4 = v0[3];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = v0[1];
  if (v6 >= v7)
  {
LABEL_11:
    v3 = 0;
    v2 = 1;
    goto LABEL_14;
  }
  v0[3] = v6;
  v8 = *v0;
  v9 = *(_QWORD *)(*v0 + 8 * v6);
  v0[4] = v9;
  if (!v9)
  {
    while (1)
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      if (v10 >= v7)
        goto LABEL_11;
      v0[3] = v10;
      v9 = *(_QWORD *)(v8 + 8 * v10);
      v0[4] = v9;
      ++v6;
      if (v9)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_13;
  }
  v10 = v6;
LABEL_7:
  v2 = 0;
  v0[4] = (v9 - 1) & v9;
  v3 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_14:
  result.value = v3;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Word.next()()
{
  unint64_t *v0;
  unint64_t v1;
  Swift::Int v2;
  Swift::Bool v3;
  Swift::Int_optional result;

  v1 = *v0;
  if (*v0)
  {
    v2 = __clz(__rbit64(v1));
    *v0 = (v1 - 1) & v1;
  }
  else
  {
    v2 = 0;
  }
  v3 = v1 == 0;
  result.value = v2;
  result.is_nil = v3;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Iterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3;

  v3 = _UnsafeBitset.Iterator.next()();
  *(_QWORD *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void protocol witness for Sequence.makeIterator() in conformance _UnsafeBitset(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  __int128 v3;
  uint64_t v4;

  v2 = *(uint64_t **)v1;
  v3 = *(_OWORD *)(v1 + 8);
  if (*(uint64_t *)(v1 + 8) < 1)
    v4 = 0;
  else
    v4 = *v2;
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v4;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _UnsafeBitset()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset()
{
  uint64_t *v0;

  return specialized _copySequenceToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
}

unint64_t **protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset(unint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *(unint64_t **)v3, *(_QWORD *)(v3 + 8), *(unint64_t **)(v3 + 16));
}

uint64_t _UnsafeBitset.Word.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_UnsafeBitset.Word.value.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

BOOL _UnsafeBitset.Word.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t _UnsafeBitset.Word.underestimatedCount.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _UnsafeBitset.Word()
{
  int8x8_t *v0;
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8(*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset.Word()
{
  uint64_t *v0;

  return specialized _copySequenceToContiguousArray<A>(_:)(*v0);
}

unint64_t *protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset.Word(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

void protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Word(uint64_t a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *v1;
  if (*v1)
  {
    v3 = __clz(__rbit64(v2));
    *v1 = (v2 - 1) & v2;
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 == 0;
}

uint64_t specialized static _UnsafeBitset._withTemporaryBitset(capacity:run:)(uint64_t a1, uint64_t (*a2)(_QWORD **))
{
  unint64_t v3;
  void *v4;
  _QWORD v6[2];
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (unint64_t)(a1 + 63) >> 6;
  if ((unint64_t)(a1 + 63) <= 0xBF)
  {
    v6[0] = 0;
    v6[1] = 0;
    v7 = v6;
    v8 = (unint64_t)(a1 + 63) >> 6;
    v9 = 0;
    return a2(&v7);
  }
  else
  {
    v4 = (void *)swift_slowAlloc();
    bzero(v4, 8 * v3);
    v7 = v4;
    v8 = v3;
    v9 = 0;
    a2(&v7);
    return MEMORY[0x24954C33C](v4, -1, -1);
  }
}

unint64_t lazy protocol witness table accessor for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator;
  if (!lazy protocol witness table cache variable for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for _UnsafeBitset.Iterator, &type metadata for _UnsafeBitset.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnsafeBitset.Iterator and conformance _UnsafeBitset.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word;
  if (!lazy protocol witness table cache variable for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for _UnsafeBitset.Word, &type metadata for _UnsafeBitset.Word);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnsafeBitset.Word and conformance _UnsafeBitset.Word);
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnsafeBitset(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _UnsafeBitset(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitset()
{
  return &type metadata for _UnsafeBitset;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnsafeBitset.Iterator(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _UnsafeBitset.Iterator(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitset.Iterator()
{
  return &type metadata for _UnsafeBitset.Iterator;
}

ValueMetadata *type metadata accessor for _UnsafeBitset.Word()
{
  return &type metadata for _UnsafeBitset.Word;
}

_QWORD *_s11ShaderGraph13_UnsafeBitsetV014_withTemporaryD08capacity3runySi_yACzKXEtKFZ04_s11a8Graph13_cd8V013withf32D08capacity3runxSi_xACzKXEtKlFZyN12KXEfU_Sb_Tg5SbSgACxs5Error_pRi_zRi0_zlySbIsglrzo_Tf1ncn_nTf4ndnn_n(uint64_t a1, _BYTE *a2, _QWORD *(*a3)(char *__return_ptr, _QWORD **))
{
  uint64_t v3;
  unint64_t v6;
  void *v7;
  _QWORD *result;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t)(a1 + 63) >> 6;
  if ((unint64_t)(a1 + 63) < 0xC0)
  {
    v10[0] = 0;
    v10[1] = 0;
    v11 = v10;
    v12 = (unint64_t)(a1 + 63) >> 6;
    v13 = 0;
    result = a3(&v9, &v11);
    if (!v3)
      *a2 = v9;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, 8 * v6);
    v11 = v7;
    v12 = v6;
    v13 = 0;
    a3((char *)v10, &v11);
    if (!v3)
      *a2 = v10[0];
    return (_QWORD *)MEMORY[0x24954C33C](v7, -1, -1);
  }
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  char v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_retain();
  swift_retain();
  swift_retain();
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    swift_bridgeObjectRelease();
    swift_release();
    if (v12)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v8 = v5[2];
      v7 = v5[3];
      if (v8 >= v7 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
      v5[2] = v8 + 1;
      v6 = &v5[4 * v8];
      *((_OWORD *)v6 + 2) = v10;
      *((_BYTE *)v6 + 48) = v11 & 1;
      v6[7] = v12;
    }
    ++v4;
  }
  while (v3 != v4);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSs5NeverOTg504_s11d51Graph15TopologicalSortV4PathV11debugStringSSvgSSAA6F53Ccfu_32f1d66dc559a448f4641180596f452bc7AHSSTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v16 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v16;
    v15 = v1 & 0xC000000000000001;
    v6 = v1;
    while (v2 != v5)
    {
      if (v15)
        v7 = (id)MEMORY[0x24954B748](v5, v1);
      else
        v7 = *(id *)(v1 + 8 * v5 + 32);
      v8 = v7;
      v9 = SGEdge.debugDescription.getter();
      v11 = v10;

      v13 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      ++v5;
      *(_QWORD *)(v16 + 16) = v13 + 1;
      v14 = v16 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      v1 = v6;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v13 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  for (v5 &= v5 - 1; ; v5 = (v9 - 1) & v9)
  {
    outlined copy of TextureSource();
    v11 = swift_bridgeObjectRetain();
    specialized closure #5 in inferTextureAssignments(from:)(v11);
    outlined consume of TextureSource();
    if (v1)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v7 >= v13)
      return swift_release();
    v9 = *(_QWORD *)(v2 + 8 * v7);
    if (!v9)
    {
      v10 = v7 + 1;
      if (v7 + 1 >= v13)
        return swift_release();
      v9 = *(_QWORD *)(v2 + 8 * v10);
      if (v9)
        goto LABEL_14;
      v10 = v7 + 2;
      if (v7 + 2 >= v13)
        return swift_release();
      v9 = *(_QWORD *)(v2 + 8 * v10);
      if (v9)
        goto LABEL_14;
      v10 = v7 + 3;
      if (v7 + 3 >= v13)
        return swift_release();
      v9 = *(_QWORD *)(v2 + 8 * v10);
      if (v9)
      {
LABEL_14:
        v7 = v10;
        continue;
      }
      v12 = v7 + 4;
      if (v7 + 4 >= v13)
        return swift_release();
      v9 = *(_QWORD *)(v2 + 8 * v12);
      v7 += 4;
      if (!v9)
        break;
    }
LABEL_15:
    ;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v13)
      return swift_release();
    v9 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v9)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t SGNode.BOOLValue.getter()
{
  uint64_t v0;
  _QWORD *v1;
  BOOL v2;

  v1 = (_QWORD *)(v0 + OBJC_IVAR___SGNode_data);
  if ((*(_BYTE *)(v0 + OBJC_IVAR___SGNode_data + 80) & 0xC0) == 0x80
    && ((*(_BYTE *)(v0 + OBJC_IVAR___SGNode_data + 80) & 0x3F) == 0 ? (v2 = *v1 == 1) : (v2 = 0), v2))
  {
    return v1[2] & 1;
  }
  else
  {
    return 2;
  }
}

void *SGNode.constantStringValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v4;

  v1 = v0 + OBJC_IVAR___SGNode_data;
  v2 = *(_BYTE *)(v0 + OBJC_IVAR___SGNode_data + 80);
  if ((v2 & 0xC0) != 0x80)
    return 0;
  if ((v2 & 0x3F) != 6 || *(_QWORD *)v1 != 11)
    return 0;
  v4 = *(void **)(v1 + 16);
  outlined copy of SGDataTypeStorage(v4, *(id *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), 6);
  return v4;
}

void *SGNode.constantAssetValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v4;

  v1 = v0 + OBJC_IVAR___SGNode_data;
  v2 = *(_BYTE *)(v0 + OBJC_IVAR___SGNode_data + 80);
  if ((v2 & 0xC0) != 0x80)
    return 0;
  if ((v2 & 0x3F) != 6 || *(_QWORD *)v1 != 13)
    return 0;
  v4 = *(void **)(v1 + 16);
  outlined copy of SGDataTypeStorage(v4, *(id *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), 6);
  return v4;
}

uint64_t TopologicalSort.Path.isMaterialUniform.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized TopologicalSort.Path.isMaterialUniform.getter(a1, a3);
}

uint64_t TopologicalSort.Path.sourceNode.getter(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_8;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = (char *)MEMORY[0x24954B748](0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = (char *)*(id *)(a1 + 32);
LABEL_6:
    v5 = v4;
    swift_bridgeObjectRelease();
    v6 = (char *)*(id *)&v5[OBJC_IVAR___SGEdge_from];

    v7 = &v6[OBJC_IVAR___SGOutput_node];
    swift_beginAccess();
    v8 = MEMORY[0x24954C3E4](v7);

    return v8;
  }
  __break(1u);
  return result;
}

uint64_t TopologicalSort.Path.hasValue.getter(unint64_t a1, uint64_t a2, void *a3)
{
  return specialized TopologicalSort.Path.hasValue.getter(a1, a3);
}

uint64_t TopologicalSort.Path.debugString.getter()
{
  return TopologicalSort.Path.debugString.getter();
}

{
  unint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSs5NeverOTg504_s11d51Graph15TopologicalSortV4PathV11debugStringSSvgSSAA6F53Ccfu_32f1d66dc559a448f4641180596f452bc7AHSSTf3nnnpk_nTf1cn_nTm(v0);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t TopologicalSort.path(to:on:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, unint64_t a6, uint64_t a7, void *a8)
{
  return specialized TopologicalSort.path(to:on:)(a1, a2, a3, a4, a5, a6, a8);
}

void closure #2 in TopologicalSort.path(to:on:)(unint64_t *a1, char **a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  char *v27;
  void *v28;
  id v29;
  char *v30;
  uint64_t v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  BOOL v40;
  char *v41;
  void *v42;
  id v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  int v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  v6 = v2;
  v7 = (uint64_t)a1;
  v8 = *a2;
  v9 = (unint64_t)a2[2];
  v10 = *a1;
  if (!(*a1 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_3;
LABEL_69:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11)
    goto LABEL_69;
LABEL_3:
  v12 = v11 - 1;
  if (__OFSUB__(v11, 1))
    goto LABEL_73;
  if ((v10 & 0xC000000000000001) == 0)
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v13 = (char *)*(id *)(v10 + 8 * v12 + 32);
      goto LABEL_8;
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_bridgeObjectRetain_n();
    v51 = v3;
    v20 = v68;
    outlined copy of NodeData((id)v9, (int)v4, v70, v68, v64, v65, v66, v67, (uint64_t)v5, v6, v63);
    v18 = _CocoaArrayWrapper.endIndex.getter();
    LODWORD(v4) = v69;
    v21 = v70;
    if (v18)
    {
LABEL_15:
      v9 = v10 & 0xC000000000000001;
      v7 = 4;
      while (1)
      {
        v8 = (char *)(v7 - 4);
        v12 = v9 ? MEMORY[0x24954B748](v7 - 4, v10) : (unint64_t)*(id *)(v10 + 8 * v7);
        v5 = (char *)v12;
        v22 = v7 - 3;
        if (__OFADD__(v8, 1))
          goto LABEL_72;
        v23 = (uint64_t *)(v12 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        v24 = *v23;
        v6 = *(_QWORD *)&v71[v73];
        v25 = (_QWORD *)(v6 + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        if (v24 == *v25)
        {
          v26 = *(_QWORD *)&v5[OBJC_IVAR___SGInput_name] == *(_QWORD *)(v6 + OBJC_IVAR___SGOutput_name)
             && *(_QWORD *)&v5[OBJC_IVAR___SGInput_name + 8] == *(_QWORD *)(v6 + OBJC_IVAR___SGOutput_name + 8);
          if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {

            swift_bridgeObjectRelease_n();
            v27 = &v5[OBJC_IVAR___SGInput_edge];
            swift_beginAccess();
            v28 = (void *)MEMORY[0x24954C3E4](v27);
            if (!v28)
            {
              outlined consume of NodeData(v59, v69, v70, v68, v64, v65, v66, v67, v58, v57, v63);

              goto LABEL_80;
            }
            v29 = v28;
            MEMORY[0x24954B1A8]();
            if (*(_QWORD *)((*v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v60 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            outlined consume of NodeData(v59, v69, v70, v68, v64, v65, v66, v67, v58, v57, v63);
            return;
          }
        }

        ++v7;
        v26 = v22 == v18;
        v20 = v68;
        LODWORD(v4) = v69;
        v21 = v70;
        if (v26)
          goto LABEL_79;
      }
    }
    goto LABEL_79;
  }
LABEL_74:
  v13 = (char *)MEMORY[0x24954B748](v12, v10);
LABEL_8:
  v3 = v13;
  swift_bridgeObjectRelease();
  v73 = OBJC_IVAR___SGEdge_from;
  v14 = *(_QWORD *)&v3[OBJC_IVAR___SGEdge_from] + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  v15 = MEMORY[0x24954C3E4](v14);
  if (!v15)
  {

    return;
  }
  v16 = (void *)v15;
  if ((char *)v15 != v8)
  {

    return;
  }
  v17 = (unint64_t *)&v8[OBJC_IVAR___SGNode_data];
  if ((v8[OBJC_IVAR___SGNode_data + 80] & 0xC0) != 0x40)
  {
    v30 = &v8[OBJC_IVAR___SGNode_graph];
    swift_beginAccess();
    v31 = MEMORY[0x24954C3E4](v30);
    if (v31)
    {
      v32 = (void *)v31;
      v33 = *(id *)(v31 + OBJC_IVAR___SGGraph_argumentsNode);

      type metadata accessor for SGNode();
      v5 = v8;
      LOBYTE(v32) = static NSObject.== infix(_:_:)();

      if ((v32 & 1) != 0)
      {
        if (!v9)
        {

          return;
        }
        v10 = *(_QWORD *)(v9 + OBJC_IVAR___SGNode_inputs);
        v70 = v5;
        v71 = v3;
        v60 = (_QWORD *)v7;
        if (v10 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v56 = v3;
          v9 = _CocoaArrayWrapper.endIndex.getter();
          if (v9)
          {
LABEL_36:
            v35 = 4;
            do
            {
              v5 = (char *)(v35 - 4);
              v36 = (v10 & 0xC000000000000001) != 0
                  ? (char *)MEMORY[0x24954B748](v35 - 4, v10)
                  : (char *)*(id *)(v10 + 8 * v35);
              v4 = v36;
              v3 = (char *)(v35 - 3);
              if (__OFADD__(v5, 1))
                goto LABEL_77;
              v37 = &v36[OBJC_IVAR___SGInput_type];
              swift_beginAccess();
              v38 = *(_QWORD *)v37;
              v6 = *(_QWORD *)&v71[v73];
              v39 = (_QWORD *)(v6 + OBJC_IVAR___SGOutput_type);
              swift_beginAccess();
              if (v38 == *v39)
              {
                v40 = *(_QWORD *)&v4[OBJC_IVAR___SGInput_name] == *(_QWORD *)(v6 + OBJC_IVAR___SGOutput_name)
                   && *(_QWORD *)&v4[OBJC_IVAR___SGInput_name + 8] == *(_QWORD *)(v6 + OBJC_IVAR___SGOutput_name + 8);
                if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {

                  swift_bridgeObjectRelease_n();
                  v41 = &v4[OBJC_IVAR___SGInput_edge];
                  swift_beginAccess();
                  v42 = (void *)MEMORY[0x24954C3E4](v41);
                  if (!v42)
                  {

                    v50 = v70;
                    goto LABEL_81;
                  }
                  v43 = v42;
                  MEMORY[0x24954B1A8]();
                  if (*(_QWORD *)((*v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v60 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();

                  return;
                }
              }

              ++v35;
            }
            while (v3 != (char *)v9);
          }
        }
        else
        {
          v9 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          v34 = v3;
          if (v9)
            goto LABEL_36;
        }

        swift_bridgeObjectRelease_n();
        return;
      }
    }
    v44 = *(_QWORD *)&v8[OBJC_IVAR___SGNode_inputs];
    v72 = MEMORY[0x24BEE4AF8];
    if (v44 >> 62)
    {
      v52 = v3;
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      v10 = v12;
      if (v12)
        goto LABEL_54;
    }
    else
    {
      v10 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
      v45 = v3;
      v12 = swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_54:
        v61 = v7;
        v62 = v8;
        v8 = v3;
        v9 = 0;
        while (1)
        {
          if ((v44 & 0xC000000000000001) != 0)
          {
            v12 = MEMORY[0x24954B748](v9, v44);
          }
          else
          {
            if (v9 >= *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
            v12 = (unint64_t)*(id *)(v44 + 8 * v9 + 32);
          }
          v5 = (char *)v12;
          v6 = v9 + 1;
          if (__OFADD__(v9, 1))
            goto LABEL_71;
          v7 = v10;
          v46 = (uint64_t *)(v12 + OBJC_IVAR___SGInput_type);
          swift_beginAccess();
          v47 = *v46;
          v48 = (_QWORD *)(*(_QWORD *)&v3[v73] + OBJC_IVAR___SGOutput_type);
          swift_beginAccess();
          if (v47 == *v48)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            v12 = specialized ContiguousArray._endMutation()();
          }
          else
          {

          }
          v10 = v7;
          ++v9;
          if (v6 == v7)
          {
            v49 = v72;
            v7 = v61;
            v8 = v62;
            goto LABEL_84;
          }
        }
      }
    }
    v49 = MEMORY[0x24BEE4AF8];
LABEL_84:
    swift_bridgeObjectRelease();

    if (v49 < 0 || (v49 & 0x4000000000000000) != 0)
    {
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_87:
        if ((v49 & 0xC000000000000001) != 0)
        {
          v5 = v8;
          v53 = (char *)MEMORY[0x24954B748](0, v49);
        }
        else
        {
          if (!*(_QWORD *)(v49 + 16))
          {
            __break(1u);
            goto LABEL_98;
          }
          v5 = v8;
          v53 = (char *)*(id *)(v49 + 32);
        }
        v8 = v53;
        swift_release();
        v54 = &v8[OBJC_IVAR___SGInput_edge];
        swift_beginAccess();
        v55 = (void *)MEMORY[0x24954C3E4](v54);
        if (!v55)
        {

          return;
        }
        v44 = v55;
        MEMORY[0x24954B1A8]();
        if (*(_QWORD *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFF8)
                                                                                   + 0x18) >> 1)
        {
LABEL_92:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          return;
        }
LABEL_98:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_92;
      }
    }
    else if (*(_QWORD *)(v49 + 16))
    {
      goto LABEL_87;
    }

    swift_release();
    return;
  }
  v63 = v8[OBJC_IVAR___SGNode_data + 80];
  v9 = *v17;
  v4 = (char *)v17[1];
  v70 = (char *)v17[2];
  v68 = (id)v17[3];
  v64 = v17[4];
  v65 = v17[5];
  v5 = (char *)v17[8];
  v66 = v17[6];
  v67 = v17[7];
  v6 = v17[9];
  v10 = *(_QWORD *)(*(_QWORD *)(*v17 + OBJC_IVAR___SGGraph_resultsNode) + OBJC_IVAR___SGNode_inputs);
  v69 = (int)v4;
  v71 = v3;
  v60 = (_QWORD *)v7;
  v62 = v8;
  v58 = (uint64_t)v5;
  v59 = (void *)*v17;
  v57 = v6;
  if (v10 >> 62)
    goto LABEL_78;
  v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  v19 = v3;
  v20 = v68;
  outlined copy of NodeData((id)v9, (int)v4, v70, v68, v64, v65, v66, v67, (uint64_t)v5, v6, v63);
  v21 = v70;
  if (v18)
    goto LABEL_15;
LABEL_79:

  swift_bridgeObjectRelease_n();
  outlined consume of NodeData(v59, (int)v4, v21, v20, v64, v65, v66, v67, v58, v57, v63);

LABEL_80:
  v50 = v62;
LABEL_81:

}

uint64_t inferLightingModel(from:in:)(uint64_t a1)
{
  return specialized inferLightingModel(from:in:)(a1);
}

uint64_t inferBlendMode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  return specialized inferBlendMode(from:in:)(a1, a2, a3, a4, a6);
}

uint64_t inferHasPremultipliedAlpha(from:in:)(uint64_t a1)
{
  return specialized inferHasPremultipliedAlpha(from:in:)(a1) & 1;
}

uint64_t inferApplyPostProcessToneMap(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  return specialized inferApplyPostProcessToneMap(from:in:)(a1, a2, a3, a4, a6) & 1;
}

void conditionallyInsertDiscardNode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  specialized conditionallyInsertDiscardNode(from:in:)(a1, a2, a3, a4, a6);
}

uint64_t inferHasConnectedLightSpillNodes(in:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_QWORD *)(a1 + 32);
    while (1)
    {
      v3 = *v2 + OBJC_IVAR___SGNode_data;
      if (*(unsigned __int8 *)(v3 + 80) <= 0x3Fu)
      {
        v4 = *(_QWORD *)v3;
        v5 = *(_QWORD *)(v3 + 8);
        v6 = *(_QWORD *)v3 == 0xD000000000000021 && v5 == 0x8000000245FC79C0;
        if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v7 = v4 == 0xD000000000000022 && v5 == 0x8000000245FC7960;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
      }
      v2 += 3;
      if (!--v1)
        goto LABEL_16;
    }
    v8 = 1;
  }
  else
  {
LABEL_16:
    v8 = 0;
  }
  swift_arrayDestroy();
  return v8;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t inferShaderHasCustomUniform(from:shaderType:)(char *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  BOOL v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v3 = *(_QWORD *)(*(_QWORD *)&a1[OBJC_IVAR___SGGraph_resultsNode] + OBJC_IVAR___SGNode_inputs);
  v42 = MEMORY[0x24BEE4AF8];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (result)
    {
LABEL_3:
      if (v4 < 1)
      {
        __break(1u);
        return result;
      }
      for (i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0)
          v7 = (char *)MEMORY[0x24954B748](i, v3);
        else
          v7 = (char *)*(id *)(v3 + 8 * i + 32);
        v8 = v7;
        v9 = &v7[OBJC_IVAR___SGInput_type];
        swift_beginAccess();
        if (*(_QWORD *)v9 == a2)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v10 = v42;
      v11 = v39;
      if (v42 < 0)
        goto LABEL_46;
      goto LABEL_16;
    }
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v10 = MEMORY[0x24BEE4AF8];
  v11 = v39;
  if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
    goto LABEL_46;
LABEL_16:
  if ((v10 & 0x4000000000000000) == 0)
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = a1;
    swift_retain();
    if (!v12)
    {
LABEL_47:

      swift_release_n();
      v36 = 0;
      return v36 & 1;
    }
    goto LABEL_18;
  }
LABEL_46:
  v37 = a1;
  swift_retain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  if (!v12)
    goto LABEL_47;
LABEL_18:
  v14 = 0;
  v40 = OBJC_IVAR___SGGraph_argumentsNode;
  v38 = v12;
  while (1)
  {
    if ((v10 & 0xC000000000000001) != 0)
      v15 = (char *)MEMORY[0x24954B748](v14, v10);
    else
      v15 = (char *)*(id *)(v10 + 32 + 8 * v14);
    v16 = v15;
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    v18 = &v15[OBJC_IVAR___SGInput_edge];
    swift_beginAccess();
    v19 = MEMORY[0x24954C3E4](v18);
    if (v19)
      break;

LABEL_20:
    if (v14 == v12)
      goto LABEL_47;
  }
  v20 = (void *)v19;
  v21 = *(char **)(v19 + OBJC_IVAR___SGEdge_from);
  v22 = (uint64_t *)&v21[OBJC_IVAR___SGOutput_attachment];
  swift_beginAccess();
  v23 = (void *)v22[1];
  if (!v23)
  {

    goto LABEL_20;
  }
  v24 = *v22;
  v25 = v21;
  swift_bridgeObjectRetain();
  v26 = (void *)SGGraph.node(named:)(v24, v23);

  v27 = swift_bridgeObjectRelease();
  if (!v26)
  {

    goto LABEL_42;
  }
  MEMORY[0x24BDAC7A8](v27);
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v26, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:));
  if (v11)
  {

    swift_release_n();
    return v36 & 1;
  }
  specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(v26);
  v29 = v28;
  swift_release();
  swift_release();
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
  {
LABEL_40:

    swift_release();
    swift_release();
    v11 = 0;
LABEL_42:
    v12 = v38;
    goto LABEL_20;
  }
  v31 = 0;
  while (1)
  {
    v32 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v31 + 32) + OBJC_IVAR___SGEdge_from)
                   + OBJC_IVAR___SGOutput_attachment);
    swift_beginAccess();
    v33 = v32[1];
    if (v33)
    {
      v34 = (_QWORD *)(*(_QWORD *)&a1[v40] + OBJC_IVAR___SGNode_name);
      v35 = *v34 == *v32 && v33 == v34[1];
      if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
    }
    if (v30 == ++v31)
      goto LABEL_40;
  }

  swift_release();
  swift_release();

  swift_release_n();
  v36 = 1;
  return v36 & 1;
}

uint64_t inferTextureAssignments(from:)()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t i;
  char *v21;
  void *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void **v35;
  _QWORD *v36;
  void *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  unint64_t v125;
  uint64_t v126;
  id v127;
  id v128;
  char *v129;
  id v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _QWORD *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138[4];

  result = (uint64_t)SGGraph.topologicalSort()();
  if (!v0)
  {
    v5 = v4;
    v118 = v3;
    v119 = v2;
    v6 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v135 = MEMORY[0x24BEE4AF8];
    v7 = *(_QWORD *)(result + 16);
    v125 = result;
    if (v7)
    {
      v8 = result + 32;
      swift_bridgeObjectRetain_n();
      v124 = v119;
      v123 = v118;
      v127 = v5;
      v9 = 0;
      v120 = v8;
      v121 = v7;
      while (1)
      {
        v11 = (char **)(v8 + 24 * v9);
        v12 = *v11;
        if ((*v11)[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu)
          break;
        v10 = v6;
LABEL_5:
        ++v9;
        specialized Array.append<A>(contentsOf:)(v10);
        if (v9 == v7)
        {

          swift_bridgeObjectRelease_n();
          v32 = v135;
          v33 = v127;
          goto LABEL_24;
        }
      }
      v14 = v11[1];
      v13 = v11[2];
      v15 = *(_QWORD *)&v12[OBJC_IVAR___SGNode_inputs];
      v138[0] = v6;
      if (v15 >> 62)
      {
        v24 = v13;
        v25 = v12;
        v26 = v14;
        swift_bridgeObjectRetain();
        v16 = _CocoaArrayWrapper.endIndex.getter();
        if (v16)
          goto LABEL_9;
      }
      else
      {
        v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        v17 = v13;
        v18 = v12;
        v19 = v14;
        swift_bridgeObjectRetain();
        if (v16)
        {
LABEL_9:
          if (v16 < 1)
            goto LABEL_91;
          v129 = v13;
          for (i = 0; i != v16; ++i)
          {
            if ((v15 & 0xC000000000000001) != 0)
              v21 = (char *)MEMORY[0x24954B748](i, v15);
            else
              v21 = (char *)*(id *)(v15 + 8 * i + 32);
            v22 = v21;
            v23 = &v21[OBJC_IVAR___SGInput_type];
            swift_beginAccess();
            if (*(_QWORD *)v23 == 13)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {

            }
          }
          swift_bridgeObjectRelease();
          v6 = v138[0];
          v13 = v129;
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRelease();
LABEL_21:
      v27 = v13;
      v28 = v12;
      v29 = v14;
      swift_bridgeObjectRetain();
      v130 = v124;
      v30 = v123;
      v31 = v127;
      v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AF15TopologicalSortV4PathVs5NeverOTg504_s11d73Graph23inferTextureAssignments4fromSayAA05TypedD0VGAA7SGGraphC_tKFSayAA15gh2V4i5VGAJ7b10VXEfU_AlA7F7CXEfU0_A2kCVTf1cn_nTf4ngXg_n(v6, v125, v30, v28, v29, v13);
      swift_release();

      swift_bridgeObjectRelease();
      v6 = MEMORY[0x24BEE4AF8];
      v8 = v120;
      v7 = v121;
      goto LABEL_5;
    }
    v33 = v4;
    swift_bridgeObjectRetain();
    v32 = MEMORY[0x24BEE4AF8];
LABEL_24:
    swift_bridgeObjectRelease();

    v34 = *(_QWORD *)(v32 + 16);
    v128 = v33;
    if (v34)
    {
      swift_bridgeObjectRetain();
      v35 = (void **)(v32 + 48);
      v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        v37 = *v35;
        v38 = (unint64_t)*(v35 - 2);
        v131 = *((_OWORD *)v35 - 1);
        v39 = *(v35 - 1);
        if (v38 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v46 = v39;
          v47 = v37;
          v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v48 > 0)
          {
LABEL_30:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
            v44 = v36[2];
            v43 = v36[3];
            if (v44 >= v43 >> 1)
              v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v36);
            v36[2] = v44 + 1;
            v45 = &v36[3 * v44];
            *((_OWORD *)v45 + 2) = v131;
            v45[6] = v37;
            goto LABEL_27;
          }
        }
        else
        {
          v40 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v41 = v39;
          v42 = v37;
          if (v40 > 0)
            goto LABEL_30;
        }

        swift_bridgeObjectRelease();
LABEL_27:
        v35 += 3;
        if (!--v34)
        {
          swift_bridgeObjectRelease();
          v33 = v128;
          goto LABEL_39;
        }
      }
    }
    v36 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_39:
    swift_bridgeObjectRelease();
    v49 = v36[2];
    if (v49)
    {
      swift_bridgeObjectRetain();
      v50 = (void **)(v36 + 6);
      v51 = MEMORY[0x24BEE4AF8];
      do
      {
        v52 = (_QWORD *)v51;
        v53 = *(v50 - 1);
        v54 = *v50;
        v138[0] = (unint64_t)*(v50 - 2);
        v138[1] = (unint64_t)v53;
        v138[2] = (unint64_t)v54;
        swift_bridgeObjectRetain();
        v55 = v53;
        v56 = v54;
        closure #3 in inferTextureAssignments(from:)(v138, &v135);

        swift_bridgeObjectRelease();
        v57 = v137;
        if (v137)
        {
          v132 = v135;
          v58 = v136;
          v59 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
          v61 = v59[2];
          v60 = v59[3];
          v62 = v59;
          if (v61 >= v60 >> 1)
            v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v61 + 1, 1, v59);
          v62[2] = v61 + 1;
          v51 = (uint64_t)v62;
          v63 = &v62[4 * v61];
          *((_OWORD *)v63 + 2) = v132;
          *((_BYTE *)v63 + 48) = v58 & 1;
          v63[7] = v57;
        }
        else
        {
          v51 = (uint64_t)v52;
        }
        v50 += 3;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      v51 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v64 = (_QWORD *)MEMORY[0x24BEE4B00];
    *(_QWORD *)&v135 = MEMORY[0x24BEE4B00];
    v65 = *(_QWORD *)(v51 + 16);
    if (v65)
    {
      swift_bridgeObjectRetain();
      v122 = v51;
      v66 = (_QWORD *)(v51 + 56);
      while (1)
      {
        v69 = *(v66 - 3);
        v68 = *(v66 - 2);
        v70 = *((_BYTE *)v66 - 8);
        v71 = *v66;
        outlined copy of TextureSource();
        outlined copy of TextureSource();
        swift_retain();
        v73 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v68, v70);
        v74 = v64[2];
        v75 = (v72 & 1) == 0;
        v76 = v74 + v75;
        if (__OFADD__(v74, v75))
          break;
        v77 = v72;
        if (v64[3] < v76)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v76, 1);
          v64 = (_QWORD *)v135;
          v78 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v68, v70);
          if ((v77 & 1) != (v79 & 1))
            goto LABEL_92;
          v73 = v78;
        }
        if ((v77 & 1) != 0)
        {
          v126 = v71;
          v133 = v65;
          outlined consume of TextureSource();
          v80 = v64[7];
          v81 = *(_QWORD **)(v80 + 8 * v73);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v80 + 8 * v73) = v81;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81[2] + 1, 1, v81);
            *(_QWORD *)(v80 + 8 * v73) = v81;
          }
          v84 = v81[2];
          v83 = v81[3];
          v85 = v84 + 1;
          if (v84 >= v83 >> 1)
          {
            v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v83 > 1), v84 + 1, 1, v81);
            v85 = v84 + 1;
            v81 = v86;
            *(_QWORD *)(v80 + 8 * v73) = v86;
          }
          v81[2] = v85;
          v67 = &v81[4 * v84];
          v67[4] = v69;
          v67[5] = v68;
          *((_BYTE *)v67 + 48) = v70;
          v67[7] = v126;
          v65 = v133;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypedTexture>);
          v87 = swift_allocObject();
          *(_OWORD *)(v87 + 16) = xmmword_245FBECD0;
          *(_QWORD *)(v87 + 32) = v69;
          *(_QWORD *)(v87 + 40) = v68;
          *(_BYTE *)(v87 + 48) = v70;
          *(_QWORD *)(v87 + 56) = v71;
          v64[(v73 >> 6) + 8] |= 1 << v73;
          v88 = v64[6] + 24 * v73;
          *(_QWORD *)v88 = v69;
          *(_QWORD *)(v88 + 8) = v68;
          *(_BYTE *)(v88 + 16) = v70;
          *(_QWORD *)(v64[7] + 8 * v73) = v87;
          v89 = v64[2];
          v90 = __OFADD__(v89, 1);
          v91 = v89 + 1;
          if (v90)
            goto LABEL_90;
          v64[2] = v91;
        }
        v66 += 4;
        if (!--v65)
        {
          v51 = v122;
          swift_bridgeObjectRelease();
          v33 = v128;
          goto LABEL_67;
        }
      }
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
LABEL_67:
      specialized Sequence.forEach(_:)((uint64_t)v64);
      swift_release();
      v92 = specialized OrderedDictionary.init<A>(_grouping:by:)(v51);
      v94 = v93;
      v96 = v95;
      swift_bridgeObjectRelease();
      v97 = specialized Sequence.compactMap<A>(_:)(v92, v94, v96);
      swift_release();
      swift_release();
      swift_release();
      v98 = v97[2];
      if (v98)
      {
        swift_bridgeObjectRetain();
        v134 = v97;
        v99 = v97 + 7;
        v100 = MEMORY[0x24BEE4AF8];
        v101 = v98;
        do
        {
          if ((*(_BYTE *)(v99 - 1) & 1) == 0)
          {
            v105 = *(v99 - 3);
            v106 = *(v99 - 2);
            v107 = *v99;
            swift_retain();
            outlined copy of TextureSource();
            v108 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v135 = v100;
            if ((v108 & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v100 + 16) + 1, 1);
              v100 = v135;
            }
            v103 = *(_QWORD *)(v100 + 16);
            v102 = *(_QWORD *)(v100 + 24);
            if (v103 >= v102 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v102 > 1, v103 + 1, 1);
              v100 = v135;
            }
            *(_QWORD *)(v100 + 16) = v103 + 1;
            v104 = v100 + 32 * v103;
            *(_QWORD *)(v104 + 32) = v105;
            *(_QWORD *)(v104 + 40) = v106;
            *(_BYTE *)(v104 + 48) = 0;
            *(_QWORD *)(v104 + 56) = v107;
          }
          v99 += 4;
          --v101;
        }
        while (v101);
        swift_bridgeObjectRelease();
        v109 = v134 + 7;
        v110 = MEMORY[0x24BEE4AF8];
        v33 = v128;
        do
        {
          if (*((_BYTE *)v109 - 8) == 1)
          {
            v114 = *(v109 - 3);
            v115 = *(v109 - 2);
            v116 = *v109;
            swift_retain();
            outlined copy of TextureSource();
            v117 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v135 = v110;
            if ((v117 & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v110 + 16) + 1, 1);
              v110 = v135;
            }
            v112 = *(_QWORD *)(v110 + 16);
            v111 = *(_QWORD *)(v110 + 24);
            if (v112 >= v111 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
              v110 = v135;
            }
            *(_QWORD *)(v110 + 16) = v112 + 1;
            v113 = v110 + 32 * v112;
            *(_QWORD *)(v113 + 32) = v114;
            *(_QWORD *)(v113 + 40) = v115;
            *(_BYTE *)(v113 + 48) = 1;
            *(_QWORD *)(v113 + 56) = v116;
            v33 = v128;
          }
          v109 += 4;
          --v98;
        }
        while (v98);
      }
      else
      {
        v100 = MEMORY[0x24BEE4AF8];
        v110 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)&v135 = v100;
      specialized Array.append<A>(contentsOf:)(v110);

      swift_bridgeObjectRelease();
      return v135;
    }
  }
  return result;
}

void closure #3 in inferTextureAssignments(from:)(unint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  char *v3;
  char *v4;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a1;
  v7 = (_OWORD *)a1[2];
  if (!(*a1 >> 62))
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_28:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v27 = 0xD000000000000023;
    *(_QWORD *)(v27 + 8) = 0x8000000245FC8C60;
    *(_BYTE *)(v27 + 16) = 20;
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8)
    goto LABEL_28;
LABEL_3:
  v9 = (void *)(v6 & 0xC000000000000001);
  if ((v6 & 0xC000000000000001) != 0)
  {
    v10 = (char *)MEMORY[0x24954B748](0, v6);
  }
  else
  {
    if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    v10 = (char *)*(id *)(v6 + 32);
  }
  v3 = v10;
  swift_bridgeObjectRelease();
  v2 = OBJC_IVAR___SGEdge_from;
  v4 = (char *)(*(_QWORD *)&v3[OBJC_IVAR___SGEdge_from] + OBJC_IVAR___SGOutput_node);
  swift_beginAccess();
  v11 = MEMORY[0x24954C3E4](v4);
  if (!v11)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v14 = 0xD000000000000023;
    *(_QWORD *)(v14 + 8) = 0x8000000245FC8BD0;
    *(_BYTE *)(v14 + 16) = 20;
    swift_willThrow();

    return;
  }
  v12 = v8 - 1;
  if (!__OFSUB__(v8, 1))
  {
    v4 = (char *)v11;
    v28 = (uint64_t)v7;
    if (v9)
    {
      v7 = a2;
      swift_bridgeObjectRetain();
      v13 = (char *)MEMORY[0x24954B748](v8 - 1, v6);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v7 = a2;
      v13 = (char *)*(id *)(v6 + 8 * v12 + 32);
LABEL_14:
      v15 = (char *)*(id *)&v13[OBJC_IVAR___SGEdge_to];

      v16 = &v15[OBJC_IVAR___SGInput_node];
      swift_beginAccess();
      v9 = (void *)MEMORY[0x24954C3E4](v16);

      if (!v9)
      {
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(_QWORD *)v23 = 0xD000000000000028;
        *(_QWORD *)(v23 + 8) = 0x8000000245FC8C00;
        *(_BYTE *)(v23 + 16) = 20;
        swift_willThrow();

        return;
      }
      if (one-time initialization token for shared == -1)
        goto LABEL_16;
      goto LABEL_32;
    }
    __break(1u);
    return;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  swift_once();
LABEL_16:
  v17 = specialized SGNode.textureType(nodeDefStore:)(static NodeDefStore.shared);
  if (!v17)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v24 = 0xD000000000000026;
    *(_QWORD *)(v24 + 8) = 0x8000000245FC8C30;
    *(_BYTE *)(v24 + 16) = 20;
    swift_willThrow();

    return;
  }
  v18 = v17;
  v19 = v7;
  v20 = specialized TopologicalSort.Path.isMaterialUniform.getter(v6, v28);

  if ((v20 & 1) != 0)
  {

    v4 = (char *)*(id *)&v3[v2];
    v21 = *(void **)&v4[OBJC_IVAR___SGOutput_name];
    v22 = *(void **)&v4[OBJC_IVAR___SGOutput_name + 8];
    swift_bridgeObjectRetain();
LABEL_25:

    *v19 = v21;
    v19[1] = v22;
    v19[2] = v20 & 1;
    v19[3] = v18;
    return;
  }

  v25 = &v4[OBJC_IVAR___SGNode_data];
  v26 = v4[OBJC_IVAR___SGNode_data + 80];
  if ((v26 & 0xC0) == 0x80 && *(_QWORD *)v25 == 13 && (v26 & 0x3F) == 6)
  {
    v21 = (void *)*((_QWORD *)v25 + 2);
    v22 = (void *)*((_QWORD *)v25 + 3);
    outlined copy of NodeData((id)0xD, *((_QWORD *)v25 + 1), v21, v22, *((_QWORD *)v25 + 4), *((_QWORD *)v25 + 5), *((_QWORD *)v25 + 6), *((_QWORD *)v25 + 7), *((_QWORD *)v25 + 8), *((_QWORD *)v25 + 9), v4[OBJC_IVAR___SGNode_data + 80]);
    goto LABEL_25;
  }
  swift_release();

  *v7 = 0u;
  v7[1] = 0u;
}

uint64_t key path getter for Collection.first : [TypedTexture]@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(unsigned __int8 *)(v3 + 48);
    v7 = *(_QWORD *)(v3 + 56);
    outlined copy of TextureSource();
    result = swift_retain();
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t inferHasBackgroundBlur(from:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = a2 + 32;
  swift_bridgeObjectRetain();
  v4 = 0;
  v26 = v2;
  do
  {
    v5 = v3 + 24 * v4;
    v6 = *(_QWORD *)v5 + OBJC_IVAR___SGNode_data;
    if (*(unsigned __int8 *)(v6 + 80) <= 0x3Fu)
    {
      v7 = *(void **)(v5 + 8);
      v8 = *(_QWORD *)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v10 = *(void **)(v3 + 24 * v4 + 16);
      v11 = one-time initialization token for realityKitBackgroundBlurNodes;
      v29 = *(id *)v5;
      v28 = v7;
      v12 = v10;
      if (v11 != -1)
        swift_once();
      swift_beginAccess();
      v13 = static ShaderGraphNode.realityKitBackgroundBlurNodes;
      if (*(_QWORD *)(static ShaderGraphNode.realityKitBackgroundBlurNodes + 16))
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v14 = Hasher._finalize()();
        v15 = -1 << *(_BYTE *)(v13 + 32);
        v16 = v14 & ~v15;
        v17 = v13 + 56;
        if (((*(_QWORD *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
        {
          v27 = v12;
          v18 = *(_QWORD *)(v13 + 48);
          v19 = (_QWORD *)(v18 + 16 * v16);
          v20 = *v19 == v8 && v9 == v19[1];
          if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return 1;
          }
          v21 = ~v15;
          v22 = (v16 + 1) & v21;
          if (((*(_QWORD *)(v17 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
          {
            while (1)
            {
              v23 = (_QWORD *)(v18 + 16 * v22);
              v24 = *v23 == v8 && v9 == v23[1];
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                break;
              v22 = (v22 + 1) & v21;
              if (((*(_QWORD *)(v17 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v2 = v26;
                goto LABEL_5;
              }
            }
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 1;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v2 = v26;
          v12 = v27;
        }
        else
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v2 = v26;
        }
      }
      else
      {

      }
    }
LABEL_5:
    ++v4;
  }
  while (v4 != v2);
  swift_bridgeObjectRelease();
  return 0;
}

void checkConstantInputs(in:)(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  unint64_t v23;
  char *v24;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = a1 + 32;
    swift_bridgeObjectRetain_n();
    v23 = v7;
    do
    {
      --v5;
      v8 = (char **)(v7 + 24 * v5);
      v9 = *v8;
      v10 = (uint64_t)&(*v8)[OBJC_IVAR___SGNode_data];
      if (*(unsigned __int8 *)(v10 + 80) <= 0x3Fu)
      {
        v12 = v8[1];
        v11 = v8[2];
        v13 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)&v9[OBJC_IVAR___SGNode_inputs];
        v24 = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v15 = v9;
        v16 = v12;
        v17 = specialized Sequence.filter(_:)(v13, v14);
        if (v4)
        {

          swift_bridgeObjectRelease_n();
          return;
        }
        v18 = v17;
        v19 = *(_QWORD *)(v17 + 16);
        if (v19)
        {
          swift_bridgeObjectRetain();
          v20 = v18 + 40;
          do
          {
            v21 = *(void **)(v20 + 24);
            swift_bridgeObjectRetain();
            v22 = v21;
            specialized closure #2 in closure #1 in checkConstantInputs(in:)((uint64_t)v22, a1, a3, v15, v16, v11);

            swift_bridgeObjectRelease();
            v20 += 40;
            --v19;
          }
          while (v19);

          swift_bridgeObjectRelease();
        }
        else
        {

        }
        swift_bridgeObjectRelease();
        v7 = v23;
      }
    }
    while (v5);
    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = 0;
    v5 = a2 & 0xFFFFFFFFFFFFFF8;
    v38 = a2 & 0xC000000000000001;
    v36 = a2 + 32;
    v6 = result + 56;
    v31 = v3 - 1;
    v7 = MEMORY[0x24BEE4AF8];
    v39 = a2 >> 62;
    v37 = result;
    v35 = *(_QWORD *)(result + 16);
    v32 = result + 56;
    do
    {
      v34 = v7;
      v8 = (_BYTE *)(v6 + 32 * v4);
      v9 = v4;
      while (1)
      {
        if (v9 >= *(_QWORD *)(v2 + 16))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
        v11 = *((_QWORD *)v8 - 3);
        v10 = *((_QWORD *)v8 - 2);
        v12 = *((_QWORD *)v8 - 1);
        v13 = *v8;
        if (v39)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v19 = _CocoaArrayWrapper.endIndex.getter();
          result = swift_bridgeObjectRelease();
          if (v9 == v19)
          {
LABEL_30:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v34;
          }
        }
        else
        {
          v14 = *(_QWORD *)(v5 + 16);
          result = swift_bridgeObjectRetain();
          if (v9 == v14)
            goto LABEL_30;
        }
        if (v38)
        {
          v15 = (char *)MEMORY[0x24954B748](v9, a2);
        }
        else
        {
          if (v9 >= *(_QWORD *)(v5 + 16))
            goto LABEL_35;
          v15 = (char *)*(id *)(v36 + 8 * v9);
        }
        v16 = v15;
        v17 = v11 == *(_QWORD *)&v15[OBJC_IVAR___SGInput_name] && v10 == *(_QWORD *)&v15[OBJC_IVAR___SGInput_name + 8];
        if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || (v18 = &v16[OBJC_IVAR___SGInput_type], swift_beginAccess(), v12 != *(_QWORD *)v18))
        {
          _StringGuts.grow(_:)(23);
          v23._object = (void *)0x8000000245FC8B60;
          v23._countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v23);
          _print_unlocked<A, B>(_:_:)();
          v24._countAndFlagsBits = 32;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          v25 = objc_msgSend(v16, sel_description);
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v28 = v27;

          v29._countAndFlagsBits = v26;
          v29._object = v28;
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type APIError and conformance APIError();
          swift_allocError();
          *(_QWORD *)v30 = 0;
          *(_QWORD *)(v30 + 8) = 0xE000000000000000;
          *(_BYTE *)(v30 + 16) = 7;
          swift_willThrow();
          v7 = v34;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_32;
        }
        if ((v13 & 1) != 0)
          break;
        ++v9;

        result = swift_bridgeObjectRelease();
        v8 += 32;
        v2 = v37;
        if (v35 == v9)
        {
          v7 = v34;
          goto LABEL_31;
        }
      }
      v7 = v34;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
        v7 = v34;
      }
      v21 = *(_QWORD *)(v7 + 16);
      v20 = *(_QWORD *)(v7 + 24);
      if (v21 >= v20 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v7 = v34;
      }
      v4 = v9 + 1;
      *(_QWORD *)(v7 + 16) = v21 + 1;
      v22 = v7 + 40 * v21;
      *(_QWORD *)(v22 + 32) = v11;
      *(_QWORD *)(v22 + 40) = v10;
      *(_QWORD *)(v22 + 48) = v12;
      *(_BYTE *)(v22 + 56) = 1;
      *(_QWORD *)(v22 + 64) = v16;
      v6 = v32;
      v2 = v37;
    }
    while (v31 != v9);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
LABEL_31:
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();
  return v7;
}

void closure #1 in closure #2 in closure #1 in checkConstantInputs(in:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = *(_QWORD *)(*a1 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  v4 = MEMORY[0x24954C3E4](v3);
  if (v4)
  {
    v5 = (char *)v4;
    v6 = (uint64_t *)(v4 + OBJC_IVAR___SGNode_data);
    if (!(*(unsigned __int8 *)(v4 + OBJC_IVAR___SGNode_data + 80) >> 6))
    {
      v16 = *v6;
      v15 = v6[1];
      v18 = v6[4];
      v17 = v6[5];
      v19 = *v6 == 0x656D756772615F5FLL && v15 == 0xEB0000000073746ELL;
      if (v19
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v16 == 0x746C757365725F5FLL ? (v20 = v15 == 0xE900000000000073) : (v20 = 0), v20))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of MaterialXAvailability(v18, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v18, v17);
      }
      else
      {
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of MaterialXAvailability(v18, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v18, v17);
        if ((v21 & 1) == 0)
        {
          _StringGuts.grow(_:)(33);
          v23 = *(_QWORD *)(a2 + OBJC_IVAR___SGInput_name);
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___SGInput_name + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v40 = v23;
          v42 = v22;
          v24._countAndFlagsBits = 544108320;
          v24._object = (void *)0xE400000000000000;
          String.append(_:)(v24);
          v25 = a2 + OBJC_IVAR___SGInput_node;
          swift_beginAccess();
          v26 = MEMORY[0x24954C3E4](v25);
          if (v26)
          {
            v27 = (void *)v26;
            v28 = *(_QWORD *)(v26 + OBJC_IVAR___SGNode_name);
            v29 = *(void **)(v26 + OBJC_IVAR___SGNode_name + 8);
            swift_bridgeObjectRetain();

          }
          else
          {
            v28 = 0x2064656D616E6E55;
            v29 = (void *)0xEC00000065646F6ELL;
          }
          v33._countAndFlagsBits = v28;
          v33._object = v29;
          String.append(_:)(v33);
          swift_bridgeObjectRelease();
          v34._countAndFlagsBits = 0xD000000000000016;
          v34._object = (void *)0x8000000245FC8B40;
          String.append(_:)(v34);
          v35 = *(_QWORD *)&v5[OBJC_IVAR___SGNode_name];
          v36 = *(void **)&v5[OBJC_IVAR___SGNode_name + 8];
          swift_bridgeObjectRetain();
          v37._countAndFlagsBits = v35;
          v37._object = v36;
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          v38._countAndFlagsBits = 46;
          v38._object = (void *)0xE100000000000000;
          String.append(_:)(v38);
          lazy protocol witness table accessor for type APIError and conformance APIError();
          swift_allocError();
          *(_QWORD *)v39 = v40;
          *(_QWORD *)(v39 + 8) = v42;
          *(_BYTE *)(v39 + 16) = 19;
          swift_willThrow();
        }
      }
    }

  }
  else
  {
    _StringGuts.grow(_:)(27);
    v8 = *(_QWORD *)(a2 + OBJC_IVAR___SGInput_name);
    v7 = *(_QWORD *)(a2 + OBJC_IVAR___SGInput_name + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v41 = v7;
    v9._countAndFlagsBits = 544108320;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    v10 = a2 + OBJC_IVAR___SGInput_node;
    swift_beginAccess();
    v11 = MEMORY[0x24954C3E4](v10);
    if (v11)
    {
      v12 = (void *)v11;
      v13 = *(_QWORD *)(v11 + OBJC_IVAR___SGNode_name);
      v14 = *(void **)(v11 + OBJC_IVAR___SGNode_name + 8);
      swift_bridgeObjectRetain();

    }
    else
    {
      v13 = 0x2064656D616E6E55;
      v14 = (void *)0xEC00000065646F6ELL;
    }
    v30._countAndFlagsBits = v13;
    v30._object = v14;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._object = (void *)0x8000000245FC8B20;
    v31._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v31);
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v32 = v8;
    *(_QWORD *)(v32 + 8) = v41;
    *(_BYTE *)(v32 + 16) = 19;
    swift_willThrow();
  }
}

uint64_t TopologicalSort.Path.debugDescription.getter()
{
  return TopologicalSort.Path.debugString.getter();
}

BOOL specialized Array._hoistableIsNativeTypeChecked()(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType?>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  __int128 v31[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, MetalFunctionNode>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v29)
          goto LABEL_34;
        v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v29)
            goto LABEL_34;
          v17 = v30[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_43;
                if (v8 >= v29)
                  goto LABEL_34;
                v17 = v30[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
      v20 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v15);
      if ((a2 & 1) != 0)
        outlined init with take of MetalFunctionNode(v20, (uint64_t)v31);
      else
        outlined init with copy of MetalFunctionNode((uint64_t)v20, (uint64_t)v31);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v19;
      result = outlined init with take of MetalFunctionNode(v31, *(_QWORD *)(v7 + 56) + 40 * v13);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, FunctionNodeID>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDef.Implementation]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, GeomPropDef>);
  v45 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = v3;
  v42 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v44 = v5;
  while (1)
  {
    if (v10)
    {
      v46 = (v10 - 1) & v10;
      v47 = v13;
      v20 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42)
      break;
    v22 = v43;
    v23 = v43[v21];
    v24 = v13 + 1;
    if (!v23)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v42)
        goto LABEL_33;
      v23 = v43[v24];
      if (!v23)
      {
        v25 = v13 + 3;
        if (v13 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            v24 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v24 >= v42)
              goto LABEL_33;
            v23 = v43[v24];
            ++v25;
            if (v23)
              goto LABEL_30;
          }
        }
        v24 = v13 + 3;
      }
    }
LABEL_30:
    v46 = (v23 - 1) & v23;
    v47 = v24;
    v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    v30 = *(_QWORD *)(v5 + 56);
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v32 = *v31;
    v33 = v31[1];
    v34 = (uint64_t *)(v30 + (v20 << 6));
    v35 = v34[1];
    v48 = *v34;
    v37 = v34[2];
    v36 = v34[3];
    v38 = v34[4];
    v39 = *((_BYTE *)v34 + 40);
    v51 = *((_BYTE *)v34 + 41);
    v50 = v34[6];
    v49 = *((_BYTE *)v34 + 56);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of GeomPropDef.GeomProp(v36, v38, v39);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v33;
    v19 = *(_QWORD *)(v7 + 56) + (v17 << 6);
    v13 = v47;
    *(_QWORD *)v19 = v48;
    *(_QWORD *)(v19 + 8) = v35;
    *(_QWORD *)(v19 + 16) = v37;
    *(_QWORD *)(v19 + 24) = v36;
    *(_QWORD *)(v19 + 32) = v38;
    *(_BYTE *)(v19 + 40) = v39;
    *(_BYTE *)(v19 + 41) = v51;
    *(_QWORD *)(v19 + 48) = v50;
    *(_BYTE *)(v19 + 56) = v49;
    ++*(_QWORD *)(v7 + 16);
    v5 = v44;
    v10 = v46;
  }
  swift_release();
  v3 = v41;
  v22 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t i;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  v50 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v48 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v46 = v2;
  v47 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      if ((v50 & 1) != 0)
        goto LABEL_10;
      goto LABEL_23;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v47)
      break;
    v27 = v48;
    v28 = v48[v26];
    ++v13;
    if (!v28)
    {
      v13 = v26 + 1;
      if (v26 + 1 >= v47)
        goto LABEL_33;
      v28 = v48[v13];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v47)
        {
LABEL_33:
          swift_release();
          v3 = v46;
          if ((v50 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v28 = v48[v29];
        if (!v28)
        {
          while (1)
          {
            v13 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_42;
            if (v13 >= v47)
              goto LABEL_33;
            v28 = v48[v13];
            ++v29;
            if (v28)
              goto LABEL_22;
          }
        }
        v13 = v29;
      }
    }
LABEL_22:
    v10 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if ((v50 & 1) != 0)
    {
LABEL_10:
      v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v20 = *v19;
      v21 = v19[1];
      v22 = *(_QWORD *)(v5 + 56) + 144 * v18;
      v24 = *(_QWORD *)v22;
      v23 = *(_QWORD *)(v22 + 8);
      v25 = *(_QWORD *)(v22 + 24);
      v51 = *(_QWORD *)(v22 + 40);
      v52 = *(_QWORD *)(v22 + 16);
      v53 = *(_QWORD *)(v22 + 56);
      v54 = *(_QWORD *)(v22 + 32);
      v55 = *(_QWORD *)(v22 + 72);
      v56 = *(_QWORD *)(v22 + 48);
      v57 = *(_BYTE *)(v22 + 80);
      v60 = *(_QWORD *)(v22 + 88);
      v61 = *(_QWORD *)(v22 + 96);
      v58 = *(_QWORD *)(v22 + 64);
      v59 = *(_QWORD *)(v22 + 104);
      v62 = *(_QWORD *)(v22 + 120);
      v63 = *(_QWORD *)(v22 + 112);
      v64 = *(_OWORD *)(v22 + 128);
      goto LABEL_24;
    }
LABEL_23:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v20 = *v30;
    v21 = v30[1];
    v31 = (__int128 *)(*(_QWORD *)(v5 + 56) + 144 * v18);
    v65 = *v31;
    v32 = v31[4];
    v34 = v31[1];
    v33 = v31[2];
    v68 = v31[3];
    v69 = v32;
    v66 = v34;
    v67 = v33;
    v35 = v31[8];
    v37 = v31[5];
    v36 = v31[6];
    v72 = v31[7];
    v73 = v35;
    v70 = v37;
    v71 = v36;
    v64 = v35;
    v62 = *((_QWORD *)&v72 + 1);
    v63 = v72;
    v59 = *((_QWORD *)&v36 + 1);
    v61 = v36;
    v60 = *((_QWORD *)&v37 + 1);
    v57 = v37;
    v55 = *((_QWORD *)&v69 + 1);
    v58 = v69;
    v56 = v68;
    v25 = *((_QWORD *)&v66 + 1);
    v53 = *((_QWORD *)&v68 + 1);
    v54 = v67;
    v23 = *((_QWORD *)&v65 + 1);
    v51 = *((_QWORD *)&v67 + 1);
    v52 = v66;
    v24 = v65;
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)&v65);
LABEL_24:
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(v7 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v11 + 8 * (v39 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v11 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v11 + 8 * v40);
      }
      while (v44 == -1);
      v14 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v20;
    v15[1] = v21;
    v16 = *(_QWORD *)(v7 + 56) + 144 * v14;
    *(_QWORD *)v16 = v24;
    *(_QWORD *)(v16 + 8) = v23;
    *(_QWORD *)(v16 + 16) = v52;
    *(_QWORD *)(v16 + 24) = v25;
    *(_QWORD *)(v16 + 32) = v54;
    *(_QWORD *)(v16 + 40) = v51;
    *(_QWORD *)(v16 + 48) = v56;
    *(_QWORD *)(v16 + 56) = v53;
    *(_QWORD *)(v16 + 64) = v58;
    *(_QWORD *)(v16 + 72) = v55;
    *(_BYTE *)(v16 + 80) = v57;
    *(_QWORD *)(v16 + 88) = v60;
    *(_QWORD *)(v16 + 96) = v61;
    *(_QWORD *)(v16 + 104) = v59;
    *(_QWORD *)(v16 + 112) = v63;
    *(_QWORD *)(v16 + 120) = v62;
    *(_OWORD *)(v16 + 128) = v64;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v46;
  v27 = v48;
  if ((v50 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v45 = 1 << *(_BYTE *)(v5 + 32);
  if (v45 >= 64)
    bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v45;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, (uniformPropertyName: String, type: MetalDataType)>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TextureSource, [TypedTexture]>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(v5 + 48) + 24 * v20;
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v32 = *(unsigned __int8 *)(v29 + 16);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      outlined copy of TextureSource();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v32);
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 24 * v17;
    *(_QWORD *)v18 = v31;
    *(_QWORD *)(v18 + 8) = v30;
    *(_BYTE *)(v18 + 16) = v32;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Int>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ShaderGraphNode.ID>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, InputSpec>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ShaderGraphNode.ID>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ShaderGraphNode.ID, ShaderGraphNode.ID>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Key, String>);
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  void (*v13)(char *);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int64_t v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61[72];
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Key, ShaderGraphNode>);
  v50 = a2;
  v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v48 = (_QWORD *)(v4 + 64);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v4 + 64);
    v47 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 64;
    result = swift_retain();
    v12 = 0;
    v49 = v4;
    while (1)
    {
      if (v9)
      {
        v51 = (v9 - 1) & v9;
        v52 = v12;
        v20 = __clz(__rbit64(v9)) | (v12 << 6);
      }
      else
      {
        v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v47)
          goto LABEL_33;
        v22 = v48[v21];
        v23 = v12 + 1;
        if (!v22)
        {
          v23 = v12 + 2;
          if (v12 + 2 >= v47)
            goto LABEL_33;
          v22 = v48[v23];
          if (!v22)
          {
            v24 = v12 + 3;
            if (v12 + 3 >= v47)
            {
LABEL_33:
              swift_release();
              v44 = v46;
              if ((v50 & 1) != 0)
              {
                v45 = 1 << *(_BYTE *)(v4 + 32);
                if (v45 >= 64)
                  bzero(v48, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v48 = -1 << v45;
                *(_QWORD *)(v4 + 16) = 0;
              }
              result = swift_release();
              goto LABEL_40;
            }
            v22 = v48[v24];
            if (!v22)
            {
              while (1)
              {
                v23 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v23 >= v47)
                  goto LABEL_33;
                v22 = v48[v23];
                ++v24;
                if (v22)
                  goto LABEL_30;
              }
            }
            v23 = v12 + 3;
          }
        }
LABEL_30:
        v51 = (v22 - 1) & v22;
        v52 = v23;
        v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      v29 = *(_QWORD *)(v4 + 48) + 80 * v20;
      v30 = *(void **)v29;
      v31 = *(void **)(v29 + 8);
      v33 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v29 + 24);
      v34 = *(_QWORD *)(v29 + 32);
      v35 = *(_QWORD *)(v29 + 40);
      v36 = *(_QWORD *)(v29 + 48);
      v37 = *(_QWORD *)(v29 + 56);
      v38 = *(_BYTE *)(v29 + 64);
      v39 = *(_QWORD *)(v29 + 72);
      v40 = *(_QWORD *)(v4 + 56) + 48 * v20;
      v42 = *(_QWORD *)v40;
      v41 = *(_QWORD *)(v40 + 8);
      v43 = *(_QWORD *)(v40 + 16);
      v53 = *(_OWORD *)(v40 + 24);
      v54 = *(_BYTE *)(v40 + 40);
      v60 = v38;
      v58 = v36;
      v59 = v37;
      v56 = v34;
      v57 = v35;
      v55 = v32;
      if ((v50 & 1) == 0)
      {
        outlined copy of SGDataTypeStorage(v30, v31, v33, v32, v34, v35, v36, v37, v38);
        swift_retain();
        outlined copy of NodePersonality(v42);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v32 = v55;
        v34 = v56;
        v35 = v57;
        v36 = v58;
        v37 = v59;
        v38 = v60;
      }
      v62 = v30;
      v63 = v31;
      v64 = v33;
      v65 = v32;
      v66 = v34;
      v67 = v35;
      v68 = v36;
      v69 = v37;
      v70 = v38;
      Hasher.init(_seed:)();
      SGDataTypeStorage.hash(into:)();
      v13 = *(void (**)(char *))(*(_QWORD *)v39 + 120);
      swift_retain();
      v13(v61);
      swift_release();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v6 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v10 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v10 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v10 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v10 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = *(_QWORD *)(v6 + 48) + 80 * v17;
      *(_QWORD *)v18 = v30;
      *(_QWORD *)(v18 + 8) = v31;
      *(_QWORD *)(v18 + 16) = v33;
      *(_QWORD *)(v18 + 24) = v55;
      *(_QWORD *)(v18 + 32) = v56;
      *(_QWORD *)(v18 + 40) = v57;
      *(_QWORD *)(v18 + 48) = v58;
      *(_QWORD *)(v18 + 56) = v59;
      *(_BYTE *)(v18 + 64) = v60;
      *(_QWORD *)(v18 + 72) = v39;
      v19 = *(_QWORD *)(v6 + 56) + 48 * v17;
      v12 = v52;
      *(_QWORD *)v19 = v42;
      *(_QWORD *)(v19 + 8) = v41;
      *(_QWORD *)(v19 + 16) = v43;
      *(_OWORD *)(v19 + 24) = v53;
      *(_BYTE *)(v19 + 40) = v54;
      ++*(_QWORD *)(v6 + 16);
      v4 = v49;
      v9 = v51;
    }
  }
  result = swift_release();
  v44 = v46;
LABEL_40:
  *v44 = v6;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, SGOutput>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, SGInput>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<FunctionNodeID, String>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [NodeDefinitionStore.Node]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.GeomProp>);
  v45 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v43 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = v3;
  v42 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v44 = v5;
  while (1)
  {
    if (v10)
    {
      v46 = (v10 - 1) & v10;
      v47 = v13;
      v20 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v42)
      break;
    v22 = v43;
    v23 = v43[v21];
    v24 = v13 + 1;
    if (!v23)
    {
      v24 = v13 + 2;
      if (v13 + 2 >= v42)
        goto LABEL_33;
      v23 = v43[v24];
      if (!v23)
      {
        v25 = v13 + 3;
        if (v13 + 3 >= v42)
        {
LABEL_33:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = v43[v25];
        if (!v23)
        {
          while (1)
          {
            v24 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v24 >= v42)
              goto LABEL_33;
            v23 = v43[v24];
            ++v25;
            if (v23)
              goto LABEL_30;
          }
        }
        v24 = v13 + 3;
      }
    }
LABEL_30:
    v46 = (v23 - 1) & v23;
    v47 = v24;
    v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_31:
    v30 = *(_QWORD *)(v5 + 56);
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v32 = *v31;
    v33 = v31[1];
    v34 = (uint64_t *)(v30 + (v20 << 6));
    v35 = v34[1];
    v48 = *v34;
    v50 = *((_OWORD *)v34 + 1);
    v37 = v34[4];
    v36 = v34[5];
    v38 = v34[6];
    v39 = *((_BYTE *)v34 + 56);
    v49 = *((_BYTE *)v34 + 57);
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of GeomPropDef.GeomProp(v36, v38, v39);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v33;
    v19 = *(_QWORD *)(v7 + 56) + (v17 << 6);
    v13 = v47;
    *(_QWORD *)v19 = v48;
    *(_QWORD *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v50;
    *(_QWORD *)(v19 + 32) = v37;
    *(_QWORD *)(v19 + 40) = v36;
    *(_QWORD *)(v19 + 48) = v38;
    *(_BYTE *)(v19 + 56) = v39;
    *(_BYTE *)(v19 + 57) = v49;
    ++*(_QWORD *)(v7 + 16);
    v5 = v44;
    v10 = v46;
  }
  swift_release();
  v3 = v41;
  v22 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v22, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDefinitionStore.Node>);
  v51 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v49 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v47 = v2;
  v48 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      if ((v51 & 1) != 0)
        goto LABEL_10;
      goto LABEL_23;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v26 >= v48)
      break;
    v27 = v49;
    v28 = v49[v26];
    ++v13;
    if (!v28)
    {
      v13 = v26 + 1;
      if (v26 + 1 >= v48)
        goto LABEL_33;
      v28 = v49[v13];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v48)
        {
LABEL_33:
          swift_release();
          v3 = v47;
          if ((v51 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v28 = v49[v29];
        if (!v28)
        {
          while (1)
          {
            v13 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_42;
            if (v13 >= v48)
              goto LABEL_33;
            v28 = v49[v13];
            ++v29;
            if (v28)
              goto LABEL_22;
          }
        }
        v13 = v29;
      }
    }
LABEL_22:
    v10 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v13 << 6);
    if ((v51 & 1) != 0)
    {
LABEL_10:
      v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v20 = *v19;
      v21 = v19[1];
      v22 = *(_QWORD *)(v5 + 56) + 160 * v18;
      v24 = *(_QWORD *)v22;
      v23 = *(_QWORD *)(v22 + 8);
      v25 = *(_QWORD *)(v22 + 24);
      v52 = *(_QWORD *)(v22 + 40);
      v53 = *(_QWORD *)(v22 + 16);
      v54 = *(_QWORD *)(v22 + 56);
      v55 = *(_QWORD *)(v22 + 32);
      v56 = *(_QWORD *)(v22 + 72);
      v57 = *(_QWORD *)(v22 + 48);
      v58 = *(_BYTE *)(v22 + 80);
      v61 = *(_QWORD *)(v22 + 88);
      v62 = *(_QWORD *)(v22 + 96);
      v59 = *(_QWORD *)(v22 + 64);
      v60 = *(_QWORD *)(v22 + 104);
      v63 = *(_OWORD *)(v22 + 112);
      v66 = *(_QWORD *)(v22 + 128);
      v67 = *(_QWORD *)(v22 + 144);
      v64 = *(_QWORD *)(v22 + 136);
      v65 = *(_QWORD *)(v22 + 152);
      goto LABEL_24;
    }
LABEL_23:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v20 = *v30;
    v21 = v30[1];
    v31 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 160 * v18);
    v32 = v31[1];
    v68[0] = *v31;
    v68[1] = v32;
    v33 = v31[5];
    v35 = v31[2];
    v34 = v31[3];
    v71 = v31[4];
    v72 = v33;
    v69 = v35;
    v70 = v34;
    v36 = v31[9];
    v38 = v31[6];
    v37 = v31[7];
    v75 = v31[8];
    v76 = v36;
    v73 = v38;
    v74 = v37;
    v66 = v75;
    v67 = v36;
    v64 = *((_QWORD *)&v75 + 1);
    v65 = *((_QWORD *)&v36 + 1);
    v63 = v37;
    v60 = *((_QWORD *)&v38 + 1);
    v62 = v38;
    v61 = *((_QWORD *)&v72 + 1);
    v58 = v72;
    v56 = *((_QWORD *)&v71 + 1);
    v59 = v71;
    v57 = v70;
    v25 = *((_QWORD *)&v32 + 1);
    v54 = *((_QWORD *)&v70 + 1);
    v55 = v69;
    v23 = *((_QWORD *)&v68[0] + 1);
    v52 = *((_QWORD *)&v69 + 1);
    v53 = v32;
    v24 = *(_QWORD *)&v68[0];
    swift_bridgeObjectRetain();
    outlined retain of NodeDefinitionStore.Node((uint64_t)v68);
LABEL_24:
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v39 = -1 << *(_BYTE *)(v7 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v11 + 8 * (v40 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v11 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v11 + 8 * v41);
      }
      while (v45 == -1);
      v14 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v20;
    v15[1] = v21;
    v16 = *(_QWORD *)(v7 + 56) + 160 * v14;
    *(_QWORD *)v16 = v24;
    *(_QWORD *)(v16 + 8) = v23;
    *(_QWORD *)(v16 + 16) = v53;
    *(_QWORD *)(v16 + 24) = v25;
    *(_QWORD *)(v16 + 32) = v55;
    *(_QWORD *)(v16 + 40) = v52;
    *(_QWORD *)(v16 + 48) = v57;
    *(_QWORD *)(v16 + 56) = v54;
    *(_QWORD *)(v16 + 64) = v59;
    *(_QWORD *)(v16 + 72) = v56;
    *(_BYTE *)(v16 + 80) = v58;
    *(_QWORD *)(v16 + 88) = v61;
    *(_QWORD *)(v16 + 96) = v62;
    *(_QWORD *)(v16 + 104) = v60;
    *(_OWORD *)(v16 + 112) = v63;
    *(_QWORD *)(v16 + 128) = v66;
    *(_QWORD *)(v16 + 136) = v64;
    *(_QWORD *)(v16 + 144) = v67;
    *(_QWORD *)(v16 + 152) = v65;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v47;
  v27 = v49;
  if ((v51 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v46 = 1 << *(_BYTE *)(v5 + 32);
  if (v46 >= 64)
    bzero(v27, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v46;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, MTLFunctionStitchingInputNode>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<ConstantKey #1 in MetalStitchingBackend.stitchingGraphs(for:augmenting:coreLibrary:additionalLibraries:), String>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Output, FunctionNodeID>);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Input, FunctionNodeID>);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t i;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  _QWORD *v31;
  char v32;
  _QWORD *v33;
  int64_t v34;
  _QWORD v35[5];
  char v36;
  uint64_t v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v32 = a2;
  v33 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = 1 << *(_BYTE *)(v6 + 32);
    v31 = (_QWORD *)(v6 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v6 + 64);
    v29 = v3;
    v30 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    for (i = 0; ; i = v34)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v34 = i;
        v12 = v11 | (i << 6);
      }
      else
      {
        v13 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v13 >= v30)
          goto LABEL_22;
        v14 = v31[v13];
        v15 = i + 1;
        if (!v14)
        {
          v15 = i + 2;
          if (i + 2 >= v30)
            goto LABEL_22;
          v14 = v31[v15];
          if (!v14)
          {
            v16 = i + 3;
            if (i + 3 >= v30)
            {
LABEL_22:
              swift_release();
              v4 = v29;
              if ((v32 & 1) != 0)
              {
                v28 = 1 << *(_BYTE *)(v6 + 32);
                if (v28 > 63)
                  bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v28;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v14 = v31[v16];
            if (!v14)
            {
              while (1)
              {
                v15 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_29;
                if (v15 >= v30)
                  goto LABEL_22;
                v14 = v31[v15];
                ++v16;
                if (v14)
                  goto LABEL_19;
              }
            }
            v15 = i + 3;
          }
        }
LABEL_19:
        v9 = (v14 - 1) & v14;
        v34 = v15;
        v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }
      v17 = *(_QWORD *)(v6 + 56);
      v18 = v6;
      v19 = *(_QWORD *)(v6 + 48) + 56 * v12;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v23 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v19 + 24);
      v24 = *(_QWORD *)(v19 + 32);
      v25 = *(_BYTE *)(v19 + 40);
      v26 = *(_QWORD *)(v19 + 48);
      v27 = *(_QWORD *)(v17 + 8 * v12);
      if ((v32 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      v35[0] = v20;
      v35[1] = v21;
      v35[2] = v23;
      v35[3] = v22;
      v35[4] = v24;
      v36 = v25;
      v37 = v26;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v35, v27, v33);
      v6 = v18;
    }
  }
  swift_release();
  *v4 = v33;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_33;
      v25 = *(_QWORD *)(v39 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_33:
          swift_release();
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v14 >= v38)
              goto LABEL_33;
            v25 = *(_QWORD *)(v39 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v14 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v6 + 56) + 24 * v22;
    v35 = *(_QWORD *)v34;
    v41 = *(_OWORD *)(v34 + 8);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_QWORD *)v20 = v35;
    *(_OWORD *)(v20 + 8) = v41;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v33 = a2;
    v9 = 0;
    v34 = (_QWORD *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v34[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v34[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v4 = v3;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v6 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v4 = v3;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v20 = v34[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v9 >= v13)
                  goto LABEL_31;
                v20 = v34[v9];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v9 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v16) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  char v15;
  void (*v16)(char *);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[72];
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v51 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v49 = (_QWORD *)(v6 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v6 + 64);
    v47 = v4;
    v48 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    v50 = v6;
    while (1)
    {
      if (v11)
      {
        v52 = (v11 - 1) & v11;
        v53 = v14;
        v23 = __clz(__rbit64(v11)) | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v48)
          goto LABEL_33;
        v25 = v49[v24];
        v26 = v14 + 1;
        if (!v25)
        {
          v26 = v14 + 2;
          if (v14 + 2 >= v48)
            goto LABEL_33;
          v25 = v49[v26];
          if (!v25)
          {
            v27 = v14 + 3;
            if (v14 + 3 >= v48)
            {
LABEL_33:
              swift_release();
              v4 = v47;
              if ((v51 & 1) != 0)
              {
                v46 = 1 << *(_BYTE *)(v6 + 32);
                if (v46 >= 64)
                  bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v49 = -1 << v46;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v49[v27];
            if (!v25)
            {
              while (1)
              {
                v26 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_40;
                if (v26 >= v48)
                  goto LABEL_33;
                v25 = v49[v26];
                ++v27;
                if (v25)
                  goto LABEL_30;
              }
            }
            v26 = v14 + 3;
          }
        }
LABEL_30:
        v52 = (v25 - 1) & v25;
        v53 = v26;
        v23 = __clz(__rbit64(v25)) + (v26 << 6);
      }
      v32 = *(_QWORD *)(v6 + 56);
      v33 = *(_QWORD *)(v6 + 48) + 80 * v23;
      v34 = *(void **)v33;
      v35 = *(void **)(v33 + 8);
      v37 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v33 + 24);
      v38 = *(_QWORD *)(v33 + 32);
      v39 = *(_QWORD *)(v33 + 40);
      v40 = *(_QWORD *)(v33 + 48);
      v41 = *(_QWORD *)(v33 + 56);
      v42 = *(_BYTE *)(v33 + 64);
      v43 = *(_QWORD *)(v33 + 72);
      v44 = (uint64_t *)(v32 + 16 * v23);
      v45 = v44[1];
      v55 = *v44;
      v56 = v36;
      v58 = v39;
      v59 = v40;
      v57 = v38;
      if ((v51 & 1) == 0)
      {
        outlined copy of SGDataTypeStorage(v34, v35, v37, v36, v38, v39, v40, v41, v42);
        swift_retain();
        swift_bridgeObjectRetain();
        v36 = v56;
        v38 = v57;
        v39 = v58;
        v40 = v59;
      }
      v61 = v34;
      v62 = v35;
      v63 = v37;
      v64 = v36;
      v65 = v38;
      v66 = v39;
      v67 = v40;
      v68 = v41;
      v54 = v41;
      v15 = v42;
      v69 = v42;
      Hasher.init(_seed:)();
      SGDataTypeStorage.hash(into:)();
      v16 = *(void (**)(char *))(*(_QWORD *)v43 + 120);
      swift_retain();
      v16(v60);
      swift_release();
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v19 == v29;
          if (v19 == v29)
            v19 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v19);
        }
        while (v31 == -1);
        v20 = __clz(__rbit64(~v31)) + (v19 << 6);
      }
      *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = *(_QWORD *)(v8 + 48) + 80 * v20;
      *(_QWORD *)v21 = v34;
      *(_QWORD *)(v21 + 8) = v35;
      *(_QWORD *)(v21 + 16) = v37;
      *(_QWORD *)(v21 + 24) = v56;
      *(_QWORD *)(v21 + 32) = v57;
      *(_QWORD *)(v21 + 40) = v58;
      *(_QWORD *)(v21 + 48) = v59;
      *(_QWORD *)(v21 + 56) = v54;
      *(_BYTE *)(v21 + 64) = v15;
      *(_QWORD *)(v21 + 72) = v43;
      v22 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20);
      *v22 = v55;
      v22[1] = v45;
      ++*(_QWORD *)(v8 + 16);
      v6 = v50;
      v11 = v52;
      v14 = v53;
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void (*v6)(_BYTE *);
  Swift::UInt v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;
  _BYTE v12[72];

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)a1);
  v6 = *(void (**)(_BYTE *))(**(_QWORD **)(a1 + 8) + 120);
  swift_retain();
  v6(v12);
  swift_release();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
  Hasher._combine(_:)(*(_QWORD *)(a1 + 48));
  Hasher._finalize()();
  v8 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  v9 = a3[6] + 56 * v8;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16) = v10;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v9 + 32) = result;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a3[7] + 8 * v8) = a2;
  ++a3[2];
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  BOOL v11;

  if (a1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v7 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x24954B748](v7 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = *(_QWORD *)&v8[OBJC_IVAR___SGInput_name] == a2 && *(_QWORD *)&v8[OBJC_IVAR___SGInput_name + 8] == a3;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_18;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized TopologicalSort.path(to:on:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, unint64_t a6, void *a7)
{
  void *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  void **v14;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v38;
  id v39;
  id v40;
  id v42;
  id v46;
  char *v47[3];
  char *v48;

  v7 = a7;
  v9 = *(_QWORD *)(a6 + 16);
  if (!v9)
  {
    v38 = MEMORY[0x24BEE4AF8];
    goto LABEL_27;
  }
  v10 = a6;
  swift_bridgeObjectRetain();
  v13 = 0;
  v14 = (void **)(v10 + 48);
  while (1)
  {
    if (*(v14 - 2) == a3 && *(v14 - 1) == a4)
    {
      v16 = *v14;
      if (!*v14)
      {
        if (!a5)
          break;
        goto LABEL_4;
      }
      if (a5)
      {
        type metadata accessor for SGNode();
        v46 = a3;
        v17 = a4;
        v18 = v16;
        v19 = a5;
        v20 = a5;
        v21 = a3;
        v22 = v19;
        v10 = static NSObject.== infix(_:_:)();

        a3 = v21;
        a5 = v20;
        if ((v10 & 1) != 0)
          break;
      }
    }
LABEL_4:
    ++v13;
    v14 += 3;
    if (v9 == v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  v23 = (void *)MEMORY[0x24954AF98](a1, a2);
  v24 = (char *)objc_msgSend(a3, sel_inputNamed_, v23);

  if (v24)
  {
    v25 = &v24[OBJC_IVAR___SGInput_edge];
    swift_beginAccess();
    v26 = MEMORY[0x24954C3E4](v25);
    if (v26)
    {
      v27 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
      }
      else if ((v27 & 0x8000000000000000) == 0)
      {
        if (v9 >= v27)
        {
          a5 = (void *)v26;
          v46 = a3;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_245FBF370;
          *(_QWORD *)(v28 + 32) = a5;
          v47[0] = (char *)v28;
          specialized Array._endMutation()();
          v10 = (unint64_t)v47[0];
          v48 = v47[0];
          if (v13 != -1)
          {
            v29 = ~v13;
            swift_bridgeObjectRetain_n();
            v30 = a5;
            do
            {
              v32 = (char *)*(v14 - 1);
              v33 = (char *)*v14;
              v47[0] = (char *)*(v14 - 2);
              v31 = v47[0];
              v47[1] = v32;
              v47[2] = v33;
              v34 = v33;
              v35 = v31;
              v36 = v32;
              closure #2 in TopologicalSort.path(to:on:)((unint64_t *)&v48, v47);
              v14 -= 3;

            }
            while (!__CFADD__(v29++, 1));
            swift_bridgeObjectRelease_n();
            v10 = (unint64_t)v48;
            goto LABEL_23;
          }
LABEL_32:
          v42 = a5;
LABEL_23:
          v38 = specialized Sequence.reversed()(v10);

          v7 = a7;
          a3 = v46;
          goto LABEL_27;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      __break(1u);
      goto LABEL_31;
    }

  }
LABEL_25:
  v38 = MEMORY[0x24BEE4AF8];
  v7 = a7;
LABEL_27:
  v39 = a3;
  v40 = v7;
  return v38;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph7SGInputCG_AF15TopologicalSortV4PathVs5NeverOTg504_s11d73Graph23inferTextureAssignments4fromSayAA05TypedD0VGAA7SGGraphC_tKFSayAA15gh2V4i5VGAJ7b10VXEfU_AlA7F7CXEfU0_A2kCVTf1cn_nTf4ngXg_n(unint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v28;

  v6 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    if (!v7)
      return v8;
    v28 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v10 = 0;
    v8 = v28;
    v22 = v6 & 0xC000000000000001;
    v11 = v6;
    while (v7 != v10)
    {
      if (v22)
        v12 = (char *)MEMORY[0x24954B748](v10, v6);
      else
        v12 = (char *)*(id *)(v6 + 8 * v10 + 32);
      v13 = v12;
      v14 = specialized TopologicalSort.path(to:on:)(*(_QWORD *)&v12[OBJC_IVAR___SGInput_name], *(_QWORD *)&v12[OBJC_IVAR___SGInput_name + 8], a4, a5, a6, a2, a3);
      v16 = v15;
      v18 = v17;

      v20 = *(_QWORD *)(v28 + 16);
      v19 = *(_QWORD *)(v28 + 24);
      if (v20 >= v19 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      ++v10;
      *(_QWORD *)(v28 + 16) = v20 + 1;
      v21 = (_QWORD *)(v28 + 24 * v20);
      v21[4] = v14;
      v21[5] = v16;
      v21[6] = v18;
      v6 = v11;
      if (v7 == v10)
        return v8;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #5 in inferTextureAssignments(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  Swift::String_optional v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = swift_bridgeObjectRetain() + 56;
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      swift_retain();
      outlined copy of TextureSource();
      v4 = MetalDataType.textureBaseTypeName()();
      outlined consume of TextureSource();
      swift_release();
      if (v4.value._object)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v6 = v3[2];
        v5 = v3[3];
        if (v6 >= v5 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
        v3[2] = v6 + 1;
        *(Swift::String_optional *)&v3[2 * v6 + 4] = v4;
      }
      v2 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v7 = swift_bridgeObjectRetain();
  v8 = specialized Set.init<A>(_:)(v7);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v9 <= 1)
    return swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(66);
  v10._object = (void *)0x8000000245FC8B80;
  v10._countAndFlagsBits = 0xD000000000000040;
  String.append(_:)(v10);
  v11._countAndFlagsBits = MEMORY[0x24954B1D8](v3, MEMORY[0x24BEE0D00]);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0xE000000000000000;
  *(_BYTE *)(v12 + 16) = 20;
  return swift_willThrow();
}

void specialized closure #2 in closure #1 in checkConstantInputs(in:)(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  id v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35[3];
  id v36;

  v9 = *(_QWORD *)(a1 + OBJC_IVAR___SGInput_name);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR___SGInput_name + 8);
  v10 = specialized TopologicalSort.path(to:on:)(v9, v8, a4, a5, a6, a2, a3);
  v12 = v11;
  v14 = v13;
  if (!(v10 >> 62))
  {
    v15 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_3;
LABEL_25:

LABEL_26:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v15)
    goto LABEL_25;
LABEL_3:
  v32 = v9;
  v33 = v14;
  v36 = v12;
  v14 = (void *)(v10 & 0xC000000000000001);
  swift_bridgeObjectRetain_n();
  v9 = 4;
  do
  {
    if (v14)
      v16 = (id)MEMORY[0x24954B748](v9 - 4, v10);
    else
      v16 = *(id *)(v10 + 8 * v9);
    v17 = v16;
    v12 = (void *)(v9 - 3);
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    v35[0] = v16;
    closure #1 in closure #2 in closure #1 in checkConstantInputs(in:)(v35, a1);
    if (v6)
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease();
      return;
    }

    ++v9;
  }
  while (v12 != (void *)v15);
  swift_bridgeObjectRelease_n();
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = (char *)MEMORY[0x24954B748](0, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v18 = (char *)*(id *)(v10 + 32);
  }
  v19 = (char *)*(id *)&v18[OBJC_IVAR___SGEdge_from];

  v20 = &v19[OBJC_IVAR___SGOutput_node];
  swift_beginAccess();
  v21 = (_BYTE *)MEMORY[0x24954C3E4](v20);

  if (!v21)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v29 = 0xD000000000000023;
    *(_QWORD *)(v29 + 8) = 0x8000000245FC8AF0;
    *(_BYTE *)(v29 + 16) = 7;
    swift_willThrow();

    goto LABEL_26;
  }
  v22 = v36;
  if ((v21[OBJC_IVAR___SGNode_data + 80] & 0xC0) != 0x80)
  {
    v34 = v8;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = 544108320;
    v23._object = (void *)0xE400000000000000;
    String.append(_:)(v23);
    v24 = a1 + OBJC_IVAR___SGInput_node;
    swift_beginAccess();
    v25 = MEMORY[0x24954C3E4](v24);
    if (v25)
    {
      v26 = (void *)v25;
      v28 = *(_QWORD *)(v25 + OBJC_IVAR___SGNode_name);
      v27 = *(void **)(v25 + OBJC_IVAR___SGNode_name + 8);
      swift_bridgeObjectRetain();

    }
    else
    {
      v27 = (void *)0xEC00000065646F6ELL;
      v28 = 0x2064656D616E6E55;
    }
    v30._countAndFlagsBits = v28;
    v30._object = v27;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v31 = v32;
    *(_QWORD *)(v31 + 8) = v34;
    *(_BYTE *)(v31 + 16) = 19;
    swift_willThrow();
  }

  swift_bridgeObjectRelease();
}

uint64_t specialized TopologicalSort.Path.isMaterialUniform.getter(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  char v14;

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_9;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = (char *)MEMORY[0x24954B748](0, a1);
LABEL_6:
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = (char *)*(id *)&v7[OBJC_IVAR___SGEdge_from];

    v9 = &v8[OBJC_IVAR___SGOutput_node];
    swift_beginAccess();
    v10 = (void *)MEMORY[0x24954C3E4](v9);

    if (v10)
    {
      v11 = *(void **)(a2 + OBJC_IVAR___SGGraph_argumentsNode);
      type metadata accessor for SGNode();
      v12 = v11;
      v13 = v10;
      v14 = static NSObject.== infix(_:_:)();

      return v14 & 1;
    }
LABEL_10:
    v14 = 0;
    return v14 & 1;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = (char *)*(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized TopologicalSort.Path.constantBoolValue.getter(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  _BYTE *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  int v12;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    if (result)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return 2;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_13;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = (char *)MEMORY[0x24954B748](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v4 = (char *)*(id *)(a1 + 32);
  }
  v5 = v4;
  swift_bridgeObjectRelease();
  v6 = (char *)*(id *)&v5[OBJC_IVAR___SGEdge_from];

  v7 = &v6[OBJC_IVAR___SGOutput_node];
  swift_beginAccess();
  v8 = (_BYTE *)MEMORY[0x24954C3E4](v7);

  if (v8)
  {
    v9 = &v8[OBJC_IVAR___SGNode_data];
    v10 = v8[OBJC_IVAR___SGNode_data + 80];
    if ((v10 & 0xC0) == 0x80 && *v9 == 1)
    {
      v11 = v9[2];
      v12 = v10 & 0x3F;

      if (!v12)
        return v11 & 1;
    }
    else
    {

    }
  }
  return 2;
}

uint64_t specialized TopologicalSort.Path.hasValue.getter(unint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t result;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  char v16;
  char *v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;

  swift_getObjectType();
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_27;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = (char *)MEMORY[0x24954B748](0, a1);
LABEL_6:
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = (char *)*(id *)&v7[OBJC_IVAR___SGEdge_from];

    v9 = &v8[OBJC_IVAR___SGOutput_node];
    swift_beginAccess();
    v10 = (char *)MEMORY[0x24954C3E4](v9);

    if (v10)
    {
      v11 = &v10[OBJC_IVAR___SGNode_graph];
      swift_beginAccess();
      v12 = MEMORY[0x24954C3E4](v11);
      if (v12)
      {
        v13 = (void *)v12;
        v14 = a2;
        v15 = v13;
        v16 = static NSObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_11;
      }
      v17 = &v10[OBJC_IVAR___SGNode_data];
      v18 = v10[OBJC_IVAR___SGNode_data + 80] >> 6;
      if (v18)
      {
        if (v18 != 1)
        {
LABEL_11:

          v19 = 1;
          return v19 & 1;
        }
      }
      else
      {
        v21 = *(_QWORD *)v17;
        v20 = *((_QWORD *)v17 + 1);
        v22 = *((_QWORD *)v17 + 4);
        v23 = *((_QWORD *)v17 + 5);
        v24 = *(_QWORD *)v17 == 0x656D756772615F5FLL && v20 == 0xEB0000000073746ELL;
        if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v21 == 0x746C757365725F5FLL && v20 == 0xE900000000000073)
            v19 = 0;
          else
            v19 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of MaterialXAvailability(v22, v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of MaterialXAvailability(v22, v23);

          return v19 & 1;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of MaterialXAvailability(v22, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v22, v23);
      }

    }
LABEL_28:
    v19 = 0;
    return v19 & 1;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = (char *)*(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized inferLightingModel(from:in:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (uint64_t *)(a1 + OBJC_IVAR___SGNode_data);
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR___SGNode_data + 80) <= 0x3Fu)
  {
    v3 = *v1;
    v2 = v1[1];
    swift_bridgeObjectRetain();
    v4 = (char *)&loc_245E7C7D8 + 4 * byte_245FBF390[specialized Surface.init(nodeDefID:)(v3, v2)];
    __asm { BR              X10 }
  }
  v6 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_name);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_name + 8);
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_QWORD *)v7 = v6;
  *(_QWORD *)(v7 + 8) = v5;
  *(_BYTE *)(v7 + 16) = 10;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

void sub_245E7C8AC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_245E46000, v1, v2, "inferLightingModel called on geometry modifier node", v3, 2u);
    MEMORY[0x24954C33C](v3, -1, -1);
  }

  JUMPOUT(0x245E7C890);
}

uint64_t specialized inferBlendMode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  void *v32;
  char v33;
  unsigned int v34;

  v6 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu
    || (v12 = *v6,
        v11 = v6[1],
        swift_bridgeObjectRetain(),
        v13 = specialized Surface.init(nodeDefID:)(v12, v11),
        v13 == 4)
    || v13 == 3)
  {
    v15 = *(_QWORD *)&a1[OBJC_IVAR___SGNode_name];
    v14 = *(_QWORD *)&a1[OBJC_IVAR___SGNode_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = v14;
    *(_BYTE *)(v16 + 16) = 10;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    v18 = specialized TopologicalSort.path(to:on:)(0x7974696361706FLL, 0xE700000000000000, a1, a2, a3, a4, a5);
    v32 = v19;
    v21 = v20;
    v34 = specialized TopologicalSort.Path.hasValue.getter(v18, v20);
    v22 = specialized TopologicalSort.path(to:on:)(0xD000000000000010, 0x8000000245FC8C90, a1, a2, a3, a4, a5);
    v24 = v23;
    v26 = v25;
    v33 = specialized TopologicalSort.Path.hasValue.getter(v22, v25);
    v27 = *(_QWORD *)(a4 + 16);
    if (v27)
    {
      v28 = (_QWORD *)(a4 + 32);
      do
      {
        v29 = *v28 + OBJC_IVAR___SGNode_data;
        if (*(unsigned __int8 *)(v29 + 80) <= 0x3Fu)
        {
          v30 = *(_QWORD *)v29 == static MaterialXNodeTokens.discardNodeID && *(_QWORD *)(v29 + 8) == unk_257527D08;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v31 = 0;
            goto LABEL_17;
          }
        }
        v28 += 3;
        --v27;
      }
      while (v27);
      v31 = 1;
    }
    else
    {
      v31 = 1;
    }
LABEL_17:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) != 0)
      return 0;
    else
      return v31 & v34;
  }
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v11;
  void *v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  char v26;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v3 = v2;
  v5 = a1;
  if (a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
LABEL_33:
    swift_bridgeObjectRelease();
    v26 = 0;
    return v26 & 1;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_33;
LABEL_3:
  v30 = v3;
  v7 = 0;
  v32 = v5 & 0xC000000000000001;
  v33 = OBJC_IVAR___SGGraph_argumentsNode;
  v28 = v5 + 32;
  v29 = v6;
  v31 = v5;
  while (1)
  {
    while (1)
    {
      if (v32)
        v8 = (char *)MEMORY[0x24954B748](v7, v5);
      else
        v8 = (char *)*(id *)(v28 + 8 * v7);
      v9 = v8;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      v3 = &v8[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      v11 = MEMORY[0x24954C3E4](v3);
      if (v11)
        break;

      if (v7 == v6)
        goto LABEL_33;
    }
    v12 = (void *)v11;
    v13 = *(char **)(v11 + OBJC_IVAR___SGEdge_from);
    v14 = &v13[OBJC_IVAR___SGOutput_attachment];
    swift_beginAccess();
    v15 = (void *)*((_QWORD *)v14 + 1);
    if (v15)
      break;

LABEL_27:
    v6 = v29;
    if (v7 == v29)
      goto LABEL_33;
  }
  v3 = *(char **)v14;
  v16 = v13;
  swift_bridgeObjectRetain();
  v17 = (void *)SGGraph.node(named:)((uint64_t)v3, v15);

  v18 = swift_bridgeObjectRelease();
  if (!v17)
  {

    goto LABEL_26;
  }
  MEMORY[0x24BDAC7A8](v18);
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v17, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:));
  if (v30)
  {
    swift_bridgeObjectRelease();

    return v26 & 1;
  }
  v3 = (char *)specialized SGGraph.connectedUpstreamSubgraph(rootedAt:)(v17);
  v20 = v19;
  swift_release();
  swift_release();
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
LABEL_24:

    swift_release();
    swift_release();
LABEL_26:
    v5 = v31;
    goto LABEL_27;
  }
  v22 = 0;
  while (1)
  {
    v3 = (char *)(*(_QWORD *)(*(_QWORD *)(v20 + 8 * v22 + 32) + OBJC_IVAR___SGEdge_from)
                + OBJC_IVAR___SGOutput_attachment);
    swift_beginAccess();
    v23 = *((_QWORD *)v3 + 1);
    if (v23)
    {
      v24 = (_QWORD *)(*(_QWORD *)(a2 + v33) + OBJC_IVAR___SGNode_name);
      v25 = *v24 == *(_QWORD *)v3 && v23 == v24[1];
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
    }
    if (v21 == ++v22)
      goto LABEL_24;
  }

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v26 = 1;
  return v26 & 1;
}

uint64_t specialized inferHasPremultipliedAlpha(from:in:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = (uint64_t *)(a1 + OBJC_IVAR___SGNode_data);
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR___SGNode_data + 80) <= 0x3Fu)
  {
    v3 = *v1;
    v2 = v1[1];
    swift_bridgeObjectRetain();
    v4 = (char *)&loc_245E7CFA8 + 4 * byte_245FBF395[specialized Surface.init(nodeDefID:)(v3, v2)];
    __asm { BR              X11 }
  }
  v6 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_name);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_name + 8);
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_QWORD *)v7 = v6;
  *(_QWORD *)(v7 + 8) = v5;
  *(_BYTE *)(v7 + 16) = 10;
  swift_bridgeObjectRetain();
  swift_willThrow();
  return v8 & 1;
}

void sub_245E7D074()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_245E46000, v1, v2, "inferHasPremultipliedAlpha called on geometry modifier node", v3, 2u);
    MEMORY[0x24954C33C](v3, -1, -1);
  }

  JUMPOUT(0x245E7D054);
}

uint64_t specialized inferApplyPostProcessToneMap(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  char v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu
    || (v12 = *v6,
        v11 = v6[1],
        swift_bridgeObjectRetain(),
        v13 = specialized Surface.init(nodeDefID:)(v12, v11),
        v13 == 4))
  {
    v21 = &a1[OBJC_IVAR___SGNode_name];
    v23 = *(_QWORD *)&a1[OBJC_IVAR___SGNode_name];
    v22 = *((_QWORD *)v21 + 1);
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v24 = v23;
    *(_QWORD *)(v24 + 8) = v22;
    *(_BYTE *)(v24 + 16) = 10;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  else if (v13 == 1)
  {
    v14 = specialized TopologicalSort.path(to:on:)(0xD000000000000017, 0x8000000245FC8CD0, a1, a2, a3, a4, a5);
    v16 = v15;
    v18 = v17;
    v19 = specialized TopologicalSort.Path.constantBoolValue.getter(v14);

    swift_bridgeObjectRelease();
    v20 = (v19 == 2) | v19;
  }
  else
  {
    v20 = 1;
  }
  return v20 & 1;
}

void specialized conditionallyInsertDiscardNode(from:in:)(char *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  id v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t inited;
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t *v56;
  Swift::OpaquePointer_optional v57;

  v7 = (uint64_t *)&a1[OBJC_IVAR___SGNode_data];
  if (a1[OBJC_IVAR___SGNode_data + 80] > 0x3Fu
    || (v8 = v5,
        v14 = *v7,
        v13 = v7[1],
        swift_bridgeObjectRetain(),
        specialized Surface.init(nodeDefID:)(v14, v13) >= 3u))
  {
    v36 = *(_QWORD *)&a1[OBJC_IVAR___SGNode_name];
    v35 = *(_QWORD *)&a1[OBJC_IVAR___SGNode_name + 8];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v37 = v36;
    *(_QWORD *)(v37 + 8) = v35;
    *(_BYTE *)(v37 + 16) = 10;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return;
  }
  v15 = specialized TopologicalSort.path(to:on:)(0xD000000000000010, 0x8000000245FC8C90, a1, a2, a3, a4, a5);
  v17 = v16;
  v19 = v18;
  v20 = specialized TopologicalSort.Path.hasValue.getter(v15, v18);

  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
    return;
  v21 = a2;
  v22 = swift_bridgeObjectRetain();
  v23 = (char *)specialized Sequence.first(where:)(v22, 0x7974696361706FLL, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (!v23
    || (v24 = &v23[OBJC_IVAR___SGInput_edge],
        swift_beginAccess(),
        v25 = (char *)MEMORY[0x24954C3E4](v24),
        v23,
        !v25))
  {
LABEL_14:

    return;
  }
  v26 = swift_bridgeObjectRetain();
  v27 = (char *)specialized Sequence.first(where:)(v26, 0xD000000000000010, 0x8000000245FC8C90);
  swift_bridgeObjectRelease();
  if (!v27
    || (v28 = &v27[OBJC_IVAR___SGInput_edge],
        swift_beginAccess(),
        v29 = (char *)MEMORY[0x24954C3E4](v28),
        v27,
        !v29))
  {

    goto LABEL_14;
  }
  v30 = swift_bridgeObjectRetain();
  v31 = (char *)specialized Sequence.first(where:)(v30, 0x7974696361706FLL, 0xE700000000000000);
  swift_bridgeObjectRelease();
  if (!v31)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)v38 = xmmword_245FBF380;
    *(_BYTE *)(v38 + 16) = 21;
    swift_willThrow();

    return;
  }
  v33 = static MaterialXNodeTokens.discardNodeID;
  v32 = (void *)unk_257527D08;
  swift_bridgeObjectRetain();
  v34 = specialized static SGNode.create(nodeDefName:name:)(v33, v32, 0xD000000000000019, (void *)0x8000000245FC8CB0);
  if (v8)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v39 = v34;
  swift_bridgeObjectRelease();
  SGGraph.remove(edge:)((uint64_t)v25);
  SGGraph.remove(edge:)((uint64_t)v29);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBF370;
  *(_QWORD *)(inited + 32) = v39;
  v56 = (uint64_t *)inited;
  specialized Array._endMutation()();
  v41 = v56;
  v42 = v39;
  v57.value._rawValue = v56;
  v43 = (char *)v21;
  SGGraph.insert(_:)(v57);
  if (v44)
  {
    swift_bridgeObjectRelease();

    return;
  }
  swift_bridgeObjectRelease();
  v45 = *(_QWORD *)&v42[OBJC_IVAR___SGNode_outputs];
  if ((v45 & 0xC000000000000001) != 0)
  {
    v46 = (char *)MEMORY[0x24954B748](0);
  }
  else
  {
    if (!*(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_30;
    }
    v46 = (char *)*(id *)(v45 + 32);
  }
  v47 = v46;
  v48 = v31;
  SGGraph.connect(_:to:)(v47, v31);

  v55 = v48;
  v41 = &OBJC_IVAR___SGEdge_from;
  v43 = *(char **)&v25[OBJC_IVAR___SGEdge_from];
  v31 = (char *)OBJC_IVAR___SGNode_inputs;
  v49 = *(_QWORD *)&v42[OBJC_IVAR___SGNode_inputs];
  if ((v49 & 0xC000000000000001) != 0)
  {
LABEL_30:
    v50 = (char *)MEMORY[0x24954B748](0);
    goto LABEL_24;
  }
  if (!*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_32;
  }
  v50 = (char *)*(id *)(v49 + 32);
LABEL_24:
  v51 = v50;
  SGGraph.connect(_:to:)(v43, v50);

  v43 = *(char **)&v29[*v41];
  v52 = *(_QWORD *)&v31[(_QWORD)v42];
  if ((v52 & 0xC000000000000001) != 0)
  {
LABEL_32:
    v53 = (char *)MEMORY[0x24954B748](1);
    goto LABEL_27;
  }
  if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v53 = (char *)*(id *)(v52 + 40);
LABEL_27:
    v54 = v53;
    SGGraph.connect(_:to:)(v43, v53);

    return;
  }
  __break(1u);
}

uint64_t partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:)(a1);
}

ValueMetadata *type metadata accessor for MaterialXNodeTokens()
{
  return &type metadata for MaterialXNodeTokens;
}

void destroy for TopologicalSort.Path(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *initializeBufferWithCopyOfBuffer for TopologicalSort.Path(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v3;
  v6 = v4;
  return a1;
}

_QWORD *assignWithCopy for TopologicalSort.Path(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for TopologicalSort.Path(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for TopologicalSort.Path(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TopologicalSort.Path(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TopologicalSort.Path()
{
  return &type metadata for TopologicalSort.Path;
}

uint64_t outlined retain of NodeDefinitionStore.Node(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type APIError and conformance APIError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type APIError and conformance APIError;
  if (!lazy protocol witness table cache variable for type APIError and conformance APIError)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for APIError, &type metadata for APIError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type APIError and conformance APIError);
  }
  return result;
}

uint64_t sub_245E7DADC()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [TypedTexture] and conformance [A], &demangling cache variable for type metadata for [TypedTexture], MEMORY[0x24BEE12E0]);
}

id outlined copy of NodeData(id result, int a2, void *a3, id a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  int v13;

  v13 = a11 >> 6;
  switch(v13)
  {
    case 2:
      return outlined copy of SGDataTypeStorage(a3, a4, a5, a6, a7, a8, a9, a10, a11 & 0x3F);
    case 1:
      return result;
    case 0:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return (id)outlined copy of MaterialXAvailability(a5, a6);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in inferShaderHasCustomUniform(from:shaderType:)(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + OBJC_IVAR___SGNode_data + 80);
  if ((v2 & 0xC0) == 0x80 && (v2 & 0x3F) == 6 && *(_QWORD *)(result + OBJC_IVAR___SGNode_data) == 13)
    **(_BYTE **)(v1 + 16) = 1;
  return result;
}

void outlined consume of NodeData(void *a1, int a2, void *a3, id a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  int v13;

  v13 = a11 >> 6;
  switch(v13)
  {
    case 2:
      outlined consume of SGDataTypeStorage(a3, a4, a5, a6, a7, a8, a9, a10, a11 & 0x3F);
      break;
    case 1:

      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MaterialXAvailability(a5, a6);
      break;
  }
}

void *MaterialCodingContainer.version.unsafeMutableAddressor()
{
  return &static MaterialCodingContainer.version;
}

uint64_t static MaterialCodingContainer.version.getter()
{
  return 1;
}

uint64_t MaterialCodingContainer.init(graph:materialConfiguration:)()
{
  return 1;
}

void MaterialCodingContainer.init(from:)(_QWORD *a1)
{
  specialized MaterialCodingContainer.init(from:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MaterialCodingContainer.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialCodingContainer.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MaterialCodingContainer.CodingKeys()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialCodingContainer.CodingKeys()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MaterialCodingContainer.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6870617267;
  if (*v0 != 1)
    v1 = 0xD000000000000015;
  if (*v0)
    return v1;
  else
    return 0x6E6F6973726576;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MaterialCodingContainer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized MaterialCodingContainer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MaterialCodingContainer.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance MaterialCodingContainer.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MaterialCodingContainer.CodingKeys()
{
  lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MaterialCodingContainer.CodingKeys()
{
  lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MaterialCodingContainer.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v12 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MaterialCodingContainer.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v14 = v12;
    v13 = 1;
    type metadata accessor for SGGraph();
    lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type SGGraph and conformance SGGraph, (uint64_t (*)(uint64_t))type metadata accessor for SGGraph, (uint64_t)&protocol conformance descriptor for SGGraph);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v14 = a4;
    v13 = 2;
    type metadata accessor for SGMaterialConfiguration();
    lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type SGMaterialConfiguration and conformance SGMaterialConfiguration, (uint64_t (*)(uint64_t))type metadata accessor for SGMaterialConfiguration, (uint64_t)&protocol conformance descriptor for SGMaterialConfiguration);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void protocol witness for Decodable.init(from:) in conformance MaterialCodingContainer(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  specialized MaterialCodingContainer.init(from:)(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MaterialCodingContainer(_QWORD *a1)
{
  uint64_t *v1;

  return MaterialCodingContainer.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void specialized MaterialCodingContainer.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MaterialCodingContainer.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    LOBYTE(v13) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    if (v7 == 1)
    {
      type metadata accessor for SGGraph();
      HIBYTE(v12) = 1;
      lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type SGGraph and conformance SGGraph, (uint64_t (*)(uint64_t))type metadata accessor for SGGraph, (uint64_t)&protocol conformance descriptor for SGGraph);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v8 = v13;
      type metadata accessor for SGMaterialConfiguration();
      HIBYTE(v12) = 2;
      lazy protocol witness table accessor for type SGDataType and conformance SGDataType(&lazy protocol witness table cache variable for type SGMaterialConfiguration and conformance SGMaterialConfiguration, (uint64_t (*)(uint64_t))type metadata accessor for SGMaterialConfiguration, (uint64_t)&protocol conformance descriptor for SGMaterialConfiguration);
      v9 = v8;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v11 = v13;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);

      return;
    }
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v10 = v7;
    *(_QWORD *)(v10 + 8) = 1;
    *(_BYTE *)(v10 + 16) = 12;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialCodingContainer.CodingKeys, &unk_25170D148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialCodingContainer.CodingKeys, &unk_25170D148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialCodingContainer.CodingKeys, &unk_25170D148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialCodingContainer.CodingKeys, &unk_25170D148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer.CodingKeys and conformance MaterialCodingContainer.CodingKeys);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MaterialCodingContainer(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for MaterialCodingContainer(uint64_t a1)
{

}

_QWORD *assignWithCopy for MaterialCodingContainer(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for MaterialCodingContainer(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialCodingContainer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialCodingContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialCodingContainer()
{
  return &type metadata for MaterialCodingContainer;
}

uint64_t getEnumTagSinglePayload for MaterialCodingContainer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialCodingContainer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_245E7E5F0 + 4 * byte_245FBF425[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_245E7E624 + 4 * byte_245FBF420[v4]))();
}

uint64_t sub_245E7E624(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E7E62C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245E7E634);
  return result;
}

uint64_t sub_245E7E640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245E7E648);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_245E7E64C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E7E654(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for MaterialCodingContainer.CodingKeys()
{
  return &unk_25170D148;
}

uint64_t specialized MaterialCodingContainer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6870617267 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000245FC8D10)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

Swift::Void __swiftcall OrderedSet.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = v3;
    v7 = *(_QWORD *)(v2 + 16);
    v8 = type metadata accessor for ContiguousArray();
    MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v8);
    MutableCollection.swapAt(_:_:)();
    if (*v3)
    {
      OrderedSet._ensureUnique()();
      v9 = *v3;
      if (*v4)
      {
        swift_retain();
        closure #1 in OrderedSet.swapAt(_:_:)((uint64_t *)(v9 + 16), v9 + 32, (uint64_t)v4, a1, a2, v7);
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t closure #1 in OrderedSet.swapAt(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *(_QWORD *)(a6 - 8);
  v24 = a2;
  v25 = v9;
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v22 - v13;
  v23 = v15;
  ContiguousArray.subscript.getter();
  ContiguousArray.subscript.getter();
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  result = *a1;
  v18 = 1 << *a1;
  v19 = v18 - 1;
  if (__OFSUB__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v20 = 1 << *a1;
    if (!__OFSUB__(v20, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v19 & v16, a5, (v20 - 1) & result, v23, a1, v24);
      v21 = *(void (**)(char *, uint64_t))(v25 + 8);
      v21(v12, a6);
      return ((uint64_t (*)(char *, uint64_t))v21)(v14, a6);
    }
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues<A>(for:withCurrentValue:and:withCurrentValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  result = *a5;
  v12 = 1 << *a5;
  v13 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v14 = 1 << *a5;
    if (!__OFSUB__(v14, 1))
      return _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v13 & v10, a2, (v14 - 1) & result, a4, a5, a6);
  }
  __break(1u);
  return result;
}

void OrderedSet.partition(by:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  OrderedSet._partition(by:callback:)(a1, a2, (void (*)(uint64_t, uint64_t))destructiveProjectEnumData for NodePersonality.ShaderType, 0, a3);
}

void OrderedSet._partition(by:callback:)(uint64_t (*a1)(char *), uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*v5)
  {
    OrderedSet._ensureUnique()();
    v11 = *v5;
    if (*v5)
    {
      v12 = *(_QWORD *)(a5 + 24);
      swift_retain();
      closure #1 in OrderedSet._partition(by:callback:)((uint64_t *)(v11 + 16), v11 + 32, a1, a2, a3, a4, &v14, v12);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v13 = type metadata accessor for ContiguousArray();
    MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v13);
    MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v13);
    MutableCollection<>.partition(by:)();
  }
}

uint64_t closure #1 in OrderedSet._partition(by:callback:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v18;
  char v19;

  v14 = type metadata accessor for ContiguousArray();
  result = ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)();
  if (!v8)
  {
    if (v19 == 1)
    {
      MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v14);
      v16 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v14);
      return MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v14, (uint64_t)a7, v16, a8);
    }
    else
    {
      *a7 = v18;
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in OrderedSet._partition(by:callback:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v13 = type metadata accessor for UnsafeMutableBufferPointer();
  MEMORY[0x24954C264](MEMORY[0x24BEE1D28], v13);
  v14 = MEMORY[0x24954C264](MEMORY[0x24BEE1D38], v13);
  result = MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v13, (uint64_t)&v19, v14, a8);
  if (!v18)
    *a7 = v19;
  return result;
}

uint64_t MutableCollection<>._partition(with:by:callback:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD);
  uint64_t v47;
  char v48;
  char v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t, uint64_t);
  void (*v63)(char *, _QWORD);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  void (*v75)(char *, _QWORD);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, _QWORD);
  char *v82;
  uint64_t *v83;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  char *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  char *v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  uint64_t AssociatedTypeWitness;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t (*v128)(char *);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char v135[8];
  uint64_t v136;

  v12 = v11;
  v13 = a7;
  v105 = a6;
  v104 = a5;
  v128 = a3;
  v129 = a4;
  v103 = a2;
  v108 = a1;
  v114 = a8;
  v14 = *(_QWORD *)(a7 - 8);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v107 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v117 = (char *)&v98 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v127 = (char *)&v98 - v19;
  v109 = v20;
  v21 = *(_QWORD *)(v20 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v115 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v106 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v112 = (char *)&v98 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v116 = (char *)&v98 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v113 = (char *)&v98 - v28;
  v29 = swift_getAssociatedTypeWitness();
  v125 = *(_QWORD *)(v29 - 8);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v111 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v120 = (char *)&v98 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)&v98 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v98 - v37;
  dispatch thunk of Collection.startIndex.getter();
  v130 = v10;
  dispatch thunk of Collection.endIndex.getter();
  v134 = v21;
  v39 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v132 = v38;
  v133 = v36;
  v131 = v29;
  v126 = v39;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
LABEL_2:
    v40 = v125;
    v41 = *(void (**)(char *, uint64_t))(v125 + 8);
    v42 = v114;
LABEL_17:
    v96 = v131;
    v41(v133, v131);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))(v42, v132, v96);
  }
  else
  {
    v101 = a10;
    v119 = a9;
    v122 = v14;
    v43 = AssociatedTypeWitness;
    v44 = v113;
    v45 = v130;
    while (1)
    {
      v46 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v47 = v115;
      v124 = *(_QWORD *)(v115 + 16);
      ((void (*)(char *))v124)(v44);
      v46(v135, 0);
      v48 = v128(v44);
      if (v12)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v43);
        v41 = *(void (**)(char *, uint64_t))(v125 + 8);
LABEL_19:
        v97 = v131;
        v41(v133, v131);
        return ((uint64_t (*)(char *, uint64_t))v41)(v132, v97);
      }
      v49 = v48;
      v121 = *(void (**)(char *, uint64_t))(v47 + 8);
      v121(v44, v43);
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      if ((v49 & 1) != 0)
        break;
      v94 = v127;
      v50(v127, v45, v13);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v94, v13);
LABEL_14:
      v95 = dispatch thunk of static Equatable.== infix(_:_:)();
      v14 = v122;
      if ((v95 & 1) != 0)
        goto LABEL_2;
    }
    v136 = 0;
    v51 = v127;
    do
    {
      v52 = v51;
      v53 = v51;
      v54 = v130;
      v55 = v50;
      v50(v53, v130, v13);
      dispatch thunk of BidirectionalCollection.formIndex(before:)();
      v56 = *(void (**)(char *, uint64_t))(v122 + 8);
      v56(v52, v13);
      v57 = v125;
      v58 = v13;
      v59 = v120;
      v60 = v131;
      v118 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
      v118(v120, v132, v131);
      LOBYTE(v52) = dispatch thunk of static Equatable.== infix(_:_:)();
      v41 = *(void (**)(char *, uint64_t))(v57 + 8);
      v41(v59, v60);
      if ((v52 & 1) != 0)
      {
        v42 = v114;
        v40 = v125;
        goto LABEL_17;
      }
      v61 = v117;
      v62 = v55;
      v55(v117, v54, v58);
      v63 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v64 = v116;
      v65 = AssociatedTypeWitness;
      ((void (*)(char *))v124)(v116);
      v63(v135, 0);
      v56(v61, v58);
      v66 = v136;
      v67 = v128(v64);
      v136 = v66;
      if (v66)
      {
        v121(v64, v65);
        goto LABEL_19;
      }
      v68 = v67;
      v13 = v58;
      v121(v64, v65);
      v51 = v127;
      v50 = v62;
    }
    while ((v68 & 1) != 0);
    v110 = v56;
    v69 = v120;
    v70 = v131;
    v102 = v62;
    v71 = v118;
    v118(v120, v132, v131);
    v72 = v111;
    v71(v111, v133, v70);
    v73 = v130;
    dispatch thunk of MutableCollection.swapAt(_:_:)();
    v41(v72, v70);
    v41(v69, v70);
    v102(v51, v73, v13);
    v118(v69, v132, v70);
    dispatch thunk of Collection.startIndex.getter();
    v100 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v41(v72, v70);
    v41(v69, v70);
    v110(v51, v13);
    v102(v51, v73, v13);
    v74 = v118;
    v118(v69, v133, v70);
    dispatch thunk of Collection.startIndex.getter();
    v99 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v41(v72, v70);
    v41(v69, v70);
    v110(v51, v13);
    v102(v51, v130, v13);
    v74(v69, v132, v70);
    v75 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v76 = AssociatedTypeWitness;
    ((void (*)(char *))v124)(v112);
    v75(v135, 0);
    v41(v69, v70);
    v77 = v51;
    v78 = v76;
    v110(v77, v13);
    v79 = v107;
    v102(v107, v130, v13);
    v80 = v111;
    v118(v111, v133, v70);
    v81 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
    v82 = v106;
    ((void (*)(char *))v124)(v106);
    v81(v135, 0);
    v41(v80, v70);
    v110(v79, v13);
    v83 = v108;
    v124 = dispatch thunk of Hashable._rawHashValue(seed:)();
    result = *v83;
    v85 = 1 << *v83;
    v86 = v85 - 1;
    if (__OFSUB__(v85, 1))
    {
      __break(1u);
    }
    else
    {
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v87 = 1 << *v83;
      if (!__OFSUB__(v87, 1))
      {
        v88 = (v87 - 1) & result;
        v89 = v86 & v124;
        v90 = v99;
        v91 = v100;
        _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v89, v99, v88, v100, v83, v103);
        v92 = v121;
        v121(v82, v78);
        v43 = v78;
        v92(v112, v78);
        v104(v91, v90);
        v93 = v127;
        v45 = v130;
        v62(v127, v130, v13);
        dispatch thunk of Collection.formIndex(after:)();
        v12 = v136;
        v44 = v113;
        v110(v93, v13);
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t j;

  v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a5, a6);
  for (i = v11; i; v11 = i)
  {
    v12 = -1 << *a5;
    v13 = (v12 ^ ~v11) + ((uint64_t)a5[1] >> 6);
    if (v13 >= ~v12)
      v14 = ~v12;
    else
      v14 = 0;
    if (v13 - v14 == a2)
      break;
    _HashTable.BucketIterator.advance()();
  }
  _HashTable.BucketIterator.currentValue.setter(a4, 0);
  v15 = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, a5, a6);
  for (j = v15; j; v15 = j)
  {
    v16 = -1 << *a5;
    v17 = (v16 ^ ~v15) + ((uint64_t)a5[1] >> 6);
    if (v17 >= ~v16)
      v18 = ~v16;
    else
      v18 = 0;
    if (v17 - v18 == a4)
      break;
    _HashTable.BucketIterator.advance()();
  }
  return _HashTable.BucketIterator.currentValue.setter(a2, 0);
}

void OrderedSet.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v5);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v5);
  MutableCollection<>.sort(by:)();
  type metadata accessor for OrderedSet(0, v4, *(_QWORD *)(a3 + 24), v6);
  OrderedSet._regenerateExistingHashTable()();
}

void OrderedSet<>.sort()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v3);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v3);
  MutableCollection<>.sort()();
  type metadata accessor for OrderedSet(0, v2, *(_QWORD *)(a1 + 24), v4);
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.shuffle()()
{
  OrderedSet.shuffle<A>(using:)();
}

void OrderedSet.shuffle<A>(using:)()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v0);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v0);
  MutableCollection<>.shuffle<A>(using:)();
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.reverse()()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v0);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v0);
  MutableCollection<>.reverse()();
  OrderedSet._regenerateHashTable()();
}

uint64_t OrderedSet._halfStablePartition<A>(values:by:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, char *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v13 = v6 + 1;
  v14 = *(_QWORD *)(a5 + 16);
  result = ContiguousArray.count.getter();
  if (result == a2)
  {
    v33 = v6;
    v40 = 0;
    type metadata accessor for ContiguousArray();
    ContiguousArray._makeMutableAndUnique()();
    v16 = *(_QWORD *)(*v13 + 16);
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = v14;
    v20 = a5;
    v21 = a6;
    v22 = a3;
    v23 = a2;
    v24 = *v13 + v18;
    v38 = v24;
    v39 = v16;
    v34 = v16;
    v35 = v19;
    v25 = *(_QWORD *)(v20 + 24);
    closure #1 in OrderedSet._halfStablePartition<A>(values:by:)((uint64_t)&v38, &v40, v22, a4, a1, v23, v19, v21);
    if (v36)
    {
      $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v38, v24, v34);
    }
    else
    {
      v31 = v18;
      v32 = v21;
      $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v38, v24, v34);
      v26 = v40;
      if (v26 >= ContiguousArray.count.getter())
      {
        return ContiguousArray.count.getter();
      }
      else
      {
        OrderedSet._ensureUnique()();
        v27 = *v33;
        *v33 = 0;
        ContiguousArray._makeMutableAndUnique()();
        v28 = v33[1];
        v29 = *(_QWORD *)(v28 + 16);
        v30 = v28 + v31;
        v38 = v28 + v31;
        v39 = v29;
        closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(&v38, &v40, v22, a1, v23, v27, v35, &v37, v32, v25);
        $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(&v38, v30, v29);
        v24 = v37;
        swift_retain();
        swift_release();
        *v33 = v27;
        swift_release();
      }
    }
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *closure #1 in OrderedSet._halfStablePartition<A>(values:by:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, char *);
  uint64_t v38;
  uint64_t v39;

  v37 = a3;
  v38 = a5;
  v36 = a8;
  v34 = *(_QWORD *)(a8 - 8);
  v9 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v33 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  result = (_QWORD *)MEMORY[0x24BDAC7A8](v9);
  v32 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v15;
  if (*v15 < result[1])
  {
    v17 = *(_QWORD *)(v12 + 72);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v30 = v17;
    v31 = v12;
    v28 = result;
    v19 = v32;
    v18 = v33;
    v21 = v34;
    v20 = v35;
    do
    {
      v29(v19, *result + v30 * v16, v20);
      v22 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v38 + *(_QWORD *)(v21 + 72) * v16, v36);
      v23 = v39;
      v24 = v37(v19, v18);
      v25 = v22;
      v26 = v31;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v25);
      result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v19, v20);
      v39 = v23;
      if (v23 || (v24 & 1) != 0)
        break;
      v16 = *a2 + 1;
      if (__OFADD__(*a2, 1))
      {
        __break(1u);
        return result;
      }
      *a2 = v16;
      result = v28;
    }
    while (v16 < v28[1]);
  }
  return result;
}

void closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(_QWORD *a1@<X0>, Swift::Int *a2@<X1>, uint64_t (*a3)(char *, char *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, Swift::Int *a8@<X8>, uint64_t a9, uint64_t a10)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int *v17;
  Swift::Int v18;
  Swift::Int v19;
  Swift::Int v20;
  char *v21;
  Swift::Int *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  _QWORD *v41;
  Swift::Int *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, char *);
  uint64_t v48;
  uint64_t v49;

  v38 = a5;
  v39 = a6;
  v47 = a3;
  v48 = a4;
  v12 = a1;
  v34 = a8;
  v46 = *(_QWORD *)(a9 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v45 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v43 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v17;
  v19 = *v17 + 1;
  if (__OFADD__(*v17, 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v20 = v12[1];
  if (v20 < v19)
  {
LABEL_20:
    __break(1u);
    return;
  }
  if (v19 != v20)
  {
    v36 = (uint64_t *)(v39 + 16);
    v37 = a10;
    v35 = v39 + 32;
    v41 = v12;
    v42 = a2;
    v40 = v20;
    v21 = v45;
    while (v19 < v20)
    {
      v23 = *v12;
      v24 = v43;
      v25 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v23 + *(_QWORD *)(v44 + 72) * v19, a7);
      v26 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v21, v48 + *(_QWORD *)(v46 + 72) * v19, a9);
      v27 = v49;
      v28 = a7;
      v29 = v47(v24, v21);
      (*(void (**)(char *))(v26 + 8))(v21);
      v30 = *(void (**)(char *, uint64_t))(v25 + 8);
      v31 = v28;
      v30(v24, v28);
      v49 = v27;
      if (v27)
        return;
      if ((v29 & 1) != 0)
      {
        a7 = v28;
        v12 = v41;
        v22 = v42;
        v20 = v40;
      }
      else
      {
        v12 = v41;
        v22 = v42;
        a7 = v31;
        UnsafeMutableBufferPointer.swapAt(_:_:)(*v42, v19);
        UnsafeMutableBufferPointer.swapAt(_:_:)(*v22, v19);
        if (v39)
        {
          v32 = v49;
          closure #1 in closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(v36, v35, (uint64_t)v12, (uint64_t)v22, v19, v31, a9, v37);
          v49 = v32;
        }
        v20 = v40;
        if (__OFADD__(*v22, 1))
          goto LABEL_18;
        ++*v22;
      }
      if (v20 == ++v19)
      {
        v18 = *v22;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_15:
  *v34 = v18;
}

uint64_t closure #1 in closure #2 in OrderedSet._halfStablePartition<A>(values:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a2;
  v32 = a8;
  v11 = *(_QWORD **)(a6 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - v15;
  v18 = *v17;
  v19 = v11[9];
  v29 = *v20;
  v21 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  v21((char *)&v29 - v15, v18 + v19 * v29, v22);
  v30 = a5;
  v21(v14, v18 + v19 * a5, a6);
  v23 = dispatch thunk of Hashable._rawHashValue(seed:)();
  result = *a1;
  v25 = 1 << *a1;
  v26 = v25 - 1;
  if (__OFSUB__(v25, 1))
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v27 = 1 << *a1;
    if (!__OFSUB__(v27, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v26 & v23, v30, (v27 - 1) & result, v29, a1, v31);
      v28 = (void (*)(char *, uint64_t))v11[1];
      v28(v14, a6);
      return ((uint64_t (*)(char *, uint64_t))v28)(v16, a6);
    }
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet._partition<A>(values:by:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;

  OrderedSet._ensureUnique()();
  v9 = *v6;
  *v6 = 0;
  v10 = (uint64_t)(v6 + 1);
  v11 = *(_QWORD *)(a5 + 16);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v12 = v6[1];
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
  v15 = v12 + ((v14 + 32) & ~v14);
  v22[0] = v15;
  v22[1] = v13;
  closure #1 in OrderedSet._partition<A>(values:by:)(v22, a1, a2, a3, a4, v9, v11, a6, &v23, *(_QWORD *)(a5 + 24));
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v22, v15, v13);
  if (!v21)
    v10 = v23;
  swift_retain();
  swift_release();
  *v6 = v9;
  swift_release();
  return v10;
}

void closure #1 in OrderedSet._partition<A>(values:by:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  void (*v32)(char *, Swift::Int, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  Swift::Int v39;
  Swift::Int v40;
  Swift::Int v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t, uint64_t);
  _QWORD *v71;
  uint64_t v72;
  void (*v73)(char *, Swift::Int, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, char *);
  Swift::Int v77;
  uint64_t v78;
  Swift::Int v79[2];
  Swift::Int v80;

  v11 = v10;
  v12 = a8;
  v75 = a5;
  v76 = a4;
  v56 = a3;
  v63 = a2;
  v15 = a1;
  v58 = a9;
  v62 = *(_QWORD *)(a8 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v67 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v61 = (char *)&v51 - v19;
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v18);
  v66 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t *)MEMORY[0x24BDAC7A8](v22);
  v60 = (char *)&v51 - v25;
  v26 = *v24;
  v27 = v15[1];
  v80 = 0;
  v29 = MEMORY[0x24954B544](v26, v27, v28);
  if (v29)
  {
    v30 = 0;
    v54 = a10;
    v31 = *(_QWORD *)(v21 + 72);
    v53 = (uint64_t *)(a6 + 16);
    v55 = a6;
    v52 = a6 + 32;
    v32 = *(void (**)(char *, Swift::Int, uint64_t))(v21 + 16);
    v33 = v21;
    v71 = v15;
    v72 = v12;
    v57 = v21;
    v65 = a7;
    v73 = v32;
    v74 = v31;
    while (1)
    {
      v64 = v29;
      v34 = v60;
      v32(v60, *v15 + v31 * v30, a7);
      v35 = v62;
      v36 = *(_QWORD *)(v62 + 72);
      v77 = v30;
      v59 = v36;
      v37 = v61;
      v70 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      v70(v61, v63 + v36 * v30, v12);
      v38 = v76(v34, v37);
      v69 = *(void (**)(char *, uint64_t))(v35 + 8);
      v69(v37, v12);
      v68 = *(void (**)(char *, uint64_t))(v33 + 8);
      v68(v34, a7);
      v78 = v11;
      if (v11)
        break;
      if ((v38 & 1) != 0)
      {
        v39 = v64 - 1;
        if (__OFSUB__(v64, 1))
        {
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          return;
        }
        if (v77 == v39)
        {
          v29 = v77;
          goto LABEL_23;
        }
        v40 = v74 * v39;
        v64 = -v59;
        v41 = v63 + v59 * v39;
        while (1)
        {
          v42 = v66;
          v73(v66, *v71 + v40, a7);
          v43 = v67;
          v44 = v72;
          v70(v67, v41, v72);
          v45 = v78;
          v46 = v76(v42, v43);
          v47 = v44;
          a7 = v65;
          v69(v43, v47);
          v68(v42, a7);
          v78 = v45;
          if (v45)
            return;
          if ((v46 & 1) == 0)
          {
            v79[0] = v39;
            v15 = v71;
            v49 = v77;
            UnsafeMutableBufferPointer.swapAt(_:_:)(v77, v39);
            v12 = v72;
            UnsafeMutableBufferPointer.swapAt(_:_:)(v49, v39);
            if (v55)
            {
              v50 = v78;
              closure #1 in closure #1 in OrderedSet._partition<A>(values:by:)(v53, v52, (uint64_t)v15, (uint64_t)&v80, (uint64_t)v79, a7);
              v11 = v50;
            }
            else
            {
              v11 = v78;
            }
            v32 = v73;
            v31 = v74;
            v48 = __OFADD__(v49, 1);
            v30 = v49 + 1;
            if (!v48)
            {
              v29 = v79[0];
              goto LABEL_20;
            }
            goto LABEL_28;
          }
          v48 = __OFSUB__(v39--, 1);
          if (v48)
          {
            __break(1u);
            goto LABEL_26;
          }
          v40 -= v74;
          v41 += v64;
          if (v77 == v39)
          {
            v29 = v77;
            goto LABEL_23;
          }
        }
      }
      v30 = v77 + 1;
      v32 = v73;
      v31 = v74;
      v29 = v64;
      if (__OFADD__(v77, 1))
        goto LABEL_27;
      v15 = v71;
      v12 = v72;
      v11 = v78;
LABEL_20:
      v80 = v30;
      v33 = v57;
      if (v30 == v29)
        goto LABEL_23;
    }
  }
  else
  {
LABEL_23:
    *v58 = v29;
  }
}

uint64_t closure #1 in closure #1 in OrderedSet._partition<A>(values:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a2;
  v29 = a5;
  v8 = *(_QWORD **)(a6 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v26 - v12;
  v15 = *v14;
  v16 = v8[9];
  v27 = *v17;
  v18 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v18((char *)&v26 - v12, v15 + v16 * v27, v19);
  v29 = *(_QWORD *)v29;
  v18(v11, v15 + v29 * v16, a6);
  v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
  result = *a1;
  v22 = 1 << *a1;
  v23 = v22 - 1;
  if (__OFSUB__(v22, 1))
  {
    __break(1u);
  }
  else
  {
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v24 = 1 << *a1;
    if (!__OFSUB__(v24, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v23 & v20, v29, (v24 - 1) & result, v27, a1, v28);
      v25 = (void (*)(char *, uint64_t))v8[1];
      v25(v11, a6);
      return ((uint64_t (*)(char *, uint64_t))v25)(v13, a6);
    }
  }
  __break(1u);
  return result;
}

_QWORD *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
      {
        v3 = type metadata accessor for ContiguousArray();
        return (_QWORD *)destructiveProjectEnumData for NodePersonality.ShaderType(v3);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in OrderedSet._partition(by:callback:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in OrderedSet._partition(by:callback:)(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 40), *(uint64_t (**)(char *))(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(uint64_t, uint64_t))(v1 + 64), *(_QWORD *)(v1 + 72), a1, *(_QWORD *)(v1 + 24));
}

uint64_t SGEdge.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;

  v1 = v0;
  v2 = 0x676E697373694DLL;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___SGEdge_from);
  v4 = v3 + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  v5 = MEMORY[0x24954C3E4](v4);
  if (v5)
  {
    v6 = (void *)v5;
    v8 = *(_QWORD *)(v5 + OBJC_IVAR___SGNode_name);
    v7 = *(void **)(v5 + OBJC_IVAR___SGNode_name + 8);
    swift_bridgeObjectRetain();

  }
  else
  {
    v7 = (void *)0xE700000000000000;
    v8 = 0x676E697373694DLL;
  }
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 58;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11 = *(_QWORD *)(v3 + OBJC_IVAR___SGOutput_name);
  v12 = *(void **)(v3 + OBJC_IVAR___SGOutput_name + 8);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x209286E220;
  v14._object = (void *)0xA500000000000000;
  String.append(_:)(v14);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR___SGEdge_to);
  v16 = v15 + OBJC_IVAR___SGInput_node;
  swift_beginAccess();
  v17 = MEMORY[0x24954C3E4](v16);
  if (v17)
  {
    v18 = (void *)v17;
    v2 = *(_QWORD *)(v17 + OBJC_IVAR___SGNode_name);
    v19 = *(void **)(v17 + OBJC_IVAR___SGNode_name + 8);
    swift_bridgeObjectRetain();

  }
  else
  {
    v19 = (void *)0xE700000000000000;
  }
  v20._countAndFlagsBits = v2;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22 = *(_QWORD *)(v15 + OBJC_IVAR___SGInput_name);
  v23 = *(void **)(v15 + OBJC_IVAR___SGInput_name + 8);
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  return 0;
}

id SGEdge.from.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGEdge_from);
}

id SGEdge.to.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGEdge_to);
}

id SGEdge.__allocating_init(from:to:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR___SGEdge_from] = a1;
  *(_QWORD *)&v5[OBJC_IVAR___SGEdge_to] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id SGEdge.init(from:to:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v2[OBJC_IVAR___SGEdge_from] = a1;
  *(_QWORD *)&v2[OBJC_IVAR___SGEdge_to] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

ShaderGraph::SGEdge::CodingKeys_optional __swiftcall SGEdge.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShaderGraph::SGEdge::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = ShaderGraph_SGEdge_CodingKeys_to;
  else
    v4.value = ShaderGraph_SGEdge_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

ShaderGraph::SGEdge::CodingKeys_optional __swiftcall SGEdge.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShaderGraph::SGEdge::CodingKeys_optional v4;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = ShaderGraph_SGEdge_CodingKeys_to;
  else
    v4.value = ShaderGraph_SGEdge_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

ShaderGraph::SGEdge::CodingKeys_optional __swiftcall SGEdge.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGEdge::CodingKeys_optional)2;
}

uint64_t SGEdge.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGEdge.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 28532;
  else
    return 1836020326;
}

uint64_t SGEdge.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 28532;
  else
    return 1836020326;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGEdge.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 28532;
  else
    v3 = 1836020326;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE200000000000000;
  if (*a2)
    v5 = 28532;
  else
    v5 = 1836020326;
  if (*a2)
    v6 = 0xE200000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGEdge.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGEdge.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGEdge.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGEdge.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGEdge.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1836020326;
  if (*v1)
    v2 = 28532;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE200000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGEdge.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 28532;
  else
    return 1836020326;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGEdge.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SGEdge.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SGEdge.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGEdge.CodingKeys()
{
  lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGEdge.CodingKeys()
{
  lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id SGEdge.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SGEdge.init(from:)(a1);
}

id SGEdge.init(from:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *ObjectType;
  objc_super v18;
  char v19;
  uint64_t v20;

  ObjectType = (objc_class *)swift_getObjectType();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGEdge.CodingKeys>);
  v4 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  v7 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v14 = 0;
    type metadata accessor for SGError();
    v11 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v8 = v4;
    type metadata accessor for SGOutput();
    v19 = 0;
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, v9, (uint64_t (*)(uint64_t))type metadata accessor for SGOutput, (uint64_t)&protocol conformance descriptor for SGOutput);
    v10 = v16;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)&v7[OBJC_IVAR___SGEdge_from] = v20;
    type metadata accessor for SGInput();
    v19 = 1;
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, v13, (uint64_t (*)(uint64_t))type metadata accessor for SGInput, (uint64_t)&protocol conformance descriptor for SGInput);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v10);
    *(_QWORD *)&v7[OBJC_IVAR___SGEdge_to] = v20;

    v18.receiver = v7;
    v18.super_class = ObjectType;
    v14 = objc_msgSendSuper2(&v18, sel_init);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v14;
}

unint64_t lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGEdge.CodingKeys, &type metadata for SGEdge.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGEdge.CodingKeys, &type metadata for SGEdge.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGEdge.CodingKeys, &type metadata for SGEdge.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGEdge.CodingKeys, &type metadata for SGEdge.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for SGOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SGInput()
{
  return objc_opt_self();
}

void SGEdge.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGEdge.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGEdge.CodingKeys and conformance SGEdge.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = *(_QWORD *)(v3 + OBJC_IVAR___SGEdge_from);
  HIBYTE(v12) = 0;
  type metadata accessor for SGOutput();
  lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGOutput and conformance SGOutput, v9, (uint64_t (*)(uint64_t))type metadata accessor for SGOutput, (uint64_t)&protocol conformance descriptor for SGOutput);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    v11 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();

  }
  else
  {
    v13 = *(_QWORD *)(v3 + OBJC_IVAR___SGEdge_to);
    HIBYTE(v12) = 1;
    type metadata accessor for SGInput();
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGInput and conformance SGInput, v10, (uint64_t (*)(uint64_t))type metadata accessor for SGInput, (uint64_t)&protocol conformance descriptor for SGInput);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

id SGEdge.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SGEdge.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGEdge@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance SGEdge(a1, (uint64_t (*)(uint64_t))SGEdge.init(from:), a2);
}

void protocol witness for Encodable.encode(to:) in conformance SGEdge(_QWORD *a1)
{
  SGEdge.encode(to:)(a1);
}

uint64_t static IOAttachment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
    return a4 == 0;
  if (!a4)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IOAttachment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t IOAttachment.description.getter(uint64_t a1, uint64_t a2)
{
  Swift::String v2;

  if (!a2)
    return 0x6863617474616E75;
  String.append(_:)(*(Swift::String *)&a1);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x6465686361747461;
}

uint64_t SGInput.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___SGInput_type;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t SGInput.type.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___SGInput_type);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SGInput.type.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGInput.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGInput_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGInput.attachment.getter()
{
  return SGInput.attachment.getter(&OBJC_IVAR___SGInput_attachment);
}

uint64_t SGInput.attachment.setter(uint64_t a1, uint64_t a2)
{
  return SGInput.attachment.setter(a1, a2, &OBJC_IVAR___SGInput_attachment);
}

uint64_t (*SGInput.attachment.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t SGInput.edge.getter()
{
  return SGInput.edge.getter(&OBJC_IVAR___SGInput_edge);
}

void SGInput.edge.setter(void *a1)
{
  SGInput.edge.setter(a1);
}

{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

uint64_t (*SGInput.edge.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___SGInput_edge;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24954C3E4](v5);
  return SGInput.edge.modify;
}

uint64_t SGInput.node.getter()
{
  return SGInput.edge.getter(&OBJC_IVAR___SGInput_node);
}

void SGInput.node.setter(void *a1)
{
  SGInput.edge.setter(a1);
}

uint64_t (*SGInput.node.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___SGInput_node;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24954C3E4](v5);
  return SGInput.edge.modify;
}

uint64_t SGInput.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;

  v1 = v0;
  _StringGuts.grow(_:)(25);
  v2._countAndFlagsBits = 0x287475706E494753;
  v2._object = (void *)0xE900000000000022;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___SGInput_name);
  v4 = *(void **)(v0 + OBJC_IVAR___SGInput_name + 8);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2108450;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7 = (uint64_t *)(v0 + OBJC_IVAR___SGInput_type);
  swift_beginAccess();
  v8._countAndFlagsBits = SGDataType.stringValue.getter(*v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11 = v1 + OBJC_IVAR___SGInput_edge;
  swift_beginAccess();
  v12 = (void *)MEMORY[0x24954C3E4](v11);

  if (v12)
    v13 = 0x6567646520736168;
  else
    v13 = 0x65676465206F6ELL;
  if (v12)
    v14 = 0xE800000000000000;
  else
    v14 = 0xE700000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

id SGInput.__allocating_init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  char *v13;
  objc_super v15;

  v11 = (char *)objc_allocWithZone(v5);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v12 = &v11[OBJC_IVAR___SGInput_name];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  *(_QWORD *)&v11[OBJC_IVAR___SGInput_type] = a3;
  v13 = &v11[OBJC_IVAR___SGInput_attachment];
  *(_QWORD *)v13 = a4;
  *((_QWORD *)v13 + 1) = a5;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, sel_init);
}

id SGInput.init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  objc_class *ObjectType;
  char *v12;
  char *v13;
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v12 = &v5[OBJC_IVAR___SGInput_name];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  *(_QWORD *)&v5[OBJC_IVAR___SGInput_type] = a3;
  v13 = &v5[OBJC_IVAR___SGInput_attachment];
  *(_QWORD *)v13 = a4;
  *((_QWORD *)v13 + 1) = a5;
  v15.receiver = v5;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, sel_init);
}

ShaderGraph::SGInput::CodingKeys_optional __swiftcall SGInput.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGInput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(rawValue, v1);
}

ShaderGraph::SGInput::CodingKeys_optional __swiftcall SGInput.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGInput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(stringValue, v1);
}

ShaderGraph::SGInput::CodingKeys_optional __swiftcall SGInput.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGInput::CodingKeys_optional)3;
}

uint64_t SGInput.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SGInput.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return 1701869940;
  if (a1 == 1)
    return 1701667182;
  return 0x656D686361747461;
}

uint64_t SGInput.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 1701869940;
  if (a1 == 1)
    return 1701667182;
  return 0x656D686361747461;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGInput.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  result = SGInput.CodingKeys.init(stringValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SGInput.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE400000000000000;
  v5 = 1701667182;
  if (v2 != 1)
  {
    v5 = 0x656D686361747461;
    v4 = 0xEA0000000000746ELL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701869940;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SGInput.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701667182;
  if (*v0 != 1)
    v1 = 0x656D686361747461;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGInput.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of SGInput.CodingKeys.init(rawValue:);
  result = SGInput.CodingKeys.init(stringValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGInput.CodingKeys()
{
  lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGInput.CodingKeys()
{
  lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SGInput.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SGInput.init(from:)(a1);
}

uint64_t SGInput.init(from:)(_QWORD *a1)
{
  char *v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v14;
  void *v15;
  void *v16;
  char *v17;
  uint64_t *v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  objc_class *v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD *v29;
  uint64_t ObjectType;
  char *v31;
  objc_super v32;
  char v33;
  uint64_t v34;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGInput.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = &v1[OBJC_IVAR___SGInput_edge];
  swift_unknownObjectWeakInit();
  v28[0] = &v1[OBJC_IVAR___SGInput_node];
  swift_unknownObjectWeakInit();
  v9 = a1[3];
  v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  v31 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v10 = 0;
    v17 = v31;
  }
  else
  {
    LOBYTE(v34) = 1;
    v14 = KeyedDecodingContainer.decode(_:forKey:)();
    v16 = v15;
    v17 = v31;
    v18 = (uint64_t *)&v31[OBJC_IVAR___SGInput_name];
    *v18 = v14;
    v18[1] = (uint64_t)v15;
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = v14;
    v19._object = v16;
    v20._countAndFlagsBits = 1701667182;
    v20._object = (void *)0xE400000000000000;
    validate(_:named:)(v19, v20);
    v3 = v21;
    if (!v21)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SGDataType(0);
      v33 = 0;
      lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGDataType, (uint64_t)&protocol conformance descriptor for SGDataType);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      *(_QWORD *)&v17[OBJC_IVAR___SGInput_type] = v34;
      LOBYTE(v34) = 2;
      v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v25 = (uint64_t *)&v17[OBJC_IVAR___SGInput_attachment];
      if (v24)
      {
        *v25 = v22;
        v25[1] = v24;
      }
      else
      {
        *v25 = 0;
        v25[1] = 0;
      }
      v27 = (uint64_t)v29;
      v26 = (objc_class *)ObjectType;

      v32.receiver = v17;
      v32.super_class = v26;
      v10 = (uint64_t)objc_msgSendSuper2(&v32, sel_init);
      __swift_destroy_boxed_opaque_existential_1Tm(v27);
      return v10;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = 1;
  }
  v11 = (uint64_t)v29;
  type metadata accessor for SGError();
  v12 = v3;
  SGError.__allocating_init(_:)(v3);
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  if ((_DWORD)v10)
    swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  swift_deallocPartialClassInstance();
  return v10;
}

void SGInput.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGInput.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    v10 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();

  }
  else
  {
    v9 = (_QWORD *)(v3 + OBJC_IVAR___SGInput_type);
    swift_beginAccess();
    v12[1] = *v9;
    v13 = 0;
    type metadata accessor for SGDataType(0);
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGDataType, (uint64_t)&protocol conformance descriptor for SGDataType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = v3 + OBJC_IVAR___SGInput_attachment;
    swift_beginAccess();
    if (*(_QWORD *)(v11 + 8))
    {
      v13 = 2;
      swift_bridgeObjectRetain();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

uint64_t SGInput.isEqual(_:)(uint64_t a1)
{
  return SGInput.isEqual(_:)(a1, &OBJC_IVAR___SGInput_name, &OBJC_IVAR___SGInput_type, &OBJC_IVAR___SGInput_attachment);
}

void SGInput.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGInput@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance SGEdge(a1, (uint64_t (*)(uint64_t))SGInput.init(from:), a2);
}

void protocol witness for Encodable.encode(to:) in conformance SGInput(_QWORD *a1)
{
  SGInput.encode(to:)(a1);
}

uint64_t key path getter for WeakBox.value : <A>WeakBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[8];

  v7 = type metadata accessor for WeakBox(0, *(_QWORD *)(a3 + a2 - 8), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v9 = MEMORY[0x24954C3E4](v11);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  *a5 = v9;
  return result;
}

void WeakBox.value.getter()
{
  JUMPOUT(0x24954C3E4);
}

uint64_t WeakBox.value.setter()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*WeakBox.value.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = MEMORY[0x24954C3E4](v1);
  return WeakBox.value.modify;
}

uint64_t WeakBox.value.modify()
{
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t WeakBox.init(_:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

BOOL static WeakBox<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = MEMORY[0x24954C3E4]();
  v4 = MEMORY[0x24954C3E4](a2);
  if (!v3)
  {
    if (!v4)
      return 1;
    goto LABEL_7;
  }
  if (!v4)
  {
LABEL_7:
    swift_unknownObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain();
  v5 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (v5 & 1) != 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> WeakBox<A>(uint64_t a1, uint64_t a2)
{
  return static WeakBox<>.== infix(_:_:)(a1, a2);
}

uint64_t WeakBox<>.hash(into:)()
{
  uint64_t v0;

  MEMORY[0x24954C3E4](v0);
  type metadata accessor for Optional();
  Optional<A>.hash(into:)();
  return swift_unknownObjectRelease();
}

Swift::Int WeakBox<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  WeakBox<>.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> WeakBox<A>()
{
  return WeakBox<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> WeakBox<A>()
{
  return WeakBox<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> WeakBox<A>()
{
  Hasher.init(_seed:)();
  WeakBox<>.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SGOutput.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___SGOutput_type;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t SGOutput.type.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___SGOutput_type);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SGOutput.type.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

id @objc SGInput.name.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  v4 = *v3;
  v5 = v3[1];
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x24954AF98](v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t SGOutput.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGOutput_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGOutput.attachment.getter()
{
  return SGInput.attachment.getter(&OBJC_IVAR___SGOutput_attachment);
}

uint64_t SGInput.attachment.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t SGOutput.attachment.setter(uint64_t a1, uint64_t a2)
{
  return SGInput.attachment.setter(a1, a2, &OBJC_IVAR___SGOutput_attachment);
}

uint64_t SGInput.attachment.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGOutput.attachment.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGOutput.edges.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___SGOutput_edges);
  swift_beginAccess();
  v2 = *v1;
  swift_retain();
  swift_retain();
  return v2;
}

uint64_t SGOutput.edges.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR___SGOutput_edges);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_release();
  return swift_release();
}

uint64_t (*SGOutput.edges.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t key path getter for SGOutput.node : SGOutput@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  result = MEMORY[0x24954C3E4](v3);
  *a2 = result;
  return result;
}

uint64_t SGOutput.node.getter()
{
  return SGInput.edge.getter(&OBJC_IVAR___SGOutput_node);
}

uint64_t SGInput.edge.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return MEMORY[0x24954C3E4](v2);
}

void SGOutput.node.setter(void *a1)
{
  SGInput.edge.setter(a1);
}

uint64_t (*SGOutput.node.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___SGOutput_node;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24954C3E4](v5);
  return SGInput.edge.modify;
}

void SGInput.edge.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

id @objc static SGInput.create(name:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (a3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = (void *)a5(v7, v9, a4);
  swift_bridgeObjectRelease();
  return v10;
}

id @objc SGEdge.debugDescription.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  v8 = (void *)MEMORY[0x24954AF98](v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t SGOutput.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;

  v1 = v0;
  _StringGuts.grow(_:)(26);
  v2._countAndFlagsBits = 0x74757074754F4753;
  v2._object = (void *)0xEA00000000002228;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___SGOutput_name);
  v4 = *(void **)(v0 + OBJC_IVAR___SGOutput_name + 8);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2108450;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7 = (uint64_t *)(v0 + OBJC_IVAR___SGOutput_type);
  swift_beginAccess();
  v8._countAndFlagsBits = SGDataType.stringValue.getter(*v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11 = v1 + OBJC_IVAR___SGOutput_edges;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v11 + 8) + 16))
    v12 = 0x6567646520736168;
  else
    v12 = 0x7365676465206F6ELL;
  if (*(_QWORD *)(*(_QWORD *)(v11 + 8) + 16))
    v13 = 0xE900000000000073;
  else
    v13 = 0xE800000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

id SGOutput.__allocating_init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  objc_super v17;

  v11 = (char *)objc_allocWithZone(v5);
  v12 = &v11[OBJC_IVAR___SGOutput_attachment];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = MEMORY[0x24BEE4AF8];
  v14 = &v11[OBJC_IVAR___SGOutput_edges];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v13;
  swift_unknownObjectWeakInit();
  v15 = &v11[OBJC_IVAR___SGOutput_name];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  *(_QWORD *)&v11[OBJC_IVAR___SGOutput_type] = a3;
  swift_beginAccess();
  *(_QWORD *)v12 = a4;
  *((_QWORD *)v12 + 1) = a5;
  swift_bridgeObjectRelease();
  v17.receiver = v11;
  v17.super_class = v5;
  return objc_msgSendSuper2(&v17, sel_init);
}

id SGOutput.init(name:type:attachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  objc_class *ObjectType;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v12 = &v5[OBJC_IVAR___SGOutput_attachment];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = MEMORY[0x24BEE4AF8];
  v14 = &v5[OBJC_IVAR___SGOutput_edges];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v13;
  swift_unknownObjectWeakInit();
  v15 = &v5[OBJC_IVAR___SGOutput_name];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  *(_QWORD *)&v5[OBJC_IVAR___SGOutput_type] = a3;
  swift_beginAccess();
  *(_QWORD *)v12 = a4;
  *((_QWORD *)v12 + 1) = a5;
  swift_bridgeObjectRelease();
  v17.receiver = v5;
  v17.super_class = ObjectType;
  return objc_msgSendSuper2(&v17, sel_init);
}

ShaderGraph::SGOutput::CodingKeys_optional __swiftcall SGOutput.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGOutput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(rawValue, v1);
}

ShaderGraph::SGOutput::CodingKeys_optional __swiftcall SGOutput.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  return (ShaderGraph::SGOutput::CodingKeys_optional)SGInput.CodingKeys.init(stringValue:)(stringValue, v1);
}

unint64_t SGInput.CodingKeys.init(stringValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

ShaderGraph::SGOutput::CodingKeys_optional __swiftcall SGOutput.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (ShaderGraph::SGOutput::CodingKeys_optional)3;
}

uint64_t SGOutput.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SGInput.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE400000000000000;
  v4 = 0xE400000000000000;
  v5 = 1701667182;
  if (v2 != 1)
  {
    v5 = 0x656D686361747461;
    v4 = 0xEA0000000000746ELL;
  }
  if (*a1)
    v6 = v5;
  else
    v6 = 1701869940;
  if (v2)
    v7 = v4;
  else
    v7 = 0xE400000000000000;
  v8 = 1701667182;
  if (*a2 != 1)
  {
    v8 = 0x656D686361747461;
    v3 = 0xEA0000000000746ELL;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 1701869940;
  if (*a2)
    v10 = v3;
  else
    v10 = 0xE400000000000000;
  if (v6 == v9 && v7 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SGInput.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SGInput.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SGInput.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SGOutput.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  result = SGInput.CodingKeys.init(stringValue:)(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SGOutput.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of SGOutput.CodingKeys.init(rawValue:);
  result = SGInput.CodingKeys.init(stringValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SGOutput.CodingKeys()
{
  lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SGOutput.CodingKeys()
{
  lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id SGOutput.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SGOutput.init(from:)(a1);
}

id SGOutput.init(from:)(_QWORD *a1)
{
  char *v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  id *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v20;
  void *v21;
  void *v22;
  char *v23;
  uint64_t *v24;
  Swift::String v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  objc_class *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t ObjectType;
  objc_super v41;
  uint64_t v42;
  char v43;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SGOutput.CodingKeys>);
  v5 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v1[OBJC_IVAR___SGOutput_attachment];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v38 = (uint64_t *)v8;
  v9 = (void *)MEMORY[0x24BEE4AF8];
  v10 = (id *)&v1[OBJC_IVAR___SGOutput_edges];
  *v10 = 0;
  v10[1] = v9;
  v37 = v10;
  v36 = &v1[OBJC_IVAR___SGOutput_node];
  swift_unknownObjectWeakInit();
  v11 = a1[3];
  v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  v12 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v15 = 0;
    v23 = v12;
  }
  else
  {
    LOBYTE(v42) = 1;
    v13 = v35;
    v14 = v7;
    v20 = KeyedDecodingContainer.decode(_:forKey:)();
    v22 = v21;
    v23 = v12;
    v24 = (uint64_t *)&v12[OBJC_IVAR___SGOutput_name];
    *v24 = v20;
    v24[1] = (uint64_t)v21;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = v20;
    v25._object = v22;
    v26._countAndFlagsBits = 1701667182;
    v26._object = (void *)0xE400000000000000;
    validate(_:named:)(v25, v26);
    v3 = v27;
    if (!v27)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for SGDataType(0);
      v43 = 0;
      lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGDataType, (uint64_t)&protocol conformance descriptor for SGDataType);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      *(_QWORD *)&v12[OBJC_IVAR___SGOutput_type] = v42;
      LOBYTE(v42) = 2;
      v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v13);
      v31 = (uint64_t)v39;
      v32 = v38;
      swift_beginAccess();
      if (v30)
      {
        *v32 = v28;
        v32[1] = v30;
      }
      else
      {
        *v32 = 0;
        v32[1] = 0;
      }
      v33 = (objc_class *)ObjectType;

      swift_bridgeObjectRelease();
      v41.receiver = v23;
      v41.super_class = v33;
      v18 = objc_msgSendSuper2(&v41, sel_init);
      __swift_destroy_boxed_opaque_existential_1Tm(v31);
      return v18;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
    v15 = 1;
  }
  v16 = (uint64_t)v39;
  type metadata accessor for SGError();
  v17 = v3;
  SGError.__allocating_init(_:)(v3);
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1Tm(v16);
  if (v15)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = *v37;
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy();

  swift_deallocPartialClassInstance();
  return v18;
}

void SGOutput.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SGOutput.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    type metadata accessor for SGError();
    v10 = v2;
    SGError.__allocating_init(_:)(v2);
    swift_willThrow();

  }
  else
  {
    v9 = (_QWORD *)(v3 + OBJC_IVAR___SGOutput_type);
    swift_beginAccess();
    v12[1] = *v9;
    v13 = 0;
    type metadata accessor for SGDataType(0);
    lazy protocol witness table accessor for type SGOutput and conformance SGOutput(&lazy protocol witness table cache variable for type SGDataType and conformance SGDataType, 255, (uint64_t (*)(uint64_t))type metadata accessor for SGDataType, (uint64_t)&protocol conformance descriptor for SGDataType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = v3 + OBJC_IVAR___SGOutput_attachment;
    swift_beginAccess();
    if (*(_QWORD *)(v11 + 8))
    {
      v13 = 2;
      swift_bridgeObjectRetain();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
}

uint64_t SGOutput.isEqual(_:)(uint64_t a1)
{
  return SGInput.isEqual(_:)(a1, &OBJC_IVAR___SGOutput_name, &OBJC_IVAR___SGOutput_type, &OBJC_IVAR___SGOutput_attachment);
}

uint64_t SGInput.isEqual(_:)(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  char *v4;
  char *v9;
  char *v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  char *v22;
  _BYTE v23[24];
  uint64_t v24;

  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v23);
  if (!v24)
  {
    outlined destroy of Any?((uint64_t)v23);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    v20 = 0;
    return v20 & 1;
  }
  if (v22 == v4)
  {

    v20 = 1;
    return v20 & 1;
  }
  v9 = &v4[*a2];
  v10 = &v22[*a2];
  v11 = *(_QWORD *)v9 == *(_QWORD *)v10 && *((_QWORD *)v9 + 1) == *((_QWORD *)v10 + 1);
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_16;
  v12 = &v4[*a3];
  swift_beginAccess();
  v13 = *(_QWORD *)v12;
  v14 = &v22[*a3];
  swift_beginAccess();
  if (v13 != *(_QWORD *)v14)
    goto LABEL_16;
  v15 = &v4[*a4];
  swift_beginAccess();
  v16 = *(_QWORD *)v15;
  v17 = *((_QWORD *)v15 + 1);
  v18 = &v22[*a4];
  swift_beginAccess();
  v19 = *((_QWORD *)v18 + 1);
  if (!v17)
  {
    v20 = v19 == 0;

    return v20 & 1;
  }
  if (!v19)
  {
LABEL_16:

    goto LABEL_17;
  }
  if (v16 == *(_QWORD *)v18 && v17 == v19)
  {

    v20 = 1;
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

  }
  return v20 & 1;
}

uint64_t @objc SGInput.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  outlined destroy of Any?((uint64_t)v10);
  return v8 & 1;
}

void SGOutput.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SGEdge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGOutput@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance SGEdge(a1, (uint64_t (*)(uint64_t))SGOutput.init(from:), a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SGEdge@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  objc_class *v3;
  uint64_t v4;
  id v8;
  uint64_t result;

  v8 = objc_allocWithZone(v3);
  result = a2(a1);
  if (!v4)
    *a3 = result;
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance SGOutput(_QWORD *a1)
{
  SGOutput.encode(to:)(a1);
}

id specialized static SGInput.create(name:type:)(uint64_t a1, void *a2, uint64_t a3)
{
  Swift::String v6;
  Swift::String v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  objc_class *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  objc_super v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = a1;
    v6._object = a2;
    v7._countAndFlagsBits = 1701667182;
    v7._object = (void *)0xE400000000000000;
    validate(_:named:)(v6, v7);
    if (!v8)
    {
      v23 = (objc_class *)type metadata accessor for SGInput();
      v24 = (char *)objc_allocWithZone(v23);
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      v25 = (uint64_t *)&v24[OBJC_IVAR___SGInput_name];
      *v25 = a1;
      v25[1] = (uint64_t)a2;
      *(_QWORD *)&v24[OBJC_IVAR___SGInput_type] = a3;
      v26 = &v24[OBJC_IVAR___SGInput_attachment];
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      v27.receiver = v24;
      v27.super_class = v23;
      return objc_msgSendSuper2(&v27, sel_init);
    }
    v9 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v9 = (void *)swift_allocError();
    *(_OWORD *)v10 = xmmword_245FBF5D0;
    *(_BYTE *)(v10 + 16) = 1;
    swift_willThrow();
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  v12 = static os_log_type_t.error.getter();
  v13 = v9;
  v14 = v9;
  v15 = Logger.logObject.getter();
  v16 = v12;
  if (os_log_type_enabled(v15, v12))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v29 = v18;
    *(_DWORD *)v17 = 136315138;
    v19 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v20 = String.init<A>(describing:)();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_245E46000, v15, v16, "%s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v18, -1, -1);
    MEMORY[0x24954C33C](v17, -1, -1);

  }
  else
  {

  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SGInput.CodingKeys and conformance SGInput.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGInput.CodingKeys, &type metadata for SGInput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGInput.CodingKeys, &type metadata for SGInput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGInput.CodingKeys, &type metadata for SGInput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGInput.CodingKeys, &type metadata for SGInput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGInput.CodingKeys and conformance SGInput.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SGOutput and conformance SGOutput(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x24954C264](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id specialized static SGOutput.create(name:type:)(uint64_t a1, void *a2, uint64_t a3)
{
  Swift::String v6;
  Swift::String v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  objc_class *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  objc_super v29;
  uint64_t v30[3];
  uint64_t v31;

  if (a2)
  {
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = a1;
    v6._object = a2;
    v7._countAndFlagsBits = 1701667182;
    v7._object = (void *)0xE400000000000000;
    validate(_:named:)(v6, v7);
    if (!v8)
    {
      v23 = (objc_class *)type metadata accessor for SGOutput();
      v24 = (char *)objc_allocWithZone(v23);
      v25 = &v24[OBJC_IVAR___SGOutput_attachment];
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      v26 = MEMORY[0x24BEE4AF8];
      v27 = &v24[OBJC_IVAR___SGOutput_edges];
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = v26;
      swift_unknownObjectWeakInit();
      v28 = (uint64_t *)&v24[OBJC_IVAR___SGOutput_name];
      *v28 = a1;
      v28[1] = (uint64_t)a2;
      *(_QWORD *)&v24[OBJC_IVAR___SGOutput_type] = a3;
      swift_beginAccess();
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      swift_bridgeObjectRelease();
      v29.receiver = v24;
      v29.super_class = v23;
      return objc_msgSendSuper2(&v29, sel_init);
    }
    v9 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v9 = (void *)swift_allocError();
    *(_OWORD *)v10 = xmmword_245FBF5D0;
    *(_BYTE *)(v10 + 16) = 1;
    swift_willThrow();
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  v12 = static os_log_type_t.error.getter();
  v13 = v9;
  v14 = v9;
  v15 = Logger.logObject.getter();
  v16 = v12;
  if (os_log_type_enabled(v15, v12))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v30[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v31 = (uint64_t)v9;
    v19 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v20 = String.init<A>(describing:)();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_245E46000, v15, v16, "%s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v18, -1, -1);
    MEMORY[0x24954C33C](v17, -1, -1);

  }
  else
  {

  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGOutput.CodingKeys, &type metadata for SGOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGOutput.CodingKeys, &type metadata for SGOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGOutput.CodingKeys, &type metadata for SGOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for SGOutput.CodingKeys, &type metadata for SGOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SGOutput.CodingKeys and conformance SGOutput.CodingKeys);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in <> WeakBox<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x24954C264](&protocol conformance descriptor for <> WeakBox<A>, a1, &v4);
}

uint64_t sub_245E84F9C()
{
  return keypath_setTm();
}

uint64_t sub_245E84FA8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR___SGInput_node, a2);
}

uint64_t sub_245E84FB4()
{
  return keypath_setTm();
}

uint64_t sub_245E84FC4()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_245E84FD4()
{
  return 8;
}

_QWORD *sub_245E84FE0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_245E84FEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_get_1Tm(a1, &OBJC_IVAR___SGOutput_node, a2);
}

uint64_t keypath_get_1Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1 + *a2;
  swift_beginAccess();
  result = MEMORY[0x24954C3E4](v4);
  *a3 = result;
  return result;
}

uint64_t sub_245E85048()
{
  return keypath_setTm();
}

uint64_t keypath_setTm()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SGEdge()
{
  return objc_opt_self();
}

uint64_t method lookup function for SGEdge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGEdge.__allocating_init(from:to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SGEdge.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for SGEdge.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245E8513C + 4 * byte_245FBF5E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245E85170 + 4 * byte_245FBF5E0[v4]))();
}

uint64_t sub_245E85170(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E85178(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245E85180);
  return result;
}

uint64_t sub_245E8518C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245E85194);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245E85198(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E851A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SGEdge.CodingKeys()
{
  return &type metadata for SGEdge.CodingKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for IOAttachment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for IOAttachment()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for IOAttachment(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for IOAttachment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IOAttachment(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IOAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for IOAttachment(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for IOAttachment(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for IOAttachment()
{
  return &type metadata for IOAttachment;
}

uint64_t method lookup function for SGInput()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGInput.__allocating_init(name:type:attachment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SGInput.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

ValueMetadata *type metadata accessor for SGInput.CodingKeys()
{
  return &type metadata for SGInput.CodingKeys;
}

uint64_t type metadata instantiation function for WeakBox()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for WeakBox(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WeakBox(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t type metadata accessor for WeakBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakBox);
}

uint64_t method lookup function for SGOutput()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for SGInput.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_245E85464 + 4 * byte_245FBF5EF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_245E85498 + 4 * byte_245FBF5EA[v4]))();
}

uint64_t sub_245E85498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E854A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245E854A8);
  return result;
}

uint64_t sub_245E854B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245E854BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_245E854C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E854C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SGOutput.CodingKeys()
{
  return &type metadata for SGOutput.CodingKeys;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24954C1D4](a1, v6, a5);
}

uint64_t dispatch thunk of SGOutput.__allocating_init(from:)()
{
  return dispatch thunk of SGInput.__allocating_init(from:)();
}

uint64_t OrderedDictionary.Values._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.Values._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Values._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Values.elements.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  swift_retain();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A48], v0);
  return Array.init<A>(_:)();
}

uint64_t OrderedDictionary.Values.withUnsafeBufferPointer<A>(_:)()
{
  return ContiguousArray.withUnsafeBufferPointer<A>(_:)();
}

_QWORD *OrderedDictionary.Values.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];

  v12[3] = a4;
  v6 = *(_QWORD *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v10 = v7 + ((v9 + 32) & ~v9);
  v12[0] = v10;
  v12[1] = v8;
  a1(v12);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v12, v10, v8);
}

__n128 protocol witness for Sequence.makeIterator() in conformance OrderedDictionary<A, B>.Values@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedDictionary<A, B>.Values(uint64_t a1)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>.Values(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, a1);
  v4 = specialized Collection._copyToContiguousArray()(v1, a1, v3);
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  if (!v2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
  return result;
}

uint64_t OrderedDictionary.Values.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  if (!v2)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 0, 1, a1);
  return result;
}

uint64_t OrderedDictionary.Values.startIndex.getter()
{
  return 0;
}

uint64_t OrderedDictionary.Values.endIndex.getter()
{
  return ContiguousArray.count.getter();
}

Swift::Int __swiftcall OrderedDictionary.Values.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedDictionary.Values.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedDictionary.Values.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Values.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  BOOL v4;
  Swift::Int_optional result;

  v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Values.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance OrderedDictionary<A, B>.Values@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance OrderedDictionary<A, B>.Values(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance OrderedDictionary<A, B>.Values(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ContiguousArray.count.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  ContiguousArray.subscript.getter();
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values;
}

void protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return MutableCollection<>.subscript.getter(a1, a2, v6, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance OrderedDictionary<A, B>.Values(uint64_t a1)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, a1);
  return RandomAccessCollection<>.indices.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance OrderedDictionary<A, B>.Values(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance OrderedDictionary<A, B>.Values@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance OrderedDictionary<A, B>.Values@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized ContiguousArray.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance OrderedDictionary<A, B>.Values@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance OrderedDictionary<A, B>.Values(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t OrderedDictionary.Values.subscript.getter()
{
  return ContiguousArray.subscript.getter();
}

uint64_t key path setter for OrderedDictionary.Values.subscript(_:) : <A, B>OrderedDictionary<A, B>.ValuesAB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  type metadata accessor for ContiguousArray();
  v6 = (uint64_t (*)(uint64_t *, _QWORD))ContiguousArray.subscript.modify();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v7, a1, v5);
  return v6(&v9, 0);
}

uint64_t (*OrderedDictionary.Values.subscript.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ContiguousArray();
  v2[4] = ContiguousArray.subscript.modify();
  return OrderedDictionary.Values.subscript.modify;
}

void OrderedDictionary.Values.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 16);
    if (*(_QWORD *)(v7 + 16) > a2)
    {
      v8 = *(_QWORD *)(v6 - 8);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 24))(v7+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * a2, a1, v6);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v6);
      return;
    }
  }
  __break(1u);
}

Swift::Void __swiftcall OrderedDictionary.Values.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v2);
  MutableCollection.swapAt(_:_:)();
}

uint64_t OrderedDictionary.Values.partition(by:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v1);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v1);
  result = MutableCollection<>.partition(by:)();
  if (!v0)
    return v3;
  return result;
}

_QWORD *OrderedDictionary.Values.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v16 = a3;
  v8 = *(_QWORD *)(a2 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v15[0] = v12;
  v15[1] = v10;
  a1(v15);
  if (v5)
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v15, v12, v10);
  v14 = v16;
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v15, v12, v10);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 0, 1, v14);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance OrderedDictionary<A, B>.Values(uint64_t a1, Swift::Int *a2, uint64_t a3)
{
  uint64_t v3;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v8 = *(_QWORD *)(v3 + 16);
  ContiguousArray._checkSubscript_mutating(_:)(v5);
  v9 = *(_QWORD *)(v6 - 8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(v8+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v5, a1, v6);
  destructiveProjectEnumData for NodePersonality.ShaderType(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v6);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance OrderedDictionary<A, B>.Values(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ContiguousArray();
  v2[4] = ContiguousArray.subscript.modify();
  return OrderedDictionary.Values.subscript.modify;
}

void OrderedDictionary.Values.subscript.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance OrderedDictionary<A, B>.Values()
{
  specialized MutableCollection<>.subscript.setter();
  swift_release();
  swift_release();
  return swift_release();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance OrderedDictionary<A, B>.Values(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for XMLNodePrivate.children.modify in conformance XMLParserDelegate.Element;
}

void (*MutableCollection<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = type metadata accessor for Slice();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = (char *)malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for Range();
  v9[7] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(_QWORD *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, _QWORD))(v7 + 16))(v2[5], v5, v2[3]);
    MEMORY[0x24954C264](MEMORY[0x24BEE4238], v8);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v6, v8);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
  }
  else
  {
    MEMORY[0x24954C264](MEMORY[0x24BEE4238], v2[3]);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v9(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance OrderedDictionary<A, B>.Values@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A38], v3);
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v3);
  result = MutableCollection<>.partition(by:)();
  if (!v1)
    *a1 = v5;
  return result;
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance OrderedDictionary<A, B>.Values()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A40], v0);
  return MutableCollection.swapAt(_:_:)();
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance OrderedDictionary<A, B>.Values()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

_QWORD *protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance OrderedDictionary<A, B>.Values@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v16 = a2;
  v8 = *(_QWORD *)(a3 + 24);
  type metadata accessor for ContiguousArray();
  ContiguousArray._makeMutableAndUnique()();
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v12 = v9 + ((v11 + 32) & ~v11);
  v15[0] = v12;
  v15[1] = v10;
  a1(v15);
  if (v5)
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v15, v12, v10);
  v14 = v16;
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v15, v12, v10);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a4, 0, 1, v14);
}

uint64_t static OrderedDictionary.Values<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = type metadata accessor for OrderedDictionary.Values(0, a7, a8, a9);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v9);
  return Sequence<>.elementsEqual<A>(_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> OrderedDictionary<A, B>.Values(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return static OrderedDictionary.Values<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4]) & 1;
}

uint64_t OrderedDictionary.Values<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v22[4];

  v8 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = v11;
  v22[2] = v12;
  v22[3] = v13;
  v17 = type metadata accessor for OrderedDictionary.Values(0, v14, v15, v16);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v17);
  v18 = Collection.count.getter();
  Hasher._combine(_:)(v18);
  v22[0] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  if (ContiguousArray.count.getter())
  {
    v19 = 0;
    while (1)
    {
      result = ContiguousArray.subscript.getter();
      v21 = v19 + 1;
      if (__OFADD__(v19, 1))
        break;
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a6);
      ++v19;
      if (v21 == ContiguousArray.count.getter())
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Int OrderedDictionary.Values<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v11[72];

  Hasher.init(_seed:)();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v11, a1, a2, a3, a4, a5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> OrderedDictionary<A, B>.Values(uint64_t a1)
{
  uint64_t *v1;

  return OrderedDictionary.Values<>.hashValue.getter(*v1, v1[1], v1[2], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return OrderedDictionary.Values<>.hash(into:)(a1, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  OrderedDictionary.Values<>.hash(into:)((uint64_t)v5, *v2, v2[1], v2[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return Hasher._finalize()();
}

Swift::Void __swiftcall ContiguousArray._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v1;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(v1 + 16) <= (unint64_t)a1)
LABEL_5:
    __break(1u);
}

uint64_t specialized ContiguousArray.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 > 0)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2)
      goto LABEL_9;
    return 0;
  }
  if (v3 <= 0 && v3 > a2)
    return 0;
LABEL_9:
  v4 = __OFADD__(result, a2);
  result += a2;
  if (v4)
LABEL_12:
    __break(1u);
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Values(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Values);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>.Values()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for BidirectionalCollection in OrderedDictionary<A, B>.Values()
{
  JUMPOUT(0x24954C264);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values(a1, a2, a3, MEMORY[0x24BEE1BD0]);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x24954C264](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x24954C264](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x24954C264](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedDictionary<A, B>.Values(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return MEMORY[0x24954C264](MEMORY[0x24BEE4230], a1, &v3);
}

void base witness table accessor for Collection in OrderedDictionary<A, B>.Values()
{
  JUMPOUT(0x24954C264);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values(a1, a2, a3, MEMORY[0x24BEE1BA8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in OrderedDictionary<A, B>.Values(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return MEMORY[0x24954C264](MEMORY[0x24BEE4218], a1, &v3);
}

void base witness table accessor for Sequence in OrderedDictionary<A, B>.Values()
{
  JUMPOUT(0x24954C264);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in OrderedDictionary<A, B>.Values()
{
  return MEMORY[0x24BEE1780];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values(a1, a2, a3, MEMORY[0x24BEE1BD8]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = lazy protocol witness table accessor for type Int and conformance Int();
  v8[0] = MEMORY[0x24BEE17A8];
  v8[1] = v6;
  return MEMORY[0x24954C264](a4, a1, v8);
}

void associated type witness table accessor for Collection.SubSequence : Collection in OrderedDictionary<A, B>.Values()
{
  JUMPOUT(0x24954C264);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in OrderedDictionary<A, B>.Values(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values);
  return MEMORY[0x24954C264](MEMORY[0x24BEE4220], a1, &v3);
}

uint64_t base witness table accessor for Equatable in <> OrderedDictionary<A, B>.Values(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24954C264](&protocol conformance descriptor for <> OrderedDictionary<A, B>.Values, a1, &v4);
}

uint64_t sub_245E86C04()
{
  return ContiguousArray.subscript.getter();
}

uint64_t sub_245E86C20()
{
  return 24;
}

__n128 sub_245E86C2C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata instantiation function for OrderedDictionary.Values()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for OrderedDictionary.Values()
{
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for OrderedDictionary.Values(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OrderedDictionary.Values(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OrderedDictionary.Values(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  uint64_t v0;

  v0 = type metadata accessor for Slice();
  MEMORY[0x24954C264](MEMORY[0x24BEE4238], v0);
  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_SSs5NeverOTg504_s11d138Graph0aB7ServiceC13createLibrary4from6device7optionsSo10MTLLibrary_pAA12SGREMaterialCSg_So9MTLDevice_pSgAA0J18CompilationOptionsCtKFZSSAA8F54Ccfu1_32fd0161a276cdf0c4c1049efc18373d1cAQSSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v14 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v14;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (char *)MEMORY[0x24954B748](v5, a1);
      else
        v6 = (char *)*(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = &v6[OBJC_IVAR___SGOutput_name];
      swift_beginAccess();
      v9 = *(_QWORD *)v8;
      v10 = *((_QWORD *)v8 + 1);
      swift_bridgeObjectRetain();

      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      ++v5;
      *(_QWORD *)(v14 + 16) = v12 + 1;
      v13 = v14 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v10;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SS_SSts5NeverOTg5142_s11ShaderGraph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSS_SStSS3key_SS5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v32 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v32;
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v25 = v3 + 80;
  v26 = v1;
  v27 = v5;
  v28 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v29 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v13 = v12[1];
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v6);
    v15 = v14[1];
    v30 = *v14;
    v31 = *v12;
    v16 = v3;
    v18 = *(_QWORD *)(v32 + 16);
    v17 = *(_QWORD *)(v32 + 24);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v18 >= v17 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v32 + 16) = v18 + 1;
    v19 = (_QWORD *)(v32 + 32 * v18);
    v19[4] = v30;
    v19[5] = v15;
    v19[6] = v31;
    v19[7] = v13;
    v9 = 1 << *(_BYTE *)(v16 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v28;
    v20 = *(_QWORD *)(v28 + 8 * v11);
    if ((v20 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v16;
    v5 = v27;
    if (*(_DWORD *)(v16 + 36) != v27)
      goto LABEL_27;
    v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v26;
    }
    else
    {
      v22 = v11 + 1;
      v23 = (unint64_t)(v9 + 63) >> 6;
      v10 = v26;
      if (v11 + 1 < v23)
      {
        v24 = *(_QWORD *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_20:
          v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            v24 = *(_QWORD *)(v25 + 8 * v11++);
            if (v24)
            {
              v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v29 + 1;
    v6 = v9;
    if (v29 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SSs5NeverOTg5122_s11ShaderGraph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcS2S3key_SS5valuet_tXEfU4_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  Swift::String v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v27 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v27;
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v21 = v3 + 80;
  v22 = v1;
  v23 = v5;
  v24 = v3 + 64;
  v25 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v26 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = 9;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: String));
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v27 + 16);
    v13 = *(_QWORD *)(v27 + 24);
    if (v14 >= v13 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v27 + 16) = v14 + 1;
    v15 = v27 + 16 * v14;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0xE000000000000000;
    v3 = v25;
    v9 = 1 << *(_BYTE *)(v25 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v24;
    v16 = *(_QWORD *)(v24 + 8 * v11);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v23;
    if (*(_DWORD *)(v25 + 36) != v23)
      goto LABEL_27;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v9 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v22;
    }
    else
    {
      v18 = v11 + 1;
      v19 = (unint64_t)(v9 + 63) >> 6;
      v10 = v22;
      if (v11 + 1 < v19)
      {
        v20 = *(_QWORD *)(v24 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v9 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v11)
          {
            v20 = *(_QWORD *)(v21 + 8 * v11++);
            if (v20)
            {
              v18 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v26 + 1;
    v6 = v9;
    if (v26 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_SSs5NeverOTg504_s11d7Graph16fgh3Vs6i19VSSIggyo_AC_AEtSSs5J141OIegnrzr_TR04_s11a93Graph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcSSAA16cde4V_s6F8VtXEfU5_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v16;
    v4 = a1 + 40;
    do
    {
      v5 = *(_QWORD *)(v4 - 8);
      v6 = *(void **)v4;
      v7 = *(_QWORD *)(v4 + 8);
      v8 = *(_BYTE *)(v4 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v9 = specialized closure #7 in SGREMaterial.init(graph:configuration:)(v5, v6, v7, v8);
      v11 = v10;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v4 += 56;
      *(_QWORD *)(v16 + 16) = v13 + 1;
      v14 = v16 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t BuiltInDefinition.isArgumentsDefinition.getter()
{
  _QWORD *v0;

  if (*v0 == 0x656D756772615F5FLL && v0[1] == 0xEB0000000073746ELL)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t BuiltInDefinition.isResultDefinition.getter()
{
  _QWORD *v0;

  if (*v0 == 0x746C757365725F5FLL && v0[1] == 0xE900000000000073)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t requireArgument<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v17 - v12, a3, v10);
  v14 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v13, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_QWORD *)v15 = a1;
  *(_QWORD *)(v15 + 8) = a2;
  *(_BYTE *)(v15 + 16) = 1;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> validate(_:named:)(Swift::String _, Swift::String named)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  char v5;
  uint64_t v6;

  object = named._object;
  countAndFlagsBits = named._countAndFlagsBits;
  v4 = HIBYTE(_._object) & 0xF;
  if (((uint64_t)_._object & 0x2000000000000000) == 0)
    v4 = _._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if (String.count.getter() <= 1023)
      return;
    v5 = 17;
  }
  else
  {
    v5 = 16;
  }
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_QWORD *)v6 = countAndFlagsBits;
  *(_QWORD *)(v6 + 8) = object;
  *(_BYTE *)(v6 + 16) = v5;
  swift_bridgeObjectRetain();
  swift_willThrow();
}

uint64_t BuiltInDefinition.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltInDefinition.inputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltInDefinition.outputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltInDefinition.availability.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of MaterialXAvailability(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t BuiltInDefinition.InputSpec.name.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t BuiltInDefinition.InputSpec.type.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t BuiltInDefinition.InputSpec.isConstant.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

uint64_t static BuiltInDefinition.InputSpec.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  char v12;
  char v13;

  if (a1 == a5 && a2 == a6)
  {
    if (a3 != a7)
    {
      v12 = 0;
      return v12 & 1;
    }
LABEL_7:
    v12 = a4 ^ a8 ^ 1;
    return v12 & 1;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v12 = 0;
  if ((v13 & 1) != 0 && a3 == a7)
    goto LABEL_7;
  return v12 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v4)
      return 0;
    return v3 ^ v5 ^ 1u;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v7 & 1) != 0 && v2 == v4)
    return v3 ^ v5 ^ 1u;
  return result;
}

uint64_t BuiltInDefinition.OutputSpec.name.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t BuiltInDefinition.OutputSpec.type.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

BOOL static BuiltInDefinition.OutputSpec.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  _BOOL8 result;

  if (a1 == a4 && a2 == a5)
    return a3 == a6;
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v8 & 1) != 0)
    return a3 == a6;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition.OutputSpec(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1])
    return v2 == v3;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

ShaderGraph::BuiltInDefinition::ReservedNames_optional __swiftcall BuiltInDefinition.ReservedNames.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  ShaderGraph::BuiltInDefinition::ReservedNames_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BuiltInDefinition.ReservedNames.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = ShaderGraph_BuiltInDefinition_ReservedNames___results;
  else
    v4.value = ShaderGraph_BuiltInDefinition_ReservedNames_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

void *static BuiltInDefinition.ReservedNames.allCases.getter()
{
  return &outlined read-only object #0 of static BuiltInDefinition.ReservedNames.allCases.getter;
}

uint64_t BuiltInDefinition.ReservedNames.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746C757365725F5FLL;
  else
    return 0x656D756772615F5FLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition.ReservedNames(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x746C757365725F5FLL;
  else
    v3 = 0x656D756772615F5FLL;
  if (v2)
    v4 = 0xEB0000000073746ELL;
  else
    v4 = 0xE900000000000073;
  if (*a2)
    v5 = 0x746C757365725F5FLL;
  else
    v5 = 0x656D756772615F5FLL;
  if (*a2)
    v6 = 0xE900000000000073;
  else
    v6 = 0xEB0000000073746ELL;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BuiltInDefinition.ReservedNames()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BuiltInDefinition.ReservedNames()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BuiltInDefinition.ReservedNames()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance BuiltInDefinition.ReservedNames@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BuiltInDefinition.ReservedNames.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance BuiltInDefinition.ReservedNames(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656D756772615F5FLL;
  if (*v1)
    v2 = 0x746C757365725F5FLL;
  v3 = 0xEB0000000073746ELL;
  if (*v1)
    v3 = 0xE900000000000073;
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance BuiltInDefinition.ReservedNames(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance BuiltInDefinition.ReservedNames;
}

double BuiltInDefinition.init(name:inputs:outputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  result = 0.0;
  *(_OWORD *)(a5 + 32) = xmmword_245FBFF10;
  return result;
}

double BuiltInDefinition.init(nodeDef:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  specialized BuiltInDefinition.init(nodeDef:)(a1, v6);
  outlined release of NodeDef((uint64_t)a1);
  v4 = v6[1];
  *a2 = v6[0];
  a2[1] = v4;
  result = *(double *)&v7;
  a2[2] = v7;
  return result;
}

BOOL BuiltInDefinition.isDotNode.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x5F746F645F444ELL;
  v0._object = (void *)0xE700000000000000;
  return String.hasPrefix(_:)(v0);
}

BOOL BuiltInDefinition.isMatXConstantNode.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x74736E6F635F444ELL;
  v0._object = (void *)0xEC0000005F746E61;
  return String.hasPrefix(_:)(v0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BuiltInDefinition(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static BuiltInDefinition.== infix(_:_:)((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t SGWarning.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SGWarning_message);
  swift_bridgeObjectRetain();
  return v1;
}

id SGWarning.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___SGWarning_message];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SGWarning.init(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = &v2[OBJC_IVAR___SGWarning_message];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

void SGWarning.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t SGREMaterial.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___SGREMaterial_graph) + OBJC_IVAR___SGGraph_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SGREMaterial.surfaceShaderFunctionName.getter()
{
  return SGREMaterial.surfaceShaderFunctionName.getter(&OBJC_IVAR___SGREMaterial_surfaceShaderFunctionName);
}

id @objc SGREMaterial.surfaceShaderFunctionName.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    swift_bridgeObjectRetain();
    v6 = (void *)MEMORY[0x24954AF98](v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

uint64_t SGREMaterial.geometryModifierFunctionName.getter()
{
  return SGREMaterial.surfaceShaderFunctionName.getter(&OBJC_IVAR___SGREMaterial_geometryModifierFunctionName);
}

uint64_t SGREMaterial.surfaceShaderFunctionName.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SGREMaterial.uniforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGREMaterial.textures.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SGREMaterial.textures.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___SGREMaterial_textures);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SGREMaterial.textures.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

uint64_t SGREMaterial.lightingModel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SGREMaterial_lightingModel);
}

uint64_t SGREMaterial.blending.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SGREMaterial_blending);
}

uint64_t SGREMaterial.hasPremultipliedAlpha.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasPremultipliedAlpha);
}

uint64_t SGREMaterial.matchUnlitColor.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_matchUnlitColor);
}

Class @objc SGREMaterial.uniforms.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  Class isa;

  a5(a4);
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t SGREMaterial.warnings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SGREMaterial.hasSurfaceShaderUniforms.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms);
}

uint64_t SGREMaterial.hasGeometryModifierUniforms.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms);
}

uint64_t SGREMaterial.hasConnectedLightSpillNodes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasConnectedLightSpillNodes);
}

uint64_t SGREMaterial.hasBackgroundBlur.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasBackgroundBlur);
}

uint64_t SGREMaterial.hasGeometryModifierOffset.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterial_hasGeometryModifierOffset);
}

id SGREMaterial.customUniformsTypeDescription.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR___SGREMaterial_customUniformsType)
                           + OBJC_IVAR___SGPropertyDescription_type));
}

id SGREMaterial.graph.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGREMaterial_graph);
}

id SGREMaterial.config.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGREMaterial_config);
}

uint64_t SGREMaterial.textureAssignments.getter()
{
  return swift_bridgeObjectRetain();
}

id SGREMaterial.customUniformsType.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SGREMaterial_customUniformsType);
}

uint64_t SGREMaterial.edgeDigest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___SGREMaterial_edgeDigest;
  v4 = type metadata accessor for SHA512Digest();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SGREMaterial.operationalHash.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SGREMaterial_operationalHash);
}

uint64_t SGREMaterial.__allocating_init(graph:configuration:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return SGREMaterial.init(graph:configuration:)(a1, a2);
}

uint64_t SGREMaterial.init(graph:configuration:)(id a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  NSObject *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  os_signpost_id_t v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  _BYTE *v95;
  id v96;
  Swift::Int v97;
  char *v98;
  char *v99;
  char *v100;
  unint64_t v101;
  id *v102;
  NSObject *v103;
  char *v104;
  os_signpost_type_t v105;
  char *v106;
  void (**v107)(char *, uint64_t);
  uint64_t v108;
  int v109;
  uint64_t v110;
  const char *v111;
  id *v112;
  NSObject *v113;
  char *v114;
  os_signpost_type_t v115;
  char v116;
  void (**v117)(char *, uint64_t);
  char *v118;
  uint64_t v119;
  const char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint8_t *v126;
  os_signpost_id_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  id *v133;
  void (**v134)(char *, uint64_t);
  NSObject *v135;
  char *v136;
  os_signpost_type_t v137;
  char v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint8_t *v146;
  os_signpost_id_t v147;
  os_signpost_type_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint8_t *v157;
  os_signpost_id_t v158;
  os_signpost_type_t v159;
  char *v160;
  char *v161;
  id *v162;
  id *v163;
  char *v164;
  unint64_t v166;
  id *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  id v172;
  char *v173;
  void **v174;
  void *v175;
  void *v176;
  void *v177;
  id v178;
  id v179;
  id v180;
  uint64_t v181;
  unint64_t v182;
  _OWORD *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  id *v194;
  char *v195;
  char *v196;
  id *v197;
  uint64_t v198;
  NSObject *v199;
  os_signpost_type_t v200;
  char *v201;
  const char *v202;
  char *v203;
  id *v204;
  id v205;
  void *v206;
  id v207;
  NSObject *v208;
  os_signpost_type_t v209;
  char *v210;
  const char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint8_t *v215;
  os_signpost_id_t v216;
  id *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  id *v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE *v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint8_t *v237;
  os_signpost_id_t v238;
  uint64_t v239;
  char *v240;
  _BYTE *v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  objc_class *v246;
  _BYTE *v247;
  _QWORD *v248;
  id v249;
  uint64_t v250;
  id *v251;
  uint64_t v252;
  NSObject *v253;
  os_signpost_type_t v254;
  char *v255;
  const char *v256;
  uint64_t v257;
  id *v258;
  char *v259;
  char *v260;
  char *v261;
  void (*v262)(void);
  id *v263;
  uint64_t v264;
  NSObject *v265;
  os_signpost_type_t v266;
  char *v267;
  const char *v268;
  uint64_t v269;
  uint8_t *v270;
  os_signpost_id_t v271;
  id *v272;
  uint64_t v273;
  id *v274;
  char v275;
  id *v276;
  char v277;
  id *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint8_t *v282;
  os_signpost_id_t v283;
  _BYTE *v284;
  _QWORD *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t *v288;
  uint64_t v289;
  char v290;
  id *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  Swift::String v298;
  id *v299;
  uint64_t v300;
  char *v301;
  char *v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  char v307;
  char *v308;
  unsigned int v309;
  uint64_t v310;
  void (*v311)(char *, char *, uint64_t);
  uint64_t v312;
  void *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  id *v318;
  uint64_t v319;
  void *v320;
  void *v321;
  char *v322;
  void *v323;
  char *v324;
  char *v325;
  void *v326;
  NSObject *v327;
  os_log_type_t v328;
  uint8_t *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t i;
  char *v335;
  void *v336;
  char *v337;
  id *v338;
  char v339;
  char *v340;
  char v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t j;
  char *v347;
  void *v348;
  char *v349;
  char *v350;
  id *v351;
  char v352;
  char v353;
  uint64_t v354;
  _BYTE *v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  id *v360;
  char v361;
  id v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  void *v371;
  Swift::String v372;
  char *v373;
  uint64_t *v374;
  _BYTE *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  char *v395;
  uint64_t v396;
  void *v397;
  Swift::String v398;
  Swift::String v399;
  uint64_t *v400;
  Swift::String v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  Swift::String v413;
  Swift::String v414;
  Swift::String v415;
  Swift::String v416;
  uint64_t (*v417)(uint64_t);
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  void *v424;
  Swift::String v425;
  Swift::String v426;
  uint64_t (*v427)(void);
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char IsNativeType;
  uint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  void *v438;
  Swift::String v439;
  Swift::String v440;
  uint64_t v441;
  void *v442;
  Swift::String v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  void *v451;
  void *v452;
  Swift::String v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  uint64_t v458;
  _BYTE *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  void (**v464)(char *, uint64_t);
  unint64_t v465;
  char v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  _QWORD *v471;
  unint64_t v472;
  id *v473;
  void *v474;
  uint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  void (**v492)(char *, uint64_t);
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  void (*v552)(char *, char *, uint64_t);
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  objc_class *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  char *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  id v568;
  uint64_t v569;
  uint64_t v570;
  id *v571;
  uint64_t v572;
  uint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  uint8_t *v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  unint64_t v584;
  unint64_t v585;
  NSObject *v586;
  uint64_t v587;
  char *v588;
  char v589;
  _QWORD v590[4];
  uint64_t v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  void (*v600)(char *, uint64_t);
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  unint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  NSObject *v643;
  unint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  char *v684;
  uint64_t v685;
  uint64_t v686;
  char *v687;
  char *v688;
  char *v689;
  char *v690;
  char *v691;
  uint64_t v692;
  char *v693;
  char *v694;
  char *v695;
  char *v696;
  char *v697;
  char *v698;
  char *v699;
  char *v700;
  char *v701;
  char *v702;
  char *v703;
  char *v704;
  uint64_t v705;
  char *v706;
  char *v707;
  char *v708;
  char *v709;
  char *v710;
  char *v711;
  unint64_t v712;
  char *v713;
  char *v714;
  char *v715;
  char *v716;
  char *v717;
  char *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  void (**v722)(char *, uint64_t);
  char *v723;
  uint64_t v724;
  uint64_t v725;
  void (*v726)(char *, char *, uint64_t);
  objc_class *ObjectType;
  uint64_t v728;
  char *v729;
  char *v730;
  uint64_t v731;
  _BYTE *v732;
  uint64_t v733;
  id v734;
  char *v735;
  id *v736;
  uint64_t v737;
  unint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  uint64_t v744;
  void *v745;
  objc_super v746;
  objc_super v747;
  uint64_t v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  uint64_t v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  uint64_t v758;

  v731 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  v686 = type metadata accessor for Logger();
  v685 = *(_QWORD *)(v686 - 8);
  MEMORY[0x24BDAC7A8](v686);
  v684 = (char *)v590 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v721 = type metadata accessor for SHA512Digest();
  v720 = *(_QWORD *)(v721 - 8);
  MEMORY[0x24BDAC7A8](v721);
  v692 = (uint64_t)v590 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v719 = type metadata accessor for OSSignpostError();
  v722 = *(void (***)(char *, uint64_t))(v719 - 8);
  v6 = MEMORY[0x24BDAC7A8](v719);
  v688 = (char *)v590 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v696 = (char *)v590 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v701 = (char *)v590 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v590 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v707 = (char *)v590 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v702 = (char *)v590 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v710 = (char *)v590 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v714 = (char *)v590 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v716 = (char *)v590 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v717 = (char *)v590 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v687 = (char *)v590 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v693 = (char *)v590 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v691 = (char *)v590 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v697 = (char *)v590 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v699 = (char *)v590 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v711 = (char *)v590 - v37;
  v733 = type metadata accessor for OSSignpostID();
  v728 = *(_QWORD *)(v733 - 8);
  v38 = MEMORY[0x24BDAC7A8](v733);
  v690 = (char *)v590 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v698 = (char *)v590 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v704 = (char *)v590 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v708 = (char *)v590 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v709 = (char *)v590 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v706 = (char *)v590 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v715 = (char *)v590 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v718 = (char *)v590 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v689 = (char *)v590 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v695 = (char *)v590 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v694 = (char *)v590 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v700 = (char *)v590 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v703 = (char *)v590 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v712 = (unint64_t)v590 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v713 = (char *)v590 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v723 = (char *)v590 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v72 = (char *)v590 - v71;
  MEMORY[0x24BDAC7A8](v70);
  v74 = (char *)v590 - v73;
  v725 = type metadata accessor for OSSignposter();
  v724 = *(_QWORD *)(v725 - 8);
  MEMORY[0x24BDAC7A8](v725);
  v735 = (char *)v590 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = one-time initialization token for debugMode;
  v732 = v2;
  if (v76 != -1)
    swift_once();
  swift_beginAccess();
  v77 = static DebugConfig.debugMode;
  v78 = *(_QWORD *)(static DebugConfig.debugMode + 16);
  v734 = a1;
  v729 = v72;
  v730 = v74;
  v705 = (uint64_t)v14;
  if (v78)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v79 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v77 + 32));
    if (((*(_QWORD *)(v77 + 56 + ((v79 >> 3) & 0xFFFFFFFFFFFFF8)) >> v79) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    a1 = v734;
    v72 = v729;
    v74 = v730;
  }
  v80 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v81 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v80 + 32));
    if (((*(_QWORD *)(v80 + 56 + ((v81 >> 3) & 0xFFFFFFFFFFFFF8)) >> v81) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    v74 = v730;
  }
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v82 = (char *)a1;
  v83 = OSSignposter.logHandle.getter();
  v84 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v726 = *(void (**)(char *, char *, uint64_t))(v728 + 16);
    v726(v72, v74, v733);
    v85 = swift_slowAlloc();
    v86 = swift_slowAlloc();
    LODWORD(v683) = v84;
    v87 = v86;
    *(_QWORD *)&v749 = v86;
    *(_DWORD *)v85 = 141558275;
    v748 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v85 + 12) = 2081;
    v88 = *(_QWORD *)&v82[OBJC_IVAR___SGGraph_name];
    v89 = *(_QWORD *)&v82[OBJC_IVAR___SGGraph_name + 8];
    swift_bridgeObjectRetain();
    v748 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, (uint64_t *)&v749);
    v90 = (char *)v728;
    v72 = v729;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v74 = v730;
    swift_bridgeObjectRelease();
    v91 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v83, (os_signpost_type_t)v683, v91, "transform", "%{private,mask.hash}s", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v87, -1, -1);
    v92 = v733;
    MEMORY[0x24954C33C](v85, -1, -1);

    (*((void (**)(char *, uint64_t))v90 + 1))(v72, v92);
    v93 = v726;
  }
  else
  {

    v90 = (char *)v728;
    v93 = *(void (**)(char *, char *, uint64_t))(v728 + 16);
    v92 = v733;
  }
  v726 = v93;
  v93(v72, v74, v92);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v94 = OSSignpostIntervalState.init(id:isOpen:)();
  v730 = (char *)*((_QWORD *)v90 + 1);
  ((void (*)(char *, uint64_t))v730)(v74, v92);
  v95 = v732;
  *(_QWORD *)&v732[OBJC_IVAR___SGREMaterial_graph] = v82;
  v96 = (id)v731;
  *(_QWORD *)&v95[OBJC_IVAR___SGREMaterial_config] = v731;
  v97 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of static SGDataType.invalidMaterialInputTypes.getter);
  v98 = &v82[OBJC_IVAR___SGGraph_inputs];
  swift_beginAccess();
  v99 = v82;
  v100 = (char *)v96;
  v101 = swift_bridgeObjectRetain();
  v102 = v736;
  specialized Sequence.forEach(_:)(v101, v97, (uint64_t)v99);
  if (v102)
  {
    v736 = v102;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v103 = OSSignposter.logHandle.getter();
    v104 = v723;
    OSSignpostIntervalState.signpostID.getter();
    v105 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v106 = v717;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v107 = v722;
      v108 = v719;
      v109 = ((uint64_t (*)(char *, uint64_t))v722[11])(v106, v719);
      v110 = v733;
      if (v109 == *MEMORY[0x24BEE7810])
      {
        v111 = "[Error] Interval already ended";
      }
      else
      {
        v107[1](v106, v108);
        v111 = "";
      }
      v124 = v729;
      v125 = v723;
      v726(v729, v723, v110);
      v126 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v126 = 0;
      v127 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v103, v105, v127, "transform", v111, v126, 2u);
      MEMORY[0x24954C33C](v126, -1, -1);

      v121 = v124;
      v123 = v730;
      ((void (*)(char *, uint64_t))v730)(v125, v110);
      v122 = v724;
    }
    else
    {

      v121 = v104;
      v122 = v724;
      v110 = v733;
      v123 = v730;
    }
    v128 = v725;
    ((void (*)(char *, uint64_t))v123)(v121, v110);
    swift_release();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v735, v128);
    LODWORD(v735) = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)&v95[OBJC_IVAR___SGREMaterial_uniforms] = *(_QWORD *)v98;
  swift_bridgeObjectRetain();
  SGGraph.collapseConstantAndPassthroughNodes()();
  if (v112)
  {
    v113 = OSSignposter.logHandle.getter();
    v114 = v718;
    OSSignpostIntervalState.signpostID.getter();
    v115 = static os_signpost_type_t.end.getter();
    v116 = OS_os_log.signpostsEnabled.getter();
    v117 = v722;
    v736 = v112;
    if ((v116 & 1) != 0)
    {
      swift_retain();
      v118 = v716;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v119 = v719;
      if (((unsigned int (*)(char *, uint64_t))v117[11])(v118, v719) == *MEMORY[0x24BEE7810])
      {
        v120 = "[Error] Interval already ended";
      }
      else
      {
        v117[1](v118, v119);
        v120 = "";
      }
      v144 = v729;
      v145 = v718;
      v142 = v733;
      v726(v729, v718, v733);
      v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v146 = 0;
      v147 = OSSignpostID.rawValue.getter();
      v148 = v115;
      v140 = v144;
      _os_signpost_emit_with_name_impl(&dword_245E46000, v113, v148, v147, "transform", v120, v146, 2u);
      MEMORY[0x24954C33C](v146, -1, -1);

      v143 = v730;
      ((void (*)(char *, uint64_t))v730)(v145, v142);
      v141 = v724;
    }
    else
    {

      v140 = v114;
      v141 = v724;
      v142 = v733;
      v143 = v730;
    }
    v149 = v725;
    ((void (*)(char *, uint64_t))v143)(v140, v142);
    swift_release();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v735, v149);
    goto LABEL_40;
  }
  SGGraph.removeUnconnectedNodesAndEdges()();
  v134 = v722;
  if (v133)
  {
    v135 = OSSignposter.logHandle.getter();
    v136 = v715;
    OSSignpostIntervalState.signpostID.getter();
    v137 = static os_signpost_type_t.end.getter();
    v138 = OS_os_log.signpostsEnabled.getter();
    v736 = v133;
    if ((v138 & 1) != 0)
    {
      swift_retain();
      v139 = v714;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v152 = v719;
      if (((unsigned int (*)(char *, uint64_t))v134[11])(v139, v719) == *MEMORY[0x24BEE7810])
      {
        v153 = "[Error] Interval already ended";
      }
      else
      {
        v134[1](v139, v152);
        v153 = "";
      }
      v155 = v729;
      v156 = v733;
      v726(v729, v136, v733);
      v157 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v157 = 0;
      v158 = OSSignpostID.rawValue.getter();
      v159 = v137;
      v160 = v155;
      _os_signpost_emit_with_name_impl(&dword_245E46000, v135, v159, v158, "transform", v153, v157, 2u);
      MEMORY[0x24954C33C](v157, -1, -1);

      v161 = v730;
      ((void (*)(char *, uint64_t))v730)(v136, v156);
      v154 = v724;
      ((void (*)(char *, uint64_t))v161)(v160, v156);
    }
    else
    {

      v154 = v724;
      ((void (*)(char *, uint64_t))v730)(v136, v733);
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v154 + 8))(v735, v725);
    goto LABEL_40;
  }
  v150 = OBJC_IVAR___SGGraph_resultsNode;
  v151 = *(id *)&v99[OBJC_IVAR___SGGraph_resultsNode];
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v151, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))closure #2 in SGREMaterial.init(graph:configuration:));

  v166 = specialized SGGraph.deprecationMap()();
  v723 = v100;
  v167 = (id *)SGGraph.topologicalSort()();
  v169 = v168;
  v718 = (char *)v150;
  v728 = (uint64_t)v99;
  v171 = v170;

  v173 = (char *)v167[2];
  v683 = v94;
  if (v173)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v736 = v167;
    v174 = v167 + 6;
    do
    {
      v176 = *(v174 - 1);
      v177 = *v174;
      *(_QWORD *)&v749 = *(v174 - 2);
      v175 = (void *)v749;
      *((_QWORD *)&v749 + 1) = v176;
      *(_QWORD *)&v750 = v177;
      v178 = v177;
      v179 = v175;
      v180 = v176;
      closure #1 in SGGraph.replaceDeprecatedAndRedundantNodes()((uint64_t)&v749, v166);
      v174 += 3;

      --v173;
    }
    while (v173);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v181 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v182 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v181 + 32));
    if (((*(_QWORD *)(v181 + 56 + ((v182 >> 3) & 0xFFFFFFFFFFFFF8)) >> v182) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  v183 = SGGraph.topologicalSort()();
  v185 = v184;
  v187 = v186;
  v189 = v188;
  v190 = SGGraph.surfaceNodeElement(ofType:)(0);
  v736 = 0;
  v716 = v192;
  v717 = v190;
  if (!v190)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v197 = (id *)swift_allocError();
    *(_OWORD *)v198 = xmmword_245FBFF30;
    *(_BYTE *)(v198 + 16) = 21;
    v736 = v197;
    swift_willThrow();

    swift_bridgeObjectRelease();
    v199 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v200 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v201 = v699;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (((unsigned int (*)(char *, uint64_t))v722[11])(v201, v719) == *MEMORY[0x24BEE7810])
      {
        v202 = "[Error] Interval already ended";
      }
      else
      {
        v722[1](v699, v719);
        v202 = "";
      }
      v212 = v729;
      v213 = v703;
      v214 = v733;
      v726(v729, v703, v733);
      v215 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v215 = 0;
      v216 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v199, v200, v216, "transform", v202, v215, 2u);
      MEMORY[0x24954C33C](v215, -1, -1);

      ((void (*)(char *, uint64_t))v730)(v213, v214);
    }
    else
    {

      v212 = v703;
    }
    ((void (*)(char *, uint64_t))v730)(v212, v733);
    goto LABEL_99;
  }
  v193 = v191;
  v194 = v736;
  v715 = SGGraph.surfaceNodeElement(ofType:)(1);
  v713 = v195;
  v714 = v196;
  v736 = v194;
  v708 = v193;
  v709 = v189;
  swift_bridgeObjectRetain();
  v710 = v185;
  v203 = v187;
  v712 = (unint64_t)v183;
  v711 = v203;
  v204 = v736;
  specialized Sequence.forEach(_:)((uint64_t)v183, (unint64_t)v183, v203);
  v736 = v204;
  if (v204)
  {
    swift_bridgeObjectRelease();
    v205 = v709;

    v206 = v711;
    v207 = v710;

    outlined consume of TopologicalSort.Element?(v715, v713, v714);
    swift_bridgeObjectRelease();

    v208 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v209 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v210 = v697;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (((unsigned int (*)(char *, uint64_t))v722[11])(v210, v719) == *MEMORY[0x24BEE7810])
      {
        v211 = "[Error] Interval already ended";
      }
      else
      {
        v722[1](v697, v719);
        v211 = "";
      }
      v220 = v729;
      v221 = v700;
LABEL_97:
      v236 = v733;
      v726(v220, v221, v733);
      v237 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v237 = 0;
      v238 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v208, v209, v238, "transform", v211, v237, 2u);
      MEMORY[0x24954C33C](v237, -1, -1);

      ((void (*)(char *, uint64_t))v730)(v221, v236);
      goto LABEL_98;
    }

    v729 = v700;
    goto LABEL_98;
  }
  swift_bridgeObjectRelease();

  v217 = v736;
  v218 = inferTextureAssignments(from:)();
  v736 = v217;
  if (v217)
  {
    outlined consume of TopologicalSort.Element?(v715, v713, v714);

    swift_bridgeObjectRelease();
    v208 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v209 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v219 = v696;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (((unsigned int (*)(char *, uint64_t))v722[11])(v219, v719) == *MEMORY[0x24BEE7810])
      {
        v211 = "[Error] Interval already ended";
      }
      else
      {
        v722[1](v696, v719);
        v211 = "";
      }
      v220 = v729;
      v221 = v698;
      goto LABEL_97;
    }

    v729 = v698;
LABEL_98:
    ((void (*)(char *, uint64_t))v730)(v729, v733);
LABEL_99:
    swift_release();
    (*(void (**)(char *, uint64_t))(v724 + 8))(v735, v725);
LABEL_40:
    LODWORD(v735) = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v129 = 1;
    goto LABEL_41;
  }
  v222 = v218;
  v223 = swift_allocObject();
  *(_QWORD *)(v223 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Int>>);
  v224 = swift_allocObject();
  *(_QWORD *)(v224 + 16) = partial apply for closure #1 in mapUniforms(_:);
  *(_QWORD *)(v224 + 24) = v223;
  swift_retain();
  swift_retain();
  v225 = v736;
  v226 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph12TypedTextureVG_AF0G10AssignmentVs5NeverOTg504_s11d26Graph11mapUniformsySayAA17gh9VGSayAA05F14E0VGFAdGXEfU0_s11AnyIteratorVySiGTf1cn_nTf4ng_n(v222);
  v706 = (char *)v225;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  v707 = (char *)v226;
  v227 = *(_QWORD *)(v226 + 16);
  if (v227)
  {
    v228 = (_BYTE *)(swift_bridgeObjectRetain() + 72);
    v229 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((*v228 & 1) == 0)
      {
        v231 = *((_QWORD *)v228 - 4);
        v736 = (id *)*((_QWORD *)v228 - 5);
        v233 = *((_QWORD *)v228 - 2);
        v232 = *((_QWORD *)v228 - 1);
        swift_bridgeObjectRetain();
        outlined copy of TextureSource();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v229 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v229[2] + 1, 1, v229);
        v235 = v229[2];
        v234 = v229[3];
        if (v235 >= v234 >> 1)
          v229 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v234 > 1), v235 + 1, 1, v229);
        v229[2] = v235 + 1;
        v230 = &v229[4 * v235];
        v230[4] = v736;
        v230[5] = v231;
        v230[6] = v233;
        v230[7] = v232;
      }
      v228 += 48;
      --v227;
    }
    while (v227);
    swift_bridgeObjectRelease();
  }
  else
  {
    v229 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if (v229[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v239 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v239 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)&v749 = v239;
  v240 = v706;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)v229, 1, &v749);
  if (v240)
  {
LABEL_260:
    swift_bridgeObjectRelease();
    swift_release();
    __break(1u);
    JUMPOUT(0x245E8EB90);
  }
  swift_bridgeObjectRelease();
  v241 = v732;
  v242 = (uint64_t *)&v732[OBJC_IVAR___SGREMaterial_textures];
  *(_QWORD *)&v732[OBJC_IVAR___SGREMaterial_textures] = v749;
  v243 = (uint64_t)v707;
  *(_QWORD *)&v241[OBJC_IVAR___SGREMaterial_textureAssignments] = v707;
  swift_bridgeObjectRetain();
  v244 = SGGraph.createCustomUniformsType(named:textureAssignments:)(0x736D726F66696E55, 0xE800000000000000, v243);
  v736 = 0;
  v245 = v244;
  v246 = (objc_class *)type metadata accessor for SGPropertyDescription();
  v247 = objc_allocWithZone(v246);
  v248 = &v247[OBJC_IVAR___SGPropertyDescription_name];
  *v248 = 0x736D726F66696E55;
  v248[1] = 0xE800000000000000;
  *(_QWORD *)&v247[OBJC_IVAR___SGPropertyDescription_type] = v245;
  v247[OBJC_IVAR___SGPropertyDescription_visible] = 1;
  v747.receiver = v247;
  v747.super_class = v246;
  v249 = objc_msgSendSuper2(&v747, sel_init);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v732[OBJC_IVAR___SGREMaterial_customUniformsType] = v249;
  swift_beginAccess();
  v250 = *v242;
  swift_bridgeObjectRetain();
  v251 = v736;
  v252 = specialized SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(v712, v250);
  v736 = v251;
  if (v251)
  {
    swift_bridgeObjectRelease();
    outlined consume of TopologicalSort.Element?(v715, v713, v714);

    swift_bridgeObjectRelease();
    v253 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v254 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v255 = v691;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (((unsigned int (*)(char *, uint64_t))v722[11])(v255, v719) == *MEMORY[0x24BEE7810])
      {
        v256 = "[Error] Interval already ended";
      }
      else
      {
        v722[1](v691, v719);
        v256 = "";
      }
      v260 = v729;
      v261 = v694;
LABEL_123:
      v269 = v733;
      v726(v260, v261, v733);
      v270 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v270 = 0;
      v271 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v253, v254, v271, "transform", v256, v270, 2u);
      MEMORY[0x24954C33C](v270, -1, -1);

      ((void (*)(char *, uint64_t))v730)(v261, v269);
      goto LABEL_124;
    }

    v729 = v694;
    goto LABEL_124;
  }
  v257 = v252;
  swift_bridgeObjectRelease();
  v258 = v736;
  edgeListDigest(_:)(v257, v692);
  v736 = v258;
  if (v258)
  {

    swift_bridgeObjectRelease();
    outlined consume of TopologicalSort.Element?(v715, v713, v714);
    swift_bridgeObjectRelease();

    v253 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v254 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v259 = v688;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (((unsigned int (*)(char *, uint64_t))v722[11])(v259, v719) == *MEMORY[0x24BEE7810])
      {
        v256 = "[Error] Interval already ended";
      }
      else
      {
        v722[1](v688, v719);
        v256 = "";
      }
      v260 = v729;
      v261 = v690;
      goto LABEL_123;
    }

    v729 = v690;
LABEL_124:
    ((void (*)(char *, uint64_t))v730)(v729, v733);
    swift_release();
    (*(void (**)(char *, uint64_t))(v724 + 8))(v735, v725);
    LODWORD(v735) = 0;
    v132 = 0;
    v129 = 1;
    v130 = 1;
    v131 = 1;
    goto LABEL_41;
  }
  v262 = *(void (**)(void))(v720 + 32);
  v707 = &v732[OBJC_IVAR___SGREMaterial_edgeDigest];
  v262();
  v263 = v736;
  v264 = specialized inferLightingModel(from:in:)((uint64_t)v717);
  v736 = v263;
  if (v263)
  {
    swift_bridgeObjectRelease();
    outlined consume of TopologicalSort.Element?(v715, v713, v714);

    swift_bridgeObjectRelease();
    v265 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    v266 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      swift_retain();
      v267 = v687;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if (((unsigned int (*)(char *, uint64_t))v722[11])(v267, v719) == *MEMORY[0x24BEE7810])
      {
        v268 = "[Error] Interval already ended";
      }
      else
      {
        v722[1](v687, v719);
        v268 = "";
      }
      v280 = v689;
      v281 = v733;
      v726(v729, v689, v733);
      v282 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v282 = 0;
      v283 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v265, v266, v283, "transform", v268, v282, 2u);
      MEMORY[0x24954C33C](v282, -1, -1);

      ((void (*)(char *, uint64_t))v730)(v280, v281);
    }
    else
    {

      v729 = v689;
    }
    ((void (*)(char *, uint64_t))v730)(v729, v733);
    swift_release();
    (*(void (**)(char *, uint64_t))(v724 + 8))(v735, v725);
    goto LABEL_134;
  }
  *(_QWORD *)&v732[OBJC_IVAR___SGREMaterial_lightingModel] = v264;
  v272 = v736;
  v273 = specialized inferBlendMode(from:in:)(v717, v716, v708, v712, v711);
  v736 = v272;
  if (v272)
    goto LABEL_129;
  *(_QWORD *)&v732[OBJC_IVAR___SGREMaterial_blending] = v273;
  v274 = v736;
  v275 = specialized inferHasPremultipliedAlpha(from:in:)((uint64_t)v717);
  v736 = v274;
  if (v274)
    goto LABEL_129;
  v732[OBJC_IVAR___SGREMaterial_hasPremultipliedAlpha] = v275 & 1;
  v276 = v736;
  v277 = specialized inferApplyPostProcessToneMap(from:in:)(v717, v716, v708, v712, v711);
  v736 = v276;
  if (v276
    || (v732[OBJC_IVAR___SGREMaterial_matchUnlitColor] = (v277 & 1) == 0,
        v278 = v736,
        specialized conditionallyInsertDiscardNode(from:in:)(v717, v716, v708, v712, v711),
        (v736 = v278) != 0))
  {
LABEL_129:
    swift_bridgeObjectRelease();
    outlined consume of TopologicalSort.Element?(v715, v713, v714);

    swift_bridgeObjectRelease();
    v279 = v735;
    $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v724 + 8))(v279, v725);
LABEL_134:
    LODWORD(v735) = 0;
    goto LABEL_135;
  }
  v284 = v732;
  v285 = &v732[OBJC_IVAR___SGREMaterial_surfaceShaderFunctionName];
  *v285 = 0xD000000000000018;
  v285[1] = 0x8000000245FC7CD0;
  v286 = 0xD00000000000001BLL;
  if (!v715)
    v286 = 0;
  v287 = 0x8000000245FC7C50;
  if (!v715)
    v287 = 0;
  v288 = (unint64_t *)&v284[OBJC_IVAR___SGREMaterial_geometryModifierFunctionName];
  *v288 = v286;
  v288[1] = v287;
  v289 = static DebugConfig.debugMode;
  swift_bridgeObjectRetain();
  v290 = specialized Set.contains(_:)(3, v289);
  swift_bridgeObjectRelease();
  if ((v290 & 1) != 0)
  {
    v291 = v736;
    createDotText(representing:)((char *)v728);
    v736 = v291;
    if (v291)
    {
      swift_bridgeObjectRelease();
      outlined consume of TopologicalSort.Element?(v715, v713, v714);

      goto LABEL_185;
    }
    v294 = v292;
    v295 = v293;
    *(_QWORD *)&v749 = 0;
    *((_QWORD *)&v749 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v297 = *(_QWORD *)(v728 + OBJC_IVAR___SGGraph_name);
    v296 = *(_QWORD *)(v728 + OBJC_IVAR___SGGraph_name + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v749 = v297;
    *((_QWORD *)&v749 + 1) = v296;
    v298._countAndFlagsBits = 0x706172476970615FLL;
    v298._object = (void *)0xEF6C616E69665F68;
    String.append(_:)(v298);
    specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v294, v295, v749, *((void **)&v749 + 1), 7630692, 0xE300000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v733 = specialized Array._getCount()(v712);
  if (!v733)
  {
    v306 = 0;
    goto LABEL_156;
  }
  v129 = 0;
  v299 = (id *)(swift_bridgeObjectRetain() + 48);
  do
  {
    v300 = v129 + 1;
    if (__OFADD__(v129, 1))
    {
      __break(1u);
LABEL_255:
      __break(1u);
      goto LABEL_256;
    }
    v301 = (char *)*(v299 - 2);
    v302 = &v301[OBJC_IVAR___SGNode_data];
    if (v301[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu)
    {
      v303 = *(v299 - 1);
      v722 = (void (**)(char *, uint64_t))*v299;
      v304 = *((_QWORD *)v302 + 1);
      v729 = *(char **)v302;
      v719 = one-time initialization token for realityKitBackgroundBlurNodes;
      v730 = v301;
      v726 = v303;
      v722 = v722;
      if (v719 != -1)
        swift_once();
      swift_beginAccess();
      v305 = static ShaderGraphNode.realityKitBackgroundBlurNodes;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LODWORD(v729) = specialized Set.contains(_:)((uint64_t)v729, v304, v305);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v729 & 1) != 0)
      {
        v306 = 1;
        goto LABEL_155;
      }
    }
    v299 += 3;
    ++v129;
  }
  while (v300 != v733);
  v306 = 0;
LABEL_155:
  swift_bridgeObjectRelease();
LABEL_156:
  v732[OBJC_IVAR___SGREMaterial_hasBackgroundBlur] = v306;
  v307 = (char)v715;
  if (!v715)
    goto LABEL_170;
  v308 = &v715[OBJC_IVAR___SGNode_data];
  v309 = v715[OBJC_IVAR___SGNode_data + 80];
  if (v309 >= 0x40)
  {
    v315 = v714;
    v316 = v715;
    v317 = v713;
    swift_bridgeObjectRelease();
LABEL_161:
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v318 = (id *)swift_allocError();
    *(_OWORD *)v319 = xmmword_245FBFF20;
    *(_BYTE *)(v319 + 16) = 21;
    v736 = v318;
    swift_willThrow();

    swift_bridgeObjectRelease();
    v320 = v715;
    v321 = v713;
    outlined consume of TopologicalSort.Element?(v715, v713, v714);

    goto LABEL_186;
  }
  v722 = (void (**)(char *, uint64_t))*((_QWORD *)v308 + 9);
  v719 = *((_QWORD *)v308 + 8);
  v733 = *((_QWORD *)v308 + 7);
  v310 = *((_QWORD *)v308 + 5);
  v730 = (char *)*((_QWORD *)v308 + 6);
  v729 = (char *)*((_QWORD *)v308 + 4);
  v311 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v308 + 2);
  v706 = (char *)*((_QWORD *)v308 + 3);
  v726 = v311;
  v313 = *(void **)v308;
  v312 = *((_QWORD *)v308 + 1);
  outlined copy of TopologicalSort.Element?(v715, v713, v714);
  v589 = v309;
  v314 = v729;
  outlined copy of NodeData(v313, v312, v311, v706, (uint64_t)v729, v310, (int)v730, v733, v719, (uint64_t)v722, v589);
  LODWORD(v312) = specialized Surface.init(nodeDefID:)((uint64_t)v313, v312);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MaterialXAvailability((uint64_t)v314, v310);
  if ((_DWORD)v312 == 4)
  {
    swift_bridgeObjectRelease();
    v315 = v714;
    goto LABEL_161;
  }
  v322 = v715;
  v323 = (void *)MEMORY[0x24954AF98](0xD000000000000013, 0x8000000245FC8E60);
  v324 = (char *)objc_msgSend(v322, sel_inputNamed_, v323);

  if (v324)
  {
    v325 = &v324[OBJC_IVAR___SGInput_edge];
    swift_beginAccess();
    v326 = (void *)MEMORY[0x24954C3E4](v325);

    v307 = v326 != 0;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    __swift_project_value_buffer(v686, (uint64_t)logger);
    v327 = Logger.logObject.getter();
    v328 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v327, v328))
    {
      v329 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v329 = 0;
      _os_log_impl(&dword_245E46000, v327, v328, "GeometryModifier is missing an expected input.", v329, 2u);
      MEMORY[0x24954C33C](v329, -1, -1);

    }
    else
    {

    }
    v307 = 1;
  }
LABEL_170:
  v732[OBJC_IVAR___SGREMaterial_hasGeometryModifierOffset] = v307;
  v129 = *(_QWORD *)(*(_QWORD *)&v718[v728] + OBJC_IVAR___SGNode_inputs);
  v330 = specialized ContiguousArray.init()();
  *(_QWORD *)&v749 = v330;
  v331 = swift_bridgeObjectRetain();
  v733 = v129;
  v332 = specialized Array.count.getter(v331);
  if (!v332)
  {
    swift_bridgeObjectRelease();
    goto LABEL_182;
  }
  v333 = v332;
  if (v332 < 1)
    goto LABEL_255;
  LODWORD(v730) = specialized Array._hoistableIsNativeTypeChecked()(v733);
  for (i = 0; i != v333; ++i)
  {
    if ((v730 & 1) != 0)
      v335 = (char *)*(id *)(v733 + 8 * i + 32);
    else
      v335 = (char *)MEMORY[0x24954B748](i, v733);
    v336 = v335;
    v337 = &v335[OBJC_IVAR___SGInput_type];
    swift_beginAccess();
    if (*(_QWORD *)v337 == 53)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  v330 = v749;
LABEL_182:
  v729 = (char *)(id)v728;
  v338 = v736;
  v339 = specialized Sequence.contains(where:)(v330, (uint64_t)v729);
  v736 = v338;
  if (v338)
  {

    swift_bridgeObjectRelease();
    swift_release();

    goto LABEL_184;
  }
  v341 = v339;
  swift_release();

  v732[OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms] = v341 & 1;
  if (!v715)
  {
    v732[OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms] = 0;
    goto LABEL_204;
  }
  v129 = *(_QWORD *)(*(_QWORD *)&v718[v728] + OBJC_IVAR___SGNode_inputs);
  v342 = specialized ContiguousArray.init()();
  *(_QWORD *)&v749 = v342;
  v343 = swift_bridgeObjectRetain();
  v733 = v129;
  v344 = specialized Array.count.getter(v343);
  if (!v344)
  {
    swift_bridgeObjectRelease();
    goto LABEL_201;
  }
  v345 = v344;
  if (v344 < 1)
  {
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  LODWORD(v730) = specialized Array._hoistableIsNativeTypeChecked()(v733);
  for (j = 0; j != v345; ++j)
  {
    if ((v730 & 1) != 0)
      v347 = (char *)*(id *)(v733 + 8 * j + 32);
    else
      v347 = (char *)MEMORY[0x24954B748](j, v733);
    v348 = v347;
    v349 = &v347[OBJC_IVAR___SGInput_type];
    swift_beginAccess();
    if (*(_QWORD *)v349 == 54)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease();
  v342 = v749;
LABEL_201:
  v350 = v729;
  v351 = v736;
  v352 = specialized Sequence.contains(where:)(v342, (uint64_t)v350);
  v736 = v351;
  if (!v351)
  {
    v353 = v352;
    swift_release();

    v732[OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms] = v353 & 1;
LABEL_204:
    v354 = specialized static Array._allocateUninitialized(_:)(0);
    v355 = v732;
    *(_QWORD *)&v732[OBJC_IVAR___SGREMaterial_warnings] = v354;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v356 = swift_allocObject();
    v357 = specialized static Array._adoptStorage(_:count:)(v356, 2);
    *v358 = 0xD000000000000021;
    v358[1] = 0x8000000245FC79C0;
    v731 = 0xD000000000000012;
    v358[2] = 0xD000000000000022;
    v358[3] = 0x8000000245FC7960;
    v359 = (_QWORD *)destructiveProjectEnumData for NodePersonality.ShaderType(v357);
    v360 = v736;
    v361 = specialized Sequence.contains(where:)(v712, v359);
    v733 = (uint64_t)v360;
    swift_bridgeObjectRelease();
    v355[OBJC_IVAR___SGREMaterial_hasConnectedLightSpillNodes] = v361 & 1;
    Hasher.init()();
    SHA512Digest.hash(into:)();
    v756 = v751;
    v757 = v752;
    v758 = v753;
    v754 = v749;
    v755 = v750;
    *(_QWORD *)&v355[OBJC_IVAR___SGREMaterial_operationalHash] = Hasher.finalize()();

    v746.receiver = v355;
    v746.super_class = ObjectType;
    v362 = objc_msgSendSuper2(&v746, sel_init);
    v363 = static DebugConfig.debugMode;
    v129 = (uint64_t)v362;
    swift_bridgeObjectRetain();
    LOBYTE(v355) = specialized Set.contains(_:)(1, v363);
    swift_bridgeObjectRelease();
    if ((v355 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      outlined consume of TopologicalSort.Element?(v715, v713, v714);
      swift_bridgeObjectRelease();

LABEL_253:
      v588 = v735;
      $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)();

      swift_release();
      (*(void (**)(char *, uint64_t))(v724 + 8))(v588, v725);

      return v129;
    }
    v744 = v257;
    v364 = (char *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    v365 = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
    v728 = (uint64_t)v364;
    ObjectType = (objc_class *)v365;
    v366 = BidirectionalCollection<>.joined(separator:)();
    v368 = v367;
    swift_bridgeObjectRelease();
    v369 = OBJC_IVAR___SGREMaterial_graph;
    v370 = (uint64_t *)(*(_QWORD *)(v129 + OBJC_IVAR___SGREMaterial_graph) + OBJC_IVAR___SGGraph_name);
    v371 = (void *)v370[1];
    v744 = *v370;
    v745 = v371;
    swift_bridgeObjectRetain();
    v650 = 0xE900000000000074;
    v372._countAndFlagsBits = 0x73694C656764655FLL;
    v372._object = (void *)0xE900000000000074;
    String.append(_:)(v372);
    specialized static FileLogger.saveDebugTextSource(_:name:extension:)(v366, v368, v744, v745, 7633012, 0xE300000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v597 = ObjectIdentifier.debugDescription.getter();
    v730 = v373;
    v374 = (uint64_t *)(*(_QWORD *)(v129 + v369) + OBJC_IVAR___SGGraph_name);
    v375 = (_BYTE *)v374[1];
    v599 = *v374;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v376 = swift_allocObject();
    v377 = specialized static Array._adoptStorage(_:count:)(v376, 1);
    v378 = *(_QWORD *)(v129 + OBJC_IVAR___SGREMaterial_operationalHash);
    v379 = MEMORY[0x24BEE17F0];
    v380[3] = MEMORY[0x24BEE1768];
    v380[4] = v379;
    *v380 = v378;
    destructiveProjectEnumData for NodePersonality.ShaderType(v377);
    v732 = v375;
    swift_bridgeObjectRetain();
    v598 = String.init(format:_:)();
    v648 = v381;
    v382 = *(_QWORD *)(v129 + OBJC_IVAR___SGREMaterial_lightingModel);
    switch(v382)
    {
      case 3:
        v731 = 0x616F637261656C63;
        break;
      case 2:
        v650 = 0xE500000000000000;
        v731 = 0x74696C6E75;
        break;
      case 1:
        v650 = 0xE300000000000000;
        v731 = 7496304;
        break;
      default:
        v650 = 0x8000000245FC8E40;
        break;
    }
    v383 = *(_QWORD *)(v129 + OBJC_IVAR___SGREMaterial_blending);
    if (v383)
    {
      if (v383 == 1)
      {
        v647 = 0xEB00000000746E65;
        v384 = 0x726170736E617274;
      }
      else
      {
        v647 = 0xEF3E65756C617620;
        v384 = 0x64696C61766E693CLL;
      }
    }
    else
    {
      v647 = 0xE600000000000000;
      v384 = 0x65757161706FLL;
    }
    v600 = (void (*)(char *, uint64_t))v384;
    v649 = 0x2D656E6F6E2D09;
    v385 = *(unsigned __int8 *)(v129 + OBJC_IVAR___SGREMaterial_hasPremultipliedAlpha);
    v601 = *(unsigned __int8 *)(v129 + OBJC_IVAR___SGREMaterial_matchUnlitColor);
    v602 = v385;
    v386 = *(unsigned __int8 *)(v129 + OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms);
    v605 = *(unsigned __int8 *)(v129 + OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms);
    v606 = v386;
    v387 = *(unsigned __int8 *)(v129 + OBJC_IVAR___SGREMaterial_hasBackgroundBlur);
    v603 = *(unsigned __int8 *)(v129 + OBJC_IVAR___SGREMaterial_hasConnectedLightSpillNodes);
    v604 = v387;
    v607 = *(unsigned __int8 *)(v129 + OBJC_IVAR___SGREMaterial_hasGeometryModifierOffset);
    v388 = swift_bridgeObjectRetain();
    v389 = specialized Array.count.getter(v388);
    swift_bridgeObjectRelease();
    if (v389)
    {
      v390 = swift_bridgeObjectRetain();
      v391 = specialized Array.count.getter(v390);
      if (v391)
      {
        v392 = v391;
        v740 = specialized ContiguousArray.init()();
        specialized ContiguousArray.reserveCapacity(_:)(v392);
        if (v392 < 0)
        {
          __break(1u);
LABEL_259:
          __break(1u);
          goto LABEL_260;
        }
        LODWORD(v734) = specialized Array._hoistableIsNativeTypeChecked()(v390);
        v393 = 0;
        do
        {
          if ((v734 & 1) != 0)
            v394 = (char *)*(id *)(v390 + 8 * v393 + 32);
          else
            v394 = (char *)MEMORY[0x24954B748](v393, v390);
          v395 = v394;
          ++v393;
          v742 = 9;
          v743 = 0xE100000000000000;
          v396 = *(_QWORD *)&v394[OBJC_IVAR___SGInput_name];
          v397 = *(void **)&v394[OBJC_IVAR___SGInput_name + 8];
          swift_bridgeObjectRetain();
          v398._countAndFlagsBits = v396;
          v398._object = v397;
          String.append(_:)(v398);
          swift_bridgeObjectRelease();
          v399._countAndFlagsBits = 8250;
          v399._object = (void *)0xE200000000000000;
          String.append(_:)(v399);
          v400 = (uint64_t *)&v395[OBJC_IVAR___SGInput_type];
          swift_beginAccess();
          v401._countAndFlagsBits = SGDataType.stringValue.getter(*v400);
          String.append(_:)(v401);

          swift_bridgeObjectRelease();
          v736 = (id *)v742;
          v402 = v743;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v403 = *(_QWORD *)(v740 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v403);
          v404 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v403, (uint64_t)v736, v402);
          destructiveProjectEnumData for NodePersonality.ShaderType(v404);
        }
        while (v392 != v393);
        swift_bridgeObjectRelease();
        v405 = v740;
      }
      else
      {
        v405 = specialized static Array._allocateUninitialized(_:)(0);
        swift_bridgeObjectRelease();
      }
      v742 = v405;
      v596 = BidirectionalCollection<>.joined(separator:)();
      v646 = v406;
      swift_bridgeObjectRelease();
    }
    else
    {
      v646 = 0xE700000000000000;
      v596 = 0x2D656E6F6E2D09;
    }
    v407 = v129 + OBJC_IVAR___SGREMaterial_textures;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v407 + 16))
    {
      v408 = swift_bridgeObjectRetain();
      v409 = v733;
      v410 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SSs5NeverOTg5122_s11ShaderGraph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcS2S3key_SS5valuet_tXEfU4_Tf1cn_n(v408);
      v733 = v409;
      swift_bridgeObjectRelease();
      v740 = v410;
      v595 = BidirectionalCollection<>.joined(separator:)();
      v645 = v411;
      swift_bridgeObjectRelease();
    }
    else
    {
      v645 = 0xE700000000000000;
      v595 = 0x2D656E6F6E2D09;
    }
    v412 = OBJC_IVAR___SGREMaterial_customUniformsType;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + OBJC_IVAR___SGREMaterial_customUniformsType)
                                           + OBJC_IVAR___SGPropertyDescription_type)
                               + OBJC_IVAR___SGTypeDescription_type)
                   + 56))
    {
      v740 = 0;
      v741 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v740 = 0x203A657A69732820;
      v741 = 0xE800000000000000;
      LODWORD(v737) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + v412)
                                                        + OBJC_IVAR___SGPropertyDescription_type)
                                            + OBJC_IVAR___SGTypeDescription_type)
                                + 56);
      v413._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v413);
      swift_bridgeObjectRelease();
      v414._countAndFlagsBits = 0x6D6E67696C61202CLL;
      v414._object = (void *)0xED0000203A746E65;
      String.append(_:)(v414);
      LODWORD(v737) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + v412)
                                                        + OBJC_IVAR___SGPropertyDescription_type)
                                            + OBJC_IVAR___SGTypeDescription_type)
                                + 60);
      v415._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v415);
      swift_bridgeObjectRelease();
      v416._countAndFlagsBits = 2601;
      v416._object = (void *)0xE200000000000000;
      String.append(_:)(v416);
      v417 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v129 + v412)
                                                                         + OBJC_IVAR___SGPropertyDescription_type)
                                                             + OBJC_IVAR___SGTypeDescription_type)
                                               + 232);
      v418 = swift_retain();
      v419 = v417(v418);
      swift_release();
      v420 = v733;
      v421 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph16DataTypePropertyV_s6UInt32VtG_SSs5NeverOTg504_s11d7Graph16fgh3Vs6i19VSSIggyo_AC_AEtSSs5J141OIegnrzr_TR04_s11a93Graph12SGREMaterialC5graph13configurationAcA7SGGraphC_AA23SGMaterialConfigurationCtKcfcSSAA16cde4V_s6F8VtXEfU5_Tf3nnnpf_nTf1cn_n(v419);
      v733 = v420;
      swift_bridgeObjectRelease();
      v737 = v421;
      v422 = BidirectionalCollection<>.joined(separator:)();
      v424 = v423;
      swift_bridgeObjectRelease();
      v425._countAndFlagsBits = v422;
      v425._object = v424;
      String.append(_:)(v425);
      swift_bridgeObjectRelease();
      v426._countAndFlagsBits = 10506;
      v426._object = (void *)0xE200000000000000;
      String.append(_:)(v426);
      v594 = v740;
      v644 = v741;
    }
    else
    {
      v644 = 0xE700000000000000;
      v594 = 0x2D656E6F6E2D09;
    }
    v427 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v723) + 0x58);
    v428 = v427();
    v429 = specialized Array.count.getter(v428);
    v430 = swift_bridgeObjectRelease();
    if (!v429)
    {
      v449 = 0xE700000000000000;
      goto LABEL_248;
    }
    v740 = 0;
    v741 = 0xE000000000000000;
    v736 = (id *)((uint64_t (*)(uint64_t))v427)(v430);
    v431 = specialized Array.count.getter(v736);
    if (!v431)
    {
      v448 = specialized static Array._allocateUninitialized(_:)(0);
      swift_bridgeObjectRelease();
LABEL_247:
      v737 = v448;
      v450 = BidirectionalCollection<>.joined(separator:)();
      v452 = v451;
      swift_bridgeObjectRelease();
      v453._countAndFlagsBits = v450;
      v453._object = v452;
      String.append(_:)(v453);
      swift_bridgeObjectRelease();
      v649 = v740;
      v449 = v741;
LABEL_248:
      v608 = v449;
      if (one-time initialization token for logger == -1)
      {
LABEL_249:
        v454 = v686;
        v455 = __swift_project_value_buffer(v686, (uint64_t)logger);
        (*(void (**)(char *, uint64_t, uint64_t))(v685 + 16))(v684, v455, v454);
        v456 = swift_allocObject();
        v707 = (char *)v456;
        v457 = v730;
        *(_QWORD *)(v456 + 16) = v597;
        *(_QWORD *)(v456 + 24) = v457;
        v458 = swift_allocObject();
        v718 = (char *)v458;
        v459 = v732;
        *(_QWORD *)(v458 + 16) = v599;
        *(_QWORD *)(v458 + 24) = v459;
        v460 = swift_allocObject();
        v720 = v460;
        v461 = v648;
        *(_QWORD *)(v460 + 16) = v598;
        *(_QWORD *)(v460 + 24) = v461;
        v462 = swift_allocObject();
        v721 = v462;
        v463 = v650;
        *(_QWORD *)(v462 + 16) = v731;
        *(_QWORD *)(v462 + 24) = v463;
        v464 = (void (**)(char *, uint64_t))swift_allocObject();
        v722 = v464;
        v465 = v647;
        v464[2] = v600;
        v464[3] = (void (*)(char *, uint64_t))v465;
        v701 = (char *)swift_allocObject();
        v466 = v601;
        v701[16] = v601;
        v702 = (char *)swift_allocObject();
        v702[16] = v466;
        v703 = (char *)swift_allocObject();
        v703[16] = v602;
        v704 = (char *)swift_allocObject();
        v704[16] = v603;
        v705 = swift_allocObject();
        *(_BYTE *)(v705 + 16) = v604;
        v706 = (char *)swift_allocObject();
        v706[16] = v605;
        v719 = swift_allocObject();
        *(_BYTE *)(v719 + 16) = v606;
        v726 = (void (*)(char *, char *, uint64_t))swift_allocObject();
        *((_BYTE *)v726 + 16) = v607;
        v467 = swift_allocObject();
        ObjectType = (objc_class *)v467;
        v468 = v646;
        *(_QWORD *)(v467 + 16) = v596;
        *(_QWORD *)(v467 + 24) = v468;
        v469 = swift_allocObject();
        v728 = v469;
        v470 = v645;
        *(_QWORD *)(v469 + 16) = v595;
        *(_QWORD *)(v469 + 24) = v470;
        v471 = (_QWORD *)swift_allocObject();
        v734 = v471;
        v472 = v644;
        v471[2] = v594;
        v471[3] = v472;
        v473 = (id *)swift_allocObject();
        v736 = v473;
        v474 = (void *)v608;
        v473[2] = (id)v649;
        v473[3] = v474;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v643 = Logger.logObject.getter();
        v593 = static os_log_type_t.debug.getter();
        v635 = swift_allocObject();
        *(_BYTE *)(v635 + 16) = 32;
        v592 = swift_allocObject();
        *(_BYTE *)(v592 + 16) = 8;
        v475 = swift_allocObject();
        v476 = v707;
        *(_QWORD *)(v475 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v475 + 24) = v476;
        v477 = v475;
        v642 = v475;
        v478 = swift_allocObject();
        v641 = v478;
        *(_QWORD *)(v478 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(_QWORD *)(v478 + 24) = v477;
        v639 = swift_allocObject();
        *(_BYTE *)(v639 + 16) = 32;
        v699 = (char *)swift_allocObject();
        v699[16] = 8;
        v479 = swift_allocObject();
        v480 = v718;
        *(_QWORD *)(v479 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v479 + 24) = v480;
        v481 = v479;
        v640 = v479;
        v482 = swift_allocObject();
        v700 = (char *)v482;
        *(_QWORD *)(v482 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v482 + 24) = v481;
        v678 = swift_allocObject();
        *(_BYTE *)(v678 + 16) = 32;
        v671 = swift_allocObject();
        *(_BYTE *)(v671 + 16) = 8;
        v483 = swift_allocObject();
        v484 = v720;
        *(_QWORD *)(v483 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v483 + 24) = v484;
        v485 = v483;
        v638 = v483;
        v486 = swift_allocObject();
        v698 = (char *)v486;
        *(_QWORD *)(v486 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v486 + 24) = v485;
        v697 = (char *)swift_allocObject();
        v697[16] = 32;
        v695 = (char *)swift_allocObject();
        v695[16] = 8;
        v487 = swift_allocObject();
        v488 = v721;
        *(_QWORD *)(v487 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v487 + 24) = v488;
        v489 = v487;
        v637 = v487;
        v490 = swift_allocObject();
        v696 = (char *)v490;
        *(_QWORD *)(v490 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v490 + 24) = v489;
        v694 = (char *)swift_allocObject();
        v694[16] = 32;
        v692 = swift_allocObject();
        *(_BYTE *)(v692 + 16) = 8;
        v491 = swift_allocObject();
        v492 = v722;
        *(_QWORD *)(v491 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v491 + 24) = v492;
        v493 = v491;
        v636 = v491;
        v494 = swift_allocObject();
        v693 = (char *)v494;
        *(_QWORD *)(v494 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v494 + 24) = v493;
        v690 = (char *)swift_allocObject();
        v690[16] = 0;
        v691 = (char *)swift_allocObject();
        v691[16] = 4;
        v495 = swift_allocObject();
        v496 = v701;
        *(_QWORD *)(v495 + 16) = partial apply for implicit closure #8 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v495 + 24) = v496;
        v497 = v495;
        v634 = v495;
        v498 = swift_allocObject();
        *(_QWORD *)(v498 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
        *(_QWORD *)(v498 + 24) = v497;
        v499 = v498;
        v633 = v498;
        v500 = swift_allocObject();
        *(_QWORD *)(v500 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
        *(_QWORD *)(v500 + 24) = v499;
        v501 = v500;
        v628 = v500;
        v502 = swift_allocObject();
        v689 = (char *)v502;
        *(_QWORD *)(v502 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
        *(_QWORD *)(v502 + 24) = v501;
        v687 = (char *)swift_allocObject();
        v687[16] = 0;
        v688 = (char *)swift_allocObject();
        v688[16] = 4;
        v503 = swift_allocObject();
        v504 = v702;
        *(_QWORD *)(v503 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v503 + 24) = v504;
        v505 = v503;
        v632 = v503;
        v506 = swift_allocObject();
        *(_QWORD *)(v506 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v506 + 24) = v505;
        v507 = v506;
        v630 = v506;
        v508 = swift_allocObject();
        *(_QWORD *)(v508 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v508 + 24) = v507;
        v509 = v508;
        v623 = v508;
        v510 = swift_allocObject();
        v682 = v510;
        *(_QWORD *)(v510 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
        *(_QWORD *)(v510 + 24) = v509;
        v680 = swift_allocObject();
        *(_BYTE *)(v680 + 16) = 0;
        v681 = swift_allocObject();
        *(_BYTE *)(v681 + 16) = 4;
        v511 = swift_allocObject();
        v512 = v703;
        *(_QWORD *)(v511 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v511 + 24) = v512;
        v513 = v511;
        v629 = v511;
        v514 = swift_allocObject();
        *(_QWORD *)(v514 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v514 + 24) = v513;
        v515 = v514;
        v627 = v514;
        v516 = swift_allocObject();
        *(_QWORD *)(v516 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v516 + 24) = v515;
        v517 = v516;
        v619 = v516;
        v518 = swift_allocObject();
        v679 = v518;
        *(_QWORD *)(v518 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
        *(_QWORD *)(v518 + 24) = v517;
        v676 = swift_allocObject();
        *(_BYTE *)(v676 + 16) = 0;
        v677 = swift_allocObject();
        *(_BYTE *)(v677 + 16) = 4;
        v519 = swift_allocObject();
        v520 = v704;
        *(_QWORD *)(v519 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v519 + 24) = v520;
        v521 = v519;
        v625 = v519;
        v522 = swift_allocObject();
        *(_QWORD *)(v522 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v522 + 24) = v521;
        v523 = v522;
        v624 = v522;
        v524 = swift_allocObject();
        *(_QWORD *)(v524 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v524 + 24) = v523;
        v525 = v524;
        v615 = v524;
        v526 = swift_allocObject();
        v675 = v526;
        *(_QWORD *)(v526 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
        *(_QWORD *)(v526 + 24) = v525;
        v673 = swift_allocObject();
        *(_BYTE *)(v673 + 16) = 0;
        v674 = swift_allocObject();
        *(_BYTE *)(v674 + 16) = 4;
        v527 = swift_allocObject();
        v528 = v705;
        *(_QWORD *)(v527 + 16) = partial apply for implicit closure #12 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v527 + 24) = v528;
        v529 = v527;
        v622 = v527;
        v530 = swift_allocObject();
        *(_QWORD *)(v530 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v530 + 24) = v529;
        v531 = v530;
        v621 = v530;
        v532 = swift_allocObject();
        *(_QWORD *)(v532 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v532 + 24) = v531;
        v533 = v532;
        v612 = v532;
        v534 = swift_allocObject();
        v672 = v534;
        *(_QWORD *)(v534 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
        *(_QWORD *)(v534 + 24) = v533;
        v661 = swift_allocObject();
        *(_BYTE *)(v661 + 16) = 0;
        v670 = swift_allocObject();
        *(_BYTE *)(v670 + 16) = 4;
        v535 = swift_allocObject();
        v536 = v706;
        *(_QWORD *)(v535 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v535 + 24) = v536;
        v537 = v535;
        v620 = v535;
        v538 = swift_allocObject();
        *(_QWORD *)(v538 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v538 + 24) = v537;
        v539 = v538;
        v618 = v538;
        v540 = swift_allocObject();
        *(_QWORD *)(v540 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v540 + 24) = v539;
        v541 = v540;
        v611 = v540;
        v542 = swift_allocObject();
        v669 = v542;
        *(_QWORD *)(v542 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
        *(_QWORD *)(v542 + 24) = v541;
        v667 = swift_allocObject();
        *(_BYTE *)(v667 + 16) = 0;
        v668 = swift_allocObject();
        *(_BYTE *)(v668 + 16) = 4;
        v543 = swift_allocObject();
        v544 = v719;
        *(_QWORD *)(v543 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v543 + 24) = v544;
        v545 = v543;
        v617 = v543;
        v546 = swift_allocObject();
        *(_QWORD *)(v546 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v546 + 24) = v545;
        v547 = v546;
        v616 = v546;
        v548 = swift_allocObject();
        *(_QWORD *)(v548 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v548 + 24) = v547;
        v549 = v548;
        v610 = v548;
        v550 = swift_allocObject();
        v666 = v550;
        *(_QWORD *)(v550 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
        *(_QWORD *)(v550 + 24) = v549;
        v664 = swift_allocObject();
        *(_BYTE *)(v664 + 16) = 0;
        v665 = swift_allocObject();
        *(_BYTE *)(v665 + 16) = 4;
        v551 = swift_allocObject();
        v552 = v726;
        *(_QWORD *)(v551 + 16) = partial apply for implicit closure #10 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v551 + 24) = v552;
        v553 = v551;
        v614 = v551;
        v554 = swift_allocObject();
        *(_QWORD *)(v554 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v554 + 24) = v553;
        v555 = v554;
        v613 = v554;
        v556 = swift_allocObject();
        *(_QWORD *)(v556 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)partial apply;
        *(_QWORD *)(v556 + 24) = v555;
        v557 = v556;
        v609 = v556;
        v558 = swift_allocObject();
        v663 = v558;
        *(_QWORD *)(v558 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int32)partial apply;
        *(_QWORD *)(v558 + 24) = v557;
        v662 = swift_allocObject();
        *(_BYTE *)(v662 + 16) = 32;
        v659 = swift_allocObject();
        *(_BYTE *)(v659 + 16) = 8;
        v559 = swift_allocObject();
        v560 = ObjectType;
        *(_QWORD *)(v559 + 16) = partial apply for implicit closure #16 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v559 + 24) = v560;
        v561 = v559;
        v631 = v559;
        v562 = swift_allocObject();
        v660 = v562;
        *(_QWORD *)(v562 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v562 + 24) = v561;
        v657 = swift_allocObject();
        *(_BYTE *)(v657 + 16) = 32;
        v651 = swift_allocObject();
        *(_BYTE *)(v651 + 16) = 8;
        v563 = swift_allocObject();
        v564 = (char *)v728;
        *(_QWORD *)(v563 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v563 + 24) = v564;
        v565 = v563;
        v626 = v563;
        v566 = swift_allocObject();
        v658 = v566;
        *(_QWORD *)(v566 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v566 + 24) = v565;
        v656 = swift_allocObject();
        *(_BYTE *)(v656 + 16) = 32;
        v654 = swift_allocObject();
        *(_BYTE *)(v654 + 16) = 8;
        v567 = swift_allocObject();
        v568 = v734;
        *(_QWORD *)(v567 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v567 + 24) = v568;
        v569 = swift_allocObject();
        v655 = v569;
        *(_QWORD *)(v569 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v569 + 24) = v567;
        v653 = swift_allocObject();
        *(_BYTE *)(v653 + 16) = 32;
        v652 = swift_allocObject();
        *(_BYTE *)(v652 + 16) = 8;
        v570 = swift_allocObject();
        v571 = v736;
        *(_QWORD *)(v570 + 16) = partial apply for implicit closure #4 in SGREMaterial.init(graph:configuration:);
        *(_QWORD *)(v570 + 24) = v571;
        v572 = swift_allocObject();
        *(_QWORD *)(v572 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(_QWORD *)(v572 + 24) = v570;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
        v573 = swift_allocObject();
        v591 = specialized static Array._adoptStorage(_:count:)(v573, 51);
        v574[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v574[6] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[8] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[10] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[12] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[14] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[16] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[18] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[20] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[22] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[24] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[26] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[28] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[30] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[32] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[34] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[36] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[38] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[40] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[42] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[44] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[46] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[48] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[50] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[52] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[54] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[56] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[58] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[60] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[62] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[64] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[66] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[68] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[70] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[72] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[74] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[76] = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        v574[78] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[80] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[82] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[84] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[86] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[88] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[90] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[92] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[94] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[96] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[98] = closure #1 in OSLogArguments.append(_:)partial apply;
        v574[100] = closure #1 in OSLogArguments.append(_:)partial apply;
        v575 = v635;
        *v574 = partial apply for closure #1 in OSLogArguments.append(_:);
        v574[1] = v575;
        v574[3] = v592;
        v574[5] = v641;
        v574[7] = v639;
        v574[9] = v699;
        v574[11] = v700;
        v574[13] = v678;
        v574[15] = v671;
        v574[17] = v698;
        v574[19] = v697;
        v574[21] = v695;
        v574[23] = v696;
        v574[25] = v694;
        v574[27] = v692;
        v574[29] = v693;
        v574[31] = v690;
        v574[33] = v691;
        v574[35] = v689;
        v574[37] = v687;
        v574[39] = v688;
        v574[41] = v682;
        v574[43] = v680;
        v574[45] = v681;
        v574[47] = v679;
        v574[49] = v676;
        v574[51] = v677;
        v574[53] = v675;
        v574[55] = v673;
        v574[57] = v674;
        v574[59] = v672;
        v574[61] = v661;
        v574[63] = v670;
        v574[65] = v669;
        v574[67] = v667;
        v574[69] = v668;
        v574[71] = v666;
        v574[73] = v664;
        v574[75] = v665;
        v574[77] = v663;
        v574[79] = v662;
        v574[81] = v659;
        v574[83] = v660;
        v574[85] = v657;
        v574[87] = v651;
        v574[89] = v658;
        v574[91] = v656;
        v574[93] = v654;
        v574[95] = v655;
        v574[97] = v653;
        v574[99] = v652;
        v574[101] = v572;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v590[3] = v567;
        swift_retain();
        swift_retain();
        v590[2] = v570;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v590[1] = v572;
        swift_retain();
        swift_bridgeObjectRelease();
        v593 = v593;
        if (os_log_type_enabled(v643, (os_log_type_t)v593))
        {
          v576 = (uint8_t *)swift_slowAlloc();
          v591 = swift_slowAlloc();
          v740 = v591;
          *(_WORD *)v576 = 4354;
          v576[2] = 32;
          swift_release();
          v576[3] = 8;
          swift_release();
          v577 = (unint64_t)v730;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v597, v577, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[12] = 32;
          swift_release();
          v576[13] = 8;
          swift_release();
          v578 = (unint64_t)v732;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v599, v578, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[22] = 32;
          swift_release();
          v576[23] = 8;
          swift_release();
          v579 = v648;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v598, v579, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[32] = 32;
          swift_release();
          v576[33] = 8;
          swift_release();
          v580 = v650;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v731, v580, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[42] = 32;
          swift_release();
          v576[43] = 8;
          swift_release();
          v581 = v647;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v600, v581, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[52] = 0;
          swift_release();
          v576[53] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v581) = v601;
          LODWORD(v737) = v601 ^ 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[58] = 0;
          swift_release();
          v576[59] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v737) = v581;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[64] = 0;
          swift_release();
          v576[65] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v737) = v602;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[70] = 0;
          swift_release();
          v576[71] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v737) = v603;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[76] = 0;
          swift_release();
          v576[77] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v737) = v604;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[82] = 0;
          swift_release();
          v576[83] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v737) = v605;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[88] = 0;
          swift_release();
          v576[89] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v737) = v606;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[94] = 0;
          swift_release();
          v576[95] = 4;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          LODWORD(v737) = v607;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          v576[100] = 32;
          swift_release();
          v576[101] = 8;
          swift_release();
          v582 = v646;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v596, v582, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[110] = 32;
          swift_release();
          v576[111] = 8;
          swift_release();
          v583 = v645;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v595, v583, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[120] = 32;
          swift_release();
          v576[121] = 8;
          swift_release();
          v584 = v644;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v594, v584, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v576[130] = 32;
          swift_release();
          v576[131] = 8;
          swift_release();
          v585 = v608;
          swift_bridgeObjectRetain();
          v737 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v649, v585, &v740);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          v586 = v643;
          _os_log_impl(&dword_245E46000, v643, (os_log_type_t)v593, "SGREMaterial summary: %s\nname: %s\noperationalHash: %s\nlightingModel: %s\nblending: %s\napplyPostProcessTonemap: %{BOOL}d\nmatchUnlitColor: %{BOOL}d\nhasPremultipliedAlpha: %{BOOL}d\nhasLightSpill: %{BOOL}d\nhasBackgroundBlur: %{BOOL}d\nhasSurfaceShaderUniforms: %{BOOL}d\nhasGeometryModifierUniforms: %{BOOL}d\nhasGeometryModifierOffsetInput: %{BOOL}d\nuniforms:\n%s\ntextureMapping:\n"
            "%s\n"
            "custom uniform struct:\n"
            "%s\n"
            "geomProp mapping:\n"
            "%s\n"
            "--",
            v576,
            0x8Cu);
          v587 = v591;
          swift_arrayDestroy();
          MEMORY[0x24954C33C](v587, -1, -1);
          MEMORY[0x24954C33C](v576, -1, -1);

          swift_bridgeObjectRelease();
          outlined consume of TopologicalSort.Element?(v715, v713, v714);
        }
        else
        {

          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          outlined consume of TopologicalSort.Element?(v715, v713, v714);

          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

        }
        (*(void (**)(char *, uint64_t))(v685 + 8))(v684, v686);
        goto LABEL_253;
      }
LABEL_257:
      swift_once();
      goto LABEL_249;
    }
    v432 = v431;
    v739 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v432);
    if ((v432 & 0x8000000000000000) == 0)
    {
      IsNativeType = specialized Array._hoistableIsNativeTypeChecked()(v736);
      v434 = 0;
      do
      {
        if ((IsNativeType & 1) != 0)
          v435 = (char *)v736[v434 + 4];
        else
          v435 = (char *)MEMORY[0x24954B748](v434, v736);
        v436 = v435;
        ++v434;
        v737 = 9;
        v738 = 0xE100000000000000;
        v437 = *(_QWORD *)&v435[OBJC_IVAR___SGGeometryPropertyDefinition_name];
        v438 = *(void **)&v435[OBJC_IVAR___SGGeometryPropertyDefinition_name + 8];
        swift_bridgeObjectRetain();
        v439._countAndFlagsBits = v437;
        v439._object = v438;
        String.append(_:)(v439);
        swift_bridgeObjectRelease();
        v440._countAndFlagsBits = 540945696;
        v440._object = (void *)0xE400000000000000;
        String.append(_:)(v440);
        v441 = *(_QWORD *)&v436[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName];
        v442 = *(void **)&v436[OBJC_IVAR___SGGeometryPropertyDefinition_referencedGeomPropName + 8];
        swift_bridgeObjectRetain();
        v443._countAndFlagsBits = v441;
        v443._object = v442;
        String.append(_:)(v443);

        swift_bridgeObjectRelease();
        v444 = v737;
        v445 = v738;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v446 = *(_QWORD *)(v739 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v446);
        v447 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v446, v444, v445);
        destructiveProjectEnumData for NodePersonality.ShaderType(v447);
      }
      while (v432 != v434);
      swift_bridgeObjectRelease();
      v448 = v739;
      goto LABEL_247;
    }
    goto LABEL_259;
  }

  swift_bridgeObjectRelease();
  swift_release();

LABEL_184:
  outlined consume of TopologicalSort.Element?(v715, v713, v714);
LABEL_185:
  swift_bridgeObjectRelease();
LABEL_186:

  v340 = v735;
  $defer #1 () in RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v724 + 8))(v340, v725);
  LODWORD(v735) = 1;
LABEL_135:
  v129 = 1;
  v130 = 1;
  v131 = 1;
  v132 = 1;
LABEL_41:
  type metadata accessor for SGError();
  v162 = v736;
  v163 = v736;
  SGError.__allocating_init(_:)(v162);
  swift_willThrow();

  v164 = v732;
  if ((_DWORD)v735)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!(_DWORD)v129)
      goto LABEL_43;
LABEL_51:
    swift_bridgeObjectRelease();
    if (!v130)
      goto LABEL_52;
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  if ((_DWORD)v129)
    goto LABEL_51;
LABEL_43:
  if (v130)
    goto LABEL_44;
LABEL_52:

  if (v130)
  {
    swift_bridgeObjectRelease();
    if (v131)
      goto LABEL_54;
LABEL_46:
    if (!v132)
      goto LABEL_48;
    goto LABEL_47;
  }
  if (!v131)
    goto LABEL_46;
LABEL_54:

  if (v132)
LABEL_47:
    (*(void (**)(char *, uint64_t))(v720 + 8))(&v164[OBJC_IVAR___SGREMaterial_edgeDigest], v721);
LABEL_48:

  swift_deallocPartialClassInstance();
  return v129;
}

void closure #1 in SGREMaterial.init(graph:configuration:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  Swift::String v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  void *v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v5 = *a1;
  v6 = (uint64_t *)(*a1 + OBJC_IVAR___SGInput_type);
  swift_beginAccess();
  if (specialized Set.contains(_:)(*v6, a2))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v25 = 0xD00000000000001CLL;
    v26 = 0x8000000245FC9500;
    v7._countAndFlagsBits = SGDataType.stringValue.getter(*v6);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    swift_bridgeObjectRetain();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v24 = a3;
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v25 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_bridgeObjectRetain();
      v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000245FC9500, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v9, v10, "%s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v12, -1, -1);
      v13 = v11;
      a3 = v24;
      MEMORY[0x24954C33C](v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v14 = *(void **)(a3 + OBJC_IVAR___SGGraph_argumentsNode);
    v15 = (void *)MEMORY[0x24954AF98](*(_QWORD *)(v5 + OBJC_IVAR___SGInput_name), *(_QWORD *)(v5 + OBJC_IVAR___SGInput_name + 8));
    v16 = objc_msgSend(v14, sel_outputNamed_, v15);

    if (v16)
    {
      v17 = specialized SGGraph.edges(from:)((uint64_t)v16);
      if (v17 >> 62)
        v18 = _CocoaArrayWrapper.endIndex.getter();
      else
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      if (v18)
      {
        v25 = 0;
        v26 = 0xE000000000000000;
        _StringGuts.grow(_:)(50);
        swift_bridgeObjectRelease();
        v25 = 0xD00000000000001CLL;
        v26 = 0x8000000245FC9500;
        v19._countAndFlagsBits = SGDataType.stringValue.getter(*v6);
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 0xD000000000000014;
        v20._object = (void *)0x8000000245FC9520;
        String.append(_:)(v20);
        v21 = v25;
        v22 = v26;
        lazy protocol witness table accessor for type APIError and conformance APIError();
        swift_allocError();
        *(_QWORD *)v23 = v21;
        *(_QWORD *)(v23 + 8) = v22;
        *(_BYTE *)(v23 + 16) = 7;
        swift_willThrow();
      }

    }
  }
}

uint64_t closure #2 in SGREMaterial.init(graph:configuration:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v1 = (uint64_t *)(a1 + OBJC_IVAR___SGNode_data);
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR___SGNode_data + 80) <= 0x3Fu && v1[5] == 2)
  {
    v2 = *v1;
    v3 = v1[1];
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v4 = v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_BYTE *)(v4 + 16) = 0;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_inputs);
    v38 = MEMORY[0x24BEE4AF8];
    if (v6 >> 62)
      goto LABEL_18;
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
    {
      v8 = 4;
      while (1)
      {
        v9 = (v6 & 0xC000000000000001) != 0
           ? (char *)MEMORY[0x24954B748](v8 - 4, v6)
           : (char *)*(id *)(v6 + 8 * v8);
        v10 = v9;
        v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        v12 = &v9[OBJC_IVAR___SGInput_edge];
        swift_beginAccess();
        v13 = MEMORY[0x24954C3E4](v12);

        if (v13)
        {
          MEMORY[0x24954B1A8]();
          if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v8;
        if (v11 == v7)
        {
          swift_bridgeObjectRelease();
          v14 = v38;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain_n();
    }
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
LABEL_20:
    swift_bridgeObjectRelease();
    if (v14 >> 62)
      goto LABEL_38;
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v15; v15 = _CocoaArrayWrapper.endIndex.getter())
    {
      v39 = v14 & 0xC000000000000001;
      v16 = 4;
      v37 = v14;
      while (1)
      {
        v17 = v39 ? (char *)MEMORY[0x24954B748](v16 - 4, v14) : (char *)*(id *)(v14 + 8 * v16);
        v18 = v17;
        v19 = v16 - 3;
        if (__OFADD__(v16 - 4, 1))
          break;
        v20 = (uint64_t *)(*(_QWORD *)&v17[OBJC_IVAR___SGEdge_from] + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        v21 = *v20;
        v22 = *v20 - 32;
        if (v22 <= 0x18 && ((0x1F680DBu >> v22) & 1) != 0)
          v21 = qword_245FC0298[v22];
        v23 = (uint64_t *)(*(_QWORD *)&v18[OBJC_IVAR___SGEdge_to] + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        v24 = *v23;
        v25 = *v23 - 32;
        if (v25 <= 0x18 && ((0x1F680DBu >> v25) & 1) != 0)
          v24 = qword_245FC0298[v25];
        specialized SGDataType.materialXDataType.getter(v21);
        swift_retain();
        specialized SGDataType.materialXDataType.getter(v24);
        if ((MaterialXDataType.isEqual(to:)() & 1) == 0)
        {
          swift_retain();
          _StringGuts.grow(_:)(18);
          v26 = SGDataType.stringValue.getter(v21);
          v28 = v27;
          swift_bridgeObjectRelease();
          v29._countAndFlagsBits = 10272;
          v29._object = (void *)0xE200000000000000;
          String.append(_:)(v29);
          v30._countAndFlagsBits = MaterialXDataType.description.getter();
          String.append(_:)(v30);
          swift_bridgeObjectRelease();
          v31._countAndFlagsBits = 0x203D212029;
          v31._object = (void *)0xE500000000000000;
          String.append(_:)(v31);
          v32._countAndFlagsBits = SGDataType.stringValue.getter(v24);
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          v33._countAndFlagsBits = 10272;
          v33._object = (void *)0xE200000000000000;
          String.append(_:)(v33);
          v34._countAndFlagsBits = MaterialXDataType.description.getter();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          v35._countAndFlagsBits = 41;
          v35._object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          lazy protocol witness table accessor for type APIError and conformance APIError();
          swift_allocError();
          *(_QWORD *)v36 = v26;
          *(_QWORD *)(v36 + 8) = v28;
          *(_BYTE *)(v36 + 16) = 5;
          swift_willThrow();
          swift_bridgeObjectRelease_n();

          swift_release();
          return swift_release();
        }

        swift_release();
        ++v16;
        v14 = v37;
        if (v19 == v15)
          return swift_bridgeObjectRelease_n();
      }
      __break(1u);
LABEL_38:
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRelease_n();
  }
}

uint64_t SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(a1, a5);
}

uint64_t edgeListDigest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v12[1] = a2;
  v12[5] = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for SHA512();
  v12[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for String.Encoding();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  BidirectionalCollection<>.joined(separator:)();
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  v9 = v8;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v9 >> 60 != 15)
  {
    lazy protocol witness table accessor for type SHA512 and conformance SHA512();
    dispatch thunk of HashFunction.init()();
    __asm { BR              X10 }
  }
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_OWORD *)v10 = xmmword_245FBFF40;
  *(_BYTE *)(v10 + 16) = 21;
  return swift_willThrow();
}

id SGREMaterial.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SGREMaterial.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR___SGNode_inputs);
  v11 = MEMORY[0x24BEE4AF8];
  if (v1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x24954B748](v3 - 4, v1)
         : (char *)*(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = &v4[OBJC_IVAR___SGInput_edge];
      swift_beginAccess();
      v8 = MEMORY[0x24954C3E4](v7);

      if (v8)
      {
        MEMORY[0x24954B1A8]();
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v3;
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        v9 = v11;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain_n();
  }
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x24BEE4AF8];
LABEL_17:
  swift_bridgeObjectRelease();
  return specialized Array.append<A>(contentsOf:)(v9);
}

void closure #5 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, Swift::OpaquePointer a3@<X2>, uint64_t *a4@<X3>, Swift::String *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  char v18;
  Swift::String v19;
  uint64_t *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  Swift::String *v50;
  _BYTE v51[96];
  _BYTE v52[96];
  uint64_t v53;

  v9 = *a1;
  v10 = OBJC_IVAR___SGEdge_from;
  v11 = *(_QWORD *)(*a1 + OBJC_IVAR___SGEdge_from) + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  v12 = MEMORY[0x24954C3E4](v11);
  if (!v12)
    goto LABEL_9;
  v13 = (void *)v12;
  v53 = OBJC_IVAR___SGEdge_to;
  v14 = *(_QWORD *)(v9 + OBJC_IVAR___SGEdge_to) + OBJC_IVAR___SGInput_node;
  swift_beginAccess();
  v15 = MEMORY[0x24954C3E4](v14);
  if (!v15)
  {

LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_245FBECD0;
    *(_QWORD *)(v43 + 32) = SGEdge.debugDescription.getter();
    *(_QWORD *)(v43 + 40) = v44;
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v41 = swift_allocError();
    *(_QWORD *)v45 = v43;
    *(_QWORD *)(v45 + 8) = 0;
    *(_BYTE *)(v45 + 16) = 8;
    swift_willThrow();
    goto LABEL_10;
  }
  v16 = (void *)v15;
  v50 = a5;
  if (*(_QWORD *)(*(_QWORD *)a2 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if ((v17 & 1) != 0)
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
      if ((v18 & 1) != 0)
      {
        outlined init with take of NodeData((uint64_t)v13 + OBJC_IVAR___SGNode_data, (uint64_t)v52);
        outlined retain of NodeData((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of NodeData);
        v19 = NodeData.operationalDescription(replacements:)(a3);
        outlined retain of NodeData((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NodeData);
        v20 = (uint64_t *)(*(_QWORD *)(v9 + v10) + OBJC_IVAR___SGOutput_name);
        v47 = *v20;
        v46 = (void *)v20[1];
        outlined init with take of NodeData((uint64_t)v16 + OBJC_IVAR___SGNode_data, (uint64_t)v51);
        swift_bridgeObjectRetain();
        outlined retain of NodeData((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of NodeData);
        v21 = NodeData.operationalDescription(replacements:)(a3);
        outlined retain of NodeData((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of NodeData);
        v22 = v53;
        v23 = (uint64_t *)(*(_QWORD *)(v9 + v53) + OBJC_IVAR___SGInput_name);
        v48 = (void *)v23[1];
        v49 = *v23;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v24._countAndFlagsBits = 58;
        v24._object = (void *)0xE100000000000000;
        String.append(_:)(v24);
        v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._countAndFlagsBits = 58;
        v26._object = (void *)0xE100000000000000;
        String.append(_:)(v26);
        v27 = (uint64_t *)(*(_QWORD *)(v9 + v10) + OBJC_IVAR___SGOutput_type);
        swift_beginAccess();
        v28._countAndFlagsBits = SGDataType.stringValue.getter(*v27);
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 58;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        v30._countAndFlagsBits = v47;
        v30._object = v46;
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._countAndFlagsBits = 124;
        v31._object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v32._countAndFlagsBits = 58;
        v32._object = (void *)0xE100000000000000;
        String.append(_:)(v32);
        v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 58;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        v35 = (uint64_t *)(*(_QWORD *)(v9 + v22) + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        v36._countAndFlagsBits = SGDataType.stringValue.getter(*v35);
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = 58;
        v37._object = (void *)0xE100000000000000;
        String.append(_:)(v37);
        v38._countAndFlagsBits = v49;
        v38._object = v48;
        String.append(_:)(v38);

        swift_bridgeObjectRelease();
        *v50 = v19;
        return;
      }
    }
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_245FBECD0;
  *(_QWORD *)(v39 + 32) = SGEdge.debugDescription.getter();
  *(_QWORD *)(v39 + 40) = v40;
  lazy protocol witness table accessor for type APIError and conformance APIError();
  v41 = swift_allocError();
  *(_QWORD *)v42 = v39;
  *(_QWORD *)(v42 + 8) = 0;
  *(_BYTE *)(v42 + 16) = 8;
  swift_willThrow();

LABEL_10:
  *a4 = v41;
}

uint64_t SGREMaterial.isEqual(_:)(uint64_t a1)
{
  char *v1;
  id v3;
  char v4;
  id v5;
  char v6;
  char *v8;
  _BYTE v9[24];
  uint64_t v10;

  swift_getObjectType();
  outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(a1, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  if (!v10)
  {
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v9, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v6 = 0;
    return v6 & 1;
  }
  if (v8 == v1)
  {

    v6 = 1;
    return v6 & 1;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v3 = *(id *)&v8[OBJC_IVAR___SGREMaterial_graph];
  v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) == 0)
  {

    goto LABEL_9;
  }
  v5 = *(id *)&v8[OBJC_IVAR___SGREMaterial_config];
  v6 = static NSObject.== infix(_:_:)();

  return v6 & 1;
}

void *SGREMaterialCompilationOptions.workingColorSpace.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace);
  v2 = v1;
  return v1;
}

uint64_t SGREMaterialCompilationOptions.enableFailedCompileMaterial.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial);
  swift_beginAccess();
  return *v1;
}

uint64_t SGREMaterialCompilationOptions.enableFailedCompileMaterial.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SGREMaterialCompilationOptions.enableFailedCompileMaterial.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t SGREMaterialCompilationOptions.useTier1Fallback(with:)(void *a1)
{
  uint64_t v1;

  if (!objc_msgSend(a1, sel_argumentBuffersSupport)
    || (*(_BYTE *)(v1 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) & 1) != 0)
  {
    return 1;
  }
  if (one-time initialization token for tier1SupportOverrideEnabled != -1)
    swift_once();
  swift_beginAccess();
  return static DebugConfig.tier1SupportOverrideEnabled;
}

id SGREMaterialCompilationOptions.__allocating_init(workingColorSpace:)(uint64_t a1)
{
  objc_class *v1;
  _BYTE *v3;
  objc_super v5;

  v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial] = 1;
  v3[OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id SGREMaterialCompilationOptions.init(workingColorSpace:)(uint64_t a1)
{
  _BYTE *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  v1[OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial] = 1;
  v1[OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Void __swiftcall SGREMaterialCompilationOptions.forceTier1Fallback_ONLYFORTESTS()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport) = 1;
}

void SGREMaterialCompilationOptions.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

_QWORD *static ShaderGraphService.builtInGeometryPropertyNames.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (one-time initialization token for shared != -1)
    swift_once();
  v0 = swift_bridgeObjectRetain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint8_t *static ShaderGraphService.createMaterial(from:config:)(uint8_t *a1, void *a2)
{
  return specialized static ShaderGraphService.createMaterial(from:config:)(a1, a2);
}

void static ShaderGraphService.archiveMaterial(_:)(void *a1)
{
  specialized static ShaderGraphService.archiveMaterial(_:)(a1);
}

uint8_t *static ShaderGraphService.createMaterial(from:)(uint8_t *a1)
{
  return specialized static ShaderGraphService.createMaterial(from:)(a1);
}

NSObject *static ShaderGraphService.createMaterialFromArchive(data:)(uint64_t a1, unint64_t a2)
{
  return specialized static ShaderGraphService.createMaterialFromArchive(data:)(a1, a2);
}

char *static ShaderGraphService.createLibrary(from:device:options:)(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  return specialized static ShaderGraphService.createLibrary(from:device:options:)(a1, a2, a3);
}

id buildFailureMaterial(usesSurfaceUniforms:usesGeometryUniforms:device:)(char a1, char a2, void *a3)
{
  uint64_t ObjCClassFromMetadata;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  const char *v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  Class isa;
  Class v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  Class v31;
  Class v32;
  uint64_t v33;
  unint64_t v34;
  const char *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  Class v42;
  Class v43;
  id v44;
  uint64_t v45;
  id v46;
  void *v47;
  Class v48;
  Class v49;
  id v50;
  id v51;
  uint64_t v52;
  Class v53;
  uint64_t v54;
  id v55;
  id v56;
  Class v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  id v63;
  id v64;
  id v65;
  void *v66;
  char v67;
  id v68;
  id v69[2];

  v69[1] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for SGGraph();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v7 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v69[0] = 0;
  v8 = objc_msgSend(a3, sel_newDefaultLibraryWithBundle_error_, v7, v69);
  v9 = v69[0];
  if (!v8)
  {
    v16 = v69[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_17:

    return v7;
  }
  v10 = v8;
  v67 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v11 = swift_allocObject();
  if ((a1 & 1) != 0)
  {
    *(_OWORD *)(v11 + 16) = xmmword_245FBFF50;
    v12 = objc_allocWithZone(MEMORY[0x24BDDD5D8]);
    v13 = v9;
    *(_QWORD *)(v11 + 32) = objc_msgSend(v12, sel_initWithArgumentIndex_, 0);
    *(_QWORD *)(v11 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5D8]), sel_initWithArgumentIndex_, 1);
    v69[0] = (id)v11;
    specialized Array._endMutation()();
    v14 = 0xD000000000000029;
    v15 = "SGFailedMaterialSurfaceShaderCustomParams";
  }
  else
  {
    *(_OWORD *)(v11 + 16) = xmmword_245FBF370;
    v17 = objc_allocWithZone(MEMORY[0x24BDDD5D8]);
    v18 = v9;
    *(_QWORD *)(v11 + 32) = objc_msgSend(v17, sel_initWithArgumentIndex_, 0);
    v69[0] = (id)v11;
    specialized Array._endMutation()();
    v14 = 0xD00000000000001DLL;
    v15 = "SGFailedMaterialSurfaceShader";
  }
  v19 = (unint64_t)(v15 - 32) | 0x8000000000000000;
  v20 = (void *)MEMORY[0x24954AF98](v14, v19);
  v21 = v10;
  v22 = objc_msgSend(v10, sel_newFunctionWithName_, v20);

  if (!v22)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)v36 = xmmword_245FBFF40;
    *(_BYTE *)(v36 + 16) = 21;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_17;
  }
  v66 = v7;
  v63 = a3;
  v23 = objc_allocWithZone(MEMORY[0x24BDDD5C8]);
  v24 = (void *)MEMORY[0x24954AF98](v14, v19);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MTLFunctionStitchingNode);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for MTLFunctionStitchingFunctionNode);
  v26 = Array._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v23, sel_initWithName_arguments_controlDependencies_, v24, isa, v26);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v28 + 32) = v27;
  v69[0] = (id)v28;
  specialized Array._endMutation()();
  v29 = objc_allocWithZone(MEMORY[0x24BDDD5D0]);
  v65 = v27;
  v30 = (void *)MEMORY[0x24954AF98](0xD000000000000018, 0x8000000245FC7CD0);
  v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MTLFunctionStitchingAttribute);
  v32 = Array._bridgeToObjectiveC()().super.isa;
  v64 = objc_msgSend(v29, sel_initWithFunctionName_nodes_outputNode_attributes_, v30, v31, 0, v32);

  v33 = swift_allocObject();
  if ((v67 & 1) != 0)
  {
    *(_OWORD *)(v33 + 16) = xmmword_245FBFF50;
    *(_QWORD *)(v33 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5D8]), sel_initWithArgumentIndex_, 0);
    *(_QWORD *)(v33 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5D8]), sel_initWithArgumentIndex_, 1);
    v69[0] = (id)v33;
    specialized Array._endMutation()();
    v34 = 0xD00000000000002CLL;
    v35 = "SGFailedMaterialGeometryModifierCustomParams";
  }
  else
  {
    *(_OWORD *)(v33 + 16) = xmmword_245FBF370;
    *(_QWORD *)(v33 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5D8]), sel_initWithArgumentIndex_, 0);
    v69[0] = (id)v33;
    specialized Array._endMutation()();
    v34 = 0xD000000000000020;
    v35 = "SGFailedMaterialGeometryModifier";
  }
  v37 = (unint64_t)(v35 - 32) | 0x8000000000000000;
  v38 = (void *)MEMORY[0x24954AF98](v34, v37);
  v39 = objc_msgSend(v21, sel_newFunctionWithName_, v38);

  if (!v39)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_OWORD *)v60 = xmmword_245FBFF40;
    *(_BYTE *)(v60 + 16) = 21;
    swift_willThrow();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
LABEL_16:
    v7 = v65;
    goto LABEL_17;
  }
  v40 = objc_allocWithZone(MEMORY[0x24BDDD5C8]);
  v41 = (void *)MEMORY[0x24954AF98](v34, v37);
  swift_bridgeObjectRelease();
  v42 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v43 = Array._bridgeToObjectiveC()().super.isa;
  v44 = objc_msgSend(v40, sel_initWithName_arguments_controlDependencies_, v41, v42, v43);

  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_245FBF370;
  *(_QWORD *)(v45 + 32) = v44;
  v69[0] = (id)v45;
  specialized Array._endMutation()();
  v46 = objc_allocWithZone(MEMORY[0x24BDDD5D0]);
  v68 = v44;
  v47 = (void *)MEMORY[0x24954AF98](0xD00000000000001BLL, 0x8000000245FC7C50);
  v48 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v49 = Array._bridgeToObjectiveC()().super.isa;
  v50 = objc_msgSend(v46, sel_initWithFunctionName_nodes_outputNode_attributes_, v47, v48, 0, v49);

  v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD720]), sel_init);
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_245FBFF50;
  *(_QWORD *)(v52 + 32) = v22;
  *(_QWORD *)(v52 + 40) = v39;
  v69[0] = (id)v52;
  specialized Array._endMutation()();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MTLFunction);
  v53 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_setFunctions_, v53);

  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_245FBFF50;
  *(_QWORD *)(v54 + 32) = v64;
  *(_QWORD *)(v54 + 40) = v50;
  v69[0] = (id)v54;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for MTLFunctionStitchingGraph);
  v55 = v64;
  v56 = v50;
  v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_setFunctionGraphs_, v57);

  v69[0] = 0;
  v58 = objc_msgSend(v63, sel_newLibraryWithStitchedDescriptor_error_, v51, v69);
  if (!v58)
  {
    v61 = v69[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    goto LABEL_16;
  }
  v7 = v58;
  v59 = v69[0];
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v7;
}

char *static ShaderGraphService.createLibrary(from:device:)(unsigned __int8 *a1, void *a2)
{
  objc_class *v4;
  _BYTE *v5;
  id v6;
  char *v7;
  objc_super v9;

  v4 = (objc_class *)type metadata accessor for SGREMaterialCompilationOptions();
  v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial] = 1;
  v5[OBJC_IVAR___SGREMaterialCompilationOptions_forceEnableTier1FallbackSupport] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___SGREMaterialCompilationOptions_workingColorSpace] = 0;
  v9.receiver = v5;
  v9.super_class = v4;
  v6 = objc_msgSendSuper2(&v9, sel_init);
  v7 = specialized static ShaderGraphService.createLibrary(from:device:options:)(a1, a2, (uint64_t)v6);

  return v7;
}

void *NSObject.inputNamed(_:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  Swift::String v5;
  void *v6;
  uint64_t v7;
  os_log_type_t v8;
  id v9;
  id v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  void *v22;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36[2];

  v5._countAndFlagsBits = 1701667182;
  v5._object = (void *)0xE400000000000000;
  validate(_:named:)(*(Swift::String *)&a1, v5);
  if (v6)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    v8 = static os_log_type_t.error.getter();
    v9 = v6;
    v10 = v6;
    v11 = Logger.logObject.getter();
    if (os_log_type_enabled(v11, v8))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v36[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_245E46000, v11, v8, "%s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v13, -1, -1);
      MEMORY[0x24954C33C](v12, -1, -1);

      return 0;
    }

LABEL_10:
    return 0;
  }
  v17 = swift_dynamicCastObjCProtocolConditional();
  if (!v17)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    v11 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_245E46000, v11, v25, "inputNamed called on an object that isn't ObjCHasIO", v26, 2u);
      MEMORY[0x24954C33C](v26, -1, -1);
    }
    goto LABEL_10;
  }
  v18 = (void *)v17;
  v19 = v2;
  v20 = objc_msgSend(v18, sel_inputs);
  type metadata accessor for SGInput();
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v22 = specialized Sequence.first(where:)(v21, a1, a2, &OBJC_IVAR___SGInput_name);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v22)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)logger);
    v28 = v19;
    swift_bridgeObjectRetain_n();
    v29 = v28;
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v34 = (_QWORD *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v36[0] = v35;
      *(_DWORD *)v32 = 138412546;
      v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v34 = v29;

      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v30, v31, "WARNING: %@ has no input named %s", (uint8_t *)v32, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v35, -1, -1);
      MEMORY[0x24954C33C](v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }

  return v22;
}

id @objc NSObject.inputNamed(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc NSObject.inputNamed(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))NSObject.inputNamed(_:));
}

void *NSObject.outputNamed(_:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  Swift::String v5;
  void *v6;
  uint64_t v7;
  os_log_type_t v8;
  id v9;
  id v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  void *v22;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36[2];

  v5._countAndFlagsBits = 1701667182;
  v5._object = (void *)0xE400000000000000;
  validate(_:named:)(*(Swift::String *)&a1, v5);
  if (v6)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    v8 = static os_log_type_t.error.getter();
    v9 = v6;
    v10 = v6;
    v11 = Logger.logObject.getter();
    if (os_log_type_enabled(v11, v8))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v36[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v15 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_245E46000, v11, v8, "%s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v13, -1, -1);
      MEMORY[0x24954C33C](v12, -1, -1);

      return 0;
    }

LABEL_10:
    return 0;
  }
  v17 = swift_dynamicCastObjCProtocolConditional();
  if (!v17)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)logger);
    v11 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_245E46000, v11, v25, "outputNamed called on an object that isn't ObjCHasIO", v26, 2u);
      MEMORY[0x24954C33C](v26, -1, -1);
    }
    goto LABEL_10;
  }
  v18 = (void *)v17;
  v19 = v2;
  v20 = objc_msgSend(v18, sel_outputs);
  type metadata accessor for SGOutput();
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v22 = specialized Sequence.first(where:)(v21, a1, a2, &OBJC_IVAR___SGOutput_name);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v22)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)logger);
    v28 = v19;
    swift_bridgeObjectRetain_n();
    v29 = v28;
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v34 = (_QWORD *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v36[0] = v35;
      *(_DWORD *)v32 = 138412546;
      v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v34 = v29;

      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245E46000, v30, v31, "WARNING: %@ has no output named %s", (uint8_t *)v32, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v34, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v35, -1, -1);
      MEMORY[0x24954C33C](v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }

  return v22;
}

id @objc NSObject.outputNamed(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc NSObject.inputNamed(_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))NSObject.outputNamed(_:));
}

id @objc NSObject.inputNamed(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v9 = a1;
  v10 = (void *)a4(v6, v8);

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = result;
  else
    __break(1u);
  return result;
}

uint64_t default argument 1 of OSSignpostIntervalState.init(id:isOpen:)()
{
  return 1;
}

void closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13;

  v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_245E46000, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  a4(&v7);
  v5 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Input>);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for SGEdge);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for SGNode);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  uint64_t result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6)
      return MEMORY[0x24BEE4AF8];
    if (v6 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v5 != a3)
      {
LABEL_5:
        if (v6 < 0)
          goto LABEL_17;
        v11 = a2 + 56 * a3;
        if (v11 < (unint64_t)&v9[7 * v6 + 4] && (unint64_t)(v9 + 4) < v11 + 56 * v6)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v9[2] = v6;
      v9[3] = 2 * ((uint64_t)(v10 - 32) / 56);
      if (v5 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6)
      return MEMORY[0x24BEE4AF8];
    v10 = v6;
    if (v6 <= 0)
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0)
          goto LABEL_19;
        v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8)
          goto LABEL_19;
        a5(0);
        swift_arrayInitWithCopy();
        return (uint64_t)v11;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : InputSpec].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InputSpec>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : InputSpec].Iterator._Variant();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : InputSpec].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v7 = (_QWORD *)swift_allocObject();
  v8 = _swift_stdlib_malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 25;
  v7[2] = v3;
  v7[3] = (2 * (v9 >> 3)) | 1;
  v10 = specialized Sequence._copySequenceContents(initializing:)(&v12, v7 + 4, v3, a1, a2, a3);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  if (v10 != (_QWORD *)v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v7;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD *, uint64_t, unint64_t))
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, unint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v4 <= 0)
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(_QWORD *, uint64_t, unint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA512();
      lazy protocol witness table accessor for type SHA512 and conformance SHA512();
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static BuiltInDefinition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) == 0
      || (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 24), *(_QWORD **)(a2 + 24)) & 1) == 0)
    {
      return 0;
    }
    outlined init with take of MaterialXAvailability((__n128 *)(a1 + 32), &v9);
    v8 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    outlined init with take of MaterialXAvailability(&v9, &v10);
    if (v10.n128_u64[1] == 2)
    {
      if (v7 != 2)
        return 0;
    }
    else
    {
      if (v10.n128_u64[1] == 1)
        return v7 == 1;
      if ((unint64_t)(v7 - 1) < 2)
        return 0;
      if (v10.n128_u64[1])
        return v7
            && (v10.n128_u64[0] == v8 && v10.n128_u64[1] == v7
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
      if (v7)
      {
        outlined release of MaterialXAvailability((uint64_t *)&v9);
        return 0;
      }
    }
    return 1;
  }
  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  BOOL v14;

  if (a1 >> 62)
    goto LABEL_17;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter())
  {
    v9 = 4;
    while (1)
    {
      v10 = (a1 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x24954B748](v9 - 4, a1)
          : (char *)*(id *)(a1 + 8 * v9);
      v11 = v10;
      v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v13 = &v10[*a4];
      v14 = *(_QWORD *)v13 == a2 && *((_QWORD *)v13 + 1) == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v11;
      }

      ++v9;
      if (v12 == v8)
        goto LABEL_18;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t i;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v3 = a1;
  v26 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_33;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v20 = v3;
    v5 = 0;
    v22 = v3 & 0xFFFFFFFFFFFFFF8;
    v23 = v3 & 0xC000000000000001;
    v21 = (_QWORD *)(v3 + 32);
    v24 = a2 + 56;
    while (1)
    {
      if (v23)
      {
        v6 = (char *)MEMORY[0x24954B748](v5, v20);
        goto LABEL_9;
      }
      if (v5 >= *(_QWORD *)(v22 + 16))
        break;
      v6 = (char *)(id)v21[v5];
LABEL_9:
      v7 = v6;
      if (__OFADD__(v5++, 1))
        goto LABEL_32;
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_4;
      v10 = *(_QWORD *)&v6[OBJC_IVAR___SGInput_name];
      v9 = *(_QWORD *)&v6[OBJC_IVAR___SGInput_name + 8];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v3 = (unint64_t)&v25;
      v11 = Hasher._finalize()();
      v12 = -1 << *(_BYTE *)(a2 + 32);
      v13 = v11 & ~v12;
      if (((*(_QWORD *)(v24 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_28;
      v3 = *(_QWORD *)(a2 + 48);
      v14 = (_QWORD *)(v3 + 16 * v13);
      v15 = *v14 == v10 && v14[1] == v9;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v16 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v16;
          if (((*(_QWORD *)(v24 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
            break;
          v17 = (_QWORD *)(v3 + 16 * v13);
          v18 = *v17 == v10 && v17[1] == v9;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_17;
        }
LABEL_28:

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      v3 = (unint64_t)&v7[OBJC_IVAR___SGInput_type];
      swift_beginAccess();
      if (*(_QWORD *)v3 == 41 || *(_QWORD *)v3 == 44)
      {
        v3 = (unint64_t)&v26;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
LABEL_4:

      }
LABEL_5:
      if (v5 == i)
        return v26;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    ;
  }
  return MEMORY[0x24BEE4AF8];
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  void *v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a1;
  v32 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_32;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v26 = v3;
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v8 = (_QWORD *)(v3 + 32);
      v30 = v4;
      v31 = a2 + 56;
      v28 = v3 & 0xFFFFFFFFFFFFFF8;
      v29 = v3 & 0xC000000000000001;
      v27 = (_QWORD *)(v3 + 32);
      while (v6)
      {
        v9 = (char *)MEMORY[0x24954B748](v5, v26);
LABEL_10:
        v10 = v9;
        if (__OFADD__(v5++, 1))
          goto LABEL_31;
        v12 = &v9[OBJC_IVAR___SGNode_data];
        if (v9[OBJC_IVAR___SGNode_data + 80] <= 0x3Fu && *(_QWORD *)(a2 + 16))
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v15 = Hasher._finalize()();
          v16 = -1 << *(_BYTE *)(a2 + 32);
          v17 = v15 & ~v16;
          if (((*(_QWORD *)(v31 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
          {
            v3 = *(_QWORD *)(a2 + 48);
            v18 = (_QWORD *)(v3 + 16 * v17);
            v19 = *v18 == v14 && v13 == v18[1];
            if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_19:

              swift_bridgeObjectRelease();
              v6 = v29;
              v4 = v30;
              v8 = v27;
              v7 = v28;
              goto LABEL_6;
            }
            v20 = ~v16;
            for (i = v17 + 1; ; i = v22 + 1)
            {
              v22 = i & v20;
              if (((*(_QWORD *)(v31 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0)
                break;
              v23 = (_QWORD *)(v3 + 16 * v22);
              v24 = *v23 == v14 && v13 == v23[1];
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_19;
            }
          }
          swift_bridgeObjectRelease();
          v6 = v29;
          v4 = v30;
          v8 = v27;
          v7 = v28;
        }
        v3 = (unint64_t)&v32;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_6:
        if (v5 == v4)
          return v32;
      }
      if (v5 < *(_QWORD *)(v7 + 16))
        break;
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        return MEMORY[0x24BEE4AF8];
    }
    v9 = (char *)(id)v8[v5];
    goto LABEL_10;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized BuiltInDefinition.init(nodeDef:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = a1;
  v28 = a1[1];
  v29 = *a1;
  v3 = a1[16];
  v34 = v3;
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    outlined retain of [Input]((uint64_t)&v34);
    v33 = v5;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v6 = v5;
    v7 = v3 + 48;
    do
    {
      v8 = *(_QWORD *)(v7 - 16);
      v9 = *(_QWORD *)(v7 - 8);
      v10 = *(_BYTE *)(v7 + 40);
      swift_bridgeObjectRetain();
      swift_retain();
      v11 = specialized SGDataType.init(_:)();
      v33 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = v33;
      }
      v7 += 64;
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = v6 + 32 * v13;
      *(_QWORD *)(v14 + 32) = v8;
      *(_QWORD *)(v14 + 40) = v9;
      *(_QWORD *)(v14 + 48) = v11;
      *(_BYTE *)(v14 + 56) = v10;
      --v4;
    }
    while (v4);
    outlined release of [Input]((uint64_t)&v34);
    v2 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x24BEE4AF8];
  }
  v15 = v2[17];
  v33 = v15;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v32 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    v17 = v32;
    v18 = v15 + 48;
    do
    {
      v19 = *(_QWORD *)(v18 - 16);
      v20 = *(_QWORD *)(v18 - 8);
      swift_bridgeObjectRetain();
      swift_retain();
      v21 = specialized SGDataType.init(_:)();
      v23 = *(_QWORD *)(v32 + 16);
      v22 = *(_QWORD *)(v32 + 24);
      if (v23 >= v22 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v18 += 64;
      *(_QWORD *)(v32 + 16) = v23 + 1;
      v24 = (_QWORD *)(v32 + 24 * v23);
      v24[4] = v19;
      v24[5] = v20;
      v24[6] = v21;
      --v16;
    }
    while (v16);
    outlined release of [Input]((uint64_t)&v33);
    v2 = a1;
  }
  v25 = v2[14];
  v26 = v2[15];
  result = outlined copy of MaterialXAvailability(v25, v26);
  *a2 = v29;
  a2[1] = v28;
  a2[2] = v6;
  a2[3] = v17;
  a2[4] = v25;
  a2[5] = v26;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph12TypedTextureVG_AF0G10AssignmentVs5NeverOTg504_s11d26Graph11mapUniformsySayAA17gh9VGSayAA05F14E0VGFAdGXEfU0_s11AnyIteratorVySiGTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v17 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v17;
  for (i = (_QWORD *)(a1 + 56); ; i += 4)
  {
    v5 = *(i - 3);
    v6 = *(i - 2);
    v15 = *((_BYTE *)i - 8);
    v14 = *i;
    if ((v15 & 1) == 0)
      break;
    outlined copy of TextureSource();
    swift_retain();
    outlined copy of TextureSource();
    v7 = v5;
    v8 = v6;
LABEL_7:
    v12 = *(_QWORD *)(v17 + 16);
    v11 = *(_QWORD *)(v17 + 24);
    if (v12 >= v11 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    *(_QWORD *)(v17 + 16) = v12 + 1;
    v13 = v17 + 48 * v12;
    *(_QWORD *)(v13 + 32) = v7;
    *(_QWORD *)(v13 + 40) = v8;
    *(_QWORD *)(v13 + 48) = v14;
    *(_QWORD *)(v13 + 56) = v5;
    *(_QWORD *)(v13 + 64) = v6;
    *(_BYTE *)(v13 + 72) = v15;
    if (!--v1)
      return v2;
  }
  swift_retain();
  outlined copy of TextureSource();
  result = dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((v16 & 1) == 0)
  {
    v16 = 0;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v7 = 0x65727574786574;
    v8 = 0xE700000000000000;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSsAE_pTg504_s11d108Graph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSSAA6F8CKXEfU3_SDySOSiGSDyS2SGTf1cn_nTf4nng_n(unint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v19;
  id v20;
  Swift::String v21;
  uint64_t v22;

  v4 = v3;
  if (a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
      return v7;
    v22 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v9 = 0;
    v7 = v22;
    while (v6 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x24954B748](v9, a1);
      else
        v10 = *(id *)(a1 + 8 * v9 + 32);
      v11 = v10;
      v20 = v10;
      closure #5 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)((uint64_t *)&v20, a2, a3, &v19, &v21);
      if (v4)
      {
        swift_release();

        return v7;
      }
      v4 = 0;

      countAndFlagsBits = v21._countAndFlagsBits;
      object = v21._object;
      v22 = v7;
      v15 = *(_QWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v7 = v22;
      }
      ++v9;
      *(_QWORD *)(v7 + 16) = v15 + 1;
      v16 = v7 + 16 * v15;
      *(_QWORD *)(v16 + 32) = countAndFlagsBits;
      *(_QWORD *)(v16 + 40) = object;
      if (v6 == v9)
        return v7;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #7 in SGREMaterial.init(graph:configuration:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  _BYTE v26[12];

  *(_DWORD *)&v26[8] = 0;
  _StringGuts.grow(_:)(58);
  v8._countAndFlagsBits = 9;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(void **)(a3 + 32);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x74657366666F2820;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x203A657A6973202CLL;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6D6E67696C61202CLL;
  v18._object = (void *)0xED0000203A746E65;
  String.append(_:)(v18);
  *(_QWORD *)v26 = *(unsigned int *)(a3 + 60);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x6C6269736976202CLL;
  v20._object = (void *)0xEB00000000203A65;
  String.append(_:)(v20);
  if ((a4 & 1) != 0)
    v21 = 1702195828;
  else
    v21 = 0x65736C6166;
  if ((a4 & 1) != 0)
    v22 = 0xE400000000000000;
  else
    v22 = 0xE500000000000000;
  v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 41;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return *(_QWORD *)&v26[4];
}

void specialized Sequence.forEach(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;

  if (a1 >> 62)
    goto LABEL_13;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    v8 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24954B748](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v12 = v9;
      closure #1 in SGREMaterial.init(graph:configuration:)((uint64_t *)&v12, a2, a3);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
}

void specialized Sequence.forEach(_:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char **v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = a1 + 32;
    swift_bridgeObjectRetain();
    v23 = v7;
    do
    {
      --v5;
      v8 = (char **)(v7 + 24 * v5);
      v9 = *v8;
      v10 = (uint64_t)&(*v8)[OBJC_IVAR___SGNode_data];
      if (*(unsigned __int8 *)(v10 + 80) <= 0x3Fu)
      {
        v24 = v5;
        v11 = v8[1];
        v12 = v8[2];
        v13 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)&v9[OBJC_IVAR___SGNode_inputs];
        v25 = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v15 = v9;
        v16 = v11;
        v17 = specialized Sequence.filter(_:)(v13, v14);
        if (v4)
        {

          swift_bridgeObjectRelease();
          return;
        }
        v18 = v17;
        v19 = *(_QWORD *)(v17 + 16);
        if (v19)
        {
          swift_bridgeObjectRetain();
          v20 = v18 + 40;
          do
          {
            v21 = *(void **)(v20 + 24);
            swift_bridgeObjectRetain();
            v22 = v21;
            specialized closure #2 in closure #1 in checkConstantInputs(in:)((uint64_t)v22, a2, a3, v15, v16, v12);

            swift_bridgeObjectRelease();
            v20 += 40;
            --v19;
          }
          while (v19);

          swift_bridgeObjectRelease();
        }
        else
        {

        }
        swift_bridgeObjectRelease();
        v5 = v24;
        v7 = v23;
      }
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v4 = 0;
  v16 = a1 + 32;
  v15 = a2 + 7;
  while (1)
  {
    v5 = *(_QWORD *)(v16 + 24 * v4) + OBJC_IVAR___SGNode_data;
    if (*(unsigned __int8 *)(v5 + 80) <= 0x3Fu)
    {
      v6 = a2[2];
      if (v6)
      {
        v7 = *(_QWORD *)v5;
        v8 = *(_QWORD *)(v5 + 8);
        if (a2[4] == *(_QWORD *)v5 && v8 == a2[5])
          return 1;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          return 1;
        if (v6 != 1)
          break;
      }
    }
LABEL_3:
    if (++v4 == v2)
      return 0;
  }
  v11 = v15;
  v12 = 1;
  while (1)
  {
    v13 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (*(v11 - 1) == v7 && v8 == *v11)
      return 1;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      return 1;
    v11 += 2;
    ++v12;
    if (v13 == v6)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

void outlined consume of TopologicalSort.Element?(void *a1, void *a2, void *a3)
{
  if (a1)
  {

  }
}

uint64_t sub_245E93CB4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in mapUniforms(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in mapUniforms(_:)(v1, a1);
}

uint64_t specialized SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::Int v9;
  uint64_t v10;
  _QWORD *v11;
  id *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  Swift::OpaquePointer v32;
  uint64_t v33;
  uint64_t result;
  void *v35;
  Swift::Int v36;
  unint64_t v37;
  void *v38;

  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_SS_SSts5NeverOTg5142_s11ShaderGraph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSS_SStSS3key_SS5valuet_tXEfU_Tf1cn_n(a2);
  if (*(_QWORD *)(v5 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v6 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v6 = MEMORY[0x24BEE4B00];
  }
  v38 = (void *)v6;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, 1, &v38);
  if (v3)
    goto LABEL_25;
  swift_bridgeObjectRelease();
  v7 = v38;
  v38 = (void *)MEMORY[0x24BEE4AF8];
  v8 = (void *)MEMORY[0x24BDAC7A8](*(_QWORD *)(v2 + OBJC_IVAR___SGGraph_resultsNode));
  specialized SGGraph.depthFirstVisit(from:includeSubgraphs:inputPredicate:_:)(v8, 1, (uint64_t)default argument 1 of OSSignpostIntervalState.init(id:isOpen:), 0, (void (*)(char *, char *))partial apply for closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:));
  v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v9 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [ObjectIdentifier : Int]);
  Dictionary.reserveCapacity(_:)(v9);
  v36 = v9;
  if (!v9)
  {
LABEL_21:
    swift_retain();
    v31 = swift_bridgeObjectRetain();
    v32._rawValue = v7;
    v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_SSsAE_pTg504_s11d108Graph7SGGraphC18structuralEdgeList15topologicalSort14textureMappingSaySSGAA011TopologicalH0V_SDyS2SGtKFSSAA6F8CKXEfU3_SDySOSiGSDyS2SGTf1cn_nTf4nng_n(v31, (uint64_t)&v37, v32);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v33;
  }
  v35 = v7;
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = (_QWORD *)v37;
  v12 = (id *)(a1 + 48);
  while (1)
  {
    v13 = *(v12 - 2);
    v14 = *(v12 - 1);
    v15 = *v12;
    v16 = v13;
    v17 = v14;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    v21 = v11[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (v11[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v24 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_24;
      v20 = v25;
      if ((v24 & 1) != 0)
      {
LABEL_7:
        *(_QWORD *)(v11[7] + 8 * v20) = v10;
        goto LABEL_8;
      }
    }
    v11[(v20 >> 6) + 8] |= 1 << v20;
    v27 = 8 * v20;
    *(_QWORD *)(v11[6] + v27) = v16;
    *(_QWORD *)(v11[7] + v27) = v10;
    v28 = v11[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_23;
    v11[2] = v30;
LABEL_8:
    v12 += 3;

    swift_bridgeObjectRelease();
    if (v36 == ++v10)
    {
      v37 = (unint64_t)v11;
      swift_bridgeObjectRelease();
      v7 = v35;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_25:
  swift_bridgeObjectRelease();
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_245E94330()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_245E94354()
{
  return swift_deallocObject();
}

BOOL partial apply for implicit closure #8 in SGREMaterial.init(graph:configuration:)()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 16) & 1) == 0;
}

uint64_t sub_245E94374()
{
  return swift_deallocObject();
}

uint64_t sub_245E94384()
{
  return swift_deallocObject();
}

uint64_t sub_245E94394()
{
  return swift_deallocObject();
}

uint64_t sub_245E943A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in SGREMaterial.init(graph:configuration:)()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_245E943BC()
{
  return swift_deallocObject();
}

uint64_t sub_245E943CC()
{
  return swift_deallocObject();
}

uint64_t sub_245E943DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #16 in SGREMaterial.init(graph:configuration:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_245E94418()
{
  return swift_deallocObject();
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_245E94430()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_245E94450()
{
  return swift_deallocObject();
}

uint64_t sub_245E94460()
{
  return swift_deallocObject();
}

uint64_t sub_245E94470()
{
  return swift_deallocObject();
}

uint64_t sub_245E94480()
{
  return swift_deallocObject();
}

uint64_t sub_245E94490()
{
  return swift_deallocObject();
}

uint64_t sub_245E944A0()
{
  return swift_deallocObject();
}

uint64_t sub_245E944B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245E944D4()
{
  return swift_deallocObject();
}

uint64_t sub_245E944E4()
{
  return swift_deallocObject();
}

uint64_t sub_245E944F4()
{
  return swift_deallocObject();
}

uint64_t sub_245E94504()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_245E94584()
{
  return swift_deallocObject();
}

uint64_t sub_245E94594()
{
  return swift_deallocObject();
}

uint64_t sub_245E945A4()
{
  return swift_deallocObject();
}

uint64_t sub_245E945B4()
{
  return swift_deallocObject();
}

uint64_t sub_245E945C4()
{
  return swift_deallocObject();
}

uint64_t sub_245E945D4()
{
  return swift_deallocObject();
}

uint64_t sub_245E945E4()
{
  return swift_deallocObject();
}

uint64_t sub_245E945F4()
{
  return swift_deallocObject();
}

uint64_t sub_245E94604()
{
  return swift_deallocObject();
}

uint64_t sub_245E94614()
{
  return swift_deallocObject();
}

uint64_t sub_245E94624()
{
  return swift_deallocObject();
}

uint64_t sub_245E94634()
{
  return swift_deallocObject();
}

uint64_t sub_245E94644()
{
  return swift_deallocObject();
}

uint64_t sub_245E94654()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  v3 = *a1 + 4;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v3;
  return result;
}

uint64_t sub_245E946BC()
{
  return swift_deallocObject();
}

uint64_t sub_245E946CC()
{
  return swift_deallocObject();
}

uint64_t sub_245E946DC()
{
  return swift_deallocObject();
}

uint64_t sub_245E946EC()
{
  return swift_deallocObject();
}

uint64_t sub_245E946FC()
{
  return swift_deallocObject();
}

uint64_t sub_245E9470C()
{
  return swift_deallocObject();
}

uint64_t sub_245E9471C()
{
  return swift_deallocObject();
}

uint64_t sub_245E9472C()
{
  return swift_deallocObject();
}

id outlined copy of TopologicalSort.Element?(id result, void *a2, void *a3)
{
  void *v3;
  id v4;
  id v5;

  if (result)
  {
    v3 = result;
    v4 = a3;
    v5 = v3;
    return a2;
  }
  return result;
}

void specialized static ShaderGraphService.archiveMaterial(_:)(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  id v18;
  char *v19;
  NSObject *v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  os_signpost_id_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _BYTE *, uint64_t);
  void *v38;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t);
  void *v41;
  void *v42;
  char *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  id v57;
  char *v58;
  _BYTE *v59;
  NSObject *v60;
  _BYTE *v61;
  int v62;
  _BYTE *v63;
  const char *v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  os_signpost_id_t v80;
  os_log_t v81;
  uint64_t v82;
  void (*v83)(_BYTE *, uint64_t);
  _BYTE v84[4];
  int v85;
  os_log_t v86;
  id v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  void (*v101)(_QWORD, _QWORD);
  _BYTE *v102;
  uint64_t v103[4];
  uint64_t v104;

  v2 = (const char *)type metadata accessor for OSSignpostError();
  v94 = *((_QWORD *)v2 - 1);
  v95 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v93 = &v84[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v84[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = &v84[-v10];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v84[-v12];
  v14 = type metadata accessor for OSSignposter();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v84[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OSSignposter.init(subsystem:category:)();
  if (a1)
  {
    v102 = v11;
    v92 = v8;
    v97 = v15;
    v18 = a1;
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    v19 = (char *)v18;
    v100 = v17;
    v20 = OSSignposter.logHandle.getter();
    v21 = static os_signpost_type_t.begin.getter();
    v22 = OS_os_log.signpostsEnabled.getter();
    v98 = v14;
    if ((v22 & 1) != 0)
    {
      v91 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
      v91(v102, v13, v4);
      v23 = swift_slowAlloc();
      v96 = v4;
      v24 = v23;
      v25 = swift_slowAlloc();
      v103[0] = v25;
      *(_DWORD *)v24 = 141558531;
      v104 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2081;
      LODWORD(v99) = v21;
      v26 = (uint64_t *)(*(_QWORD *)&v19[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
      v27 = *v26;
      v28 = v26[1];
      swift_bridgeObjectRetain();
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 22) = 2080;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_245FBECD0;
      v30 = *(_QWORD *)&v19[OBJC_IVAR___SGREMaterial_operationalHash];
      v31 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v29 + 64) = v31;
      *(_QWORD *)(v29 + 32) = v30;
      v32 = String.init(format:_:)();
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v34 = v102;
      v35 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_245E46000, v20, (os_signpost_type_t)v99, v35, "archiveInit", "%{private,mask.hash}s %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v25, -1, -1);
      v36 = v24;
      v4 = v96;
      MEMORY[0x24954C33C](v36, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v34, v4);
      v37 = v91;
      v91(v34, v13, v4);
    }
    else
    {

      v37 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
      v37(v102, v13, v4);
    }
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    v99 = OSSignpostIntervalState.init(id:isOpen:)();
    v40 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v40(v13, v4);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    v41 = *(void **)&v19[OBJC_IVAR___SGREMaterial_graph];
    v42 = *(void **)&v19[OBJC_IVAR___SGREMaterial_config];
    v103[0] = 1;
    v103[1] = (uint64_t)v41;
    v103[2] = (uint64_t)v42;
    lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer();
    v43 = v41;
    v44 = v42;
    v45 = v101;
    v46 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (!v45)
    {
      v87 = v44;
      v88 = v43;
      v89 = v47;
      v90 = v46;
      v91 = v37;
      v101 = (void (*)(_QWORD, _QWORD))v40;
      v96 = v4;
      v58 = v19;
      v59 = v100;
      v60 = OSSignposter.logHandle.getter();
      v61 = v92;
      OSSignpostIntervalState.signpostID.getter();
      v62 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v86 = v60;
        swift_retain();
        v63 = v93;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        v65 = v94;
        v64 = v95;
        v66 = (*(uint64_t (**)(_BYTE *, const char *))(v94 + 88))(v63, v95);
        v67 = *MEMORY[0x24BEE7810];
        v85 = v62;
        if (v66 == v67)
        {
          v68 = 0;
          v95 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(_BYTE *, const char *))(v65 + 8))(v63, v64);
          v95 = "%{private,mask.hash}s %s";
          v68 = 3;
        }
        v91(v102, v61, v96);
        v69 = swift_slowAlloc();
        v70 = swift_slowAlloc();
        v103[0] = v70;
        *(_BYTE *)v69 = v68;
        *(_BYTE *)(v69 + 1) = v68;
        *(_WORD *)(v69 + 2) = 2160;
        v104 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v69 + 12) = 2081;
        v71 = v88;
        v72 = *(_QWORD *)&v88[OBJC_IVAR___SGGraph_name];
        v73 = *(_QWORD *)&v88[OBJC_IVAR___SGGraph_name + 8];
        swift_bridgeObjectRetain();
        v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 22) = 2080;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v74 = swift_allocObject();
        *(_OWORD *)(v74 + 16) = xmmword_245FBECD0;
        v75 = *(_QWORD *)&v58[OBJC_IVAR___SGREMaterial_operationalHash];
        v76 = MEMORY[0x24BEE17F0];
        *(_QWORD *)(v74 + 56) = MEMORY[0x24BEE1768];
        *(_QWORD *)(v74 + 64) = v76;
        *(_QWORD *)(v74 + 32) = v75;
        v77 = String.init(format:_:)();
        v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        v79 = v102;
        v80 = OSSignpostID.rawValue.getter();
        v81 = v86;
        _os_signpost_emit_with_name_impl(&dword_245E46000, v86, (os_signpost_type_t)v85, v80, "archiveInit", v95, (uint8_t *)v69, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v70, -1, -1);
        MEMORY[0x24954C33C](v69, -1, -1);

        swift_release();
        v82 = v96;
        v83 = (void (*)(_BYTE *, uint64_t))v101;
        v101(v92, v96);
        (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v100, v98);
        swift_release();
        v83(v79, v82);
      }
      else
      {

        swift_release();
        v101(v61, v96);
        (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v59, v98);
        swift_release();
      }
      return;
    }
    (*(void (**)(_BYTE *, uint64_t))(v97 + 8))(v100, v98);

    swift_release();
    swift_release();
    v38 = v45;
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v38 = (void *)swift_allocError();
    *(_OWORD *)v39 = xmmword_245FBFF60;
    *(_BYTE *)(v39 + 16) = 1;
    swift_willThrow();
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)logger);
  v49 = v38;
  v50 = v38;
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc();
    v54 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v53 = 138412290;
    v55 = v38;
    v56 = _swift_stdlib_bridgeErrorToNSError();
    v103[0] = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v54 = v56;

    _os_log_impl(&dword_245E46000, v51, v52, "%@", v53, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v54, -1, -1);
    MEMORY[0x24954C33C](v53, -1, -1);
  }
  else
  {

  }
  type metadata accessor for SGError();
  v57 = v38;
  SGError.__allocating_init(_:)(v38);
  swift_willThrow();

}

uint8_t *specialized static ShaderGraphService.createMaterial(from:config:)(uint8_t *a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint8_t *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  os_signpost_id_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  __int128 v31;
  id v32;
  uint8_t *v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  Swift::OpaquePointer v37;
  void *v38;
  void *rawValue;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  _QWORD *v49;
  id v50;
  uint64_t v51;
  id v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[9];
  uint64_t v69;
  _OWORD v70[11];
  _QWORD v71[40];
  NSObject *v72;
  ShaderGraph::NodeDefStore v73;

  v3 = v2;
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v60 - v11;
  v13 = type metadata accessor for OSSignposter();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v3 = (void *)swift_allocError();
    v31 = xmmword_245FBFF80;
LABEL_7:
    *(_OWORD *)v30 = v31;
    *(_BYTE *)(v30 + 16) = 1;
    swift_willThrow();
LABEL_16:
    if (one-time initialization token for logger != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)logger);
    v45 = v3;
    v46 = v3;
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      a1 = (uint8_t *)swift_slowAlloc();
      v49 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)a1 = 138412290;
      v50 = v3;
      v51 = _swift_stdlib_bridgeErrorToNSError();
      v68[0] = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v49 = v51;

      _os_log_impl(&dword_245E46000, v47, v48, "%@", a1, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v49, -1, -1);
      MEMORY[0x24954C33C](a1, -1, -1);
    }
    else
    {

    }
    type metadata accessor for SGError();
    v52 = v3;
    SGError.__allocating_init(_:)(v3);
    swift_willThrow();

    return a1;
  }
  if (!a2)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v3 = (void *)swift_allocError();
    v31 = xmmword_245FBFF70;
    goto LABEL_7;
  }
  v66 = v15;
  v67 = v14;
  v18 = a1;
  v72 = a2;
  OSSignposter.init(subsystem:category:)();
  a1 = v18;
  static OSSignpostID.exclusive.getter();
  v19 = OSSignposter.logHandle.getter();
  v64 = static os_signpost_type_t.event.getter();
  v65 = v19;
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    v20 = swift_slowAlloc();
    v63 = v2;
    v21 = v20;
    v62 = swift_slowAlloc();
    v68[0] = v62;
    *(_DWORD *)v21 = 141558275;
    v69 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    v60 = v21 + 14;
    v61 = v7;
    v22 = a1;
    v23 = *(_QWORD *)&a1[OBJC_IVAR___SGGraph_name];
    v24 = *(_QWORD *)&a1[OBJC_IVAR___SGGraph_name + 8];
    swift_bridgeObjectRetain();
    v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a1 = v22;
    swift_bridgeObjectRelease();
    v25 = OSSignpostID.rawValue.getter();
    v26 = v65;
    _os_signpost_emit_with_name_impl(&dword_245E46000, v65, (os_signpost_type_t)v64, v25, "materialInit", "%{private,mask.hash}s", (uint8_t *)v21, 0x16u);
    v27 = v62;
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v27, -1, -1);
    v28 = v21;
    v3 = v63;
    MEMORY[0x24954C33C](v28, -1, -1);

    v29 = *(void (**)(char *, uint64_t))(v61 + 8);
    v29(v12, v6);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v67);
    v29(v10, v6);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v67);
  }
  v32 = objc_allocWithZone((Class)type metadata accessor for SGREMaterial());
  v33 = a1;
  v34 = v72;
  v35 = SGREMaterial.init(graph:configuration:)(v33, (uint64_t)v34);
  if (v3)
  {

    goto LABEL_16;
  }
  a1 = (uint8_t *)v35;
  v36 = *(id *)(v35 + OBJC_IVAR___SGREMaterial_graph);
  SGGraph.legacyGraph()(v70);

  if (one-time initialization token for shared != -1)
    swift_once();
  v37._rawValue = (void *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)&a1[OBJC_IVAR___SGREMaterial_config])
                                               + 0x58))();
  v73 = NodeDefStore.including(_:)(v37);
  v3 = v38;
  if (v38)
  {
    swift_bridgeObjectRelease();
    outlined release of Graph((uint64_t)v70);

    goto LABEL_16;
  }
  rawValue = v73.geomPropDefs._rawValue;
  v40 = v73.implementations._rawValue;
  v72 = v73.nodeDefs._rawValue;
  swift_bridgeObjectRelease();
  v41 = *(_QWORD *)&a1[OBJC_IVAR___SGREMaterial_textureAssignments];
  v42 = *(void **)&a1[OBJC_IVAR___SGREMaterial_customUniformsType];
  swift_bridgeObjectRetain();
  v43 = v42;
  v67 = specialized static MetalDataType.create(_:)((uint64_t)v43);

  v54 = v67;
  outlined retain of Graph((uint64_t)v70);
  swift_retain();
  v55 = specialized Dictionary<>.init(_:)(v41);
  specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(v70, v54, v55, v72, (uint64_t)rawValue, v40, v71);
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  v56 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v57 = Hasher._finalize()();
    v58 = -1 << *(_BYTE *)(v56 + 32);
    v59 = v57 & ~v58;
    v72 = (v56 + 56);
    if (((*(_QWORD *)(v56 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) != 0)
    {
      v66 = ~v58;
      __asm { BR              X9 }
    }

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  outlined release of Graph((uint64_t)v70);
  swift_release();
  outlined release of RESurfaceShaderMaterial(v71);

  return a1;
}

uint8_t *specialized static ShaderGraphService.createMaterial(from:)(uint8_t *a1)
{
  void *v1;
  uint8_t *v2;
  uint64_t v3;
  uint8_t *v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  id v8;

  if (a1)
  {
    v2 = a1;
    v3 = one-time initialization token for default;
    v4 = a1;
    if (v3 != -1)
      swift_once();
    v5 = specialized static ShaderGraphService.createMaterial(from:config:)(v2, (void *)static SGMaterialConfiguration.default);
    if (!v1)
    {
      v2 = v5;

      return v2;
    }

    v6 = v1;
  }
  else
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v6 = (void *)swift_allocError();
    *(_OWORD *)v7 = xmmword_245FBFF80;
    *(_BYTE *)(v7 + 16) = 1;
    swift_willThrow();
  }
  type metadata accessor for SGError();
  v8 = v6;
  SGError.__allocating_init(_:)(v6);
  swift_willThrow();

  return v2;
}

NSObject *specialized static ShaderGraphService.createMaterialFromArchive(data:)(uint64_t a1, unint64_t a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  NSObject *v17;
  os_signpost_type_t v18;
  char v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t);
  uint8_t *v21;
  os_signpost_id_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, uint64_t);
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v48;
  _BYTE *v49;
  _BYTE *v50;
  const char *v51;
  uint64_t v52;
  char v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  os_signpost_id_t v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t);
  uint64_t v68;
  void *v69;
  unint64_t v70;
  _BYTE v71[4];
  int v72;
  id v73;
  id v74;
  char *v75;
  void (*v76)(_BYTE *, uint64_t);
  _BYTE *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87[9];
  uint64_t v88;
  unint64_t v89;

  v83 = a1;
  v89 = a2;
  v2 = (const char *)type metadata accessor for OSSignpostError();
  v78 = *((_QWORD *)v2 - 1);
  v79 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v77 = &v71[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v81 = &v71[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = &v71[-v9];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v71[-v11];
  v13 = type metadata accessor for OSSignposter();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v71[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OSSignposter.init(subsystem:category:)();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v86 = v16;
  v17 = OSSignposter.logHandle.getter();
  v18 = static os_signpost_type_t.begin.getter();
  v19 = OS_os_log.signpostsEnabled.getter();
  v84 = v14;
  v85 = v13;
  if ((v19 & 1) != 0)
  {
    v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
    v20(v10, v12, v4);
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v17, v18, v22, "archiveDecode", "decode", v21, 2u);
    MEMORY[0x24954C33C](v21, -1, -1);

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {

    v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  }
  v20(v10, v12, v4);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v23 = OSSignpostIntervalState.init(id:isOpen:)();
  v24 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v24(v12, v4);
  v25 = v89;
  if (v89 >> 60 == 15)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v26 = (void *)swift_allocError();
    *(_OWORD *)v27 = xmmword_245FBFF90;
    *(_BYTE *)(v27 + 16) = 1;
    swift_willThrow();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v86, v85);
LABEL_9:
    if (one-time initialization token for logger != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)logger);
    v38 = v26;
    v39 = v26;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v42 = 138412290;
      v44 = v26;
      v45 = _swift_stdlib_bridgeErrorToNSError();
      v87[0] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v43 = v45;

      _os_log_impl(&dword_245E46000, v40, v41, "%@", v42, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v43, -1, -1);
      MEMORY[0x24954C33C](v42, -1, -1);
    }
    else
    {

    }
    type metadata accessor for SGError();
    v46 = v26;
    SGError.__allocating_init(_:)(v26);
    swift_willThrow();

    return v40;
  }
  v80 = v23;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v28 = v83;
  outlined copy of Data._Representation(v83, v25);
  v29 = PropertyListDecoder.init()();
  lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer();
  v30 = (void *)v82;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  v26 = v30;
  if (v30)
  {
    (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v86, v85);
    swift_release();
    outlined consume of Data?(v28, v25);
    swift_release();
    goto LABEL_9;
  }
  v76 = v24;
  v82 = v29;
  v31 = (void *)v87[1];
  v32 = (void *)v87[2];
  v33 = objc_allocWithZone((Class)type metadata accessor for SGREMaterial());
  v34 = v31;
  v35 = v32;
  v36 = (void *)SGREMaterial.init(graph:configuration:)(v34, (uint64_t)v35);
  v74 = v35;
  v73 = v34;
  v75 = v36;
  v48 = OSSignposter.logHandle.getter();
  v49 = v81;
  OSSignpostIntervalState.signpostID.getter();
  v72 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    swift_retain();
    v50 = v77;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v52 = v78;
    v51 = v79;
    if ((*(unsigned int (**)(_BYTE *, const char *))(v78 + 88))(v50, v79) == *MEMORY[0x24BEE7810])
    {
      v53 = 0;
      v79 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, const char *))(v52 + 8))(v50, v51);
      v79 = "decode %{private,mask.hash}s %s";
      v53 = 3;
    }
    v20(v10, v49, v4);
    v55 = swift_slowAlloc();
    v78 = swift_slowAlloc();
    v87[0] = v78;
    *(_BYTE *)v55 = v53;
    *(_BYTE *)(v55 + 1) = v53;
    *(_WORD *)(v55 + 2) = 2160;
    v88 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 12) = 2081;
    v56 = v75;
    v57 = (uint64_t *)(*(_QWORD *)&v75[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
    v58 = *v57;
    v59 = v57[1];
    swift_bridgeObjectRetain();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 22) = 2080;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = xmmword_245FBECD0;
    v61 = *(_QWORD *)&v56[OBJC_IVAR___SGREMaterial_operationalHash];
    v62 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v60 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v60 + 64) = v62;
    *(_QWORD *)(v60 + 32) = v61;
    v63 = String.init(format:_:)();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    v65 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v48, (os_signpost_type_t)v72, v65, "archiveDecode", v79, (uint8_t *)v55, 0x20u);
    v66 = v78;
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v66, -1, -1);
    MEMORY[0x24954C33C](v55, -1, -1);

    v67 = v76;
    v76(v81, v4);
    v28 = v83;
    v67(v10, v4);
  }
  else
  {

    v54 = v75;
    v76(v49, v4);
  }
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  v68 = static DebugConfig.debugMode;
  v69 = v74;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v70 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v68 + 32));
    if (((*(_QWORD *)(v68 + 56 + ((v70 >> 3) & 0xFFFFFFFFFFFFF8)) >> v70) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    v28 = v83;
  }
  (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v86, v85);
  swift_release();
  outlined consume of Data?(v28, v89);

  swift_release();
  return v75;
}

char *specialized static ShaderGraphService.createLibrary(from:device:options:)(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  int v20;
  unsigned __int8 *v21;
  char *v22;
  NSObject *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  os_signpost_id_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  void *v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(_QWORD, _QWORD);
  id v47;
  void *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  BOOL v59;
  void **v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  id v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  char *v85;
  uint8_t *v86;
  _QWORD *v87;
  id v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  id v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  _QWORD *v109;
  id v110;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  char *v120;
  Swift::OpaquePointer v121;
  void *v122;
  NSObject *rawValue;
  void *v124;
  _QWORD *v125;
  uint64_t v126;
  void *v127;
  id v128;
  _QWORD *v129;
  uint64_t v130;
  NSObject *v131;
  char *v132;
  int v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint8_t *v141;
  os_signpost_id_t v142;
  void (*v143)(_QWORD, _QWORD);
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  void (*v147)(_QWORD, _QWORD);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  void (*v159)(_QWORD, _QWORD, _QWORD);
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  char *v164;
  unsigned __int8 *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  char *v173;
  void *v174;
  _QWORD *v175;
  _QWORD v176[2];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _OWORD v186[2];
  unint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _OWORD v197[2];
  _OWORD v198[9];
  _OWORD v199[2];
  _QWORD v200[39];
  _BYTE v201[312];
  _OWORD v202[9];
  _OWORD v203[13];
  uint64_t v204;
  ShaderGraph::NodeDefStore v205;

  v170 = a3;
  v204 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for URL();
  v150 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v151 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignpostError();
  v153 = *(_QWORD *)(v7 - 8);
  v154 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v152 = (char *)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for OSSignpostID();
  v175 = *(_QWORD **)(v168 - 8);
  v9 = MEMORY[0x24BDAC7A8](v168);
  v155 = (char *)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v167 = (char *)&v146 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v146 - v13;
  v15 = type metadata accessor for OSSignposter();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  OSSignposter.init(subsystem:category:)();
  v169 = a2;
  v165 = a1;
  if (!a1)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v43 = (void *)swift_allocError();
    *(_QWORD *)v44 = 0xD000000000000010;
    *(_QWORD *)(v44 + 8) = 0x8000000245FC93A0;
    v163 = 1;
    *(_BYTE *)(v44 + 16) = 1;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v174 = 0;
    v162 = 1;
    goto LABEL_53;
  }
  v19 = a2;
  v149 = v5;
  v160 = v16;
  v161 = v15;
  v162 = a1[OBJC_IVAR___SGREMaterial_hasSurfaceShaderUniforms];
  v20 = a1[OBJC_IVAR___SGREMaterial_hasGeometryModifierUniforms];
  v21 = a1;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v22 = v21;
  v23 = OSSignposter.logHandle.getter();
  v24 = static os_signpost_type_t.begin.getter();
  v25 = OS_os_log.signpostsEnabled.getter();
  v173 = v18;
  v163 = v20;
  v164 = v22;
  if ((v25 & 1) != 0)
  {
    v159 = (void (*)(_QWORD, _QWORD, _QWORD))v175[2];
    v159(v167, v14, v168);
    v26 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    *(_QWORD *)&v188 = v27;
    *(_DWORD *)v26 = 141558531;
    *(_QWORD *)&v177 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 2081;
    LODWORD(v172) = v24;
    v28 = (uint64_t *)(*(_QWORD *)&v22[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
    v29 = *v28;
    v30 = v28[1];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2080;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_245FBECD0;
    v32 = *(_QWORD *)&v22[OBJC_IVAR___SGREMaterial_operationalHash];
    v33 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v31 + 64) = v33;
    *(_QWORD *)(v31 + 32) = v32;
    v34 = String.init(format:_:)();
    *(_QWORD *)&v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)&v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v36 = v167;
    swift_bridgeObjectRelease();
    v37 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v23, (os_signpost_type_t)v172, v37, "libraryFromMaterial", "%{private,mask.hash}s %s", (uint8_t *)v26, 0x20u);
    swift_arrayDestroy();
    v38 = v27;
    v19 = v169;
    MEMORY[0x24954C33C](v38, -1, -1);
    v39 = v26;
    v18 = v173;
    MEMORY[0x24954C33C](v39, -1, -1);

    v40 = v168;
    v41 = v175;
    ((void (*)(char *, uint64_t))v175[1])(v36, v168);
    v42 = v159;
  }
  else
  {

    v41 = v175;
    v42 = (void (*)(_QWORD, _QWORD, _QWORD))v175[2];
    v36 = v167;
    v40 = v168;
  }
  v159 = v42;
  v42(v36, v14, v40);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v45 = OSSignpostIntervalState.init(id:isOpen:)();
  v46 = (void (*)(_QWORD, _QWORD))v41[1];
  v46(v14, v40);
  if (!v19)
  {
    lazy protocol witness table accessor for type APIError and conformance APIError();
    v43 = (void *)swift_allocError();
    *(_OWORD *)v51 = xmmword_245FBFFA0;
    *(_BYTE *)(v51 + 16) = 1;
    swift_willThrow();

    swift_release();
    (*(void (**)(char *, uint64_t))(v160 + 8))(v18, v161);
    v174 = 0;
    goto LABEL_53;
  }
  v147 = v46;
  v47 = v164;
  v48 = *(void **)&v164[OBJC_IVAR___SGREMaterial_graph];
  swift_unknownObjectRetain();
  v49 = v48;
  v50 = v174;
  SGGraph.legacyGraph()(v198);
  v158 = v50;
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v160 + 8))(v18, v161);

    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_52;
  }
  v148 = v49;
  v195 = v198[7];
  v196 = v198[8];
  v197[0] = v199[0];
  *(_OWORD *)((char *)v197 + 9) = *(_OWORD *)((char *)v199 + 9);
  v192 = v198[4];
  v193 = v198[5];
  v194 = v198[6];
  v188 = v198[0];
  v189 = v198[1];
  v190 = v198[2];
  v191 = v198[3];
  if (one-time initialization token for debugMode != -1)
    goto LABEL_43;
LABEL_11:
  swift_beginAccess();
  v52 = static DebugConfig.debugMode;
  v53 = *(_QWORD *)(static DebugConfig.debugMode + 16);
  v146 = v45;
  if (v53)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v54 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v52 + 32));
    if (((*(_QWORD *)(v52 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
    v18 = v173;
  }
  v55 = *(_QWORD *)(*(_QWORD *)&v148[OBJC_IVAR___SGGraph_argumentsNode] + OBJC_IVAR___SGNode_outputs);
  v56 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v177 = MEMORY[0x24BEE4AF8];
  if (!(v55 >> 62))
  {
    v57 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v57)
      goto LABEL_45;
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  v57 = _CocoaArrayWrapper.endIndex.getter();
  if (v57)
  {
LABEL_17:
    v45 = 0;
    v171 = v57;
    v172 = (const char *)(v55 & 0xC000000000000001);
    v166 = v55;
    v156 = v55 + 32;
    v157 = v55 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v172)
      {
        v58 = (_QWORD *)MEMORY[0x24954B748](v45, v166);
        v59 = __OFADD__(v45++, 1);
        if (v59)
          goto LABEL_41;
      }
      else
      {
        if (v45 >= *(_QWORD *)(v157 + 16))
          goto LABEL_42;
        v58 = *(id *)(v156 + 8 * v45);
        v59 = __OFADD__(v45++, 1);
        if (v59)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          swift_once();
          goto LABEL_11;
        }
      }
      v175 = v58;
      v60 = (void **)((char *)v58 + OBJC_IVAR___SGOutput_edges);
      swift_beginAccess();
      v61 = *v60;
      v62 = v60[1];
      v187 = v56;
      v63 = v62[2];
      if (v63)
      {
        v64 = (uint64_t)(v62 + 4);
        v174 = v61;
        swift_retain();
        swift_retain();
        do
        {
          outlined init with copy of (input: Input, fNode: MetalFunctionNode?)(v64, (uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          v65 = MEMORY[0x24954C3E4](v176);
          v66 = outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
          if (v65)
          {
            MEMORY[0x24954B1A8](v66);
            if (*(_QWORD *)((v187 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v187 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          v64 += 8;
          --v63;
        }
        while (v63);
        v67 = v187;
        v18 = v173;
      }
      else
      {
        swift_retain();
        swift_retain();
        v67 = v56;
      }
      swift_release();
      swift_release();
      if (v67 >> 62)
      {
        swift_bridgeObjectRetain();
        v68 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v69 = v171;
      swift_bridgeObjectRelease();
      if (v68)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
      v56 = MEMORY[0x24BEE4AF8];
      if (v45 == v69)
      {
        swift_bridgeObjectRelease();
        v70 = v177;
        goto LABEL_46;
      }
    }
  }
LABEL_45:
  swift_bridgeObjectRelease();
  v70 = MEMORY[0x24BEE4AF8];
LABEL_46:
  v71 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph8SGOutputCG_SSs5NeverOTg504_s11d138Graph0aB7ServiceC13createLibrary4from6device7optionsSo10MTLLibrary_pAA12SGREMaterialCSg_So9MTLDevice_pSgAA0J18CompilationOptionsCtKFZSSAA8F54Ccfu1_32fd0161a276cdf0c4c1049efc18373d1cAQSSTf3nnnpk_nTf1cn_n(v70);
  swift_release();
  v72 = specialized Set.init<A>(_:)(v71);
  swift_bridgeObjectRelease();
  v73 = v148;
  swift_beginAccess();
  v74 = swift_bridgeObjectRetain();
  v75 = specialized _ArrayProtocol.filter(_:)(v74, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Graph.insertConversionFromFloatColorToHalfColor(for:)((Swift::OpaquePointer)v75);
  v158 = v76;
  if (v76)
  {

    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v184 = v195;
    v185 = v196;
    v186[0] = v197[0];
    *(_OWORD *)((char *)v186 + 9) = *(_OWORD *)((char *)v197 + 9);
    v181 = v192;
    v182 = v193;
    v183 = v194;
    v177 = v188;
    v178 = v189;
    v179 = v190;
    v180 = v191;
    outlined release of Graph((uint64_t)&v177);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v18, v161);
LABEL_52:
    v174 = 0;
    v43 = v158;
LABEL_53:
    if (one-time initialization token for logger != -1)
      swift_once();
    v79 = type metadata accessor for Logger();
    v80 = (_QWORD *)__swift_project_value_buffer(v79, (uint64_t)logger);
    v81 = v43;
    v82 = v43;
    v175 = v80;
    v83 = Logger.logObject.getter();
    v84 = static os_log_type_t.error.getter();
    v85 = (char *)v84;
    if (os_log_type_enabled(v83, v84))
    {
      v86 = (uint8_t *)swift_slowAlloc();
      v87 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v86 = 138412290;
      v88 = v43;
      v89 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)&v188 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v87 = v89;

      _os_log_impl(&dword_245E46000, v83, (os_log_type_t)v85, "%@", v86, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24954C33C](v87, -1, -1);
      MEMORY[0x24954C33C](v86, -1, -1);
    }
    else
    {

    }
    v90 = (_BYTE *)(v170 + OBJC_IVAR___SGREMaterialCompilationOptions_enableFailedCompileMaterial);
    swift_beginAccess();
    if (*v90 == 1)
    {
      if (v165)
      {
        v91 = (uint64_t *)(*(_QWORD *)&v165[OBJC_IVAR___SGREMaterial_graph] + OBJC_IVAR___SGGraph_name);
        v92 = *v91;
        v93 = v91[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        v92 = 0xD000000000000014;
        v93 = 0x8000000245FC93C0;
      }
      swift_bridgeObjectRetain();
      v98 = Logger.logObject.getter();
      v99 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v98, v99))
      {
        v100 = (uint8_t *)swift_slowAlloc();
        v101 = v43;
        v102 = swift_slowAlloc();
        *(_QWORD *)&v177 = v102;
        *(_DWORD *)v100 = 136315138;
        swift_bridgeObjectRetain();
        v176[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_245E46000, v98, v99, "Material library construction failed for: %s", v100, 0xCu);
        swift_arrayDestroy();
        v103 = v102;
        v43 = v101;
        MEMORY[0x24954C33C](v103, -1, -1);
        MEMORY[0x24954C33C](v100, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v104 = v43;
      v105 = v43;
      v106 = Logger.logObject.getter();
      v107 = static os_log_type_t.error.getter();
      v85 = (char *)v107;
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc();
        v109 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v108 = 138412290;
        v110 = v43;
        v111 = v43;
        v112 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)&v177 = v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v109 = v112;
        v43 = v111;

        _os_log_impl(&dword_245E46000, v106, (os_log_type_t)v85, "%@", v108, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v109, -1, -1);
        MEMORY[0x24954C33C](v108, -1, -1);
      }
      else
      {

      }
      v113 = v169;

      if (v113)
      {
        swift_unknownObjectRetain();
        v114 = v174;
        v115 = (char *)buildFailureMaterial(usesSurfaceUniforms:usesGeometryUniforms:device:)(v162, v163, v113);
        if (!v114)
        {
          v85 = v115;
          swift_unknownObjectRelease();

          return v85;
        }
        swift_unknownObjectRelease();
        goto LABEL_78;
      }
      v116 = Logger.logObject.getter();
      v117 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v116, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v118 = 0;
        _os_log_impl(&dword_245E46000, v116, v117, "Failed to unwrap MTLDevice", v118, 2u);
        MEMORY[0x24954C33C](v118, -1, -1);
      }

      type metadata accessor for SGError();
      SGError.__allocating_init(_:)((void *)0x63697665444C544DLL, (void *)0xE900000000000065, 1);
    }
    else
    {
      v94 = Logger.logObject.getter();
      v95 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v94, v95))
      {
        v96 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v96 = 0;
        _os_log_impl(&dword_245E46000, v94, v95, "Failed material compile fallback disabled.", v96, 2u);
        MEMORY[0x24954C33C](v96, -1, -1);
      }

      type metadata accessor for SGError();
      v97 = v43;
      SGError.__allocating_init(_:)(v43);
    }
    swift_willThrow();
LABEL_78:

    return v85;
  }
  swift_bridgeObjectRelease();
  v77 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v78 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v77 + 32));
    if (((*(_QWORD *)(v77 + 56 + ((v78 >> 3) & 0xFFFFFFFFFFFFF8)) >> v78) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v120 = v164;
  v121._rawValue = (void *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)&v164[OBJC_IVAR___SGREMaterial_config])
                                                + 0x58))();
  v205 = NodeDefStore.including(_:)(v121);
  if (v122)
  {

    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v184 = v195;
    v185 = v196;
    v186[0] = v197[0];
    *(_OWORD *)((char *)v186 + 9) = *(_OWORD *)((char *)v197 + 9);
    v181 = v192;
    v182 = v193;
    v183 = v194;
    v177 = v188;
    v178 = v189;
    v179 = v190;
    v180 = v191;
    outlined release of Graph((uint64_t)&v177);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v173, v161);
    v174 = 0;
    v43 = v122;
    goto LABEL_53;
  }
  rawValue = v205.nodeDefs._rawValue;
  v124 = v205.geomPropDefs._rawValue;
  v125 = v205.implementations._rawValue;
  swift_bridgeObjectRelease();
  v126 = *(_QWORD *)&v120[OBJC_IVAR___SGREMaterial_textureAssignments];
  v127 = *(void **)&v120[OBJC_IVAR___SGREMaterial_customUniformsType];
  swift_bridgeObjectRetain();
  v128 = v127;
  v129 = (_QWORD *)specialized static MetalDataType.create(_:)((uint64_t)v128);

  v202[7] = v195;
  v202[8] = v196;
  v203[0] = v197[0];
  *(_OWORD *)((char *)v203 + 9) = *(_OWORD *)((char *)v197 + 9);
  v202[4] = v192;
  v202[5] = v193;
  v202[6] = v194;
  v202[0] = v188;
  v202[1] = v189;
  v202[2] = v190;
  v202[3] = v191;
  outlined retain of Graph((uint64_t)v202);
  swift_retain();
  v130 = specialized Dictionary<>.init(_:)(v126);
  specialized RESurfaceShaderMaterial.init(_:customUniformsType:textureAssignments:nodeDefStore:)(v202, (uint64_t)v129, v130, rawValue, (uint64_t)v124, v125, v200);
  v175 = v129;
  memcpy(v201, v200, sizeof(v201));
  outlined retain of RESurfaceShaderMaterial(v200);
  v85 = GraphCompiler.compile(for:options:)(v169, v170);
  v131 = OSSignposter.logHandle.getter();
  v132 = v155;
  OSSignpostIntervalState.signpostID.getter();
  v133 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    LODWORD(v174) = v133;
    swift_retain();
    v134 = v152;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v136 = v153;
    v135 = v154;
    if ((*(unsigned int (**)(char *, uint64_t))(v153 + 88))(v134, v154) == *MEMORY[0x24BEE7810])
    {
      v137 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v136 + 8))(v134, v135);
      v137 = "";
    }
    v172 = v137;
    v138 = v167;
    v139 = v132;
    v140 = v168;
    v159(v167, v139, v168);
    v141 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v141 = 0;
    v142 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245E46000, v131, (os_signpost_type_t)v174, v142, "libraryFromMaterial", v172, v141, 2u);
    MEMORY[0x24954C33C](v141, -1, -1);

    v143 = v147;
    v147(v155, v140);
    v143(v138, v140);
  }
  else
  {

    v147(v132, v168);
  }
  v144 = static DebugConfig.debugMode;
  if (*(_QWORD *)(static DebugConfig.debugMode + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v145 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v144 + 32));
    if (((*(_QWORD *)(v144 + 56 + ((v145 >> 3) & 0xFFFFFFFFFFFFF8)) >> v145) & 1) != 0)
      __asm { BR              X9 }
    swift_bridgeObjectRelease();
  }
  outlined release of RESurfaceShaderMaterial(v200);
  swift_unknownObjectRelease();

  swift_release();
  outlined release of RESurfaceShaderMaterial(v200);

  swift_release();
  v184 = v195;
  v185 = v196;
  v186[0] = v197[0];
  *(_OWORD *)((char *)v186 + 9) = *(_OWORD *)((char *)v197 + 9);
  v181 = v192;
  v182 = v193;
  v183 = v194;
  v177 = v188;
  v178 = v189;
  v179 = v190;
  v180 = v191;
  outlined release of Graph((uint64_t)&v177);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v173, v161);
  return v85;
}

uint64_t type metadata accessor for SGREMaterialCompilationOptions()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames;
  if (!lazy protocol witness table cache variable for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for BuiltInDefinition.ReservedNames, &type metadata for BuiltInDefinition.ReservedNames);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BuiltInDefinition.ReservedNames and conformance BuiltInDefinition.ReservedNames);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in BuiltInDefinition.ReservedNames()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [BuiltInDefinition.ReservedNames] and conformance [A], &demangling cache variable for type metadata for [BuiltInDefinition.ReservedNames], MEMORY[0x24BEE12E0]);
}

uint64_t destroy for BuiltInDefinition(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 40);
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeWithCopy for BuiltInDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2 + 4;
  v6 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((unint64_t)(v6 - 1) >= 2)
  {
    a1[4] = *v5;
    a1[5] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)v5;
  }
  return a1;
}

_QWORD *assignWithCopy for BuiltInDefinition(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[5] - 1;
  if ((unint64_t)(a1[5] - 1) >= 2)
  {
    if (v4 >= 2)
    {
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)(a1 + 4), &demangling cache variable for type metadata for String?);
    goto LABEL_6;
  }
  if (v4 < 2)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    return a1;
  }
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for BuiltInDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  v5 = a2 + 4;
  if ((unint64_t)(a1[5] - 1) >= 2)
  {
    v6 = a2[5];
    if ((unint64_t)(v6 - 1) >= 2)
    {
      a1[4] = *v5;
      a1[5] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)(a1 + 4), &demangling cache variable for type metadata for String?);
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInDefinition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInDefinition()
{
  return &type metadata for BuiltInDefinition;
}

uint64_t initializeWithCopy for BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BuiltInDefinition.InputSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInDefinition.InputSpec(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInDefinition.InputSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInDefinition.InputSpec()
{
  return &type metadata for BuiltInDefinition.InputSpec;
}

_QWORD *initializeBufferWithCopyOfBuffer for BuiltInDefinition.OutputSpec(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BuiltInDefinition.OutputSpec(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for BuiltInDefinition.OutputSpec(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for BuiltInDefinition.OutputSpec()
{
  return &type metadata for BuiltInDefinition.OutputSpec;
}

uint64_t storeEnumTagSinglePayload for BuiltInDefinition.ReservedNames(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245E98F34 + 4 * byte_245FBFFE3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245E98F68 + 4 * byte_245FBFFDE[v4]))();
}

uint64_t sub_245E98F68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E98F70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245E98F78);
  return result;
}

uint64_t sub_245E98F84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245E98F8CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245E98F90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E98F98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuiltInDefinition.ReservedNames()
{
  return &type metadata for BuiltInDefinition.ReservedNames;
}

uint64_t type metadata accessor for SGWarning()
{
  return objc_opt_self();
}

uint64_t method lookup function for SGWarning()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGWarning.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t ObjC metadata update function for SGREMaterial()
{
  return type metadata accessor for SGREMaterial();
}

uint64_t type metadata accessor for SGREMaterial()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SGREMaterial;
  if (!type metadata singleton initialization cache for SGREMaterial)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SGREMaterial()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SHA512Digest();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for SGREMaterial()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGREMaterial.__allocating_init(graph:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t method lookup function for SGREMaterialCompilationOptions()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SGREMaterialCompilationOptions.__allocating_init(workingColorSpace:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for ShaderGraphService()
{
  return objc_opt_self();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialCodingContainer and conformance MaterialCodingContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialCodingContainer, &type metadata for MaterialCodingContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer;
  if (!lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MaterialCodingContainer, &type metadata for MaterialCodingContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialCodingContainer and conformance MaterialCodingContainer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SHA512 and conformance SHA512()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SHA512 and conformance SHA512;
  if (!lazy protocol witness table cache variable for type SHA512 and conformance SHA512)
  {
    v1 = type metadata accessor for SHA512();
    result = MEMORY[0x24954C264](MEMORY[0x24BDC6B30], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SHA512 and conformance SHA512);
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t partial apply for closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(uint64_t a1)
{
  return closure #3 in SGGraph.structuralEdgeList(topologicalSort:textureMapping:)(a1);
}

uint64_t outlined init with take of NodeData(uint64_t a1, uint64_t a2)
{
  __swift_memcpy81_16(a2, a1);
  return a2;
}

uint64_t outlined retain of NodeData(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 80);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v4);
  return a1;
}

__n128 *outlined init with take of MaterialXAvailability(__n128 *a1, __n128 *a2)
{
  __swift_memcpy16_8(a2, a1);
  return a2;
}

uint64_t *outlined release of MaterialXAvailability(uint64_t *a1)
{
  outlined consume of MaterialXAvailability(*a1, a1[1]);
  return a1;
}

void closure #1 in osSignpost(_:log:name:id:type:state:formatStringTransform:)(uint8_t *a1, uint32_t a2, NSObject *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t DynamicArrayLookupByString.path.getter()
{
  return swift_retain();
}

uint64_t DynamicArrayLookupByString.subscript.getter(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x24954C264](MEMORY[0x24BEE12F0], v8);
  _ArrayProtocol.filter(_:)();
  v9 = MEMORY[0x24954B250]();
  if (v9 == 1)
  {
    Array.subscript.getter();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_getMetatypeMetadata();
      v27 = String.init<A>(reflecting:)();
      v29 = v20;
      v21._countAndFlagsBits = 32;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      v22._countAndFlagsBits = a1;
      v22._object = a2;
      String.append(_:)(v22);
      v13 = v29;
      v25 = type metadata accessor for DynamicArrayLookupByString.MemberLookupError(0, a5, v23, v24);
      MEMORY[0x24954C264](&protocol conformance descriptor for DynamicArrayLookupByString<A>.MemberLookupError, v25);
      swift_allocError();
      v18 = 0;
      *(_QWORD *)v17 = v27;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_getMetatypeMetadata();
      v26 = String.init<A>(reflecting:)();
      v28 = v10;
      v11._countAndFlagsBits = 32;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = a1;
      v12._object = a2;
      String.append(_:)(v12);
      v13 = v28;
      v16 = type metadata accessor for DynamicArrayLookupByString.MemberLookupError(0, a5, v14, v15);
      MEMORY[0x24954C264](&protocol conformance descriptor for DynamicArrayLookupByString<A>.MemberLookupError, v16);
      swift_allocError();
      *(_QWORD *)v17 = v26;
      v18 = 1;
    }
    *(_QWORD *)(v17 + 8) = v13;
    *(_BYTE *)(v17 + 16) = v18;
    return swift_willThrow();
  }
}

uint64_t closure #1 in DynamicArrayLookupByString.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8;
  uint64_t v10;
  uint64_t v11;

  swift_getAtKeyPath();
  if (v10 == a4 && v11 == a5)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t partial apply for closure #1 in DynamicArrayLookupByString.subscript.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in DynamicArrayLookupByString.subscript.getter(a1, v1[3], v1[4], v1[5], v1[6]) & 1;
}

uint64_t type metadata accessor for DynamicArrayLookupByString.MemberLookupError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicArrayLookupByString.MemberLookupError);
}

uint64_t destroy for DynamicArrayLookupByString()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for DynamicArrayLookupByString(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DynamicArrayLookupByString(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for DynamicArrayLookupByString(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicArrayLookupByString(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicArrayLookupByString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for DynamicArrayLookupByString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicArrayLookupByString);
}

uint64_t type metadata instantiation function for DynamicArrayLookupByString.MemberLookupError()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy11ShaderGraph11DebugConfigO5GroupOG_SSs5NeverOTg504_s11d7Graph11fg17O9debugModeShyAC5H72OGvpZfiAGyXEfU_SSAFcfu1_32fca4dd16cfbb9a2e4a4875ed65f685b6AFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = specialized Set.startIndex.getter(a1);
    if (v3 < 0 || v3 >= 1 << *(_BYTE *)(a1 + 32))
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    {
      if (*(_DWORD *)(a1 + 36) == v4)
        __asm { BR              X9 }
LABEL_10:
      __break(1u);
      JUMPOUT(0x245E99B3CLL);
    }
    __break(1u);
    goto LABEL_10;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t *DebugConfig.debugMode.unsafeMutableAddressor()
{
  if (one-time initialization token for debugMode != -1)
    swift_once();
  return &static DebugConfig.debugMode;
}

char *DebugConfig.tier1SupportOverrideEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for tier1SupportOverrideEnabled != -1)
    swift_once();
  return &static DebugConfig.tier1SupportOverrideEnabled;
}

uint64_t DebugConfig.Group.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245E99C08 + 4 * byte_245FC0438[a1]))(1701736302, 0xE400000000000000);
}

uint64_t sub_245E99C08()
{
  return 0x7972616D6D7573;
}

uint64_t sub_245E99C20()
{
  return 0x65766968637261;
}

uint64_t sub_245E99C38()
{
  return 7630692;
}

uint64_t sub_245E99C48()
{
  return 0x62694C6C6174656DLL;
}

uint64_t sub_245E99C68()
{
  return 0x6E69686374697473;
}

uint64_t sub_245E99C8C()
{
  return 0x446C616D696E696DLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance DebugConfig.Group(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_245E99CEC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_245E99DA4 + 4 * byte_245FC0446[a1]))(0x7972616D6D7573);
}

uint64_t sub_245E99DA4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7972616D6D7573 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance DebugConfig.Group()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245E99EFC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DebugConfig.Group()
{
  __asm { BR              X10 }
}

uint64_t sub_245E99FF8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance DebugConfig.Group()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245E9A0EC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DebugConfig.Group@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized DebugConfig.Group.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DebugConfig.Group()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_245E9A208 + 4 * byte_245FC0462[*v0]))();
}

void sub_245E9A208(_QWORD *a1@<X8>)
{
  *a1 = 0x7972616D6D7573;
  a1[1] = 0xE700000000000000;
}

void sub_245E9A224(_QWORD *a1@<X8>)
{
  *a1 = 0x65766968637261;
  a1[1] = 0xE700000000000000;
}

void sub_245E9A240(_QWORD *a1@<X8>)
{
  *a1 = 7630692;
  a1[1] = 0xE300000000000000;
}

void sub_245E9A254(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "metalLibrary");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_245E9A278(char *a1@<X8>)
{
  strcpy(a1, "stitchingGraph");
  a1[15] = -18;
}

void sub_245E9A2A0(_QWORD *a1@<X8>)
{
  *a1 = 0x446C616D696E696DLL;
  a1[1] = 0xEA0000000000746FLL;
}

void *DebugConfig.verbosityLevelDefaultsKey.unsafeMutableAddressor()
{
  return &static DebugConfig.verbosityLevelDefaultsKey;
}

unint64_t static DebugConfig.verbosityLevelDefaultsKey.getter()
{
  return 0xD000000000000024;
}

void *DebugConfig.debugModeKey.unsafeMutableAddressor()
{
  return &static DebugConfig.debugModeKey;
}

unint64_t static DebugConfig.debugModeKey.getter()
{
  return 0xD00000000000001FLL;
}

void *DebugConfig.tier1RESupportEnabledKey.unsafeMutableAddressor()
{
  return &static DebugConfig.tier1RESupportEnabledKey;
}

unint64_t static DebugConfig.tier1RESupportEnabledKey.getter()
{
  return 0xD000000000000030;
}

uint64_t one-time initialization function for debugMode()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static DebugConfig.debugMode();
  static DebugConfig.debugMode = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static DebugConfig.debugMode()
{
  id v0;
  void *v1;
  uint64_t ObjCClassFromMetadata;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  char *v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCF50]), sel_initWithSuiteName_, 0);
  if (v0)
  {
    v1 = v0;
    type metadata accessor for SGGraph();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v4 = objc_msgSend(v3, sel_infoDictionary);
    v43 = v3;
    if (v4)
    {
      v5 = v4;
      v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(_QWORD *)(v6 + 16)
        && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x656C646E75424643, 0xEF6E6F6973726556),
            (v8 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v46);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v47 + 1))
        {
          if (swift_dynamicCast())
          {
            v9 = v44;
            v10 = v45;
LABEL_17:
            v42 = v9;
            v15 = (void *)MEMORY[0x24954AF98](0xD00000000000001FLL, 0x8000000245FC9650);
            v16 = objc_msgSend(v1, sel_stringArrayForKey_, v15);

            if (v16)
            {
              v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              v18 = *(_QWORD *)(v17 + 16);
              if (v18)
              {
                swift_bridgeObjectRetain();
                v19 = (void **)(v17 + 40);
                v20 = (char *)MEMORY[0x24BEE4AF8];
                do
                {
                  v21 = (uint64_t)*(v19 - 1);
                  v22 = *v19;
                  swift_bridgeObjectRetain();
                  v23._countAndFlagsBits = v21;
                  v23._object = v22;
                  v24 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of closure #1 in variable initialization expression of static DebugConfig.debugMode, v23);
                  swift_bridgeObjectRelease();
                  if (v24 <= 6)
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
                    v26 = *((_QWORD *)v20 + 2);
                    v25 = *((_QWORD *)v20 + 3);
                    if (v26 >= v25 >> 1)
                      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v20);
                    *((_QWORD *)v20 + 2) = v26 + 1;
                    v20[v26 + 32] = v24;
                  }
                  v19 += 2;
                  --v18;
                }
                while (v18);
                swift_bridgeObjectRelease();
              }
              else
              {
                v20 = (char *)MEMORY[0x24BEE4AF8];
              }
              v39 = specialized Set.init<A>(_:)((uint64_t)v20);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              v39 = MEMORY[0x24BEE4B08];
            }
            *(_QWORD *)&v46 = 91;
            *((_QWORD *)&v46 + 1) = 0xE100000000000000;
            _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy11ShaderGraph11DebugConfigO5GroupOG_SSs5NeverOTg504_s11d7Graph11fg17O9debugModeShyAC5H72OGvpZfiAGyXEfU_SSAFcfu1_32fca4dd16cfbb9a2e4a4875ed65f685b6AFSSTf3nnnpk_nTf1cn_n(v39);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            v27 = BidirectionalCollection<>.joined(separator:)();
            v29 = v28;
            swift_bridgeObjectRelease();
            v30._countAndFlagsBits = v27;
            v30._object = v29;
            String.append(_:)(v30);
            swift_bridgeObjectRelease();
            v31._countAndFlagsBits = 93;
            v31._object = (void *)0xE100000000000000;
            String.append(_:)(v31);
            v32 = *((_QWORD *)&v46 + 1);
            v41 = v46;
            if (*(_QWORD *)(v39 + 16))
            {
              Hasher.init(_seed:)();
              String.hash(into:)();
              v33 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v39 + 32));
              if (((*(_QWORD *)(v39 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
                __asm { BR              X9 }
            }
            if (one-time initialization token for logger != -1)
              swift_once();
            v34 = type metadata accessor for Logger();
            __swift_project_value_buffer(v34, (uint64_t)logger);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v35 = Logger.logObject.getter();
            v36 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v35, v36))
            {
              v37 = swift_slowAlloc();
              v38 = swift_slowAlloc();
              *(_QWORD *)&v46 = v38;
              *(_DWORD *)v37 = 136315394;
              swift_bridgeObjectRetain();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v10, (uint64_t *)&v46);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v37 + 12) = 2080;
              swift_bridgeObjectRetain();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v32, (uint64_t *)&v46);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_245E46000, v35, v36, "DebugMode (%s): %s", (uint8_t *)v37, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x24954C33C](v38, -1, -1);
              MEMORY[0x24954C33C](v37, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }

            return v39;
          }
LABEL_16:
          v10 = 0xE500000000000000;
          v9 = 0x7265566F4ELL;
          goto LABEL_17;
        }
      }
      else
      {
        v46 = 0u;
        v47 = 0u;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v46 = 0u;
      v47 = 0u;
    }
    outlined destroy of Any?((uint64_t)&v46);
    goto LABEL_16;
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_245E46000, v12, v13, "Failed to construct UserDefaults(suiteName: nil)", v14, 2u);
    MEMORY[0x24954C33C](v14, -1, -1);
  }

  return MEMORY[0x24BEE4B08];
}

uint64_t static DebugConfig.debugMode.getter()
{
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static DebugConfig.debugMode.setter(uint64_t a1)
{
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  static DebugConfig.debugMode = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static DebugConfig.debugMode.modify())()
{
  if (one-time initialization token for debugMode != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

id one-time initialization function for tier1SupportOverrideEnabled()
{
  id result;

  result = closure #1 in variable initialization expression of static DebugConfig.tier1SupportOverrideEnabled();
  static DebugConfig.tier1SupportOverrideEnabled = result & 1;
  return result;
}

id closure #1 in variable initialization expression of static DebugConfig.tier1SupportOverrideEnabled()
{
  id v0;
  void *v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCF50]), sel_initWithSuiteName_, 0);
  if (v0)
  {
    v1 = v0;
    v2 = MEMORY[0x24954AF98](0xD000000000000030, 0x8000000245FC9670);
    v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)logger);
    v2 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_245E46000, v2, v5, "Failed to construct UserDefaults(suiteName: nil)", v6, 2u);
      MEMORY[0x24954C33C](v6, -1, -1);
    }
    v3 = 0;
  }

  return v3;
}

uint64_t static DebugConfig.tier1SupportOverrideEnabled.getter()
{
  if (one-time initialization token for tier1SupportOverrideEnabled != -1)
    swift_once();
  swift_beginAccess();
  return static DebugConfig.tier1SupportOverrideEnabled;
}

uint64_t static DebugConfig.tier1SupportOverrideEnabled.setter(char a1)
{
  uint64_t result;

  if (one-time initialization token for tier1SupportOverrideEnabled != -1)
    swift_once();
  result = swift_beginAccess();
  static DebugConfig.tier1SupportOverrideEnabled = a1 & 1;
  return result;
}

uint64_t (*static DebugConfig.tier1SupportOverrideEnabled.modify())()
{
  if (one-time initialization token for tier1SupportOverrideEnabled != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

id static DebugConfig.verbosityLevel.getter()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x24954AF98](0xD000000000000024, 0x8000000245FC9620);
  v2 = objc_msgSend(v0, sel_integerForKey_, v1);

  return v2;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t specialized DebugConfig.Group.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DebugConfig.Group.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type DebugConfig.Group and conformance DebugConfig.Group()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group;
  if (!lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for DebugConfig.Group, &type metadata for DebugConfig.Group);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group;
  if (!lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for DebugConfig.Group, &type metadata for DebugConfig.Group);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DebugConfig.Group and conformance DebugConfig.Group);
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugConfig()
{
  return &type metadata for DebugConfig;
}

uint64_t getEnumTagSinglePayload for DebugConfig.Group(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugConfig.Group(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_245E9B454 + 4 * byte_245FC046E[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_245E9B488 + 4 * byte_245FC0469[v4]))();
}

uint64_t sub_245E9B488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E9B490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245E9B498);
  return result;
}

uint64_t sub_245E9B4A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245E9B4ACLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_245E9B4B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245E9B4B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DebugConfig.Group()
{
  return &type metadata for DebugConfig.Group;
}

uint64_t outlined consume of Set<DebugConfig.Group>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t TupleTypeMetadata2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v48 = a1;
  v49 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v40 - v12;
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v40 - v17;
  swift_getAssociatedConformanceWitness();
  v45 = type metadata accessor for Range();
  v43 = *(_QWORD *)(v45 - 8);
  v19 = MEMORY[0x24BDAC7A8](v45);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v40 = (char *)&v40 - v22;
  dispatch thunk of Collection.startIndex.getter();
  v46 = a2;
  v47 = v4;
  v44 = v6;
  dispatch thunk of Collection.endIndex.getter();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v25 = v41;
    v24 = TupleTypeMetadata2;
    v26 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    v27 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v27(v13, v18, AssociatedTypeWitness);
    v27(v26, v16, AssociatedTypeWitness);
    v28 = &v10[*(int *)(v24 + 48)];
    v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v29(v10, v13, AssociatedTypeWitness);
    v29(v28, v26, AssociatedTypeWitness);
    v27(v21, v10, AssociatedTypeWitness);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v28, AssociatedTypeWitness);
    v31 = &v10[*(int *)(v24 + 48)];
    v27(v10, v13, AssociatedTypeWitness);
    v27(v31, v26, AssociatedTypeWitness);
    v32 = v45;
    v27(&v21[*(int *)(v45 + 36)], v31, AssociatedTypeWitness);
    v30(v10, AssociatedTypeWitness);
    v33 = v43;
    v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v21, v32);
    v36 = v47;
    v35 = v48;
    v37 = v46;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    v38 = type metadata accessor for Slice();
    v39 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(&v49[*(int *)(v38 + 40)], v36, v37);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v32);
    v27(v39, v34, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t))v27)(&v39[*(int *)(v38 + 36)], &v34[*(int *)(v32 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence._bounds.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence._bounds.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence.init(_base:bounds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.keys.getter()
{
  uint64_t *v0;

  return OrderedSet.subscript.getter(v0[3], v0[4], *v0);
}

__n128 OrderedDictionary.Elements.SubSequence.values.getter@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __n128 v14;

  v4 = *v2;
  v9 = *(_OWORD *)(v2 + 3);
  v10 = v4;
  v11 = *(_OWORD *)(v2 + 1);
  v5 = type metadata accessor for OrderedDictionary.Values(0, a1[2], a1[3], a1[4]);
  v6 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Values, v5);
  MutableCollection<>.subscript.getter((uint64_t)&v9, v5, v6, (char *)&v12);
  v7 = v13;
  result = v14;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.index(forKey:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = OrderedSet._find(_:)();
  if ((v2 & 1) == 0 && (result < *(_QWORD *)(v0 + 24) || result >= *(_QWORD *)(v0 + 32)))
    return 0;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence._base.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t OrderedDictionary.Elements.SubSequence._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._end.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._end.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator._index.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*OrderedDictionary.Elements.SubSequence.Iterator._index.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

int8x16_t OrderedDictionary.Elements.SubSequence.Iterator.init(_base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int8x16_t result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(int8x16_t *)(a2 + 24) = result;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = TupleTypeMetadata2;
  if (v3 >= v4)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a1, 1, 1, TupleTypeMetadata2);
  ContiguousArray.subscript.getter();
  ContiguousArray.subscript.getter();
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 0, 1, v6);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    *(_QWORD *)(v1 + 32) = v10;
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(int8x16_t *)(a1 + 24) = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  swift_retain();
  swift_retain();
  return swift_retain();
}

int8x16_t protocol witness for Sequence.makeIterator() in conformance OrderedDictionary<A, B>.Elements.SubSequence@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int8x16_t result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  result = vextq_s8(*(int8x16_t *)(v1 + 24), *(int8x16_t *)(v1 + 24), 8uLL);
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence(uint64_t a1)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements.SubSequence, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>.Elements.SubSequence(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements.SubSequence, a1);
  v4 = specialized Collection._copyToContiguousArray()(v1, a1, v3);
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t OrderedDictionary.Elements.SubSequence.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t OrderedDictionary.Elements.SubSequence.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.indices.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedDictionary.Elements.SubSequence.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.SubSequence.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  BOOL v4;
  Swift::Int_optional result;

  v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.SubSequence.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)(v3 + 24) > a3 || *(_QWORD *)(v3 + 32) <= a3)
  {
    __break(1u);
  }
  else
  {
    ContiguousArray.subscript.getter();
    return ContiguousArray.subscript.getter();
  }
  return result;
}

uint64_t OrderedDictionary.Elements.SubSequence.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (v3[3] > result || v3[4] < a2)
  {
    __break(1u);
  }
  else
  {
    v5 = *v3;
    v6 = v3[1];
    v7 = v3[2];
    *a3 = v5;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = result;
    a3[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

BOOL OrderedDictionary.Elements.SubSequence.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) == *(_QWORD *)(v0 + 32);
}

uint64_t OrderedDictionary.Elements.SubSequence.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

void protocol witness for Collection.endIndex.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
}

void (*protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements.SubSequence(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  void (*v15)(_QWORD *);
  uint64_t v16;
  uint64_t v17;

  v7 = malloc(0x68uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[9] = TupleTypeMetadata2;
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7[10] = v11;
  v12 = (char *)malloc(*(_QWORD *)(v11 + 64));
  v7[11] = v12;
  v13 = *a2;
  v14 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v14;
  v7[4] = *(_QWORD *)(v3 + 32);
  v15 = OrderedDictionary.Elements.SubSequence.subscript.read(v7 + 5, v13);
  v17 = v16;
  v7[12] = v15;
  (*(void (**)(char *))(*(_QWORD *)(v8 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v17, v9);
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements.SubSequence;
}

void protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements.SubSequence(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *a1;
  v4 = *a1 + 40;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*a1 + 80) + 8))(*(_QWORD *)(*a1 + 88), *(_QWORD *)(*a1 + 72));
  v5 = *(void **)(v3 + 88);
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*OrderedDictionary.Elements.SubSequence.subscript.read(uint64_t *a1, uint64_t a2))(_QWORD *a1)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  void *v6;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v5 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v5;
  v6 = malloc(*(_QWORD *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  OrderedDictionary.Elements.SubSequence.subscript.getter((uint64_t)v6, (uint64_t)v6 + *(int *)(TupleTypeMetadata2 + 48), a2);
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values;
}

double protocol witness for Collection.subscript.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  OrderedDictionary.Elements.SubSequence.subscript.getter(*a1, a1[1], v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

__n128 protocol witness for Collection.indices.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) == *(_QWORD *)(v0 + 32);
}

uint64_t protocol witness for Collection.count.getter in conformance OrderedDictionary<A, B>.Elements.SubSequence()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for Range();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v16 - v11;
  v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v14 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = type metadata accessor for Range();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  v11 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for ClosedRange();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v16 - v11;
  v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v14 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>.Elements.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for BidirectionalCollection in OrderedDictionary<A, B>.Elements.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedDictionary<A, B>.Elements.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Collection in OrderedDictionary<A, B>.Elements.SubSequence()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Sequence in OrderedDictionary<A, B>.Elements.SubSequence()
{
  JUMPOUT(0x24954C264);
}

uint64_t initializeWithCopy for OrderedDictionary.Elements.SubSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Elements.SubSequence);
}

uint64_t type metadata instantiation function for OrderedDictionary.Elements.SubSequence.Iterator()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *assignWithCopy for OrderedDictionary.Elements.SubSequence(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for OrderedDictionary.Elements.SubSequence(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrderedDictionary.Elements.SubSequence(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrderedDictionary.Elements.SubSequence(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements.SubSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Elements.SubSequence.Iterator);
}

uint64_t OrderedSet.init<A>(uncheckedUniqueElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v9 = Array.init<A>(_:)();
  v19 = v9;
  v10 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v11 = type metadata accessor for ContiguousArray();
  v12 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v11);
  v13 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v19, 0, 1, v10, v11, v12, a4);
  v14 = ContiguousArray.count.getter();
  v15 = 0;
  if (v14 >= 16)
  {
    swift_retain();
    v15 = v13;
  }
  v16 = OrderedSet.init(_uniqueElements:_:)(v9, v15);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v16;
}

uint64_t OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  _QWORD v31[2];

  v8 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v31 - v12;
  v16 = type metadata accessor for OrderedSet(0, v14, v15, v15);
  if (v16 == a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v13, a1, a3);
    swift_dynamicCast();
    return v31[0];
  }
  v17 = v16;
  if (type metadata accessor for Set() != a3
    && type metadata accessor for OrderedSet.SubSequence(0, a2, a4, v18) != a3)
  {
    v31[0] = OrderedSet.init()();
    v31[1] = v19;
    OrderedSet.append<A>(contentsOf:)(a1, v17, a3);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
    return v31[0];
  }
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v21(v11, a1, a3);
  v21(v13, (uint64_t)v11, a3);
  v22 = Array.init<A>(_:)();
  v31[0] = v22;
  v23 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v24 = type metadata accessor for ContiguousArray();
  v25 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v24);
  v26 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v31, 0, 1, v23, v24, v25, a4);
  v27 = ContiguousArray.count.getter();
  v28 = 0;
  if (v27 >= 16)
  {
    swift_retain();
    v28 = v26;
  }
  v20 = OrderedSet.init(_uniqueElements:_:)(v22, v28);
  swift_release();
  v29 = *(void (**)(char *, uint64_t))(v8 + 8);
  v29(v11, a3);
  v29((char *)a1, a3);
  return v20;
}

{
  uint64_t v4;

  v4 = specialized OrderedSet.init<A>(_:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];

  OrderedSet.SubSequence._slice.getter();
  v20[1] = v7;
  v20[2] = v8;
  v20[3] = v9;
  v10 = type metadata accessor for ArraySlice();
  swift_unknownObjectRetain();
  MEMORY[0x24954C264](MEMORY[0x24BEE2180], v10);
  v11 = Array.init<A>(_:)();
  v20[0] = v11;
  v12 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v13 = type metadata accessor for ContiguousArray();
  v14 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v13);
  v15 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v20, 0, 1, v12, v13, v14, a6);
  v16 = ContiguousArray.count.getter();
  v17 = 0;
  if (v16 >= 16)
  {
    swift_retain();
    v17 = v15;
  }
  v18 = OrderedSet.init(_uniqueElements:_:)(v11, v17);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v18;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = specialized OrderedSet.init(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v58 = a5;
  v59 = a4;
  v57 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for PartialRangeFrom();
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v47 = (char *)&v44 - v9;
  v55 = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v54 = (char *)&v44 - v10;
  v11 = type metadata accessor for PartialRangeUpTo();
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v51 = (char *)&v44 - v13;
  v56 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v44 - v21;
  v23 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v58 = (uint64_t (*)(char *, uint64_t, uint64_t))static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)((uint64_t)v22, a1, 0, 1, v23, a3, v58, v59);
  v24 = a1;
  dispatch thunk of Collection.endIndex.getter();
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  v25 = v20;
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v25, AssociatedTypeWitness);
  if ((a1 & 1) != 0)
  {
    v27 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v16, v24, a3);
    v28 = Array.init<A>(_:)();
    v29 = OrderedSet.init(_uniqueElements:_:)(v28, (uint64_t)v58);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, a3);
    v26(v22, AssociatedTypeWitness);
    return v29;
  }
  v46 = v24;
  result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    v31 = v51;
    v44 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v45 = v26;
    v44(v51, v22, AssociatedTypeWitness);
    v32 = v53;
    MEMORY[0x24954C264](MEMORY[0x24BEE2C68], v53);
    v33 = (uint64_t)v54;
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v32);
    v34 = v55;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v36 = v57;
    v53 = *(_QWORD *)(AssociatedConformanceWitness + 8);
    v37 = Array.init<A>(_:)();
    v60 = OrderedSet.init(_uniqueElements:_:)(v37, (uint64_t)v58);
    v61 = v38;
    swift_retain();
    result = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((result & 1) != 0)
    {
      v39 = v47;
      v44(v47, v22, AssociatedTypeWitness);
      v40 = v49;
      MEMORY[0x24954C264](MEMORY[0x24BEE2C50], v49);
      v41 = v46;
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v40);
      v43 = type metadata accessor for OrderedSet(0, v36, v59, v42);
      OrderedSet.append<A>(contentsOf:)(v33, v43, v34);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v41, a3);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v34);
      v45(v22, AssociatedTypeWitness);
      return v60;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = type metadata accessor for Set();
  swift_bridgeObjectRetain();
  MEMORY[0x24954C264](MEMORY[0x24BEE1718], v4);
  v5 = Array.init<A>(_:)();
  v14 = v5;
  v6 = specialized default argument 1 of OrderedSet._extractSubset(using:extraCapacity:)();
  v7 = type metadata accessor for ContiguousArray();
  v8 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v7);
  v9 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v14, 0, 1, v6, v7, v8, a3);
  v10 = ContiguousArray.count.getter();
  v11 = 0;
  if (v10 >= 16)
  {
    swift_retain();
    v11 = v9;
  }
  v12 = OrderedSet.init(_uniqueElements:_:)(v5, v11);
  swift_release();
  return v12;
}

uint64_t specialized OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  MEMORY[0x24954C264](MEMORY[0x24BEE0310], v6);
  Array.init<A>(_:)();
  type metadata accessor for OrderedSet(0, a2, a4, v7);
  OrderedSet._regenerateHashTable()();
  return 0;
}

uint64_t MetalDataType.referenceTo(withAddressSpace:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200);
  v5 = swift_retain();
  v6 = v4(v5);
  type metadata accessor for MetalDataType.Reference();
  swift_allocObject();
  specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(v2, v6 & 1, a1);
  v8 = v7;
  swift_release();
  return v8;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  _BYTE v28[48];
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v29 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v9 = *(_BYTE *)(v3 + 32);
  v22 = v3 + 80;
  v23 = v5;
  v24 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_28;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_29;
    v13 = v3;
    outlined init with copy of (MetalDataType, Any?)?(*(_QWORD *)(v3 + 56) + 40 * v6, (uint64_t)v28);
    outlined init with take of (MetalDataType, Any?)?((uint64_t)v28, (uint64_t)v27);
    outlined init with copy of (MetalDataType, Any?)?((uint64_t)v27, (uint64_t)&v25);
    if (v25)
    {
      v14 = *(_DWORD *)(v25 + 56);
      swift_release();
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    }
    else
    {
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v25, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
      v14 = 0;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v27, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
    v2 = v29;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
      v2 = v29;
    }
    v16 = *(_QWORD *)(v2 + 16);
    v15 = *(_QWORD *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v2 = v29;
    }
    *(_QWORD *)(v2 + 16) = v16 + 1;
    *(_DWORD *)(v2 + 4 * v16 + 32) = v14;
    v9 = *(_BYTE *)(v13 + 32);
    v10 = 1 << v9;
    if (v6 >= 1 << v9)
      goto LABEL_30;
    v8 = v24;
    v17 = *(_QWORD *)(v24 + 8 * v12);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_31;
    v3 = v13;
    v5 = v23;
    if (*(_DWORD *)(v13 + 36) != v23)
      goto LABEL_32;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v10 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v11 = v1;
    }
    else
    {
      v19 = v12 + 1;
      v20 = (v10 + 63) >> 6;
      v11 = v1;
      if (v12 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_25:
          v10 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v12)
          {
            v21 = *(_QWORD *)(v22 + 8 * v12++);
            if (v21)
            {
              v19 = v12 + 1;
              goto LABEL_25;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v10;
    if (v7 == v11)
      return v2;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  _BYTE v28[48];
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v29 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v9 = *(_BYTE *)(v3 + 32);
  v22 = v3 + 80;
  v23 = v5;
  v24 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_28;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_29;
    v13 = v3;
    outlined init with copy of (MetalDataType, Any?)?(*(_QWORD *)(v3 + 56) + 40 * v6, (uint64_t)v28);
    outlined init with take of (MetalDataType, Any?)?((uint64_t)v28, (uint64_t)v27);
    outlined init with copy of (MetalDataType, Any?)?((uint64_t)v27, (uint64_t)&v25);
    if (v25)
    {
      v14 = *(_DWORD *)(v25 + 60);
      swift_release();
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v26, &demangling cache variable for type metadata for Any?);
    }
    else
    {
      outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)&v25, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
      v14 = 0;
    }
    outlined destroy of (input: Input, fNode: MetalFunctionNode?)((uint64_t)v27, &demangling cache variable for type metadata for (MetalDataType, Any?)?);
    v2 = v29;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
      v2 = v29;
    }
    v16 = *(_QWORD *)(v2 + 16);
    v15 = *(_QWORD *)(v2 + 24);
    if (v16 >= v15 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v2 = v29;
    }
    *(_QWORD *)(v2 + 16) = v16 + 1;
    *(_DWORD *)(v2 + 4 * v16 + 32) = v14;
    v9 = *(_BYTE *)(v13 + 32);
    v10 = 1 << v9;
    if (v6 >= 1 << v9)
      goto LABEL_30;
    v8 = v24;
    v17 = *(_QWORD *)(v24 + 8 * v12);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_31;
    v3 = v13;
    v5 = v23;
    if (*(_DWORD *)(v13 + 36) != v23)
      goto LABEL_32;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v10 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v11 = v1;
    }
    else
    {
      v19 = v12 + 1;
      v20 = (v10 + 63) >> 6;
      v11 = v1;
      if (v12 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_25:
          v10 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v12)
          {
            v21 = *(_QWORD *)(v22 + 8 * v12++);
            if (v21)
            {
              v19 = v12 + 1;
              goto LABEL_25;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v10;
    if (v7 == v11)
      return v2;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t *MetalDataType.sampler.unsafeMutableAddressor()
{
  if (one-time initialization token for sampler != -1)
    swift_once();
  return &static MetalDataType.sampler;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v4 = (_OWORD *)(a1 + 40);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v10 = *v4;
      v7 = *(_QWORD *)(v11 + 16);
      v6 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v11 + 16) = v7 + 1;
      v8 = v11 + 48 * v7;
      *(_QWORD *)(v8 + 72) = v3;
      v4 = (_OWORD *)((char *)v4 + 24);
      *(_QWORD *)(v8 + 32) = v5;
      *(_OWORD *)(v8 + 40) = v10;
      *(_QWORD *)(v8 + 56) = MEMORY[0x24BEE4AF8];
      *(_BYTE *)(v8 + 64) = 1;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t *MetalDataType.void.unsafeMutableAddressor()
{
  if (one-time initialization token for void != -1)
    swift_once();
  return &static MetalDataType.void;
}

uint64_t *MetalDataType.texture2d_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_float != -1)
    swift_once();
  return &static MetalDataType.texture2d_float;
}

uint64_t *MetalDataType.texture2d_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_half != -1)
    swift_once();
  return &static MetalDataType.texture2d_half;
}

uint64_t *MetalDataType.texture2d_int.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_int != -1)
    swift_once();
  return &static MetalDataType.texture2d_int;
}

uint64_t *MetalDataType.texture2darray_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_float != -1)
    swift_once();
  return &static MetalDataType.texture2darray_float;
}

uint64_t *MetalDataType.texture2darray_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_half != -1)
    swift_once();
  return &static MetalDataType.texture2darray_half;
}

uint64_t *MetalDataType.texture2darray_int.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_int != -1)
    swift_once();
  return &static MetalDataType.texture2darray_int;
}

uint64_t *MetalDataType.texturecube_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecube_float != -1)
    swift_once();
  return &static MetalDataType.texturecube_float;
}

uint64_t *MetalDataType.texturecube_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texturecube_half != -1)
    swift_once();
  return &static MetalDataType.texturecube_half;
}

uint64_t *MetalDataType.texture3d_float.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_float != -1)
    swift_once();
  return &static MetalDataType.texture3d_float;
}

uint64_t *MetalDataType.texture3d_half.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_half != -1)
    swift_once();
  return &static MetalDataType.texture3d_half;
}

uint64_t *MetalDataType.texture3d_int.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_int != -1)
    swift_once();
  return &static MetalDataType.texture3d_int;
}

Swift::String_optional __swiftcall MetalDataType.textureBaseTypeName()()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();
  uint64_t (*v16)();
  uint64_t (*v17)();
  uint64_t (*v18)();
  uint64_t (*v19)();
  char v20;
  uint64_t v21;
  void *v22;
  Swift::String_optional result;

  if (one-time initialization token for texture2d_int != -1)
    swift_once();
  v0 = 0xE900000000000064;
  v1 = 0x3265727574786574;
  v2 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2d_int + 128);
  swift_retain();
  LOBYTE(v2) = v2();
  swift_release();
  if ((v2 & 1) == 0)
  {
    if (one-time initialization token for texture2d_half != -1)
      swift_once();
    v3 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2d_half + 128);
    swift_retain();
    LOBYTE(v3) = v3();
    swift_release();
    if ((v3 & 1) == 0)
    {
      if (one-time initialization token for texture2d_uint != -1)
        swift_once();
      v4 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2d_uint + 128);
      swift_retain();
      LOBYTE(v4) = v4();
      swift_release();
      if ((v4 & 1) == 0)
      {
        if (one-time initialization token for texture2d_float != -1)
          swift_once();
        v5 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2d_float + 128);
        swift_retain();
        LOBYTE(v5) = v5();
        swift_release();
        if ((v5 & 1) == 0)
        {
          if (one-time initialization token for texture2d_short != -1)
            swift_once();
          v6 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2d_short + 128);
          swift_retain();
          LOBYTE(v6) = v6();
          swift_release();
          if ((v6 & 1) == 0)
          {
            if (one-time initialization token for texture2d_ushort != -1)
              swift_once();
            v7 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2d_ushort + 128);
            swift_retain();
            LOBYTE(v7) = v7();
            swift_release();
            if ((v7 & 1) == 0)
            {
              if (one-time initialization token for texture3d_int != -1)
                swift_once();
              v1 = 0x3365727574786574;
              v8 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture3d_int + 128);
              swift_retain();
              LOBYTE(v8) = v8();
              swift_release();
              if ((v8 & 1) == 0)
              {
                if (one-time initialization token for texture3d_half != -1)
                  swift_once();
                v9 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture3d_half + 128);
                swift_retain();
                LOBYTE(v9) = v9();
                swift_release();
                if ((v9 & 1) == 0)
                {
                  if (one-time initialization token for texture3d_uint != -1)
                    swift_once();
                  v10 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture3d_uint + 128);
                  swift_retain();
                  LOBYTE(v10) = v10();
                  swift_release();
                  if ((v10 & 1) == 0)
                  {
                    if (one-time initialization token for texture3d_float != -1)
                      swift_once();
                    v11 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture3d_float + 128);
                    swift_retain();
                    LOBYTE(v11) = v11();
                    swift_release();
                    if ((v11 & 1) == 0)
                    {
                      if (one-time initialization token for texture3d_short != -1)
                        swift_once();
                      v12 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture3d_short + 128);
                      swift_retain();
                      LOBYTE(v12) = v12();
                      swift_release();
                      if ((v12 & 1) == 0)
                      {
                        if (one-time initialization token for texture3d_ushort != -1)
                          swift_once();
                        v13 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture3d_ushort + 128);
                        swift_retain();
                        LOBYTE(v13) = v13();
                        swift_release();
                        if ((v13 & 1) == 0)
                        {
                          if (one-time initialization token for texturecube_half != -1)
                            swift_once();
                          v0 = 0xEB00000000656275;
                          v1 = 0x6365727574786574;
                          v14 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texturecube_half + 128);
                          swift_retain();
                          LOBYTE(v14) = v14();
                          swift_release();
                          if ((v14 & 1) == 0)
                          {
                            if (one-time initialization token for texturecube_float != -1)
                              swift_once();
                            v15 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texturecube_float + 128);
                            swift_retain();
                            LOBYTE(v15) = v15();
                            swift_release();
                            if ((v15 & 1) == 0)
                            {
                              if (one-time initialization token for depth2d_half != -1)
                                swift_once();
                              v1 = 0x64326874706564;
                              v16 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.depth2d_half + 128);
                              swift_retain();
                              LOBYTE(v16) = v16();
                              swift_release();
                              if ((v16 & 1) != 0)
                                goto LABEL_49;
                              if (one-time initialization token for depth2d_float != -1)
                                swift_once();
                              v17 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.depth2d_float + 128);
                              swift_retain();
                              LOBYTE(v17) = v17();
                              swift_release();
                              if ((v17 & 1) != 0)
                              {
LABEL_49:
                                v0 = 0xE700000000000000;
                              }
                              else
                              {
                                if (one-time initialization token for texture2darray_half != -1)
                                  swift_once();
                                v18 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2darray_half
                                                                 + 128);
                                swift_retain();
                                LOBYTE(v18) = v18();
                                swift_release();
                                if ((v18 & 1) != 0)
                                  goto LABEL_56;
                                if (one-time initialization token for texture2darray_float != -1)
                                  swift_once();
                                v19 = *(uint64_t (**)())(*(_QWORD *)static MetalDataType.texture2darray_float
                                                                 + 128);
                                swift_retain();
                                v20 = v19();
                                swift_release();
                                if ((v20 & 1) != 0)
                                {
LABEL_56:
                                  v0 = 0xEE00796172726164;
                                  v1 = 0x3265727574786574;
                                }
                                else
                                {
                                  v1 = 0;
                                  v0 = 0;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v21 = v1;
  v22 = (void *)v0;
  result.value._object = v22;
  result.value._countAndFlagsBits = v21;
  return result;
}

uint64_t MetalDataType.metalTypeName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalDataType.note.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalDataType.size.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56);
}

uint64_t MetalDataType.alignment.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60);
}

uint64_t MetalDataType.isConst.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t MetalDataType.isConst.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 64) = a1;
  return result;
}

uint64_t (*MetalDataType.isConst.modify())()
{
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

unint64_t specialized Sequence<>.max()(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint32x4_t v5;
  uint32x4_t *v6;
  unint64_t v7;
  uint32x4_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v2 = 0;
    return v2 | ((unint64_t)(v1 == 0) << 32);
  }
  v2 = *(_DWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 9)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
      v5 = (uint32x4_t)vdupq_n_s32(v2);
      v6 = (uint32x4_t *)(a1 + 52);
      v7 = v3 & 0xFFFFFFFFFFFFFFF8;
      v8 = v5;
      do
      {
        v5 = vmaxq_u32(v5, v6[-1]);
        v8 = vmaxq_u32(v8, *v6);
        v6 += 2;
        v7 -= 8;
      }
      while (v7);
      v2 = vmaxvq_u32(vmaxq_u32(v5, v8));
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFF8))
        return v2 | ((unint64_t)(v1 == 0) << 32);
    }
    else
    {
      v4 = 1;
    }
    v9 = v1 - v4;
    v10 = (unsigned int *)(a1 + 4 * v4 + 32);
    do
    {
      v12 = *v10++;
      v11 = v12;
      if (v2 <= v12)
        v2 = v11;
      --v9;
    }
    while (v9);
  }
  return v2 | ((unint64_t)(v1 == 0) << 32);
}

_QWORD *MetalDataType.offsetList.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v11;
  _QWORD *v12;
  _QWORD v13[4];
  char v14;
  uint64_t v15;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v11 = 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (_QWORD *)(v1 + 72);
    do
    {
      v4 = *(v3 - 5);
      v5 = *(v3 - 4);
      v6 = *(v3 - 3);
      v7 = *(v3 - 2);
      v8 = *((_BYTE *)v3 - 8);
      v9 = *v3;
      v3 += 6;
      v13[0] = v4;
      v13[1] = v5;
      v13[2] = v6;
      v13[3] = v7;
      v14 = v8;
      v15 = v9;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      specialized closure #1 in calculateOffsets(for:)((uint64_t)v13, &v11, &v12);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
}

uint64_t MetalDataType.dereferenced.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.qualifiedName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetalDataType.isEqual(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  result = swift_dynamicCastClass();
  if (result)
  {
    if (v1 == *(_QWORD *)(result + 24) && v2 == *(_QWORD *)(result + 32))
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

uint64_t MetalDataType.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x283A6C6174656DLL;
}

uint64_t MetalDataType.asMetalDataType.getter()
{
  return swift_retain();
}

void MetalDataType.__allocating_init(properties:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MetalDataType.init(properties:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t MetalDataType.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalDataType.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MetalDataType()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

uint64_t MetalDataType.MTLTextureType.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t);
  uint64_t (*v14)(uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t);
  uint64_t (*v17)(uint64_t);
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(uint64_t);
  uint64_t (*v21)(uint64_t);
  char v22;

  if (one-time initialization token for texture2d_int != -1)
    swift_once();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_int + 128);
  swift_retain();
  LOBYTE(v1) = v1(v0);
  swift_release();
  if ((v1 & 1) != 0)
    return 2;
  if (one-time initialization token for texture2d_half != -1)
    swift_once();
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_half + 128);
  swift_retain();
  LOBYTE(v2) = v2(v0);
  swift_release();
  if ((v2 & 1) != 0)
    return 2;
  if (one-time initialization token for texture2d_uint != -1)
    swift_once();
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_uint + 128);
  swift_retain();
  LOBYTE(v3) = v3(v0);
  swift_release();
  if ((v3 & 1) != 0)
    return 2;
  if (one-time initialization token for texture2d_float != -1)
    swift_once();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_float + 128);
  swift_retain();
  LOBYTE(v4) = v4(v0);
  swift_release();
  if ((v4 & 1) != 0)
    return 2;
  if (one-time initialization token for texture2d_short != -1)
    swift_once();
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_short + 128);
  swift_retain();
  LOBYTE(v5) = v5(v0);
  swift_release();
  if ((v5 & 1) != 0)
    return 2;
  if (one-time initialization token for texture2d_ushort != -1)
    swift_once();
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_ushort + 128);
  swift_retain();
  LOBYTE(v6) = v6(v0);
  swift_release();
  if ((v6 & 1) != 0)
    return 2;
  if (one-time initialization token for texture3d_int != -1)
    swift_once();
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_int + 128);
  swift_retain();
  LOBYTE(v8) = v8(v0);
  swift_release();
  if ((v8 & 1) != 0)
    return 7;
  if (one-time initialization token for texture3d_half != -1)
    swift_once();
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_half + 128);
  swift_retain();
  LOBYTE(v9) = v9(v0);
  swift_release();
  if ((v9 & 1) != 0)
    return 7;
  if (one-time initialization token for texture3d_uint != -1)
    swift_once();
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_uint + 128);
  swift_retain();
  LOBYTE(v10) = v10(v0);
  swift_release();
  if ((v10 & 1) != 0)
    return 7;
  if (one-time initialization token for texture3d_float != -1)
    swift_once();
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_float + 128);
  swift_retain();
  LOBYTE(v11) = v11(v0);
  swift_release();
  if ((v11 & 1) != 0)
    return 7;
  if (one-time initialization token for texture3d_short != -1)
    swift_once();
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_short + 128);
  swift_retain();
  LOBYTE(v12) = v12(v0);
  swift_release();
  if ((v12 & 1) != 0)
    return 7;
  if (one-time initialization token for texture3d_ushort != -1)
    swift_once();
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_ushort + 128);
  swift_retain();
  LOBYTE(v13) = v13(v0);
  swift_release();
  if ((v13 & 1) != 0)
    return 7;
  if (one-time initialization token for texture2darray_int != -1)
    swift_once();
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_int + 128);
  swift_retain();
  LOBYTE(v14) = v14(v0);
  swift_release();
  if ((v14 & 1) != 0)
    return 3;
  if (one-time initialization token for texture2darray_half != -1)
    swift_once();
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_half + 128);
  swift_retain();
  LOBYTE(v15) = v15(v0);
  swift_release();
  if ((v15 & 1) != 0)
    return 3;
  if (one-time initialization token for texture2darray_uint != -1)
    swift_once();
  v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_uint + 128);
  swift_retain();
  LOBYTE(v16) = v16(v0);
  swift_release();
  if ((v16 & 1) != 0)
    return 3;
  if (one-time initialization token for texture2darray_float != -1)
    swift_once();
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_float + 128);
  swift_retain();
  LOBYTE(v17) = v17(v0);
  swift_release();
  if ((v17 & 1) != 0)
    return 3;
  if (one-time initialization token for texture2darray_short != -1)
    swift_once();
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_short + 128);
  swift_retain();
  LOBYTE(v18) = v18(v0);
  swift_release();
  if ((v18 & 1) != 0)
    return 3;
  if (one-time initialization token for texture2darray_ushort != -1)
    swift_once();
  v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_ushort + 128);
  swift_retain();
  LOBYTE(v19) = v19(v0);
  swift_release();
  if ((v19 & 1) != 0)
    return 3;
  if (one-time initialization token for texturecube_half != -1)
    swift_once();
  v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texturecube_half + 128);
  swift_retain();
  LOBYTE(v20) = v20(v0);
  swift_release();
  if ((v20 & 1) != 0)
    return 5;
  if (one-time initialization token for texturecube_float != -1)
    swift_once();
  v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texturecube_float + 128);
  swift_retain();
  v22 = v21(v0);
  swift_release();
  if ((v22 & 1) != 0)
    return 5;
  else
    return 0;
}

uint64_t *MetalDataType.texture2d_uint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_uint != -1)
    swift_once();
  return &static MetalDataType.texture2d_uint;
}

uint64_t *MetalDataType.texture2d_short.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_short != -1)
    swift_once();
  return &static MetalDataType.texture2d_short;
}

uint64_t *MetalDataType.texture2d_ushort.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2d_ushort != -1)
    swift_once();
  return &static MetalDataType.texture2d_ushort;
}

uint64_t *MetalDataType.texture3d_uint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_uint != -1)
    swift_once();
  return &static MetalDataType.texture3d_uint;
}

uint64_t *MetalDataType.texture3d_short.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_short != -1)
    swift_once();
  return &static MetalDataType.texture3d_short;
}

uint64_t *MetalDataType.texture3d_ushort.unsafeMutableAddressor()
{
  if (one-time initialization token for texture3d_ushort != -1)
    swift_once();
  return &static MetalDataType.texture3d_ushort;
}

uint64_t *MetalDataType.texture2darray_uint.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_uint != -1)
    swift_once();
  return &static MetalDataType.texture2darray_uint;
}

uint64_t *MetalDataType.texture2darray_short.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_short != -1)
    swift_once();
  return &static MetalDataType.texture2darray_short;
}

uint64_t *MetalDataType.texture2darray_ushort.unsafeMutableAddressor()
{
  if (one-time initialization token for texture2darray_ushort != -1)
    swift_once();
  return &static MetalDataType.texture2darray_ushort;
}

uint64_t MetalDataType.textureElementType.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  char v10;

  if (one-time initialization token for texture2d_half != -1)
    swift_once();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_half + 128);
  swift_retain();
  LOBYTE(v1) = v1(v0);
  swift_release();
  if ((v1 & 1) != 0)
    goto LABEL_13;
  if (one-time initialization token for texture3d_half != -1)
    swift_once();
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_half + 128);
  swift_retain();
  LOBYTE(v2) = v2(v0);
  swift_release();
  if ((v2 & 1) != 0)
    goto LABEL_13;
  if (one-time initialization token for texture2darray_half != -1)
    swift_once();
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_half + 128);
  swift_retain();
  LOBYTE(v3) = v3(v0);
  swift_release();
  if ((v3 & 1) != 0)
    goto LABEL_13;
  if (one-time initialization token for texturecube_half != -1)
    swift_once();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texturecube_half + 128);
  swift_retain();
  LOBYTE(v4) = v4(v0);
  swift_release();
  if ((v4 & 1) != 0)
  {
LABEL_13:
    if (one-time initialization token for half == -1)
      return swift_retain();
LABEL_30:
    swift_once();
    return swift_retain();
  }
  if (one-time initialization token for texture2d_float != -1)
    swift_once();
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_float + 128);
  swift_retain();
  LOBYTE(v6) = v6(v0);
  swift_release();
  if ((v6 & 1) != 0)
    goto LABEL_27;
  if (one-time initialization token for texture3d_float != -1)
    swift_once();
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_float + 128);
  swift_retain();
  LOBYTE(v7) = v7(v0);
  swift_release();
  if ((v7 & 1) != 0)
    goto LABEL_27;
  if (one-time initialization token for texture2darray_float != -1)
    swift_once();
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_float + 128);
  swift_retain();
  LOBYTE(v8) = v8(v0);
  swift_release();
  if ((v8 & 1) != 0)
    goto LABEL_27;
  if (one-time initialization token for texturecube_float != -1)
    swift_once();
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texturecube_float + 128);
  swift_retain();
  v10 = v9(v0);
  swift_release();
  if ((v10 & 1) != 0)
  {
LABEL_27:
    if (one-time initialization token for float == -1)
      return swift_retain();
    goto LABEL_30;
  }
  return 0;
}

uint64_t *MetalDataType.half.unsafeMutableAddressor()
{
  if (one-time initialization token for half != -1)
    swift_once();
  return &static MetalDataType.half;
}

uint64_t *MetalDataType.float.unsafeMutableAddressor()
{
  if (one-time initialization token for float != -1)
    swift_once();
  return &static MetalDataType.float;
}

uint64_t MetalDataType.MTLDataType.getter()
{
  uint64_t v0;
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t);
  uint64_t (*v14)(uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t);
  uint64_t (*v17)(uint64_t);
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(uint64_t);
  uint64_t (*v21)(uint64_t);
  uint64_t (*v22)(uint64_t);

  if (one-time initialization token for float != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 3;
  if (one-time initialization token for float2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 4;
  if (one-time initialization token for float3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 5;
  if (one-time initialization token for float4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 6;
  if (one-time initialization token for float2x2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 7;
  if (one-time initialization token for float2x3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 8;
  if (one-time initialization token for float2x4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 9;
  if (one-time initialization token for float3x2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 10;
  if (one-time initialization token for float3x3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 11;
  if (one-time initialization token for float3x4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 12;
  if (one-time initialization token for float4x2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 13;
  if (one-time initialization token for float4x3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 14;
  if (one-time initialization token for float4x4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 15;
  if (one-time initialization token for half != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 16;
  if (one-time initialization token for half2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 17;
  if (one-time initialization token for half3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 18;
  if (one-time initialization token for half4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 19;
  if (one-time initialization token for color3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 5;
  if (one-time initialization token for color4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 6;
  if (one-time initialization token for int32 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 29;
  if (one-time initialization token for int2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 30;
  if (one-time initialization token for int3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 31;
  if (one-time initialization token for int4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 32;
  if (one-time initialization token for uint32 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 33;
  if (one-time initialization token for uint2 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 34;
  if (one-time initialization token for uint3 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 35;
  if (one-time initialization token for uint4 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 36;
  if (one-time initialization token for int16 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 37;
  if (one-time initialization token for uint16 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 41;
  if (one-time initialization token for int8 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 45;
  if (one-time initialization token for uint8 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 49;
  if (one-time initialization token for BOOL != -1)
    swift_once();
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.BOOL + 128);
  swift_retain();
  LOBYTE(v2) = v2(v0);
  swift_release();
  if ((v2 & 1) != 0)
    return 53;
  if (one-time initialization token for texture2d_int != -1)
    swift_once();
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_int + 128);
  swift_retain();
  LOBYTE(v3) = v3(v0);
  swift_release();
  if ((v3 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2d_uint != -1)
    swift_once();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_uint + 128);
  swift_retain();
  LOBYTE(v4) = v4(v0);
  swift_release();
  if ((v4 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2d_short != -1)
    swift_once();
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_short + 128);
  swift_retain();
  LOBYTE(v5) = v5(v0);
  swift_release();
  if ((v5 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2d_ushort != -1)
    swift_once();
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_ushort + 128);
  swift_retain();
  LOBYTE(v6) = v6(v0);
  swift_release();
  if ((v6 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2d_half != -1)
    swift_once();
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_half + 128);
  swift_retain();
  LOBYTE(v7) = v7(v0);
  swift_release();
  if ((v7 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2d_float != -1)
    swift_once();
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2d_float + 128);
  swift_retain();
  LOBYTE(v8) = v8(v0);
  swift_release();
  if ((v8 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2darray_int != -1)
    swift_once();
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_int + 128);
  swift_retain();
  LOBYTE(v9) = v9(v0);
  swift_release();
  if ((v9 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2darray_uint != -1)
    swift_once();
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_uint + 128);
  swift_retain();
  LOBYTE(v10) = v10(v0);
  swift_release();
  if ((v10 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2darray_short != -1)
    swift_once();
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_short + 128);
  swift_retain();
  LOBYTE(v11) = v11(v0);
  swift_release();
  if ((v11 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2darray_ushort != -1)
    swift_once();
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_ushort + 128);
  swift_retain();
  LOBYTE(v12) = v12(v0);
  swift_release();
  if ((v12 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2darray_half != -1)
    swift_once();
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_half + 128);
  swift_retain();
  LOBYTE(v13) = v13(v0);
  swift_release();
  if ((v13 & 1) != 0)
    return 58;
  if (one-time initialization token for texture2darray_float != -1)
    swift_once();
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture2darray_float + 128);
  swift_retain();
  LOBYTE(v14) = v14(v0);
  swift_release();
  if ((v14 & 1) != 0)
    return 58;
  if (one-time initialization token for texture3d_int != -1)
    swift_once();
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_int + 128);
  swift_retain();
  LOBYTE(v15) = v15(v0);
  swift_release();
  if ((v15 & 1) != 0)
    return 58;
  if (one-time initialization token for texture3d_uint != -1)
    swift_once();
  v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_uint + 128);
  swift_retain();
  LOBYTE(v16) = v16(v0);
  swift_release();
  if ((v16 & 1) != 0)
    return 58;
  if (one-time initialization token for texture3d_short != -1)
    swift_once();
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_short + 128);
  swift_retain();
  LOBYTE(v17) = v17(v0);
  swift_release();
  if ((v17 & 1) != 0)
    return 58;
  if (one-time initialization token for texture3d_ushort != -1)
    swift_once();
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_ushort + 128);
  swift_retain();
  LOBYTE(v18) = v18(v0);
  swift_release();
  if ((v18 & 1) != 0)
    return 58;
  if (one-time initialization token for texture3d_half != -1)
    swift_once();
  v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_half + 128);
  swift_retain();
  LOBYTE(v19) = v19(v0);
  swift_release();
  if ((v19 & 1) != 0)
    return 58;
  if (one-time initialization token for texture3d_float != -1)
    swift_once();
  v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texture3d_float + 128);
  swift_retain();
  LOBYTE(v20) = v20(v0);
  swift_release();
  if ((v20 & 1) != 0)
    return 58;
  if (one-time initialization token for texturecube_half != -1)
    swift_once();
  v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texturecube_half + 128);
  swift_retain();
  LOBYTE(v21) = v21(v0);
  swift_release();
  if ((v21 & 1) != 0)
    return 58;
  if (one-time initialization token for texturecube_float != -1)
    swift_once();
  v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)static MetalDataType.texturecube_float + 128);
  swift_retain();
  LOBYTE(v22) = v22(v0);
  swift_release();
  if ((v22 & 1) != 0)
    return 58;
  if (one-time initialization token for int64 != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
    return 81;
  else
    return 0;
}

uint64_t *MetalDataType.float2.unsafeMutableAddressor()
{
  if (one-time initialization token for float2 != -1)
    swift_once();
  return &static MetalDataType.float2;
}

uint64_t *MetalDataType.float3.unsafeMutableAddressor()
{
  if (one-time initialization token for float3 != -1)
    swift_once();
  return &static MetalDataType.float3;
}

uint64_t *MetalDataType.float4.unsafeMutableAddressor()
{
  if (one-time initialization token for float4 != -1)
    swift_once();
  return &static MetalDataType.float4;
}

uint64_t *MetalDataType.float2x2.unsafeMutableAddressor()
{
  if (one-time initialization token for float2x2 != -1)
    swift_once();
  return &static MetalDataType.float2x2;
}

uint64_t *MetalDataType.float2x3.unsafeMutableAddressor()
{
  if (one-time initialization token for float2x3 != -1)
    swift_once();
  return &static MetalDataType.float2x3;
}

uint64_t *MetalDataType.float2x4.unsafeMutableAddressor()
{
  if (one-time initialization token for float2x4 != -1)
    swift_once();
  return &static MetalDataType.float2x4;
}

uint64_t *MetalDataType.float3x2.unsafeMutableAddressor()
{
  if (one-time initialization token for float3x2 != -1)
    swift_once();
  return &static MetalDataType.float3x2;
}

uint64_t *MetalDataType.float3x3.unsafeMutableAddressor()
{
  if (one-time initialization token for float3x3 != -1)
    swift_once();
  return &static MetalDataType.float3x3;
}

uint64_t *MetalDataType.float3x4.unsafeMutableAddressor()
{
  if (one-time initialization token for float3x4 != -1)
    swift_once();
  return &static MetalDataType.float3x4;
}

uint64_t *MetalDataType.float4x2.unsafeMutableAddressor()
{
  if (one-time initialization token for float4x2 != -1)
    swift_once();
  return &static MetalDataType.float4x2;
}

uint64_t *MetalDataType.float4x3.unsafeMutableAddressor()
{
  if (one-time initialization token for float4x3 != -1)
    swift_once();
  return &static MetalDataType.float4x3;
}

uint64_t *MetalDataType.float4x4.unsafeMutableAddressor()
{
  if (one-time initialization token for float4x4 != -1)
    swift_once();
  return &static MetalDataType.float4x4;
}

uint64_t *MetalDataType.half2.unsafeMutableAddressor()
{
  if (one-time initialization token for half2 != -1)
    swift_once();
  return &static MetalDataType.half2;
}

uint64_t *MetalDataType.half3.unsafeMutableAddressor()
{
  if (one-time initialization token for half3 != -1)
    swift_once();
  return &static MetalDataType.half3;
}

uint64_t *MetalDataType.half4.unsafeMutableAddressor()
{
  if (one-time initialization token for half4 != -1)
    swift_once();
  return &static MetalDataType.half4;
}

uint64_t *MetalDataType.color3.unsafeMutableAddressor()
{
  if (one-time initialization token for color3 != -1)
    swift_once();
  return &static MetalDataType.color3;
}

uint64_t *MetalDataType.color4.unsafeMutableAddressor()
{
  if (one-time initialization token for color4 != -1)
    swift_once();
  return &static MetalDataType.color4;
}

uint64_t static MetalDataType.int.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int32);
}

uint64_t *MetalDataType.int2.unsafeMutableAddressor()
{
  if (one-time initialization token for int2 != -1)
    swift_once();
  return &static MetalDataType.int2;
}

uint64_t *MetalDataType.int3.unsafeMutableAddressor()
{
  if (one-time initialization token for int3 != -1)
    swift_once();
  return &static MetalDataType.int3;
}

uint64_t *MetalDataType.int4.unsafeMutableAddressor()
{
  if (one-time initialization token for int4 != -1)
    swift_once();
  return &static MetalDataType.int4;
}

uint64_t static MetalDataType.uint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint32);
}

uint64_t *MetalDataType.uint2.unsafeMutableAddressor()
{
  if (one-time initialization token for uint2 != -1)
    swift_once();
  return &static MetalDataType.uint2;
}

uint64_t *MetalDataType.uint3.unsafeMutableAddressor()
{
  if (one-time initialization token for uint3 != -1)
    swift_once();
  return &static MetalDataType.uint3;
}

uint64_t *MetalDataType.uint4.unsafeMutableAddressor()
{
  if (one-time initialization token for uint4 != -1)
    swift_once();
  return &static MetalDataType.uint4;
}

uint64_t static MetalDataType.short.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int16);
}

uint64_t static MetalDataType.ushort.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint16);
}

uint64_t static MetalDataType.char.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int8);
}

uint64_t static MetalDataType.uchar.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint8);
}

uint64_t *MetalDataType.BOOL.unsafeMutableAddressor()
{
  if (one-time initialization token for BOOL != -1)
    swift_once();
  return &static MetalDataType.BOOL;
}

uint64_t static MetalDataType.long.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int64);
}

uint64_t MetalDataType.Struct.__allocating_init(note:typeName:fieldSpecs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySS5label_11ShaderGraph13MetalDataTypeC4typetGG_AI0jK8PropertyVs5NeverOTg508_sSiSS11g7Graph13ijk7CAA0dE8m48VIgyggo_Si6offset_SS5label_AC4typet7elementtAEs5n98OIegnrzr_TR04_s11a7Graph13cde69C6StructC4note8typeName10fieldSpecsAESSSg_S2S5label_AC0H0tdtcfcAA0dT32F19VSi_SSAJ_AcKttXEfU_Tf3nnnpf_nTf1cn_n(a5);
  swift_bridgeObjectRelease();
  v10 = swift_allocObject();
  v11 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, 0x100000000, 0x100000000, 0, v9, v10);
  swift_release();
  return v11;
}

uint64_t MetalDataType.Struct.__allocating_init(note:typeName:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = swift_allocObject();
  v11 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, 0x100000000, 0x100000000, 0, a5, v10);
  swift_release();
  return v11;
}

uint64_t MetalDataType.Struct.init(note:typeName:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;

  v5 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, 0x100000000, 0x100000000, 0, a5, v7);
  swift_release();
  return v5;
}

uint64_t MetalDataType.Struct.getElementFunctionName(for:)()
{
  return specialized MetalDataType.Struct.getElementFunctionName(for:)();
}

uint64_t MetalDataType.Vector.componentType.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.Vector.componentCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t MetalDataType.Vector.__allocating_init(typeName:componentType:componentCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;

  swift_allocObject();
  v12 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v12;
}

uint64_t MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;

  v6 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t MetalDataType.Vector.__ivar_destroyer()
{
  return swift_release();
}

uint64_t MetalDataType.Vector.deinit()
{
  return MetalDataType.Vector.deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t MetalDataType.Vector.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t MetalDataType.Number.__allocating_init(note:typeName:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a1;
  *(_QWORD *)(result + 48) = a2;
  *(_BYTE *)(result + 64) = 0;
  *(_DWORD *)(result + 56) = a5;
  *(_DWORD *)(result + 60) = a6;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = a3;
  return result;
}

uint64_t MetalDataType.Number.init(note:typeName:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_BYTE *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 56) = a5;
  *(_DWORD *)(v6 + 60) = a6;
  *(_QWORD *)(v6 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a3;
  return v6;
}

uint64_t MetalDataType.Struct.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalDataType.Struct.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.Enum.types.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalDataType.Enum.__allocating_init(note:typeName:types:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint32x4_t v17;
  uint32x4_t *v18;
  unint64_t v19;
  uint32x4_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  uint32x4_t v31;
  uint32x4_t *v32;
  unint64_t v33;
  uint32x4_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 72) = a5;
  v11 = swift_bridgeObjectRetain();
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v11);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_13;
  }
  v14 = *(_DWORD *)(v12 + 32);
  v15 = v13 - 1;
  if (v13 == 1)
    goto LABEL_13;
  if (v13 >= 9)
  {
    v16 = v15 & 0xFFFFFFFFFFFFFFF8 | 1;
    v17 = (uint32x4_t)vdupq_n_s32(v14);
    v18 = (uint32x4_t *)(v12 + 52);
    v19 = v15 & 0xFFFFFFFFFFFFFFF8;
    v20 = v17;
    do
    {
      v17 = vmaxq_u32(v17, v18[-1]);
      v20 = vmaxq_u32(v20, *v18);
      v18 += 2;
      v19 -= 8;
    }
    while (v19);
    v14 = vmaxvq_u32(vmaxq_u32(v17, v20));
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
  else
  {
    v16 = 1;
  }
  v21 = v13 - v16;
  v22 = (unsigned int *)(v12 + 4 * v16 + 32);
  do
  {
    v24 = *v22++;
    v23 = v24;
    if (v14 <= v24)
      v14 = v23;
    --v21;
  }
  while (v21);
LABEL_13:
  v25 = v13 == 0;
  swift_bridgeObjectRelease();
  v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(a5);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
  {
    v28 = 0;
    goto LABEL_25;
  }
  v28 = *(_DWORD *)(v26 + 32);
  v29 = v27 - 1;
  if (v27 != 1)
  {
    if (v27 >= 9)
    {
      v30 = v29 & 0xFFFFFFFFFFFFFFF8 | 1;
      v31 = (uint32x4_t)vdupq_n_s32(v28);
      v32 = (uint32x4_t *)(v26 + 52);
      v33 = v29 & 0xFFFFFFFFFFFFFFF8;
      v34 = v31;
      do
      {
        v31 = vmaxq_u32(v31, v32[-1]);
        v34 = vmaxq_u32(v34, *v32);
        v32 += 2;
        v33 -= 8;
      }
      while (v33);
      v28 = vmaxvq_u32(vmaxq_u32(v31, v34));
      if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_25;
    }
    else
    {
      v30 = 1;
    }
    v35 = v27 - v30;
    v36 = (unsigned int *)(v26 + 4 * v30 + 32);
    do
    {
      v38 = *v36++;
      v37 = v38;
      if (v28 <= v38)
        v28 = v37;
      --v35;
    }
    while (v35);
  }
LABEL_25:
  v39 = v27 == 0;
  v40 = v28;
  swift_bridgeObjectRelease();
  v41 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, v14 | ((unint64_t)v25 << 32), v40 | ((unint64_t)v39 << 32), 0, MEMORY[0x24BEE4AF8], v10);
  swift_release();
  return v41;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint32x4_t v17;
  uint32x4_t *v18;
  unint64_t v19;
  uint32x4_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  uint32x4_t v31;
  uint32x4_t *v32;
  unint64_t v33;
  uint32x4_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;

  v9 = specialized _NativeDictionary.mapValues<A>(_:)(a5);
  swift_bridgeObjectRelease();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 72) = v9;
  v11 = swift_bridgeObjectRetain();
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v11);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_13;
  }
  v14 = *(_DWORD *)(v12 + 32);
  v15 = v13 - 1;
  if (v13 == 1)
    goto LABEL_13;
  if (v13 >= 9)
  {
    v16 = v15 & 0xFFFFFFFFFFFFFFF8 | 1;
    v17 = (uint32x4_t)vdupq_n_s32(v14);
    v18 = (uint32x4_t *)(v12 + 52);
    v19 = v15 & 0xFFFFFFFFFFFFFFF8;
    v20 = v17;
    do
    {
      v17 = vmaxq_u32(v17, v18[-1]);
      v20 = vmaxq_u32(v20, *v18);
      v18 += 2;
      v19 -= 8;
    }
    while (v19);
    v14 = vmaxvq_u32(vmaxq_u32(v17, v20));
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
  else
  {
    v16 = 1;
  }
  v21 = v13 - v16;
  v22 = (unsigned int *)(v12 + 4 * v16 + 32);
  do
  {
    v24 = *v22++;
    v23 = v24;
    if (v14 <= v24)
      v14 = v23;
    --v21;
  }
  while (v21);
LABEL_13:
  v25 = v13 == 0;
  swift_bridgeObjectRelease();
  v26 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(v9);
  swift_release();
  v27 = *(_QWORD *)(v26 + 16);
  if (!v27)
  {
    v28 = 0;
    goto LABEL_25;
  }
  v28 = *(_DWORD *)(v26 + 32);
  v29 = v27 - 1;
  if (v27 != 1)
  {
    if (v27 >= 9)
    {
      v30 = v29 & 0xFFFFFFFFFFFFFFF8 | 1;
      v31 = (uint32x4_t)vdupq_n_s32(v28);
      v32 = (uint32x4_t *)(v26 + 52);
      v33 = v29 & 0xFFFFFFFFFFFFFFF8;
      v34 = v31;
      do
      {
        v31 = vmaxq_u32(v31, v32[-1]);
        v34 = vmaxq_u32(v34, *v32);
        v32 += 2;
        v33 -= 8;
      }
      while (v33);
      v28 = vmaxvq_u32(vmaxq_u32(v31, v34));
      if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_25;
    }
    else
    {
      v30 = 1;
    }
    v35 = v27 - v30;
    v36 = (unsigned int *)(v26 + 4 * v30 + 32);
    do
    {
      v38 = *v36++;
      v37 = v38;
      if (v28 <= v38)
        v28 = v37;
      --v35;
    }
    while (v35);
  }
LABEL_25:
  v39 = v27 == 0;
  v40 = v28;
  swift_bridgeObjectRelease();
  v41 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, v14 | ((unint64_t)v25 << 32), v40 | ((unint64_t)v39 << 32), 0, MEMORY[0x24BEE4AF8], v10);
  swift_release();
  return v41;
}

uint64_t MetalDataType.Enum.init(note:typeName:types:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint32x4_t v16;
  uint32x4_t *v17;
  unint64_t v18;
  uint32x4_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint32x4_t v30;
  uint32x4_t *v31;
  unint64_t v32;
  uint32x4_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v5 + 72) = a5;
  swift_bridgeObjectRetain();
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(a5);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v13 = *(_DWORD *)(v11 + 32);
  v14 = v12 - 1;
  if (v12 == 1)
    goto LABEL_13;
  if (v12 >= 9)
  {
    v15 = v14 & 0xFFFFFFFFFFFFFFF8 | 1;
    v16 = (uint32x4_t)vdupq_n_s32(v13);
    v17 = (uint32x4_t *)(v11 + 52);
    v18 = v14 & 0xFFFFFFFFFFFFFFF8;
    v19 = v16;
    do
    {
      v16 = vmaxq_u32(v16, v17[-1]);
      v19 = vmaxq_u32(v19, *v17);
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    v13 = vmaxvq_u32(vmaxq_u32(v16, v19));
    if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
  else
  {
    v15 = 1;
  }
  v20 = v12 - v15;
  v21 = (unsigned int *)(v11 + 4 * v15 + 32);
  do
  {
    v23 = *v21++;
    v22 = v23;
    if (v13 <= v23)
      v13 = v22;
    --v20;
  }
  while (v20);
LABEL_13:
  v24 = v12 == 0;
  swift_bridgeObjectRelease();
  v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(a5);
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v27 = 0;
    goto LABEL_25;
  }
  v27 = *(_DWORD *)(v25 + 32);
  v28 = v26 - 1;
  if (v26 != 1)
  {
    if (v26 >= 9)
    {
      v29 = v28 & 0xFFFFFFFFFFFFFFF8 | 1;
      v30 = (uint32x4_t)vdupq_n_s32(v27);
      v31 = (uint32x4_t *)(v25 + 52);
      v32 = v28 & 0xFFFFFFFFFFFFFFF8;
      v33 = v30;
      do
      {
        v30 = vmaxq_u32(v30, v31[-1]);
        v33 = vmaxq_u32(v33, *v31);
        v31 += 2;
        v32 -= 8;
      }
      while (v32);
      v27 = vmaxvq_u32(vmaxq_u32(v30, v33));
      if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_25;
    }
    else
    {
      v29 = 1;
    }
    v34 = v26 - v29;
    v35 = (unsigned int *)(v25 + 4 * v29 + 32);
    do
    {
      v37 = *v35++;
      v36 = v37;
      if (v27 <= v37)
        v27 = v36;
      --v34;
    }
    while (v34);
  }
LABEL_25:
  v38 = v26 == 0;
  v39 = v27;
  swift_bridgeObjectRelease();
  v40 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, a3, a4, v13 | ((unint64_t)v24 << 32), v39 | ((unint64_t)v38 << 32), 0, MEMORY[0x24BEE4AF8], v5);
  swift_release();
  return v40;
}

uint64_t MetalDataType.Enum.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.Enum.deinit()
{
  return MetalDataType.Vector.deinit((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t MetalDataType.Enum.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t MetalDataType.Pointer.addressSpace.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t MetalDataType.Pointer.dereferenced.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized MetalDataType.Pointer.init(to:isConst:addressSpace:));
}

uint64_t MetalDataType.Pointer.init(to:isConst:addressSpace:)(_QWORD *a1, char a2, char a3)
{
  uint64_t v3;

  v3 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t MetalDataType.Pointer.deinit()
{
  return MetalDataType.Vector.deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t MetalDataType.Pointer.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t MetalDataType.Matrix.rowCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t MetalDataType.Matrix.rowType.getter()
{
  return swift_retain();
}

uint64_t MetalDataType.Matrix.__allocating_init(typeName:vectorType:columnCount:rowCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;

  swift_allocObject();
  v14 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v14;
}

uint64_t MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;

  v7 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(a1, a2, a3, a4, a5, a6, a7);
  swift_release();
  return v7;
}

uint64_t MetalDataType.Matrix.__ivar_destroyer()
{
  return swift_release();
}

uint64_t MetalDataType.Matrix.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t MetalDataType.Matrix.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.Function.argumentTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MetalDataType.Function.__allocating_init(resultType:argumentTypes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t MetalDataType.Function.init(resultType:argumentTypes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = specialized MetalDataType.Function.init(resultType:argumentTypes:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t MetalDataType.Function.__ivar_destroyer()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t MetalDataType.Function.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetalDataType.Function.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.AddressSpace.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245EA1A34 + 4 * byte_245FC07E0[a1]))(0x746E6174736E6F63, 0xE800000000000000);
}

uint64_t sub_245EA1A34()
{
  return 0x656369766564;
}

uint64_t sub_245EA1A48()
{
  return 0x646165726874;
}

uint64_t sub_245EA1A5C()
{
  return 0x7267646165726874;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance MetalDataType.AddressSpace(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_245EA1AD0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_245EA1B30 + 4 * byte_245FC07E8[a1]))(0x656369766564);
}

uint64_t sub_245EA1B30(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656369766564 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance MetalDataType.AddressSpace()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245EA1C24()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance MetalDataType.AddressSpace()
{
  __asm { BR              X10 }
}

uint64_t sub_245EA1CD0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance MetalDataType.AddressSpace()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245EA1D74()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MetalDataType.AddressSpace@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized MetalDataType.AddressSpace.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MetalDataType.AddressSpace()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_245EA1E40 + 4 * byte_245FC07F8[*v0]))();
}

void sub_245EA1E40(_QWORD *a1@<X8>)
{
  *a1 = 0x656369766564;
  a1[1] = 0xE600000000000000;
}

void sub_245EA1E58(_QWORD *a1@<X8>)
{
  *a1 = 0x646165726874;
  a1[1] = 0xE600000000000000;
}

void sub_245EA1E70(_QWORD *a1@<X8>)
{
  *a1 = 0x7267646165726874;
  a1[1] = 0xEB0000000070756FLL;
}

uint64_t MetalDataType.Reference.__allocating_init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized MetalDataType.Reference.init(to:isConst:addressSpace:));
}

uint64_t MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  swift_allocObject();
  v8 = a4(a1, a2, a3);
  swift_release();
  return v8;
}

uint64_t type metadata accessor for MetalDataType.Reference()
{
  return objc_opt_self();
}

uint64_t MetalDataType.Reference.init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(a1, a2, a3);
  v4 = v3;
  swift_release();
  return v4;
}

uint64_t MetalDataType.Reference.deinit()
{
  return MetalDataType.Vector.deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t MetalDataType.Vector.deinit(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1(*(_QWORD *)(v1 + 72));
  return v1;
}

uint64_t MetalDataType.Reference.__deallocating_deinit()
{
  return MetalDataType.Vector.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t MetalDataType.Vector.__deallocating_deinit(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1(*(_QWORD *)(v1 + 72));
  return swift_deallocClassInstance();
}

uint64_t MetalDataType.const()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = *(uint64_t (**)(uint64_t))(*v0 + 88);
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  v7 = v0[7];
  v8 = v5(v6);
  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = v1;
  *(_BYTE *)(result + 64) = 1;
  *(_QWORD *)(result + 56) = v7;
  *(_QWORD *)(result + 16) = v8;
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t MetalDataType.pointerTo(withAddressSpace:)(char a1)
{
  _QWORD *v2;
  uint64_t v3;

  type metadata accessor for MetalDataType.Pointer();
  swift_allocObject();
  v2 = (_QWORD *)swift_retain();
  v3 = specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(v2, 0, a1);
  swift_release();
  return v3;
}

uint64_t one-time initialization function for void()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_QWORD *)(result + 32) = 0xE400000000000000;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = 1684631414;
  static MetalDataType.void = result;
  return result;
}

uint64_t static MetalDataType.void.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for void);
}

double one-time initialization function for BOOL()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE400000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0AB0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 1819242338;
  static MetalDataType.BOOL = v0;
  return result;
}

uint64_t static MetalDataType.BOOL.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for BOOL);
}

uint64_t static MetalDataType.void.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

double one-time initialization function for uint8()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0AC0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F38746E6975;
  static MetalDataType.uint8 = v0;
  return result;
}

uint64_t *MetalDataType.uint8.unsafeMutableAddressor()
{
  if (one-time initialization token for uint8 != -1)
    swift_once();
  return &static MetalDataType.uint8;
}

uint64_t static MetalDataType.uint8.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint8);
}

double one-time initialization function for uint16()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE800000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0AD0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(v0 + 56) = 0x200000002;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F3631746E6975;
  static MetalDataType.uint16 = v0;
  return result;
}

uint64_t *MetalDataType.uint16.unsafeMutableAddressor()
{
  if (one-time initialization token for uint16 != -1)
    swift_once();
  return &static MetalDataType.uint16;
}

uint64_t static MetalDataType.uint16.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint16);
}

double one-time initialization function for uint32()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE800000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0AE0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x400000004;
  *(_QWORD *)(v0 + 56) = 0x400000004;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F3233746E6975;
  static MetalDataType.uint32 = v0;
  return result;
}

uint64_t *MetalDataType.uint32.unsafeMutableAddressor()
{
  if (one-time initialization token for uint32 != -1)
    swift_once();
  return &static MetalDataType.uint32;
}

uint64_t static MetalDataType.uint32.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint32);
}

double one-time initialization function for uint64()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE800000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0AF0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F3436746E6975;
  static MetalDataType.uint64 = v0;
  return result;
}

uint64_t *MetalDataType.uint64.unsafeMutableAddressor()
{
  if (one-time initialization token for uint64 != -1)
    swift_once();
  return &static MetalDataType.uint64;
}

uint64_t static MetalDataType.uint64.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint64);
}

double one-time initialization function for int8()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE600000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0B00;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F38746E69;
  static MetalDataType.int8 = v0;
  return result;
}

uint64_t *MetalDataType.int8.unsafeMutableAddressor()
{
  if (one-time initialization token for int8 != -1)
    swift_once();
  return &static MetalDataType.int8;
}

uint64_t static MetalDataType.int8.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int8);
}

double one-time initialization function for int16()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0B10;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(v0 + 56) = 0x200000002;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F3631746E69;
  static MetalDataType.int16 = v0;
  return result;
}

uint64_t *MetalDataType.int16.unsafeMutableAddressor()
{
  if (one-time initialization token for int16 != -1)
    swift_once();
  return &static MetalDataType.int16;
}

uint64_t static MetalDataType.int16.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int16);
}

double one-time initialization function for int32()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0B20;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x400000004;
  *(_QWORD *)(v0 + 56) = 0x400000004;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F3233746E69;
  static MetalDataType.int32 = v0;
  return result;
}

uint64_t *MetalDataType.int32.unsafeMutableAddressor()
{
  if (one-time initialization token for int32 != -1)
    swift_once();
  return &static MetalDataType.int32;
}

uint64_t static MetalDataType.int32.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int32);
}

double one-time initialization function for int64()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE700000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0B30;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F3436746E69;
  static MetalDataType.int64 = v0;
  return result;
}

uint64_t *MetalDataType.int64.unsafeMutableAddressor()
{
  if (one-time initialization token for int64 != -1)
    swift_once();
  return &static MetalDataType.int64;
}

uint64_t static MetalDataType.int64.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int64);
}

double one-time initialization function for half()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE400000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0B40;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(v0 + 56) = 0x200000002;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 1718378856;
  static MetalDataType.half = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1600;
  *(_QWORD *)(v0 + 40) = 0xE400000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.half = v0;
  return result;
}

uint64_t static MetalDataType.half.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half);
}

double one-time initialization function for float()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE500000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0B50;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x400000004;
  *(_QWORD *)(v0 + 56) = 0x400000004;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x74616F6C66;
  static MetalDataType.float = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1570;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.float = v0;
  return result;
}

uint64_t static MetalDataType.float.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float);
}

uint64_t static MetalDataType.unsignedChar.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint8);
}

uint64_t static MetalDataType.unsignedShort.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint16);
}

uint64_t static MetalDataType.unsignedLong.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint64);
}

double one-time initialization function for size_t()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE600000000000000;
  *(_OWORD *)(v0 + 40) = xmmword_245FC0B60;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x745F657A6973;
  static MetalDataType.size_t = v0;
  return result;
}

uint64_t *MetalDataType.size_t.unsafeMutableAddressor()
{
  if (one-time initialization token for size_t != -1)
    swift_once();
  return &static MetalDataType.size_t;
}

uint64_t static MetalDataType.size_t.getter()
{
  return static MetalDataType.size_t.getter(&one-time initialization token for size_t);
}

uint64_t static MetalDataType.size_t.setter(uint64_t a1)
{
  return static MetalDataType.size_t.setter(a1, &one-time initialization token for size_t, &static MetalDataType.size_t);
}

uint64_t (*static MetalDataType.size_t.modify())()
{
  if (one-time initialization token for size_t != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.StringNode.children.modify;
}

double one-time initialization function for ptrdiff()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType.Number();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xE900000000000074;
  *(_QWORD *)(v0 + 40) = 0xD000000000000012;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9930;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x5F66666964727470;
  static MetalDataType.ptrdiff = v0;
  return result;
}

uint64_t *MetalDataType.ptrdiff.unsafeMutableAddressor()
{
  if (one-time initialization token for ptrdiff != -1)
    swift_once();
  return &static MetalDataType.ptrdiff;
}

uint64_t static MetalDataType.ptrdiff.getter()
{
  return static MetalDataType.size_t.getter(&one-time initialization token for ptrdiff);
}

uint64_t static MetalDataType.size_t.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static MetalDataType.ptrdiff.setter(uint64_t a1)
{
  return static MetalDataType.size_t.setter(a1, &one-time initialization token for ptrdiff, &static MetalDataType.ptrdiff);
}

uint64_t static MetalDataType.size_t.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_release();
}

uint64_t (*static MetalDataType.ptrdiff.modify())()
{
  if (one-time initialization token for ptrdiff != -1)
    swift_once();
  swift_beginAccess();
  return XMLParserDelegate.Element.children.modify;
}

uint64_t one-time initialization function for uint2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for uint32 != -1)
    swift_once();
  v0 = static MetalDataType.uint32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x32746E6975, 0xE500000000000000, v0, 2, 8, 8);
  result = swift_release();
  static MetalDataType.uint2 = v1;
  return result;
}

uint64_t static MetalDataType.uint2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint2);
}

uint64_t one-time initialization function for uint3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for uint32 != -1)
    swift_once();
  v0 = static MetalDataType.uint32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x33746E6975, 0xE500000000000000, v0, 3, 16, 16);
  result = swift_release();
  static MetalDataType.uint3 = v1;
  return result;
}

uint64_t static MetalDataType.uint3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint3);
}

uint64_t one-time initialization function for uint4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for uint32 != -1)
    swift_once();
  v0 = static MetalDataType.uint32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x34746E6975, 0xE500000000000000, v0, 4, 16, 16);
  result = swift_release();
  static MetalDataType.uint4 = v1;
  return result;
}

uint64_t static MetalDataType.uint4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for uint4);
}

uint64_t one-time initialization function for int2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for int32 != -1)
    swift_once();
  v0 = static MetalDataType.int32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(846491241, 0xE400000000000000, v0, 2, 8, 8);
  result = swift_release();
  static MetalDataType.int2 = v1;
  return result;
}

uint64_t static MetalDataType.int2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int2);
}

uint64_t one-time initialization function for int3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for int32 != -1)
    swift_once();
  v0 = static MetalDataType.int32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(863268457, 0xE400000000000000, v0, 3, 16, 16);
  result = swift_release();
  static MetalDataType.int3 = v1;
  return result;
}

uint64_t static MetalDataType.int3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int3);
}

uint64_t one-time initialization function for int4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for int32 != -1)
    swift_once();
  v0 = static MetalDataType.int32;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(880045673, 0xE400000000000000, v0, 4, 16, 16);
  result = swift_release();
  static MetalDataType.int4 = v1;
  return result;
}

uint64_t static MetalDataType.int4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for int4);
}

uint64_t one-time initialization function for float2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float != -1)
    swift_once();
  v0 = static MetalDataType.float;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x3274616F6C66, 0xE600000000000000, v0, 2, 8, 8);
  result = swift_release();
  static MetalDataType.float2 = v1;
  return result;
}

uint64_t static MetalDataType.float2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float2);
}

uint64_t one-time initialization function for float3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float != -1)
    swift_once();
  v0 = static MetalDataType.float;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x3374616F6C66, 0xE600000000000000, v0, 3, 16, 16);
  result = swift_release();
  static MetalDataType.float3 = v1;
  return result;
}

uint64_t static MetalDataType.float3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float3);
}

uint64_t one-time initialization function for float4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float != -1)
    swift_once();
  v0 = static MetalDataType.float;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x3474616F6C66, 0xE600000000000000, v0, 4, 16, 16);
  result = swift_release();
  static MetalDataType.float4 = v1;
  return result;
}

uint64_t static MetalDataType.float4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float4);
}

uint64_t one-time initialization function for half2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half != -1)
    swift_once();
  v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x32666C6168, 0xE500000000000000, v0, 2, 4, 4);
  result = swift_release();
  static MetalDataType.half2 = v1;
  return result;
}

uint64_t static MetalDataType.half2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half2);
}

uint64_t one-time initialization function for half3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half != -1)
    swift_once();
  v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x33666C6168, 0xE500000000000000, v0, 3, 8, 8);
  result = swift_release();
  static MetalDataType.half3 = v1;
  return result;
}

uint64_t static MetalDataType.half3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half3);
}

uint64_t one-time initialization function for half4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half != -1)
    swift_once();
  v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x34666C6168, 0xE500000000000000, v0, 4, 8, 8);
  result = swift_release();
  static MetalDataType.half4 = v1;
  return result;
}

uint64_t static MetalDataType.half4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half4);
}

uint64_t one-time initialization function for color3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half != -1)
    swift_once();
  v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x33726F6C6F63, 0xE600000000000000, v0, 3, 8, 8);
  result = swift_release();
  static MetalDataType.color3 = v1;
  return result;
}

uint64_t static MetalDataType.color3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for color3);
}

uint64_t one-time initialization function for color4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half != -1)
    swift_once();
  v0 = static MetalDataType.half;
  type metadata accessor for MetalDataType.Vector();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(0x34726F6C6F63, 0xE600000000000000, v0, 4, 8, 8);
  result = swift_release();
  static MetalDataType.color4 = v1;
  return result;
}

uint64_t static MetalDataType.color4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for color4);
}

uint64_t one-time initialization function for float2x2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float2 != -1)
    swift_once();
  v0 = static MetalDataType.float2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x32783274616F6C66, 0xE800000000000000, v0, 2, 2, 16, 8);
  result = swift_release();
  static MetalDataType.float2x2 = v1;
  return result;
}

uint64_t static MetalDataType.float2x2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float2x2);
}

uint64_t one-time initialization function for float2x3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float3 != -1)
    swift_once();
  v0 = static MetalDataType.float3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x33783274616F6C66, 0xE800000000000000, v0, 2, 3, 32, 16);
  result = swift_release();
  static MetalDataType.float2x3 = v1;
  return result;
}

uint64_t static MetalDataType.float2x3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float2x3);
}

uint64_t one-time initialization function for float2x4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float4 != -1)
    swift_once();
  v0 = static MetalDataType.float4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x34783274616F6C66, 0xE800000000000000, v0, 2, 4, 32, 16);
  result = swift_release();
  static MetalDataType.float2x4 = v1;
  return result;
}

uint64_t static MetalDataType.float2x4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float2x4);
}

uint64_t one-time initialization function for float3x2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float2 != -1)
    swift_once();
  v0 = static MetalDataType.float2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x32783374616F6C66, 0xE800000000000000, v0, 3, 2, 24, 8);
  result = swift_release();
  static MetalDataType.float3x2 = v1;
  return result;
}

uint64_t static MetalDataType.float3x2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float3x2);
}

uint64_t one-time initialization function for float3x3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float3 != -1)
    swift_once();
  v0 = static MetalDataType.float3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x33783374616F6C66, 0xE800000000000000, v0, 3, 3, 48, 16);
  result = swift_release();
  static MetalDataType.float3x3 = v1;
  return result;
}

uint64_t static MetalDataType.float3x3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float3x3);
}

uint64_t one-time initialization function for float3x4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float4 != -1)
    swift_once();
  v0 = static MetalDataType.float4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x34783374616F6C66, 0xE800000000000000, v0, 3, 4, 48, 16);
  result = swift_release();
  static MetalDataType.float3x4 = v1;
  return result;
}

uint64_t static MetalDataType.float3x4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float3x4);
}

uint64_t one-time initialization function for float4x2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float2 != -1)
    swift_once();
  v0 = static MetalDataType.float2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x32783474616F6C66, 0xE800000000000000, v0, 4, 2, 32, 8);
  result = swift_release();
  static MetalDataType.float4x2 = v1;
  return result;
}

uint64_t static MetalDataType.float4x2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float4x2);
}

uint64_t one-time initialization function for float4x3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float3 != -1)
    swift_once();
  v0 = static MetalDataType.float3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x33783474616F6C66, 0xE800000000000000, v0, 4, 3, 64, 16);
  result = swift_release();
  static MetalDataType.float4x3 = v1;
  return result;
}

uint64_t static MetalDataType.float4x3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float4x3);
}

uint64_t one-time initialization function for float4x4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for float4 != -1)
    swift_once();
  v0 = static MetalDataType.float4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x34783474616F6C66, 0xE800000000000000, v0, 4, 4, 64, 16);
  result = swift_release();
  static MetalDataType.float4x4 = v1;
  return result;
}

uint64_t static MetalDataType.float4x4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for float4x4);
}

uint64_t one-time initialization function for half2x2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half2 != -1)
    swift_once();
  v0 = static MetalDataType.half2;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x327832666C6168, 0xE700000000000000, v0, 2, 2, 8, 8);
  result = swift_release();
  static MetalDataType.half2x2 = v1;
  return result;
}

uint64_t *MetalDataType.half2x2.unsafeMutableAddressor()
{
  if (one-time initialization token for half2x2 != -1)
    swift_once();
  return &static MetalDataType.half2x2;
}

uint64_t static MetalDataType.half2x2.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half2x2);
}

uint64_t one-time initialization function for half3x3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half3 != -1)
    swift_once();
  v0 = static MetalDataType.half3;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x337833666C6168, 0xE700000000000000, v0, 2, 2, 8, 8);
  result = swift_release();
  static MetalDataType.half3x3 = v1;
  return result;
}

uint64_t *MetalDataType.half3x3.unsafeMutableAddressor()
{
  if (one-time initialization token for half3x3 != -1)
    swift_once();
  return &static MetalDataType.half3x3;
}

uint64_t static MetalDataType.half3x3.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half3x3);
}

uint64_t one-time initialization function for half4x4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (one-time initialization token for half4 != -1)
    swift_once();
  v0 = static MetalDataType.half4;
  type metadata accessor for MetalDataType.Matrix();
  swift_allocObject();
  swift_retain();
  v1 = specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(0x347834666C6168, 0xE700000000000000, v0, 2, 2, 8, 8);
  result = swift_release();
  static MetalDataType.half4x4 = v1;
  return result;
}

uint64_t *MetalDataType.half4x4.unsafeMutableAddressor()
{
  if (one-time initialization token for half4x4 != -1)
    swift_once();
  return &static MetalDataType.half4x4;
}

uint64_t static MetalDataType.half4x4.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for half4x4);
}

double one-time initialization function for texture2d_half()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xEF3E666C61683C64;
  *(_QWORD *)(v0 + 40) = 0xD000000000000015;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9C30;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x3265727574786574;
  static MetalDataType.texture2d_half = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_half.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2d_half);
}

double one-time initialization function for texture2d_float()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9C10;
  *(_QWORD *)(v0 + 40) = 0xD000000000000015;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9BF0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture2d_float = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_float.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2d_float);
}

double one-time initialization function for texture2d_short()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9BB0;
  *(_QWORD *)(v0 + 40) = 0xD000000000000013;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9B90;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture2d_short = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_short.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2d_short);
}

double one-time initialization function for texture2d_ushort()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9B70;
  *(_QWORD *)(v0 + 40) = 0xD000000000000014;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9B50;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000011;
  static MetalDataType.texture2d_ushort = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_ushort.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2d_ushort);
}

uint64_t one-time initialization function for texture2d_int()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_BYTE *)(result + 39) = -18;
  *(_QWORD *)(result + 40) = 0xD000000000000010;
  *(_QWORD *)(result + 48) = 0x8000000245FC9C50;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = 0x800000008;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  strcpy((char *)(result + 24), "texture2d<int>");
  static MetalDataType.texture2d_int = result;
  return result;
}

uint64_t static MetalDataType.texture2d_int.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2d_int);
}

double one-time initialization function for texture2d_uint()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xEF3E746E69753C64;
  *(_QWORD *)(v0 + 40) = 0xD000000000000011;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9BD0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x3265727574786574;
  static MetalDataType.texture2d_uint = v0;
  return result;
}

uint64_t static MetalDataType.texture2d_uint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2d_uint);
}

double one-time initialization function for texture3d_half()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xEF3E666C61683C64;
  *(_QWORD *)(v0 + 40) = 0xD000000000000015;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9DF0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x3365727574786574;
  static MetalDataType.texture3d_half = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_half.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3d_half);
}

double one-time initialization function for texture3d_float()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9DD0;
  *(_QWORD *)(v0 + 40) = 0xD000000000000015;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9DB0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture3d_float = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_float.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3d_float);
}

double one-time initialization function for texture3d_short()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9B10;
  *(_QWORD *)(v0 + 40) = 0xD000000000000013;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9AF0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000010;
  static MetalDataType.texture3d_short = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_short.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3d_short);
}

double one-time initialization function for texture3d_ushort()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9AD0;
  *(_QWORD *)(v0 + 40) = 0xD000000000000014;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9AB0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000011;
  static MetalDataType.texture3d_ushort = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_ushort.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3d_ushort);
}

uint64_t one-time initialization function for texture3d_int()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_BYTE *)(result + 39) = -18;
  *(_QWORD *)(result + 40) = 0xD000000000000010;
  *(_QWORD *)(result + 48) = 0x8000000245FC9E10;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = 0x800000008;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  strcpy((char *)(result + 24), "texture3d<int>");
  static MetalDataType.texture3d_int = result;
  return result;
}

uint64_t static MetalDataType.texture3d_int.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3d_int);
}

double one-time initialization function for texture3d_uint()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0xEF3E746E69753C64;
  *(_QWORD *)(v0 + 40) = 0xD000000000000011;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9B30;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x3365727574786574;
  static MetalDataType.texture3d_uint = v0;
  return result;
}

uint64_t static MetalDataType.texture3d_uint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture3d_uint);
}

uint64_t one-time initialization function for depth2d_half()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_WORD *)(result + 38) = -4864;
  *(_QWORD *)(result + 40) = 0xD000000000000018;
  *(_QWORD *)(result + 48) = 0x8000000245FC9A90;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = 0x800000008;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  strcpy((char *)(result + 24), "depth2d<half>");
  static MetalDataType.depth2d_half = result;
  return result;
}

uint64_t *MetalDataType.depth2d_half.unsafeMutableAddressor()
{
  if (one-time initialization token for depth2d_half != -1)
    swift_once();
  return &static MetalDataType.depth2d_half;
}

uint64_t static MetalDataType.depth2d_half.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for depth2d_half);
}

uint64_t one-time initialization function for depth2d_float()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_BYTE *)(result + 39) = -18;
  *(_QWORD *)(result + 40) = 0xD000000000000018;
  *(_QWORD *)(result + 48) = 0x8000000245FC9A70;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = 0x800000008;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  strcpy((char *)(result + 24), "depth2d<float>");
  static MetalDataType.depth2d_float = result;
  return result;
}

uint64_t *MetalDataType.depth2d_float.unsafeMutableAddressor()
{
  if (one-time initialization token for depth2d_float != -1)
    swift_once();
  return &static MetalDataType.depth2d_float;
}

uint64_t static MetalDataType.depth2d_float.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for depth2d_float);
}

double one-time initialization function for texturecube_half()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9D90;
  *(_QWORD *)(v0 + 40) = 0xD000000000000013;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9D70;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000011;
  static MetalDataType.texturecube_half = v0;
  return result;
}

uint64_t static MetalDataType.texturecube_half.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texturecube_half);
}

double one-time initialization function for texturecube_float()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9D50;
  *(_QWORD *)(v0 + 40) = 0xD000000000000013;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9D30;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000012;
  static MetalDataType.texturecube_float = v0;
  return result;
}

uint64_t static MetalDataType.texturecube_float.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texturecube_float);
}

double one-time initialization function for texture2darray_half()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9CD0;
  *(_QWORD *)(v0 + 40) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9CB0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000015;
  static MetalDataType.texture2darray_half = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_half.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darray_half);
}

double one-time initialization function for texture2darray_float()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9C90;
  *(_QWORD *)(v0 + 40) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9C70;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000016;
  static MetalDataType.texture2darray_float = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_float.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darray_float);
}

double one-time initialization function for texture2darray_short()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9A10;
  *(_QWORD *)(v0 + 40) = 0xD000000000000019;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC99F0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000016;
  static MetalDataType.texture2darray_short = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_short.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darray_short);
}

double one-time initialization function for texture2darray_ushort()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC99D0;
  *(_QWORD *)(v0 + 40) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC99B0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000017;
  static MetalDataType.texture2darray_ushort = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_ushort.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darray_ushort);
}

double one-time initialization function for texture2darray_int()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9D10;
  *(_QWORD *)(v0 + 40) = 0xD000000000000016;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9CF0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000014;
  static MetalDataType.texture2darray_int = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_int.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darray_int);
}

double one-time initialization function for texture2darray_uint()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0x8000000245FC9A50;
  *(_QWORD *)(v0 + 40) = 0xD000000000000017;
  *(_QWORD *)(v0 + 48) = 0x8000000245FC9A30;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0xD000000000000015;
  static MetalDataType.texture2darray_uint = v0;
  return result;
}

uint64_t static MetalDataType.texture2darray_uint.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for texture2darray_uint);
}

double one-time initialization function for sampler()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0xE700000000000000;
  *(_QWORD *)&result = 0x800000008;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x72656C706D6173;
  static MetalDataType.sampler = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC1790;
  *(_QWORD *)(v0 + 40) = 0xE700000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.sampler = v0;
  return result;
}

uint64_t static MetalDataType.sampler.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for sampler);
}

uint64_t one-time initialization function for coord()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x64726F6F63, 0xE500000000000000, (uint64_t)&outlined read-only object #0 of one-time initialization function for coord);
  static MetalDataType.coord = result;
  return result;
}

uint64_t *MetalDataType.coord.unsafeMutableAddressor()
{
  if (one-time initialization token for coord != -1)
    swift_once();
  return &static MetalDataType.coord;
}

uint64_t static MetalDataType.coord.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for coord);
}

uint64_t one-time initialization function for address()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x2073736572646441, 0xEC00000065646F4DLL, 0x73736572646461, 0xE700000000000000, (uint64_t)&outlined read-only object #0 of one-time initialization function for address);
  static MetalDataType.address = result;
  return result;
}

uint64_t *MetalDataType.address.unsafeMutableAddressor()
{
  if (one-time initialization token for address != -1)
    swift_once();
  return &static MetalDataType.address;
}

uint64_t static MetalDataType.address.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for address);
}

uint64_t one-time initialization function for s_address()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x7365726464412053, 0xEE0065646F4D2073, 0x7365726464615F73, 0xE900000000000073, (uint64_t)&outlined read-only object #0 of one-time initialization function for s_address);
  static MetalDataType.s_address = result;
  return result;
}

uint64_t *MetalDataType.s_address.unsafeMutableAddressor()
{
  if (one-time initialization token for s_address != -1)
    swift_once();
  return &static MetalDataType.s_address;
}

uint64_t static MetalDataType.s_address.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for s_address);
}

uint64_t one-time initialization function for t_address()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x7365726464412054, 0xEE0065646F4D2073, 0x7365726464615F74, 0xE900000000000073, (uint64_t)&outlined read-only object #0 of one-time initialization function for t_address);
  static MetalDataType.t_address = result;
  return result;
}

uint64_t *MetalDataType.t_address.unsafeMutableAddressor()
{
  if (one-time initialization token for t_address != -1)
    swift_once();
  return &static MetalDataType.t_address;
}

uint64_t static MetalDataType.t_address.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for t_address);
}

uint64_t one-time initialization function for r_address()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0x7365726464412052, 0xEE0065646F4D2073, 0x7365726464615F72, 0xE900000000000073, (uint64_t)&outlined read-only object #0 of one-time initialization function for r_address);
  static MetalDataType.r_address = result;
  return result;
}

uint64_t *MetalDataType.r_address.unsafeMutableAddressor()
{
  if (one-time initialization token for r_address != -1)
    swift_once();
  return &static MetalDataType.r_address;
}

uint64_t static MetalDataType.r_address.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for r_address);
}

uint64_t one-time initialization function for border_color()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x635F726564726F62, 0xEC000000726F6C6FLL, (uint64_t)&outlined read-only object #0 of one-time initialization function for border_color);
  static MetalDataType.border_color = result;
  return result;
}

uint64_t *MetalDataType.border_color.unsafeMutableAddressor()
{
  if (one-time initialization token for border_color != -1)
    swift_once();
  return &static MetalDataType.border_color;
}

uint64_t static MetalDataType.border_color.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for border_color);
}

uint64_t one-time initialization function for filter()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x7265746C6966, 0xE600000000000000, (uint64_t)&outlined read-only object #0 of one-time initialization function for filter);
  static MetalDataType.filter = result;
  return result;
}

uint64_t *MetalDataType.filter.unsafeMutableAddressor()
{
  if (one-time initialization token for filter != -1)
    swift_once();
  return &static MetalDataType.filter;
}

uint64_t static MetalDataType.filter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for filter);
}

uint64_t one-time initialization function for mag_filter()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x746C69665F67616DLL, 0xEA00000000007265, (uint64_t)&outlined read-only object #0 of one-time initialization function for mag_filter);
  static MetalDataType.mag_filter = result;
  return result;
}

uint64_t *MetalDataType.mag_filter.unsafeMutableAddressor()
{
  if (one-time initialization token for mag_filter != -1)
    swift_once();
  return &static MetalDataType.mag_filter;
}

uint64_t static MetalDataType.mag_filter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for mag_filter);
}

uint64_t one-time initialization function for min_filter()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x746C69665F6E696DLL, 0xEA00000000007265, (uint64_t)&outlined read-only object #0 of one-time initialization function for min_filter);
  static MetalDataType.min_filter = result;
  return result;
}

uint64_t *MetalDataType.min_filter.unsafeMutableAddressor()
{
  if (one-time initialization token for min_filter != -1)
    swift_once();
  return &static MetalDataType.min_filter;
}

uint64_t static MetalDataType.min_filter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for min_filter);
}

uint64_t one-time initialization function for mip_filter()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x746C69665F70696DLL, 0xEA00000000007265, (uint64_t)&outlined read-only object #0 of one-time initialization function for mip_filter);
  static MetalDataType.mip_filter = result;
  return result;
}

uint64_t *MetalDataType.mip_filter.unsafeMutableAddressor()
{
  if (one-time initialization token for mip_filter != -1)
    swift_once();
  return &static MetalDataType.mip_filter;
}

uint64_t static MetalDataType.mip_filter.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for mip_filter);
}

uint64_t one-time initialization function for compare_func()
{
  uint64_t result;

  result = specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(0, 0, 0x5F657261706D6F63, 0xEC000000636E7566, (uint64_t)&outlined read-only object #0 of one-time initialization function for compare_func);
  static MetalDataType.compare_func = result;
  return result;
}

uint64_t *MetalDataType.compare_func.unsafeMutableAddressor()
{
  if (one-time initialization token for compare_func != -1)
    swift_once();
  return &static MetalDataType.compare_func;
}

uint64_t static MetalDataType.compare_func.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for compare_func);
}

uint64_t one-time initialization function for max_anisotropy()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 39) = -18;
  *(_QWORD *)(result + 56) = 0x100000001;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  strcpy((char *)(result + 24), "max_anisotropy");
  static MetalDataType.max_anisotropy = result;
  return result;
}

uint64_t *MetalDataType.max_anisotropy.unsafeMutableAddressor()
{
  if (one-time initialization token for max_anisotropy != -1)
    swift_once();
  return &static MetalDataType.max_anisotropy;
}

uint64_t static MetalDataType.max_anisotropy.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for max_anisotropy);
}

double one-time initialization function for lod_clamp()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0xE900000000000070;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x6D616C635F646F6CLL;
  static MetalDataType.lod_clamp = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17B0;
  *(_QWORD *)(v0 + 40) = 0xE900000000000070;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.lod_clamp = v0;
  return result;
}

uint64_t *MetalDataType.lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for lod_clamp != -1)
    swift_once();
  return &static MetalDataType.lod_clamp;
}

uint64_t static MetalDataType.lod_clamp.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for lod_clamp);
}

double one-time initialization function for bias()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0xE400000000000000;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 1935763810;
  static MetalDataType.bias = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17C0;
  *(_QWORD *)(v0 + 40) = 0xE400000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.bias = v0;
  return result;
}

uint64_t *MetalDataType.bias.unsafeMutableAddressor()
{
  if (one-time initialization token for bias != -1)
    swift_once();
  return &static MetalDataType.bias;
}

uint64_t static MetalDataType.bias.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for bias);
}

double one-time initialization function for level()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0xE500000000000000;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x6C6576656CLL;
  static MetalDataType.level = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17D0;
  *(_QWORD *)(v0 + 40) = 0xE500000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.level = v0;
  return result;
}

uint64_t *MetalDataType.level.unsafeMutableAddressor()
{
  if (one-time initialization token for level != -1)
    swift_once();
  return &static MetalDataType.level;
}

uint64_t static MetalDataType.level.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for level);
}

uint64_t one-time initialization function for min_lod_clamp()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_WORD *)(result + 38) = -4864;
  *(_QWORD *)(result + 56) = 0x100000001;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  strcpy((char *)(result + 24), "min_lod_clamp");
  static MetalDataType.min_lod_clamp = result;
  return result;
}

uint64_t *MetalDataType.min_lod_clamp.unsafeMutableAddressor()
{
  if (one-time initialization token for min_lod_clamp != -1)
    swift_once();
  return &static MetalDataType.min_lod_clamp;
}

uint64_t static MetalDataType.min_lod_clamp.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for min_lod_clamp);
}

double one-time initialization function for offset()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0xE600000000000000;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x74657366666FLL;
  static MetalDataType.offset = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17F0;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.offset = v0;
  return result;
}

uint64_t *MetalDataType.offset.unsafeMutableAddressor()
{
  if (one-time initialization token for offset != -1)
    swift_once();
  return &static MetalDataType.offset;
}

uint64_t static MetalDataType.offset.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for offset);
}

double one-time initialization function for gradient2d()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0xEA00000000006432;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x746E656964617267;
  static MetalDataType.gradient2d = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17E0;
  *(_QWORD *)(v0 + 40) = 0xEA00000000006432;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.gradient2d = v0;
  return result;
}

uint64_t *MetalDataType.gradient2d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient2d != -1)
    swift_once();
  return &static MetalDataType.gradient2d;
}

uint64_t static MetalDataType.gradient2d.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for gradient2d);
}

double one-time initialization function for gradient3d()
{
  uint64_t v0;
  double result;

  type metadata accessor for MetalDataType();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0xEA00000000006433;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v0 + 56) = 0x100000001;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = 0x746E656964617267;
  static MetalDataType.gradient3d = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for MaterialXDataType();
  v0 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v0 + 24) = xmmword_245FC17E0;
  *(_QWORD *)(v0 + 40) = 0xEA00000000006433;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  static MaterialXDataType.gradient3d = v0;
  return result;
}

uint64_t *MetalDataType.gradient3d.unsafeMutableAddressor()
{
  if (one-time initialization token for gradient3d != -1)
    swift_once();
  return &static MetalDataType.gradient3d;
}

uint64_t static MetalDataType.gradient3d.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for gradient3d);
}

uint64_t one-time initialization function for gradientcube()
{
  uint64_t result;

  type metadata accessor for MetalDataType();
  result = swift_allocObject();
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 37) = 0;
  *(_WORD *)(result + 38) = -5120;
  *(_QWORD *)(result + 56) = 0x100000001;
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  strcpy((char *)(result + 24), "gradientcube");
  static MetalDataType.gradientcube = result;
  return result;
}

uint64_t *MetalDataType.gradientcube.unsafeMutableAddressor()
{
  if (one-time initialization token for gradientcube != -1)
    swift_once();
  return &static MetalDataType.gradientcube;
}

uint64_t static MetalDataType.gradientcube.getter()
{
  return static MetalDataType.void.getter(&one-time initialization token for gradientcube);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v44 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v6;
    *(_QWORD *)(v20[7] + 8 * v11) = v8;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v44 - 1;
    if (v44 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 9;
    while (1)
    {
      v28 = *(v26 - 2);
      v27 = *(v26 - 1);
      v29 = *v26;
      v30 = (_QWORD *)*a3;
      swift_retain();
      swift_bridgeObjectRetain();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v23 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v23)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v27;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v40 = v38[2];
      v23 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v23)
        goto LABEL_24;
      v26 += 3;
      v38[2] = v41;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x8000000245FC9990;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;

  v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[7];
  v47 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v6;
    v22 = (_QWORD *)(v20[7] + 16 * v11);
    *v22 = v47;
    v22[1] = v8;
    v23 = v20[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v25;
    v26 = v3 - 1;
    if (v3 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = a1 + 11;
    while (1)
    {
      v29 = *(v27 - 3);
      v28 = *(v27 - 2);
      v30 = *(v27 - 1);
      v31 = *v27;
      v32 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v24 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v24)
        break;
      v38 = v34;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_25;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v40 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v41 = (uint64_t *)(v40[6] + 16 * v33);
      *v41 = v29;
      v41[1] = v28;
      v42 = (_QWORD *)(v40[7] + 16 * v33);
      *v42 = v30;
      v42[1] = v31;
      v43 = v40[2];
      v24 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v24)
        goto LABEL_24;
      v27 += 4;
      v40[2] = v44;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x8000000245FC9990;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)();
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (MetalDataType, Any?)?>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v26 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    v24 = 0u;
    v25 = 0u;
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v19 = (_QWORD *)(v3[6] + 16 * i);
    *v19 = v17;
    v19[1] = v18;
    result = outlined init with take of (MetalDataType, Any?)?((uint64_t)&v23, v3[7] + 40 * i);
    v20 = v3[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v22;
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v26 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v26 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v26 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v26 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v26 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  __int128 v42[9];
  __int128 v43[9];
  _OWORD v44[10];
  uint64_t v45;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NodeDef>);
  result = static _DictionaryStorage.copy(original:)();
  v4 = (_QWORD *)result;
  v5 = 0;
  v45 = a1;
  v8 = *(_QWORD *)(a1 + 64);
  v7 = a1 + 64;
  v6 = v8;
  v9 = 1 << *(_BYTE *)(v7 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v6;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = result + 64;
  if ((v10 & v6) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v45 + 48) + 16 * i);
    v20 = *v18;
    v19 = v18[1];
    v21 = (_OWORD *)(*(_QWORD *)(v45 + 56) + 144 * i);
    v44[0] = *v21;
    v22 = v21[4];
    v24 = v21[1];
    v23 = v21[2];
    v44[3] = v21[3];
    v44[4] = v22;
    v44[1] = v24;
    v44[2] = v23;
    v25 = v21[8];
    v27 = v21[5];
    v26 = v21[6];
    v44[7] = v21[7];
    v44[8] = v25;
    v44[5] = v27;
    v44[6] = v26;
    v28 = v21[7];
    v43[6] = v21[6];
    v43[7] = v28;
    v43[8] = v21[8];
    v29 = v21[3];
    v43[2] = v21[2];
    v43[3] = v29;
    v30 = v21[5];
    v43[4] = v21[4];
    v43[5] = v30;
    v31 = v21[1];
    v43[0] = *v21;
    v43[1] = v31;
    swift_bridgeObjectRetain();
    outlined retain of NodeDef((uint64_t)v44);
    closure #3 in NodeDefStore.applyStandardLibraryFixes()(v43, v42);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      outlined release of NodeDef((uint64_t)v44);
      return (uint64_t)v4;
    }
    result = outlined release of NodeDef((uint64_t)v44);
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v32 = (_QWORD *)(v4[6] + 16 * i);
    *v32 = v20;
    v32[1] = v19;
    v33 = (_OWORD *)(v4[7] + 144 * i);
    v34 = v42[3];
    v33[2] = v42[2];
    v33[3] = v34;
    v35 = v42[1];
    *v33 = v42[0];
    v33[1] = v35;
    v36 = v42[8];
    v37 = v42[6];
    v33[7] = v42[7];
    v33[8] = v36;
    v38 = v42[5];
    v33[4] = v42[4];
    v33[5] = v38;
    v33[6] = v37;
    v39 = v4[2];
    v15 = __OFADD__(v39, 1);
    v40 = v39 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v40;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v15 = __OFADD__(v5++, 1);
    if (v15)
      goto LABEL_27;
    if (v5 >= v41)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v7 + 8 * v5);
    if (!v16)
      break;
LABEL_15:
    v11 = (v16 - 1) & v16;
  }
  v17 = v5 + 1;
  if (v5 + 1 >= v41)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 2;
  if (v5 + 2 >= v41)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_14;
  v17 = v5 + 3;
  if (v5 + 3 >= v41)
    return (uint64_t)v4;
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_14:
    v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v41)
      return (uint64_t)v4;
    v16 = *(_QWORD *)(v7 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized MetalDataType.Vector.init(typeName:componentType:componentCount:size:alignment:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v6 + 72) = a3;
  *(_QWORD *)(v6 + 80) = a4;
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    v12 = result;
    swift_retain();
    v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_11ShaderGraph16DataTypePropertyVs5NeverOTg504_s11d12Graph13Metalfg84C6VectorC8typeName09componentE00I5Count4size9alignmentAESS_ACSis6UInt32VALtcfcAA0dE8H8VSiXEfU_AG0lfG0CTf1cn_nTf4ng_nTm(0, a4, a3);
    *(_BYTE *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 24) = v12;
    *(_QWORD *)(v6 + 32) = a2;
    *(_DWORD *)(v6 + 56) = a5;
    *(_DWORD *)(v6 + 60) = a6;
    *(_QWORD *)(v6 + 16) = v13;
    return v6;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_11ShaderGraph16DataTypePropertyVs5NeverOTg504_s11d12Graph13Metalfg84C6VectorC8typeName09componentE00I5Count4size9alignmentAESS_ACSis6UInt32VALtcfcAA0dE8H8VSiXEfU_AG0lfG0CTf1cn_nTf4ng_nTm(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_14;
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v7 = result;
    v12 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
    if (a2 < v7 || v3 < 0)
      goto LABEL_15;
    v8 = v12;
    while (a2 != v7)
    {
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      result = swift_retain();
      if (v10 >= v9 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      v11 = v12 + 48 * v10;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0xE000000000000000;
      *(_QWORD *)(v11 + 48) = a3;
      *(_QWORD *)(v11 + 56) = v4;
      *(_BYTE *)(v11 + 64) = 1;
      *(_QWORD *)(v11 + 72) = v7++;
      if (a2 == v7)
        return v8;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized MetalDataType.Matrix.init(typeName:vectorType:columnCount:rowCount:size:alignment:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;

  v8 = v7;
  *(_QWORD *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 80) = a3;
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    v14 = result;
    swift_retain();
    v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_11ShaderGraph16DataTypePropertyVs5NeverOTg504_s11d12Graph13Metalfg84C6VectorC8typeName09componentE00I5Count4size9alignmentAESS_ACSis6UInt32VALtcfcAA0dE8H8VSiXEfU_AG0lfG0CTf1cn_nTf4ng_nTm(0, a4, a3);
    v18 = *(_QWORD *)(a3 + 24);
    v19 = *(_QWORD *)(a3 + 32);
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 120;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v8 + 32) = a2;
    *(_QWORD *)(v8 + 40) = v18;
    *(_QWORD *)(v8 + 48) = v19;
    *(_BYTE *)(v8 + 64) = 0;
    *(_DWORD *)(v8 + 56) = a6;
    *(_DWORD *)(v8 + 60) = a7;
    *(_QWORD *)(v8 + 16) = v15;
    *(_QWORD *)(v8 + 24) = v14;
    return v8;
  }
  return result;
}

uint64_t specialized closure #1 in calculateOffsets(for:)(uint64_t result, int *a2, _QWORD **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;

  v3 = a3;
  v4 = a2;
  v5 = *(_QWORD *)result;
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = *(_QWORD *)(result + 24);
  v9 = *(_QWORD *)(result + 40);
  LOBYTE(v10) = *(_BYTE *)(result + 32) & 1;
  v11 = *a2;
  v12 = *(_DWORD *)(v7 + 60);
  if (!v12)
  {
    if (v11)
    {
      __break(1u);
      return result;
    }
    goto LABEL_11;
  }
  v13 = v11 % v12;
  if (!(v11 % v12))
  {
LABEL_11:
    v25 = *(_QWORD *)result;
    v26 = *(_BYTE *)(result + 32) & 1;
    v28 = *(_OWORD *)result;
    v27 = v8;
    v21 = *a3;
    swift_retain_n();
    outlined retain of String((uint64_t)&v28);
    outlined retain of [Input]((uint64_t)&v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v3 = v21;
    v10 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      *v3 = v21;
    }
    v9 = v21[2];
    v23 = v21[3];
    v5 = v9 + 1;
    if (v9 >= v23 >> 1)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v9 + 1, 1, v21);
      *v3 = v21;
    }
    v21[2] = v5;
    v24 = &v21[7 * v9];
    v24[4] = v25;
    v24[5] = v6;
    v24[6] = v7;
    v24[7] = v8;
    *((_BYTE *)v24 + 64) = v26;
    v24[9] = v10;
    *((_DWORD *)v24 + 20) = v11;
    v3 = (_QWORD *)*(unsigned int *)(v7 + 56);
    result = swift_release();
    if (!__CFADD__(*(_DWORD *)v4, (_DWORD)v3))
    {
      *(_DWORD *)v4 += (_DWORD)v3;
      return result;
    }
    __break(1u);
    goto LABEL_18;
  }
  v14 = v12 >= v13;
  v15 = v12 - v13;
  if (!v14)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = __CFADD__(v11, v15);
  v16 = v11 + v15;
  if (v14)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v26 = v16;
  *a2 = v16;
  v28 = *(_OWORD *)result;
  v27 = v8;
  v4 = *a3;
  swift_retain_n();
  outlined retain of String((uint64_t)&v28);
  outlined retain of [Input]((uint64_t)&v27);
  v17 = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v4;
  if ((v17 & 1) == 0)
  {
LABEL_20:
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    *v3 = v4;
  }
  v19 = v4[2];
  v18 = v4[3];
  if (v19 >= v18 >> 1)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v4);
    *v3 = v4;
  }
  v4[2] = v19 + 1;
  v20 = &v4[7 * v19];
  v20[4] = v5;
  v20[5] = v6;
  v20[6] = v7;
  v20[7] = v8;
  *((_BYTE *)v20 + 64) = v10;
  v20[9] = v9;
  *((_DWORD *)v20 + 20) = v26;
  return swift_release();
}

uint64_t specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t result;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint32x4_t v35;
  uint32x4_t *v36;
  unint64_t v37;
  uint32x4_t v38;
  char v39;
  int v40;
  _QWORD *v41;
  _QWORD v42[4];
  char v43;
  uint64_t v44;

  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a1;
  *(_QWORD *)(a9 + 48) = a2;
  *(_BYTE *)(a9 + 64) = a7;
  if ((a5 & 0x100000000) == 0)
  {
    *(_DWORD *)(a9 + 56) = a5;
    swift_retain();
    if ((a6 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_13;
  }
  v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v40 = 0;
  v11 = *(_QWORD *)(a8 + 16);
  if (!v11)
  {
    swift_retain();
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v20)
      goto LABEL_8;
LABEL_12:
    swift_bridgeObjectRelease();
    *(_DWORD *)(a9 + 56) = 0;
    if ((a6 & 0x100000000) == 0)
    {
LABEL_32:
      *(_DWORD *)(a9 + 60) = a6;
      *(_QWORD *)(a9 + 16) = a8;
      return a9;
    }
LABEL_13:
    v26 = *(_QWORD *)(a8 + 16);
    if (v26)
    {
      v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
      v27 = v41;
      v28 = v41[2];
      v29 = a8 + 48;
      do
      {
        v30 = *(_DWORD *)(*(_QWORD *)v29 + 60);
        v41 = v27;
        v31 = v27[3];
        v32 = v28 + 1;
        if (v28 >= v31 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v28 + 1, 1);
          v27 = v41;
        }
        v27[2] = v32;
        *((_DWORD *)v27 + v28 + 8) = v30;
        v29 += 48;
        ++v28;
        --v26;
      }
      while (v26);
    }
    else
    {
      v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v32 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      if (!v32)
      {
        LODWORD(a6) = 0;
        v39 = 1;
LABEL_30:
        swift_bridgeObjectRelease();
        if ((v39 & 1) != 0)
          LODWORD(a6) = 0;
        goto LABEL_32;
      }
    }
    LODWORD(a6) = *((_DWORD *)v27 + 8);
    v33 = v32 - 1;
    if (v32 != 1)
    {
      if (v33 < 8)
      {
        v34 = 1;
        goto LABEL_26;
      }
      v34 = v33 & 0xFFFFFFFFFFFFFFF8 | 1;
      v35 = (uint32x4_t)vdupq_n_s32(a6);
      v36 = (uint32x4_t *)((char *)v27 + 52);
      v37 = v33 & 0xFFFFFFFFFFFFFFF8;
      v38 = v35;
      do
      {
        v35 = vmaxq_u32(v35, v36[-1]);
        v38 = vmaxq_u32(v38, *v36);
        v36 += 2;
        v37 -= 8;
      }
      while (v37);
      LODWORD(a6) = vmaxvq_u32(vmaxq_u32(v35, v38));
      if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
      {
        do
        {
LABEL_26:
          if (a6 <= *((_DWORD *)v27 + v34 + 8))
            LODWORD(a6) = *((_DWORD *)v27 + v34 + 8);
          ++v34;
        }
        while (v32 != v34);
      }
    }
    v39 = 0;
    goto LABEL_30;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)(a8 + 72);
  do
  {
    v13 = *(v12 - 5);
    v14 = *(v12 - 4);
    v15 = *(v12 - 3);
    v16 = *(v12 - 2);
    v17 = *((_BYTE *)v12 - 8);
    v18 = *v12;
    v12 += 6;
    v42[0] = v13;
    v42[1] = v14;
    v42[2] = v15;
    v42[3] = v16;
    v43 = v17;
    v44 = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized closure #1 in calculateOffsets(for:)((uint64_t)v42, &v40, &v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  v19 = v41;
  v20 = v41[2];
  if (!v20)
    goto LABEL_12;
LABEL_8:
  v21 = &v19[7 * v20];
  v22 = *(v21 - 1);
  v23 = *((_DWORD *)v21 + 6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = *(_DWORD *)(v22 + 56);
  result = swift_release();
  if (!__CFADD__(v23, v24))
  {
    *(_DWORD *)(a9 + 56) = v23 + v24;
    if ((a6 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized MetalDataType.Enum.__allocating_init(note:typeName:types:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint32x4_t v26;
  uint32x4_t *v27;
  unint64_t v28;
  uint32x4_t v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint32x4_t v40;
  uint32x4_t *v41;
  unint64_t v42;
  uint32x4_t v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v56;

  v6 = a4;
  v7 = a3;
  v8 = *(_QWORD *)(a5 + 16);
  if (v8)
  {
    v56 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v56;
    v10 = (uint64_t *)(a5 + 40);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      v56 = v9;
      v14 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v9 = v56;
      }
      v10 += 2;
      *(_QWORD *)(v9 + 16) = v14 + 1;
      v15 = (_QWORD *)(v9 + 24 * v14);
      v15[4] = v11;
      v15[5] = v12;
      v15[6] = 0;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v7 = a3;
    v6 = a4;
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_7;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_7:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MetalDataType?>);
      v16 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_10;
    }
  }
  v16 = MEMORY[0x24BEE4B00];
LABEL_10:
  v56 = v16;
  v17 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v17, 1, &v56);
  swift_bridgeObjectRelease();
  v18 = specialized _NativeDictionary.mapValues<A>(_:)(v56);
  swift_release();
  type metadata accessor for MetalDataType.Enum();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 72) = v18;
  v20 = swift_bridgeObjectRetain();
  v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J8VAKXEfU_Tf1cn_n(v20);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
    v23 = 0;
    goto LABEL_22;
  }
  v23 = *(_DWORD *)(v21 + 32);
  v24 = v22 - 1;
  if (v22 == 1)
    goto LABEL_22;
  if (v22 >= 9)
  {
    v25 = v24 & 0xFFFFFFFFFFFFFFF8 | 1;
    v26 = (uint32x4_t)vdupq_n_s32(v23);
    v27 = (uint32x4_t *)(v21 + 52);
    v28 = v24 & 0xFFFFFFFFFFFFFFF8;
    v29 = v26;
    do
    {
      v26 = vmaxq_u32(v26, v27[-1]);
      v29 = vmaxq_u32(v29, *v27);
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    v23 = vmaxvq_u32(vmaxq_u32(v26, v29));
    if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_22;
  }
  else
  {
    v25 = 1;
  }
  v30 = v22 - v25;
  v31 = (unsigned int *)(v21 + 4 * v25 + 32);
  do
  {
    v33 = *v31++;
    v32 = v33;
    if (v23 <= v33)
      v23 = v32;
    --v30;
  }
  while (v30);
LABEL_22:
  v34 = v22 == 0;
  swift_bridgeObjectRelease();
  v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph13MetalDataTypeC_ypSgtSg_G_s6UInt32Vs5NeverOTg504_s11e7Graph13ghi58C4EnumC4note8typeName5typesAESSSg_SSSDySSAC_ypSgtSgGtcfcs6J9VAKXEfU0_Tf1cn_n(v18);
  swift_release();
  v36 = *(_QWORD *)(v35 + 16);
  if (!v36)
  {
    v37 = 0;
    goto LABEL_34;
  }
  v37 = *(_DWORD *)(v35 + 32);
  v38 = v36 - 1;
  if (v36 != 1)
  {
    if (v36 >= 9)
    {
      v39 = v38 & 0xFFFFFFFFFFFFFFF8 | 1;
      v40 = (uint32x4_t)vdupq_n_s32(v37);
      v41 = (uint32x4_t *)(v35 + 52);
      v42 = v38 & 0xFFFFFFFFFFFFFFF8;
      v43 = v40;
      do
      {
        v40 = vmaxq_u32(v40, v41[-1]);
        v43 = vmaxq_u32(v43, *v41);
        v41 += 2;
        v42 -= 8;
      }
      while (v42);
      v37 = vmaxvq_u32(vmaxq_u32(v40, v43));
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_34;
    }
    else
    {
      v39 = 1;
    }
    v44 = v36 - v39;
    v45 = (unsigned int *)(v35 + 4 * v39 + 32);
    do
    {
      v47 = *v45++;
      v46 = v47;
      if (v37 <= v47)
        v37 = v46;
      --v44;
    }
    while (v44);
  }
LABEL_34:
  v48 = v36 == 0;
  v49 = v37;
  swift_bridgeObjectRelease();
  LOBYTE(v56) = v48;
  v50 = specialized MetalDataType.init(note:typeName:size:alignment:isConst:fields:)(a1, a2, v7, v6, v23 | ((unint64_t)v34 << 32), v49 | ((unint64_t)v48 << 32), 0, MEMORY[0x24BEE4AF8], v19);
  swift_release();
  return v50;
}

uint64_t specialized MetalDataType.Function.init(resultType:argumentTypes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(_QWORD *)(a1 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 2632224;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x24BEE4AF8];
  if (!v6)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v23 = BidirectionalCollection<>.joined(separator:)();
    v25 = v24;
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 41;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    *(_QWORD *)(v3 + 32) = v30;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_BYTE *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 16) = v7;
    *(_QWORD *)(v3 + 24) = v29;
    return v3;
  }
  v28 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v9 = 0;
      do
      {
        v10 = MEMORY[0x24954B748](v9, a2);
        v12 = *(_QWORD *)(v10 + 24);
        v11 = *(_QWORD *)(v10 + 32);
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        v14 = *(_QWORD *)(v28 + 16);
        v13 = *(_QWORD *)(v28 + 24);
        if (v14 >= v13 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        ++v9;
        *(_QWORD *)(v28 + 16) = v14 + 1;
        v15 = v28 + 16 * v14;
        *(_QWORD *)(v15 + 32) = v12;
        *(_QWORD *)(v15 + 40) = v11;
      }
      while (v6 != v9);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a2 + 8 * v16 + 32);
        v19 = *(_QWORD *)(v17 + 24);
        v18 = *(_QWORD *)(v17 + 32);
        v21 = *(_QWORD *)(v28 + 16);
        v20 = *(_QWORD *)(v28 + 24);
        swift_bridgeObjectRetain();
        if (v21 >= v20 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        ++v16;
        *(_QWORD *)(v28 + 16) = v21 + 1;
        v22 = v28 + 16 * v21;
        *(_QWORD *)(v22 + 32) = v19;
        *(_QWORD *)(v22 + 40) = v18;
      }
      while (v6 != v16);
    }
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized MetalDataType.Pointer.init(to:isConst:addressSpace:)(_QWORD *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t (*v6)(void);
  Swift::String v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *(_QWORD *)(v3 + 72) = a1;
  *(_BYTE *)(v3 + 80) = a3;
  v6 = *(uint64_t (**)(void))(*a1 + 136);
  swift_retain();
  v7._countAndFlagsBits = v6();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v10 = a1[3];
  v9 = (void *)a1[4];
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v10;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 10784;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  if ((a2 & 1) != 0)
    v13 = 0x74736E6F6320;
  else
    v13 = 0;
  if ((a2 & 1) != 0)
    v14 = 0xE600000000000000;
  else
    v14 = 0xE000000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 32) = 0xE000000000000000;
  *(_QWORD *)(v3 + 40) = 0x207265746E696F50;
  *(_QWORD *)(v3 + 48) = 0xEB00000000206F74;
  *(_BYTE *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 56) = 0x800000008;
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = 0;
  return v3;
}

void specialized MetalDataType.Reference.init(to:isConst:addressSpace:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 72) = a1;
  *(_BYTE *)(v3 + 80) = a3;
  __asm { BR              X10 }
}

uint64_t sub_245EA70F4()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  __int128 v13;
  Swift::String v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[7];

  swift_retain();
  v3._countAndFlagsBits = 0x656369766564;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v6 = v1[3];
  v5 = (void *)v1[4];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = v2 & 1;
  if ((v2 & 1) != 0)
    v9 = 0x74736E6F6320;
  else
    v9 = 0;
  if ((v2 & 1) != 0)
    v10 = 0xE600000000000000;
  else
    v10 = 0xE000000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 9760;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13 = v20[0];
  strcpy((char *)v20, "Reference to ");
  HIWORD(v20[0]) = -4864;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v6;
  v14._object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = v20[0];
  v16 = *(uint64_t (**)(uint64_t))(*v1 + 88);
  v17 = swift_retain();
  v18 = v16(v17);
  swift_release();
  *(_QWORD *)(v0 + 32) = *((_QWORD *)&v13 + 1);
  *(_OWORD *)(v0 + 40) = v15;
  *(_BYTE *)(v0 + 64) = v8;
  *(_QWORD *)(v0 + 56) = 0x800000008;
  *(_QWORD *)(v0 + 16) = v18;
  *(_QWORD *)(v0 + 24) = v13;
  return v0;
}

uint64_t specialized MetalDataType.Struct.getElementFunctionName(for:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;

  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v1 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v3 = v2;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 95;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 95;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v1;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

unint64_t specialized MetalDataType.AddressSpace.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MetalDataType.AddressSpace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t type metadata accessor for MetalDataType()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MetalDataType.Pointer()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace;
  if (!lazy protocol witness table cache variable for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for MetalDataType.AddressSpace, &type metadata for MetalDataType.AddressSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MetalDataType.AddressSpace and conformance MetalDataType.AddressSpace);
  }
  return result;
}

uint64_t sub_245EA74B4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245EA74E8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 208))(*a1);
}

uint64_t method lookup function for MetalDataType()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.isConst.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MetalDataType.isConst.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MetalDataType.isConst.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MetalDataType.offsetList.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MetalDataType.metalParameterDeclaration.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MetalDataType.dereferenced.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MetalDataType.qualifiedName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MetalDataType.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t type metadata accessor for MetalDataType.Struct()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalDataType.Struct()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.Struct.__allocating_init(note:typeName:fields:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t type metadata accessor for MetalDataType.Vector()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalDataType.Vector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.Vector.__allocating_init(typeName:componentType:componentCount:size:alignment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t type metadata accessor for MetalDataType.Number()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalDataType.Number()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.Number.__allocating_init(note:typeName:size:alignment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t type metadata accessor for MetalDataType.Enum()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalDataType.Enum()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.Enum.__allocating_init(note:typeName:types:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t method lookup function for MetalDataType.Pointer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.Pointer.__allocating_init(to:isConst:addressSpace:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t type metadata accessor for MetalDataType.Matrix()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalDataType.Matrix()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.Matrix.__allocating_init(typeName:vectorType:columnCount:rowCount:size:alignment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t type metadata accessor for MetalDataType.Function()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetalDataType.Function()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetalDataType.Function.__allocating_init(resultType:argumentTypes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t getEnumTagSinglePayload for MetalDataType.AddressSpace(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MetalDataType.AddressSpace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_245EA77A8 + 4 * byte_245FC0805[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_245EA77DC + 4 * byte_245FC0800[v4]))();
}

uint64_t sub_245EA77DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245EA77E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245EA77ECLL);
  return result;
}

uint64_t sub_245EA77F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245EA7800);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_245EA7804(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245EA780C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetalDataType.AddressSpace()
{
  return &type metadata for MetalDataType.AddressSpace;
}

uint64_t method lookup function for MetalDataType.Reference()
{
  return swift_lookUpClassMethod();
}

uint64_t outlined init with take of (MetalDataType, Any?)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetalDataType, Any?)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of (MetalDataType, Any?)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MetalDataType, Any?)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24954C264](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t OrderedSet.difference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;

  v51 = a7;
  v55 = type metadata accessor for CollectionDifference();
  v13 = type metadata accessor for Optional();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v54 = (char *)&v50 - v15;
  v58 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject();
  v63 = v17;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = (uint64_t *)(v17 + 16);
  v19 = swift_allocObject();
  v62 = v19;
  *(_QWORD *)(v19 + 16) = 0;
  v20 = (uint64_t *)(v19 + 16);
  v21 = swift_allocObject();
  v53 = type metadata accessor for CollectionDifference.Change();
  *(_QWORD *)(v21 + 16) = Array.init()();
  v52 = (uint64_t *)(v21 + 16);
  v64 = v18;
  swift_beginAccess();
  swift_beginAccess();
  v57 = a6;
  v59 = v21;
  v61 = a1;
  while (1)
  {
    v29 = *v64;
    if (v29 >= ContiguousArray.count.getter())
    {
      v30 = *v20;
      if (v30 >= ContiguousArray.count.getter())
        break;
    }
    v31 = *v20;
    if (v31 == ContiguousArray.count.getter())
      goto LABEL_2;
    if (v29 == ContiguousArray.count.getter())
      goto LABEL_10;
    v32 = v60;
    ContiguousArray.subscript.getter();
    v33 = OrderedSet._find(_:)();
    v35 = v34;
    v36 = *(void (**)(char *, uint64_t))(v58 + 8);
    v36(v32, a5);
    if ((v35 & 1) != 0)
    {
      v49 = 1;
      a1 = v61;
      v22 = v61;
      v23 = a2;
      v24 = v63;
      v21 = v59;
LABEL_3:
      v25 = v21;
      v26 = a3;
      v27 = a4;
LABEL_4:
      v28 = a5;
      goto LABEL_5;
    }
    if (v33 >= *v20)
    {
      v37 = v60;
      ContiguousArray.subscript.getter();
      a6 = v57;
      v56 = OrderedSet._find(_:)();
      v39 = v38;
      result = ((uint64_t (*)(char *, uint64_t))v36)(v37, a5);
      if ((v39 & 1) != 0)
      {
        v49 = 0;
        v22 = a3;
        v23 = a4;
        a1 = v61;
        v24 = v62;
        v21 = v59;
LABEL_11:
        v25 = v21;
        v26 = a1;
        v27 = a2;
        goto LABEL_4;
      }
      v41 = *v64;
      if (v56 < *v64)
      {
        v49 = 0;
        v22 = a3;
        v23 = a4;
        a1 = v61;
        v24 = v62;
        v21 = v59;
        v25 = v59;
        v26 = v61;
        v27 = a2;
        goto LABEL_15;
      }
      a1 = v61;
      if (v41 != v56)
      {
        v42 = __OFSUB__(v56, v41);
        v43 = v56 - v41;
        a6 = v57;
        v21 = v59;
        if (v42)
          goto LABEL_32;
        if (__OFSUB__(v33, *v20))
          goto LABEL_34;
        if (v43 >= v33 - *v20)
        {
LABEL_2:
          v49 = 1;
          v22 = a1;
          v23 = a2;
          v24 = v63;
          goto LABEL_3;
        }
LABEL_10:
        v49 = 0;
        v22 = a3;
        v23 = a4;
        v24 = v62;
        goto LABEL_11;
      }
      a6 = v57;
      v21 = v59;
      if (__OFADD__(v56, 1))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      *v64 = v56 + 1;
      if (__OFADD__(*v20, 1))
        goto LABEL_33;
      ++*v20;
    }
    else
    {
      v49 = 1;
      a1 = v61;
      v22 = v61;
      v23 = a2;
      v24 = v63;
      v21 = v59;
      v25 = v59;
      v26 = a3;
      v27 = a4;
LABEL_15:
      v28 = a5;
      a6 = v57;
LABEL_5:
      remove #1 <A>() in OrderedSet.difference(from:)(v22, v23, v24, v25, v26, v27, v28, a6, v49);
    }
  }
  v44 = v52;
  swift_beginAccess();
  v65 = *v44;
  v45 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x24954C264](MEMORY[0x24BEE12E0], v45);
  v46 = v54;
  CollectionDifference.init<A>(_:)();
  v47 = v55;
  v48 = *(_QWORD *)(v55 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v55);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v51, v46, v47);
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_245EA7DF4()
{
  return swift_deallocObject();
}

uint64_t sub_245EA7E04()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t remove #1 <A>() in OrderedSet.difference(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata3;
  char *v19;
  char *v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[4];
  int v27;

  v26[2] = a6;
  v26[3] = a8;
  v26[1] = a5;
  v27 = a9;
  v11 = type metadata accessor for CollectionDifference.Change();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (_QWORD *)((char *)v26 - v13);
  v15 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  ContiguousArray.subscript.getter();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Int?);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v19 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 48);
  v20 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 64);
  swift_beginAccess();
  *v14 = *(_QWORD *)(a3 + 16);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v17, a7);
  *(_QWORD *)v20 = OrderedSet._find(_:)();
  v20[8] = v21 & 1;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  type metadata accessor for Array();
  Array.append(_:)();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a7);
  result = swift_beginAccess();
  v23 = *(_QWORD *)(a3 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(a3 + 16) = v25;
  return result;
}

uint64_t OrderedSet.applying(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  OrderedSet.elements.getter();
  v7 = type metadata accessor for Array();
  MEMORY[0x24954C264](MEMORY[0x24BEE12E8], v7);
  RangeReplaceableCollection.applying(_:)();
  swift_bridgeObjectRelease();
  v8 = v14;
  if (!v14)
    return 0;
  swift_bridgeObjectRetain();
  v9 = (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x24954C264](MEMORY[0x24BEE12D8], v7);
  v10 = OrderedSet.init<A>(_:)((uint64_t)&v14, a4, v7, a5, v9);
  v11 = ContiguousArray.count.getter();
  v12 = MEMORY[0x24954B250](v8, a4);
  swift_bridgeObjectRelease();
  if (v11 != v12)
  {
    swift_release();
    swift_release();
    return 0;
  }
  return v10;
}

void *one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments()
{
  uint64_t inited;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FC0B70;
  *(_QWORD *)(inited + 32) = 0xD00000000000003BLL;
  *(_QWORD *)(inited + 40) = 0x8000000245FC9E50;
  *(_QWORD *)(inited + 48) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 56) = 0xD00000000000003ALL;
  *(_QWORD *)(inited + 64) = 0x8000000245FC9E90;
  *(_QWORD *)(inited + 72) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #1 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 80) = 0xD00000000000003BLL;
  *(_QWORD *)(inited + 88) = 0x8000000245FC9ED0;
  *(_QWORD *)(inited + 96) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #2 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 104) = 0xD00000000000003ALL;
  *(_QWORD *)(inited + 112) = 0x8000000245FC9F10;
  *(_QWORD *)(inited + 120) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #3 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 128) = 0xD000000000000034;
  *(_QWORD *)(inited + 136) = 0x8000000245FC9F50;
  *(_QWORD *)(inited + 144) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #4 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 152) = 0xD000000000000033;
  *(_QWORD *)(inited + 160) = 0x8000000245FC9F90;
  *(_QWORD *)(inited + 168) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #5 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 176) = 0xD00000000000003DLL;
  *(_QWORD *)(inited + 184) = 0x8000000245FC9FD0;
  *(_QWORD *)(inited + 192) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #6 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 200) = 0xD00000000000003CLL;
  *(_QWORD *)(inited + 208) = 0x8000000245FCA010;
  *(_QWORD *)(inited + 216) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #7 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 224) = 0xD00000000000003BLL;
  *(_QWORD *)(inited + 232) = 0x8000000245FCA050;
  *(_QWORD *)(inited + 240) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #8 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 248) = 0xD00000000000003ALL;
  *(_QWORD *)(inited + 256) = 0x8000000245FCA090;
  *(_QWORD *)(inited + 264) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #9 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 272) = 0xD00000000000003BLL;
  *(_QWORD *)(inited + 280) = 0x8000000245FCA0D0;
  *(_QWORD *)(inited + 288) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #10 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 296) = 0xD00000000000003ALL;
  *(_QWORD *)(inited + 304) = 0x8000000245FCA110;
  *(_QWORD *)(inited + 312) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #11 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 320) = 0xD000000000000034;
  *(_QWORD *)(inited + 328) = 0x8000000245FCA150;
  *(_QWORD *)(inited + 336) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #12 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 344) = 0xD000000000000033;
  *(_QWORD *)(inited + 352) = 0x8000000245FCA190;
  *(_QWORD *)(inited + 360) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #13 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 368) = 0xD00000000000003DLL;
  *(_QWORD *)(inited + 376) = 0x8000000245FCA1D0;
  *(_QWORD *)(inited + 384) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #14 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 392) = 0xD00000000000003CLL;
  *(_QWORD *)(inited + 400) = 0x8000000245FCA210;
  *(_QWORD *)(inited + 408) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #15 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 416) = 0xD000000000000034;
  *(_QWORD *)(inited + 424) = 0x8000000245FCA250;
  *(_QWORD *)(inited + 432) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #16 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 440) = 0xD000000000000033;
  *(_QWORD *)(inited + 448) = 0x8000000245FCA290;
  *(_QWORD *)(inited + 456) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #17 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 464) = 0xD000000000000034;
  *(_QWORD *)(inited + 472) = 0x8000000245FCA2D0;
  *(_QWORD *)(inited + 480) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #18 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 488) = 0xD000000000000033;
  *(_QWORD *)(inited + 496) = 0x8000000245FCA310;
  *(_QWORD *)(inited + 504) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #19 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 512) = 0xD00000000000002DLL;
  *(_QWORD *)(inited + 520) = 0x8000000245FCA350;
  *(_QWORD *)(inited + 528) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #20 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 536) = 0xD00000000000002CLL;
  *(_QWORD *)(inited + 544) = 0x8000000245FCA380;
  *(_QWORD *)(inited + 552) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #21 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 560) = 0xD000000000000036;
  *(_QWORD *)(inited + 568) = 0x8000000245FCA3B0;
  *(_QWORD *)(inited + 576) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #22 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 584) = 0xD000000000000035;
  *(_QWORD *)(inited + 592) = 0x8000000245FCA3F0;
  *(_QWORD *)(inited + 600) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #23 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 608) = 0xD00000000000003DLL;
  *(_QWORD *)(inited + 616) = 0x8000000245FCA430;
  *(_QWORD *)(inited + 624) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #24 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 632) = 0xD00000000000003CLL;
  *(_QWORD *)(inited + 640) = 0x8000000245FCA470;
  *(_QWORD *)(inited + 648) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #25 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 656) = 0xD00000000000003DLL;
  *(_QWORD *)(inited + 664) = 0x8000000245FCA4B0;
  *(_QWORD *)(inited + 672) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #26 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 680) = 0xD00000000000003CLL;
  *(_QWORD *)(inited + 688) = 0x8000000245FCA4F0;
  *(_QWORD *)(inited + 696) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #27 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 704) = 0xD000000000000036;
  *(_QWORD *)(inited + 712) = 0x8000000245FCA530;
  *(_QWORD *)(inited + 720) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #28 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 728) = 0xD000000000000035;
  *(_QWORD *)(inited + 736) = 0x8000000245FCA570;
  *(_QWORD *)(inited + 744) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #29 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 752) = 0xD00000000000003FLL;
  *(_QWORD *)(inited + 760) = 0x8000000245FCA5B0;
  *(_QWORD *)(inited + 768) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #30 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  *(_QWORD *)(inited + 776) = 0xD00000000000003ELL;
  *(_QWORD *)(inited + 784) = 0x8000000245FCA5F0;
  *(_QWORD *)(inited + 792) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #31 of one-time initialization function for constantCreateSamplerFunctionNameToMatchingArguments);
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  constantCreateSamplerFunctionNameToMatchingArguments._rawValue = result;
  return result;
}

Swift::OpaquePointer *constantCreateSamplerFunctionNameToMatchingArguments.unsafeMutableAddressor()
{
  if (one-time initialization token for constantCreateSamplerFunctionNameToMatchingArguments != -1)
    swift_once();
  return &constantCreateSamplerFunctionNameToMatchingArguments;
}

uint64_t OrderedDictionary.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[8];

  v24[0] = a6;
  v24[1] = a7;
  v12 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[5] = a1;
  v24[6] = a2;
  v24[7] = a3;
  v24[2] = a1;
  v24[3] = a2;
  v24[4] = a3;
  v18 = *MEMORY[0x24BEE4370];
  v19 = type metadata accessor for Mirror.DisplayStyle();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  v21 = v24[0];
  type metadata accessor for OrderedDictionary(0, a4, a5, v24[0]);
  v22 = type metadata accessor for OrderedDictionary.Elements(0, a4, a5, v21);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v22);
  default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)((uint64_t)v14);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedDictionary<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return OrderedDictionary.customMirror.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], a2);
}

uint64_t OrderedDictionary.Elements._base.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.Elements._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;

  swift_release();
  swift_release();
  result = swift_release();
  *v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements._base.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t (*OrderedDictionary.elements.modify(_QWORD *a1, _QWORD *a2))()
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(_QWORD *)v5 = *(_QWORD *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  v6 = a2[2];
  *((_QWORD *)v5 + 3) = v2;
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v5 + 5) = a2[4];
  v7 = OrderedSet.init()();
  v9 = v8;
  *((_QWORD *)v5 + 6) = a2[3];
  static Array._allocateUninitialized(_:)();
  v10 = ContiguousArray.init(arrayLiteral:)();
  *(_QWORD *)v2 = v7;
  *(_QWORD *)(v2 + 8) = v9;
  *(_QWORD *)(v2 + 16) = v10;
  return OrderedDictionary.elements.modify;
}

uint64_t OrderedDictionary.Elements.keys.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t OrderedDictionary.elements.getter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t key path getter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = OrderedSet.init()();
  v8 = v7;
  static Array._allocateUninitialized(_:)();
  v9 = ContiguousArray.init(arrayLiteral:)();
  swift_release();
  swift_release();
  swift_release();
  *a2 = v6;
  a2[1] = v8;
  a2[2] = v9;
  v11[0] = v3;
  v11[1] = v4;
  v11[2] = v5;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(a2, v11);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t (*OrderedDictionary.Elements.values.modify(_QWORD *a1, _QWORD *a2))()
{
  uint64_t v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(_QWORD *)v5 = *(_QWORD *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  v6 = a2[2];
  *((_QWORD *)v5 + 3) = v2;
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v5 + 5) = a2[4];
  v7 = OrderedSet.init()();
  v9 = v8;
  *((_QWORD *)v5 + 6) = a2[3];
  static Array._allocateUninitialized(_:)();
  v10 = ContiguousArray.init(arrayLiteral:)();
  *(_QWORD *)v2 = v7;
  *(_QWORD *)(v2 + 8) = v9;
  *(_QWORD *)(v2 + 16) = v10;
  return OrderedDictionary.elements.modify;
}

void OrderedDictionary.elements.modify(_QWORD **a1)
{
  void *v1;

  v1 = *a1;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify((_QWORD *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t $defer #1 <A, B>() in OrderedDictionary.elements.modify(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  v3 = a2[2];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t OrderedDictionary.elements.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  v4 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = OrderedSet.init()();
  v10 = v9;
  static Array._allocateUninitialized(_:)();
  v11 = ContiguousArray.init(arrayLiteral:)();
  swift_release();
  swift_release();
  swift_release();
  *v4 = v8;
  v4[1] = v10;
  v4[2] = v11;
  v13[0] = a1;
  v13[1] = a2;
  v13[2] = a3;
  $defer #1 <A, B>() in OrderedDictionary.elements.modify(v4, v13);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t OrderedDictionary.Elements.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.Elements.underestimatedCount.getter()
{
  return ContiguousArray.count.getter();
}

uint64_t OrderedDictionary.Elements.makeIterator()(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance OrderedDictionary<A, B>.Elements@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = OrderedDictionary.Elements.makeIterator()(*v1);
  v5 = v4;
  v7 = v6;
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedDictionary<A, B>.Elements()
{
  return OrderedDictionary.Elements.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedDictionary<A, B>.Elements(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, a1);
  v4 = specialized Collection._copyToContiguousArray()(v1, a1, v3);
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t OrderedDictionary.Elements.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  BOOL v4;
  Swift::Int_optional result;

  v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t OrderedDictionary.Elements.subscript.getter()
{
  ContiguousArray.subscript.getter();
  return ContiguousArray.subscript.getter();
}

uint64_t OrderedDictionary.Elements.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t result;

  result = ContiguousArray.count.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a6 = a3;
    a6[1] = a4;
    a6[2] = a5;
    a6[3] = a1;
    a6[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t OrderedDictionary.Elements.isEmpty.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v0);
  return Collection.isEmpty.getter() & 1;
}

uint64_t OrderedDictionary.Elements._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v5[1] = a3;
  v6 = a1;
  v5[0] = a2;
  v3 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v3);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v6, (uint64_t)v5);
}

void (*protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v9 = (char *)malloc(v8);
  a1[2] = (uint64_t)v9;
  v10 = (char *)malloc(v8);
  a1[3] = (uint64_t)v10;
  v11 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  ContiguousArray.subscript.getter();
  ContiguousArray.subscript.getter();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v9, v10, v5);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v11, v4);
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements;
}

void protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Elements(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void (*v4)(void *, uint64_t);

  v2 = (void *)a1[2];
  v1 = (void *)a1[3];
  v3 = *a1;
  v4 = *(void (**)(void *, uint64_t))(a1[1] + 8);
  v4(v2, *a1);
  v4(v1, v3);
  free(v1);
  free(v2);
}

double protocol witness for Collection.subscript.getter in conformance OrderedDictionary<A, B>.Elements@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  OrderedDictionary.Elements.subscript.getter(*a1, a1[1], *v2, v2[1], v2[2], v6);
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance OrderedDictionary<A, B>.Elements(uint64_t a1)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance OrderedDictionary<A, B>.Elements()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v0);
  return Collection.isEmpty.getter() & 1;
}

uint64_t protocol witness for Collection.count.getter in conformance OrderedDictionary<A, B>.Elements()
{
  return ContiguousArray.count.getter();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance OrderedDictionary<A, B>.Elements(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v5 = *a1;
  v4 = *a2;
  v2 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v2);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v5, (uint64_t)&v4);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(_QWORD *a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedDictionary.Elements.description.getter);
}

uint64_t OrderedDictionary.Elements.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6E656D656C452E3ELL;
  v3._object = (void *)0xEA00000000007374;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xD000000000000012;
  v4._object = (void *)0x8000000245FCA630;
  countAndFlagsBits = OrderedDictionary._debugDescription(typeName:)(v4)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedDictionary<A, B>.Elements(_QWORD *a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))OrderedDictionary.Elements.debugDescription.getter);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrderedDictionary<A, B>.Elements(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t OrderedDictionary.Elements.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[8];

  v23[0] = a6;
  v23[1] = a7;
  v12 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[5] = a1;
  v23[6] = a2;
  v23[7] = a3;
  v23[2] = a1;
  v23[3] = a2;
  v23[4] = a3;
  v18 = *MEMORY[0x24BEE4368];
  v19 = type metadata accessor for Mirror.DisplayStyle();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  v21 = type metadata accessor for OrderedDictionary.Elements(0, a4, a5, v23[0]);
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedDictionary<A, B>.Elements, v21);
  default argument 3 of Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)((uint64_t)v14);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance OrderedDictionary<A, B>.Elements@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return OrderedDictionary.Elements.customMirror.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], a2);
}

uint64_t static OrderedDictionary.Elements<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return static OrderedDictionary<>.== infix(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> OrderedDictionary<A, B>.Elements(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return static OrderedDictionary.Elements<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4]) & 1;
}

Swift::Int OrderedDictionary.Elements<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE v15[72];

  Hasher.init(_seed:)();
  OrderedDictionary<>.hash(into:)((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> OrderedDictionary<A, B>.Elements(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return OrderedDictionary.Elements<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> OrderedDictionary<A, B>.Elements(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;

  return OrderedDictionary.Elements<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> OrderedDictionary<A, B>.Elements(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _BYTE v7[72];

  v5 = *(_QWORD *)(a3 - 8);
  Hasher.init(_seed:)();
  OrderedDictionary.Elements<>.hash(into:)(v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return Hasher._finalize()();
}

Swift::Void __swiftcall OrderedDictionary.Elements.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t *v2;

  OrderedDictionary.Elements.swapAt(_:_:)(a1, a2, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.swapAt(_:_:));
}

_QWORD *OrderedDictionary.Elements.partition(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)type metadata accessor for OrderedDictionary(0, a3[2], a3[3], a3[4]);
  return OrderedDictionary.partition(by:)(a1, a2, v5);
}

uint64_t OrderedDictionary.Elements.sort(by:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return OrderedDictionary.Elements.sort(by:)(a1, a2, a3, OrderedDictionary.sort(by:));
}

uint64_t OrderedDictionary.Elements<>.sort()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for OrderedDictionary(0, a1[2], a1[3], a1[4]);
  return OrderedDictionary<>.sort()(v3, a2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.shuffle()()
{
  uint64_t *v0;

  OrderedDictionary.Elements.shuffle()(v0, (uint64_t (*)(uint64_t))OrderedDictionary.shuffle());
}

uint64_t OrderedDictionary.Elements.shuffle<A>(using:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)type metadata accessor for OrderedDictionary(0, a2[2], a2[3], a2[4]);
  return OrderedDictionary.shuffle<A>(using:)(a1, v3);
}

Swift::Void __swiftcall OrderedDictionary.Elements.reverse()()
{
  uint64_t *v0;

  OrderedDictionary.Elements.shuffle()(v0, (uint64_t (*)(uint64_t))OrderedDictionary.reverse());
}

uint64_t OrderedDictionary.Elements.shuffle()(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  v2 = type metadata accessor for OrderedDictionary(0, a1[2], a1[3], a1[4]);
  return a2(v2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t *v1;

  type metadata accessor for OrderedDictionary(0, v1[2], v1[3], v1[4]);
  OrderedDictionary.removeAll(keepingCapacity:)(keepingCapacity);
}

uint64_t OrderedDictionary.Elements.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;

  v7 = type metadata accessor for OrderedDictionary(0, a4[2], a4[3], a4[4]);
  return OrderedDictionary.remove(at:)(a1, a2, a3, v7);
}

uint64_t OrderedDictionary.Elements.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return OrderedDictionary.Elements.swapAt(_:_:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeSubrange(_:));
}

uint64_t OrderedDictionary.Elements.swapAt(_:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = type metadata accessor for OrderedDictionary(0, a3[2], a3[3], a3[4]);
  return a4(a1, a2, v6);
}

uint64_t OrderedDictionary.Elements.removeSubrange<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)type metadata accessor for OrderedDictionary(0, a2[2], a2[3], a2[4]);
  return OrderedDictionary.removeSubrange<A>(_:)(a1, v3);
}

uint64_t OrderedDictionary.Elements.removeLast()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return OrderedDictionary.Elements.swapAt(_:_:)(a1, a2, a3, OrderedDictionary.removeLast());
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeLast(_:)(Swift::Int a1)
{
  uint64_t *v1;

  OrderedDictionary.Elements.removeLast(_:)(a1, v1, (uint64_t (*)(uint64_t, uint64_t))OrderedDictionary.removeLast(_:));
}

uint64_t OrderedDictionary.Elements.removeFirst()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return OrderedDictionary.Elements.swapAt(_:_:)(a1, a2, a3, OrderedDictionary.removeFirst());
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeFirst(_:)(Swift::Int a1)
{
  uint64_t *v1;

  OrderedDictionary.Elements.removeLast(_:)(a1, v1, (uint64_t (*)(uint64_t, uint64_t))OrderedDictionary.removeFirst(_:));
}

uint64_t OrderedDictionary.Elements.removeLast(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;

  v4 = type metadata accessor for OrderedDictionary(0, a2[2], a2[3], a2[4]);
  return a3(a1, v4);
}

uint64_t OrderedDictionary.Elements.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return OrderedDictionary.Elements.sort(by:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeAll(where:));
}

uint64_t OrderedDictionary.Elements.sort(by:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = type metadata accessor for OrderedDictionary(0, a3[2], a3[3], a3[4]);
  return a4(a1, a2, v7);
}

uint64_t type metadata accessor for OrderedDictionary.Elements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedDictionary.Elements);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedDictionary<A, B>.Elements()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for BidirectionalCollection in OrderedDictionary<A, B>.Elements()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedDictionary<A, B>.Elements()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Collection in OrderedDictionary<A, B>.Elements()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in OrderedDictionary<A, B>.Elements()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Sequence in OrderedDictionary<A, B>.Elements()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : Collection in OrderedDictionary<A, B>.Elements()
{
  JUMPOUT(0x24954C264);
}

uint64_t base witness table accessor for Equatable in <> OrderedDictionary<A, B>.Elements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x24954C264](&protocol conformance descriptor for <> OrderedDictionary<A, B>.Elements, a1, &v4);
}

uint64_t sub_245EA9F1C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_245EA9F30(uint64_t *a1, uint64_t *a2)
{
  return key path setter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_245EA9F44()
{
  return 24;
}

__n128 sub_245EA9F50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_245EA9F64@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_245EA9F78(uint64_t *a1, uint64_t *a2)
{
  return key path setter for OrderedDictionary.elements : <A, B>OrderedDictionary<A, B>(a1, a2);
}

uint64_t sub_245EA9F8C()
{
  return 24;
}

__n128 sub_245EA9F98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t GeomPropDef.init(name:type:geomprop:space:index:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  *(_BYTE *)(a9 + 41) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_BYTE *)(a9 + 56) = a10 & 1;
  return result;
}

uint64_t GeomPropDef.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeomPropDef.type.getter()
{
  return swift_retain();
}

uint64_t GeomPropDef.geomprop.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of GeomPropDef.GeomProp(v1, *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return v1;
}

uint64_t GeomPropDef.space.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t GeomPropDef.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t GeomPropDef.Space.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6C65646F6DLL;
  if (a1 == 1)
    return 0x7463656A626FLL;
  return 0x646C726F77;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GeomPropDef.Space(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE600000000000000;
  v4 = 0x7463656A626FLL;
  if (v2 != 1)
  {
    v4 = 0x646C726F77;
    v3 = 0xE500000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x6C65646F6DLL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE500000000000000;
  v7 = 0xE600000000000000;
  v8 = 0x7463656A626FLL;
  if (*a2 != 1)
  {
    v8 = 0x646C726F77;
    v7 = 0xE500000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6C65646F6DLL;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xE500000000000000;
  if (v5 == v9 && v6 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeomPropDef.Space()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeomPropDef.Space()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeomPropDef.Space()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeomPropDef.Space@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized GeomPropDef.Space.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GeomPropDef.Space(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x7463656A626FLL;
  if (v2 != 1)
  {
    v5 = 0x646C726F77;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6C65646F6DLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void GeomPropDef.GeomProp.paramGetterNodeDefName(type:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  _OWORD v25[12];
  __int128 v26;

  if ((a4 & 1) != 0)
  {
    *(_QWORD *)&v22 = a2;
    *((_QWORD *)&v22 + 1) = a3;
    v23 = 1;
    v24 = a1;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi21_((uint64_t)&v22);
    *(_QWORD *)&v25[0] = 0;
    *((_QWORD *)&v25[0] + 1) = 0xE000000000000000;
    outlined copy of GeomPropDef.GeomProp(a2, (uint64_t)a3, 1);
    swift_retain();
    _StringGuts.grow(_:)(65);
    v6._object = (void *)0x8000000245FCA650;
    v6._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v6);
    v7._countAndFlagsBits = a2;
    v7._object = a3;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0x7420687469772027;
    v8._object = (void *)0xED00002720657079;
    String.append(_:)(v8);
    v9._countAndFlagsBits = MaterialXDataType.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 39;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    v11 = v25[0];
    outlined init with take of UserGraphError.ErrorType(&v22, (uint64_t)v25);
    v26 = v11;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v12 = v25[0];
    v13 = v25[4];
    v15 = v25[1];
    v14 = v25[2];
    v12[3] = v25[3];
    v12[4] = v13;
    v12[1] = v15;
    v12[2] = v14;
    v16 = v25[8];
    v18 = v25[5];
    v17 = v25[6];
    v12[7] = v25[7];
    v12[8] = v16;
    v12[5] = v18;
    v12[6] = v17;
    v19 = v26;
    v21 = v25[9];
    v20 = v25[10];
    v12[11] = v25[11];
    v12[12] = v19;
    v12[9] = v21;
    v12[10] = v20;
    swift_willThrow();
  }
  else
  {
    GeomPropDef.BuiltinGeomProp.paramGetterNodeDefName(type:)(a1, a2);
  }
}

void GeomPropDef.BuiltinGeomProp.paramGetterNodeDefName(type:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

unint64_t sub_245EAA5C4()
{
  return 0xD000000000000013;
}

void *static GeomPropDef.BuiltinGeomProp.allCases.getter()
{
  return &outlined read-only object #0 of static GeomPropDef.BuiltinGeomProp.allCases.getter;
}

uint64_t GeomPropDef.BuiltinGeomProp.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_245EAAAE4 + 4 * byte_245FC0EDE[a1]))(0x6E6F697469736F70, 0xE800000000000000);
}

uint64_t sub_245EAAAE4()
{
  return 0x6C616D726F6ELL;
}

uint64_t sub_245EAAAF8()
{
  return 0x746E65676E6174;
}

uint64_t sub_245EAAB10()
{
  return 0x6E65676E61746962;
}

uint64_t sub_245EAAB30()
{
  return 0x64726F6F63786574;
}

uint64_t sub_245EAAB44()
{
  return 0x6F6C6F636D6F6567;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance GeomPropDef.BuiltinGeomProp(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_245EAABB4@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_245EAAC48 + 4 * byte_245FC0EEA[a1]))(0x6C616D726F6ELL);
}

uint64_t sub_245EAAC48(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C616D726F6ELL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GeomPropDef.BuiltinGeomProp@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized GeomPropDef.BuiltinGeomProp.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GeomPropDef.BuiltinGeomProp()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_245EAAD8C + 4 * byte_245FC0EF0[*v0]))();
}

void sub_245EAAD8C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616D726F6ELL;
  a1[1] = 0xE600000000000000;
}

void sub_245EAADA4(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65676E6174;
  a1[1] = 0xE700000000000000;
}

void sub_245EAADC0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E65676E61746962;
  a1[1] = 0xE900000000000074;
}

void sub_245EAADE4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x64726F6F63786574;
  a1[1] = v1;
}

void sub_245EAADFC(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6C6F636D6F6567;
  a1[1] = 0xE900000000000072;
}

void protocol witness for Hashable.hashValue.getter in conformance GeomPropDef.BuiltinGeomProp()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245EAAE68()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GeomPropDef.BuiltinGeomProp()
{
  __asm { BR              X10 }
}

uint64_t sub_245EAAF48()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance GeomPropDef.BuiltinGeomProp()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_245EAB020()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance GeomPropDef.BuiltinGeomProp(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static GeomPropDef.BuiltinGeomProp.allCases.getter;
}

unint64_t specialized GeomPropDef.BuiltinGeomProp.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeomPropDef.BuiltinGeomProp.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t specialized GeomPropDef.Space.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeomPropDef.Space.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi21_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x5800000000000000;
  return result;
}

unint64_t lazy protocol witness table accessor for type GeomPropDef.Space and conformance GeomPropDef.Space()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeomPropDef.Space and conformance GeomPropDef.Space;
  if (!lazy protocol witness table cache variable for type GeomPropDef.Space and conformance GeomPropDef.Space)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for GeomPropDef.Space, &type metadata for GeomPropDef.Space);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeomPropDef.Space and conformance GeomPropDef.Space);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp;
  if (!lazy protocol witness table cache variable for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp)
  {
    result = MEMORY[0x24954C264](&protocol conformance descriptor for GeomPropDef.BuiltinGeomProp, &type metadata for GeomPropDef.BuiltinGeomProp);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeomPropDef.BuiltinGeomProp and conformance GeomPropDef.BuiltinGeomProp);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [GeomPropDef.BuiltinGeomProp] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [GeomPropDef.BuiltinGeomProp] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GeomPropDef.BuiltinGeomProp] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GeomPropDef.BuiltinGeomProp]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [GeomPropDef.BuiltinGeomProp] and conformance [A]);
  }
  return result;
}

uint64_t destroy for GeomPropDef(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return outlined consume of GeomPropDef.GeomProp(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for GeomPropDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of GeomPropDef.GeomProp(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for GeomPropDef(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  outlined copy of GeomPropDef.GeomProp(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of GeomPropDef.GeomProp(v7, v8, v9);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GeomPropDef(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of GeomPropDef.GeomProp(v5, v6, v7);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeomPropDef(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeomPropDef(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeomPropDef()
{
  return &type metadata for GeomPropDef;
}

uint64_t storeEnumTagSinglePayload for GeomPropDef.Space(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_245EAB54C + 4 * byte_245FC0F0D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_245EAB580 + 4 * byte_245FC0F08[v4]))();
}

uint64_t sub_245EAB580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245EAB588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245EAB590);
  return result;
}

uint64_t sub_245EAB59C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245EAB5A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_245EAB5A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245EAB5B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GeomPropDef.Space()
{
  return &type metadata for GeomPropDef.Space;
}

uint64_t destroy for GeomPropDef.GeomProp(uint64_t a1)
{
  return outlined consume of GeomPropDef.GeomProp(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for GeomPropDef.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of GeomPropDef.GeomProp(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GeomPropDef.GeomProp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of GeomPropDef.GeomProp(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of GeomPropDef.GeomProp(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for GeomPropDef.GeomProp(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of GeomPropDef.GeomProp(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for GeomPropDef.GeomProp()
{
  return &type metadata for GeomPropDef.GeomProp;
}

uint64_t getEnumTagSinglePayload for GeomPropDef.BuiltinGeomProp(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GeomPropDef.BuiltinGeomProp(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_245EAB7AC + 4 * byte_245FC0F17[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_245EAB7E0 + 4 * byte_245FC0F12[v4]))();
}

uint64_t sub_245EAB7E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245EAB7E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245EAB7F0);
  return result;
}

uint64_t sub_245EAB7FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245EAB804);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_245EAB808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245EAB810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GeomPropDef.BuiltinGeomProp()
{
  return &type metadata for GeomPropDef.BuiltinGeomProp;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = MEMORY[0x24BEE4AF8];
  v8 = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_retain();
    swift_retain();
    do
    {
      outlined init with copy of WeakBox<SGEdge>(v4, (uint64_t)&v7);
      v5 = MEMORY[0x24954C3E4](&v7);
      v6 = outlined destroy of WeakBox<SGEdge>((uint64_t)&v7);
      if (v5)
      {
        MEMORY[0x24954B1A8](v6);
        if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_release();
    swift_release();
    return v8;
  }
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  if (a1 >> 62)
    goto LABEL_17;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    for (i = 4; ; ++i)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24954B748](i - 4, a1) : *(id *)(a1 + 8 * i);
      v8 = v7;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      SGNode.legacyNode(in:)(a2, (uint64_t)v16);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }
      outlined init with take of NodePersonality(v16, &v19);
      outlined release of NodePersonality(&v19);
      v18 = v16[1];
      outlined release of [Input]((uint64_t)&v18);
      v17 = v16[2];
      outlined release of [Input]((uint64_t)&v17);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v11 = v5[2];
      v10 = v5[3];
      if (v11 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
      v12 = v16[3];
      v5[2] = v11 + 1;
      v13 = &v5[2 * v11];
      v13[4] = v8;
      v13[5] = v12;
      if (v9 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v21 = v3 & 0xC000000000000001;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v6 = 4;
    v19 = v4;
    v20 = v3;
    while (1)
    {
      v8 = v21 ? (id)MEMORY[0x24954B748](v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      v9 = v8;
      v10 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v30 = v8;
      closure #3 in SGGraph.createCustomUniformsType(named:textureAssignments:)((uint64_t *)&v30, a2, (uint64_t)&v25);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v5;
      }

      if ((_QWORD)v26)
      {
        v24 = v26;
        v11 = v27;
        v12 = v28;
        v13 = v29;
        v23 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v15 = v5[2];
        v14 = v5[3];
        v16 = v24;
        if (v15 >= v14 >> 1)
        {
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v5);
          v16 = v24;
          v5 = v17;
        }
        v5[2] = v15 + 1;
        v7 = &v5[6 * v15];
        v7[4] = v23;
        *(_OWORD *)(v7 + 5) = v16;
        v7[7] = v11;
        *((_BYTE *)v7 + 64) = v12 & 1;
        v7[9] = v13;
        v4 = v19;
        v3 = v20;
      }
      ++v6;
      if (v10 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;

  v4 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    v20 = v4 & 0xC000000000000001;
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v7 = 4;
    v18 = v5;
    v19 = v4;
    while (1)
    {
      v9 = v20 ? (id)MEMORY[0x24954B748](v7 - 4, v4) : *(id *)(v4 + 8 * v7);
      v10 = v9;
      v11 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v46 = v9;
      closure #4 in mapGraph(_:into:)((uint64_t *)&v46, a2, a3, (uint64_t)&v33);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v6;
      }

      v12 = v34;
      if (v34)
      {
        v25 = v36;
        v26 = v35;
        v23 = v33;
        v24 = v37;
        v32 = v39;
        v29 = v42;
        v13 = v44;
        v27 = v38;
        v28 = v43;
        v14 = v45;
        v30 = v41;
        v31 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v16 = v6[2];
        v15 = v6[3];
        if (v16 >= v15 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v6);
        v6[2] = v16 + 1;
        v8 = &v6[14 * v16];
        v8[4] = v23;
        v8[5] = v12;
        v8[6] = v26;
        v8[7] = v25;
        v8[8] = v24;
        *((_BYTE *)v8 + 72) = v27 & 1;
        *((_OWORD *)v8 + 5) = v32;
        v8[12] = v31;
        v8[13] = v30;
        v8[14] = v29;
        v8[15] = v28;
        *((_BYTE *)v8 + 128) = v13 & 1;
        v8[17] = v14;
        v5 = v18;
        v4 = v19;
      }
      ++v7;
      if (v11 == v5)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph7NodeDefV_G_SS_AH17BuiltInDefinitionVts5NeverOTg504_s11e7Graph22ijk12StoreC07nodeh12F0AcA04NodehQ30V_tcfcSS_AA0cdE0VtAA0iH0VXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[10];
  uint64_t v46;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v39 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v39;
  result = specialized Dictionary.Values.startIndex.getter(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v30 = v3 + 80;
  v31 = v1;
  v32 = v5;
  v33 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v34 = v7;
    v12 = (_OWORD *)(*(_QWORD *)(v3 + 56) + 144 * v6);
    v45[0] = *v12;
    v13 = v12[4];
    v15 = v12[1];
    v14 = v12[2];
    v45[3] = v12[3];
    v45[4] = v13;
    v45[1] = v15;
    v45[2] = v14;
    v16 = v12[8];
    v18 = v12[5];
    v17 = v12[6];
    v45[7] = v12[7];
    v45[8] = v16;
    v45[5] = v18;
    v45[6] = v17;
    v19 = *((_QWORD *)&v45[0] + 1);
    v46 = *(_QWORD *)&v45[0];
    outlined retain of NodeDef((uint64_t)v45);
    swift_bridgeObjectRetain();
    specialized BuiltInDefinition.init(nodeDef:)(v45, &v40);
    v38 = v41;
    v20 = v42;
    v36 = v43;
    v37 = v40;
    v35 = v44;
    result = outlined release of NodeDef((uint64_t)v45);
    v21 = v3;
    v23 = *(_QWORD *)(v39 + 16);
    v22 = *(_QWORD *)(v39 + 24);
    if (v23 >= v22 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
    *(_QWORD *)(v39 + 16) = v23 + 1;
    v24 = v39 + (v23 << 6);
    *(_QWORD *)(v24 + 32) = v46;
    *(_QWORD *)(v24 + 40) = v19;
    *(_QWORD *)(v24 + 48) = v37;
    *(_OWORD *)(v24 + 56) = v38;
    *(_QWORD *)(v24 + 72) = v20;
    *(_QWORD *)(v24 + 80) = v36;
    *(_QWORD *)(v24 + 88) = v35;
    v9 = 1 << *(_BYTE *)(v21 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v33;
    v25 = *(_QWORD *)(v33 + 8 * v11);
    if ((v25 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v21;
    v5 = v32;
    if (*(_DWORD *)(v21 + 36) != v32)
      goto LABEL_27;
    v26 = v25 & (-2 << (v6 & 0x3F));
    if (v26)
    {
      v9 = __clz(__rbit64(v26)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v31;
    }
    else
    {
      v27 = v11 + 1;
      v28 = (unint64_t)(v9 + 63) >> 6;
      v10 = v31;
      if (v11 + 1 < v28)
      {
        v29 = *(_QWORD *)(v33 + 8 * v27);
        if (v29)
        {
LABEL_20:
          v9 = __clz(__rbit64(v29)) + (v27 << 6);
        }
        else
        {
          while (v28 - 2 != v11)
          {
            v29 = *(_QWORD *)(v30 + 8 * v11++);
            if (v29)
            {
              v27 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v34 + 1;
    v6 = v9;
    if (v34 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV13ReservedNamesOG_SSs5NeverOTg504_s11d84Graph03mapB033_409C205F32E965F544D867255561D769LL_4intoyAA7SGGraphC_AA0B0VztKFSSAA17fgh3V13iJ54Ocfu_33_9a8543e77c82589f922673eb5cf911b0ALSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v10 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v4 = (_BYTE *)(a1 + 32);
    result = v10;
    do
    {
      if (*v4)
        v5 = 0x746C757365725F5FLL;
      else
        v5 = 0x656D756772615F5FLL;
      if (*v4)
        v6 = 0xE900000000000073;
      else
        v6 = 0xEB0000000073746ELL;
      v11 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        result = v11;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      v9 = result + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v6;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s6UInt16Vs5NeverOTg5(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *(*v16)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = (_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v19 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v15 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v17 = v11;
      result = v16(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v18;
      v19 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_WORD *)(v7 + 2 * v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v15 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5Int32Vs5NeverOTg5(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *(*v16)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = (_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v19 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v15 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v17 = v11;
      result = v16(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v18;
      v19 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v15 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *(*v15)(int *__return_ptr, uint64_t *);
  uint64_t v16;
  int v17;
  uint64_t v18;

  v15 = (_QWORD *(*)(int *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v18 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v18;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v11 = a3;
    while (a4 != v11)
    {
      v16 = v11;
      result = v15(&v17, &v16);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v17;
      v18 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v7 = v18;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v10 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AF7SGInputCs5NeverOTg504_s11d76Graph7SGGraphC34replaceDeprecatedAndRedundantNodesyyKFyAA15TopologicalSortV7b10VKXEfU_AA7g4CAA6F54Ccfu0_33_8ffafd5b6a296e22d4e39828be60e38bAlJTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  void *v6;
  id *v7;
  id v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x24BEE4AF8];
    if (!v2)
      break;
    v9 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (char *)MEMORY[0x24954B748](v4, a1);
      else
        v5 = (char *)*(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      v7 = (id *)&v5[OBJC_IVAR___SGEdge_to];
      swift_beginAccess();
      v8 = *v7;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4)
        return v9;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SGDataType.materialXDataType.getter(uint64_t a1)
{
  specialized SGDataType.materialXDataType.getter(a1);
  return swift_retain();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SGGraph.replaceDeprecatedAndRedundantNodes()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[3];

  v1 = specialized SGGraph.deprecationMap()();
  if (!v0)
  {
    v2 = v1;
    v3 = SGGraph.topologicalSort()();
    v5 = v4;
    v7 = v6;

    v9 = *((_QWORD *)v3 + 2);
    if (v9)
    {
      swift_bridgeObjectRetain();
      v10 = (void **)(v3 + 3);
      do
      {
        v12 = *(v10 - 1);
        v13 = *v10;
        v17[0] = *(v10 - 2);
        v11 = (void *)v17[0];
        v17[1] = v12;
        v17[2] = v13;
        v14 = v13;
        v15 = v11;
        v16 = v12;
        closure #1 in SGGraph.replaceDeprecatedAndRedundantNodes()((uint64_t)v17, v2);
        v10 += 3;

        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t *BuiltInDefinitionStore.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static BuiltInDefinitionStore.shared;
}

uint64_t SGGraph.legacyGraph()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD v49[9];
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  unint64_t v61;

  v3 = v1;
  v5 = (unint64_t *)(v1 + OBJC_IVAR___SGGraph_inputs);
  swift_beginAccess();
  v6 = *v5;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v8 = MEMORY[0x24BEE4AF8];
  v44 = a1;
  v45 = v2;
  v46 = v3;
  if (v7)
  {
    *(_QWORD *)&v51 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_32;
    }
    v10 = 0;
    v11 = v51;
    v47 = v6 & 0xC000000000000001;
    v61 = v6;
    v12 = v7;
    do
    {
      if (v47)
        v13 = (char *)MEMORY[0x24954B748](v10, v6);
      else
        v13 = (char *)*(id *)(v6 + 8 * v10 + 32);
      v14 = v13;
      v15 = *(_QWORD *)&v13[OBJC_IVAR___SGInput_name];
      v16 = *(_QWORD *)&v13[OBJC_IVAR___SGInput_name + 8];
      v17 = (uint64_t *)&v13[OBJC_IVAR___SGInput_type];
      swift_beginAccess();
      v18 = *v17;
      swift_bridgeObjectRetain();
      v19 = specialized SGDataType.materialXDataType.getter(v18);
      swift_retain();

      *(_QWORD *)&v51 = v11;
      v21 = *(_QWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v11 = v51;
      }
      ++v10;
      *(_QWORD *)(v11 + 16) = v21 + 1;
      v22 = (_QWORD *)(v11 + 24 * v21);
      v22[4] = v15;
      v22[5] = v16;
      v22[6] = v19;
      v6 = v61;
    }
    while (v12 != v10);
    swift_bridgeObjectRelease();
    v3 = v46;
    v8 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v23 = (unint64_t *)(v3 + OBJC_IVAR___SGGraph_outputs);
  swift_beginAccess();
  v24 = *v23;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    if (v25)
    {
LABEL_16:
      *(_QWORD *)&v51 = v8;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25 & ~(v25 >> 63), 0);
      if ((v25 & 0x8000000000000000) == 0)
      {
        v26 = 0;
        v8 = v51;
        v48 = v24 & 0xC000000000000001;
        v61 = v24;
        do
        {
          if (v48)
            v27 = (char *)MEMORY[0x24954B748](v26, v24);
          else
            v27 = (char *)*(id *)(v24 + 8 * v26 + 32);
          v28 = v27;
          v29 = *(_QWORD *)&v27[OBJC_IVAR___SGOutput_name];
          v30 = *(_QWORD *)&v27[OBJC_IVAR___SGOutput_name + 8];
          v31 = (uint64_t *)&v27[OBJC_IVAR___SGOutput_type];
          swift_beginAccess();
          v32 = *v31;
          swift_bridgeObjectRetain();
          v33 = specialized SGDataType.materialXDataType.getter(v32);
          swift_retain();

          *(_QWORD *)&v51 = v8;
          v35 = *(_QWORD *)(v8 + 16);
          v34 = *(_QWORD *)(v8 + 24);
          if (v35 >= v34 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
            v8 = v51;
          }
          ++v26;
          *(_QWORD *)(v8 + 16) = v35 + 1;
          v36 = (_QWORD *)(v8 + 24 * v35);
          v36[4] = v29;
          v36[5] = v30;
          v36[6] = v33;
          v24 = v61;
        }
        while (v25 != v26);
        swift_bridgeObjectRelease();
        v3 = v46;
        goto LABEL_28;
      }
LABEL_32:
      __break(1u);
      return result;
    }
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_16;
  }
  swift_bridgeObjectRelease();
LABEL_28:
  v38 = *(_QWORD *)(v3 + OBJC_IVAR___SGGraph_name);
  v37 = *(_QWORD *)(v3 + OBJC_IVAR___SGGraph_name + 8);
  swift_bridgeObjectRetain();
  specialized Graph.init(id:label:inputs:outputs:)(0, v38, v37, v11, v8, (uint64_t)&v51);
  result = mapGraph(_:into:)(v3, &v51);
  if (v45)
  {
    v49[8] = v59;
    v50[0] = v60[0];
    *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)((char *)v60 + 9);
    v49[4] = v55;
    v49[5] = v56;
    v49[6] = v57;
    v49[7] = v58;
    v49[0] = v51;
    v49[1] = v52;
    v49[2] = v53;
    v49[3] = v54;
    return outlined release of Graph((uint64_t)v49);
  }
  else
  {
    v39 = v60[0];
    v44[8] = v59;
    v44[9] = v39;
    *(_OWORD *)((char *)v44 + 153) = *(_OWORD *)((char *)v60 + 9);
    v40 = v56;
    v44[4] = v55;
    v44[5] = v40;
    v41 = v58;
    v44[6] = v57;
    v44[7] = v41;
    v42 = v52;
    *v44 = v51;
    v44[1] = v42;
    v43 = v54;
    v44[2] = v53;
    v44[3] = v43;
  }
  return result;
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (one-time initialization token for shared != -1)
    swift_once();
  v0 = static NodeDefStore.shared;
  v1 = qword_2575364F8;
  v2 = qword_257536500;
  type metadata accessor for BuiltInDefinitionStore();
  v3 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = BuiltInDefinitionStore.init(nodeDefStore:)(v0, v1, v2);
  static BuiltInDefinitionStore.shared = v3;
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = specialized static NodeDefStore.createDefault()();
  static NodeDefStore.shared = result;
  qword_2575364F8 = v1;
  qword_257536500 = v2;
  return result;
}

uint64_t BuiltInDefinitionStore.__allocating_init(nodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  BuiltInDefinitionStore.init(nodeDefStore:)(a1, a2, a3);
  return v6;
}

uint64_t static BuiltInDefinitionStore.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t BuiltInDefinitionStore.nodeDefStore.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltInDefinitionStore.init(nodeDefStore:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  if (one-time initialization token for shared != -1)
    swift_once();
  v4 = swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS11ShaderGraph7NodeDefV_G_SS_AH17BuiltInDefinitionVts5NeverOTg504_s11e7Graph22ijk12StoreC07nodeh12F0AcA04NodehQ30V_tcfcSS_AA0cdE0VtAA0iH0VXEfU_Tf1cn_n(v4);
  swift_bridgeObjectRelease();
  v8 = 0;
  *(_QWORD *)&v9 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v9 + 1) = MEMORY[0x24BEE4AF8];
  specialized OrderedDictionary.merge<A>(_:uniquingKeysWith:)(v5, (void (*)(_BYTE *__return_ptr, uint64_t *))specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:), 0, &v8);
  swift_bridgeObjectRelease();
  v6 = v9;
  *(_QWORD *)(v3 + 40) = v8;
  *(_OWORD *)(v3 + 48) = v6;
  return v3;
}

uint64_t closure #2 in BuiltInDefinitionStore.init(nodeDefStore:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v13;
  NSObject *log;
  os_log_type_t type;
  uint64_t v16;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialXAvailability(v7, v8);
  v10 = Logger.logObject.getter();
  type = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, type))
  {
    log = v10;
    v11 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v16 = v13;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    outlined consume of MaterialXAvailability(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v7, v8);
    _os_log_impl(&dword_245E46000, log, type, "Duplicate NodeDef: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24954C33C](v13, -1, -1);
    MEMORY[0x24954C33C](v11, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v7, v8);

  }
  *a2 = v4;
  a2[1] = v3;
  a2[2] = v6;
  a2[3] = v5;
  a2[4] = v7;
  a2[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined copy of MaterialXAvailability(v7, v8);
}

unint64_t BuiltInDefinitionStore.definition(named:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = v3[5];
  v8 = (_QWORD *)v3[6];
  v9 = v3[7];
  swift_bridgeObjectRetain();
  result = specialized OrderedSet._find(_:)(a1, a2, v7, v8);
  if ((v11 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)(v9 + 16))
  {
    v12 = (_QWORD *)(v9 + 48 * result);
    v13 = v12[4];
    v14 = v12[5];
    v15 = v12[6];
    v16 = v12[7];
    v17 = v12[8];
    v18 = v12[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MaterialXAvailability(v17, v18);
LABEL_6:
    result = swift_bridgeObjectRelease();
    *a3 = v13;
    a3[1] = v14;
    a3[2] = v15;
    a3[3] = v16;
    a3[4] = v17;
    a3[5] = v18;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t BuiltInDefinitionStore.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t BuiltInDefinitionStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized toString<A>(_:)(double a1)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD v17[4];
  uint64_t v18;
  unint64_t v19;
  int v20;
  double v21;

  v21 = a1;
  v17[2] = &v21;
  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(partial apply for specialized closure #1 in toString<A>(_:), (uint64_t)v17, 0, 2);
  v2 = v1[2];
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = 0;
    v4 = v18;
    do
    {
      v20 = *((_DWORD *)v1 + v3 + 8);
      v5 = String.init<A>(describing:)();
      v7 = v6;
      v18 = v4;
      v9 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v4 = v18;
      }
      ++v3;
      *(_QWORD *)(v4 + 16) = v9 + 1;
      v10 = v4 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x24BEE4AF8];
  }
  v18 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v11 = BidirectionalCollection<>.joined(separator:)();
  v13 = v12;
  swift_bridgeObjectRelease();
  v18 = 123;
  v19 = 0xE100000000000000;
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 125;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v18;
}

{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD v17[4];
  uint64_t v18;
  unint64_t v19;
  int v20;
  double v21;

  v21 = a1;
  v17[2] = &v21;
  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5Int32Vs5NeverOTg5(partial apply for specialized closure #1 in toString<A>(_:), (uint64_t)v17, 0, 2);
  v2 = v1[2];
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = 0;
    v4 = v18;
    do
    {
      v20 = *((_DWORD *)v1 + v3 + 8);
      v5 = String.init<A>(describing:)();
      v7 = v6;
      v18 = v4;
      v9 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v4 = v18;
      }
      ++v3;
      *(_QWORD *)(v4 + 16) = v9 + 1;
      v10 = v4 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x24BEE4AF8];
  }
  v18 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v11 = BidirectionalCollection<>.joined(separator:)();
  v13 = v12;
  swift_bridgeObjectRelease();
  v18 = 123;
  v19 = 0xE100000000000000;
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 125;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t specialized toString<A>(_:)(_QWORD *a1, uint64_t a2, __n128 a3)
{
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[3];
  uint64_t v20;
  unint64_t v21;
  int v22;
  __n128 v23;

  v23 = a3;
  v19[2] = &v23;
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Sfs5NeverOTg5(a1, (uint64_t)v19, 0, a2);
  v4 = v3[2];
  if (v4)
  {
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = 0;
    v6 = v20;
    do
    {
      v22 = *((_DWORD *)v3 + v5 + 8);
      v7 = String.init<A>(describing:)();
      v9 = v8;
      v20 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v6 = v20;
      }
      ++v5;
      *(_QWORD *)(v6 + 16) = v11 + 1;
      v12 = v6 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
  }
  v20 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v13 = BidirectionalCollection<>.joined(separator:)();
  v15 = v14;
  swift_bridgeObjectRelease();
  v20 = 123;
  v21 = 0xE100000000000000;
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 125;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v20;
}

{
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[3];
  uint64_t v20;
  unint64_t v21;
  int v22;
  __n128 v23;

  v23 = a3;
  v19[2] = &v23;
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5Int32Vs5NeverOTg5(a1, (uint64_t)v19, 0, a2);
  v4 = v3[2];
  if (v4)
  {
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = 0;
    v6 = v20;
    do
    {
      v22 = *((_DWORD *)v3 + v5 + 8);
      v7 = String.init<A>(describing:)();
      v9 = v8;
      v20 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v6 = v20;
      }
      ++v5;
      *(_QWORD *)(v6 + 16) = v11 + 1;
      v12 = v6 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
  }
  v20 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v13 = BidirectionalCollection<>.joined(separator:)();
  v15 = v14;
  swift_bridgeObjectRelease();
  v20 = 123;
  v21 = 0xE100000000000000;
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 125;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t specialized toString<A>(_:)(int a1)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD v17[4];
  uint64_t v18;
  unint64_t v19;
  __int16 v20;
  int v21;

  v21 = a1;
  v17[2] = &v21;
  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s6UInt16Vs5NeverOTg5(partial apply for specialized closure #1 in toString<A>(_:), (uint64_t)v17, 0, 2);
  v2 = v1[2];
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = 0;
    v4 = v18;
    do
    {
      v20 = *((_WORD *)v1 + v3 + 16);
      v5 = String.init<A>(describing:)();
      v7 = v6;
      v18 = v4;
      v9 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v4 = v18;
      }
      ++v3;
      *(_QWORD *)(v4 + 16) = v9 + 1;
      v10 = v4 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x24BEE4AF8];
  }
  v18 = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v11 = BidirectionalCollection<>.joined(separator:)();
  v13 = v12;
  swift_bridgeObjectRelease();
  v18 = 123;
  v19 = 0xE100000000000000;
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 125;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t specialized toString<A>(_:)(_QWORD *a1, uint64_t a2, double a3)
{
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[4];
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  double v23;

  v23 = a3;
  v19[2] = &v23;
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s6UInt16Vs5NeverOTg5(a1, (uint64_t)v19, 0, a2);
  v4 = v3[2];
  if (v4)
  {
    v20 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = 0;
    v6 = v20;
    do
    {
      v22 = *((_WORD *)v3 + v5 + 16);
      v7 = String.init<A>(describing:)();
      v9 = v8;
      v20 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v6 = v20;
      }
      ++v5;
      *(_QWORD *)(v6 + 16) = v11 + 1;
      v12 = v6 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
  }
  v20 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v13 = BidirectionalCollection<>.joined(separator:)();
  v15 = v14;
  swift_bridgeObjectRelease();
  v20 = 123;
  v21 = 0xE100000000000000;
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 125;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v20;
}

void SGDataTypeStorage.metalLiteralValue(type:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[80];

  outlined init with take of SGDataTypeStorage(v0, (uint64_t)&v1);
  outlined init with take of SGDataTypeStorage(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_245EADE14()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 - 176) & 1) != 0)
    return 1702195828;
  else
    return 0x65736C6166;
}

void SGNode.legacyNode(in:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  int v135;
  char *v136;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _OWORD v161[3];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[32];
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  __int128 v175;
  __int128 v176;
  char v177;
  unint64_t v178;
  __int128 v179;
  __int128 v180;
  char v181;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  char v185;
  _OWORD v186[10];
  uint64_t v187;

  v7 = v2;
  v8 = *(_QWORD *)&v2[OBJC_IVAR___SGNode_inputs];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v10 = MEMORY[0x24BEE4AF8];
  v148 = v2;
  if (v9)
  {
    *(_QWORD *)&v162 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
    {
      __break(1u);
      goto LABEL_56;
    }
    v11 = v162;
    if ((v8 & 0xC000000000000001) != 0)
    {
      v3 = 0;
      do
      {
        v12 = MEMORY[0x24954B748](v3, v8);
        v13 = *(_QWORD *)(v12 + OBJC_IVAR___SGInput_name);
        v4 = *(_QWORD *)(v12 + OBJC_IVAR___SGInput_name + 8);
        v14 = v11;
        v15 = (uint64_t *)(v12 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        v16 = *v15;
        v11 = v14;
        swift_bridgeObjectRetain();
        v5 = specialized SGDataType.materialXDataType.getter(v16);
        swift_retain();
        swift_unknownObjectRelease();
        *(_QWORD *)&v162 = v11;
        v18 = *(_QWORD *)(v11 + 16);
        v17 = *(_QWORD *)(v11 + 24);
        v6 = v18 + 1;
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          v11 = v162;
        }
        ++v3;
        *(_QWORD *)(v11 + 16) = v6;
        v19 = (_QWORD *)(v11 + 24 * v18);
        v19[4] = v13;
        v19[5] = v4;
        v19[6] = v5;
      }
      while (v9 != v3);
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = *(_QWORD *)(v8 + 8 * v20 + 32);
        v6 = *(_QWORD *)(v21 + OBJC_IVAR___SGInput_name);
        v3 = *(_QWORD *)(v21 + OBJC_IVAR___SGInput_name + 8);
        v22 = (uint64_t *)(v21 + OBJC_IVAR___SGInput_type);
        swift_beginAccess();
        v23 = *v22;
        swift_bridgeObjectRetain();
        v4 = specialized SGDataType.materialXDataType.getter(v23);
        *(_QWORD *)&v162 = v11;
        v24 = *(_QWORD *)(v11 + 16);
        v25 = *(_QWORD *)(v11 + 24);
        v5 = v24 + 1;
        swift_retain();
        if (v24 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v24 + 1, 1);
          v11 = v162;
        }
        ++v20;
        *(_QWORD *)(v11 + 16) = v5;
        v26 = (_QWORD *)(v11 + 24 * v24);
        v26[4] = v6;
        v26[5] = v3;
        v26[6] = v4;
      }
      while (v9 != v20);
    }
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    v7 = v148;
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v8 = *(_QWORD *)&v7[OBJC_IVAR___SGNode_outputs];
  v144 = v11;
  if (!(v8 >> 62))
  {
    v27 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27)
      goto LABEL_19;
LABEL_33:
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x24BEE4AF8];
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  if (!v27)
    goto LABEL_33;
LABEL_19:
  *(_QWORD *)&v162 = v10;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 & ~(v27 >> 63), 0);
  if (v27 < 0)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    outlined copy of NodeData((id)v8, v142, v7, v145, v4, v6, v141, v135, v139, v138, v140);
    swift_bridgeObjectRetain();
    v59 = _CocoaArrayWrapper.endIndex.getter();
    v131 = v6;
    if (v59)
      goto LABEL_38;
LABEL_58:
    swift_bridgeObjectRelease();
    v61 = MEMORY[0x24BEE4AF8];
    goto LABEL_59;
  }
  v3 = v162;
  v187 = v8;
  if ((v8 & 0xC000000000000001) != 0)
  {
    v28 = 0;
    do
    {
      v29 = MEMORY[0x24954B748](v28, v8);
      v30 = *(_QWORD *)(v29 + OBJC_IVAR___SGOutput_name);
      v31 = *(_QWORD *)(v29 + OBJC_IVAR___SGOutput_name + 8);
      v32 = (uint64_t *)(v29 + OBJC_IVAR___SGOutput_type);
      swift_beginAccess();
      v33 = *v32;
      swift_bridgeObjectRetain();
      v34 = specialized SGDataType.materialXDataType.getter(v33);
      swift_retain();
      swift_unknownObjectRelease();
      *(_QWORD *)&v162 = v3;
      v36 = *(_QWORD *)(v3 + 16);
      v35 = *(_QWORD *)(v3 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        v3 = v162;
      }
      ++v28;
      *(_QWORD *)(v3 + 16) = v36 + 1;
      v37 = (_QWORD *)(v3 + 24 * v36);
      v37[4] = v30;
      v37[5] = v31;
      v37[6] = v34;
      v8 = v187;
    }
    while (v27 != v28);
  }
  else
  {
    v38 = 0;
    do
    {
      v39 = *(_QWORD *)(v8 + 8 * v38 + 32);
      v40 = *(_QWORD *)(v39 + OBJC_IVAR___SGOutput_name);
      v41 = *(_QWORD *)(v39 + OBJC_IVAR___SGOutput_name + 8);
      v42 = (uint64_t *)(v39 + OBJC_IVAR___SGOutput_type);
      swift_beginAccess();
      v43 = *v42;
      swift_bridgeObjectRetain();
      v44 = specialized SGDataType.materialXDataType.getter(v43);
      *(_QWORD *)&v162 = v3;
      v45 = *(_QWORD *)(v3 + 16);
      v46 = *(_QWORD *)(v3 + 24);
      swift_retain();
      if (v45 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v45 + 1, 1);
        v3 = v162;
      }
      ++v38;
      *(_QWORD *)(v3 + 16) = v45 + 1;
      v47 = (_QWORD *)(v3 + 24 * v45);
      v47[4] = v40;
      v47[5] = v41;
      v47[6] = v44;
      v8 = v187;
    }
    while (v27 != v38);
  }
  swift_bridgeObjectRelease();
  v7 = v148;
LABEL_34:
  v48 = &v7[OBJC_IVAR___SGNode_data];
  v8 = *(_QWORD *)&v7[OBJC_IVAR___SGNode_data];
  v49 = *(_QWORD *)&v7[OBJC_IVAR___SGNode_data + 8];
  v7 = *(char **)&v7[OBJC_IVAR___SGNode_data + 16];
  v50 = (void *)*((_QWORD *)v48 + 3);
  v51 = *((_QWORD *)v48 + 4);
  v52 = *((_QWORD *)v48 + 5);
  v53 = v48[80];
  v145 = v50;
  if (!(v53 >> 6))
  {
    v72 = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MaterialXAvailability(v51, v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for shared != -1)
      swift_once();
    v73 = static NodeDefStore.shared;
    if (*(_QWORD *)(static NodeDefStore.shared + 16))
    {
      swift_bridgeObjectRetain();
      v74 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v72);
      if ((v75 & 1) != 0)
      {
        v76 = (_OWORD *)(*(_QWORD *)(v73 + 56) + 144 * v74);
        v186[0] = *v76;
        v77 = v76[3];
        v78 = v76[4];
        v79 = v76[2];
        v186[1] = v76[1];
        v186[2] = v79;
        v186[3] = v77;
        v186[4] = v78;
        v80 = v76[5];
        v81 = v76[6];
        v82 = v76[8];
        v186[7] = v76[7];
        v186[8] = v82;
        v186[5] = v80;
        v186[6] = v81;
        outlined retain of NodeDef((uint64_t)v186);
        swift_bridgeObjectRelease();
        specialized NodeDefStore.createNode(in:from:label:)(a1, v186, &v174);
        outlined release of NodeDef((uint64_t)v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MaterialXAvailability(v51, v52);
        v83 = v177;
        v84 = v176;
        v85 = v175;
        v86 = v174;
LABEL_76:
        *(_QWORD *)a2 = v86;
        *(_OWORD *)(a2 + 8) = v85;
        *(_OWORD *)(a2 + 24) = v84;
        *(_BYTE *)(a2 + 40) = v83;
        return;
      }
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)&v152 = v8;
    *((_QWORD *)&v152 + 1) = v72;
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi18_((uint64_t)&v152);
    outlined init with take of UserGraphError.ErrorType(&v152, (uint64_t)&v162);
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    v173 = 0uLL;
    swift_allocError();
    *v89 = v162;
    v90 = v166;
    v92 = v163;
    v91 = v164;
    v89[3] = v165;
    v89[4] = v90;
    v89[1] = v92;
    v89[2] = v91;
    v93 = v170;
    v95 = v167;
    v94 = v168;
    v89[7] = v169;
    v89[8] = v93;
    v89[5] = v95;
    v89[6] = v94;
    v96 = v173;
    v98 = *(_OWORD *)v171;
    v97 = *(_OWORD *)&v171[16];
    v89[11] = v172;
    v89[12] = v96;
    v89[9] = v98;
    v89[10] = v97;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v51, v52);
    return;
  }
  v4 = *((_QWORD *)v48 + 4);
  v6 = *((_QWORD *)v48 + 5);
  v55 = *((_QWORD *)v48 + 6);
  v54 = *((_QWORD *)v48 + 7);
  v57 = *((_QWORD *)v48 + 8);
  v56 = *((_QWORD *)v48 + 9);
  v132 = v7;
  v133 = v4;
  v141 = v55;
  v142 = v49;
  v135 = v54;
  v136 = (char *)v8;
  v140 = v53;
  v138 = v56;
  v139 = v57;
  if (v53 >> 6 != 1)
  {
    LOBYTE(v187) = v53 & 0x3F;
    outlined copy of NodeData((id)v8, v49, v7, v50, v4, v6, v55, v54, v57, v56, v53);
    v87 = specialized SGDataType.materialXDataType.getter(v8);
    v88 = swift_allocObject();
    *(_QWORD *)(v88 + 16) = v7;
    *(_QWORD *)(v88 + 24) = v50;
    *(_QWORD *)(v88 + 32) = v4;
    *(_QWORD *)(v88 + 40) = v6;
    *(_QWORD *)(v88 + 48) = v55;
    *(_QWORD *)(v88 + 56) = v54;
    *(_QWORD *)(v88 + 64) = v139;
    *(_QWORD *)(v88 + 72) = v138;
    *(_BYTE *)(v88 + 80) = v187;
    *(_QWORD *)(v88 + 88) = v87;
    v187 = a1 + 64;
    v150 = *(_QWORD *)(a1 + 40);
    swift_retain();
    outlined copy of NodeData((id)v8, v142, v7, v50, v4, v6, v55, v54, v139, v138, v140);
    swift_retain();
    specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v150, v144, v3, v88, a1 + 64, a1, &v182);
    swift_release();
    swift_release();
    outlined consume of NodeData((void *)v8, v142, v7, v50, v4, v6, v55, v54, v139, v138, v140);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v83 = v185;
    v84 = v184;
    v85 = v183;
    v86 = v182;
    goto LABEL_76;
  }
  v58 = (uint64_t *)(v8 + OBJC_IVAR___SGGraph_inputs);
  swift_beginAccess();
  v5 = *v58;
  if ((unint64_t)*v58 >> 62)
    goto LABEL_57;
  v59 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  outlined copy of NodeData((id)v8, v142, v7, v50, v4, v6, v141, v54, v139, v138, v140);
  swift_bridgeObjectRetain();
  v131 = v6;
  if (!v59)
    goto LABEL_58;
LABEL_38:
  *(_QWORD *)&v162 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59 & ~(v59 >> 63), 0);
  v187 = v59;
  if (v59 < 0)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v60 = 0;
  v61 = v162;
  v146 = v5 & 0xC000000000000001;
  v149 = v5;
  do
  {
    if (v146)
      v62 = (char *)MEMORY[0x24954B748](v60, v5);
    else
      v62 = (char *)*(id *)(v5 + 8 * v60 + 32);
    v63 = v62;
    v65 = *(_QWORD *)&v62[OBJC_IVAR___SGInput_name];
    v64 = *(_QWORD *)&v62[OBJC_IVAR___SGInput_name + 8];
    v66 = (uint64_t *)&v62[OBJC_IVAR___SGInput_type];
    swift_beginAccess();
    v67 = *v66;
    swift_bridgeObjectRetain();
    v68 = specialized SGDataType.materialXDataType.getter(v67);
    swift_retain();

    *(_QWORD *)&v162 = v61;
    v70 = *(_QWORD *)(v61 + 16);
    v69 = *(_QWORD *)(v61 + 24);
    if (v70 >= v69 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
      v61 = v162;
    }
    ++v60;
    *(_QWORD *)(v61 + 16) = v70 + 1;
    v71 = (_QWORD *)(v61 + 24 * v70);
    v71[4] = v65;
    v71[5] = v64;
    v71[6] = v68;
    v5 = v149;
  }
  while (v187 != v60);
  swift_bridgeObjectRelease();
LABEL_59:
  v99 = (uint64_t *)&v136[OBJC_IVAR___SGGraph_outputs];
  swift_beginAccess();
  v100 = *v99;
  if (!((unint64_t)*v99 >> 62))
  {
    v101 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v101)
      goto LABEL_61;
LABEL_71:
    swift_bridgeObjectRelease();
    v103 = MEMORY[0x24BEE4AF8];
LABEL_72:
    v114 = *(_QWORD *)(a1 + 72);
    v115 = v114 + 1;
    if (!__OFADD__(v114, 1))
    {
      v117 = *(_QWORD *)&v136[OBJC_IVAR___SGGraph_name];
      v116 = *(_QWORD *)&v136[OBJC_IVAR___SGGraph_name + 8];
      *(_QWORD *)(a1 + 72) = v115;
      swift_bridgeObjectRetain();
      v118 = specialized Graph.init(id:label:inputs:outputs:)(v115, v117, v116, v61, v103, (uint64_t)&v162);
      mapGraph(_:into:)(v136, &v162, v118);
      if (v143)
      {
        v160 = v170;
        v161[0] = *(_OWORD *)v171;
        *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)&v171[9];
        v156 = v166;
        v157 = v167;
        v158 = v168;
        v159 = v169;
        v152 = v162;
        v153 = v163;
        v154 = v164;
        v155 = v165;
        outlined release of Graph((uint64_t)&v152);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NodeData(v136, v142, v132, v145, v133, v131, v141, v135, v139, v138, v140);
        return;
      }
      v119 = swift_allocObject();
      v120 = *(_OWORD *)v171;
      v160 = v170;
      v161[0] = *(_OWORD *)v171;
      *(_OWORD *)((char *)v161 + 9) = *(_OWORD *)&v171[9];
      v121 = v166;
      v122 = v167;
      v156 = v166;
      v157 = v167;
      v124 = v168;
      v123 = v169;
      v158 = v168;
      v159 = v169;
      v125 = v162;
      v126 = v163;
      v152 = v162;
      v153 = v163;
      v128 = v164;
      v127 = v165;
      v154 = v164;
      v155 = v165;
      *(_OWORD *)(v119 + 144) = v170;
      *(_OWORD *)(v119 + 160) = v120;
      *(_OWORD *)(v119 + 169) = *(_OWORD *)&v171[9];
      *(_OWORD *)(v119 + 80) = v121;
      *(_OWORD *)(v119 + 96) = v122;
      *(_OWORD *)(v119 + 112) = v124;
      *(_OWORD *)(v119 + 128) = v123;
      *(_OWORD *)(v119 + 16) = v125;
      *(_OWORD *)(v119 + 32) = v126;
      *(_OWORD *)(v119 + 48) = v128;
      *(_OWORD *)(v119 + 64) = v127;
      v129 = v119 | 0xC000000000000000;
      v130 = *(_QWORD *)(a1 + 40);
      outlined retain of Graph((uint64_t)&v152);
      specialized static Graph._insertNode(graphID:inputs:outputs:shaderGraphData:nodes:adjacency:)(v130, v144, v3, v129, a1 + 64, a1, &v178);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodeData(v136, v142, v132, v145, v133, v131, v141, v135, v139, v138, v140);
      outlined release of Graph((uint64_t)&v152);
      v83 = v181;
      v84 = v180;
      v85 = v179;
      v86 = v178;
      goto LABEL_76;
    }
    __break(1u);
    goto LABEL_78;
  }
  swift_bridgeObjectRetain();
  v101 = _CocoaArrayWrapper.endIndex.getter();
  if (!v101)
    goto LABEL_71;
LABEL_61:
  *(_QWORD *)&v162 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v101 & ~(v101 >> 63), 0);
  if ((v101 & 0x8000000000000000) == 0)
  {
    v102 = 0;
    v103 = v162;
    v147 = v100 & 0xC000000000000001;
    v187 = v100;
    v151 = v101;
    do
    {
      if (v147)
        v104 = (char *)MEMORY[0x24954B748](v102, v100);
      else
        v104 = (char *)*(id *)(v100 + 8 * v102 + 32);
      v105 = v104;
      v107 = *(_QWORD *)&v104[OBJC_IVAR___SGOutput_name];
      v106 = *(_QWORD *)&v104[OBJC_IVAR___SGOutput_name + 8];
      v108 = (uint64_t *)&v104[OBJC_IVAR___SGOutput_type];
      swift_beginAccess();
      v109 = *v108;
      swift_bridgeObjectRetain();
      v110 = specialized SGDataType.materialXDataType.getter(v109);
      swift_retain();

      *(_QWORD *)&v162 = v103;
      v112 = *(_QWORD *)(v103 + 16);
      v111 = *(_QWORD *)(v103 + 24);
      if (v112 >= v111 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v111 > 1, v112 + 1, 1);
        v103 = v162;
      }
      ++v102;
      *(_QWORD *)(v103 + 16) = v112 + 1;
      v113 = (_QWORD *)(v103 + 24 * v112);
      v113[4] = v107;
      v113[5] = v106;
      v113[6] = v110;
      v100 = v187;
    }
    while (v151 != v102);
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
LABEL_79:
  __break(1u);
}

uint64_t mapGraph(_:into:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD v57[5];
  char v58;
  uint64_t v59;
  _QWORD v60[5];
  char v61;
  uint64_t v62;

  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph17BuiltInDefinitionV13ReservedNamesOG_SSs5NeverOTg504_s11d84Graph03mapB033_409C205F32E965F544D867255561D769LL_4intoyAA7SGGraphC_AA0B0VztKFSSAA17fgh3V13iJ54Ocfu_33_9a8543e77c82589f922673eb5cf911b0ALSSTf3nnnpk_nTf1cn_n((uint64_t)&outlined read-only object #0 of mapGraph(_:into:));
  v6 = specialized Set.init<A>(_:)(v5);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7 = swift_bridgeObjectRetain();
  v8 = specialized _ArrayProtocol.filter(_:)(v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = specialized Sequence.compactMap<A>(_:)(v8, (uint64_t)a2);
  result = swift_bridgeObjectRelease();
  if (v2)
    return result;
  v11 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v56 = v11;
  v12 = v9[2];
  if (!v12)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v51 = a2[13];
    v29 = a2[16];
    v55 = a2[19];
    v50 = *(_QWORD *)(a1 + OBJC_IVAR___SGGraph_argumentsNode);
    v53 = a2[10];
    outlined copy of NodePersonality(v53);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52 = v29;
    outlined copy of NodePersonality(v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v51, v50, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(a1 + OBJC_IVAR___SGGraph_resultsNode);
    v32 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v55, v31, v32);
    v56 = v11;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v33 = swift_bridgeObjectRetain();
    v34 = specialized Sequence.compactMap<A>(_:)(v33, (uint64_t *)&v56, (uint64_t)a2);
    swift_bridgeObjectRelease();
    v35 = v34[2];
    if (v35)
    {
      swift_bridgeObjectRetain();
      v36 = 0;
      do
      {
        v37 = v34[v36 + 4];
        v38 = v34[v36 + 5];
        v39 = v34[v36 + 6];
        v40 = v34[v36 + 7];
        v41 = v34[v36 + 8];
        v42 = v34[v36 + 9];
        v43 = v34[v36 + 10];
        v45 = v34[v36 + 12];
        v44 = v34[v36 + 13];
        v47 = v34[v36 + 14];
        v46 = v34[v36 + 15];
        v48 = v34[v36 + 16];
        v49 = v34[v36 + 17];
        v60[0] = v34[v36 + 11];
        v60[1] = v45;
        v60[2] = v44;
        v60[3] = v47;
        v60[4] = v46;
        v61 = v48;
        v62 = v49;
        v57[0] = v37;
        v57[1] = v38;
        v57[2] = v39;
        v57[3] = v40;
        v57[4] = v41;
        v58 = v42;
        v59 = v43;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        Graph.connect(_:to:)((uint64_t)v57, (unint64_t)v60);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v36 += 14;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease();
    }
    outlined consume of NodePersonality(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v54 = a1;
  swift_bridgeObjectRetain();
  v13 = v9 + 5;
  while (1)
  {
    v15 = *(v13 - 1);
    v14 = *v13;
    v16 = swift_isUniquelyReferenced_nonNull_native();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    v19 = v11[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v11[3] >= v21)
    {
      if ((v16 & 1) != 0)
      {
        if ((v17 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v22 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v16);
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_26;
      v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v11[7] + 8 * v18) = v14;
        goto LABEL_5;
      }
    }
    v11[(v18 >> 6) + 8] |= 1 << v18;
    v25 = 8 * v18;
    *(_QWORD *)(v11[6] + v25) = v15;
    *(_QWORD *)(v11[7] + v25) = v14;
    v26 = v11[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_25;
    v11[2] = v28;
LABEL_5:
    v13 += 2;
    swift_bridgeObjectRelease();
    if (!--v12)
    {
      v56 = v11;
      swift_bridgeObjectRelease();
      a1 = v54;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void closure #4 in mapGraph(_:into:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + OBJC_IVAR___SGEdge_from);
  v9 = v8 + OBJC_IVAR___SGOutput_node;
  swift_beginAccess();
  v10 = MEMORY[0x24954C3E4](v9);
  if (!v10)
    goto LABEL_13;
  v11 = (void *)v10;
  v12 = OBJC_IVAR___SGEdge_to;
  v13 = *(_QWORD *)(v7 + OBJC_IVAR___SGEdge_to) + OBJC_IVAR___SGInput_node;
  swift_beginAccess();
  v14 = MEMORY[0x24954C3E4](v13);
  if (!v14)
    goto LABEL_12;
  v15 = (void *)v14;
  v16 = *a2;
  if (!*(_QWORD *)(v16 + 16) || (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v18 & 1) == 0))
  {

LABEL_12:
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(v16 + 56);
  v20 = *(_QWORD *)(v19 + 8 * v17);
  if (v20 == -7)
  {
LABEL_14:

    goto LABEL_13;
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  v21 = *(_QWORD *)(a3 + 64);
  v22 = *(_QWORD *)(v21 + 16);
  if (v20 >= v22)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  v63 = v21 + 32;
  v23 = (unint64_t *)(v21 + 32 + 48 * v20);
  v55 = v23[2];
  v56 = *v23;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
  if ((v25 & 1) == 0)
    goto LABEL_14;
  v26 = *(_QWORD *)(v19 + 8 * v24);
  if (v26 == -7)
  {
    outlined copy of NodePersonality(v56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    return;
  }
  if (v26 >= v22)
    goto LABEL_45;
  v27 = (unint64_t *)(v63 + 48 * v26);
  v49 = v27[1];
  v50 = *v27;
  v28 = *(_QWORD *)(v55 + 16);
  if (!v28)
  {
    outlined copy of NodePersonality(v56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_26:
    outlined copy of NodePersonality(v50);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v48 = v15;
  v29 = *(_QWORD *)(v8 + OBJC_IVAR___SGOutput_name);
  v61 = *(_QWORD *)(v8 + OBJC_IVAR___SGOutput_name + 8);
  swift_bridgeObjectRetain();
  v30 = (uint64_t *)(v55 + 80);
  while (1)
  {
    v59 = *(v30 - 6);
    v31 = *(v30 - 4);
    v64 = *(v30 - 5);
    v32 = *(v30 - 3);
    v60 = *((unsigned __int8 *)v30 - 8);
    v57 = *v30;
    v58 = *(v30 - 2);
    if (v31 == v29 && v32 == v61)
      break;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_28;
    v30 += 7;
    if (!--v28)
    {
      outlined copy of NodePersonality(v56);
      swift_bridgeObjectRetain();
      v15 = v48;
      goto LABEL_26;
    }
  }
  v31 = v29;
  v32 = v61;
LABEL_28:
  v46 = v31;
  outlined copy of NodePersonality(v56);
  swift_bridgeObjectRetain();
  outlined copy of NodePersonality(v50);
  v34 = (uint64_t *)(*(_QWORD *)(v7 + v12) + OBJC_IVAR___SGInput_name);
  v36 = *v34;
  v35 = v34[1];
  v37 = *(_QWORD *)(v49 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v47 = v32;
  swift_bridgeObjectRetain();
  if (v37)
  {
    v38 = (uint64_t *)(v49 + 80);
    while (1)
    {
      v39 = *(v38 - 4);
      v51 = *(v38 - 5);
      v52 = *(v38 - 6);
      v40 = *(v38 - 3);
      v62 = *(v38 - 2);
      v54 = *((unsigned __int8 *)v38 - 8);
      v53 = *v38;
      if (v39 == v36 && v40 == v35)
        break;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_39;
      v38 += 7;
      if (!--v37)
        goto LABEL_36;
    }
    v39 = v36;
    v40 = v35;
LABEL_39:
    v45 = v39;
    swift_bridgeObjectRetain();
    v43 = v51;
    swift_retain();
    v44 = v40;
    swift_bridgeObjectRetain();
    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    v42 = v52;
  }
  else
  {
LABEL_36:
    swift_bridgeObjectRetain();
    outlined consume of NodePersonality(v56);
    swift_bridgeObjectRelease();
    v42 = 0;
    v43 = 0;
    v45 = 0;
    v44 = 0;
    v62 = 0;
    v53 = 0;
    v54 = 0;
  }
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(v50);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v43)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_13;
  }
  *(_QWORD *)a4 = v59;
  *(_QWORD *)(a4 + 8) = v64;
  *(_QWORD *)(a4 + 16) = v46;
  *(_QWORD *)(a4 + 24) = v47;
  *(_QWORD *)(a4 + 32) = v58;
  *(_QWORD *)(a4 + 40) = v60;
  *(_QWORD *)(a4 + 48) = v57;
  *(_QWORD *)(a4 + 56) = v42;
  *(_QWORD *)(a4 + 64) = v43;
  *(_QWORD *)(a4 + 72) = v45;
  *(_QWORD *)(a4 + 80) = v44;
  *(_QWORD *)(a4 + 88) = v62;
  *(_QWORD *)(a4 + 96) = v54;
  *(_QWORD *)(a4 + 104) = v53;
}

uint64_t SGDataType.metalDataType.getter(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 1:
      if (one-time initialization token for BOOL != -1)
        goto LABEL_40;
      goto LABEL_39;
    case 2:
      if (one-time initialization token for uint8 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 3:
      if (one-time initialization token for int32 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 6:
      if (one-time initialization token for uint32 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 7:
      if (one-time initialization token for half == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 9:
      if (one-time initialization token for float == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 13:
      if (one-time initialization token for texture2d_half == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 14:
      if (one-time initialization token for float2x2 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 15:
      if (one-time initialization token for float3x3 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 17:
      if (one-time initialization token for float4x4 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 18:
    case 29:
    case 44:
      if (one-time initialization token for float4 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 20:
    case 30:
    case 45:
      if (one-time initialization token for half4 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 21:
    case 49:
      if (one-time initialization token for float2 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 22:
    case 47:
      if (one-time initialization token for half2 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 24:
      if (one-time initialization token for int2 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 25:
    case 32:
    case 35:
    case 38:
    case 41:
    case 52:
      if (one-time initialization token for float3 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 26:
    case 33:
    case 36:
    case 39:
    case 42:
    case 50:
      if (one-time initialization token for half3 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 28:
      if (one-time initialization token for int3 == -1)
        goto LABEL_39;
      goto LABEL_40;
    case 31:
      if (one-time initialization token for int4 == -1)
        goto LABEL_39;
LABEL_40:
      swift_once();
LABEL_39:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void closure #1 in SGGraph.replaceDeprecatedAndRedundantNodes()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void **v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  void *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  id v63;
  uint64_t v64;
  id v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void *v74;
  void *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char *v88;
  void **v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  objc_class *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  void *v99;
  uint64_t v100;
  int v101;
  int v102;
  char v103[8];
  char v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  int v109[2];
  int v110[2];
  uint64_t v111;
  char *v112;
  void *v113;
  id v114;
  uint64_t v115;
  void *v116;
  objc_super v117;
  void *v118;
  uint64_t v119;
  _QWORD v120[10];
  char v121;
  Swift::OpaquePointer_optional v122;
  Swift::OpaquePointer_optional v123;

  v3 = *(_QWORD *)a1 + OBJC_IVAR___SGNode_data;
  v4 = *(unsigned __int8 *)(v3 + 80);
  if (v4 > 0x3F)
    return;
  v113 = *(void **)(a1 + 8);
  v115 = v2;
  v6 = *(_QWORD *)(v3 + 40);
  v8 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v3 + 72);
  v107 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)v109 = *(_QWORD *)(v3 + 56);
  v10 = *(void **)(v3 + 16);
  v9 = *(void **)(v3 + 24);
  v11 = *(void **)v3;
  v12 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)v103 = *(_QWORD *)(a2 + 16);
  v105 = *(_QWORD *)(v3 + 48);
  v112 = (char *)*(id *)a1;
  v114 = v113;
  v86 = v4;
  v13 = v6;
  outlined copy of NodeData(v11, v12, v10, v9, v107, v6, v105, v109[0], v8, v7, v86);
  if (!*(_QWORD *)v103)
  {
    v35 = v112;
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MaterialXAvailability(v107, v13);

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11, v12);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v35 = v112;
    goto LABEL_16;
  }
  v16 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 24 * v14);
  v18 = *v16;
  v17 = (char *)v16[1];
  v19 = v16[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MaterialXAvailability(v107, v6);
  swift_bridgeObjectRelease();
  v20 = OBJC_IVAR___SGNode_outputs;
  v21 = (uint64_t)v112;
  v22 = *(_QWORD *)&v112[OBJC_IVAR___SGNode_outputs];
  v23 = v2;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = *(void **)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v25 = v114;
  if (v24 != (void *)1)
    goto LABEL_75;
  v26 = *(_QWORD *)&v112[v20];
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_9;
    goto LABEL_74;
  }
  v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v27)
  {
LABEL_74:
    swift_bridgeObjectRelease();
LABEL_75:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type APIError and conformance APIError();
    swift_allocError();
    *(_QWORD *)v84 = 0xD000000000000034;
    *(_QWORD *)(v84 + 8) = 0x8000000245FCA790;
    *(_BYTE *)(v84 + 16) = 5;
    swift_willThrow();

    return;
  }
LABEL_9:
  v111 = v19;
  if ((v26 & 0xC000000000000001) != 0)
  {
    v28 = (char *)MEMORY[0x24954B748](0, v26);
  }
  else
  {
    if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    v28 = (char *)*(id *)(v26 + 32);
  }
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = (uint64_t *)&v29[OBJC_IVAR___SGOutput_edges];
  swift_beginAccess();
  v32 = *v30;
  v31 = v30[1];
  swift_retain();
  swift_retain();
  v33 = specialized Sequence.compactMap<A>(_:)(v32, v31);
  swift_release();
  swift_release();
  v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11ShaderGraph6SGEdgeCG_AF7SGInputCs5NeverOTg504_s11d76Graph7SGGraphC34replaceDeprecatedAndRedundantNodesyyKFyAA15TopologicalSortV7b10VKXEfU_AA7g4CAA6F54Ccfu0_33_8ffafd5b6a296e22d4e39828be60e38bAlJTf3nnnpk_nTf1cn_n(v33);
  swift_bridgeObjectRelease();
  SGGraph.remove(node:)((uint64_t)v112);
  if (v115)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  v99 = v29;
  v94 = v34;
  v36 = (void **)&v112[OBJC_IVAR___SGNode_name];
  v38 = *(_QWORD *)&v112[OBJC_IVAR___SGNode_name];
  v37 = *(void **)&v112[OBJC_IVAR___SGNode_name + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = specialized static SGNode.create(nodeDefName:name:)(v18, v17, v38, v37);
  v89 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245FBF370;
  *(_QWORD *)(inited + 32) = v39;
  v116 = (void *)inited;
  specialized Array._endMutation()();
  v17 = v39;
  v122.value._rawValue = v116;
  SGGraph.insert(_:)(v122);
  v115 = v41;
  if (v41)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  v87 = *(_QWORD *)(v111 + 16);
  v88 = v17;
  if (v87)
  {
    swift_bridgeObjectRetain_n();
    v42 = 0;
    while (1)
    {
      v90 = v42;
      v43 = v111 + 32 + 112 * v42;
      v44 = *(void **)(v43 + 8);
      v46 = *(void **)(v43 + 32);
      v45 = *(void **)(v43 + 40);
      v106 = v46;
      v108 = v45;
      v48 = *(_QWORD *)(v43 + 48);
      v47 = *(_QWORD *)(v43 + 56);
      v100 = v48;
      v101 = v47;
      v49 = *(void **)(v43 + 64);
      v98 = (int)v49;
      *(_QWORD *)v110 = *(_QWORD *)(v43 + 72);
      v51 = *(_QWORD *)(v43 + 80);
      v50 = *(_QWORD *)(v43 + 88);
      v102 = v50;
      v52 = *(_BYTE *)(v43 + 96);
      v95 = *(_QWORD *)v43;
      v96 = *(_QWORD *)(v43 + 16);
      v53 = v89[1];
      v118 = *v89;
      v119 = (uint64_t)v53;
      swift_bridgeObjectRetain();
      v104 = v52;
      outlined copy of SGDataTypeStorage(v46, v45, v48, v47, (int)v49, v110[0], v51, v50, v52);
      swift_bridgeObjectRetain();
      v54._countAndFlagsBits = 95;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      swift_bridgeObjectRetain();
      v55._countAndFlagsBits = v95;
      v91 = v44;
      v55._object = v44;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v57 = v118;
      v56 = v119;
      v92 = (uint64_t)v118;
      v120[0] = v96;
      v120[1] = 0;
      v120[2] = v46;
      v120[3] = v108;
      v120[4] = v100;
      v120[5] = v47;
      v120[6] = v49;
      v120[7] = *(_QWORD *)v110;
      v21 = v50;
      v120[8] = v51;
      v120[9] = v50;
      v121 = v52 | 0x80;
      v93 = (objc_class *)type metadata accessor for SGNode();
      v58 = (char *)objc_allocWithZone(v93);
      swift_unknownObjectWeakInit();
      v59 = &v58[OBJC_IVAR___SGNode_name];
      *(_QWORD *)v59 = v57;
      *((_QWORD *)v59 + 1) = v56;
      *(_QWORD *)&v58[OBJC_IVAR___SGNode_inputs] = MEMORY[0x24BEE4AF8];
      v24 = v49;
      outlined copy of SGDataTypeStorage(v106, v108, v100, v47, (int)v49, v110[0], v51, v50, v104);
      v60 = v58;
      swift_bridgeObjectRetain();
      v23 = recreateOutputs(from:nodeName:)((uint64_t)v120, v92, v56);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v60[OBJC_IVAR___SGNode_outputs] = v23;
      outlined init with take of NodeData((uint64_t)v120, (uint64_t)&v60[OBJC_IVAR___SGNode_data]);
      v25 = v49;
      v97 = v51;
      outlined copy of SGDataTypeStorage(v106, v108, v100, v47, (int)v49, v110[0], v51, v50, v104);

      v117.receiver = v60;
      v117.super_class = v93;
      v17 = (char *)objc_msgSendSuper2(&v117, sel_init);
      v26 = *(_QWORD *)&v17[OBJC_IVAR___SGNode_inputs];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v67 = v17;
        v61 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        v61 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        v62 = v17;
      }
      if (v61)
      {
        if (v61 < 1)
          goto LABEL_79;
        v21 = 0;
        do
        {
          if ((v26 & 0xC000000000000001) != 0)
            v63 = (id)MEMORY[0x24954B748](v21, v26);
          else
            v63 = *(id *)(v26 + 8 * v21 + 32);
          v24 = v63;
          ++v21;
          swift_beginAccess();
          swift_unknownObjectWeakAssign();

        }
        while (v61 != v21);
      }
      swift_bridgeObjectRelease_n();
      v23 = OBJC_IVAR___SGNode_outputs;
      v26 = *(_QWORD *)&v17[OBJC_IVAR___SGNode_outputs];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v64 = _CocoaArrayWrapper.endIndex.getter();
        if (!v64)
          goto LABEL_41;
      }
      else
      {
        v64 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v64)
          goto LABEL_41;
      }
      if (v64 < 1)
        goto LABEL_80;
      v21 = 0;
      do
      {
        if ((v26 & 0xC000000000000001) != 0)
          v65 = (id)MEMORY[0x24954B748](v21, v26);
        else
          v65 = *(id *)(v26 + 8 * v21 + 32);
        v66 = v65;
        ++v21;
        swift_beginAccess();
        swift_unknownObjectWeakAssign();

      }
      while (v64 != v21);
LABEL_41:

      swift_bridgeObjectRelease();
      outlined consume of SGDataTypeStorage(v106, v108, v100, v101, v98, v110[0], v51, v50, v104);
      swift_bridgeObjectRelease();
      v68 = swift_initStackObject();
      *(_OWORD *)(v68 + 16) = xmmword_245FBF370;
      *(_QWORD *)(v68 + 32) = v17;
      v118 = (void *)v68;
      specialized Array._endMutation()();
      v69 = v118;
      v70 = v17;
      v123.value._rawValue = v69;
      SGGraph.insert(_:)(v123);
      v115 = v71;
      if (v71)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of SGDataTypeStorage(v106, v108, v100, v101, v98, v110[0], v97, v102, v104);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)&v17[v23];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        v24 = v88;
        if (_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_44:
          if ((v26 & 0xC000000000000001) != 0)
          {
            v73 = (char *)MEMORY[0x24954B748](0, v26);
          }
          else
          {
            if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_81;
            v73 = (char *)*(id *)(v26 + 32);
          }
          v17 = v73;
          v74 = v91;
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
      }
      else
      {
        v72 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v24 = v88;
        if (v72)
          goto LABEL_44;
      }
      swift_bridgeObjectRelease();
      v17 = 0;
      v74 = v91;
LABEL_50:
      v75 = (void *)MEMORY[0x24954AF98](v95, v74);
      v23 = (uint64_t)v24;
      v76 = (char *)objc_msgSend(v24, sel_inputNamed_, v75);

      SGGraph.connect(_:to:)(v17, v76);
      v42 = v90 + 1;
      swift_bridgeObjectRelease();

      outlined consume of SGDataTypeStorage(v106, v108, v100, v101, v98, v110[0], v97, v102, v104);
      v25 = v114;
      v24 = v99;
      if (v90 + 1 == v87)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = (uint64_t)v112;
        goto LABEL_55;
      }
    }
  }
  v23 = (uint64_t)v17;
  v24 = v29;
LABEL_55:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v23 + OBJC_IVAR___SGNode_outputs);
  if (v26 >> 62)
    goto LABEL_83;
  v77 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v77)
  {
    do
    {
      if ((v26 & 0xC000000000000001) != 0)
      {
        v78 = (char *)MEMORY[0x24954B748](0, v26);
      }
      else
      {
        if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_87;
        }
        v78 = (char *)*(id *)(v26 + 32);
      }
      v17 = v78;
      swift_bridgeObjectRelease();
      if (!(v94 >> 62))
      {
        v21 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v79 = v115;
        if (!v21)
          goto LABEL_70;
        goto LABEL_62;
      }
LABEL_87:
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      v79 = v115;
      if (!v21)
      {
LABEL_70:

        swift_bridgeObjectRelease_n();
        return;
      }
LABEL_62:
      v23 = 4;
      while (1)
      {
        v26 = v23 - 4;
        v80 = v79;
        v81 = (v94 & 0xC000000000000001) != 0
            ? (char *)MEMORY[0x24954B748](v23 - 4, v94)
            : (char *)*(id *)(v94 + 8 * v23);
        v82 = v81;
        v24 = (void *)(v23 - 3);
        if (__OFADD__(v26, 1))
          break;
        SGGraph.connect(_:to:)(v17, v81);
        if (v80)
        {

          swift_bridgeObjectRelease_n();
          return;
        }

        ++v23;
        v83 = v24 == (void *)v21;
        v79 = 0;
        if (v83)
          goto LABEL_70;
      }
LABEL_82:
      __break(1u);
LABEL_83:
      swift_bridgeObjectRetain();
    }
    while (_CocoaArrayWrapper.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type APIError and conformance APIError();
  swift_allocError();
  *(_QWORD *)v85 = 0xD000000000000040;
  *(_QWORD *)(v85 + 8) = 0x8000000245FCA7D0;
  *(_BYTE *)(v85 + 16) = 5;
  swift_willThrow();

}

uint64_t SGGraph.ReplacementNode.name.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SGGraph.ReplacementNode.additionalInputValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in OrderedDictionary.merge<A>(_:uniquingKeysWith:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  a2[6] = v7;
  a2[7] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined copy of MaterialXAvailability(v7, v8);
}

uint64_t specialized SGDataType.materialXDataType.getter(uint64_t a1)
{
  uint64_t *v1;

  switch(a1)
  {
    case 1:
      if (one-time initialization token for BOOLean != -1)
        swift_once();
      v1 = &static MaterialXDataType.BOOLean;
      break;
    case 3:
      if (one-time initialization token for integer != -1)
        swift_once();
      v1 = &static MaterialXDataType.integer;
      break;
    case 7:
      if (one-time initialization token for half != -1)
        swift_once();
      v1 = &static MaterialXDataType.half;
      break;
    case 9:
      if (one-time initialization token for float != -1)
        swift_once();
      v1 = &static MaterialXDataType.float;
      break;
    case 11:
    case 12:
      if (one-time initialization token for string != -1)
        swift_once();
      v1 = &static MaterialXDataType.string;
      break;
    case 13:
      if (one-time initialization token for filename != -1)
        swift_once();
      v1 = &static MaterialXDataType.filename;
      break;
    case 14:
      if (one-time initialization token for matrix22 != -1)
        swift_once();
      v1 = &static MaterialXDataType.matrix22;
      break;
    case 15:
      if (one-time initialization token for matrix33 != -1)
        swift_once();
      v1 = &static MaterialXDataType.matrix33;
      break;
    case 17:
      if (one-time initialization token for matrix44 != -1)
        swift_once();
      v1 = &static MaterialXDataType.matrix44;
      break;
    case 18:
    case 29:
      if (one-time initialization token for float4 != -1)
        swift_once();
      v1 = &static MaterialXDataType.float4;
      break;
    case 20:
    case 30:
    case 56:
      if (one-time initialization token for half4 != -1)
        swift_once();
      v1 = &static MaterialXDataType.half4;
      break;
    case 21:
    case 49:
      if (one-time initialization token for float2 != -1)
        swift_once();
      v1 = &static MaterialXDataType.float2;
      break;
    case 22:
    case 47:
      if (one-time initialization token for half2 != -1)
        swift_once();
      v1 = &static MaterialXDataType.half2;
      break;
    case 24:
      if (one-time initialization token for integer2 != -1)
        swift_once();
      v1 = &static MaterialXDataType.integer2;
      break;
    case 25:
    case 32:
    case 35:
    case 38:
    case 52:
      if (one-time initialization token for float3 != -1)
        swift_once();
      v1 = &static MaterialXDataType.float3;
      break;
    case 26:
    case 33:
    case 36:
    case 39:
    case 50:
    case 55:
      if (one-time initialization token for half3 != -1)
        swift_once();
      v1 = &static MaterialXDataType.half3;
      break;
    case 28:
      if (one-time initialization token for integer3 != -1)
        swift_once();
      v1 = &static MaterialXDataType.integer3;
      break;
    case 31:
      if (one-time initialization token for integer4 != -1)
        swift_once();
      v1 = &static MaterialXDataType.integer4;
      break;
    case 41:
    case 42:
      if (one-time initialization token for color3 != -1)
        swift_once();
      v1 = &static MaterialXDataType.color3;
      break;
    case 44:
    case 45:
      if (one-time initialization token for color4 != -1)
        swift_once();
      v1 = &static MaterialXDataType.color4;
      break;
    case 53:
      if (one-time initialization token for surfaceshader != -1)
        swift_once();
      v1 = &static MaterialXDataType.surfaceshader;
      break;
    case 54:
      if (one-time initialization token for geometrymodifier != -1)
        swift_once();
      v1 = &static MaterialXDataType.geometrymodifier;
      break;
    default:
      if (one-time initialization token for unsupported != -1)
        swift_once();
      v1 = &static MaterialXDataType.unsupported;
      break;
  }
  return *v1;
}

uint64_t specialized SGDataType.init(_:)()
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  char v103;

  if (one-time initialization token for BOOLean != -1)
    swift_once();
  if ((MaterialXDataType.isEqual(to:)() & 1) != 0)
  {
    swift_release();
    return 1;
  }
  v1 = one-time initialization token for integer;
  swift_retain();
  if (v1 != -1)
    swift_once();
  v2 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v2 & 1) != 0)
  {
    swift_release();
    return 3;
  }
  v3 = one-time initialization token for integer2;
  swift_retain();
  if (v3 != -1)
    swift_once();
  v4 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v4 & 1) != 0)
  {
    swift_release();
    return 24;
  }
  v5 = one-time initialization token for integer3;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v6 & 1) != 0)
  {
    swift_release();
    return 28;
  }
  v7 = one-time initialization token for integer4;
  swift_retain();
  if (v7 != -1)
    swift_once();
  v8 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v8 & 1) != 0)
  {
    swift_release();
    return 31;
  }
  v9 = one-time initialization token for float;
  swift_retain();
  if (v9 != -1)
    swift_once();
  v10 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v10 & 1) != 0)
  {
    swift_release();
    return 9;
  }
  v11 = one-time initialization token for float2;
  swift_retain();
  if (v11 != -1)
    swift_once();
  v12 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v12 & 1) != 0)
    goto LABEL_28;
  v13 = one-time initialization token for float3;
  swift_retain();
  if (v13 != -1)
    swift_once();
  v14 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v14 & 1) != 0)
  {
LABEL_32:
    swift_release();
    return 25;
  }
  v15 = one-time initialization token for float4;
  swift_retain();
  if (v15 != -1)
    swift_once();
  v16 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v16 & 1) != 0)
    goto LABEL_36;
  v17 = one-time initialization token for color3;
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v18 & 1) != 0)
  {
    swift_release();
    return 42;
  }
  v19 = one-time initialization token for color4;
  swift_retain();
  if (v19 != -1)
    swift_once();
  v20 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v20 & 1) != 0)
  {
    swift_release();
    return 45;
  }
  v21 = one-time initialization token for vector2;
  swift_retain();
  if (v21 != -1)
    swift_once();
  v22 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v22 & 1) != 0)
  {
LABEL_28:
    swift_release();
    return 21;
  }
  v23 = one-time initialization token for vector3;
  swift_retain();
  if (v23 != -1)
    swift_once();
  v24 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v24 & 1) != 0)
    goto LABEL_32;
  v25 = one-time initialization token for vector4;
  swift_retain();
  if (v25 != -1)
    swift_once();
  v26 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v26 & 1) != 0)
  {
LABEL_36:
    swift_release();
    return 29;
  }
  v27 = one-time initialization token for half;
  swift_retain();
  if (v27 != -1)
    swift_once();
  v28 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v28 & 1) != 0)
  {
    swift_release();
    return 7;
  }
  v29 = one-time initialization token for half2;
  swift_retain();
  if (v29 != -1)
    swift_once();
  v30 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v30 & 1) != 0)
  {
    swift_release();
    return 22;
  }
  v31 = one-time initialization token for half3;
  swift_retain();
  if (v31 != -1)
    swift_once();
  v32 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v32 & 1) != 0)
  {
    swift_release();
    return 26;
  }
  v33 = one-time initialization token for half4;
  swift_retain();
  if (v33 != -1)
    swift_once();
  v34 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v34 & 1) != 0)
  {
    swift_release();
    return 30;
  }
  v35 = one-time initialization token for matrix22;
  swift_retain();
  if (v35 != -1)
    swift_once();
  v36 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v36 & 1) != 0)
  {
    swift_release();
    return 14;
  }
  v37 = one-time initialization token for matrix33;
  swift_retain();
  if (v37 != -1)
    swift_once();
  v38 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v38 & 1) != 0)
  {
    swift_release();
    return 15;
  }
  v39 = one-time initialization token for matrix44;
  swift_retain();
  if (v39 != -1)
    swift_once();
  v40 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v40 & 1) != 0)
  {
    swift_release();
    return 17;
  }
  v41 = one-time initialization token for surfaceshader;
  swift_retain();
  if (v41 != -1)
    swift_once();
  v42 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v42 & 1) != 0)
  {
    swift_release();
    return 53;
  }
  v43 = one-time initialization token for vertexshader;
  swift_retain();
  if (v43 != -1)
    swift_once();
  v44 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v44 & 1) != 0)
    goto LABEL_92;
  v45 = one-time initialization token for geometrymodifier;
  swift_retain();
  if (v45 != -1)
    swift_once();
  v46 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v46 & 1) != 0)
  {
LABEL_92:
    swift_release();
    return 54;
  }
  v47 = one-time initialization token for string;
  swift_retain();
  if (v47 != -1)
    swift_once();
  v48 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v48 & 1) != 0)
    goto LABEL_96;
  v49 = one-time initialization token for filename;
  swift_retain();
  if (v49 != -1)
    swift_once();
  v50 = MaterialXDataType.isEqual(to:)();
  swift_release();
  if ((v50 & 1) != 0)
  {
    swift_release();
    return 13;
  }
  else
  {
    v51 = one-time initialization token for space;
    swift_retain();
    if (v51 != -1)
      swift_once();
    v52 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v52 & 1) != 0)
      goto LABEL_96;
    v53 = one-time initialization token for uAddressMode;
    swift_retain();
    if (v53 != -1)
      swift_once();
    v54 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v54 & 1) != 0)
      goto LABEL_96;
    v55 = one-time initialization token for vAddressMode;
    swift_retain();
    if (v55 != -1)
      swift_once();
    v56 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v56 & 1) != 0)
      goto LABEL_96;
    v57 = one-time initialization token for wrapS;
    swift_retain();
    if (v57 != -1)
      swift_once();
    v58 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v58 & 1) != 0)
      goto LABEL_96;
    v59 = one-time initialization token for wrapT;
    swift_retain();
    if (v59 != -1)
      swift_once();
    v60 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v60 & 1) != 0)
      goto LABEL_96;
    v61 = one-time initialization token for filterType;
    swift_retain();
    if (v61 != -1)
      swift_once();
    v62 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v62 & 1) != 0)
      goto LABEL_96;
    v63 = one-time initialization token for blurFilterType;
    swift_retain();
    if (v63 != -1)
      swift_once();
    v64 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v64 & 1) != 0)
      goto LABEL_96;
    v65 = one-time initialization token for normalMapSpace;
    swift_retain();
    if (v65 != -1)
      swift_once();
    v66 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v66 & 1) != 0)
      goto LABEL_96;
    v67 = one-time initialization token for lumacoeffs;
    swift_retain();
    if (v67 != -1)
      swift_once();
    v68 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v68 & 1) != 0)
      goto LABEL_96;
    v69 = one-time initialization token for cubeimageFilterType;
    swift_retain();
    if (v69 != -1)
      swift_once();
    v70 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v70 & 1) != 0)
      goto LABEL_96;
    v71 = one-time initialization token for filter;
    swift_retain();
    if (v71 != -1)
      swift_once();
    v72 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v72 & 1) != 0)
      goto LABEL_96;
    v73 = one-time initialization token for coord;
    swift_retain();
    if (v73 != -1)
      swift_once();
    v74 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v74 & 1) != 0)
      goto LABEL_96;
    v75 = one-time initialization token for addressMode;
    swift_retain();
    if (v75 != -1)
      swift_once();
    v76 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v76 & 1) != 0)
      goto LABEL_96;
    v77 = one-time initialization token for rAddressMode;
    swift_retain();
    if (v77 != -1)
      swift_once();
    v78 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v78 & 1) != 0)
      goto LABEL_96;
    v79 = one-time initialization token for sAddressMode;
    swift_retain();
    if (v79 != -1)
      swift_once();
    v80 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v80 & 1) != 0)
      goto LABEL_96;
    v81 = one-time initialization token for tAddressMode;
    swift_retain();
    if (v81 != -1)
      swift_once();
    v82 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v82 & 1) != 0)
      goto LABEL_96;
    v83 = one-time initialization token for u_wrap_mode;
    swift_retain();
    if (v83 != -1)
      swift_once();
    v84 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v84 & 1) != 0)
      goto LABEL_96;
    v85 = one-time initialization token for v_wrap_mode;
    swift_retain();
    if (v85 != -1)
      swift_once();
    v86 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v86 & 1) != 0)
      goto LABEL_96;
    v87 = one-time initialization token for w_wrap_mode;
    swift_retain();
    if (v87 != -1)
      swift_once();
    v88 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v88 & 1) != 0)
      goto LABEL_96;
    v89 = one-time initialization token for u_pixel_wrap_mode;
    swift_retain();
    if (v89 != -1)
      swift_once();
    v90 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v90 & 1) != 0)
      goto LABEL_96;
    v91 = one-time initialization token for v_pixel_wrap_mode;
    swift_retain();
    if (v91 != -1)
      swift_once();
    v92 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v92 & 1) != 0)
      goto LABEL_96;
    v93 = one-time initialization token for w_pixel_wrap_mode;
    swift_retain();
    if (v93 != -1)
      swift_once();
    v94 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v94 & 1) != 0)
      goto LABEL_96;
    v95 = one-time initialization token for magFilter;
    swift_retain();
    if (v95 != -1)
      swift_once();
    v96 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v96 & 1) != 0)
      goto LABEL_96;
    v97 = one-time initialization token for minFilter;
    swift_retain();
    if (v97 != -1)
      swift_once();
    v98 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v98 & 1) != 0)
      goto LABEL_96;
    v99 = one-time initialization token for mipFilter;
    swift_retain();
    if (v99 != -1)
      swift_once();
    v100 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v100 & 1) != 0)
      goto LABEL_96;
    v101 = one-time initialization token for borderColor;
    swift_retain();
    if (v101 != -1)
      swift_once();
    v102 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v102 & 1) != 0)
    {
LABEL_96:
      swift_release();
      return 11;
    }
    v103 = MaterialXDataType.isEqual(to:)();
    swift_release();
    if ((v103 & 1) != 0)
      return 11;
    else
      return 0;
  }
}

unint64_t specialized SGGraph.deprecationMap()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23[10];
  unint64_t v24[10];
  unint64_t v25[10];
  unint64_t v26[10];
  unint64_t v27[10];
  unint64_t v28[10];
  unint64_t v29[10];
  unint64_t v30[10];
  unint64_t v31[10];
  uint64_t v32;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SGGraph.ReplacementNode)>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_245FC1230;
  *(_QWORD *)(v2 + 32) = 0xD000000000000024;
  *(_QWORD *)(v2 + 40) = 0x8000000245FC6A20;
  strcpy((char *)(v2 + 48), "ND_time_float");
  *(_WORD *)(v2 + 62) = -4864;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 64) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 72) = 0xD000000000000028;
  *(_QWORD *)(v2 + 80) = 0x8000000245FC69B0;
  *(_QWORD *)(v2 + 88) = 0xD000000000000013;
  *(_QWORD *)(v2 + 96) = 0x8000000245FC6600;
  *(_QWORD *)(v2 + 104) = v3;
  *(_QWORD *)(v2 + 112) = 0xD000000000000025;
  *(_QWORD *)(v2 + 120) = 0x8000000245FC6680;
  *(_QWORD *)(v2 + 128) = 0xD000000000000013;
  *(_QWORD *)(v2 + 136) = 0x8000000245FC6580;
  *(_QWORD *)(v2 + 144) = v3;
  *(_QWORD *)(v2 + 152) = 0xD000000000000026;
  *(_QWORD *)(v2 + 160) = 0x8000000245FC6950;
  *(_QWORD *)(v2 + 168) = 0xD000000000000011;
  *(_QWORD *)(v2 + 176) = 0x8000000245FC65C0;
  *(_QWORD *)(v2 + 184) = v3;
  *(_QWORD *)(v2 + 192) = 0xD000000000000029;
  *(_QWORD *)(v2 + 200) = 0x8000000245FC6650;
  *(_QWORD *)(v2 + 208) = 0xD000000000000014;
  *(_QWORD *)(v2 + 216) = 0x8000000245FC6540;
  *(_QWORD *)(v2 + 224) = v3;
  *(_QWORD *)(v2 + 232) = 0xD000000000000023;
  *(_QWORD *)(v2 + 240) = 0x8000000245FC6A50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(BuiltInDefinition.InputSpec, SGDataTypeStorage)>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_245FBECD0;
  if (one-time initialization token for string != -1)
    swift_once();
  v5 = static MaterialXDataType.string;
  swift_retain();
  v32 = v5;
  specialized SGDataTypeStorage.init(materialXValue:type:)(0x305655uLL, 0xE300000000000000, v5, v23);
  if (v1)
  {
    *(_QWORD *)(v4 + 16) = 0;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 16) = 0;
    return swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + 32) = 0x706F72706D6F6567;
    *(_QWORD *)(v4 + 40) = 0xE800000000000000;
    *(_QWORD *)(v4 + 48) = 11;
    *(_BYTE *)(v4 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v23, v4 + 64);
    *(_QWORD *)(v2 + 248) = 0xD000000000000018;
    *(_QWORD *)(v2 + 256) = 0x8000000245FC7280;
    *(_QWORD *)(v2 + 264) = v4;
    *(_QWORD *)(v2 + 272) = 0xD000000000000023;
    *(_QWORD *)(v2 + 280) = 0x8000000245FC6AE0;
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_245FBECD0;
    v7 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x315655uLL, 0xE300000000000000, v7, v24);
    *(_QWORD *)(v6 + 32) = 0x706F72706D6F6567;
    *(_QWORD *)(v6 + 40) = 0xE800000000000000;
    *(_QWORD *)(v6 + 48) = 11;
    *(_BYTE *)(v6 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v24, v6 + 64);
    *(_QWORD *)(v2 + 288) = 0xD000000000000018;
    *(_QWORD *)(v2 + 296) = 0x8000000245FC7280;
    *(_QWORD *)(v2 + 304) = v6;
    *(_QWORD *)(v2 + 312) = 0xD00000000000001ALL;
    *(_QWORD *)(v2 + 320) = 0x8000000245FC7790;
    strcpy((char *)(v2 + 328), "ND_time_float");
    *(_WORD *)(v2 + 342) = -4864;
    *(_QWORD *)(v2 + 344) = v3;
    *(_QWORD *)(v2 + 352) = 0xD000000000000024;
    *(_QWORD *)(v2 + 360) = 0x8000000245FC7610;
    *(_QWORD *)(v2 + 368) = 0xD000000000000013;
    *(_QWORD *)(v2 + 376) = 0x8000000245FC6600;
    *(_QWORD *)(v2 + 384) = v3;
    *(_QWORD *)(v2 + 392) = 0xD000000000000024;
    *(_QWORD *)(v2 + 400) = 0x8000000245FC7850;
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_245FBECD0;
    v10 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77uLL, 0xE500000000000000, v10, v25);
    *(_QWORD *)(v9 + 32) = 0x6563617073;
    *(_QWORD *)(v9 + 40) = 0xE500000000000000;
    *(_QWORD *)(v9 + 48) = 11;
    *(_BYTE *)(v9 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v25, v9 + 64);
    *(_QWORD *)(v2 + 408) = 0xD000000000000013;
    *(_QWORD *)(v2 + 416) = 0x8000000245FC6600;
    *(_QWORD *)(v2 + 424) = v9;
    *(_QWORD *)(v2 + 432) = 0xD00000000000001BLL;
    *(_QWORD *)(v2 + 440) = 0x8000000245FC7390;
    *(_QWORD *)(v2 + 448) = 0xD000000000000013;
    *(_QWORD *)(v2 + 456) = 0x8000000245FC6580;
    *(_QWORD *)(v2 + 464) = v3;
    *(_QWORD *)(v2 + 472) = 0xD000000000000025;
    *(_QWORD *)(v2 + 480) = 0x8000000245FC7590;
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_245FBECD0;
    v12 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77uLL, 0xE500000000000000, v12, v26);
    *(_QWORD *)(v11 + 32) = 0x6563617073;
    *(_QWORD *)(v11 + 40) = 0xE500000000000000;
    *(_QWORD *)(v11 + 48) = 11;
    *(_BYTE *)(v11 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v26, v11 + 64);
    *(_QWORD *)(v2 + 488) = 0xD000000000000011;
    *(_QWORD *)(v2 + 496) = 0x8000000245FC65C0;
    *(_QWORD *)(v2 + 504) = v11;
    *(_QWORD *)(v2 + 512) = 0xD000000000000026;
    *(_QWORD *)(v2 + 520) = 0x8000000245FC75C0;
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_245FBECD0;
    v14 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77uLL, 0xE500000000000000, v14, v27);
    *(_QWORD *)(v13 + 32) = 0x6563617073;
    *(_QWORD *)(v13 + 40) = 0xE500000000000000;
    *(_QWORD *)(v13 + 48) = 11;
    *(_BYTE *)(v13 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v27, v13 + 64);
    *(_QWORD *)(v2 + 528) = 0xD000000000000012;
    *(_QWORD *)(v2 + 536) = 0x8000000245FC78B0;
    *(_QWORD *)(v2 + 544) = v13;
    *(_QWORD *)(v2 + 552) = 0xD000000000000028;
    *(_QWORD *)(v2 + 560) = 0x8000000245FC7560;
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_245FBECD0;
    v16 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x646C726F77uLL, 0xE500000000000000, v16, v28);
    *(_QWORD *)(v15 + 32) = 0x6563617073;
    *(_QWORD *)(v15 + 40) = 0xE500000000000000;
    *(_QWORD *)(v15 + 48) = 11;
    *(_BYTE *)(v15 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v28, v15 + 64);
    *(_QWORD *)(v2 + 568) = 0xD000000000000014;
    *(_QWORD *)(v2 + 576) = 0x8000000245FC6540;
    *(_QWORD *)(v2 + 584) = v15;
    *(_QWORD *)(v2 + 592) = 0xD000000000000019;
    *(_QWORD *)(v2 + 600) = 0x8000000245FC77B0;
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_245FBECD0;
    v18 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x305655uLL, 0xE300000000000000, v18, v29);
    *(_QWORD *)(v17 + 32) = 0x706F72706D6F6567;
    *(_QWORD *)(v17 + 40) = 0xE800000000000000;
    *(_QWORD *)(v17 + 48) = 11;
    *(_BYTE *)(v17 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v29, v17 + 64);
    *(_QWORD *)(v2 + 608) = 0xD000000000000018;
    *(_QWORD *)(v2 + 616) = 0x8000000245FC7280;
    *(_QWORD *)(v2 + 624) = v17;
    *(_QWORD *)(v2 + 632) = 0xD000000000000019;
    *(_QWORD *)(v2 + 640) = 0x8000000245FC77D0;
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_245FBECD0;
    v20 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x315655uLL, 0xE300000000000000, v20, v30);
    *(_QWORD *)(v19 + 32) = 0x706F72706D6F6567;
    *(_QWORD *)(v19 + 40) = 0xE800000000000000;
    *(_QWORD *)(v19 + 48) = 11;
    *(_BYTE *)(v19 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v30, v19 + 64);
    *(_QWORD *)(v2 + 648) = 0xD000000000000018;
    *(_QWORD *)(v2 + 656) = 0x8000000245FC7280;
    *(_QWORD *)(v2 + 664) = v19;
    *(_QWORD *)(v2 + 672) = 0xD00000000000002ALL;
    *(_QWORD *)(v2 + 680) = 0x8000000245FC7760;
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_245FBECD0;
    v22 = v32;
    swift_retain();
    specialized SGDataTypeStorage.init(materialXValue:type:)(0x746E65676E6174uLL, 0xE700000000000000, v22, v31);
    *(_QWORD *)(v21 + 32) = 0x6563617073;
    *(_QWORD *)(v21 + 40) = 0xE500000000000000;
    *(_QWORD *)(v21 + 48) = 11;
    *(_BYTE *)(v21 + 56) = 1;
    outlined init with take of SGDataTypeStorage((uint64_t)v31, v21 + 64);
    *(_QWORD *)(v2 + 688) = 0xD000000000000011;
    *(_QWORD *)(v2 + 696) = 0x8000000245FC65C0;
    *(_QWORD *)(v2 + 704) = v21;
    return specialized Dictionary.init(dictionaryLiteral:)(v2);
  }
}

double _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi48_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 14;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0x8C00000000000000;
  return result;
}

uint64_t _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi16_(uint64_t result)
{
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 168) & 1 | 0x4400000000000000;
  return result;
}

uint64_t type metadata accessor for BuiltInDefinitionStore()
{
  return objc_opt_self();
}

uint64_t method lookup function for BuiltInDefinitionStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BuiltInDefinitionStore.__allocating_init(nodeDefStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for SGDataTypeStorage.ValueConversionContext()
{
  return &type metadata for SGDataTypeStorage.ValueConversionContext;
}

uint64_t destroy for SGGraph.ReplacementNode()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for SGGraph.ReplacementNode(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SGGraph.ReplacementNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SGGraph.ReplacementNode(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SGGraph.ReplacementNode()
{
  return &type metadata for SGGraph.ReplacementNode;
}

_QWORD *partial apply for specialized closure #1 in toString<A>(_:)@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  if (*result >= 2uLL)
    __break(1u);
  else
    *a2 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * (*result & 1));
  return result;
}

{
  uint64_t v2;

  if (*result >= 3uLL)
    __break(1u);
  else
    *a2 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * (*result & 3));
  return result;
}

{
  uint64_t v2;

  if (*result >= 4uLL)
    __break(1u);
  else
    *a2 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * (*result & 3));
  return result;
}

{
  uint64_t v2;

  if (*result >= 2uLL)
    __break(1u);
  else
    *a2 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * (*result & 1));
  return result;
}

{
  uint64_t v2;

  if (*result >= 3uLL)
    __break(1u);
  else
    *a2 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * (*result & 3));
  return result;
}

{
  uint64_t v2;

  if (*result >= 4uLL)
    __break(1u);
  else
    *a2 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * (*result & 3));
  return result;
}

uint64_t *partial apply for specialized closure #1 in toString<A>(_:)@<X0>(uint64_t *result@<X0>, _WORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  _WORD *v5;
  double v6;

  v4 = *result;
  if ((unint64_t)*result >= 2)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_WORD **)(v3 + 16);
    LOWORD(a3) = *v5;
    WORD2(a3) = v5[1];
    v6 = a3;
    *a2 = *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  }
  return result;
}

uint64_t *partial apply for specialized closure #1 in toString<A>(_:)@<X0>(uint64_t *result@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if ((unint64_t)*result >= 3)
  {
    __break(1u);
  }
  else
  {
    v4 = **(_QWORD **)(v2 + 16);
    *a2 = *(_WORD *)((unint64_t)&v4 & 0xFFFFFFFFFFFFFFF9 | (2 * (v3 & 3)));
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if ((unint64_t)*result >= 4)
  {
    __break(1u);
  }
  else
  {
    v4 = **(_QWORD **)(v2 + 16);
    *a2 = *(_WORD *)((unint64_t)&v4 & 0xFFFFFFFFFFFFFFF9 | (2 * (v3 & 3)));
  }
  return result;
}

uint64_t sub_245EB4698()
{
  uint64_t v0;

  outlined consume of SGDataTypeStorage(*(void **)(v0 + 16), *(id *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245EB46E0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NodePersonality(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with copy of WeakBox<SGEdge>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WeakBox<SGEdge>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakBox<SGEdge>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _HashTable.UnsafeHandle.idealBucket<A>(for:)(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v4 = 1 << *a2;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (!v5)
    return v6 & result;
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator(startingAt:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_BYTE *)(a4 + 48) = 0;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance(until:)(Swift::Int until)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  for (i = v1[3]; i; i = v1[3])
  {
    v4 = -1 << *(_QWORD *)*v1;
    v5 = (v4 ^ ~i) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v5 >= ~v4)
      v6 = ~v4;
    else
      v6 = 0;
    if (v5 - v6 == until)
      break;
    _HashTable.BucketIterator.advance()();
  }
}

BOOL _HashTable.BucketIterator.isOccupied.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) != 0;
}

uint64_t _HashTable.BucketIterator.currentValue.setter(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD **)v2;
  v3 = *(_QWORD *)(v2 + 8);
  v5 = **(_QWORD **)v2 & 0x3FLL;
  if ((a2 & 1) != 0)
    v6 = 0;
  else
    v6 = (-1 << v5) ^ ~((((result - ((uint64_t)v4[1] >> 6)) >> 63) & ~(-1 << v5)) + result - ((uint64_t)v4[1] >> 6));
  v7 = *(_QWORD *)(v2 + 24) ^ v6;
  v8 = v5 * *(_QWORD *)(v2 + 16);
  v9 = v8 >> 6;
  *(_QWORD *)(v3 + 8 * (v8 >> 6)) ^= v7 << v8;
  v10 = 64 - (v8 & 0x3F);
  v11 = *v4 & 0x3FLL;
  if (v10 >= v11)
  {
LABEL_12:
    *(_QWORD *)(v2 + 24) = v6;
    return result;
  }
  v12 = v11 << v11;
  v13 = __OFADD__(v12, 64);
  v14 = v12 + 64;
  if (!v13)
  {
    v16 = v14 - 1;
    v15 = v14 < 1;
    v17 = v14 + 62;
    if (!v15)
      v17 = v16;
    if (v9 + 1 == v17 >> 6)
      v18 = 0;
    else
      v18 = v9 + 1;
    *(_QWORD *)(v3 + 8 * v18) ^= v7 >> v10;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.BucketIterator._hashTable.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _HashTable.BucketIterator._currentBucket.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _HashTable.BucketIterator._currentBucket.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._currentBucket.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._currentRawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t _HashTable.BucketIterator._currentRawValue.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._currentRawValue.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._nextBits.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t _HashTable.BucketIterator._nextBits.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._nextBits.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._remainingBitCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t _HashTable.BucketIterator._remainingBitCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._remainingBitCount.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator._wrappedAround.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t _HashTable.BucketIterator._wrappedAround.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*_HashTable.BucketIterator._wrappedAround.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.BucketIterator.init(hashTable:startingAt:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, a1, a2);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_BYTE *)(a4 + 48) = 0;
  return result;
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2 & 0x3FLL;
  v4 = (v3 * result) >> 6;
  v5 = (v3 * result) & 0x3F;
  if ((unint64_t)(v5 + v3) <= 0x40)
    return (*(_QWORD *)(a3 + 8 * v4) >> v5) & ~(-1 << v3);
  if (__OFADD__(v3 << v3, 64))
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8 * v4);
    v7 = (v3 << v3) + 126;
    if ((v3 << v3) + 64 >= 1)
      v7 = (v3 << v3) + 63;
    if (v4 + 1 == v7 >> 6)
      v8 = 0;
    else
      v8 = v4 + 1;
    return ((*(_QWORD *)(a3 + 8 * v8) << (64 - v5)) | (v6 >> v5)) & ~(-1 << v3);
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.idealBucket(forHashValue:)(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = 1 << *a2;
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (!v3)
    return v4 & result;
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucketIterator<A>(for:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v7 = 1 << *a1;
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    v10 = v9 & result;
    result = _HashTable.UnsafeHandle._startIterator(bucket:)(v9 & result, a1, a2);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
    *(_QWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 24) = result;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 40) = v12;
    *(_BYTE *)(a3 + 48) = 0;
  }
  return result;
}

unint64_t _HashTable.UnsafeHandle.startFind(_:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v8 = _HashTable.UnsafeHandle._startIterator(bucket:)(a2, a3, a4);
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = 0;
  if (!v8)
    return 0;
  v11 = -1 << *a3;
  v12 = (v11 ^ ~v8) + ((uint64_t)a3[1] >> 6);
  if (v12 >= ~v11)
    v13 = ~v11;
  else
    v13 = 0;
  return v12 - v13;
}

unint64_t _HashTable.BucketIterator.currentValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = v0[3];
  if (!v1)
    return 0;
  v2 = -1 << *(_QWORD *)*v0;
  v3 = (v2 ^ ~v1) + (*(uint64_t *)(*v0 + 8) >> 6);
  if (v3 >= ~v2)
    v4 = ~v2;
  else
    v4 = 0;
  return v3 - v4;
}

uint64_t _HashTable.BucketIterator._scale.getter()
{
  _QWORD **v0;

  return **v0 & 0x3FLL;
}

uint64_t _HashTable.BucketIterator.currentBucket.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t (*_HashTable.BucketIterator.currentValue.modify(uint64_t a1))(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = v1[3];
  if (v2)
  {
    v3 = -1 << *(_QWORD *)*v1;
    v4 = (v3 ^ ~v2) + (*(uint64_t *)(*v1 + 8) >> 6);
    if (v4 >= ~v3)
      v5 = ~v3;
    else
      v5 = 0;
    v6 = v4 - v5;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v2 == 0;
  return _HashTable.BucketIterator.currentValue.modify;
}

uint64_t _HashTable.BucketIterator.currentValue.modify(uint64_t a1)
{
  return _HashTable.BucketIterator.currentValue.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;

  v1 = *(_QWORD *)(v0 + 16) + 1;
  *(_QWORD *)(v0 + 16) = v1;
  v2 = **(_QWORD **)v0 & 0x3FLL;
  v3 = 1 << **(_QWORD **)v0;
  if (v1 != v3)
  {
LABEL_4:
    v4 = *(_QWORD *)(v0 + 40);
    if (v4 >= v2)
      goto LABEL_21;
    v5 = (v1 * v2) >> 6;
    if (v4)
    {
      if (__OFADD__(v2 << v2, 64))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v6 = (v2 << v2) + 126;
      if ((v2 << v2) + 64 >= 1)
        v6 = (v2 << v2) + 63;
      if (v5 + 1 == v6 >> 6)
        v5 = 0;
      else
        ++v5;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 8 * v5);
    *(_QWORD *)(v0 + 24) = (*(_QWORD *)(v0 + 32) | (v7 << v4)) & (v3 - 1);
    v3 = v2 - v4;
    if (!__OFSUB__(v2, v4))
    {
      v8 = v5 == 2 && v2 == 5;
      v9 = 64;
      if (v8)
        v9 = 32;
      v4 = v7 >> v3;
      *(_QWORD *)(v0 + 32) = v7 >> v3;
      v10 = __OFSUB__(v9, v3);
      v2 = v9 - v3;
      if (!v10)
        goto LABEL_22;
      __break(1u);
LABEL_21:
      v11 = *(_QWORD *)(v0 + 32);
      *(_QWORD *)(v0 + 24) = v11 & (v3 - 1);
      *(_QWORD *)(v0 + 32) = v11 >> v2;
      v2 = v4 - v2;
LABEL_22:
      *(_QWORD *)(v0 + 40) = v2;
      return;
    }
    __break(1u);
    goto LABEL_24;
  }
  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
  {
    v1 = 0;
    *(_BYTE *)(v0 + 48) = 1;
    *(_QWORD *)(v0 + 16) = 0;
    goto LABEL_4;
  }
LABEL_25:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int_optional __swiftcall _HashTable.BucketIterator.findNext()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Bool v6;
  Swift::Int_optional result;

  _HashTable.BucketIterator.advance()();
  v1 = v0[3];
  if (v1)
  {
    v2 = -1 << *(_QWORD *)*v0;
    v3 = (v2 ^ ~v1) + (*(uint64_t *)(*v0 + 8) >> 6);
    if (v3 >= ~v2)
      v4 = ~v2;
    else
      v4 = 0;
    v5 = v3 - v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = v1 == 0;
  result.value = v5;
  result.is_nil = v6;
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advanceToNextUnoccupiedBucket()()
{
  uint64_t v0;

  while (*(_QWORD *)(v0 + 24))
    _HashTable.BucketIterator.advance()();
}

_QWORD *sub_245EB4F50@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = result[3];
  if (v2)
  {
    v3 = -1 << *(_QWORD *)*result;
    v4 = (v3 ^ ~v2) + (*(uint64_t *)(*result + 8) >> 6);
    if (v4 >= ~v3)
      v5 = ~v3;
    else
      v5 = 0;
    v6 = v4 - v5;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v2 == 0;
  return result;
}

uint64_t sub_245EB4F9C(uint64_t a1)
{
  return _HashTable.BucketIterator.currentValue.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _HashTable.BucketIterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTable.BucketIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.BucketIterator()
{
  return &type metadata for _HashTable.BucketIterator;
}

uint64_t _HashTable.UnsafeHandle.scale.getter(_QWORD *a1)
{
  return *a1 & 0x3FLL;
}

uint64_t _HashTable.UnsafeHandle.bucketCount.getter(_QWORD *a1)
{
  return 1 << *a1;
}

uint64_t _HashTable.UnsafeHandle.seed.getter(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t _HashTable.UnsafeHandle.position(of:)(uint64_t a1, _QWORD *a2)
{
  return ((*a2 & 0x3FLL) * a1) >> 6;
}

uint64_t _HashTable.UnsafeHandle.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 + 8 * a1);
}

uint64_t _HashTable.UnsafeHandle.bucketMask.getter(_QWORD *a1)
{
  return ~(-1 << *a1);
}

_QWORD *_HashTable.UnsafeHandle.wordCount.getter(_QWORD *result)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (*result & 0x3FLL) << *result;
  v2 = __OFADD__(v1, 64);
  v3 = v1 + 64;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    v5 = v3 - 1;
    v4 = v3 < 1;
    v6 = v3 + 62;
    if (!v4)
      v6 = v5;
    return (_QWORD *)(v6 >> 6);
  }
  return result;
}

Swift::Int __swiftcall _HashTable.UnsafeHandle.word(after:)(Swift::Int after)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (__OFADD__(after, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = (*v1 & 0x3FLL) << *v1;
  v3 = __OFADD__(v2, 64);
  v4 = v2 + 64;
  if (v3)
  {
LABEL_9:
    __break(1u);
    return after;
  }
  v6 = v4 - 1;
  v5 = v4 < 1;
  v7 = v4 + 62;
  if (!v5)
    v7 = v6;
  if (after + 1 == v7 >> 6)
    return 0;
  return ++after;
}

Swift::Int_optional __swiftcall _HashTable.UnsafeHandle._value(forBucketContents:)(Swift::UInt64 forBucketContents)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::UInt64 v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Bool v6;
  Swift::Int v7;
  Swift::Int_optional result;

  if (forBucketContents)
  {
    v2 = -1 << *v1;
    v3 = (v2 ^ ~forBucketContents) + ((uint64_t)v1[1] >> 6);
    if (v3 >= ~v2)
      v4 = ~v2;
    else
      v4 = 0;
    v5 = v3 - v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = forBucketContents == 0;
  v7 = v5;
  result.value = v7;
  result.is_nil = v6;
  return result;
}

Swift::UInt64 __swiftcall _HashTable.UnsafeHandle._bucketContents(for:)(Swift::Int_optional a1)
{
  _QWORD *v1;

  if (a1.is_nil)
    return 0;
  else
    return (-1 << *v1) ^ ~((((a1.value - ((uint64_t)v1[1] >> 6)) >> 63) & ~(-1 << *v1))
                           + a1.value
                           - ((uint64_t)v1[1] >> 6));
}

uint64_t _HashTable.UnsafeHandle.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8 * a2) = result;
  return result;
}

uint64_t _HashTable.UnsafeHandle._header.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HashTable.UnsafeHandle._header.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.UnsafeHandle._buckets.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashTable.UnsafeHandle._buckets.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTable.UnsafeHandle._buckets.modify())()
{
  return destructiveProjectEnumData for NodePersonality.ShaderType;
}

uint64_t _HashTable.UnsafeHandle.reservedScale.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) & 0x3FLL;
}

uint64_t _HashTable.UnsafeHandle.bias.getter(uint64_t a1)
{
  return *(uint64_t *)(a1 + 8) >> 6;
}

uint64_t _HashTable.UnsafeHandle.bias.setter(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 1 << *a2;
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v5 = (v4 & (result >> 63)) + result;
    if (v5 < v4)
      v4 = 0;
    a2[1] = a2[1] & 0x3FLL | ((v5 - v4) << 6);
  }
  return result;
}

uint64_t *(*_HashTable.UnsafeHandle.bias.modify(uint64_t *a1, uint64_t a2))(uint64_t *result, char a2)
{
  *a1 = *(uint64_t *)(a2 + 8) >> 6;
  a1[1] = a2;
  return _HashTable.UnsafeHandle.bias.modify;
}

uint64_t *_HashTable.UnsafeHandle.bias.modify(uint64_t *result, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = (_QWORD *)result[1];
  v3 = 1 << *v2;
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  v6 = v4;
  if ((a2 & 1) != 0)
  {
    if ((v6 & 1) == 0)
      goto LABEL_8;
    __break(1u);
  }
  if ((v6 & 1) != 0)
  {
    __break(1u);
    return result;
  }
LABEL_8:
  v7 = (v5 & (*result >> 63)) + *result;
  if (v7 < v5)
    v5 = 0;
  v2[1] = v2[1] & 0x3FLL | ((v7 - v5) << 6);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bitCount.getter(_QWORD *a1)
{
  return (*a1 & 0x3FLL) << *a1;
}

uint64_t _HashTable.UnsafeHandle.capacity.getter(uint64_t result)
{
  unint64_t v1;
  double v2;

  v1 = *(_QWORD *)result & 0x3FLL;
  if (v1 < 5)
    return 15;
  v2 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.22337204e18)
    return (uint64_t)v2;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucket(after:)(uint64_t result, _QWORD *a2)
{
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else if (result + 1 == 1 << *a2)
  {
    return 0;
  }
  else
  {
    ++result;
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.bucket(before:)(uint64_t a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  if (!a1)
    a1 = 1 << *a2;
  v2 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int __swiftcall _HashTable.UnsafeHandle.word(before:)(Swift::Int before)
{
  _QWORD *v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (before)
  {
    v2 = __OFSUB__(before--, 1);
    if (!v2)
      return before;
    __break(1u);
LABEL_9:
    __break(1u);
    return before;
  }
  v3 = (*v1 & 0x3FLL) << *v1;
  v2 = __OFADD__(v3, 64);
  v4 = v3 + 64;
  if (v2)
    goto LABEL_9;
  v6 = v4 - 1;
  v5 = v4 < 1;
  v7 = v4 + 62;
  if (!v5)
    v7 = v6;
  return (v7 >> 6) - 1;
}

_QWORD *(*_HashTable.UnsafeHandle.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *result)
{
  a1[1] = a2;
  a1[2] = a4;
  *a1 = *(_QWORD *)(a4 + 8 * a2);
  return _HashTable.UnsafeHandle.subscript.modify;
}

_QWORD *_HashTable.UnsafeHandle.subscript.modify(_QWORD *result)
{
  *(_QWORD *)(result[2] + 8 * result[1]) = *result;
  return result;
}

uint64_t _HashTable.UnsafeHandle.subscript.getter(uint64_t result, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2 & 0x3FLL;
  v4 = (uint64_t)(v3 * result) >> 6;
  v5 = *(_QWORD *)(a3 + 8 * v4) >> (v3 * result);
  v6 = 64 - ((v3 * result) & 0x3F);
  if (v6 >= v3)
    return v5 & ~(-1 << v3);
  if (!__OFADD__(v3 << v3, 64))
  {
    v7 = (v3 << v3) + 126;
    if ((uint64_t)((v3 << v3) + 64) >= 1)
      v7 = (v3 << v3) + 63;
    if (v4 + 1 == v7 >> 6)
      v8 = 0;
    else
      v8 = v4 + 1;
    v5 = (*(_QWORD *)(a3 + 8 * v8) << v6) | v5 & ~(-1 << v6);
    return v5 & ~(-1 << v3);
  }
  __break(1u);
  return result;
}

unint64_t _HashTable.UnsafeHandle.subscript.setter(unint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (*a3 & 0x3FLL) * a2;
  v5 = v4 >> 6;
  *(_QWORD *)(a4 + 8 * (v4 >> 6)) = ((((-1 << *a3) + 1) << v4) - 1) & *(_QWORD *)(a4 + 8 * (v4 >> 6)) | (result << v4);
  v6 = 64 - (v4 & 0x3F);
  v7 = *a3 & 0x3FLL;
  if (v6 < v7)
  {
    v8 = v7 << v7;
    v9 = __OFADD__(v8, 64);
    v10 = v8 + 64;
    if (v9)
    {
      __break(1u);
    }
    else
    {
      v12 = v10 - 1;
      v11 = v10 < 1;
      v13 = v10 + 62;
      if (!v11)
        v13 = v12;
      if (v5 + 1 == v13 >> 6)
        v14 = 0;
      else
        v14 = v5 + 1;
      *(_QWORD *)(a4 + 8 * v14) = *(_QWORD *)(a4 + 8 * v14) & (-1 << (*a3 - v6)) | (result >> v6);
    }
  }
  return result;
}

unint64_t (*_HashTable.UnsafeHandle.subscript.modify(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4))(uint64_t a1)
{
  a1[2] = (uint64_t)a3;
  a1[3] = a4;
  a1[1] = a2;
  *a1 = _HashTable.UnsafeHandle.subscript.getter(a2, a3, a4);
  return _HashTable.UnsafeHandle.subscript.modify;
}

unint64_t _HashTable.UnsafeHandle.subscript.modify(uint64_t a1)
{
  return _HashTable.UnsafeHandle.subscript.setter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24));
}

BOOL _HashTable.UnsafeHandle.isOccupied(_:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return _HashTable.UnsafeHandle.subscript.getter(a1, a2, a3) != 0;
}

unint64_t _HashTable.UnsafeHandle.subscript.getter(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = _HashTable.UnsafeHandle.subscript.getter(a1, a2, a3);
  if (!v4)
    return 0;
  v5 = -1 << *a2;
  v6 = (v5 ^ ~v4) + ((uint64_t)a2[1] >> 6);
  if (v6 >= ~v5)
    v7 = ~v5;
  else
    v7 = 0;
  return v6 - v7;
}

Swift::Int key path getter for _HashTable.UnsafeHandle.subscript(_:) : _HashTable.UnsafeHandle@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Swift::UInt64 v4;
  Swift::Int_optional v6;

  v4 = _HashTable.UnsafeHandle.subscript.getter(*a2, *(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  v6 = _HashTable.UnsafeHandle._value(forBucketContents:)(v4);
  *(_QWORD *)a3 = v6.value;
  *(_BYTE *)(a3 + 8) = v6.is_nil;
  return v6.value;
}

unint64_t key path setter for _HashTable.UnsafeHandle.subscript(_:) : _HashTable.UnsafeHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  Swift::UInt64 v7;
  Swift::Int_optional v9;

  v3 = *a3;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v9.value = *(_QWORD *)a1;
  v9.is_nil = v4;
  v7 = _HashTable.UnsafeHandle._bucketContents(for:)(v9);
  return _HashTable.UnsafeHandle.subscript.setter(v7, v3, v5, v6);
}

unint64_t _HashTable.UnsafeHandle.subscript.setter(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;

  if ((a2 & 1) != 0)
    v5 = 0;
  else
    v5 = (-1 << *a4) ^ ~((((a1 - ((uint64_t)a4[1] >> 6)) >> 63) & ~(-1 << *a4)) + a1 - ((uint64_t)a4[1] >> 6));
  return _HashTable.UnsafeHandle.subscript.setter(v5, a3, a4, a5);
}

void (*_HashTable.UnsafeHandle.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4))(uint64_t a1)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[3] = a3;
  v8[4] = a4;
  v8[2] = a2;
  v9 = _HashTable.UnsafeHandle.subscript.getter(a2, a3, a4);
  if (v9)
  {
    v10 = -1 << *a3;
    v11 = (v10 ^ ~v9) + ((uint64_t)a3[1] >> 6);
    if (v11 >= ~v10)
      v12 = ~v10;
    else
      v12 = 0;
    v13 = v11 - v12;
  }
  else
  {
    v13 = 0;
  }
  *v8 = v13;
  *((_BYTE *)v8 + 8) = v9 == 0;
  return _HashTable.UnsafeHandle.subscript.modify;
}

void _HashTable.UnsafeHandle.subscript.modify(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  if ((*(_BYTE *)(*(_QWORD *)a1 + 8) & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v4 = *v1 - ((uint64_t)v2[1] >> 6);
    v3 = (-1 << *v2) ^ ~(((v4 >> 63) & ~(-1 << *v2)) + v4);
  }
  _HashTable.UnsafeHandle.subscript.setter(v3, v1[2], v2, v1[4]);
  free(v1);
}

uint64_t _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[32];
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v40 = a2;
  v44 = a6;
  v11 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v37 - v15;
  v42 = v11;
  v17 = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - v18;
  v43 = a1;
  v45 = a7;
  result = dispatch thunk of Hashable._rawHashValue(seed:)();
  v21 = 1 << *a3;
  v22 = v21 - 1;
  if (__OFSUB__(v21, 1))
  {
    __break(1u);
  }
  else
  {
    v23 = v22 & result;
    v24 = _HashTable.UnsafeHandle._startIterator(bucket:)(v22 & result, a3, a4);
    v47 = a3;
    v48 = a4;
    v49 = v23;
    v50 = v24;
    v51 = v25;
    v52 = v26;
    v53 = 0;
    if (!v24)
      return 0;
    v27 = (v24 ^ v22) + ((uint64_t)a3[1] >> 6);
    if (v27 >= v22)
      v28 = v22;
    else
      v28 = 0;
    v29 = v27 - v28;
    v30 = AssociatedTypeWitness;
    while (1)
    {
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v31 = *(void (**)(char *, uint64_t))(v39 + 8);
      v31(v14, v30);
      v32 = dispatch thunk of Collection.subscript.read();
      v33 = v38;
      (*(void (**)(char *))(v38 + 16))(v19);
      ((void (*)(char *, _QWORD))v32)(v46, 0);
      v31(v16, v30);
      LOBYTE(v32) = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v17);
      if ((v32 & 1) != 0)
        break;
      _HashTable.BucketIterator.advance()();
      if (!v50)
        return 0;
      v34 = -1 << *v47;
      v35 = (v34 ^ ~v50) + ((uint64_t)v47[1] >> 6);
      if (v35 >= ~v34)
        v36 = ~v34;
      else
        v36 = 0;
      v29 = v35 - v36;
    }
    return v29;
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v3 = *a2;
  v4 = *a2 & 0x3F;
  v5 = 1 << *a2;
  v6 = v4 << *a2;
  v7 = v6 + 64;
  v8 = __OFADD__(v6, 64);
  v10 = v7 - 1;
  v9 = v7 < 1;
  v11 = v7 + 62;
  if (!v9)
    v11 = v10;
  v12 = v11 >> 6;
  v13 = *a2;
  while (1)
  {
    if (result)
      v16 = result;
    else
      v16 = v5;
    if (!result)
      LOBYTE(v13) = v3;
    result = v16 - 1;
    if (__OFSUB__(v16, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    v17 = (uint64_t)(result * v4) >> 6;
    v15 = *(_QWORD *)(a3 + 8 * v17) >> (result * v4);
    v18 = 64 - ((result * v4) & 0x3F);
    if (v18 < v4)
      break;
LABEL_11:
    if ((v15 & (v5 - 1)) == 0)
      goto LABEL_21;
  }
  if (!v8)
  {
    if (v17 + 1 == v12)
      v14 = 0;
    else
      v14 = v17 + 1;
    v15 = (*(_QWORD *)(a3 + 8 * v14) << v18) | v15 & ~(-1 << v18);
    goto LABEL_11;
  }
  __break(1u);
LABEL_21:
  if (__OFADD__(result, 1))
  {
LABEL_26:
    __break(1u);
    return result;
  }
  if (result + 1 == 1 << v13)
    return 0;
  return ++result;
}

void specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  Swift::UInt v23;
  int v24;
  Swift::UInt v25;
  void (*v26)(_BYTE *);
  Swift::Int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE v36[72];
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v4 = a3;
  v5 = a2;
  v6 = a1;
  v37 = a2;
  v38 = a3;
  v39 = a1;
  v40 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  v41 = v7;
  v42 = v8;
  v43 = 0;
  _HashTable.BucketIterator.advance()();
  v9 = v40;
  if (!v40)
  {
LABEL_23:
    _HashTable.UnsafeHandle.subscript.setter(0, v6, v5, v4);
    return;
  }
  v33 = v4;
  v34 = v5;
  v32 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v6, v5, v4);
  while (1)
  {
    v14 = v37;
    v15 = -1 << *v37;
    v16 = (v15 ^ ~v9) + ((uint64_t)v37[1] >> 6);
    v17 = v16 >= ~v15 ? ~v15 : 0;
    v18 = v16 - v17;
    if (v18 < 0)
      break;
    v19 = *(_QWORD *)(a4 + 8);
    if ((unint64_t)v18 >= *(_QWORD *)(v19 + 16))
      goto LABEL_25;
    v20 = v19 + 56 * v18;
    v21 = *(_QWORD *)(v20 + 32);
    v22 = *(_QWORD *)(v20 + 40);
    v23 = *(_QWORD *)(v20 + 64);
    v24 = *(unsigned __int8 *)(v20 + 72);
    v25 = *(_QWORD *)(v20 + 80);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v21);
    v26 = *(void (**)(_BYTE *))(*(_QWORD *)v22 + 120);
    swift_retain();
    swift_bridgeObjectRetain();
    v26(v36);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v24 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v23);
    }
    Hasher._combine(_:)(v25);
    v27 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    swift_release();
    v5 = v34;
    v28 = 1 << *v34;
    v29 = __OFSUB__(v28, 1);
    v30 = v28 - 1;
    if (v29)
      goto LABEL_26;
    v31 = v30 & v27;
    if (v6 >= v32)
    {
      v4 = v33;
      if (v31 < v32)
        goto LABEL_7;
    }
    else
    {
      v4 = v33;
      if (v31 >= v32)
        goto LABEL_3;
    }
    if (v6 >= v31)
    {
LABEL_3:
      v10 = -1 << *v14;
      v11 = (v10 ^ ~v9) + ((uint64_t)v14[1] >> 6);
      if (v11 >= ~v10)
        v12 = v10 + 1;
      else
        v12 = 0;
      v13 = v11 - ((uint64_t)v34[1] >> 6) + v12;
      _HashTable.UnsafeHandle.subscript.setter(((v30 & (v13 >> 63)) + v13) ^ v30, v6, v34, v4);
      v6 = v39;
    }
LABEL_7:
    _HashTable.BucketIterator.advance()();
    v9 = v40;
    if (!v40)
      goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::Int v29;
  _BYTE v30[8];
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v7 = a1;
  v31 = a2;
  v32 = a3;
  v33 = a1;
  v34 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  v35 = v8;
  v36 = v9;
  v37 = 0;
  _HashTable.BucketIterator.advance()();
  v10 = v34;
  if (!v34)
  {
    _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
    return;
  }
  v11 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v7, a2, a3);
  while (1)
  {
    v16 = v31;
    v17 = -1 << *v31;
    v18 = (v17 ^ ~v10) + ((uint64_t)v31[1] >> 6);
    v19 = v18 >= ~v17 ? ~v17 : 0;
    v20 = v18 - v19;
    if (v20 < 0)
      break;
    v21 = *(_QWORD *)(a4 + 8);
    if ((unint64_t)v20 >= *(_QWORD *)(v21 + 16))
      goto LABEL_26;
    outlined init with copy of WeakBox<SGEdge>(v21 + 8 * v20 + 32, (uint64_t)v30);
    Hasher.init(_seed:)();
    v22 = MEMORY[0x24954C3E4](v30);
    if (v22)
    {
      v23 = (void *)v22;
      Hasher._combine(_:)(1u);
      v24 = v23;
      NSObject.hash(into:)();

    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v25 = Hasher._finalize()();
    outlined destroy of WeakBox<SGEdge>((uint64_t)v30);
    v26 = 1 << *a2;
    v27 = __OFSUB__(v26, 1);
    v28 = v26 - 1;
    if (v27)
      goto LABEL_27;
    v29 = v28 & v25;
    if (v7 >= v11)
    {
      if (v29 < v11)
        goto LABEL_7;
    }
    else if (v29 >= v11)
    {
      goto LABEL_3;
    }
    if (v7 >= v29)
    {
LABEL_3:
      v12 = -1 << *v16;
      v13 = (v12 ^ ~v10) + ((uint64_t)v16[1] >> 6);
      if (v13 >= ~v12)
        v14 = v12 + 1;
      else
        v14 = 0;
      v15 = v13 - ((uint64_t)a2[1] >> 6) + v14;
      _HashTable.UnsafeHandle.subscript.setter(((v28 & (v15 >> 63)) + v15) ^ v28, v7, a2, a3);
      v7 = v33;
    }
LABEL_7:
    _HashTable.BucketIterator.advance()();
    v10 = v34;
    if (!v34)
    {
      _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
      return;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

void specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::Int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v27;

  v7 = a1;
  v27 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  _HashTable.BucketIterator.advance()();
  v8 = v27;
  if (!v27)
  {
    _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
    return;
  }
  v9 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v7, a2, a3);
  while (1)
  {
    v14 = -1 << *a2;
    v15 = (v14 ^ ~v8) + (a2[1] >> 6);
    v16 = v15 >= ~v14 ? ~v14 : 0;
    v17 = v15 - v16;
    if (v17 < 0)
      break;
    v18 = *(_QWORD *)(a4 + 8);
    if ((unint64_t)v17 >= *(_QWORD *)(v18 + 16))
      goto LABEL_22;
    v19 = *(_QWORD *)(v18 + 8 * v17 + 32);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    v20 = Hasher._finalize()();
    v21 = 1 << *a2;
    v22 = __OFSUB__(v21, 1);
    v23 = v21 - 1;
    if (v22)
      goto LABEL_23;
    v24 = v23 & v20;
    if (v7 >= v9)
    {
      if (v24 < v9)
        goto LABEL_7;
LABEL_18:
      if (v7 < v24)
        goto LABEL_7;
      goto LABEL_3;
    }
    if (v24 < v9)
      goto LABEL_18;
LABEL_3:
    v10 = -1 << *a2;
    v11 = (v10 ^ ~v8) + (a2[1] >> 6);
    if (v11 >= ~v10)
      v12 = v10 + 1;
    else
      v12 = 0;
    v13 = v11 - (a2[1] >> 6) + v12;
    _HashTable.UnsafeHandle.subscript.setter(((v23 & (v13 >> 63)) + v13) ^ v23, v7, a2, a3);
    v7 = a1;
LABEL_7:
    _HashTable.BucketIterator.advance()();
    v8 = v27;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v25;

  v7 = a1;
  v25 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a2, a3);
  _HashTable.BucketIterator.advance()();
  v8 = v25;
  if (!v25)
  {
    _HashTable.UnsafeHandle.subscript.setter(0, v7, a2, a3);
    return;
  }
  v9 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v7, a2, a3);
  while (1)
  {
    v14 = -1 << *a2;
    v15 = (v14 ^ ~v8) + (a2[1] >> 6);
    v16 = v15 >= ~v14 ? ~v14 : 0;
    v17 = v15 - v16;
    if (v17 < 0)
      break;
    if ((unint64_t)v17 >= *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16))
      goto LABEL_22;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v19 = 1 << *a2;
    v20 = __OFSUB__(v19, 1);
    v21 = v19 - 1;
    if (v20)
      goto LABEL_23;
    v22 = v21 & v18;
    if (v7 >= v9)
    {
      if (v22 < v9)
        goto LABEL_7;
LABEL_18:
      if (v7 < v22)
        goto LABEL_7;
      goto LABEL_3;
    }
    if (v22 < v9)
      goto LABEL_18;
LABEL_3:
    v10 = -1 << *a2;
    v11 = (v10 ^ ~v8) + (a2[1] >> 6);
    if (v11 >= ~v10)
      v12 = v10 + 1;
    else
      v12 = 0;
    v13 = v11 - (a2[1] >> 6) + v12;
    _HashTable.UnsafeHandle.subscript.setter(((v21 & (v13 >> 63)) + v13) ^ v21, v7, a2, a3);
    v7 = a1;
LABEL_7:
    _HashTable.BucketIterator.advance()();
    v8 = v25;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
}

unint64_t _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, uint64_t (*a2)(unint64_t, uint64_t), uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v27;

  v8 = a1;
  v27 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a4, a5);
  _HashTable.BucketIterator.advance()();
  v9 = v27;
  if (!v27)
    return _HashTable.UnsafeHandle.subscript.setter(0, v8, a4, a5);
  v10 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)(v8, a4, a5);
  while (1)
  {
    v15 = -1 << *a4;
    v16 = (v15 ^ ~v9) + (a4[1] >> 6);
    v17 = v16 >= ~v15 ? ~v15 : 0;
    result = a2(v16 - v17, *a4);
    v19 = 1 << *a4;
    v20 = __OFSUB__(v19, 1);
    v21 = v19 - 1;
    if (v20)
      break;
    v22 = v21 & result;
    if (v8 >= v10)
    {
      if (v22 >= v10 && v8 >= v22)
      {
LABEL_3:
        v11 = -1 << *a4;
        v12 = (v11 ^ ~v9) + (a4[1] >> 6);
        if (v12 >= ~v11)
          v13 = v11 + 1;
        else
          v13 = 0;
        v14 = v12 - (a4[1] >> 6) + v13;
        _HashTable.UnsafeHandle.subscript.setter(((v21 & (v14 >> 63)) + v14) ^ v21, v8, a4, a5);
        v8 = a1;
      }
    }
    else if (v22 >= v10 || v8 >= v22)
    {
      goto LABEL_3;
    }
    _HashTable.BucketIterator.advance()();
    v9 = v27;
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.adjustContents<A>(preparingForInsertionOfElementAtOffset:in:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t result;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(char *, uint64_t);
  uint64_t v173;
  char *v174;
  uint64_t v175;
  void (*v176)(char *, char *, uint64_t);
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char v191;

  v182 = a7;
  v175 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v162 = type metadata accessor for PartialRangeFrom();
  v161 = *(_QWORD *)(v162 - 8);
  MEMORY[0x24BDAC7A8](v162);
  v160 = (char *)&v159 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v183 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v180 = (char *)&v159 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v181 = (char *)&v159 - v17;
  v167 = v18;
  v19 = type metadata accessor for Optional();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v176 = (void (*)(char *, char *, uint64_t))((char *)&v159 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v20);
  v177 = (char *)&v159 - v22;
  v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v23);
  v169 = (char *)&v159 - v24;
  v171 = AssociatedConformanceWitness;
  v165 = type metadata accessor for PartialRangeUpTo();
  v164 = *(_QWORD *)(v165 - 8);
  MEMORY[0x24BDAC7A8](v165);
  v163 = (char *)&v159 - v25;
  v168 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v170 = v23;
  v184 = swift_getAssociatedTypeWitness();
  v166 = *(_QWORD *)(v184 - 8);
  v26 = MEMORY[0x24BDAC7A8](v184);
  v178 = (char *)&v159 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v179 = (char *)&v159 - v29;
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v159 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v159 - v34;
  dispatch thunk of Collection.startIndex.getter();
  v174 = v35;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v36 = *(uint64_t (**)(char *, uint64_t))(v30 + 8);
  v175 = AssociatedTypeWitness;
  v172 = v36;
  v36(v33, AssociatedTypeWitness);
  v173 = a2;
  v37 = dispatch thunk of Collection.count.getter();
  if (v37 >= 0)
    v38 = v37;
  else
    v38 = v37 + 1;
  if (a1 < v38 >> 1)
  {
    _HashTable.Header.bias.setter(((uint64_t)a3[1] >> 6) + 1);
    if (specialized static _HashTable.maximumCapacity(forScale:)(*a3 & 0x3FLL) / 3 < a1)
    {
      v39 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a3, a4);
      v40 = 0;
      v185 = a3;
      v186 = a4;
      v187 = 0;
      v188 = v39;
      v189 = v41;
      v190 = v42;
      v191 = 0;
      while (1)
      {
        if (v188)
        {
          v43 = v185;
          v44 = ~(-1 << *v185);
          v45 = (uint64_t)v185[1] >> 6;
          v46 = v45 + (v188 ^ v44);
          v47 = v46 >= v44 ? ~(-1 << *v185) : 0;
          v48 = v46 - v47;
          if (v48 <= a1)
          {
            v49 = __OFSUB__(v48, 1);
            v50 = v48 - 1;
            if (v49)
              goto LABEL_150;
            v51 = *v185 & 0x3FLL;
            v52 = v186;
            v53 = ((v44 & ((v50 - v45) >> 63)) + v50 - v45) ^ v44;
            v54 = v53 ^ v188;
            v55 = v51 * v40;
            v56 = (v51 * v40) >> 6;
            *(_QWORD *)(v186 + 8 * v56) ^= (v53 ^ v188) << v55;
            v57 = 64 - (v55 & 0x3F);
            v58 = *v43 & 0x3FLL;
            if (v57 < v58)
            {
              v59 = v58 << v58;
              v49 = __OFADD__(v59, 64);
              v60 = v59 + 64;
              if (v49)
                goto LABEL_152;
              v62 = v60 - 1;
              v61 = v60 < 1;
              v63 = v60 + 62;
              if (!v61)
                v63 = v62;
              if (v56 + 1 == v63 >> 6)
                v64 = 0;
              else
                v64 = v56 + 1;
              *(_QWORD *)(v52 + 8 * v64) ^= v54 >> v57;
            }
            v188 = v53;
          }
        }
        _HashTable.BucketIterator.advance()();
        v40 = v187;
        if (!v187)
          return v172(v174, v175);
      }
    }
    v91 = v174;
    v92 = v175;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v93 = v163;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v163, v91, v92);
      v94 = v165;
      MEMORY[0x24954C264](MEMORY[0x24BEE2C68], v165);
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v164 + 8))(v93, v94);
      dispatch thunk of Sequence.makeIterator()();
      v95 = swift_getAssociatedConformanceWitness();
      v96 = v177;
      v180 = (char *)v95;
      dispatch thunk of IteratorProtocol.next()();
      v97 = v167;
      v178 = *(char **)(v183 + 48);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v178)(v96, 1, v167) != 1)
      {
        v176 = *(void (**)(char *, char *, uint64_t))(v183 + 32);
        v98 = 1;
        do
        {
          v176(v181, v96, v97);
          v99 = dispatch thunk of Hashable._rawHashValue(seed:)();
          v100 = *a3;
          v101 = 1 << *a3;
          v102 = v101 - 1;
          if (__OFSUB__(v101, 1))
            goto LABEL_144;
          v103 = v102 & v99;
          v104 = _HashTable.UnsafeHandle._startIterator(bucket:)(v102 & v99, a3, a4);
          v185 = a3;
          v186 = a4;
          if (!v104)
            goto LABEL_158;
          v107 = (uint64_t)a3[1] >> 6;
          v108 = v107 + (v104 ^ v102);
          if (v108 >= v102)
            v109 = v101 - 1;
          else
            v109 = 0;
          v110 = v108 - v109;
          if (v108 - v109 != v98)
          {
            v111 = 0;
            v112 = v100 & 0x3F;
            v113 = __OFADD__(v112 << v112, 64);
            v114 = (v112 << v112) + 126;
            if ((v112 << v112) + 64 >= 1)
              v114 = (v112 << v112) + 63;
            v115 = v114 >> 6;
            while (1)
            {
              if (++v103 == v101)
              {
                if ((v111 & 1) != 0)
                  goto LABEL_160;
                v103 = 0;
                v111 = 1;
              }
              if (v106 >= v112)
              {
                v49 = __OFSUB__(v106, v112);
                v106 -= v112;
                if (v49)
                {
                  __break(1u);
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
                  goto LABEL_141;
                }
                v122 = v105 >> v112;
              }
              else
              {
                v116 = (v103 * v112) >> 6;
                if (v106)
                {
                  if (v113)
                    goto LABEL_142;
                  if (v116 + 1 == v115)
                    v116 = 0;
                  else
                    ++v116;
                }
                v117 = v112 - v106;
                if (__OFSUB__(v112, v106))
                  goto LABEL_137;
                if (v116 == 2 && v112 == 5)
                  v119 = 32;
                else
                  v119 = 64;
                v49 = __OFSUB__(v119, v117);
                v120 = v119 - v117;
                if (v49)
                  goto LABEL_138;
                v121 = *(_QWORD *)(a4 + 8 * v116);
                v105 |= v121 << v106;
                v122 = v121 >> v117;
                v106 = v120;
              }
              v104 = v105 & v102;
              if ((v105 & v102) == 0)
                goto LABEL_158;
              v123 = v107 + (v104 ^ v102);
              if (v123 >= v102)
                v124 = v101 - 1;
              else
                v124 = 0;
              v110 = v123 - v124;
              v105 = v122;
              if (v110 == v98)
              {
                v105 = v122;
                goto LABEL_85;
              }
            }
          }
          v111 = 0;
LABEL_85:
          v191 = v111;
          v187 = v103;
          v188 = v104;
          v189 = v105;
          v190 = v106;
          v96 = v177;
          if (__OFSUB__(v110, 1))
            goto LABEL_146;
          _HashTable.BucketIterator.currentValue.setter(v110 - 1, 0);
          (*(void (**)(char *, uint64_t))(v183 + 8))(v181, v97);
          v49 = __OFADD__(v98++, 1);
          if (v49)
            goto LABEL_147;
          dispatch thunk of IteratorProtocol.next()();
        }
        while (((unsigned int (*)(char *, uint64_t, uint64_t))v178)(v96, 1, v97) != 1);
      }
      (*(void (**)(char *, uint64_t))(v166 + 8))(v179, v184);
      return v172(v174, v175);
    }
    goto LABEL_156;
  }
  v65 = dispatch thunk of Collection.count.getter();
  v66 = v65 - a1;
  if (__OFSUB__(v65, a1))
    goto LABEL_154;
  if (__OFSUB__(v66, 1))
  {
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  if (specialized static _HashTable.maximumCapacity(forScale:)(*a3 & 0x3FLL) / 3 < v66 - 1)
  {
    v67 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a3, a4);
    v68 = 0;
    v185 = a3;
    v186 = a4;
    v187 = 0;
    v188 = v67;
    v189 = v69;
    v190 = v70;
    v191 = 0;
    while (1)
    {
      if (v188)
      {
        v71 = v185;
        v72 = ~(-1 << *v185);
        v73 = (uint64_t)v185[1] >> 6;
        v74 = v73 + (v188 ^ v72);
        v75 = v74 >= v72 ? ~(-1 << *v185) : 0;
        v76 = v74 - v75;
        if (v76 >= a1)
        {
          v49 = __OFADD__(v76, 1);
          v77 = v76 + 1;
          if (v49)
            goto LABEL_151;
          v78 = *v185 & 0x3FLL;
          v79 = v186;
          v80 = ((v72 & ((v77 - v73) >> 63)) + v77 - v73) ^ v72;
          v81 = v80 ^ v188;
          v82 = v78 * v68;
          v83 = (v78 * v68) >> 6;
          *(_QWORD *)(v186 + 8 * v83) ^= (v80 ^ v188) << v82;
          v84 = 64 - (v82 & 0x3F);
          v85 = *v71 & 0x3FLL;
          if (v84 < v85)
          {
            v86 = v85 << v85;
            v49 = __OFADD__(v86, 64);
            v87 = v86 + 64;
            if (v49)
              goto LABEL_153;
            v88 = v87 - 1;
            v61 = v87 < 1;
            v89 = v87 + 62;
            if (!v61)
              v89 = v88;
            if (v83 + 1 == v89 >> 6)
              v90 = 0;
            else
              v90 = v83 + 1;
            *(_QWORD *)(v79 + 8 * v90) ^= v81 >> v84;
          }
          v188 = v80;
        }
      }
      _HashTable.BucketIterator.advance()();
      v68 = v187;
      if (!v187)
        return v172(v174, v175);
    }
  }
  v125 = v174;
  v126 = v175;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    goto LABEL_157;
  v127 = v160;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v160, v125, v126);
  v128 = v162;
  MEMORY[0x24954C264](MEMORY[0x24BEE2C50], v162);
  Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v161 + 8))(v127, v128);
  dispatch thunk of Sequence.makeIterator()();
  v129 = swift_getAssociatedConformanceWitness();
  v130 = v176;
  v181 = (char *)v129;
  dispatch thunk of IteratorProtocol.next()();
  v131 = v167;
  v179 = *(char **)(v183 + 48);
  if (((unsigned int (*)(_QWORD, uint64_t, uint64_t))v179)(v130, 1, v167) == 1)
  {
LABEL_134:
    (*(void (**)(char *, uint64_t))(v166 + 8))(v178, v184);
    return v172(v174, v175);
  }
  v177 = *(char **)(v183 + 32);
  while (1)
  {
    ((void (*)(char *, _QWORD, uint64_t))v177)(v180, v130, v131);
    v132 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v133 = *a3;
    v134 = 1 << *a3;
    v135 = v134 - 1;
    if (__OFSUB__(v134, 1))
      goto LABEL_145;
    v136 = v135 & v132;
    v137 = _HashTable.UnsafeHandle._startIterator(bucket:)(v135 & v132, a3, a4);
    v185 = a3;
    v186 = a4;
    if (!v137)
      break;
    v140 = (uint64_t)a3[1] >> 6;
    v141 = v140 + (v137 ^ v135);
    if (v141 >= v135)
      v142 = v134 - 1;
    else
      v142 = 0;
    v143 = v141 - v142;
    if (v141 - v142 != a1)
    {
      v144 = 0;
      v145 = v133 & 0x3F;
      v146 = __OFADD__(v145 << v145, 64);
      v147 = (v145 << v145) + 126;
      if ((v145 << v145) + 64 >= 1)
        v147 = (v145 << v145) + 63;
      v148 = v147 >> 6;
      while (1)
      {
        if (++v136 == v134)
        {
          if ((v144 & 1) != 0)
            goto LABEL_160;
          v136 = 0;
          v144 = 1;
        }
        if (v139 >= v145)
        {
          v49 = __OFSUB__(v139, v145);
          v139 -= v145;
          if (v49)
            goto LABEL_139;
          v155 = v138 >> v145;
        }
        else
        {
          v149 = (v136 * v145) >> 6;
          if (v139)
          {
            if (v146)
              goto LABEL_143;
            if (v149 + 1 == v148)
              v149 = 0;
            else
              ++v149;
          }
          v150 = v145 - v139;
          if (__OFSUB__(v145, v139))
            goto LABEL_140;
          if (v149 == 2 && v145 == 5)
            v152 = 32;
          else
            v152 = 64;
          v49 = __OFSUB__(v152, v150);
          v153 = v152 - v150;
          if (v49)
          {
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
            goto LABEL_155;
          }
          v154 = *(_QWORD *)(a4 + 8 * v149);
          v138 |= v154 << v139;
          v155 = v154 >> v150;
          v139 = v153;
        }
        v137 = v138 & v135;
        if ((v138 & v135) == 0)
          goto LABEL_159;
        v156 = v140 + (v137 ^ v135);
        if (v156 >= v135)
          v157 = v134 - 1;
        else
          v157 = 0;
        v143 = v156 - v157;
        v138 = v155;
        if (v143 == a1)
        {
          v138 = v155;
          goto LABEL_131;
        }
      }
    }
    v144 = 0;
LABEL_131:
    v191 = v144;
    v187 = v136;
    v188 = v137;
    v189 = v138;
    v190 = v139;
    v130 = v176;
    if (__OFADD__(v143, 1))
      goto LABEL_148;
    _HashTable.BucketIterator.currentValue.setter(v143 + 1, 0);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v180, v131);
    v49 = __OFADD__(a1++, 1);
    if (v49)
      goto LABEL_149;
    dispatch thunk of IteratorProtocol.next()();
    if (((unsigned int (*)(_QWORD, uint64_t, uint64_t))v179)(v130, 1, v131) == 1)
      goto LABEL_134;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t TupleTypeMetadata2;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v46 = a4;
  v47 = a7;
  v45 = a3;
  v49 = a6;
  v50 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v37 - v13;
  swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for Range();
  v42 = *(_QWORD *)(v15 - 8);
  v43 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v40 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v37 - v19;
  v21 = *(_QWORD **)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v37 - v22;
  v44 = a2;
  v48 = a5;
  v24 = v50;
  dispatch thunk of Collection.index(after:)();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v38 = v20;
    v26 = TupleTypeMetadata2;
    v27 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
    v28 = (void (*)(char *, uint64_t, uint64_t))v21[2];
    v28(v14, v24, AssociatedTypeWitness);
    v39 = v23;
    v28(v27, (uint64_t)v23, AssociatedTypeWitness);
    v29 = &v12[*(int *)(v26 + 48)];
    v28(v12, (uint64_t)v14, AssociatedTypeWitness);
    v28(v29, (uint64_t)v27, AssociatedTypeWitness);
    v30 = (void (*)(char *, char *, uint64_t))v21[4];
    v31 = v40;
    v30(v40, v12, AssociatedTypeWitness);
    v32 = (void (*)(char *, uint64_t))v21[1];
    v32(v29, AssociatedTypeWitness);
    v33 = &v12[*(int *)(v26 + 48)];
    v30(v12, v14, AssociatedTypeWitness);
    v30(v33, v27, AssociatedTypeWitness);
    v34 = v43;
    v30(&v31[*(int *)(v43 + 36)], v33, AssociatedTypeWitness);
    v32(v12, AssociatedTypeWitness);
    v35 = v42;
    v36 = (uint64_t)v38;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v38, v31, v34);
    _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v36, v44, v45, v46, v48, v49, v47);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v34);
    return ((uint64_t (*)(char *, uint64_t))v32)(v39, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int64_t v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(char *, char *, uint64_t);
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;

  v183 = a7;
  v186 = a4;
  v187 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v166 = type metadata accessor for PartialRangeUpTo();
  v165 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166);
  v167 = (char *)&v162 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v184 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v182 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v181 = (char *)&v162 - v15;
  v175 = v16;
  v17 = type metadata accessor for Optional();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v178 = (char *)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v177 = (void (*)(char *, char *, uint64_t))((char *)&v162 - v20);
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v21);
  v171 = (char *)&v162 - v22;
  v163 = type metadata accessor for PartialRangeFrom();
  v162 = *(_QWORD *)(v163 - 8);
  MEMORY[0x24BDAC7A8](v163);
  v164 = (char *)&v162 - v23;
  v170 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v172 = v21;
  v185 = swift_getAssociatedTypeWitness();
  v169 = *(_QWORD *)(v185 - 8);
  v24 = MEMORY[0x24BDAC7A8](v185);
  v180 = (char *)&v162 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v179 = (char *)&v162 - v27;
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v162 - v29;
  dispatch thunk of Collection.startIndex.getter();
  v31 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  v173 = v28;
  v32 = *(void (**)(char *, uint64_t))(v28 + 8);
  v32(v30, AssociatedTypeWitness);
  v174 = AssociatedConformanceWitness;
  v33 = *(int *)(type metadata accessor for Range() + 36);
  v168 = a1;
  v34 = a1 + v33;
  dispatch thunk of Collection.startIndex.getter();
  v176 = a2;
  v35 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  v32(v30, AssociatedTypeWitness);
  v36 = v35 - v31;
  if (__OFSUB__(v35, v31))
    goto LABEL_157;
  if (v36 < 1)
    return;
  v37 = dispatch thunk of Collection.count.getter();
  if (__OFSUB__(v37, v36))
    goto LABEL_159;
  if (v31 < (v37 - v36) / 2)
  {
    v38 = v187;
    v39 = specialized static _HashTable.maximumCapacity(forScale:)(*v187 & 0x3FLL);
    v40 = v175;
    if (v31 >= v39 / 3)
    {
      v111 = v186;
      v112 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v38, v186);
      v113 = 0;
      v188 = v38;
      v189 = v111;
      v190 = 0;
      v191 = v112;
      v192 = v114;
      v193 = v115;
      v35 = 64;
      v194 = 0;
      while (1)
      {
        if (v191)
        {
          v120 = v188;
          v121 = ~(-1 << *v188);
          v122 = (uint64_t)v188[1] >> 6;
          v123 = v122 + (v191 ^ v121);
          v124 = v123 >= v121 ? ~(-1 << *v188) : 0;
          v125 = v123 - v124;
          if (v125 < v31)
          {
            v70 = __OFADD__(v125, v36);
            v126 = v125 + v36;
            if (v70)
              goto LABEL_155;
            v127 = *v188 & 0x3FLL;
            v128 = v189;
            v129 = ((v121 & ((v126 - v122) >> 63)) + v126 - v122) ^ v121;
            v130 = v129 ^ v191;
            v131 = v127 * v113;
            v132 = (v127 * v113) >> 6;
            *(_QWORD *)(v189 + 8 * v132) ^= (v129 ^ v191) << v131;
            v133 = 64 - (v131 & 0x3F);
            v134 = *v120 & 0x3FLL;
            if (v133 < v134)
            {
              v135 = v134 << v134;
              v70 = __OFADD__(v135, 64);
              v136 = v135 + 64;
              if (v70)
              {
                __break(1u);
                goto LABEL_124;
              }
              v117 = v136 - 1;
              v116 = v136 < 1;
              v118 = v136 + 62;
              if (!v116)
                v118 = v117;
              if (v132 + 1 == v118 >> 6)
                v119 = 0;
              else
                v119 = v132 + 1;
              *(_QWORD *)(v128 + 8 * v119) ^= v130 >> v133;
            }
            v191 = v129;
          }
        }
        _HashTable.BucketIterator.advance()();
        v113 = v190;
        if (!v190)
          goto LABEL_53;
      }
    }
    v41 = v167;
    (*(void (**)(char *, uint64_t, uint64_t))(v173 + 16))(v167, v168, AssociatedTypeWitness);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      goto LABEL_162;
    v42 = v166;
    MEMORY[0x24954C264](MEMORY[0x24BEE2C68], v166);
    Collection.subscript.getter();
    (*(void (**)(char *, uint64_t))(v165 + 8))(v41, v42);
    dispatch thunk of Sequence.makeIterator()();
    v43 = swift_getAssociatedConformanceWitness();
    v44 = v178;
    v181 = (char *)v43;
    dispatch thunk of IteratorProtocol.next()();
    v179 = *(char **)(v184 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v179)(v44, 1, v40) != 1)
    {
      v45 = 0;
      v177 = *(void (**)(char *, char *, uint64_t))(v184 + 32);
      v47 = v186;
      v46 = v187;
      do
      {
        v177(v182, v44, v40);
        v48 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v49 = *v46;
        v50 = 1 << *v46;
        v51 = v50 - 1;
        if (__OFSUB__(v50, 1))
          goto LABEL_149;
        v52 = v51 & v48;
        v53 = _HashTable.UnsafeHandle._startIterator(bucket:)(v51 & v48, v46, v47);
        v188 = v46;
        v189 = v47;
        v190 = v52;
        v191 = v53;
        v192 = v54;
        v193 = v55;
        v194 = 0;
        if (v53)
        {
          v56 = (uint64_t)v187[1] >> 6;
          v57 = v56 + (v53 ^ v51);
          if (v57 >= v51)
            v58 = v50 - 1;
          else
            v58 = 0;
          if (v57 - v58 != v45)
          {
            v59 = 0;
            v60 = v49 & 0x3F;
            v61 = __OFADD__(v60 << v60, 64);
            v62 = (v60 << v60) + 126;
            if ((v60 << v60) + 64 >= 1)
              v62 = (v60 << v60) + 63;
            v63 = v62 >> 6;
            while (1)
            {
              if (++v52 == v50)
              {
                if ((v59 & 1) != 0)
                  goto LABEL_164;
                v52 = 0;
                v59 = 1;
              }
              if (v55 >= v60)
              {
                v70 = __OFSUB__(v55, v60);
                v55 -= v60;
                if (v70)
                {
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
                  goto LABEL_146;
                }
                v74 = v54 >> v60;
                v53 = v54 & v51;
                if ((v54 & v51) == 0)
                  goto LABEL_47;
              }
              else
              {
                v66 = (v52 * v60) >> 6;
                if (v55)
                {
                  if (v61)
                    goto LABEL_147;
                  if (v66 + 1 == v63)
                    v66 = 0;
                  else
                    ++v66;
                }
                v67 = v60 - v55;
                if (__OFSUB__(v60, v55))
                  goto LABEL_142;
                if (v66 == 2 && v60 == 5)
                  v69 = 32;
                else
                  v69 = 64;
                v70 = __OFSUB__(v69, v67);
                v71 = v69 - v67;
                if (v70)
                  goto LABEL_144;
                v72 = *(_QWORD *)(v186 + 8 * v66);
                v73 = (v72 << v55) | v54;
                v74 = v72 >> v67;
                v55 = v71;
                v53 = v73 & v51;
                if ((v73 & v51) == 0)
                {
LABEL_47:
                  v54 = v74;
                  goto LABEL_48;
                }
              }
              v64 = v56 + (v53 ^ v51);
              if (v64 >= v51)
                v65 = v50 - 1;
              else
                v65 = 0;
              v54 = v74;
              if (v64 - v65 == v45)
                goto LABEL_47;
            }
          }
          v59 = 0;
LABEL_48:
          v194 = v59;
          v190 = v52;
          v191 = v53;
          v192 = v54;
          v193 = v55;
        }
        if (__OFADD__(v45, v36))
          goto LABEL_151;
        _HashTable.BucketIterator.currentValue.setter(v45 + v36, 0);
        (*(void (**)(char *, uint64_t))(v184 + 8))(v182, v40);
        v70 = __OFADD__(v45++, 1);
        if (v70)
          goto LABEL_152;
        v44 = v178;
        dispatch thunk of IteratorProtocol.next()();
      }
      while (((unsigned int (*)(char *, uint64_t, uint64_t))v179)(v44, 1, v40) != 1);
    }
    (*(void (**)(char *, uint64_t))(v169 + 8))(v180, v185);
    v38 = v187;
LABEL_53:
    v75 = (uint64_t)v38[1] >> 6;
    if (__OFSUB__(v75, v36))
      goto LABEL_161;
    _HashTable.Header.bias.setter(v75 - v36);
    return;
  }
  v76 = v34;
  v77 = dispatch thunk of Collection.count.getter();
  v38 = v187;
  v78 = v175;
  if (__OFSUB__(v77, v35))
    goto LABEL_160;
  if (v77 - v35 >= specialized static _HashTable.maximumCapacity(forScale:)(*v187 & 0x3FLL) / 3)
  {
LABEL_124:
    v137 = v186;
    v138 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, v38, v186);
    v139 = 0;
    v188 = v38;
    v189 = v137;
    v190 = 0;
    v191 = v138;
    v192 = v140;
    v193 = v141;
    v194 = 0;
    while (1)
    {
      if (v191)
      {
        v142 = v188;
        v143 = ~(-1 << *v188);
        v144 = (uint64_t)v188[1] >> 6;
        v145 = v144 + (v191 ^ v143);
        v146 = v145 >= v143 ? ~(-1 << *v188) : 0;
        v147 = v145 - v146;
        if (v147 >= v35)
        {
          v70 = __OFSUB__(v147, v36);
          v148 = v147 - v36;
          if (v70)
            goto LABEL_156;
          v149 = *v188 & 0x3FLL;
          v150 = v189;
          v151 = ((v143 & ((v148 - v144) >> 63)) + v148 - v144) ^ v143;
          v152 = v151 ^ v191;
          v153 = v149 * v139;
          v154 = (v149 * v139) >> 6;
          *(_QWORD *)(v189 + 8 * v154) ^= (v151 ^ v191) << v153;
          v155 = 64 - (v153 & 0x3F);
          v156 = *v142 & 0x3FLL;
          if (v155 < v156)
          {
            v157 = v156 << v156;
            v70 = __OFADD__(v157, 64);
            v158 = v157 + 64;
            if (v70)
              goto LABEL_158;
            v159 = v158 - 1;
            v116 = v158 < 1;
            v160 = v158 + 62;
            if (!v116)
              v160 = v159;
            if (v154 + 1 == v160 >> 6)
              v161 = 0;
            else
              v161 = v154 + 1;
            *(_QWORD *)(v150 + 8 * v161) ^= v152 >> v155;
          }
          v191 = v151;
        }
      }
      _HashTable.BucketIterator.advance()();
      v139 = v190;
      if (!v190)
        return;
    }
  }
  v79 = v164;
  (*(void (**)(char *, uint64_t, uint64_t))(v173 + 16))(v164, v76, AssociatedTypeWitness);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    goto LABEL_163;
  v80 = v163;
  MEMORY[0x24954C264](MEMORY[0x24BEE2C50], v163);
  Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v162 + 8))(v79, v80);
  dispatch thunk of Sequence.makeIterator()();
  v81 = swift_getAssociatedConformanceWitness();
  v82 = v177;
  v182 = (char *)v81;
  dispatch thunk of IteratorProtocol.next()();
  v180 = *(char **)(v184 + 48);
  if (((unsigned int (*)(_QWORD, uint64_t, uint64_t))v180)(v82, 1, v78) == 1)
  {
LABEL_103:
    (*(void (**)(char *, uint64_t))(v169 + 8))(v179, v185);
    return;
  }
  v178 = *(char **)(v184 + 32);
  v83 = v186;
  while (1)
  {
    ((void (*)(char *, _QWORD, uint64_t))v178)(v181, v82, v78);
    v84 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v85 = *v38;
    v86 = 1 << *v38;
    v87 = v86 - 1;
    if (__OFSUB__(v86, 1))
      goto LABEL_150;
    v88 = v87 & v84;
    v89 = _HashTable.UnsafeHandle._startIterator(bucket:)(v87 & v84, v38, v83);
    v188 = v38;
    v189 = v83;
    v190 = v88;
    v191 = v89;
    v192 = v90;
    v193 = v91;
    v194 = 0;
    if (!v89)
      goto LABEL_100;
    v92 = (uint64_t)v187[1] >> 6;
    v93 = v92 + (v89 ^ v87);
    v94 = v93 >= v87 ? v86 - 1 : 0;
    if (v93 - v94 != v35)
      break;
    v95 = 0;
LABEL_99:
    v194 = v95;
    v190 = v88;
    v191 = v89;
    v192 = v90;
    v193 = v91;
LABEL_100:
    if (__OFSUB__(v35, v36))
      goto LABEL_153;
    _HashTable.BucketIterator.currentValue.setter(v35 - v36, 0);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v181, v78);
    v70 = __OFADD__(v35++, 1);
    if (v70)
      goto LABEL_154;
    v82 = v177;
    dispatch thunk of IteratorProtocol.next()();
    v110 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v180)(v82, 1, v78);
    v38 = v187;
    if (v110 == 1)
      goto LABEL_103;
  }
  v95 = 0;
  v96 = v85 & 0x3F;
  v97 = __OFADD__(v96 << v96, 64);
  v98 = (v96 << v96) + 126;
  if ((v96 << v96) + 64 >= 1)
    v98 = (v96 << v96) + 63;
  v99 = v98 >> 6;
  while (1)
  {
    if (++v88 == v86)
    {
      if ((v95 & 1) != 0)
        goto LABEL_164;
      v88 = 0;
      v95 = 1;
    }
    if (v91 < v96)
      break;
    v70 = __OFSUB__(v91, v96);
    v91 -= v96;
    if (v70)
      goto LABEL_143;
    v109 = v90 >> v96;
    v89 = v90 & v87;
    if ((v90 & v87) == 0)
    {
LABEL_98:
      v90 = v109;
      goto LABEL_99;
    }
LABEL_73:
    v100 = v92 + (v89 ^ v87);
    if (v100 >= v87)
      v101 = v86 - 1;
    else
      v101 = 0;
    v90 = v109;
    if (v100 - v101 == v35)
      goto LABEL_98;
  }
  v102 = (v88 * v96) >> 6;
  if (v91)
  {
    if (v97)
      goto LABEL_148;
    if (v102 + 1 == v99)
      v102 = 0;
    else
      ++v102;
  }
  v103 = v96 - v91;
  if (__OFSUB__(v96, v91))
    goto LABEL_145;
  if (v102 == 2 && v96 == 5)
    v105 = 32;
  else
    v105 = 64;
  v70 = __OFSUB__(v105, v103);
  v106 = v105 - v103;
  if (!v70)
  {
    v107 = *(_QWORD *)(v186 + 8 * v102);
    v108 = (v107 << v91) | v90;
    v109 = v107 >> v103;
    v91 = v106;
    v89 = v108 & v87;
    if ((v108 & v87) == 0)
      goto LABEL_98;
    goto LABEL_73;
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall _HashTable.UnsafeHandle.clear()()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (*v0 & 0x3FLL) << *v0;
  v3 = __OFADD__(v2, 64);
  v4 = v2 + 64;
  if (v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  v5 = v4 - 1;
  if (v4 < 1)
    v5 = v4 + 62;
  if (v4 < -62)
    goto LABEL_8;
  if ((unint64_t)(v4 + 62) >= 0x7F)
    bzero(v1, 8 * (v5 >> 6));
}

uint64_t _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void (*v24)(_QWORD **, _QWORD);
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t result;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void (*v58)(char *);
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t AssociatedTypeWitness;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;

  v64 = a6;
  v61 = a3;
  v67 = a1;
  v8 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v71 = (char *)&v55 - v9;
  v68 = a4;
  v10 = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v62 = (char *)&v55 - v11;
  v12 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v55 - v13;
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v15);
  swift_getAssociatedConformanceWitness();
  v16 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v55 - v17;
  v63 = v8;
  dispatch thunk of Collection.indices.getter();
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v65 = v18;
  v66 = v16;
  v60 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
  if (v59(v14, 1, v10) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v65, v66);
  v20 = 0;
  v58 = *(void (**)(char *))(v69 + 32);
  v57 = v10;
  v56 = a2;
  while (1)
  {
    v21 = v14;
    v22 = v62;
    v23 = v21;
    v58(v62);
    v24 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v72 + 16))(v71);
    v24(&v73, 0);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v22, v10);
    v25 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v26 = 1 << *a2;
    v27 = __OFSUB__(v26, 1);
    v28 = v26 - 1;
    if (v27)
      goto LABEL_40;
    v29 = v28 & v25;
    v30 = v61;
    v31 = _HashTable.UnsafeHandle._startIterator(bucket:)(v28 & v25, a2, v61);
    v73 = a2;
    v74 = v30;
    v75 = v29;
    v76 = v31;
    v77 = v32;
    v78 = v33;
    v79 = 0;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v71, AssociatedTypeWitness);
    v14 = v23;
    if (v76)
      break;
LABEL_33:
    _HashTable.BucketIterator.currentValue.setter(v20, 0);
    v27 = __OFADD__(v20++, 1);
    if (v27)
      goto LABEL_41;
    dispatch thunk of IteratorProtocol.next()();
    v10 = v57;
    v53 = v59(v23, 1, v57);
    a2 = v56;
    if (v53 == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v65, v66);
  }
  v34 = *v73 & 0x3FLL;
  v35 = v77;
  v36 = v78;
  v37 = v75;
  v38 = 1 << *v73;
  v39 = v34 << *v73;
  v40 = v39 + 64;
  v41 = __OFADD__(v39, 64);
  v43 = v40 - 1;
  v42 = v40 < 1;
  v44 = v40 + 62;
  if (v42)
    v43 = v44;
  v45 = v43 >> 6;
  while (1)
  {
    if (++v37 == v38)
    {
      if ((v79 & 1) != 0)
        goto LABEL_42;
      v37 = 0;
      v79 = 1;
    }
    if (v36 >= v34)
      break;
    v46 = (v37 * v34) >> 6;
    if (v36)
    {
      if (v41)
        goto LABEL_39;
      if (v46 + 1 == v45)
        v46 = 0;
      else
        ++v46;
    }
    v47 = v34 - v36;
    if (__OFSUB__(v34, v36))
      goto LABEL_37;
    if (v46 == 2 && v34 == 5)
      v49 = 32;
    else
      v49 = 64;
    v27 = __OFSUB__(v49, v47);
    v50 = v49 - v47;
    if (v27)
      goto LABEL_38;
    v51 = *(_QWORD *)(v74 + 8 * v46);
    v52 = (v51 << v36) | v35;
    v35 = v51 >> v47;
    v36 = v50;
LABEL_11:
    if ((v52 & (v38 - 1)) == 0)
    {
      v77 = v35;
      v78 = v36;
      v75 = v37;
      v76 = 0;
      goto LABEL_33;
    }
  }
  v27 = __OFSUB__(v36, v34);
  v36 -= v34;
  if (!v27)
  {
    v52 = v35;
    v35 >>= v34;
    goto LABEL_11;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(char *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD);
  char *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  void (*v47)(_BYTE *, _QWORD);
  uint64_t v48;
  void (*v49)(char *);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  void (*v74)(char *);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  _BYTE v83[32];
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;

  v76 = a7;
  v62 = a4;
  v68 = a3;
  v81 = a2;
  v58 = a1;
  v72 = a6;
  v8 = *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v67 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v71 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v82 = (char *)&v57 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v79 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v70 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v69 = (char *)&v57 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v80 = (char *)&v57 - v18;
  v19 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v19);
  v66 = (char *)&v57 - v20;
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v21);
  swift_getAssociatedConformanceWitness();
  v22 = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v57 - v23;
  v77 = a5;
  v25 = v66;
  v78 = v8;
  dispatch thunk of Collection.indices.getter();
  dispatch thunk of Sequence.makeIterator()();
  v26 = v68;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v64 = v24;
  v28 = v67;
  v65 = v22;
  v60 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
  if (v59(v25, 1, v13) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v65);
    dispatch thunk of Collection.endIndex.getter();
    return 1;
  }
  else
  {
    v30 = 0;
    v61 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
    v75 = v13;
    v31 = v79;
    while (1)
    {
      v61(v80, v25, v13);
      v32 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v33 = v82;
      v74 = *(void (**)(char *))(v28 + 16);
      v74(v82);
      v32(v83, 0);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v34 = 1 << *v26;
      v35 = __OFSUB__(v34, 1);
      v36 = v34 - 1;
      if (v35)
      {
        __break(1u);
LABEL_13:
        __break(1u);
        return result;
      }
      v63 = v30;
      v37 = v36 & result;
      v38 = v33;
      v39 = v62;
      v40 = _HashTable.UnsafeHandle._startIterator(bucket:)(v36 & result, v26, v62);
      v84 = v26;
      v85 = v39;
      v86 = v37;
      v87 = v40;
      v88 = v41;
      v89 = v42;
      v90 = 0;
      v73 = *(void (**)(char *, uint64_t))(v28 + 8);
      v73(v38, AssociatedTypeWitness);
      if (v87)
        break;
LABEL_8:
      v55 = v63;
      _HashTable.BucketIterator.currentValue.setter(v63, 0);
      v13 = v75;
      result = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v80, v75);
      v35 = __OFADD__(v55, 1);
      v30 = v55 + 1;
      if (v35)
        goto LABEL_13;
      v25 = v66;
      dispatch thunk of IteratorProtocol.next()();
      v56 = v59(v25, 1, v13);
      v26 = v68;
      v28 = v67;
      if (v56 == 1)
        goto LABEL_2;
    }
    while (1)
    {
      v43 = v70;
      dispatch thunk of Collection.startIndex.getter();
      v44 = v69;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v45 = *(void (**)(char *, uint64_t))(v31 + 8);
      v46 = v75;
      v45(v43, v75);
      v47 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v48 = AssociatedTypeWitness;
      v49 = v74;
      v74(v82);
      v47(v83, 0);
      v45(v44, v46);
      v50 = v45;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v44, v80, v46);
      v51 = dispatch thunk of Collection.subscript.read();
      v52 = v71;
      v49(v71);
      AssociatedTypeWitness = v48;
      ((void (*)(_BYTE *, _QWORD))v51)(v83, 0);
      v50(v44, v46);
      v53 = v82;
      LOBYTE(v51) = dispatch thunk of static Equatable.== infix(_:_:)();
      v54 = v73;
      v73(v52, v48);
      v54(v53, v48);
      if ((v51 & 1) != 0)
        break;
      _HashTable.BucketIterator.advance()();
      if (!v87)
        goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v65);
    v61(v58, v80, v75);
    return 0;
  }
}

uint64_t sub_245EB8F88@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(uint64_t *)(*(_QWORD *)result + 8) >> 6;
  return result;
}

uint64_t sub_245EB8F9C(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t sub_245EB8FC0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * *a2);
  return result;
}

_QWORD *sub_245EB8FD4(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *a3) = *result;
  return result;
}

uint64_t sub_245EB8FE8()
{
  return 0;
}

uint64_t sub_245EB8FF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = _HashTable.UnsafeHandle.subscript.getter(*a2, *(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  *a3 = result;
  return result;
}

unint64_t sub_245EB9028(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return _HashTable.UnsafeHandle.subscript.setter(*a1, *a3, *(_QWORD **)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_245EB903C()
{
  return 0;
}

uint64_t sub_245EB9054()
{
  return 0;
}

uint64_t getEnumTagSinglePayload for _HashTable.UnsafeHandle(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTable.UnsafeHandle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _HashTable.UnsafeHandle()
{
  return &type metadata for _HashTable.UnsafeHandle;
}

uint64_t _HashTable.Header._description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000245FCA890;
  v1._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A73616962202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A64656573202CLL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  lazy protocol witness table accessor for type Int and conformance Int();
  v6._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A656C61637328;
}

unint64_t _HashTable.Header.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _HashTable.Header._description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

Swift::String __swiftcall _HashTable.UnsafeHandle._description(type:)(Swift::String type)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String result;

  v3 = v2;
  v4 = v1;
  object = type._object;
  countAndFlagsBits = type._countAndFlagsBits;
  _StringGuts.grow(_:)(22);
  v7._countAndFlagsBits = countAndFlagsBits;
  v7._object = object;
  String.append(_:)(v7);
  v8._countAndFlagsBits = _HashTable.Header._description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000245FCA8D0;
  v9._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  _HashTable.UnsafeHandle.debugLoadFactor()();
  Double.write<A>(to:)();
  v11 = (void *)0xE000000000000000;
  v10 = 0;
  if (1 << *v4 <= 127)
  {
    v12._countAndFlagsBits = 2105354;
    v12._object = (void *)0xE300000000000000;
    String.append(_:)(v12);
    _HashTable.UnsafeHandle.debugContents()(v4, v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[Int?], String>);
    lazy protocol witness table accessor for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>();
    v13 = BidirectionalCollection<>.joined(separator:)();
    v15 = v14;
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v11 = (void *)0xE000000000000000;
    v10 = 0;
  }
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

uint64_t closure #1 in _HashTable.UnsafeHandle._description(type:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v3 = 0xE100000000000000;
    result = 95;
  }
  else
  {
    result = dispatch thunk of CustomStringConvertible.description.getter();
  }
  *a2 = result;
  a2[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LazyMapSequence<[Int?], String>);
    v2 = lazy protocol witness table accessor for type [Int?] and conformance [A]();
    result = MEMORY[0x24954C264](MEMORY[0x24BEE2B38], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[Int?], String> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Int?] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Int?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int?] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int?]);
    result = MEMORY[0x24954C264](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int?] and conformance [A]);
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.description.getter()
{
  Swift::String v0;

  v0._object = (void *)0x8000000245FCA8F0;
  v0._countAndFlagsBits = 0xD000000000000017;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable.UnsafeHandle()
{
  Swift::String v0;

  v0._object = (void *)0x8000000245FCA8F0;
  v0._countAndFlagsBits = 0xD000000000000017;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t _HashTable.description.getter()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x626154687361485FLL;
  v0._object = (void *)0xEA0000000000656CLL;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x626154687361485FLL;
  v0._object = (void *)0xEA0000000000656CLL;
  return _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
}

uint64_t _HashTable.Storage.description.getter()
{
  Swift::String v0;
  uint64_t countAndFlagsBits;

  swift_retain();
  v0._object = (void *)0x8000000245FCA910;
  v0._countAndFlagsBits = 0xD000000000000012;
  countAndFlagsBits = _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
  swift_release();
  return countAndFlagsBits;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _HashTable.Storage()
{
  Swift::String v0;
  uint64_t countAndFlagsBits;

  swift_retain();
  v0._object = (void *)0x8000000245FCA910;
  v0._countAndFlagsBits = 0xD000000000000012;
  countAndFlagsBits = _HashTable.UnsafeHandle._description(type:)(v0)._countAndFlagsBits;
  swift_release();
  return countAndFlagsBits;
}

uint64_t OrderedSet.count.getter()
{
  return ContiguousArray.count.getter();
}

uint64_t OrderedSet.startIndex.getter()
{
  return 0;
}

uint64_t OrderedSet.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  swift_retain();
  return a3;
}

uint64_t OrderedSet.subscript.getter()
{
  return ContiguousArray.subscript.getter();
}

BOOL OrderedSet._customContainsEquatableElement(_:)()
{
  char v0;

  OrderedSet._find(_:)();
  return (v0 & 1) == 0;
}

void OrderedSet._copyToContiguousArray()()
{
  specialized OrderedSet._copyToContiguousArray()();
}

uint64_t sub_245EB97FC(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t OrderedSet._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v4);
  v5 = Collection.isEmpty.getter();
  if ((v5 & 1) == 0)
  {
    MEMORY[0x24BDAC7A8](v5);
    ContiguousArray.withUnsafeBufferPointer<A>(_:)();
  }
  return a3;
}

uint64_t OrderedSet.isEmpty.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v0);
  return Collection.isEmpty.getter() & 1;
}

uint64_t closure #1 in OrderedSet._copyContents(initializing:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = UnsafeBufferPointer.baseAddress.getter();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  result = UnsafeBufferPointer.baseAddress.getter();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (a2 >= a1)
    a2 = a1;
  result = UnsafeMutablePointer.initialize(from:count:)();
  *a3 = a2;
  return result;
}

uint64_t OrderedSet.withContiguousStorageIfAvailable<A>(_:)()
{
  return ContiguousArray.withContiguousStorageIfAvailable<A>(_:)();
}

void protocol witness for Sequence.makeIterator() in conformance OrderedSet<A>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance OrderedSet<A>(uint64_t a1)
{
  MEMORY[0x24954C264](&protocol conformance descriptor for OrderedSet<A>, a1);
  return Collection.underestimatedCount.getter();
}

BOOL protocol witness for Sequence._customContainsEquatableElement(_:) in conformance OrderedSet<A>()
{
  return OrderedSet._customContainsEquatableElement(_:)();
}

void protocol witness for Sequence._copyToContiguousArray() in conformance OrderedSet<A>()
{
  specialized OrderedSet._copyToContiguousArray()();
}

uint64_t sub_245EB9A9C(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance OrderedSet<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = OrderedSet._copyContents(initializing:)(a2, a3, *v3);
  a1[1] = v5;
  a1[2] = v6;
  return v7;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance OrderedSet<A>()
{
  return OrderedSet.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedSet.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t OrderedSet.indices.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v0);
  RandomAccessCollection<>.indices.getter();
  return v2;
}

Swift::Int __swiftcall OrderedSet.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall OrderedSet.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall OrderedSet.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Void __swiftcall OrderedSet.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall OrderedSet.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall OrderedSet.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  BOOL v4;
  Swift::Int_optional result;

  v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedSet.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t OrderedSet._customIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  if (!a2)
    return 0;
  v8 = (_QWORD *)(a2 + 16);
  v9 = a2 + 32;
  swift_retain();
  closure #1 in OrderedSet._customIndexOfEquatableElement(_:)(v8, v9, a1, a3, a5, (uint64_t)&v11);
  swift_release();
  return v11;
}

uint64_t closure #1 in OrderedSet._customIndexOfEquatableElement(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  uint64_t v15;

  v15 = a4;
  v11 = type metadata accessor for ContiguousArray();
  v12 = MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v11);
  result = _HashTable.UnsafeHandle._find<A>(_:in:)(a3, (uint64_t)&v15, a1, a2, v11, v12, a5);
  *(_QWORD *)a6 = result;
  *(_BYTE *)(a6 + 8) = v14 & 1;
  *(_BYTE *)(a6 + 9) = 0;
  return result;
}

uint64_t OrderedSet._customLastIndexOfEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OrderedSet._customIndexOfEquatableElement(_:)(a1, a2, a3, a4, a5);
}

uint64_t OrderedSet._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v5[1] = a3;
  v6 = a1;
  v5[0] = a2;
  v3 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v3);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v6, (uint64_t)v5);
}

void protocol witness for Collection.endIndex.getter in conformance OrderedSet<A>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
}

void (*protocol witness for Collection.subscript.read in conformance OrderedSet<A>(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = malloc(*(_QWORD *)(v4 + 64));
  ContiguousArray.subscript.getter();
  return protocol witness for Collection.subscript.read in conformance OrderedDictionary<A, B>.Values;
}

uint64_t protocol witness for Collection.subscript.getter in conformance OrderedSet<A>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = OrderedSet.subscript.getter(*a1, a1[1], *v2);
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

double protocol witness for Collection.indices.getter in conformance OrderedSet<A>@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;

  v2 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A58], v2);
  RandomAccessCollection<>.indices.getter();
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance OrderedSet<A>()
{
  uint64_t v0;

  v0 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v0);
  return Collection.isEmpty.getter() & 1;
}

uint64_t protocol witness for Collection.count.getter in conformance OrderedSet<A>()
{
  return ContiguousArray.count.getter();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance OrderedSet<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t result;
  char v6;
  char v7;

  result = OrderedSet._customIndexOfEquatableElement(_:)(a1, *v3, v3[1], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 9) = v7 & 1;
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance OrderedSet<A>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v5 = *a1;
  v4 = *a2;
  v2 = type metadata accessor for ContiguousArray();
  MEMORY[0x24954C264](MEMORY[0x24BEE2A60], v2);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)&v5, (uint64_t)&v4);
}

void specialized OrderedSet._copyToContiguousArray()()
{
  swift_retain();
  JUMPOUT(0x24954B7C0);
}

uint64_t partial apply for closure #1 in OrderedSet._copyContents(initializing:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in OrderedSet._copyContents(initializing:)(a1, *(_QWORD *)(v2 + 40), a2);
}

void base witness table accessor for BidirectionalCollection in OrderedSet<A>()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in OrderedSet<A>()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Collection in OrderedSet<A>()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in OrderedSet<A>()
{
  JUMPOUT(0x24954C264);
}

void base witness table accessor for Sequence in OrderedSet<A>()
{
  JUMPOUT(0x24954C264);
}

void associated type witness table accessor for Collection.SubSequence : Collection in OrderedSet<A>()
{
  JUMPOUT(0x24954C264);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = dispatch thunk of Collection.count.getter();
  if (!v18)
    return static Array._allocateUninitialized(_:)();
  v19 = v18;
  v25 = v15;
  v39 = Array.init()();
  v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  v36 = v17;
  result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t *MaterialXDataType.filename.unsafeMutableAddressor()
{
  if (one-time initialization token for filename != -1)
    swift_once();
  return &static MaterialXDataType.filename;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _BOOL8 v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(unsigned __int8 *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(unsigned __int8 *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  if (v9 || (v10 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v10 = 0;
    if (v5 == v7 && ((v6 ^ v8) & 1) == 0)
    {
      v11 = (unsigned __int8 *)(a1 + 88);
      v12 = (unsigned __int8 *)(a2 + 88);
      do
      {
        v10 = --v2 == 0;
        if (!v2)
          break;
        v13 = *((_QWORD *)v11 - 1);
        v14 = *v11;
        v15 = *((_QWORD *)v12 - 1);
        v16 = *v12;
        v17 = *((_QWORD *)v11 - 3) == *((_QWORD *)v12 - 3) && *((_QWORD *)v11 - 2) == *((_QWORD *)v12 - 2);
        if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          break;
        if (v13 != v15)
          break;
        v11 += 32;
        v12 += 32;
      }
      while (((v14 ^ v16) & 1) == 0);
    }
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    v3 = a2;
    if (a1 != a2)
    {
      v4 = 0;
      v13 = a1;
      while (1)
      {
        v6 = *(_QWORD *)(a1 + v4 + 56);
        v7 = *(_QWORD *)(a1 + v4 + 64);
        v8 = *(_QWORD *)(a1 + v4 + 80);
        v9 = *(_QWORD *)(v3 + v4 + 56);
        v10 = *(_QWORD *)(v3 + v4 + 64);
        v15 = *(_QWORD *)(v3 + v4 + 72);
        v16 = *(_QWORD *)(a1 + v4 + 72);
        v11 = *(_QWORD *)(v3 + v4 + 80);
        v17 = *(unsigned __int8 *)(v3 + v4 + 88);
        v18 = *(unsigned __int8 *)(a1 + v4 + 88);
        if ((*(_QWORD *)(a1 + v4 + 32) != *(_QWORD *)(v3 + v4 + 32)
           || *(_QWORD *)(a1 + v4 + 40) != *(_QWORD *)(v3 + v4 + 40))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || (MaterialXDataType.isEqual(to:)() & 1) == 0)
        {
          return 0;
        }
        if (v7)
        {
          if (!v10 || (v6 != v9 || v7 != v10) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return 0;
        }
        else if (v10)
        {
          return 0;
        }
        if (!v8)
          break;
        if (!v11)
          return 0;
        if (v16 != v15 || v8 != v11)
        {
          v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v12 & 1) == 0)
            return result;
          goto LABEL_6;
        }
        if (v18 != v17)
          return 0;
LABEL_7:
        v4 += 64;
        --v2;
        a1 = v13;
        v3 = a2;
        if (!v2)
          return 1;
      }
      result = 0;
      if (v11)
        return result;
LABEL_6:
      if (((v18 ^ v17) & 1) != 0)
        return result;
      goto LABEL_7;
    }
  }
  return 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(_OWORD *, _OWORD *))specialized static NodeDefinitionStore.Input.== infix(_:_:));
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (_QWORD *)(a2 + 80);
    for (i = a1 + 40; *(_QWORD *)(i - 8) == *(v3 - 6); i += 56)
    {
      v6 = *(_QWORD *)(i + 8);
      v7 = *(_QWORD *)(i + 16);
      v8 = *(v3 - 5);
      v9 = *(v3 - 4);
      v10 = *(v3 - 3);
      v14 = *(v3 - 2);
      v15 = *(_QWORD *)(i + 24);
      v18 = *((_BYTE *)v3 - 8);
      v19 = *(_BYTE *)(i + 32);
      v16 = *v3;
      v17 = *(_QWORD *)(i + 40);
      v11 = *(uint64_t (**)(uint64_t))(**(_QWORD **)i + 128);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v11(v8) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
      if (v6 == v9 && v7 == v10)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release();
      }
      else
      {
        v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        if ((v12 & 1) == 0)
          return 0;
      }
      if ((v19 & 1) != 0)
      {
        v5 = v18;
        if (v17 != v16)
          v5 = 0;
        if ((v5 & 1) == 0)
          return 0;
      }
      else
      {
        if ((v18 & 1) != 0)
          return 0;
        result = 0;
        if (v15 != v14 || v17 != v16)
          return result;
      }
      v3 += 7;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v4 = 0;
    v14 = a1;
    while (1)
    {
      v6 = *(_QWORD *)(a1 + v4 + 32);
      v5 = *(_QWORD *)(a1 + v4 + 40);
      v7 = *(_QWORD *)(a1 + v4 + 48);
      v20 = *(_QWORD *)(a1 + v4 + 56);
      v9 = *(_QWORD *)(a2 + v4 + 32);
      v8 = *(_QWORD *)(a2 + v4 + 40);
      v11 = *(_QWORD *)(a2 + v4 + 48);
      v10 = *(_QWORD *)(a2 + v4 + 56);
      v15 = *(_QWORD *)(a2 + v4 + 64);
      v16 = *(_QWORD *)(a1 + v4 + 64);
      v18 = *(unsigned __int8 *)(a2 + v4 + 72);
      v19 = *(_BYTE *)(a1 + v4 + 72);
      outlined copy of NodePersonality(v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of NodePersonality(v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((static NodePersonality.== infix(_:_:)(v6, v9) & 1) == 0
        || (specialized static Array<A>.== infix(_:_:)(v5, v8) & 1) == 0)
      {
        break;
      }
      v17 = specialized static Array<A>.== infix(_:_:)(v7, v11);
      outlined consume of NodePersonality(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NodePersonality(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v17 & 1) == 0 || v20 != v10)
        return result;
      if ((v19 & 1) != 0)
      {
        a1 = v14;
        if (!v18)
          return 0;
      }
      else
      {
        v13 = v18;
        if (v16 != v15)
          v13 = 1;
        a1 = v14;
        if ((v13 & 1) != 0)
          return 0;
      }
      v4 += 48;
      if (!--v2)
        return 1;
    }
    outlined consume of NodePersonality(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NodePersonality(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[6];
  v6 = a2[6];
  if (a1[4] == a2[4] && a1[5] == a2[5])
  {
    if (v5 == v6)
      goto LABEL_12;
    return 0;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v8 & 1) != 0 && v5 == v6)
  {
LABEL_12:
    v10 = v2 - 1;
    if (v10)
    {
      v11 = a2 + 9;
      for (i = a1 + 9; ; i += 3)
      {
        v13 = *i;
        v14 = *v11;
        if (*(i - 2) == *(v11 - 2) && *(i - 1) == *(v11 - 1))
        {
          if (v13 != v14)
            return 0;
        }
        else
        {
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = 0;
          if ((v16 & 1) == 0 || v13 != v14)
            return result;
        }
        v11 += 3;
        result = 1;
        if (!--v10)
          return result;
      }
    }
    return 1;
  }
  return result;
}

{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  char v7;
  uint64_t result;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[6];
  if (a1[4] != a2[4] || a1[5] != a2[5])
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 128);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_retain();
  LOBYTE(v9) = v9(v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
    return 0;
  v11 = v2 - 1;
  if (v2 == 1)
    return 1;
  v12 = a2 + 9;
  v13 = a1 + 9;
  while (v11)
  {
    v14 = *v13;
    v15 = *(v13 - 2) == *(v12 - 2) && *(v13 - 1) == *(v12 - 1);
    if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return 0;
    v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 128);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v17 = swift_retain();
    LOBYTE(v16) = v16(v17);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      return 0;
    v12 += 3;
    v13 += 3;
    result = 1;
    if (!--v11)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *, _OWORD *))
{
  uint64_t v3;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v19[7];
  _OWORD v20[2];
  _OWORD v21[7];
  _OWORD v22[2];

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(a2 + 16))
  {
    if (!v3 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v5 = (_OWORD *)(a1 + 32);
      v6 = (_OWORD *)(a2 + 32);
      v7 = v3 - 1;
      do
      {
        v8 = v7;
        v9 = v5[7];
        v21[6] = v5[6];
        v22[0] = v9;
        *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v5 + 121);
        v10 = v5[3];
        v21[2] = v5[2];
        v21[3] = v10;
        v11 = v5[5];
        v21[4] = v5[4];
        v21[5] = v11;
        v12 = v5[1];
        v21[0] = *v5;
        v21[1] = v12;
        v13 = v6[7];
        v19[6] = v6[6];
        v20[0] = v13;
        *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v6 + 121);
        v14 = v6[3];
        v19[2] = v6[2];
        v19[3] = v14;
        v15 = v6[5];
        v19[4] = v6[4];
        v19[5] = v15;
        v16 = v6[1];
        v19[0] = *v6;
        v19[1] = v16;
        v17 = a3(v21, v19);
        if ((v17 & 1) == 0)
          break;
        v7 = v8 - 1;
        v6 += 9;
        v5 += 9;
      }
      while (v8);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v30)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v31 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v3 + 32); ; result = (id)MEMORY[0x24954B748](0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)MEMORY[0x24954B748](0, v2);
LABEL_21:
    v14 = v13;
    type metadata accessor for SGGeometryPropertyDefinition();
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
      goto LABEL_48;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v17 = 0;
      v18 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v31)
          v19 = (id)MEMORY[0x24954B748](v17 + 1, v3);
        else
          v19 = *(id *)(v3 + 40 + 8 * v17);
        v20 = v19;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v21 = (id)MEMORY[0x24954B748](v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v8 + 16))
            goto LABEL_53;
          v21 = *(id *)(v2 + 40 + 8 * v17);
        }
        v22 = v21;
        v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v18 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24 <= 1)
        v24 = 1;
      v25 = v24 - 1;
      v26 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v25)
          goto LABEL_52;
        v28 = *v26++;
        v27 = v28;
        v29 = *(void **)v8;
        v8 += 8;
        v2 = v27;
        v3 = v29;
        v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t *MaterialXDataType.vector2.unsafeMutableAddressor()
{
  if (one-time initialization token for vector2 != -1)
    swift_once();
  return &static MaterialXDataType.vector2;
}

uint64_t *MaterialXDataType.float2.unsafeMutableAddressor()
{
  if (one-time initialization token for float2 != -1)
    swift_once();
  return &static MaterialXDataType.float2;
}

uint64_t *MaterialXDataType.vector3.unsafeMutableAddressor()
{
  if (one-time initialization token for vector3 != -1)
    swift_once();
  return &static MaterialXDataType.vector3;
}

uint64_t *MaterialXDataType.float3.unsafeMutableAddressor()
{
  if (one-time initialization token for float3 != -1)
    swift_once();
  return &static MaterialXDataType.float3;
}

uint64_t *MaterialXDataType.vector4.unsafeMutableAddressor()
{
  if (one-time initialization token for vector4 != -1)
    swift_once();
  return &static MaterialXDataType.vector4;
}

uint64_t *MaterialXDataType.float4.unsafeMutableAddressor()
{
  if (one-time initialization token for float4 != -1)
    swift_once();
  return &static MaterialXDataType.float4;
}

uint64_t *MaterialXDataType.float.unsafeMutableAddressor()
{
  if (one-time initialization token for float != -1)
    swift_once();
  return &static MaterialXDataType.float;
}

uint64_t *MaterialXDataType.color3.unsafeMutableAddressor()
{
  if (one-time initialization token for color3 != -1)
    swift_once();
  return &static MaterialXDataType.color3;
}

uint64_t *MaterialXDataType.color4.unsafeMutableAddressor()
{
  if (one-time initialization token for color4 != -1)
    swift_once();
  return &static MaterialXDataType.color4;
}

uint64_t *MaterialXDataType.BOOLean.unsafeMutableAddressor()
{
  if (one-time initialization token for BOOLean != -1)
    swift_once();
  return &static MaterialXDataType.BOOLean;
}

uint64_t *MaterialXDataType.integer.unsafeMutableAddressor()
{
  if (one-time initialization token for integer != -1)
    swift_once();
  return &static MaterialXDataType.integer;
}

uint64_t *MaterialXDataType.integer2.unsafeMutableAddressor()
{
  if (one-time initialization token for integer2 != -1)
    swift_once();
  return &static MaterialXDataType.integer2;
}

uint64_t *MaterialXDataType.integer3.unsafeMutableAddressor()
{
  if (one-time initialization token for integer3 != -1)
    swift_once();
  return &static MaterialXDataType.integer3;
}

uint64_t *MaterialXDataType.integer4.unsafeMutableAddressor()
{
  if (one-time initialization token for integer4 != -1)
    swift_once();
  return &static MaterialXDataType.integer4;
}

uint64_t *MaterialXDataType.half.unsafeMutableAddressor()
{
  if (one-time initialization token for half != -1)
    swift_once();
  return &static MaterialXDataType.half;
}

uint64_t *MaterialXDataType.half2.unsafeMutableAddressor()
{
  if (one-time initialization token for half2 != -1)
    swift_once();
  return &static MaterialXDataType.half2;
}

uint64_t *MaterialXDataType.half3.unsafeMutableAddressor()
{
  if (one-time initialization token for half3 != -1)
    swift_once();
  return &static MaterialXDataType.half3;
}

uint64_t *MaterialXDataType.half4.unsafeMutableAddressor()
{
  if (one-time initialization token for half4 != -1)
    swift_once();
  return &static MaterialXDataType.half4;
}

uint64_t *MaterialXDataType.matrix22.unsafeMutableAddressor()
{
  if (one-time initialization token for matrix22 != -1)
    swift_once();
  return &static MaterialXDataType.matrix22;
}

uint64_t *MaterialXDataType.matrix33.unsafeMutableAddressor()
{
  if (one-time initialization token for matrix33 != -1)
    swift_once();
  return &static MaterialXDataType.matrix33;
}

uint64_t *MaterialXDataType.matrix44.unsafeMutableAddressor()
{
  if (one-time initialization token for matrix44 != -1)
    swift_once();
  return &static MaterialXDataType.matrix44;
}

uint64_t *MaterialXDataType.surfaceshader.unsafeMutableAddressor()
{
  if (one-time initialization token for surfaceshader != -1)
    swift_once();
  return &static MaterialXDataType.surfaceshader;
}

uint64_t *MaterialXDataType.vertexshader.unsafeMutableAddressor()
{
  if (one-time initialization token for vertexshader != -1)
    swift_once();
  return &static MaterialXDataType.vertexshader;
}

uint64_t *MaterialXDataType.geometrymodifier.unsafeMutableAddressor()
{
  if (one-time initialization token for geometrymodifier != -1)
    swift_once();
  return &static MaterialXDataType.geometrymodifier;
}

uint64_t *MaterialXDataType.string.unsafeMutableAddressor()
{
  if (one-time initialization token for string != -1)
    swift_once();
  return &static MaterialXDataType.string;
}

uint64_t *MaterialXDataType.space.unsafeMutableAddressor()
{
  if (one-time initialization token for space != -1)
    swift_once();
  return &static MaterialXDataType.space;
}

uint64_t *MaterialXDataType.uAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for uAddressMode != -1)
    swift_once();
  return &static MaterialXDataType.uAddressMode;
}

uint64_t *MaterialXDataType.vAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for vAddressMode != -1)
    swift_once();
  return &static MaterialXDataType.vAddressMode;
}

uint64_t *MaterialXDataType.usd.wrapS.unsafeMutableAddressor()
{
  if (one-time initialization token for wrapS != -1)
    swift_once();
  return &static MaterialXDataType.usd.wrapS;
}

uint64_t *MaterialXDataType.usd.wrapT.unsafeMutableAddressor()
{
  if (one-time initialization token for wrapT != -1)
    swift_once();
  return &static MaterialXDataType.usd.wrapT;
}

uint64_t *MaterialXDataType.filterType.unsafeMutableAddressor()
{
  if (one-time initialization token for filterType != -1)
    swift_once();
  return &static MaterialXDataType.filterType;
}

uint64_t *MaterialXDataType.blurFilterType.unsafeMutableAddressor()
{
  if (one-time initialization token for blurFilterType != -1)
    swift_once();
  return &static MaterialXDataType.blurFilterType;
}

uint64_t *MaterialXDataType.normalMapSpace.unsafeMutableAddressor()
{
  if (one-time initialization token for normalMapSpace != -1)
    swift_once();
  return &static MaterialXDataType.normalMapSpace;
}

uint64_t *MaterialXDataType.lumacoeffs.unsafeMutableAddressor()
{
  if (one-time initialization token for lumacoeffs != -1)
    swift_once();
  return &static MaterialXDataType.lumacoeffs;
}

uint64_t *MaterialXDataType.realitykit.cubeimageFilterType.unsafeMutableAddressor()
{
  if (one-time initialization token for cubeimageFilterType != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.cubeimageFilterType;
}

uint64_t *MaterialXDataType.realitykit.filter.unsafeMutableAddressor()
{
  if (one-time initialization token for filter != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.filter;
}

uint64_t *MaterialXDataType.realitykit.coord.unsafeMutableAddressor()
{
  if (one-time initialization token for coord != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.coord;
}

uint64_t *MaterialXDataType.realitykit.addressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for addressMode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.addressMode;
}

uint64_t *MaterialXDataType.realitykit.rAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for rAddressMode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.rAddressMode;
}

uint64_t *MaterialXDataType.realitykit.sAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for sAddressMode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.sAddressMode;
}

uint64_t *MaterialXDataType.realitykit.tAddressMode.unsafeMutableAddressor()
{
  if (one-time initialization token for tAddressMode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.tAddressMode;
}

uint64_t *MaterialXDataType.realitykit.u_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for u_wrap_mode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.u_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.v_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for v_wrap_mode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.v_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.w_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for w_wrap_mode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.w_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.u_pixel_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for u_pixel_wrap_mode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.u_pixel_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.v_pixel_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for v_pixel_wrap_mode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.v_pixel_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.w_pixel_wrap_mode.unsafeMutableAddressor()
{
  if (one-time initialization token for w_pixel_wrap_mode != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.w_pixel_wrap_mode;
}

uint64_t *MaterialXDataType.realitykit.magFilter.unsafeMutableAddressor()
{
  if (one-time initialization token for magFilter != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.magFilter;
}

uint64_t *MaterialXDataType.realitykit.minFilter.unsafeMutableAddressor()
{
  if (one-time initialization token for minFilter != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.minFilter;
}

uint64_t *MaterialXDataType.realitykit.mipFilter.unsafeMutableAddressor()
{
  if (one-time initialization token for mipFilter != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.mipFilter;
}

uint64_t *MaterialXDataType.realitykit.borderColor.unsafeMutableAddressor()
{
  if (one-time initialization token for borderColor != -1)
    swift_once();
  return &static MaterialXDataType.realitykit.borderColor;
}

Swift::String_optional __swiftcall MetalDataType.convertEnumConstant(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String_optional result;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for coord != -1)
    swift_once();
  if ((MetalDataType.isEqual(to:)() & 1) != 0)
  {
    v8 = &outlined read-only object #0 of MetalDataType.convertEnumConstant(_:);
  }
  else
  {
    if (one-time initialization token for address != -1)
      swift_once();
    if ((MetalDataType.isEqual(to:)() & 1) != 0)
      goto LABEL_17;
    if (one-time initialization token for s_address != -1)
      swift_once();
    if ((MetalDataType.isEqual(to:)() & 1) != 0)
      goto LABEL_17;
    if (one-time initialization token for t_address != -1)
      swift_once();
    if ((MetalDataType.isEqual(to:)() & 1) != 0)
      goto LABEL_17;
    if (one-time initialization token for r_address != -1)
      swift_once();
    if ((MetalDataType.isEqual(to:)() & 1) != 0)
    {
LABEL_17:
      v8 = &outlined read-only object #1 of MetalDataType.convertEnumConstant(_:);
    }
    else
    {
      if (one-time initialization token for filter != -1)
        swift_once();
      if ((MetalDataType.isEqual(to:)() & 1) != 0)
        goto LABEL_35;
      if (one-time initialization token for min_filter != -1)
        swift_once();
      if ((MetalDataType.isEqual(to:)() & 1) != 0)
        goto LABEL_35;
      if (one-time initialization token for mag_filter != -1)
        swift_once();
      if ((MetalDataType.isEqual(to:)() & 1) != 0)
      {
LABEL_35:
        v8 = &outlined read-only object #2 of MetalDataType.convertEnumConstant(_:);
      }
      else
      {
        if (one-time initialization token for mip_filter != -1)
          swift_once();
        if ((MetalDataType.isEqual(to:)() & 1) != 0)
        {
          v8 = &outlined read-only object #3 of MetalDataType.convertEnumConstant(_:);
        }
        else
        {
          if (one-time initialization token for space != -1)
            swift_once();
          if ((MetalDataType.isEqual(to:)() & 1) != 0)
          {
            v8 = &outlined read-only object #4 of MetalDataType.convertEnumConstant(_:);
          }
          else
          {
            if (one-time initialization token for border_color != -1)
              swift_once();
            if ((MetalDataType.isEqual(to:)() & 1) != 0)
            {
              v8 = &outlined read-only object #5 of MetalDataType.convertEnumConstant(_:);
            }
            else if ((MetalDataType.isEqual(to:)() & 1) != 0)
            {
              v8 = &outlined read-only object #6 of MetalDataType.convertEnumConstant(_:);
            }
            else
            {
              if (one-time initialization token for compare_func != -1)
                swift_once();
              if ((MetalDataType.isEqual(to:)() & 1) == 0)
              {
                if (one-time initialization token for logger != -1)
                  swift_once();
                v17 = __swift_project_value_buffer(v4, (uint64_t)logger);
                (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v17, v4);
                swift_bridgeObjectRetain_n();
                swift_retain_n();
                v18 = Logger.logObject.getter();
                v19 = static os_log_type_t.error.getter();
                v29 = v19;
                if (os_log_type_enabled(v18, v19))
                {
                  v20 = swift_slowAlloc();
                  v28 = swift_slowAlloc();
                  v31 = v28;
                  *(_DWORD *)v20 = 136315394;
                  swift_bridgeObjectRetain();
                  v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v31);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v20 + 12) = 2080;
                  v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
                  v22 = swift_retain();
                  v23 = v21(v22);
                  v25 = v24;
                  swift_release();
                  v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v31);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_245E46000, v18, (os_log_type_t)v29, "Could not convert value '%s' to '%s'", (uint8_t *)v20, 0x16u);
                  v26 = v28;
                  swift_arrayDestroy();
                  MEMORY[0x24954C33C](v26, -1, -1);
                  MEMORY[0x24954C33C](v20, -1, -1);

                }
                else
                {

                  swift_release_n();
                  swift_bridgeObjectRelease_n();
                }
                (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
                goto LABEL_24;
              }
              v8 = &outlined read-only object #7 of MetalDataType.convertEnumConstant(_:);
            }
          }
        }
      }
    }
  }
  v9 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v8);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    v13 = 0;
    v14 = 0;
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
  v13 = *v12;
  v14 = (void *)v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  v15 = v13;
  v16 = v14;
  result.value._object = v16;
  result.value._countAndFlagsBits = v15;
  return result;
}

uint64_t *MaterialXDataType.unsupported.unsafeMutableAddressor()
{
  if (one-time initialization token for unsupported != -1)
    swift_once();
  return &static MaterialXDataType.unsupported;
}

uint64_t SGDataTypeStorage.init(materialXValue:type:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v7[10];

  result = specialized SGDataTypeStorage.init(materialXValue:type:)(a1, a2, a3, v7);
  if (!v4)
    return outlined init with take of SGDataTypeStorage((uint64_t)v7, a4);
  return result;
}

uint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  char v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for CharacterSet();
  v63 = *(_QWORD *)(v4 - 8);
  v64 = (char *)v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = a1;
  v69 = a2;
  v66 = 44;
  v67 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v7 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v66 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v62 = v7;
    v10 = (uint64_t *)(v7 + 40);
    do
    {
      v11 = *v10;
      v68 = *(v10 - 1);
      v69 = v11;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v12 = StringProtocol.trimmingCharacters(in:)();
      v14 = v13;
      (*(void (**)(char *, char *))(v63 + 8))(v6, v64);
      swift_bridgeObjectRelease();
      v15 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v66;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v15 = v66;
      }
      v10 += 2;
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v18 = v15 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v12;
      *(_QWORD *)(v18 + 40) = v14;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    v19 = *(_QWORD *)(v15 + 16);
    if (!v19)
      goto LABEL_104;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
    v19 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v19)
    {
LABEL_104:
      swift_bridgeObjectRelease();
      specialized SIMD.init<A>(_:)(v9);
      return swift_bridgeObjectRelease();
    }
  }
  v66 = v9;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  v21 = 0;
  v64 = (char *)&v68 + 1;
  while (1)
  {
    v22 = (uint64_t *)(v15 + 32 + 16 * v21);
    v24 = *v22;
    v23 = v22[1];
    v25 = HIBYTE(v23) & 0xF;
    v26 = *v22 & 0xFFFFFFFFFFFFLL;
    if (!((v23 & 0x2000000000000000) != 0 ? HIBYTE(v23) & 0xF : *v22 & 0xFFFFFFFFFFFFLL))
      break;
    if ((v23 & 0x1000000000000000) == 0)
    {
      if ((v23 & 0x2000000000000000) != 0)
      {
        v68 = v24;
        v69 = v23 & 0xFFFFFFFFFFFFFFLL;
        if (v24 == 43)
        {
          if (!v25)
            goto LABEL_109;
          if (v25 != 1)
          {
            v32 = (BYTE1(v24) - 48);
            if (v32 <= 9)
            {
              v51 = v25 - 2;
              if (!v51)
                goto LABEL_73;
              v52 = (unsigned __int8 *)&v68 + 2;
              while (1)
              {
                v53 = *v52 - 48;
                if (v53 > 9)
                  break;
                v54 = 10 * v32;
                if (v54 != (int)v54)
                  break;
                v32 = v54 + v53;
                if (__OFADD__((_DWORD)v54, v53))
                  break;
                v31 = 0;
                ++v52;
                if (!--v51)
                  goto LABEL_87;
              }
            }
          }
        }
        else if (v24 == 45)
        {
          if (!v25)
            goto LABEL_107;
          if (v25 != 1 && (BYTE1(v24) - 48) <= 9u)
          {
            v31 = 0;
            v32 = -(BYTE1(v24) - 48);
            v37 = v25 - 2;
            if (!v37)
              goto LABEL_87;
            v38 = (unsigned __int8 *)&v68 + 2;
            while (1)
            {
              v39 = *v38 - 48;
              if (v39 > 9)
                break;
              v40 = 10 * v32;
              if (v40 != (int)v40)
                break;
              v32 = v40 - v39;
              if (__OFSUB__((_DWORD)v40, v39))
                break;
              v31 = 0;
              ++v38;
              if (!--v37)
                goto LABEL_87;
            }
          }
        }
        else
        {
          if (!v25)
            goto LABEL_86;
          v32 = (v24 - 48);
          if (v32 > 9)
            goto LABEL_86;
          v58 = v25 - 1;
          if (!v58)
            goto LABEL_73;
          v59 = v64;
          while (1)
          {
            v60 = *v59 - 48;
            if (v60 > 9)
              break;
            v61 = 10 * v32;
            if (v61 != (int)v61)
              break;
            v32 = v61 + v60;
            if (__OFADD__((_DWORD)v61, v60))
              break;
            v31 = 0;
            ++v59;
            if (!--v58)
              goto LABEL_87;
          }
        }
      }
      else
      {
        if ((v24 & 0x1000000000000000) != 0)
          result = (v23 & 0xFFFFFFFFFFFFFFFLL) + 32;
        else
          result = _StringObject.sharedUTF8.getter();
        v28 = *(unsigned __int8 *)result;
        if (v28 == 43)
        {
          if (v26 < 1)
            goto LABEL_108;
          if (v26 != 1)
          {
            if (result)
              v41 = (_BYTE *)(result + 1);
            else
              v41 = 0;
            if (!result)
              goto LABEL_72;
            if (*v41 - 48 > 9)
              goto LABEL_86;
            v32 = (*v41 - 48);
            if (v26 == 2)
              goto LABEL_73;
            v42 = v41 + 1;
            v43 = v26 - 2;
            while (1)
            {
              v44 = *v42 - 48;
              if (v44 > 9)
                break;
              v45 = 10 * v32;
              if (v45 != (int)v45)
                break;
              v32 = v45 + v44;
              if (__OFADD__((_DWORD)v45, v44))
                break;
              v31 = 0;
              ++v42;
              if (!--v43)
                goto LABEL_87;
            }
          }
        }
        else if (v28 == 45)
        {
          if (v26 < 1)
            goto LABEL_106;
          if (v26 != 1)
          {
            if (result)
              v29 = (unsigned __int8 *)(result + 1);
            else
              v29 = 0;
            if (result)
            {
              v30 = *v29 - 48;
              if (v30 > 9)
                goto LABEL_86;
              v31 = 0;
              v32 = -v30;
              if (v26 != 2)
              {
                v33 = v29 + 1;
                v34 = v26 - 2;
                do
                {
                  v35 = *v33 - 48;
                  if (v35 > 9)
                    goto LABEL_86;
                  v36 = 10 * v32;
                  if (v36 != (int)v36)
                    goto LABEL_86;
                  v32 = v36 - v35;
                  if (__OFSUB__((_DWORD)v36, v35))
                    goto LABEL_86;
                  v31 = 0;
                  ++v33;
                }
                while (--v34);
              }
LABEL_87:
              v65 = v31;
              v55 = v31;
              result = swift_bridgeObjectRetain();
              if ((v55 & 1) != 0)
                goto LABEL_110;
              goto LABEL_88;
            }
LABEL_72:
            v32 = 0;
            goto LABEL_73;
          }
        }
        else
        {
          if (!v26)
            goto LABEL_86;
          if (!result)
            goto LABEL_72;
          v46 = v28 - 48;
          if (v46 > 9)
            goto LABEL_86;
          v32 = v46;
          v47 = v26 - 1;
          if (v26 == 1)
          {
LABEL_73:
            v31 = 0;
            goto LABEL_87;
          }
          v48 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            v49 = *v48 - 48;
            if (v49 > 9)
              break;
            v50 = 10 * v32;
            if (v50 != (int)v50)
              break;
            v32 = v50 + v49;
            if (__OFADD__((_DWORD)v50, v49))
              break;
            v31 = 0;
            ++v48;
            if (!--v47)
              goto LABEL_87;
          }
        }
      }
LABEL_86:
      v32 = 0;
      v31 = 1;
      goto LABEL_87;
    }
    swift_bridgeObjectRetain();
    result = specialized _parseInteger<A, B>(ascii:radix:)(v24, v23, 10);
    v32 = result;
    if ((result & 0x100000000) != 0)
      goto LABEL_110;
LABEL_88:
    swift_bridgeObjectRelease();
    v9 = v66;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v9 = v66;
    }
    v57 = *(_QWORD *)(v9 + 16);
    v56 = *(_QWORD *)(v9 + 24);
    if (v57 >= v56 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
      v9 = v66;
    }
    ++v21;
    *(_QWORD *)(v9 + 16) = v57 + 1;
    *(_DWORD *)(v9 + 4 * v57 + 32) = v32;
    if (v21 == v19)
      goto LABEL_104;
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
  return result;
}

uint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2, double (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  char v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  __int128 v63;
  _QWORD v64[2];
  double (*v65)(uint64_t);
  uint64_t v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v65 = a3;
  v5 = type metadata accessor for CharacterSet();
  v66 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)&v67 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = a1;
  v72 = a2;
  v69 = 44;
  v70 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v8 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v69 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v64[1] = v8;
    v11 = (uint64_t *)(v8 + 40);
    do
    {
      v12 = *v11;
      v71 = *(v11 - 1);
      v72 = v12;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v13 = StringProtocol.trimmingCharacters(in:)();
      v15 = v14;
      (*(void (**)(char *, _QWORD))(v66 + 8))(v7, v67);
      swift_bridgeObjectRelease();
      v16 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v69;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v16 = v69;
      }
      v11 += 2;
      *(_QWORD *)(v16 + 16) = v18 + 1;
      v19 = v16 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v13;
      *(_QWORD *)(v19 + 40) = v15;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    v20 = *(_QWORD *)(v16 + 16);
    if (!v20)
      goto LABEL_104;
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
    v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v20)
    {
LABEL_104:
      swift_bridgeObjectRelease();
      *(double *)&v63 = v65(v10);
      v67 = v63;
      return swift_bridgeObjectRelease();
    }
  }
  v69 = v10;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v22 = 0;
  *(_QWORD *)&v67 = (char *)&v71 + 1;
  while (1)
  {
    v23 = (uint64_t *)(v16 + 32 + 16 * v22);
    v24 = *v23;
    v25 = v23[1];
    v26 = HIBYTE(v25) & 0xF;
    v27 = *v23 & 0xFFFFFFFFFFFFLL;
    if (!((v25 & 0x2000000000000000) != 0 ? HIBYTE(v25) & 0xF : *v23 & 0xFFFFFFFFFFFFLL))
      break;
    if ((v25 & 0x1000000000000000) == 0)
    {
      if ((v25 & 0x2000000000000000) != 0)
      {
        v71 = v24;
        v72 = v25 & 0xFFFFFFFFFFFFFFLL;
        if (v24 == 43)
        {
          if (!v26)
            goto LABEL_109;
          if (v26 != 1)
          {
            v33 = (BYTE1(v24) - 48);
            if (v33 <= 9)
            {
              v52 = v26 - 2;
              if (!v52)
                goto LABEL_73;
              v53 = (unsigned __int8 *)&v71 + 2;
              while (1)
              {
                v54 = *v53 - 48;
                if (v54 > 9)
                  break;
                v55 = 10 * v33;
                if (v55 != (int)v55)
                  break;
                v33 = v55 + v54;
                if (__OFADD__((_DWORD)v55, v54))
                  break;
                v32 = 0;
                ++v53;
                if (!--v52)
                  goto LABEL_87;
              }
            }
          }
        }
        else if (v24 == 45)
        {
          if (!v26)
            goto LABEL_107;
          if (v26 != 1 && (BYTE1(v24) - 48) <= 9u)
          {
            v32 = 0;
            v33 = -(BYTE1(v24) - 48);
            v38 = v26 - 2;
            if (!v38)
              goto LABEL_87;
            v39 = (unsigned __int8 *)&v71 + 2;
            while (1)
            {
              v40 = *v39 - 48;
              if (v40 > 9)
                break;
              v41 = 10 * v33;
              if (v41 != (int)v41)
                break;
              v33 = v41 - v40;
              if (__OFSUB__((_DWORD)v41, v40))
                break;
              v32 = 0;
              ++v39;
              if (!--v38)
                goto LABEL_87;
            }
          }
        }
        else
        {
          if (!v26)
            goto LABEL_86;
          v33 = (v24 - 48);
          if (v33 > 9)
            goto LABEL_86;
          v59 = v26 - 1;
          if (!v59)
            goto LABEL_73;
          v60 = (unsigned __int8 *)v67;
          while (1)
          {
            v61 = *v60 - 48;
            if (v61 > 9)
              break;
            v62 = 10 * v33;
            if (v62 != (int)v62)
              break;
            v33 = v62 + v61;
            if (__OFADD__((_DWORD)v62, v61))
              break;
            v32 = 0;
            ++v60;
            if (!--v59)
              goto LABEL_87;
          }
        }
      }
      else
      {
        if ((v24 & 0x1000000000000000) != 0)
          result = (v25 & 0xFFFFFFFFFFFFFFFLL) + 32;
        else
          result = _StringObject.sharedUTF8.getter();
        v29 = *(unsigned __int8 *)result;
        if (v29 == 43)
        {
          if (v27 < 1)
            goto LABEL_108;
          if (v27 != 1)
          {
            if (result)
              v42 = (_BYTE *)(result + 1);
            else
              v42 = 0;
            if (!result)
              goto LABEL_72;
            if (*v42 - 48 > 9)
              goto LABEL_86;
            v33 = (*v42 - 48);
            if (v27 == 2)
              goto LABEL_73;
            v43 = v42 + 1;
            v44 = v27 - 2;
            while (1)
            {
              v45 = *v43 - 48;
              if (v45 > 9)
                break;
              v46 = 10 * v33;
              if (v46 != (int)v46)
                break;
              v33 = v46 + v45;
              if (__OFADD__((_DWORD)v46, v45))
                break;
              v32 = 0;
              ++v43;
              if (!--v44)
                goto LABEL_87;
            }
          }
        }
        else if (v29 == 45)
        {
          if (v27 < 1)
            goto LABEL_106;
          if (v27 != 1)
          {
            if (result)
              v30 = (unsigned __int8 *)(result + 1);
            else
              v30 = 0;
            if (result)
            {
              v31 = *v30 - 48;
              if (v31 > 9)
                goto LABEL_86;
              v32 = 0;
              v33 = -v31;
              if (v27 != 2)
              {
                v34 = v30 + 1;
                v35 = v27 - 2;
                do
                {
                  v36 = *v34 - 48;
                  if (v36 > 9)
                    goto LABEL_86;
                  v37 = 10 * v33;
                  if (v37 != (int)v37)
                    goto LABEL_86;
                  v33 = v37 - v36;
                  if (__OFSUB__((_DWORD)v37, v36))
                    goto LABEL_86;
                  v32 = 0;
                  ++v34;
                }
                while (--v35);
              }
LABEL_87:
              v68 = v32;
              v56 = v32;
              result = swift_bridgeObjectRetain();
              if ((v56 & 1) != 0)
                goto LABEL_110;
              goto LABEL_88;
            }
LABEL_72:
            v33 = 0;
            goto LABEL_73;
          }
        }
        else
        {
          if (!v27)
            goto LABEL_86;
          if (!result)
            goto LABEL_72;
          v47 = v29 - 48;
          if (v47 > 9)
            goto LABEL_86;
          v33 = v47;
          v48 = v27 - 1;
          if (v27 == 1)
          {
LABEL_73:
            v32 = 0;
            goto LABEL_87;
          }
          v49 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            v50 = *v49 - 48;
            if (v50 > 9)
              break;
            v51 = 10 * v33;
            if (v51 != (int)v51)
              break;
            v33 = v51 + v50;
            if (__OFADD__((_DWORD)v51, v50))
              break;
            v32 = 0;
            ++v49;
            if (!--v48)
              goto LABEL_87;
          }
        }
      }
LABEL_86:
      v33 = 0;
      v32 = 1;
      goto LABEL_87;
    }
    swift_bridgeObjectRetain();
    result = specialized _parseInteger<A, B>(ascii:radix:)(v24, v25, 10);
    v33 = result;
    if ((result & 0x100000000) != 0)
      goto LABEL_110;
LABEL_88:
    swift_bridgeObjectRelease();
    v10 = v69;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
      v10 = v69;
    }
    v58 = *(_QWORD *)(v10 + 16);
    v57 = *(_QWORD *)(v10 + 24);
    if (v58 >= v57 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
      v10 = v69;
    }
    ++v22;
    *(_QWORD *)(v10 + 16) = v58 + 1;
    *(_DWORD *)(v10 + 4 * v58 + 32) = v33;
    if (v22 == v20)
      goto LABEL_104;
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
  return result;
}

unint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2, double (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t result;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  double (*v32)(_QWORD);
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = type metadata accessor for CharacterSet();
  v33 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v34 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1;
  v38 = a2;
  v35 = 44;
  v36 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v9 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v9 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v32 = a3;
    v35 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v31[1] = v9;
    v12 = (uint64_t *)(v9 + 40);
    do
    {
      v13 = *v12;
      v37 = *(v12 - 1);
      v38 = v13;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v14 = StringProtocol.trimmingCharacters(in:)();
      v16 = v15;
      (*(void (**)(char *, _QWORD))(v33 + 8))(v8, v34);
      swift_bridgeObjectRelease();
      v17 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v35;
      }
      v19 = *(_QWORD *)(v17 + 16);
      v18 = *(_QWORD *)(v17 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v17 = v35;
      }
      v12 += 2;
      *(_QWORD *)(v17 + 16) = v19 + 1;
      v20 = v17 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v14;
      *(_QWORD *)(v20 + 40) = v16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a3 = v32;
    v11 = MEMORY[0x24BEE4AF8];
    v21 = *(_QWORD *)(v17 + 16);
    if (v21)
    {
LABEL_9:
      v37 = v11;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      v22 = v37;
      v23 = (uint64_t *)(v17 + 40);
      while (1)
      {
        v24 = *(v23 - 1);
        v25 = *v23;
        swift_bridgeObjectRetain();
        result = specialized Float.init<A>(_:)(v24, v25);
        if ((result & 0x100000000) != 0)
          break;
        v27 = result;
        v37 = v22;
        v29 = *(_QWORD *)(v22 + 16);
        v28 = *(_QWORD *)(v22 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v22 = v37;
        }
        v23 += 2;
        *(_QWORD *)(v22 + 16) = v29 + 1;
        *(_DWORD *)(v22 + 4 * v29 + 32) = v27;
        if (!--v21)
        {
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
    v21 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v21)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v22 = MEMORY[0x24BEE4AF8];
LABEL_17:
  *(double *)&v30 = a3(v22);
  v34 = v30;
  return swift_bridgeObjectRelease();
}

unint64_t specialized SIMD<>.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t result;
  int v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for CharacterSet();
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  v33 = a2;
  v30 = 44;
  v31 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v7 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v30 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v27[1] = v7;
    v10 = (uint64_t *)(v7 + 40);
    do
    {
      v11 = *v10;
      v32 = *(v10 - 1);
      v33 = v11;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v12 = StringProtocol.trimmingCharacters(in:)();
      v14 = v13;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v29);
      swift_bridgeObjectRelease();
      v15 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v30;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v15 = v30;
      }
      v10 += 2;
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v18 = v15 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v12;
      *(_QWORD *)(v18 + 40) = v14;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
    v19 = *(_QWORD *)(v15 + 16);
    if (!v19)
      goto LABEL_16;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
    v19 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v19)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      specialized SIMD.init<A>(_:)(v9);
      return swift_bridgeObjectRelease();
    }
  }
  v32 = v9;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  v9 = v32;
  v20 = (uint64_t *)(v15 + 40);
  while (1)
  {
    v21 = *(v20 - 1);
    v22 = *v20;
    swift_bridgeObjectRetain();
    result = specialized Float.init<A>(_:)(v21, v22);
    if ((result & 0x100000000) != 0)
      break;
    v24 = result;
    v32 = v9;
    v26 = *(_QWORD *)(v9 + 16);
    v25 = *(_QWORD *)(v9 + 24);
    if (v26 >= v25 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
      v9 = v32;
    }
    v20 += 2;
    *(_QWORD *)(v9 + 16) = v26 + 1;
    *(_DWORD *)(v9 + 4 * v26 + 32) = v24;
    if (!--v19)
      goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t SIMD<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *AssociatedTypeWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = v6;
  v38 = a3;
  v39 = a4;
  v37 = a6;
  v11 = type metadata accessor for CharacterSet();
  v40 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a1;
  v44 = a2;
  v41 = 44;
  v42 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v14 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v35 = a5;
    v36 = v7;
    v41 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    v34 = v14;
    v16 = (uint64_t *)(v14 + 40);
    do
    {
      v17 = *v16;
      v43 = *(v16 - 1);
      v44 = v17;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v18 = StringProtocol.trimmingCharacters(in:)();
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v11);
      swift_bridgeObjectRelease();
      v21 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v41;
      }
      v23 = *(_QWORD *)(v21 + 16);
      v22 = *(_QWORD *)(v21 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v21 = v41;
      }
      v16 += 2;
      *(_QWORD *)(v21 + 16) = v23 + 1;
      v24 = v21 + 16 * v23;
      *(_QWORD *)(v24 + 32) = v18;
      *(_QWORD *)(v24 + 40) = v20;
      --v15;
    }
    while (v15);
    v25 = swift_bridgeObjectRelease();
    a5 = v35;
  }
  else
  {
    v25 = swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
  }
  v43 = v21;
  MEMORY[0x24BDAC7A8](v25);
  v26 = v39;
  *(&v34 - 4) = v38;
  *(&v34 - 3) = v26;
  *(&v34 - 2) = a5;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v29 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], MEMORY[0x24BEE12E0]);
  v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in SIMD<>.init(_:), (uint64_t)(&v34 - 6), v27, AssociatedTypeWitness, MEMORY[0x24BEE4078], v29, MEMORY[0x24BEE40A8], v30);
  swift_bridgeObjectRelease();
  v43 = v31;
  v32 = type metadata accessor for Array();
  MEMORY[0x24954C264](MEMORY[0x24BEE12C8], v32);
  return SIMD.init<A>(_:)();
}

uint64_t closure #2 in SIMD<>.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - v8;
  v10 = *a1;
  v11 = a1[1];
  swift_bridgeObjectRetain();
  MEMORY[0x24954BB44](v10, v11, AssociatedTypeWitness, a2);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v9, AssociatedTypeWitness);
  __break(1u);
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v19 = 0;
    LOBYTE(v18) = 1;
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
    swift_bridgeObjectRelease();
    v18 = HIDWORD(v8) & 1;
LABEL_36:
    v19 = v8;
    if ((_DWORD)v18)
      v19 = 0;
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
    LODWORD(v8) = (_DWORD)v7;
    v25 = BYTE4(v7) & 1;
    v9 = BYTE4(v7) & 1;
    goto LABEL_35;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v3)
      goto LABEL_51;
    if (v3 == 1)
      goto LABEL_34;
    LODWORD(v8) = (BYTE1(result) - 48);
    if (v8 > 9)
      goto LABEL_34;
    v14 = v3 - 2;
    if (v14)
    {
      v15 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        v16 = *v15 - 48;
        if (v16 > 9)
          goto LABEL_34;
        v17 = 10 * (int)v8;
        if (v17 != (int)v17)
          goto LABEL_34;
        LODWORD(v8) = v17 + v16;
        if (__OFADD__((_DWORD)v17, v16))
          goto LABEL_34;
        v9 = 0;
        ++v15;
        if (!--v14)
          goto LABEL_35;
      }
    }
LABEL_40:
    v9 = 0;
    goto LABEL_35;
  }
  if (result != 45)
  {
    if (!v3)
      goto LABEL_34;
    LODWORD(v8) = (result - 48);
    if (v8 > 9)
      goto LABEL_34;
    v20 = v3 - 1;
    if (v20)
    {
      v21 = (unsigned __int8 *)v24 + 1;
      while (1)
      {
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_34;
        v23 = 10 * (int)v8;
        if (v23 != (int)v23)
          goto LABEL_34;
        LODWORD(v8) = v23 + v22;
        if (__OFADD__((_DWORD)v23, v22))
          goto LABEL_34;
        v9 = 0;
        ++v21;
        if (!--v20)
          goto LABEL_35;
      }
    }
    goto LABEL_40;
  }
  if (v3)
  {
    if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      v9 = 0;
      LODWORD(v8) = -(BYTE1(result) - 48);
      v10 = v3 - 2;
      if (!v10)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        LODWORD(v18) = v9 & 1;
        goto LABEL_36;
      }
      v11 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        v12 = *v11 - 48;
        if (v12 > 9)
          break;
        v13 = 10 * (int)v8;
        if (v13 != (int)v13)
          break;
        LODWORD(v8) = v13 - v12;
        if (__OFSUB__((_DWORD)v13, v12))
          break;
        v9 = 0;
        ++v11;
        if (!--v10)
          goto LABEL_35;
      }
    }
LABEL_34:
    LODWORD(v8) = 0;
    v9 = 1;
    goto LABEL_35;
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

_QWORD *createType(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v0 = type metadata accessor for CharacterSet();
  v31 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = XMLNode.subscript.getter(1701869940, 0xE400000000000000);
  if (!v4)
    return 0;
  v5 = v3;
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (v3 == 0x676E69727473 && v4 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v8 = XMLNode.subscript.getter(1836412517, 0xE400000000000000);
    if (v9)
    {
      v10 = v8;
      v11 = v9;
      v12 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
      if (v13)
      {
        v14 = v12;
        v15 = v13;
        swift_bridgeObjectRelease();
        v34 = v10;
        v35 = v11;
        v32 = 44;
        v33 = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v16 = StringProtocol.components<A>(separatedBy:)();
        swift_bridgeObjectRelease();
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v29 = v14;
          v30 = v15;
          v32 = v7;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
          v28 = v16;
          v18 = (uint64_t *)(v16 + 40);
          do
          {
            v19 = *v18;
            v34 = *(v18 - 1);
            v35 = v19;
            swift_bridgeObjectRetain();
            static CharacterSet.whitespacesAndNewlines.getter();
            v20 = StringProtocol.trimmingCharacters(in:)();
            v22 = v21;
            (*(void (**)(char *, uint64_t))(v31 + 8))(v2, v0);
            swift_bridgeObjectRelease();
            v23 = v32;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
              v23 = v32;
            }
            v25 = *(_QWORD *)(v23 + 16);
            v24 = *(_QWORD *)(v23 + 24);
            if (v25 >= v24 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
              v23 = v32;
            }
            v18 += 2;
            *(_QWORD *)(v23 + 16) = v25 + 1;
            v26 = v23 + 16 * v25;
            *(_QWORD *)(v26 + 32) = v20;
            *(_QWORD *)(v26 + 40) = v22;
            --v17;
          }
          while (v17);
          swift_bridgeObjectRelease();
          v7 = MEMORY[0x24BEE4AF8];
          v14 = v29;
          v15 = v30;
        }
        else
        {
          swift_bridgeObjectRelease();
          v23 = MEMORY[0x24BEE4AF8];
        }
        type metadata accessor for MaterialXDataType();
        result = (_QWORD *)swift_allocObject();
        v5 = v14;
        v6 = v15;
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
    }
  }
  type metadata accessor for MaterialXDataType();
  result = (_QWORD *)swift_allocObject();
  v23 = 0;
LABEL_20:
  result[4] = v5;
  result[5] = v6;
  result[2] = v7;
  result[3] = v23;
  return result;
}

uint64_t XMLNode.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  swift_getObjectType();
  v6 = swift_conformsToProtocol2();
  if (v6)
    v7 = v6;
  else
    v7 = 0;
  if (!v6)
    v3 = 0;
  if (!v3)
    return 0;
  ObjectType = swift_getObjectType();
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, ObjectType, v7))
    return 0;
  v10 = v9;
  v11 = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v11, v10);
  swift_unknownObjectRelease();
  return v12;
}

_QWORD *MaterialXDataType.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = a3;
  return result;
}

_QWORD *MaterialXDataType.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[2] = MEMORY[0x24BEE4AF8];
  result[3] = 0;
  return result;
}

_QWORD *XMLNode.elements(forXPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = (*(uint64_t (**)(void))(a4 + 48))();
  if (!v4)
  {
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v9 = 32;
      do
      {
        v11 = *(_QWORD *)(v7 + v9);
        swift_getObjectType();
        v12 = swift_conformsToProtocol2();
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        if (v12)
          v14 = v12;
        else
          v14 = 0;
        if (v13)
        {
          swift_unknownObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
          v16 = v5[2];
          v15 = v5[3];
          if (v16 >= v15 >> 1)
            v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v5);
          v5[2] = v16 + 1;
          v10 = &v5[2 * v16];
          v10[4] = v13;
          v10[5] = v14;
        }
        v9 += 16;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
  }
  return v5;
}

Swift::Bool_optional __swiftcall XMLElement.BOOL(named:)(Swift::String named)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v1 = XMLNode.subscript.getter(named._countAndFlagsBits, (uint64_t)named._object);
  if (!v2)
    return (Swift::Bool_optional)2;
  v3 = v1;
  v4 = v2;
  if (v1 == 1702195828 && v2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (Swift::Bool_optional)1;
  }
  else if (v3 == 0x65736C6166 && v4 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 0;
    else
      return (Swift::Bool_optional)2;
  }
}

uint64_t createNodeDef(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  Swift::String v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD v81[2];
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;

  v6 = (_QWORD *)type metadata accessor for CharacterSet();
  v95 = *(v6 - 1);
  v96 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType();
  v10 = *(_QWORD *)(a2 + 8);
  v11 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
  if (!v12)
    goto LABEL_13;
  v13 = v11;
  v14 = v12;
  v15 = XMLNode.subscript.getter(1701080942, 0xE400000000000000);
  if (!v16)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    _s11ShaderGraph7NodeDefVSgWOi0_(&v97);
    goto LABEL_56;
  }
  v90 = ObjectType;
  v87 = v16;
  v88 = v15;
  *(_QWORD *)&v89 = v13;
  v17 = XMLNode.subscript.getter(0x756F726765646F6ELL, 0xE900000000000070);
  v85 = v18;
  v86 = v17;
  v19 = XMLNode.subscript.getter(0x746567726174, 0xE600000000000000);
  v21 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)&v89 + 1) = v14;
  v91 = v10;
  if (v20)
  {
    v114 = v19;
    v115 = v20;
    *(_QWORD *)&v97 = 44;
    *((_QWORD *)&v97 + 1) = 0xE100000000000000;
    v94 = lazy protocol witness table accessor for type String and conformance String();
    v22 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
    {
      v83 = a1;
      v84 = a3;
      *(_QWORD *)&v97 = v21;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
      v93 = v22;
      v24 = (uint64_t *)(v22 + 40);
      do
      {
        v25 = *v24;
        v114 = *(v24 - 1);
        v115 = v25;
        swift_bridgeObjectRetain();
        static CharacterSet.whitespacesAndNewlines.getter();
        v26 = StringProtocol.trimmingCharacters(in:)();
        v28 = v27;
        (*(void (**)(char *, _QWORD *))(v95 + 8))(v8, v96);
        swift_bridgeObjectRelease();
        v29 = v97;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
          v29 = v97;
        }
        v31 = *(_QWORD *)(v29 + 16);
        v30 = *(_QWORD *)(v29 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          v29 = v97;
        }
        v24 += 2;
        *(_QWORD *)(v29 + 16) = v31 + 1;
        v32 = v29 + 16 * v31;
        *(_QWORD *)(v32 + 32) = v26;
        *(_QWORD *)(v32 + 40) = v28;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      v33 = 0;
      a1 = v83;
      a3 = v84;
    }
    else
    {
      swift_bridgeObjectRelease();
      v33 = 0;
      v29 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v29 = 0;
    v33 = 0;
  }
  v34 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, v90, v91);
  v35 = v34[2];
  if (v35)
  {
    v82 = 0;
    v83 = a1;
    v84 = a3;
    swift_bridgeObjectRetain();
    v81[1] = v34;
    v36 = v34 + 5;
    v96 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      swift_unknownObjectRetain();
      v37 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
      if (v38)
      {
        v39 = v37;
        v40 = v38;
        v41 = createType(_:)();
        if (v41)
        {
          v42 = v41;
          v43._countAndFlagsBits = 0x6D726F66696E75;
          v43._object = (void *)0xE700000000000000;
          LOBYTE(v44) = XMLElement.BOOL(named:)(v43);
          LODWORD(v93) = v44;
          v45 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
          v94 = v46;
          v95 = v45;
          v92 = XMLNode.subscript.getter(0x67746C7561666564, 0xEF706F72706D6F65);
          v48 = v47;
          swift_unknownObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
          v50 = v96[2];
          v49 = v96[3];
          if (v50 >= v49 >> 1)
            v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v96);
          v51 = v93 & 1;
          v53 = v95;
          v52 = v96;
          v96[2] = v50 + 1;
          v54 = &v52[8 * v50];
          v54[4] = v39;
          v54[5] = v40;
          v54[6] = v42;
          v54[7] = v53;
          v55 = v92;
          v54[8] = v94;
          v54[9] = v55;
          v54[10] = v48;
          *((_BYTE *)v54 + 88) = v51;
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
      v36 += 2;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    a1 = v83;
    a3 = v84;
    v33 = v82;
  }
  else
  {
    v96 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v56 = XMLNode.elements(forXPath:)(0x74757074756F2F2ELL, 0xE800000000000000, v90, v91);
  if (v33)
  {

    v57 = 0;
  }
  else
  {
    v58 = v56;
    v59 = v56[2];
    if (v59)
    {
      v83 = a1;
      v84 = a3;
      swift_bridgeObjectRetain();
      v93 = (uint64_t)v58;
      v60 = v58 + 5;
      v57 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        swift_unknownObjectRetain();
        v61 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
        if (v62)
        {
          v63 = v61;
          v64 = v62;
          v65 = createType(_:)();
          if (v65)
          {
            v66 = v65;
            v94 = XMLNode.subscript.getter(0x65756C6176, 0xE500000000000000);
            v95 = v67;
            swift_unknownObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
            v69 = v57[2];
            v68 = v57[3];
            if (v69 >= v68 >> 1)
              v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v57);
            v57[2] = v69 + 1;
            v70 = &v57[8 * v69];
            v70[4] = v63;
            v70[5] = v64;
            v71 = v94;
            v70[6] = v66;
            v70[7] = v71;
            v70[9] = 0;
            v70[10] = 0;
            v70[8] = v95;
            *((_BYTE *)v70 + 88) = 0;
          }
          else
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
        v60 += 2;
        --v59;
      }
      while (v59);
      swift_bridgeObjectRelease();
      a3 = v84;
    }
    else
    {
      v57 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
  }
  v72 = XMLNode.subscript.getter(0xD000000000000011, 0x8000000245FCAB90);
  v73 = XMLNode.subscript.getter(0x6C62616C69617661, 0xE900000000000065);
  v75 = specialized MaterialXAvailability.init(_:message:)(v73, v74, v72);
  v97 = v89;
  if (v29)
    v77 = v29;
  else
    v77 = MEMORY[0x24BEE4AF8];
  v78 = v96;
  if (!v96)
    v78 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v98 = v88;
  v99 = v87;
  v100 = 0;
  if (v57)
    v79 = v57;
  else
    v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v101 = 0;
  v102 = v86;
  v103 = v85;
  v104 = 0;
  v105 = 0;
  v106 = 2;
  v107 = v77;
  v108 = 0;
  v109 = 0;
  v110 = v75;
  v111 = v76;
  v112 = v78;
  v113 = v79;
  destructiveProjectEnumData for NodePersonality.ShaderType(&v97);
LABEL_56:
  outlined init with take of NodeDef?((uint64_t)&v97, (uint64_t)&v114);
  return outlined init with take of NodeDef?((uint64_t)&v114, a3);
}

uint64_t createGeomPropDef(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  Swift::String *v13;
  uint64_t result;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  Swift::String *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  Swift::String *v63;
  __int128 v64;
  _OWORD v65[12];
  __int128 v66;
  uint64_t v67;
  Swift::String v68;

  v5 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
  v7 = v5;
  if (!v6)
  {
    *(_QWORD *)&v64 = 1701667182;
    *((_QWORD *)&v64 + 1) = 0xE400000000000000;
LABEL_7:
    _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi11_((uint64_t)&v64);
    outlined init with take of UserGraphError.ErrorType(&v64, (uint64_t)v65);
    v66 = (unint64_t)v7;
    lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
    swift_allocError();
    *v15 = v65[0];
    v16 = v65[4];
    v17 = v65[2];
    v18 = v65[1];
    v15[3] = v65[3];
    v15[4] = v16;
    v15[1] = v18;
    v15[2] = v17;
    v19 = v65[8];
    v20 = v65[6];
    v21 = v65[5];
    v15[7] = v65[7];
    v15[8] = v19;
    v15[5] = v21;
    v15[6] = v20;
    v22 = v66;
    v23 = v65[10];
    v24 = v65[9];
    v15[11] = v65[11];
    v15[12] = v22;
    v15[9] = v24;
    v15[10] = v23;
    return swift_willThrow();
  }
  v8 = v6;
  v9 = v5;
  v7 = XMLNode.subscript.getter(0x706F72706D6F6567, 0xE800000000000000);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v64 = 0x706F72706D6F6567;
    *((_QWORD *)&v64 + 1) = 0xE800000000000000;
    goto LABEL_7;
  }
  v11 = v10;
  v12 = swift_unknownObjectRetain();
  v13 = specialized MaterialXDataType.__allocating_init(xmlElement:)(v12, a1);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  v63 = v13;
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  v68._countAndFlagsBits = v7;
  v68._object = v11;
  v25 = specialized GeomPropDef.BuiltinGeomProp.init(rawValue:)(v68);
  v26 = v25;
  v62 = v9;
  if (v25 == 6)
  {
    v67 = v7;
    v27 = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = 0;
    v27 = v26;
    v67 = v26;
  }
  v28 = XMLNode.subscript.getter(0x6563617073, 0xE500000000000000);
  if (v29)
  {
    v30 = v29;
    v31._countAndFlagsBits = v28;
    v31._object = v30;
    v32 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GeomPropDef.Space.init(rawValue:), v31);
    swift_bridgeObjectRelease();
    if (v32 >= 3)
      v33 = 3;
    else
      v33 = v32;
  }
  else
  {
    v33 = 3;
  }
  result = XMLNode.subscript.getter(0x7865646E69, 0xE500000000000000);
  v35 = v27;
  if (!v34)
  {
    v45 = 0;
    v46 = 1;
    v47 = v63;
    v40 = v67;
LABEL_65:
    *(_QWORD *)a2 = v62;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v47;
    *(_QWORD *)(a2 + 24) = v40;
    *(_QWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 40) = v35 == 6;
    *(_BYTE *)(a2 + 41) = v33;
    *(_QWORD *)(a2 + 48) = v45;
    *(_BYTE *)(a2 + 56) = v46 & 1;
    return result;
  }
  v36 = v34;
  v37 = HIBYTE(v34) & 0xF;
  v38 = result & 0xFFFFFFFFFFFFLL;
  if ((v36 & 0x2000000000000000) != 0)
    v39 = v37;
  else
    v39 = result & 0xFFFFFFFFFFFFLL;
  v40 = v67;
  if (!v39)
  {
    result = swift_bridgeObjectRelease();
    v45 = 0;
    v46 = 1;
    v47 = v63;
    goto LABEL_65;
  }
  v61 = v33;
  if ((v36 & 0x1000000000000000) != 0)
  {
    v42 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, v36, 10);
    v44 = v60;
    goto LABEL_61;
  }
  if ((v36 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v41 = (unsigned __int8 *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v42 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v41, v38, 10);
    v44 = v43 & 1;
    goto LABEL_61;
  }
  *(_QWORD *)&v65[0] = result;
  *((_QWORD *)&v65[0] + 1) = v36 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v37)
      goto LABEL_76;
    if (v37 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_48;
    v42 = (BYTE1(result) - 48);
    if (v37 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_48;
      v42 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v48 = v37 - 3;
      if (v48)
      {
        v49 = (unsigned __int8 *)v65 + 3;
        while (1)
        {
          v50 = *v49 - 48;
          if (v50 > 9)
            goto LABEL_48;
          v51 = 10 * v42;
          if ((unsigned __int128)(v42 * (__int128)10) >> 64 != (10 * v42) >> 63)
            goto LABEL_48;
          v42 = v51 + v50;
          if (__OFADD__(v51, v50))
            goto LABEL_48;
          v44 = 0;
          ++v49;
          if (!--v48)
            goto LABEL_61;
        }
      }
    }
LABEL_60:
    v44 = 0;
    goto LABEL_61;
  }
  if (result != 45)
  {
    if (!v37 || (result - 48) > 9u)
      goto LABEL_48;
    v42 = (result - 48);
    if (v37 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_48;
      v42 = 10 * (result - 48) + (BYTE1(result) - 48);
      v52 = v37 - 2;
      if (v52)
      {
        v53 = (unsigned __int8 *)v65 + 2;
        while (1)
        {
          v54 = *v53 - 48;
          if (v54 > 9)
            goto LABEL_48;
          v55 = 10 * v42;
          if ((unsigned __int128)(v42 * (__int128)10) >> 64 != (10 * v42) >> 63)
            goto LABEL_48;
          v42 = v55 + v54;
          if (__OFADD__(v55, v54))
            goto LABEL_48;
          v44 = 0;
          ++v53;
          if (!--v52)
            goto LABEL_61;
        }
      }
    }
    goto LABEL_60;
  }
  if (v37)
  {
    if (v37 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v37 == 2)
      {
        v44 = 0;
        v42 = -(uint64_t)(BYTE1(result) - 48);
LABEL_61:
        result = swift_bridgeObjectRelease();
        v46 = v44 & 1;
        if ((v44 & 1) != 0)
          v45 = 0;
        else
          v45 = v42;
        v47 = v63;
        v33 = v61;
        goto LABEL_65;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v42 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v56 = v37 - 3;
        if (!v56)
          goto LABEL_60;
        v57 = (unsigned __int8 *)v65 + 3;
        while (1)
        {
          v58 = *v57 - 48;
          if (v58 > 9)
            break;
          v59 = 10 * v42;
          if ((unsigned __int128)(v42 * (__int128)10) >> 64 != (10 * v42) >> 63)
            break;
          v42 = v59 - v58;
          if (__OFSUB__(v59, v58))
            break;
          v44 = 0;
          ++v57;
          if (!--v56)
            goto LABEL_61;
        }
      }
    }
LABEL_48:
    v42 = 0;
    v44 = 1;
    goto LABEL_61;
  }
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

Swift::String *MaterialXDataType.__allocating_init(xmlElement:)(uint64_t a1, uint64_t a2)
{
  Swift::String *v2;

  v2 = specialized MaterialXDataType.__allocating_init(xmlElement:)(a1, a2);
  swift_unknownObjectRelease();
  return v2;
}

uint64_t collectGeomPropDefs(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[2];
  _OWORD v55[2];
  _QWORD *v56;

  ObjectType = swift_getObjectType();
  v7 = *(_QWORD *)(a2 + 8);
  result = (uint64_t)XMLNode.elements(forXPath:)(0x72706D6F65672F2ELL, 0xED0000666564706FLL, ObjectType, v7);
  if (v3)
    return result;
  v9 = *(_QWORD *)(result + 16);
  v52 = a3;
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7);
    if (result)
    {
      v35 = result;
      v36 = *(_QWORD *)(result + 16);
      if (v36)
      {
        swift_bridgeObjectRetain();
        v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v38 = 32;
        do
        {
          v40 = *(_QWORD *)(v35 + v38);
          swift_getObjectType();
          v41 = swift_conformsToProtocol2();
          if (v41)
            v42 = v40;
          else
            v42 = 0;
          if (v41)
            v43 = v41;
          else
            v43 = 0;
          if (v42)
          {
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
            v45 = v37[2];
            v44 = v37[3];
            if (v45 >= v44 >> 1)
              v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v37);
            v37[2] = v45 + 1;
            v39 = &v37[2 * v45];
            v39[4] = v42;
            v39[5] = v43;
          }
          v38 += 16;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        a3 = v52;
      }
      else
      {
        v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      v46 = v37[2];
      if (v46)
      {
        swift_bridgeObjectRetain();
        v47 = v37 + 5;
        do
        {
          v48 = *v47;
          v49 = swift_unknownObjectRetain();
          collectGeomPropDefs(_:into:)(v49, v48, a3);
          swift_unknownObjectRelease();
          v47 += 2;
          --v46;
        }
        while (v46);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  v50 = v7;
  v51 = ObjectType;
  v10 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    v11 = *v10;
    swift_unknownObjectRetain();
    v12 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (v13)
      break;
    swift_unknownObjectRelease();
LABEL_5:
    v10 += 2;
    if (!--v9)
    {
      swift_bridgeObjectRelease_n();
      ObjectType = v51;
      v7 = v50;
      goto LABEL_21;
    }
  }
  v14 = v12;
  v15 = v13;
  createGeomPropDef(for:)(v11, (uint64_t)v54);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56 = *(_QWORD **)(a3 + 8);
  v17 = v56;
  *(_QWORD *)(a3 + 8) = 0x8000000000000000;
  v53 = v14;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
  v20 = v17[2];
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (!__OFADD__(v20, v21))
  {
    v23 = v18;
    if (v17[3] < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v15);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_48;
      v19 = v24;
      v26 = v56;
      if ((v23 & 1) == 0)
        goto LABEL_16;
LABEL_14:
      outlined assign with take of GeomPropDef((uint64_t)v54, v26[7] + (v19 << 6));
LABEL_18:
      a3 = v52;
      *(_QWORD *)(v52 + 8) = v26;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v26 = v56;
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v26 = v56;
      if ((v23 & 1) != 0)
        goto LABEL_14;
    }
LABEL_16:
    v26[(v19 >> 6) + 8] |= 1 << v19;
    v27 = (uint64_t *)(v26[6] + 16 * v19);
    *v27 = v53;
    v27[1] = v15;
    v28 = (_OWORD *)(v26[7] + (v19 << 6));
    v29 = v54[0];
    v30 = v54[1];
    v31 = v55[0];
    *(_OWORD *)((char *)v28 + 41) = *(_OWORD *)((char *)v55 + 9);
    v28[1] = v30;
    v28[2] = v31;
    *v28 = v29;
    v32 = v26[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_47;
    v26[2] = v34;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t collectNodeDefs(_:into:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58[18];
  _OWORD v59[9];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  ObjectType = swift_getObjectType();
  v7 = *(_QWORD *)(a2 + 8);
  result = (uint64_t)XMLNode.elements(forXPath:)(0x656465646F6E2F2ELL, 0xE900000000000066, ObjectType, v7);
  if (v3)
    return result;
  v9 = *(_QWORD *)(result + 16);
  v56 = a3;
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7);
    if (result)
    {
      v39 = result;
      v40 = *(_QWORD *)(result + 16);
      if (v40)
      {
        swift_bridgeObjectRetain();
        v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v42 = 32;
        do
        {
          v44 = *(_QWORD *)(v39 + v42);
          swift_getObjectType();
          v45 = swift_conformsToProtocol2();
          if (v45)
            v46 = v44;
          else
            v46 = 0;
          if (v45)
            v47 = v45;
          else
            v47 = 0;
          if (v46)
          {
            swift_unknownObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, v41);
            v49 = v41[2];
            v48 = v41[3];
            if (v49 >= v48 >> 1)
              v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1, v41);
            v41[2] = v49 + 1;
            v43 = &v41[2 * v49];
            v43[4] = v46;
            v43[5] = v47;
          }
          v42 += 16;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
        a3 = v56;
      }
      else
      {
        v41 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      v50 = v41[2];
      if (v50)
      {
        swift_bridgeObjectRetain();
        v51 = v41 + 5;
        do
        {
          v52 = *v51;
          v53 = swift_unknownObjectRetain();
          collectNodeDefs(_:into:)(v53, v52, a3);
          swift_unknownObjectRelease();
          v51 += 2;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  v54 = v7;
  v55 = ObjectType;
  v10 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    v11 = *v10;
    v12 = swift_unknownObjectRetain();
    createNodeDef(for:)(v12, v11, (uint64_t)v58);
    outlined init with take of NodeDef?((uint64_t)v58, (uint64_t)v59);
    if (getEnumTag for IOAttachment((uint64_t)v59) == 1)
      goto LABEL_5;
    v66 = v59[6];
    v67 = v59[7];
    v68 = v59[8];
    v62 = v59[2];
    v63 = v59[3];
    v64 = v59[4];
    v65 = v59[5];
    v60 = v59[0];
    v61 = v59[1];
    v13 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (v14)
      break;
    outlined release of NodeDef?(v58);
LABEL_5:
    swift_unknownObjectRelease();
LABEL_6:
    v10 += 2;
    if (!--v9)
    {
      swift_bridgeObjectRelease_n();
      v7 = v54;
      ObjectType = v55;
      goto LABEL_23;
    }
  }
  v15 = v13;
  v16 = v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *a3;
  v57 = (_QWORD *)*a3;
  *a3 = 0x8000000000000000;
  v69 = v15;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    v24 = v19;
    if (*(_QWORD *)(v18 + 24) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v27 = v57;
        if ((v19 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v27 = v57;
        if ((v24 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v16);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_49;
      v20 = v25;
      v27 = v57;
      if ((v24 & 1) == 0)
      {
LABEL_18:
        v27[(v20 >> 6) + 8] |= 1 << v20;
        v28 = (_QWORD *)(v27[6] + 16 * v20);
        *v28 = v69;
        v28[1] = v16;
        v29 = (_OWORD *)(v27[7] + 144 * v20);
        *v29 = v60;
        v30 = v61;
        v31 = v62;
        v32 = v64;
        v29[3] = v63;
        v29[4] = v32;
        v29[1] = v30;
        v29[2] = v31;
        v33 = v65;
        v34 = v66;
        v35 = v68;
        v29[7] = v67;
        v29[8] = v35;
        v29[5] = v33;
        v29[6] = v34;
        v36 = v27[2];
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_48;
        v27[2] = v38;
        swift_bridgeObjectRetain();
        goto LABEL_20;
      }
    }
    outlined assign with take of NodeDef((uint64_t)&v60, v27[7] + 144 * v20);
LABEL_20:
    a3 = v56;
    *v56 = v27;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_QWORD *collectImplementations(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t j;
  __int128 v15;

  ObjectType = swift_getObjectType();
  v7 = *(_QWORD *)(a2 + 8);
  result = XMLNode.elements(forXPath:)(0xD000000000000015, 0x8000000245FC8920, ObjectType, v7);
  if (!v3)
  {
    v9 = result;
    v10 = result[2];
    if (v10)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v10; ++i)
      {
        v15 = *(_OWORD *)&v9[2 * i + 4];
        swift_unknownObjectRetain();
        closure #1 in collectImplementations(_:into:)((uint64_t)&v15, a3);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v12 = XMLNode.elements(forXPath:)(0xD000000000000010, 0x8000000245FC8940, ObjectType, v7);
    v13 = v12[2];
    if (v13)
    {
      swift_bridgeObjectRetain();
      for (j = 0; j != v13; ++j)
      {
        v15 = *(_OWORD *)&v12[2 * j + 4];
        swift_unknownObjectRetain();
        closure #2 in collectImplementations(_:into:)((uint64_t *)&v15, a3);
        swift_unknownObjectRelease();
      }
      return (_QWORD *)swift_bridgeObjectRelease_n();
    }
    else
    {
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

void closure #3 in collectGeomPropDefs(_:into:)(uint64_t *a1, uint64_t a2)
{
  void *v2;

  collectGeomPropDefs(_:into:)(*a1, a1[1], a2);
  if (v2)

}

uint64_t closure #1 in collectImplementations(_:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _OWORD v86[9];
  _BYTE v87[25];
  uint64_t v88;

  v3 = v2;
  v80 = a2;
  v5 = type metadata accessor for NodeDef.Implementation(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (_OWORD *)((char *)&v69 - v10);
  v88 = type metadata accessor for CharacterSet();
  v81 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD **)a1;
  v14 = *(_QWORD *)(a1 + 8);
  result = XMLNode.subscript.getter(0x66656465646F6ELL, 0xE700000000000000);
  v79 = v17;
  if (!v17)
    return result;
  v76 = v14;
  v74 = v5;
  v75 = result;
  v77 = v15;
  v18 = XMLNode.subscript.getter(0x746567726174, 0xE600000000000000);
  v78 = MEMORY[0x24BEE4AF8];
  if (!v19)
    goto LABEL_45;
  v70 = v9;
  v71 = v6;
  v72 = v11;
  v73 = v2;
  v84 = v18;
  v85 = v19;
  v82 = 44;
  v83 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v20 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v82 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v69 = v20;
    v22 = (uint64_t *)(v20 + 40);
    do
    {
      v23 = *v22;
      v84 = *(v22 - 1);
      v85 = v23;
      swift_bridgeObjectRetain();
      static CharacterSet.whitespacesAndNewlines.getter();
      v24 = StringProtocol.trimmingCharacters(in:)();
      v26 = v25;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v13, v88);
      swift_bridgeObjectRelease();
      v27 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v82;
      }
      v29 = *(_QWORD *)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v27 = v82;
      }
      v22 += 2;
      *(_QWORD *)(v27 + 16) = v29 + 1;
      v30 = v27 + 16 * v29;
      *(_QWORD *)(v30 + 32) = v24;
      *(_QWORD *)(v30 + 40) = v26;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v27 + 16);
    if (v31)
      goto LABEL_11;
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  v27 = MEMORY[0x24BEE4AF8];
  v31 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (!v31)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    v78 = MEMORY[0x24BEE4AF8];
LABEL_44:
    v3 = v73;
    v11 = v72;
    v6 = v71;
    v9 = v70;
LABEL_45:
    v45 = v80;
    v46 = *(_QWORD **)v80;
    v47 = *(_QWORD *)(v80 + 8);
    v48 = *(_QWORD *)(v80 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    createGraph(_:nodeDefStore:)(v77, v76, v46, v47, v48, v86);
    v35 = v79;
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v49 = *(_OWORD *)v87;
    v11[8] = v86[8];
    v11[9] = v49;
    *(_OWORD *)((char *)v11 + 153) = *(_OWORD *)&v87[9];
    v50 = v86[5];
    v11[4] = v86[4];
    v11[5] = v50;
    v51 = v86[7];
    v11[6] = v86[6];
    v11[7] = v51;
    v52 = v86[1];
    *v11 = v86[0];
    v11[1] = v52;
    v53 = v86[3];
    v11[2] = v86[2];
    v11[3] = v53;
    type metadata accessor for NodeDef.Implementation.Kind(0);
    swift_storeEnumTagMultiPayload();
    outlined retain of Graph((uint64_t)v86);
    v36 = specialized Set.init<A>(_:)(v78);
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v11 + *(int *)(v74 + 20)) = v36;
    outlined init with copy of NodeDef.Implementation((uint64_t)v11, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84 = *(_QWORD *)(v45 + 16);
    v55 = v84;
    *(_QWORD *)(v45 + 16) = 0x8000000000000000;
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v35);
    v57 = *(_QWORD *)(v55 + 16);
    v58 = (v56 & 1) == 0;
    v59 = v57 + v58;
    if (__OFADD__(v57, v58))
      goto LABEL_61;
    v60 = v56;
    if (*(_QWORD *)(v55 + 24) >= v59)
    {
      v63 = v80;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v63 = v80;
        v55 = v84;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
      v55 = v84;
      v61 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v35);
      if ((v60 & 1) != (v62 & 1))
      {
LABEL_64:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v39 = v61;
      v63 = v80;
    }
    *(_QWORD *)(v63 + 16) = v55;
    v64 = v63;
    swift_bridgeObjectRelease();
    v65 = *(_QWORD **)(v64 + 16);
    if ((v60 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      specialized thunk for @callee_guaranteed () -> (@owned [NodeDef.Implementation])(&v84);
      specialized _NativeDictionary._insert(at:key:value:)(v39, v75, v35, v84, v65);
    }
    swift_bridgeObjectRetain();
    v35 = v65[7];
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)(v35 + 8 * v39);
    v66 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v35 + 8 * v39) = v36;
    if ((v66 & 1) == 0)
      goto LABEL_62;
    goto LABEL_56;
  }
LABEL_11:
  v84 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  v9 = 0;
  v69 = v27;
  v88 = v27 + 32;
  v81 = v31;
  while (1)
  {
    v32 = v88 + 16 * v9;
    v11 = *(_OWORD **)v32;
    v33 = *(_QWORD *)(v32 + 8);
    v34 = one-time initialization token for allTargets;
    swift_bridgeObjectRetain();
    if (v34 != -1)
      swift_once();
    v35 = static MaterialXTarget.allTargets;
    if ((unint64_t)static MaterialXTarget.allTargets >> 62)
    {
      swift_bridgeObjectRetain_n();
      v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v36)
        goto LABEL_63;
    }
    else
    {
      v36 = *(_QWORD *)((static MaterialXTarget.allTargets & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v36)
        goto LABEL_63;
    }
    v6 = v35 & 0xC000000000000001;
    if ((v35 & 0xC000000000000001) != 0)
    {
      v37 = MEMORY[0x24954B748](0, v35);
    }
    else
    {
      v37 = *(_QWORD *)(v35 + 32);
      swift_retain();
    }
    v38 = *(_OWORD **)(v37 + 16) == v11 && *(_QWORD *)(v37 + 24) == v33;
    if (!v38 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      break;
LABEL_12:
    ++v9;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v9 == v81)
    {
      v78 = v84;
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
  swift_release();
  if (v36 == 1)
  {
LABEL_63:
    swift_bridgeObjectRelease_n();
    __break(1u);
    goto LABEL_64;
  }
  v39 = 5;
  while (1)
  {
    v40 = v39 - 4;
    if (!v6)
      break;
    v41 = MEMORY[0x24954B748](v39 - 4, v35);
    v42 = __OFADD__(v40, 1);
    v43 = v39 - 3;
    if (v42)
      goto LABEL_60;
LABEL_31:
    v44 = *(_OWORD **)(v41 + 16) == v11 && *(_QWORD *)(v41 + 24) == v33;
    if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_12;
    swift_release();
    ++v39;
    if (v43 == v36)
      goto LABEL_63;
  }
  v41 = *(_QWORD *)(v35 + 8 * v39);
  swift_retain();
  v42 = __OFADD__(v40, 1);
  v43 = v39 - 3;
  if (!v42)
    goto LABEL_31;
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
  *(_QWORD *)(v35 + 8 * v39) = v36;
LABEL_56:
  v68 = *(_QWORD *)(v36 + 16);
  v67 = *(_QWORD *)(v36 + 24);
  if (v68 >= v67 >> 1)
  {
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1, v36);
    *(_QWORD *)(v35 + 8 * v39) = v36;
  }
  *(_QWORD *)(v36 + 16) = v68 + 1;
  outlined init with take of NodeDef.Implementation(v9, v36+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v68);
  outlined release of Graph((uint64_t)v86);
  swift_bridgeObjectRelease();
  return outlined destroy of NodeDef.Implementation((uint64_t)v11);
}

uint64_t createGraph(_:nodeDefStore:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t countAndFlagsBits;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  char v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t result;
  Swift::String v97;
  __int128 v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Swift::String v121;
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Swift::String *v131;
  uint64_t v132;
  char v133;
  char v134;
  unint64_t v135;
  uint64_t v136;
  _BOOL8 v137;
  uint64_t v138;
  char v139;
  unint64_t v140;
  char v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t i;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  _OWORD *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _OWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  __int128 v232;
  unint64_t v233;
  _QWORD *v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  _OWORD v244[3];
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  _BYTE v254[32];
  __int128 v255;
  __int128 v256;
  uint64_t v257[3];
  __int128 v258;
  char v259;
  unint64_t v260;

  countAndFlagsBits = v6;
  v222 = a4;
  v223 = a5;
  ObjectType = swift_getObjectType();
  v227 = *(_QWORD **)(a2 + 8);
  v13 = XMLNode.subscript.getter(0x6C6562616C6975, 0xE700000000000000);
  if (!v14)
  {
    v13 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (!v14)
    {
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi36_((uint64_t)&v235);
      outlined init with take of UserGraphError.ErrorType(&v235, (uint64_t)&v245);
      *(_QWORD *)&v256 = 0xD00000000000001BLL;
      *((_QWORD *)&v256 + 1) = 0x8000000245FCA930;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *v86 = v245;
      v87 = v249;
      v89 = v246;
      v88 = v247;
      v86[3] = v248;
      v86[4] = v87;
      v86[1] = v89;
      v86[2] = v88;
      v90 = v253;
      v92 = v250;
      v91 = v251;
      v86[7] = v252;
      v86[8] = v90;
      v86[5] = v92;
      v86[6] = v91;
      v93 = v256;
      v95 = *(_OWORD *)v254;
      v94 = *(_OWORD *)&v254[16];
      v86[11] = v255;
      v86[12] = v93;
      v86[9] = v95;
      v86[10] = v94;
      return swift_willThrow();
    }
  }
  v220 = a6;
  v221 = v13;
  v224 = v14;
  v260 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a2 + 16))(0x66656465646F6ELL, 0xE700000000000000, ObjectType, a2);
  v225 = a3;
  v226 = a1;
  v228 = ObjectType;
  if (v15)
  {
    v17 = v16;
    v18 = swift_getObjectType();
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v18, v17);
    v21 = v20;
    swift_unknownObjectRelease();
    if (v21)
    {
      if (a3[2])
      {
        swift_bridgeObjectRetain();
        v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19, (uint64_t)v21);
        if ((v23 & 1) != 0)
        {
          v24 = (__int128 *)(a3[7] + 144 * v22);
          v245 = *v24;
          v25 = v24[4];
          v27 = v24[1];
          v26 = v24[2];
          v248 = v24[3];
          v249 = v25;
          v246 = v27;
          v247 = v26;
          v28 = v24[8];
          v30 = v24[5];
          v29 = v24[6];
          v252 = v24[7];
          v253 = v28;
          v250 = v30;
          v251 = v29;
          outlined retain of NodeDef((uint64_t)&v245);
          swift_bridgeObjectRelease_n();
          v31 = v253;
          v32 = *(_QWORD *)(v253 + 16);
          if (v32)
          {
            v231 = v6;
            swift_bridgeObjectRetain_n();
            v219 = v31;
            v33 = (uint64_t *)(v31 + 40);
            while (1)
            {
              v230 = (_QWORD *)v32;
              v35 = *(v33 - 1);
              countAndFlagsBits = *v33;
              v36 = v33[1];
              v37 = v33[3];
              a3 = (_QWORD *)v33[5];
              swift_bridgeObjectRetain();
              swift_retain_n();
              swift_bridgeObjectRetain_n();
              v229 = v37;
              swift_bridgeObjectRetain();
              v38 = v260;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v235 = v38;
              v41 = specialized __RawDictionaryStorage.find<A>(_:)(v35, countAndFlagsBits);
              v42 = *(_QWORD *)(v38 + 16);
              v43 = (v40 & 1) == 0;
              v44 = v42 + v43;
              if (__OFADD__(v42, v43))
                break;
              v45 = v40;
              if (*(_QWORD *)(v38 + 24) >= v44)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  specialized _NativeDictionary.copy()();
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
                v46 = specialized __RawDictionaryStorage.find<A>(_:)(v35, countAndFlagsBits);
                if ((v45 & 1) != (v47 & 1))
                  goto LABEL_160;
                v41 = v46;
              }
              v48 = (_QWORD *)v235;
              v260 = v235;
              if ((v45 & 1) != 0)
              {
                v34 = (uint64_t *)(*(_QWORD *)(v235 + 56) + 24 * v41);
                swift_release();
                swift_bridgeObjectRelease();
                *v34 = v35;
                v34[1] = countAndFlagsBits;
                v34[2] = v36;
              }
              else
              {
                *(_QWORD *)(v235 + 8 * (v41 >> 6) + 64) |= 1 << v41;
                v49 = (uint64_t *)(v48[6] + 16 * v41);
                *v49 = v35;
                v49[1] = countAndFlagsBits;
                v50 = (uint64_t *)(v48[7] + 24 * v41);
                *v50 = v35;
                v50[1] = countAndFlagsBits;
                v50[2] = v36;
                v51 = v48[2];
                v52 = __OFADD__(v51, 1);
                v53 = v51 + 1;
                if (v52)
                  goto LABEL_155;
                v48[2] = v53;
                swift_bridgeObjectRetain();
              }
              v33 += 8;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              v32 = (uint64_t)v230 - 1;
              if (v230 == (_QWORD *)1)
              {
                swift_bridgeObjectRelease();
                countAndFlagsBits = v231;
                a3 = v225;
                ObjectType = v228;
                goto LABEL_86;
              }
            }
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          swift_bridgeObjectRetain();
LABEL_86:
          outlined release of NodeDef((uint64_t)&v245);
LABEL_87:
          swift_bridgeObjectRelease();
          goto LABEL_88;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      _s11ShaderGraph04UserB5ErrorV0D4TypeOWOi40_((uint64_t)&v235);
      *(_QWORD *)&v245 = 0x20676E697373694DLL;
      *((_QWORD *)&v245 + 1) = 0xE800000000000000;
      v97._countAndFlagsBits = v19;
      v97._object = v21;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      v98 = v245;
      outlined init with take of UserGraphError.ErrorType(&v235, (uint64_t)&v245);
      v256 = v98;
      lazy protocol witness table accessor for type UserGraphError and conformance UserGraphError();
      swift_allocError();
      *v99 = v245;
      v100 = v249;
      v102 = v246;
      v101 = v247;
      v99[3] = v248;
      v99[4] = v100;
      v99[1] = v102;
      v99[2] = v101;
      v103 = v253;
      v105 = v250;
      v104 = v251;
      v99[7] = v252;
      v99[8] = v103;
      v99[5] = v105;
      v99[6] = v104;
      v106 = v256;
      v108 = *(_OWORD *)v254;
      v107 = *(_OWORD *)&v254[16];
      v99[11] = v255;
      v99[12] = v106;
      v99[9] = v108;
      v99[10] = v107;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
  }
  v54 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, ObjectType, (uint64_t)v227);
  if (v6)
    goto LABEL_89;
  v55 = v54[2];
  if (v55)
  {
    v219 = swift_bridgeObjectRetain();
    a3 = (_QWORD *)(v219 + 40);
    do
    {
      v56 = *a3;
      v57 = swift_getObjectType();
      swift_unknownObjectRetain();
      v58 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
      if (v59)
      {
        v60 = v58;
        v61 = v59;
        v229 = v55;
        swift_unknownObjectRetain();
        v62._countAndFlagsBits = 1701869940;
        v62._object = (void *)0xE400000000000000;
        v63 = XMLElement.getRequiredAttribute(_:)(v62);
        v231 = v64;
        if (v64)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return swift_unknownObjectRelease_n();
        }
        countAndFlagsBits = v63._countAndFlagsBits;
        v230 = (_QWORD *)v60;
        if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v56 + 16))(1836412517, 0xE400000000000000, v57, v56)&& (v66 = v65, v67 = swift_getObjectType(), v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 32))(v67, v66), v70 = v69, swift_unknownObjectRelease(), v70))
        {
          *(_QWORD *)&v245 = v68;
          *((_QWORD *)&v245 + 1) = v70;
          *(_QWORD *)&v235 = 44;
          *((_QWORD *)&v235 + 1) = 0xE100000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          v71 = StringProtocol.components<A>(separatedBy:)();
          swift_bridgeObjectRelease();
          type metadata accessor for MaterialXDataType();
          v72 = (Swift::String *)swift_allocObject();
        }
        else
        {
          type metadata accessor for MaterialXDataType();
          v72 = (Swift::String *)swift_allocObject();
          v71 = 0;
        }
        v72[2] = v63;
        v72[1]._object = (void *)v71;
        v72[1]._countAndFlagsBits = MEMORY[0x24BEE4AF8];
        swift_unknownObjectRelease();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v245 = v260;
        v74 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v61);
        v75 = *(_QWORD *)(v260 + 16);
        v76 = (v73 & 1) == 0;
        v77 = v75 + v76;
        if (__OFADD__(v75, v76))
          goto LABEL_154;
        countAndFlagsBits = v73;
        if (*(_QWORD *)(v260 + 24) >= v77)
        {
          v55 = v229;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
          isUniquelyReferenced_nonNull_native = (uint64_t)v230;
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
          isUniquelyReferenced_nonNull_native = (uint64_t)v230;
          v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v61);
          v55 = v229;
          if ((countAndFlagsBits & 1) != (v79 & 1))
          {
LABEL_160:
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v74 = v78;
        }
        v80 = (_QWORD *)v245;
        v260 = v245;
        if ((countAndFlagsBits & 1) != 0)
        {
          v81 = (uint64_t *)(*(_QWORD *)(v245 + 56) + 24 * v74);
          swift_release();
          swift_bridgeObjectRelease();
          *v81 = isUniquelyReferenced_nonNull_native;
          v81[1] = v61;
          v81[2] = (uint64_t)v72;
        }
        else
        {
          *(_QWORD *)(v245 + 8 * (v74 >> 6) + 64) |= 1 << v74;
          v82 = (uint64_t *)(v80[6] + 16 * v74);
          *v82 = isUniquelyReferenced_nonNull_native;
          v82[1] = v61;
          v83 = (uint64_t *)(v80[7] + 24 * v74);
          *v83 = isUniquelyReferenced_nonNull_native;
          v83[1] = v61;
          v83[2] = (uint64_t)v72;
          v84 = v80[2];
          v52 = __OFADD__(v84, 1);
          v85 = v84 + 1;
          if (v52)
            goto LABEL_157;
          v80[2] = v85;
          swift_bridgeObjectRetain();
        }
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        countAndFlagsBits = v231;
      }
      else
      {
        swift_unknownObjectRelease();
      }
      a3 += 2;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease_n();
    a3 = v225;
    ObjectType = v228;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v109 = ((uint64_t (*)(uint64_t))v227[3])(ObjectType);
  if (!v109)
    goto LABEL_88;
  v110 = *(_QWORD *)(v109 + 16);
  if (!v110)
    goto LABEL_87;
  v217 = v109 + 32;
  v214 = v109;
  swift_bridgeObjectRetain();
  v111 = 0;
  v215 = v110;
  do
  {
    v218 = v111;
    v112 = (uint64_t *)(v217 + 16 * v111);
    v114 = *v112;
    v113 = v112[1];
    v115 = swift_getObjectType();
    swift_unknownObjectRetain();
    v219 = v114;
    v116 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, v115, v113);
    if (countAndFlagsBits)
    {
      v231 = countAndFlagsBits;
      swift_bridgeObjectRelease();
LABEL_84:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v117 = v116[2];
    if (v117)
    {
      v231 = 0;
      v216 = swift_bridgeObjectRetain();
      a3 = (_QWORD *)(v216 + 40);
      while (1)
      {
        countAndFlagsBits = *(a3 - 1);
        v118 = *a3;
        v119 = swift_getObjectType();
        swift_unknownObjectRetain();
        v230 = (_QWORD *)XMLNode.subscript.getter(0x6361667265746E69, 0xED0000656D616E65);
        if (v120)
        {
          v229 = v120;
          swift_unknownObjectRetain();
          v121._countAndFlagsBits = 1701869940;
          v121._object = (void *)0xE400000000000000;
          v122 = XMLElement.getRequiredAttribute(_:)(v121);
          v231 = v123;
          if (v123)
          {
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            goto LABEL_84;
          }
          if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v118 + 16))(1836412517, 0xE400000000000000, v119, v118)&& (v125 = v124, v126 = swift_getObjectType(), v127 = (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 32))(v126, v125), v129 = v128, swift_unknownObjectRelease(), v129))
          {
            *(_QWORD *)&v245 = v127;
            *((_QWORD *)&v245 + 1) = v129;
            *(_QWORD *)&v235 = 44;
            *((_QWORD *)&v235 + 1) = 0xE100000000000000;
            lazy protocol witness table accessor for type String and conformance String();
            v130 = StringProtocol.components<A>(separatedBy:)();
            swift_bridgeObjectRelease();
            type metadata accessor for MaterialXDataType();
            v131 = (Swift::String *)swift_allocObject();
          }
          else
          {
            type metadata accessor for MaterialXDataType();
            v131 = (Swift::String *)swift_allocObject();
            v130 = 0;
          }
          v131[2] = v122;
          v131[1]._object = (void *)v130;
          v131[1]._countAndFlagsBits = MEMORY[0x24BEE4AF8];
          swift_unknownObjectRelease();
          v132 = v229;
          if (!*(_QWORD *)(v260 + 16))
            goto LABEL_69;
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v229);
          if ((v133 & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_69:
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v245 = v260;
            v135 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v229);
            v136 = *(_QWORD *)(v260 + 16);
            v137 = (v134 & 1) == 0;
            v138 = v136 + v137;
            if (__OFADD__(v136, v137))
              goto LABEL_156;
            v139 = v134;
            if (*(_QWORD *)(v260 + 24) >= v138)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                specialized _NativeDictionary.copy()();
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v138, isUniquelyReferenced_nonNull_native);
              v140 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v230, v229);
              if ((v139 & 1) != (v141 & 1))
                goto LABEL_160;
              v135 = v140;
            }
            v142 = (_QWORD *)v245;
            v260 = v245;
            if ((v139 & 1) != 0)
            {
              v143 = (_QWORD *)(*(_QWORD *)(v245 + 56) + 24 * v135);
              swift_release();
              swift_bridgeObjectRelease();
              *v143 = v230;
              v143[1] = v132;
              v143[2] = v131;
            }
            else
            {
              *(_QWORD *)(v245 + 8 * (v135 >> 6) + 64) |= 1 << v135;
              v144 = (_QWORD *)(v142[6] + 16 * v135);
              v145 = (uint64_t)v230;
              *v144 = v230;
              v144[1] = v132;
              v146 = (uint64_t *)(v142[7] + 24 * v135);
              *v146 = v145;
              v146[1] = v132;
              v146[2] = (uint64_t)v131;
              v147 = v142[2];
              v52 = __OFADD__(v147, 1);
              v148 = v147 + 1;
              if (v52)
                goto LABEL_158;
              v142[2] = v148;
              swift_bridgeObjectRetain();
            }
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_58;
          }
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_unknownObjectRelease();
        }
LABEL_58:
        ObjectType = v228;
        a3 += 2;
        if (!--v117)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          countAndFlagsBits = v231;
          a3 = v225;
          v110 = v215;
          goto LABEL_53;
        }
      }
    }
    swift_unknownObjectRelease();
LABEL_53:
    swift_bridgeObjectRelease();
    v111 = v218 + 1;
  }
  while (v218 + 1 != v110);
  swift_bridgeObjectRelease_n();
LABEL_88:
  v149 = ObjectType;
  isUniquelyReferenced_nonNull_native = (uint64_t)v227;
  v150 = XMLNode.elements(forXPath:)(0x74757074756F2F2ELL, 0xE800000000000000, v149, (uint64_t)v227);
  if (countAndFlagsBits)
  {
LABEL_89:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v151 = v150[2];
  v230 = v150;
  v231 = 0;
  v219 = v151;
  if (!v151)
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_105:
      v169 = type metadata accessor for Logger();
      __swift_project_value_buffer(v169, (uint64_t)logger);
      v168 = (unint64_t)v224;
      swift_bridgeObjectRetain_n();
      v170 = Logger.logObject.getter();
      v171 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v170, v171))
      {
        v172 = (uint8_t *)swift_slowAlloc();
        v173 = swift_slowAlloc();
        *(_QWORD *)&v245 = v173;
        *(_DWORD *)v172 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v235 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v221, v168, (uint64_t *)&v245);
        isUniquelyReferenced_nonNull_native = (uint64_t)v227;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_245E46000, v170, v171, "Graph implementation for %s has no outputs!", v172, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24954C33C](v173, -1, -1);
        MEMORY[0x24954C33C](v172, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v154 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v155 = (uint64_t)v230;
      goto LABEL_109;
    }
LABEL_159:
    swift_once();
    goto LABEL_105;
  }
  swift_bridgeObjectRetain();
  v152 = 32;
  v153 = v151;
  v154 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    swift_unknownObjectRetain();
    v156 = XMLNode.subscript.getter(1701667182, 0xE400000000000000);
    if (v157)
    {
      v158 = v156;
      v159 = v157;
      v160 = XMLNode.subscript.getter(1701869940, 0xE400000000000000);
      if (v161)
      {
        v162 = v160;
        v163 = v161;
        type metadata accessor for MaterialXDataType();
        v164 = (_QWORD *)swift_allocObject();
        v164[4] = v162;
        v164[5] = v163;
        v164[3] = 0;
        v164[2] = MEMORY[0x24BEE4AF8];
        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v154[2] + 1, 1, v154);
        a3 = v225;
        v166 = v154[2];
        v165 = v154[3];
        if (v166 >= v165 >> 1)
          v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v165 > 1), v166 + 1, 1, v154);
        v154[2] = v166 + 1;
        v167 = &v154[3 * v166];
        v167[4] = v158;
        v167[5] = v159;
        v167[6] = v164;
        isUniquelyReferenced_nonNull_native = (uint64_t)v227;
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v225;
        isUniquelyReferenced_nonNull_native = (uint64_t)v227;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
    v152 += 16;
    --v153;
    v155 = (uint64_t)v230;
  }
  while (v153);
  swift_bridgeObjectRelease();
  countAndFlagsBits = v231;
  v168 = (unint64_t)v224;
LABEL_109:
  v174 = swift_bridgeObjectRetain();
  v175 = specialized _copyCollectionToContiguousArray<A>(_:)(v174);
  swift_bridgeObjectRelease();
  specialized Graph.init(id:label:inputs:outputs:)(0, v221, v168, (unint64_t)v175, (unint64_t)v154, (uint64_t)&v245);
  v234 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v233 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v176 = (*(uint64_t (**)(uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 24))(v228, isUniquelyReferenced_nonNull_native);
  if (!v176)
  {
LABEL_133:
    v190 = v219;
    v191 = v234;
    v228 = v234[2];
    if (v228)
    {
      v224 = &v214;
      v192 = v234 + 4;
      v226 = v234;
      swift_bridgeObjectRetain_n();
      v193 = 0;
      v227 = v191 + 4;
      while (1)
      {
        v194 = &v192[8 * v193];
        v195 = v194[1];
        v196 = v194[3];
        v198 = v194[4];
        v199 = *((_BYTE *)v194 + 56);
        v257[0] = v194[2];
        v197 = v257[0];
        v257[1] = v196;
        v257[2] = v198;
        v258 = *(_OWORD *)(v194 + 5);
        v259 = v199;
        v200 = swift_getObjectType();
        swift_unknownObjectRetain();
        outlined copy of NodePersonality(v197);
        v201 = *(_QWORD *)(v195 + 8);
        v231 = v196;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v202 = XMLNode.elements(forXPath:)(0x7475706E692F2ELL, 0xE700000000000000, v200, v201);
        if (countAndFlagsBits)
          break;
        v203 = v202;
        v229 = v198;
        v204 = v202[2];
        if (v204)
        {
          swift_bridgeObjectRetain();
          for (i = 0; i != v204; ++i)
          {
            v235 = *(_OWORD *)&v203[2 * i + 4];
            swift_unknownObjectRetain();
            closure #1 in closure #7 in createGraph(_:nodeDefStore:)((uint64_t)&v235, v257, (uint64_t)&v245, (uint64_t *)&v233);
            swift_unknownObjectRelease();
          }
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          v155 = (uint64_t)v230;
        }
        else
        {
          swift_unknownObjectRelease();
        }
        ++v193;
        swift_bridgeObjectRelease();
        outlined consume of NodePersonality(v197);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192 = v227;
        if (v193 == v228)
        {
          swift_bridgeObjectRelease_n();
          a3 = v225;
          v190 = v219;
          goto LABEL_143;
        }
      }
      swift_unknownObjectRelease();
      outlined consume of NodePersonality(v197);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v243 = v253;
      v244[0] = *(_OWORD *)v254;
      *(_OWORD *)((char *)v244 + 9) = *(_OWORD *)&v254[9];
      v239 = v249;
      v240 = v250;
      v241 = v251;
      v242 = v252;
      v235 = v245;
      v236 = v246;
      v237 = v247;
      v238 = v248;
      outlined release of Graph((uint64_t)&v235);
      return swift_bridgeObjectRelease();
    }
    else
    {
LABEL_143:
      if (v190)
      {
        swift_bridgeObjectRetain();
        v206 = 0;
        do
        {
          v207 = v155 + 16 * v206++;
          v235 = *(_OWORD *)(v207 + 32);
          swift_unknownObjectRetain();
          specialized closure #8 in createGraph(_:nodeDefStore:)((void **)&v235, (uint64_t *)&v233, (uint64_t)&v245, (uint64_t)a3);
          swift_unknownObjectRelease();
        }
        while (v190 != v206);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v243 = v253;
      v244[0] = *(_OWORD *)v254;
      *(_OWORD *)((char *)v244 + 9) = *(_OWORD *)&v254[9];
      v239 = v249;
      v240 = v250;
      v241 = v251;
      v242 = v252;
      v235 = v245;
      v236 = v246;
      v237 = v247;
      v238 = v248;
      outlined retain of Graph((uint64_t)&v235);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of Graph((uint64_t)&v235);
      result = swift_bridgeObjectRelease();
      v208 = v244[0];
      v209 = v220;
      v220[8] = v243;
      v209[9] = v208;
      *(_OWORD *)((char *)v209 + 153) = *(_OWORD *)((char *)v244 + 9);
      v210 = v240;
      v209[4] = v239;
      v209[5] = v210;
      v211 = v242;
      v209[6] = v241;
      v209[7] = v211;
      v212 = v236;
      *v209 = v235;
      v209[1] = v212;
      v213 = v238;
      v209[2] = v237;
      v209[3] = v213;
    }
    return result;
  }
  v177 = v176;
  v178 = *(_QWORD *)(v176 + 16);
  if (v178)
  {
    swift_bridgeObjectRetain();
    v179 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v180 = 32;
    do
    {
      v182 = *(_QWORD *)(v177 + v180);
      swift_getObjectType();
      v183 = swift_conformsToProtocol2();
      if (v183)
        v184 = v182;
      else
        v184 = 0;
      if (v183)
        v185 = v183;
      else
        v185 = 0;
      if (v184)
      {
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v179[2] + 1, 1, v179);
        v187 = v179[2];
        v186 = v179[3];
        if (v187 >= v186 >> 1)
          v179 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v186 > 1), v187 + 1, 1, v179);
        v179[2] = v187 + 1;
        v181 = &v179[2 * v187];
        v181[4] = v184;
        v181[5] = v185;
      }
      v180 += 16;
      --v178;
    }
    while (v178);
    swift_bridgeObjectRelease();
    v155 = (uint64_t)v230;
    countAndFlagsBits = v231;
    a3 = v225;
  }
  else
  {
    v179 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v188 = v179[2];
  if (!v188)
  {
LABEL_132:
    swift_bridgeObjectRelease();
    goto LABEL_133;
  }
  swift_bridgeObjectRetain();
  v189 = 0;
  while (1)
  {
    v232 = *(_OWORD *)&v179[2 * v189 + 4];
    swift_unknownObjectRetain();
    closure #6 in createGraph(_:nodeDefStore:)((uint64_t *)&v232, (unint64_t)a3, v222, v223, (uint64_t)&v245, &v233, &v234);
    if (countAndFlagsBits)
      break;
    ++v189;
    swift_unknownObjectRelease();
    if (v188 == v189)
    {
      swift_bridgeObjectRelease();
      goto LABEL_132;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v243 = v253;
  v244[0] = *(_OWORD *)v254;
  *(_OWORD *)((char *)v244 + 9) = *(_OWORD *)&v254[9];
  v239 = v249;
  v240 = v250;
  v241 = v251;
  v242 = v252;
  v235 = v245;
  v236 = v246;
  v237 = v247;
  v238 = v248;
  outlined release of Graph((uint64_t)&v235);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in collectImplementations(_:into:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  _QWORD *v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  _QWORD *v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v114 = type metadata accessor for NodeDef.Implementation(0);
  v5 = *(_QWORD *)(v114 - 8);
  v6 = MEMORY[0x24BDAC7A8](v114);
  v106 = (uint64_t)v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v107 = (_QWORD *)((char *)v97 - v9);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v112 = (uint64_t)v97 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v113 = (_QWORD *)((char *)v97 - v13);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v109 = (uint64_t)v97 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v97 - v16;
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v116 = (char *)v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  result = XMLNode.subscript.getter(0x66656465646F6ELL, 0xE700000000000000);
  v117 = result;
  if (!v23)
    return result;
  v24 = v23;
  v108 = v2;
  v105 = (uint64_t *)v17;
  v110 = v19;
  v111 = v18;
  v103 = XMLNode.subscript.getter(1701603686, 0xE400000000000000);
  v115 = v25;
  v102 = XMLNode.subscript.getter(0x6F63656372756F73, 0xEA00000000006564);
  v27 = v26;
  v104 = v21;
  v28 = XMLNode.subscript.getter(0x746567726174, 0xE600000000000000);
  isUniquelyReferenced_nonNull_native = MEMORY[0x24BEE4AF8];
  if (!v29)
  {
    v45 = 0;
    goto LABEL_41;
  }
  v121 = v28;
  v122 = v29;
  v119 = 44;
  v120 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v31 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v31 + 16);
  if (!v32)
  {
    swift_bridgeObjectRelease();
LABEL_40:
    swift_bridgeObjectRetain();
    v45 = isUniquelyReferenced_nonNull_native;
LABEL_41:
    v46 = v115;
    v47 = specialized Set.init<A>(_:)(isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if (v46)
    {
      v123 = v45;
      v48 = v116;
      URL.init(fileURLWithPath:)();
      v49 = XMLNode.subscript.getter(0x6E6F6974636E7566, 0xE800000000000000);
      if (!v50)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v48, v111);
      }
      v51 = v49;
      v52 = v50;
      v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (functionName: String?, file: URL));
      v54 = v105;
      v55 = (char *)v105 + *(int *)(v53 + 48);
      *v105 = v51;
      v54[1] = v52;
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v55, v48, v111);
      type metadata accessor for NodeDef.Implementation.Kind(0);
      swift_storeEnumTagMultiPayload();
      *(uint64_t *)((char *)v54 + *(int *)(v114 + 20)) = v47;
      v56 = (uint64_t)v54;
      v43 = v109;
      outlined init with copy of NodeDef.Implementation(v56, v109);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v121 = *(_QWORD *)(a2 + 16);
      v36 = v121;
      *(_QWORD *)(a2 + 16) = 0x8000000000000000;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v24);
      v58 = *(_QWORD *)(v36 + 16);
      v59 = (v57 & 1) == 0;
      v60 = v58 + v59;
      if (__OFADD__(v58, v59))
        goto LABEL_85;
      v61 = v57;
      if (*(_QWORD *)(v36 + 24) >= v60)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v36 = v121;
        }
LABEL_55:
        *(_QWORD *)(a2 + 16) = v36;
        swift_bridgeObjectRelease();
        v75 = *(_QWORD **)(a2 + 16);
        swift_bridgeObjectRetain();
        if ((v61 & 1) == 0)
        {
          specialized _NativeDictionary._insert(at:key:value:)(v35, v117, v24, MEMORY[0x24BEE4AF8], v75);
          swift_bridgeObjectRetain();
        }
        isUniquelyReferenced_nonNull_native = v75[7];
        swift_bridgeObjectRelease();
        v36 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35);
        v76 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35) = v36;
        if ((v76 & 1) == 0)
          goto LABEL_86;
        goto LABEL_58;
      }
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, isUniquelyReferenced_nonNull_native);
      v36 = v121;
      v62 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v24);
      if ((v61 & 1) == (v63 & 1))
      {
        v35 = v62;
        goto LABEL_55;
      }
LABEL_92:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (!v27)
    {
      swift_bridgeObjectRelease();
      v79 = XMLNode.subscript.getter(0x6E6F6974636E7566, 0xE800000000000000);
      if (!v80)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v81 = v107;
      *v107 = v79;
      v81[1] = v80;
      type metadata accessor for NodeDef.Implementation.Kind(0);
      swift_storeEnumTagMultiPayload();
      *(uint64_t *)((char *)v81 + *(int *)(v114 + 20)) = v47;
      outlined init with copy of NodeDef.Implementation((uint64_t)v81, v106);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v121 = *(_QWORD *)(a2 + 16);
      v36 = v121;
      *(_QWORD *)(a2 + 16) = 0x8000000000000000;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v24);
      v83 = *(_QWORD *)(v36 + 16);
      v84 = (v82 & 1) == 0;
      v85 = v83 + v84;
      if (__OFADD__(v83, v84))
        goto LABEL_90;
      v86 = v82;
      if (*(_QWORD *)(v36 + 24) >= v85)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v36 = v121;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v85, isUniquelyReferenced_nonNull_native);
        v36 = v121;
        v87 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v24);
        if ((v86 & 1) != (v88 & 1))
          goto LABEL_92;
        v35 = v87;
      }
      *(_QWORD *)(a2 + 16) = v36;
      swift_bridgeObjectRelease();
      v93 = *(_QWORD **)(a2 + 16);
      swift_bridgeObjectRetain();
      if ((v86 & 1) == 0)
      {
        specialized _NativeDictionary._insert(at:key:value:)(v35, v117, v24, MEMORY[0x24BEE4AF8], v93);
        swift_bridgeObjectRetain();
      }
      isUniquelyReferenced_nonNull_native = v93[7];
      swift_bridgeObjectRelease();
      v36 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35);
      v94 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35) = v36;
      if ((v94 & 1) != 0)
        goto LABEL_81;
      goto LABEL_91;
    }
    v64 = v113;
    *v113 = v102;
    v64[1] = v27;
    type metadata accessor for NodeDef.Implementation.Kind(0);
    swift_storeEnumTagMultiPayload();
    *(uint64_t *)((char *)v64 + *(int *)(v114 + 20)) = v47;
    outlined init with copy of NodeDef.Implementation((uint64_t)v64, v112);
    swift_bridgeObjectRetain();
    v65 = swift_isUniquelyReferenced_nonNull_native();
    v121 = *(_QWORD *)(a2 + 16);
    v66 = v121;
    *(_QWORD *)(a2 + 16) = 0x8000000000000000;
    v68 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v24);
    v69 = *(_QWORD *)(v66 + 16);
    v70 = (v67 & 1) == 0;
    v71 = v69 + v70;
    if (__OFADD__(v69, v70))
    {
      __break(1u);
    }
    else
    {
      v72 = v67;
      if (*(_QWORD *)(v66 + 24) >= v71)
      {
        if ((v65 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v66 = v121;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v71, v65);
        v66 = v121;
        v73 = specialized __RawDictionaryStorage.find<A>(_:)(v117, v24);
        if ((v72 & 1) != (v74 & 1))
          goto LABEL_92;
        v68 = v73;
      }
      *(_QWORD *)(a2 + 16) = v66;
      swift_bridgeObjectRelease();
      v89 = *(_QWORD **)(a2 + 16);
      swift_bridgeObjectRetain();
      if ((v72 & 1) == 0)
      {
        specialized _NativeDictionary._insert(at:key:value:)(v68, v117, v24, MEMORY[0x24BEE4AF8], v89);
        swift_bridgeObjectRetain();
      }
      v65 = v89[7];
      swift_bridgeObjectRelease();
      v66 = *(_QWORD *)(v65 + 8 * v68);
      v90 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v65 + 8 * v68) = v66;
      if ((v90 & 1) != 0)
      {
LABEL_71:
        v92 = *(_QWORD *)(v66 + 16);
        v91 = *(_QWORD *)(v66 + 24);
        if (v92 >= v91 >> 1)
        {
          v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1, v66);
          *(_QWORD *)(v65 + 8 * v68) = v66;
        }
        *(_QWORD *)(v66 + 16) = v92 + 1;
        outlined init with take of NodeDef.Implementation(v112, v66+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v92);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined destroy of NodeDef.Implementation((uint64_t)v113);
      }
    }
    v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v66 + 16) + 1, 1, v66);
    *(_QWORD *)(v65 + 8 * v68) = v66;
    goto LABEL_71;
  }
  v98 = a2;
  v99 = v27;
  v100 = v24;
  v101 = v5;
  v121 = isUniquelyReferenced_nonNull_native;
  specialized ContiguousArray.reserveCapacity(_:)();
  v33 = 0;
  v97[1] = v31;
  v123 = v31 + 32;
  v118 = v32;
  while (1)
  {
    v34 = (unint64_t *)(v123 + 16 * v33);
    v35 = *v34;
    v36 = v34[1];
    v37 = one-time initialization token for allTargets;
    swift_bridgeObjectRetain();
    if (v37 != -1)
      swift_once();
    v38 = static MaterialXTarget.allTargets;
    if ((unint64_t)static MaterialXTarget.allTargets >> 62)
    {
      if (static MaterialXTarget.allTargets < 0)
        isUniquelyReferenced_nonNull_native = static MaterialXTarget.allTargets;
      else
        isUniquelyReferenced_nonNull_native = static MaterialXTarget.allTargets & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
      v39 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v39)
        goto LABEL_89;
    }
    else
    {
      v39 = *(_QWORD *)((static MaterialXTarget.allTargets & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v39)
        goto LABEL_89;
    }
    if ((v38 & 0xC000000000000001) != 0)
    {
      isUniquelyReferenced_nonNull_native = MEMORY[0x24954B748](0, v38);
    }
    else
    {
      isUniquelyReferenced_nonNull_native = *(_QWORD *)(v38 + 32);
      swift_retain();
    }
    v40 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) == v35
       && *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) == v36;
    if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      break;
LABEL_5:
    ++v33;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v33 == v118)
    {
      isUniquelyReferenced_nonNull_native = v121;
      swift_bridgeObjectRelease();
      v5 = v101;
      v24 = v100;
      v27 = v99;
      a2 = v98;
      goto LABEL_40;
    }
  }
  swift_release();
  if (v39 == 1)
  {
LABEL_89:
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35) = v36;
LABEL_81:
    v96 = *(_QWORD *)(v36 + 16);
    v95 = *(_QWORD *)(v36 + 24);
    if (v96 >= v95 >> 1)
    {
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1, v36);
      *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35) = v36;
    }
    *(_QWORD *)(v36 + 16) = v96 + 1;
    outlined init with take of NodeDef.Implementation(v106, v36+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v96);
    swift_bridgeObjectRelease();
    return outlined destroy of NodeDef.Implementation((uint64_t)v107);
  }
  v5 = 5;
  while (1)
  {
    v41 = v5 - 4;
    if ((v38 & 0xC000000000000001) == 0)
      break;
    isUniquelyReferenced_nonNull_native = MEMORY[0x24954B748](v5 - 4, v38);
    v42 = __OFADD__(v41, 1);
    v43 = v5 - 3;
    if (v42)
      goto LABEL_84;
LABEL_24:
    v44 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) == v35
       && *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24) == v36;
    if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_5;
    swift_release();
    ++v5;
    if (v43 == v39)
      goto LABEL_89;
  }
  isUniquelyReferenced_nonNull_native = *(_QWORD *)(v38 + 8 * v5);
  swift_retain();
  v42 = __OFADD__(v41, 1);
  v43 = v5 - 3;
  if (!v42)
    goto LABEL_24;
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35) = v36;
LABEL_58:
  v78 = *(_QWORD *)(v36 + 16);
  v77 = *(_QWORD *)(v36 + 24);
  if (v78 >= v77 >> 1)
  {
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v36);
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v35) = v36;
  }
  *(_QWORD *)(v36 + 16) = v78 + 1;
  outlined init with take of NodeDef.Implementation(v43, v36+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of NodeDef.Implementation((uint64_t)v105);
  return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v116, v111);
}

