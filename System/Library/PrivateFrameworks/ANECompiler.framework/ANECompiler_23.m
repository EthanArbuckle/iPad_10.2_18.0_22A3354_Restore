uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::CastOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(mlir::Operation *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  mlir::Operation *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::memref::detail::CastOpGenericAdaptorBase::CastOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::memref::CastOp::fold((uint64_t *)&v12);
  v9 = v8;
  if (v8 < 8
    || (mlir::Operation *)((char *)a1 - 16) == (mlir::Operation *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  unint64_t v288;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v288 = 83;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v273;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v288 = 81;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      v288 = 114;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[223];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v288 = 82;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      v288 = 85;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[346];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v288 = 86;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[340];
  v26 = &unk_25451B000;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = (_QWORD *)&unk_25451B000;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v288 = 91;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = (_QWORD *)&unk_25451B000;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[45];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[312];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v288 = 99;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[314];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v288 = 93;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[21];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      v288 = 98;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[55];
  v41 = &unk_25451B000;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = (_QWORD *)&unk_25451B000;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = (_QWORD *)&unk_25451B000;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v41[225] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::OpTrait::impl *v9;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v9 = a1, mlir::memref::CastOp::verifyInvariantsImpl((uint64_t **)&v9))
    && mlir::impl::verifyCastInterfaceOp(a1, v6))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.collapse_shape", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04B878;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::CollapseShapeOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::CollapseShapeOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::CollapseShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::CollapseShapeOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  unint64_t v235;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v222;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v235 = 81;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v235 = 110;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[17];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v235 = 82;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v235 = 89;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[340];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[312];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[314];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[21];
  v35 = &unk_25451B000;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = (_QWORD *)&unk_25451B000;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v235 = 89;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = (_QWORD *)&unk_25451B000;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v35[225] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::memref::CollapseShapeOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::memref::CollapseShapeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DeallocOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::DeallocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  mlir::Operation *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  mlir::memref::detail::DeallocOpGenericAdaptorBase::DeallocOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v112;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = (_QWORD *)&unk_254519000;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v120 = 83;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v120 = 82;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[19];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451B000;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = (_QWORD *)&unk_25451B000;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v120 = 91;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = (_QWORD *)&unk_25451B000;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[45];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v120 = 93;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v20[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::memref::DeallocOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.dim", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DimOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04BEB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(BOOL (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::DimOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DimOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::DimOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

BOOL mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::DimOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::DimOp::getSpeculatability((mlir::memref::DimOp *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getShapedValue;
  v2[1] = mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDimension;
  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451B000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451B000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[229], v2);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getShapedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

uint64_t mlir::detail::ShapedDimOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::getDimension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3) | 4;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::DimOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::DimOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::DimOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.dim";
  v16[1] = 10;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::memref::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::DimOp::fold((uint64_t *)&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 4 == (unsigned int *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  unint64_t v235;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v222;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v235 = 81;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v235 = 109;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[435];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v235 = 90;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[79];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[340];
  v23 = &unk_25451B000;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (_QWORD *)&unk_25451B000;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v235 = 91;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (_QWORD *)&unk_25451B000;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[45];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[312];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[21];
  v32 = &unk_25451B000;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = (_QWORD *)&unk_25451B000;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface::Trait<Empty>]";
      v235 = 90;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedDimOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = (_QWORD *)&unk_25451B000;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[231];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v235 = 90;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v35[27] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::DimOp::print((mlir::memref::DimOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::DimOp>,mlir::OpTrait::OneResult<mlir::memref::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::memref::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::DimOp>,mlir::OpTrait::OpInvariants<mlir::memref::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::DimOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::memref::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::DimOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::DimOp>,mlir::OpTrait::OneResult<mlir::memref::DimOp>,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::memref::DimOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::DimOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::DimOp>,mlir::OpTrait::OpInvariants<mlir::memref::DimOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::DimOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::DimOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::DimOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::DimOp>,mlir::ShapedDimOpInterface::Trait<mlir::memref::DimOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::DimOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::detail *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (v7 = a1, mlir::memref::DimOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::detail::verifyShapedDimOpInterface(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::memref::DimOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::MemoryEffectOpInterface::Trait,mlir::ShapedDimOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DmaStartOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaStartOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  mlir::memref::detail::DmaStartOpGenericAdaptorBase::DmaStartOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v81 = 83;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v75;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v81 = 86;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v81 = 88;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[73];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[423] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::memref::DmaStartOp::print((mlir::memref::DmaStartOp *)&v8, a3);
}

BOOL mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!ZinIrConstData_specialization<half>::prepare())
    return 0;
  v6 = a1;
  return mlir::memref::DmaStartOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::DmaStartOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DmaWaitOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DmaWaitOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  mlir::memref::detail::DmaWaitOpGenericAdaptorBase::DmaWaitOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v81 = 83;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v75;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v81 = 86;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v81 = 97;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[431];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[423] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::DmaWaitOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::memref::DmaWaitOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::DmaWaitOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::DmaWaitOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.expand_shape", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04B7B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::ExpandShapeOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::ExpandShapeOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ExpandShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExpandShapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::ExpandShapeOp::fold(&v13, (uint64_t)v14);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::memref::CollapseShapeOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::memref::ExpandShapeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::ExpandShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.extract_aligned_pointer_as_index", 39, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExtractAlignedPointerAsIndexOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04BDF0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ExtractAlignedPointerAsIndexOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ExtractAlignedPointerAsIndexOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractAlignedPointerAsIndexOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.extract_aligned_pointer_as_index";
  v16[1] = 39;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v198;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v210 = 109;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[435];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v210 = 82;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[340];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[21];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v210 = 90;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v32[27] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ExtractAlignedPointerAsIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::memref::ExtractAlignedPointerAsIndexOp::verifyInvariantsImpl((uint64_t **)&v7);
}

BOOL mlir::Op<mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.extract_strided_metadata", 31, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ExtractStridedMetadataOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04BD28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ExtractStridedMetadataOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ExtractStridedMetadataOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::inferReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::ExtractStridedMetadataOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::ExtractStridedMetadataOp>::refineReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.extract_strided_metadata";
  v16[1] = 31;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  mlir::memref::detail::ExtractStridedMetadataOpGenericAdaptorBase::ExtractStridedMetadataOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::ExtractStridedMetadataOp::fold((mlir::memref::ExtractStridedMetadataOp *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  unint64_t v235;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v222;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNResults<2>::Impl<Empty>]";
      v235 = 96;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[429];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v235 = 82;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[19];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v235 = 86;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[340];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[21];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v235 = 89;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[225];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      v235 = 90;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[27];
  v35 = &unk_25451B000;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = (_QWORD *)&unk_25451B000;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::InferTypeOpAdaptor<Empty>]";
      v235 = 90;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::InferTypeOpAdaptor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::InferTypeOpAdaptor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = (_QWORD *)&unk_25451B000;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v35[235] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ExtractAlignedPointerAsIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v4))
  {
    return 0;
  }
  v6 = a1;
  return mlir::memref::ExtractStridedMetadataOp::verifyInvariantsImpl((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::ExtractStridedMetadataOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::AtLeastNResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::OpTrait::InferTypeOpAdaptor>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.get_global", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::GetGlobalOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04B490;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::GetGlobalOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::GetGlobalOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::GetGlobalOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::GetGlobalOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::GetGlobalOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::GetGlobalOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::verifySymbolUses;
  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451B000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      v15 = 77;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451B000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[43], v2);
}

uint64_t mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::memref::GetGlobalOp>::verifySymbolUses(uint64_t a1, mlir::SymbolTable *a2, mlir::SymbolTableCollection *a3)
{
  mlir::SymbolTable *v4;

  v4 = a2;
  return mlir::memref::GetGlobalOp::verifySymbolUses(&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v198;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v210 = 110;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[17];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[419];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v210 = 84;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[421];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[21];
  v32 = &unk_25451B000;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = (_QWORD *)&unk_25451B000;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface::Trait<Empty>]";
      v210 = 91;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = (_QWORD *)&unk_25451B000;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v32[47] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::GetGlobalOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::memref::GetGlobalOp::verifyInvariantsImpl((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::GetGlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::SymbolUserOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::foldHook()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::GlobalOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::GlobalOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::GlobalOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::GlobalOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::GlobalOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::GlobalOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::GlobalOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  if (a3[3] != a2[3])
    return 0;
  if (a3[4] == a2[4])
    return a3[5] == a2[5];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::GlobalOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::GlobalOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::GlobalOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isDeclaration;
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_254519000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      v15 = 73;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[399], v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>::isDeclaration()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v112;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = (_QWORD *)&unk_254519000;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v120 = 83;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[419];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v120 = 84;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[421];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[310];
  v20 = &unk_254519000;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    v20 = (_QWORD *)&unk_254519000;
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      v120 = 87;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v20 = (_QWORD *)&unk_254519000;
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v20[425] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::GlobalOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
    return 0;
  v8 = a1;
  if (!mlir::memref::GlobalOp::verifyInvariantsImpl((uint64_t **)&v8)
    || !mlir::detail::verifySymbol(a1, v6))
  {
    return 0;
  }
  v8 = a1;
  return mlir::memref::GlobalOp::verify((uint64_t **)&v8) != 0;
}

uint64_t mlir::Op<mlir::memref::GlobalOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.memory_space_cast", 24, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemorySpaceCastOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04BA08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::MemorySpaceCastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::areCastCompatible;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      v15 = 71;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[344], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::MemorySpaceCastOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::MemorySpaceCastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::MemorySpaceCastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::MemorySpaceCastOp>(mlir::Operation *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  mlir::Operation *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  mlir::memref::detail::MemorySpaceCastOpGenericAdaptorBase::MemorySpaceCastOpGenericAdaptorBase((uint64_t)v13, a1);
  v14 = a2;
  v15 = a3;
  v8 = mlir::memref::MemorySpaceCastOp::fold((uint64_t)&v12);
  v9 = v8;
  if (v8 < 8
    || (mlir::Operation *)((char *)a1 - 16) == (mlir::Operation *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4))
      return v9 > 7;
  }
  else
  {
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  const char *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  const char *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  const char *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  const char *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  const char *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  const char *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  const char *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  const char *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  const char *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  const char *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  const char *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  const char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  unint64_t v316;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v300 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v61 = v60;
    a1 = v300;
    if (v61)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v316 = 83;
      v62 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v62)
        v63 = v62;
      else
        v63 = v316;
      v64 = &v315[v63];
      v65 = v316 - v63;
      if (v316 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v316 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v300;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v286 = v3;
    v301 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v70 = v69;
    v3 = v286;
    a1 = v301;
    if (v70)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v316 = 81;
      v71 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v71)
        v72 = v71;
      else
        v72 = v316;
      v73 = &v315[v72];
      v74 = v316 - v72;
      if (v316 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v316 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v286;
      a1 = v301;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v287 = v3;
    v302 = a1;
    v273 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v273;
    v3 = v287;
    v79 = v78;
    a1 = v302;
    if (v79)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      v316 = 114;
      v80 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v80)
        v81 = v80;
      else
        v81 = v316;
      v82 = &v315[v81];
      v83 = v316 - v81;
      if (v316 - v81 >= 0x12)
        v84 = 18;
      else
        v84 = v316 - v81;
      v85 = v83 - v84;
      if (v85 >= v85 - 1)
        v86 = v85 - 1;
      else
        v86 = v85;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v273;
      v3 = v287;
      a1 = v302;
    }
  }
  v9 = v8[223];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v288 = v3;
    v303 = a1;
    v261 = v9;
    v274 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v261;
    v6 = v274;
    v88 = v87;
    v3 = v288;
    a1 = v303;
    if (v88)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v316 = 86;
      v89 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v89)
        v90 = v89;
      else
        v90 = v316;
      v91 = &v315[v90];
      v92 = v316 - v90;
      if (v316 - v90 >= 0x12)
        v93 = 18;
      else
        v93 = v316 - v90;
      v94 = v92 - v93;
      if (v94 >= v94 - 1)
        v95 = v94 - 1;
      else
        v95 = v94;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v261;
      v6 = v274;
      v3 = v288;
      a1 = v303;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v289 = v3;
    v304 = a1;
    v262 = v9;
    v275 = v6;
    v250 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v250;
    v9 = v262;
    v6 = v275;
    v3 = v289;
    v97 = v96;
    a1 = v304;
    if (v97)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v316 = 82;
      v98 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v98)
        v99 = v98;
      else
        v99 = v316;
      v100 = &v315[v99];
      v101 = v316 - v99;
      if (v316 - v99 >= 0x12)
        v102 = 18;
      else
        v102 = v316 - v99;
      v103 = v101 - v102;
      if (v103 >= v103 - 1)
        v104 = v103 - 1;
      else
        v104 = v103;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v250;
      v9 = v262;
      v6 = v275;
      v3 = v289;
      a1 = v304;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v290 = v3;
    v305 = a1;
    v263 = v9;
    v276 = v6;
    v251 = v12;
    v240 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v240;
    v12 = v251;
    v9 = v263;
    v6 = v276;
    v3 = v290;
    v106 = v105;
    a1 = v305;
    if (v106)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v316 = 84;
      v107 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v107)
        v108 = v107;
      else
        v108 = v316;
      v109 = &v315[v108];
      v110 = v316 - v108;
      if (v316 - v108 >= 0x12)
        v111 = 18;
      else
        v111 = v316 - v108;
      v112 = v110 - v111;
      if (v112 >= v112 - 1)
        v113 = v112 - 1;
      else
        v113 = v112;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v240;
      v12 = v251;
      v9 = v263;
      v6 = v276;
      v3 = v290;
      a1 = v305;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v291 = v3;
    v306 = a1;
    v264 = v9;
    v277 = v6;
    v252 = v12;
    v231 = v18;
    v241 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v231;
    v15 = v241;
    v12 = v252;
    v9 = v264;
    v6 = v277;
    v3 = v291;
    v115 = v114;
    a1 = v306;
    if (v115)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      v316 = 85;
      v116 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v116)
        v117 = v116;
      else
        v117 = v316;
      v118 = &v315[v117];
      v119 = v316 - v117;
      if (v316 - v117 >= 0x12)
        v120 = 18;
      else
        v120 = v316 - v117;
      v121 = v119 - v120;
      if (v121 >= v121 - 1)
        v122 = v121 - 1;
      else
        v122 = v121;
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v231;
      v15 = v241;
      v12 = v252;
      v9 = v264;
      v6 = v277;
      v3 = v291;
      a1 = v306;
    }
  }
  v21 = v20[346];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v292 = v3;
    v307 = a1;
    v265 = v9;
    v278 = v6;
    v253 = v12;
    v232 = v18;
    v242 = v15;
    v223 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v223;
    v18 = v232;
    v15 = v242;
    v12 = v253;
    v9 = v265;
    v6 = v278;
    v3 = v292;
    v124 = v123;
    a1 = v307;
    if (v124)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v316 = 86;
      v125 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v125)
        v126 = v125;
      else
        v126 = v316;
      v127 = &v315[v126];
      v128 = v316 - v126;
      if (v316 - v126 >= 0x12)
        v129 = 18;
      else
        v129 = v316 - v126;
      v130 = v128 - v129;
      if (v130 >= v130 - 1)
        v131 = v130 - 1;
      else
        v131 = v130;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v223;
      v18 = v232;
      v15 = v242;
      v12 = v253;
      v9 = v265;
      v6 = v278;
      v3 = v292;
      a1 = v307;
    }
  }
  v24 = v23[340];
  v26 = &unk_25451B000;
  if ((v25 & 1) == 0)
  {
    v293 = v3;
    v308 = a1;
    v266 = v9;
    v279 = v6;
    v254 = v12;
    v233 = v18;
    v243 = v15;
    v216 = v24;
    v224 = v21;
    v26 = (_QWORD *)&unk_25451B000;
    v24 = v216;
    v21 = v224;
    v18 = v233;
    v15 = v243;
    v12 = v254;
    v9 = v266;
    v6 = v279;
    v3 = v293;
    v133 = v132;
    a1 = v308;
    if (v133)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v316 = 91;
      v134 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v134)
        v135 = v134;
      else
        v135 = v316;
      v136 = &v315[v135];
      v137 = v316 - v135;
      if (v316 - v135 >= 0x12)
        v138 = 18;
      else
        v138 = v316 - v135;
      v139 = v137 - v138;
      if (v139 >= v139 - 1)
        v140 = v139 - 1;
      else
        v140 = v139;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      v26 = (_QWORD *)&unk_25451B000;
      v24 = v216;
      v21 = v224;
      v18 = v233;
      v15 = v243;
      v12 = v254;
      v9 = v266;
      v6 = v279;
      v3 = v293;
      a1 = v308;
    }
  }
  v27 = v26[45];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v294 = v3;
    v309 = a1;
    v267 = v9;
    v280 = v6;
    v255 = v12;
    v234 = v18;
    v244 = v15;
    v217 = v24;
    v225 = v21;
    v210 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v210;
    v24 = v217;
    v21 = v225;
    v18 = v234;
    v15 = v244;
    v12 = v255;
    v9 = v267;
    v6 = v280;
    v3 = v294;
    v142 = v141;
    a1 = v309;
    if (v142)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v316 = 95;
      v143 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v143)
        v144 = v143;
      else
        v144 = v316;
      v145 = &v315[v144];
      v146 = v316 - v144;
      if (v316 - v144 >= 0x12)
        v147 = 18;
      else
        v147 = v316 - v144;
      v148 = v146 - v147;
      if (v148 >= v148 - 1)
        v149 = v148 - 1;
      else
        v149 = v148;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v210;
      v24 = v217;
      v21 = v225;
      v18 = v234;
      v15 = v244;
      v12 = v255;
      v9 = v267;
      v6 = v280;
      v3 = v294;
      a1 = v309;
    }
  }
  v30 = v29[312];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v295 = v3;
    v310 = a1;
    v268 = v9;
    v281 = v6;
    v256 = v12;
    v235 = v18;
    v245 = v15;
    v218 = v24;
    v226 = v21;
    v205 = v30;
    v211 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v205;
    v27 = v211;
    v24 = v218;
    v21 = v226;
    v18 = v235;
    v15 = v245;
    v12 = v256;
    v9 = v268;
    v6 = v281;
    v3 = v295;
    v151 = v150;
    a1 = v310;
    if (v151)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v316 = 99;
      v152 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v152)
        v153 = v152;
      else
        v153 = v316;
      v154 = &v315[v153];
      v155 = v316 - v153;
      if (v316 - v153 >= 0x12)
        v156 = 18;
      else
        v156 = v316 - v153;
      v157 = v155 - v156;
      if (v157 >= v157 - 1)
        v158 = v157 - 1;
      else
        v158 = v157;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v205;
      v27 = v211;
      v24 = v218;
      v21 = v226;
      v18 = v235;
      v15 = v245;
      v12 = v256;
      v9 = v268;
      v6 = v281;
      v3 = v295;
      a1 = v310;
    }
  }
  v33 = v32[314];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v296 = v3;
    v311 = a1;
    v269 = v9;
    v282 = v6;
    v257 = v12;
    v236 = v18;
    v246 = v15;
    v219 = v24;
    v227 = v21;
    v206 = v30;
    v212 = v27;
    v201 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v201;
    v30 = v206;
    v27 = v212;
    v24 = v219;
    v21 = v227;
    v18 = v236;
    v15 = v246;
    v12 = v257;
    v9 = v269;
    v6 = v282;
    v3 = v296;
    v160 = v159;
    a1 = v311;
    if (v160)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v316 = 93;
      v161 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v161)
        v162 = v161;
      else
        v162 = v316;
      v163 = &v315[v162];
      v164 = v316 - v162;
      if (v316 - v162 >= 0x12)
        v165 = 18;
      else
        v165 = v316 - v162;
      v166 = v164 - v165;
      if (v166 >= v166 - 1)
        v167 = v166 - 1;
      else
        v167 = v166;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v201;
      v30 = v206;
      v27 = v212;
      v24 = v219;
      v21 = v227;
      v18 = v236;
      v15 = v246;
      v12 = v257;
      v9 = v269;
      v6 = v282;
      v3 = v296;
      a1 = v311;
    }
  }
  v36 = v35[21];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v297 = v3;
    v312 = a1;
    v270 = v9;
    v283 = v6;
    v258 = v12;
    v237 = v18;
    v247 = v15;
    v220 = v24;
    v228 = v21;
    v207 = v30;
    v213 = v27;
    v198 = v36;
    v202 = v33;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v198;
    v33 = v202;
    v30 = v207;
    v27 = v213;
    v24 = v220;
    v21 = v228;
    v18 = v237;
    v15 = v247;
    v12 = v258;
    v9 = v270;
    v6 = v283;
    v3 = v297;
    v169 = v168;
    a1 = v312;
    if (v169)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultElementType<Empty>]";
      v316 = 104;
      v170 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v170)
        v171 = v170;
      else
        v171 = v316;
      v172 = &v315[v171];
      v173 = v316 - v171;
      if (v316 - v171 >= 0x12)
        v174 = 18;
      else
        v174 = v316 - v171;
      v175 = v173 - v174;
      if (v175 >= v175 - 1)
        v176 = v175 - 1;
      else
        v176 = v175;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v172[v174], v176);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v198;
      v33 = v202;
      v30 = v207;
      v27 = v213;
      v24 = v220;
      v21 = v228;
      v18 = v237;
      v15 = v247;
      v12 = v258;
      v9 = v270;
      v6 = v283;
      v3 = v297;
      a1 = v312;
    }
  }
  v39 = v38[157];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v298 = v3;
    v313 = a1;
    v271 = v9;
    v284 = v6;
    v259 = v12;
    v238 = v18;
    v248 = v15;
    v221 = v24;
    v229 = v21;
    v208 = v30;
    v214 = v27;
    v199 = v36;
    v203 = v33;
    v196 = v39;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v196;
    v36 = v199;
    v33 = v203;
    v30 = v208;
    v27 = v214;
    v24 = v221;
    v21 = v229;
    v18 = v238;
    v15 = v248;
    v12 = v259;
    v9 = v271;
    v6 = v284;
    v3 = v298;
    v178 = v177;
    a1 = v313;
    if (v178)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      v316 = 98;
      v179 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v179)
        v180 = v179;
      else
        v180 = v316;
      v181 = &v315[v180];
      v182 = v316 - v180;
      if (v316 - v180 >= 0x12)
        v183 = 18;
      else
        v183 = v316 - v180;
      v184 = v182 - v183;
      if (v184 >= v184 - 1)
        v185 = v184 - 1;
      else
        v185 = v184;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v181[v183], v185);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v196;
      v36 = v199;
      v33 = v203;
      v30 = v208;
      v27 = v214;
      v24 = v221;
      v21 = v229;
      v18 = v238;
      v15 = v248;
      v12 = v259;
      v9 = v271;
      v6 = v284;
      v3 = v298;
      a1 = v313;
    }
  }
  v42 = v41[55];
  v44 = &unk_25451B000;
  if ((v43 & 1) == 0)
  {
    v299 = v3;
    v314 = a1;
    v272 = v9;
    v285 = v6;
    v260 = v12;
    v239 = v18;
    v249 = v15;
    v222 = v24;
    v230 = v21;
    v209 = v30;
    v215 = v27;
    v200 = v36;
    v204 = v33;
    v195 = v42;
    v197 = v39;
    v44 = (_QWORD *)&unk_25451B000;
    v42 = v195;
    v39 = v197;
    v36 = v200;
    v33 = v204;
    v30 = v209;
    v27 = v215;
    v24 = v222;
    v21 = v230;
    v18 = v239;
    v15 = v249;
    v12 = v260;
    v9 = v272;
    v6 = v285;
    v3 = v299;
    v187 = v186;
    a1 = v314;
    if (v187)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v316 = 89;
      v188 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v188)
        v189 = v188;
      else
        v189 = v316;
      v190 = &v315[v189];
      v191 = v316 - v189;
      if (v316 - v189 >= 0x12)
        v192 = 18;
      else
        v192 = v316 - v189;
      v193 = v191 - v192;
      if (v193 >= v193 - 1)
        v194 = v193 - 1;
      else
        v194 = v193;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v190[v192], v194);
      v44 = (_QWORD *)&unk_25451B000;
      v42 = v195;
      v39 = v197;
      v36 = v200;
      v33 = v204;
      v30 = v209;
      v27 = v215;
      v24 = v222;
      v21 = v230;
      v18 = v239;
      v15 = v249;
      v12 = v260;
      v9 = v272;
      v6 = v285;
      v3 = v299;
      a1 = v314;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v44[225] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneResult<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneOperand<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::MemorySpaceCastOp>,mlir::CastOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::MemorySpaceCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::MemorySpaceCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::MemorySpaceCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::MemorySpaceCastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneResult<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OneOperand<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::MemorySpaceCastOp>,mlir::CastOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::MemorySpaceCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::MemorySpaceCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultElementType<mlir::memref::MemorySpaceCastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::MemorySpaceCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::MemorySpaceCastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::Operation *v7;
  mlir::Operation *v8;
  mlir::OpTrait::impl *v10;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v10 = a1, mlir::memref::CastOp::verifyInvariantsImpl((uint64_t **)&v10))
    && mlir::impl::verifyCastInterfaceOp(a1, v6)
    && mlir::OpTrait::impl::verifySameOperandsAndResultElementType(a1, v7))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v8) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::MemorySpaceCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultElementType,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::memref::PrefetchOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::PrefetchOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::PrefetchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::PrefetchOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::PrefetchOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getOpPropertyByteSize()
{
  return 24;
}

void mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;

  if (a4)
  {
    v4 = *a4;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = v4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::PrefetchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::PrefetchOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] == a2[1])
    return a3[2] == a2[2];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::PrefetchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::PrefetchOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::PrefetchOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v8[64];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  mlir::memref::detail::PrefetchOpGenericAdaptorBase::PrefetchOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::DeallocOp::fold(&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v93 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v25 = v24;
    a1 = v93;
    if (v25)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v100 = 83;
      v26 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v26)
        v27 = v26;
      else
        v27 = v100;
      v28 = &v99[v27];
      v29 = v100 - v27;
      if (v100 - v27 >= 0x12)
        v30 = 18;
      else
        v30 = v100 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v93;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v88 = v3;
    v94 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v34 = v33;
    v3 = v88;
    a1 = v94;
    if (v34)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v100 = 83;
      v35 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v35)
        v36 = v35;
      else
        v36 = v100;
      v37 = &v99[v36];
      v38 = v100 - v36;
      if (v100 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v100 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v88;
      a1 = v94;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v89 = v3;
    v95 = a1;
    v84 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v84;
    v3 = v89;
    v43 = v42;
    a1 = v95;
    if (v43)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v100 = 86;
      v44 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v44)
        v45 = v44;
      else
        v45 = v100;
      v46 = &v99[v45];
      v47 = v100 - v45;
      if (v100 - v45 >= 0x12)
        v48 = 18;
      else
        v48 = v100 - v45;
      v49 = v47 - v48;
      if (v49 >= v49 - 1)
        v50 = v49 - 1;
      else
        v50 = v49;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v84;
      v3 = v89;
      a1 = v95;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v90 = v3;
    v96 = a1;
    v81 = v9;
    v85 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v81;
    v6 = v85;
    v52 = v51;
    v3 = v90;
    a1 = v96;
    if (v52)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v100 = 97;
      v53 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v53)
        v54 = v53;
      else
        v54 = v100;
      v55 = &v99[v54];
      v56 = v100 - v54;
      if (v100 - v54 >= 0x12)
        v57 = 18;
      else
        v57 = v100 - v54;
      v58 = v56 - v57;
      if (v58 >= v58 - 1)
        v59 = v58 - 1;
      else
        v59 = v58;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v81;
      v6 = v85;
      v3 = v90;
      a1 = v96;
    }
  }
  v12 = v11[423];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v91 = v3;
    v97 = a1;
    v82 = v9;
    v86 = v6;
    v79 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v79;
    v9 = v82;
    v6 = v86;
    v3 = v91;
    v61 = v60;
    a1 = v97;
    if (v61)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v100 = 84;
      v62 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v62)
        v63 = v62;
      else
        v63 = v100;
      v64 = &v99[v63];
      v65 = v100 - v63;
      if (v100 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v100 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v79;
      v9 = v82;
      v6 = v86;
      v3 = v91;
      a1 = v97;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v92 = v3;
    v98 = a1;
    v83 = v9;
    v87 = v6;
    v78 = v15;
    v80 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v78;
    v12 = v80;
    v9 = v83;
    v6 = v87;
    v70 = v69;
    v3 = v92;
    a1 = v98;
    if (v70)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v100 = 89;
      v71 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v71)
        v72 = v71;
      else
        v72 = v100;
      v73 = &v99[v72];
      v74 = v100 - v72;
      if (v100 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v100 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v78;
      v12 = v80;
      v9 = v83;
      v6 = v87;
      v3 = v92;
      a1 = v98;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v17[310] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::memref::PrefetchOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::memref::PrefetchOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::PrefetchOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::PrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.rank", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::RankOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04C1D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::RankOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::RankOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::refineReturnTypes;
  v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::isCompatibleReturnTypes;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v15 = 76;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[7], v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::RankOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::RankOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::RankOp>::refineReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  unint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v11 = a3;
  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  if (!mlir::memref::DimOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    v13 = 0;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    v13 = 1;
    v14 = v20;
    if (v20 == v22)
      return v13;
    goto LABEL_7;
  }
  v16[0] = "memref.rank";
  v16[1] = 11;
  v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>((uint64_t)a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  v14 = v20;
  if (v20 != v22)
LABEL_7:
    free(v14);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::Operation *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::memref::detail::RankOpGenericAdaptorBase::RankOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::RankOp::fold((uint64_t)&v13);
  v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::memref::RankOp::verifyInvariantsImpl((uint64_t **)&v7);
}

BOOL mlir::Op<mlir::memref::RankOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::ReallocOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ReallocOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::AssumeAlignmentOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AssumeAlignmentOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::AssumeAlignmentOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReallocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::AssumeAlignmentOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReallocOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::ReallocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  unint64_t v141;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v132;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v5 = (_QWORD *)&unk_25451A000;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v141 = 81;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v141 = 110;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[17];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v141 = 86;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v141 = 97;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[423];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v141 = 89;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v141 = 93;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v21 == a1 || v23[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ReallocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::memref::ReallocOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::ReallocOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::ReallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.reinterpret_cast", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ReinterpretCastOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04BAD0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::ReinterpretCastOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::ReinterpretCastOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::ReinterpretCastOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::ReinterpretCastOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::ReinterpretCastOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  return a3[3] == a2[3] && a3[4] == a2[4];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::ReinterpretCastOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::ReinterpretCastOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ReinterpretCastOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0xD0uLL, 0x80040B342C78EuLL);
  *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasZeroOffset;
  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451B000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451B000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[259], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = *(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return (v2 << 32) | 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  uint64_t v8;

  v8 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(_QWORD *)(*(_QWORD *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::isSameAs(uint64_t a1, uint64_t InterfaceFor, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v10;

  v10 = InterfaceFor;
  if (InterfaceFor)
    InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
  return mlir::detail::sameOffsetsSizesAndStrides(v10, InterfaceFor, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 1;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 0;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *StaticOffsets;
  unint64_t v5;
  unint64_t v6;
  uint64_t Offsets;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t Context;
  unint64_t v14[2];
  void *__src;
  unsigned int v16;
  int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  StaticOffsets = (uint64_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets(a1);
  v6 = v5;
  Offsets = mlir::memref::ReinterpretCastOp::getOffsets(a1);
  mlir::ValueRange::ValueRange(v14, Offsets, v8);
  mlir::getMixedValues(StaticOffsets, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = v16;
  v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      v17 = 0;
      v10 = v18;
    }
    v16 = 0;
  }
  if (v10 != v18)
    free(v10);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *StaticSizes;
  unint64_t v5;
  unint64_t v6;
  uint64_t Sizes;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t Context;
  unint64_t v14[2];
  void *__src;
  unsigned int v16;
  int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  StaticSizes = (uint64_t *)mlir::memref::ReinterpretCastOp::getStaticSizes(a1);
  v6 = v5;
  Sizes = mlir::memref::ReinterpretCastOp::getSizes(a1);
  mlir::ValueRange::ValueRange(v14, Sizes, v8);
  mlir::getMixedValues(StaticSizes, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = v16;
  v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      v17 = 0;
      v10 = v18;
    }
    v16 = 0;
  }
  if (v10 != v18)
    free(v10);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(mlir::memref::ReinterpretCastOp *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *StaticStrides;
  unint64_t v5;
  unint64_t v6;
  uint64_t Strides;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t Context;
  unint64_t v14[2];
  void *__src;
  unsigned int v16;
  int v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  StaticStrides = (uint64_t *)mlir::memref::ReinterpretCastOp::getStaticStrides(a1);
  v6 = v5;
  Strides = mlir::memref::ReinterpretCastOp::getStrides(a1);
  mlir::ValueRange::ValueRange(v14, Strides, v8);
  mlir::getMixedValues(StaticStrides, v6, v14[0], v14[1], (mlir::Builder *)&Context, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v9 = v16;
  v10 = __src;
  if (v16 && &__src != (void **)a2)
  {
    if (__src == v18)
    {
      v12 = v16;
      if (v16 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v16, 8), v12 = v16, v10 = __src, v16))
      {
        memcpy(*(void **)a2, v10, 8 * v12);
        v10 = __src;
      }
      *(_DWORD *)(a2 + 8) = v9;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v11 = v17;
      *(_DWORD *)(a2 + 8) = v9;
      *(_DWORD *)(a2 + 12) = v11;
      __src = v18;
      v17 = 0;
      v10 = v18;
    }
    v16 = 0;
  }
  if (v10 != v18)
    free(v10);
}

uint64_t mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
          v31 = 86;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::OffsetSizeAndStrideOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
          v31 = 86;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::OffsetSizeAndStrideOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      v23 = 86;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[259];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReinterpretCastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[80];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::ReinterpretCastOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::ReinterpretCastOp::fold((uint64_t)&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int8 v43;
  _QWORD *v44;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  const char *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  const char *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  const char *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  const char *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  const char *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  const char *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  const char *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  const char *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  const char *v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  unint64_t v171;
  const char *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  const char *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  const char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  unint64_t v316;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v300 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v61 = v60;
    a1 = v300;
    if (v61)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v316 = 83;
      v62 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v62)
        v63 = v62;
      else
        v63 = v316;
      v64 = &v315[v63];
      v65 = v316 - v63;
      if (v316 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v316 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v300;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v286 = v3;
    v301 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v70 = v69;
    v3 = v286;
    a1 = v301;
    if (v70)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v316 = 81;
      v71 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v71)
        v72 = v71;
      else
        v72 = v316;
      v73 = &v315[v72];
      v74 = v316 - v72;
      if (v316 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v316 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v286;
      a1 = v301;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v287 = v3;
    v302 = a1;
    v273 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v273;
    v3 = v287;
    v79 = v78;
    a1 = v302;
    if (v79)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v316 = 110;
      v80 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v80)
        v81 = v80;
      else
        v81 = v316;
      v82 = &v315[v81];
      v83 = v316 - v81;
      if (v316 - v81 >= 0x12)
        v84 = 18;
      else
        v84 = v316 - v81;
      v85 = v83 - v84;
      if (v85 >= v85 - 1)
        v86 = v85 - 1;
      else
        v86 = v85;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v273;
      v3 = v287;
      a1 = v302;
    }
  }
  v9 = v8[17];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v288 = v3;
    v303 = a1;
    v261 = v9;
    v274 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v261;
    v6 = v274;
    v88 = v87;
    v3 = v288;
    a1 = v303;
    if (v88)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v316 = 86;
      v89 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v89)
        v90 = v89;
      else
        v90 = v316;
      v91 = &v315[v90];
      v92 = v316 - v90;
      if (v316 - v90 >= 0x12)
        v93 = 18;
      else
        v93 = v316 - v90;
      v94 = v92 - v93;
      if (v94 >= v94 - 1)
        v95 = v94 - 1;
      else
        v95 = v94;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v261;
      v6 = v274;
      v3 = v288;
      a1 = v303;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v289 = v3;
    v304 = a1;
    v262 = v9;
    v275 = v6;
    v250 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v250;
    v9 = v262;
    v6 = v275;
    v3 = v289;
    v97 = v96;
    a1 = v304;
    if (v97)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v316 = 97;
      v98 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v98)
        v99 = v98;
      else
        v99 = v316;
      v100 = &v315[v99];
      v101 = v316 - v99;
      if (v316 - v99 >= 0x12)
        v102 = 18;
      else
        v102 = v316 - v99;
      v103 = v101 - v102;
      if (v103 >= v103 - 1)
        v104 = v103 - 1;
      else
        v104 = v103;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v250;
      v9 = v262;
      v6 = v275;
      v3 = v289;
      a1 = v304;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451B000;
  if ((v16 & 1) == 0)
  {
    v290 = v3;
    v305 = a1;
    v263 = v9;
    v276 = v6;
    v251 = v12;
    v240 = v15;
    v17 = (_QWORD *)&unk_25451B000;
    v15 = v240;
    v12 = v251;
    v9 = v263;
    v6 = v276;
    v3 = v290;
    v106 = v105;
    a1 = v305;
    if (v106)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v316 = 96;
      v107 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v107)
        v108 = v107;
      else
        v108 = v316;
      v109 = &v315[v108];
      v110 = v316 - v108;
      if (v316 - v108 >= 0x12)
        v111 = 18;
      else
        v111 = v316 - v108;
      v112 = v110 - v111;
      if (v112 >= v112 - 1)
        v113 = v112 - 1;
      else
        v113 = v112;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      v17 = (_QWORD *)&unk_25451B000;
      v15 = v240;
      v12 = v251;
      v9 = v263;
      v6 = v276;
      v3 = v290;
      a1 = v305;
    }
  }
  v18 = v17[37];
  v20 = &unk_254519000;
  if ((v19 & 1) == 0)
  {
    v291 = v3;
    v306 = a1;
    v264 = v9;
    v277 = v6;
    v252 = v12;
    v231 = v18;
    v241 = v15;
    v20 = (_QWORD *)&unk_254519000;
    v18 = v231;
    v15 = v241;
    v12 = v252;
    v9 = v264;
    v6 = v277;
    v3 = v291;
    v115 = v114;
    a1 = v306;
    if (v115)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v316 = 84;
      v116 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v116)
        v117 = v116;
      else
        v117 = v316;
      v118 = &v315[v117];
      v119 = v316 - v117;
      if (v316 - v117 >= 0x12)
        v120 = 18;
      else
        v120 = v316 - v117;
      v121 = v119 - v120;
      if (v121 >= v121 - 1)
        v122 = v121 - 1;
      else
        v122 = v121;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      v20 = (_QWORD *)&unk_254519000;
      v18 = v231;
      v15 = v241;
      v12 = v252;
      v9 = v264;
      v6 = v277;
      v3 = v291;
      a1 = v306;
    }
  }
  v21 = v20[423];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v292 = v3;
    v307 = a1;
    v265 = v9;
    v278 = v6;
    v253 = v12;
    v232 = v18;
    v242 = v15;
    v223 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v223;
    v18 = v232;
    v15 = v242;
    v12 = v253;
    v9 = v265;
    v6 = v278;
    v3 = v292;
    v124 = v123;
    a1 = v307;
    if (v124)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v316 = 89;
      v125 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v125)
        v126 = v125;
      else
        v126 = v316;
      v127 = &v315[v126];
      v128 = v316 - v126;
      if (v316 - v126 >= 0x12)
        v129 = 18;
      else
        v129 = v316 - v126;
      v130 = v128 - v129;
      if (v130 >= v130 - 1)
        v131 = v130 - 1;
      else
        v131 = v130;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v223;
      v18 = v232;
      v15 = v242;
      v12 = v253;
      v9 = v265;
      v6 = v278;
      v3 = v292;
      a1 = v307;
    }
  }
  v24 = v23[310];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v293 = v3;
    v308 = a1;
    v266 = v9;
    v279 = v6;
    v254 = v12;
    v233 = v18;
    v243 = v15;
    v216 = v24;
    v224 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v216;
    v21 = v224;
    v18 = v233;
    v15 = v243;
    v12 = v254;
    v9 = v266;
    v6 = v279;
    v3 = v293;
    v133 = v132;
    a1 = v308;
    if (v133)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v316 = 86;
      v134 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v134)
        v135 = v134;
      else
        v135 = v316;
      v136 = &v315[v135];
      v137 = v316 - v135;
      if (v316 - v135 >= 0x12)
        v138 = 18;
      else
        v138 = v316 - v135;
      v139 = v137 - v138;
      if (v139 >= v139 - 1)
        v140 = v139 - 1;
      else
        v140 = v139;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v216;
      v21 = v224;
      v18 = v233;
      v15 = v243;
      v12 = v254;
      v9 = v266;
      v6 = v279;
      v3 = v293;
      a1 = v308;
    }
  }
  v27 = v26[340];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v294 = v3;
    v309 = a1;
    v267 = v9;
    v280 = v6;
    v255 = v12;
    v234 = v18;
    v244 = v15;
    v217 = v24;
    v225 = v21;
    v210 = v27;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v210;
    v24 = v217;
    v21 = v225;
    v18 = v234;
    v15 = v244;
    v12 = v255;
    v9 = v267;
    v6 = v280;
    v3 = v294;
    v142 = v141;
    a1 = v309;
    if (v142)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v316 = 91;
      v143 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v143)
        v144 = v143;
      else
        v144 = v316;
      v145 = &v315[v144];
      v146 = v316 - v144;
      if (v316 - v144 >= 0x12)
        v147 = 18;
      else
        v147 = v316 - v144;
      v148 = v146 - v147;
      if (v148 >= v148 - 1)
        v149 = v148 - 1;
      else
        v149 = v148;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v210;
      v24 = v217;
      v21 = v225;
      v18 = v234;
      v15 = v244;
      v12 = v255;
      v9 = v267;
      v6 = v280;
      v3 = v294;
      a1 = v309;
    }
  }
  v30 = v29[45];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v295 = v3;
    v310 = a1;
    v268 = v9;
    v281 = v6;
    v256 = v12;
    v235 = v18;
    v245 = v15;
    v218 = v24;
    v226 = v21;
    v205 = v30;
    v211 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v205;
    v27 = v211;
    v24 = v218;
    v21 = v226;
    v18 = v235;
    v15 = v245;
    v12 = v256;
    v9 = v268;
    v6 = v281;
    v3 = v295;
    v151 = v150;
    a1 = v310;
    if (v151)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v316 = 95;
      v152 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v152)
        v153 = v152;
      else
        v153 = v316;
      v154 = &v315[v153];
      v155 = v316 - v153;
      if (v316 - v153 >= 0x12)
        v156 = 18;
      else
        v156 = v316 - v153;
      v157 = v155 - v156;
      if (v157 >= v157 - 1)
        v158 = v157 - 1;
      else
        v158 = v157;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v205;
      v27 = v211;
      v24 = v218;
      v21 = v226;
      v18 = v235;
      v15 = v245;
      v12 = v256;
      v9 = v268;
      v6 = v281;
      v3 = v295;
      a1 = v310;
    }
  }
  v33 = v32[312];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v296 = v3;
    v311 = a1;
    v269 = v9;
    v282 = v6;
    v257 = v12;
    v236 = v18;
    v246 = v15;
    v219 = v24;
    v227 = v21;
    v206 = v30;
    v212 = v27;
    v201 = v33;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v201;
    v30 = v206;
    v27 = v212;
    v24 = v219;
    v21 = v227;
    v18 = v236;
    v15 = v246;
    v12 = v257;
    v9 = v269;
    v6 = v282;
    v3 = v296;
    v160 = v159;
    a1 = v311;
    if (v160)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v316 = 99;
      v161 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v161)
        v162 = v161;
      else
        v162 = v316;
      v163 = &v315[v162];
      v164 = v316 - v162;
      if (v316 - v162 >= 0x12)
        v165 = 18;
      else
        v165 = v316 - v162;
      v166 = v164 - v165;
      if (v166 >= v166 - 1)
        v167 = v166 - 1;
      else
        v167 = v166;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v201;
      v30 = v206;
      v27 = v212;
      v24 = v219;
      v21 = v227;
      v18 = v236;
      v15 = v246;
      v12 = v257;
      v9 = v269;
      v6 = v282;
      v3 = v296;
      a1 = v311;
    }
  }
  v36 = v35[314];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v297 = v3;
    v312 = a1;
    v270 = v9;
    v283 = v6;
    v258 = v12;
    v237 = v18;
    v247 = v15;
    v220 = v24;
    v228 = v21;
    v207 = v30;
    v213 = v27;
    v198 = v36;
    v202 = v33;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v198;
    v33 = v202;
    v30 = v207;
    v27 = v213;
    v24 = v220;
    v21 = v228;
    v18 = v237;
    v15 = v247;
    v12 = v258;
    v9 = v270;
    v6 = v283;
    v3 = v297;
    v169 = v168;
    a1 = v312;
    if (v169)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v316 = 93;
      v170 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v170)
        v171 = v170;
      else
        v171 = v316;
      v172 = &v315[v171];
      v173 = v316 - v171;
      if (v316 - v171 >= 0x12)
        v174 = 18;
      else
        v174 = v316 - v171;
      v175 = v173 - v174;
      if (v175 >= v175 - 1)
        v176 = v175 - 1;
      else
        v176 = v175;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v172[v174], v176);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v198;
      v33 = v202;
      v30 = v207;
      v27 = v213;
      v24 = v220;
      v21 = v228;
      v18 = v237;
      v15 = v247;
      v12 = v258;
      v9 = v270;
      v6 = v283;
      v3 = v297;
      a1 = v312;
    }
  }
  v39 = v38[21];
  v41 = &unk_25451B000;
  if ((v40 & 1) == 0)
  {
    v298 = v3;
    v313 = a1;
    v271 = v9;
    v284 = v6;
    v259 = v12;
    v238 = v18;
    v248 = v15;
    v221 = v24;
    v229 = v21;
    v208 = v30;
    v214 = v27;
    v199 = v36;
    v203 = v33;
    v196 = v39;
    v41 = (_QWORD *)&unk_25451B000;
    v39 = v196;
    v36 = v199;
    v33 = v203;
    v30 = v208;
    v27 = v214;
    v24 = v221;
    v21 = v229;
    v18 = v238;
    v15 = v248;
    v12 = v259;
    v9 = v271;
    v6 = v284;
    v3 = v298;
    v178 = v177;
    a1 = v313;
    if (v178)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      v316 = 100;
      v179 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v179)
        v180 = v179;
      else
        v180 = v316;
      v181 = &v315[v180];
      v182 = v316 - v180;
      if (v316 - v180 >= 0x12)
        v183 = 18;
      else
        v183 = v316 - v180;
      v184 = v182 - v183;
      if (v184 >= v184 - 1)
        v185 = v184 - 1;
      else
        v185 = v184;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v181[v183], v185);
      v41 = (_QWORD *)&unk_25451B000;
      v39 = v196;
      v36 = v199;
      v33 = v203;
      v30 = v208;
      v27 = v214;
      v24 = v221;
      v21 = v229;
      v18 = v238;
      v15 = v248;
      v12 = v259;
      v9 = v271;
      v6 = v284;
      v3 = v298;
      a1 = v313;
    }
  }
  v42 = v41[261];
  v44 = &unk_25451B000;
  if ((v43 & 1) == 0)
  {
    v299 = v3;
    v314 = a1;
    v272 = v9;
    v285 = v6;
    v260 = v12;
    v239 = v18;
    v249 = v15;
    v222 = v24;
    v230 = v21;
    v209 = v30;
    v215 = v27;
    v200 = v36;
    v204 = v33;
    v195 = v42;
    v197 = v39;
    v44 = (_QWORD *)&unk_25451B000;
    v42 = v195;
    v39 = v197;
    v36 = v200;
    v33 = v204;
    v30 = v209;
    v27 = v215;
    v24 = v222;
    v21 = v230;
    v18 = v239;
    v15 = v249;
    v12 = v260;
    v9 = v272;
    v6 = v285;
    v3 = v299;
    v187 = v186;
    a1 = v314;
    if (v187)
    {
      v315 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v316 = 89;
      v188 = llvm::StringRef::find((uint64_t *)&v315, "DesiredTypeName = ", 0x12uLL, 0);
      if (v316 >= v188)
        v189 = v188;
      else
        v189 = v316;
      v190 = &v315[v189];
      v191 = v316 - v189;
      if (v316 - v189 >= 0x12)
        v192 = 18;
      else
        v192 = v316 - v189;
      v193 = v191 - v192;
      if (v193 >= v193 - 1)
        v194 = v193 - 1;
      else
        v194 = v193;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v190[v192], v194);
      v44 = (_QWORD *)&unk_25451B000;
      v42 = v195;
      v39 = v197;
      v36 = v200;
      v33 = v204;
      v30 = v209;
      v27 = v215;
      v24 = v222;
      v21 = v230;
      v18 = v239;
      v15 = v249;
      v12 = v260;
      v9 = v272;
      v6 = v285;
      v3 = v299;
      a1 = v314;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v42 == a1
      || v44[225] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ReinterpretCastOp::print((mlir::memref::ReinterpretCastOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneResult<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::ReinterpretCastOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::ReinterpretCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::ReinterpretCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::memref::ReinterpretCastOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneResult<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::OpInvariants<mlir::memref::ReinterpretCastOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::ReinterpretCastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::ReinterpretCastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::ReinterpretCastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands((mlir::OpTrait::impl *)a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (v6 = a1, mlir::memref::ReinterpretCastOp::verifyInvariantsImpl(&v6)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::op_definition_impl::verifyTrait<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(uint64_t *a1)
{
  uint64_t InterfaceFor;

  if (!a1)
    return mlir::detail::verifyOffsetSizeAndStrideOp(0, 0);
  InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a1);
  return mlir::detail::verifyOffsetSizeAndStrideOp(a1, InterfaceFor);
}

uint64_t mlir::Op<mlir::memref::ReinterpretCastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.reshape", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ReshapeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04C8E0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ReshapeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ReshapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ReshapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ReshapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v198;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      v210 = 114;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[223];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      v210 = 90;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[79];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[340];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[21];
  v32 = &unk_25451B000;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = (_QWORD *)&unk_25451B000;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v210 = 89;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = (_QWORD *)&unk_25451B000;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v32[225] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ReshapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::memref::ReshapeOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::ReshapeOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::ReshapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.store", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04C430;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::StoreOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::LoadOp::getInherentAttr(Context, v8, a3, a4);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::LoadOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::LoadOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::LoadOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::LoadOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::LoadOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  *v2 = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::loadsFrom;
  v2[1] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::storesTo;
  v2[2] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getStored;
  v2[3] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canUsesBeRemoved;
  v2[4] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::removeBlockingUses;
  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451B000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface]";
      v15 = 80;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451B000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[189], v2);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::loadsFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return Layer2TDMapper::SourceLayer::IsGraphInitialization((Layer2TDMapper::SourceLayer *)&v3);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::storesTo(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::StoreOp::storesTo((uint64_t)&v4, a3);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getStored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::StoreOp::getStored(&v5, a3, a4);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canUsesBeRemoved(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::StoreOp::canUsesBeRemoved((mlir::anec::Deconvolution *)&v5, a3, a4);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::removeBlockingUses()
{
  return ZinIrConstData_specialization<half>::prepare();
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canRewire;
  v2[1] = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::rewire;
  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451B000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451B000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[191], v2);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::canRewire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::StoreOp::canRewire((mlir::anec::Deconvolution *)&v5, a3, a4);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::rewire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;

  v6 = a2;
  return mlir::memref::StoreOp::rewire((mlir::memref::ViewOp *)&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::StoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v8[48];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  mlir::memref::detail::StoreOpGenericAdaptorBase::StoreOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::memref::StoreOp::fold(&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v186 = 97;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[431];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[310];
  v20 = &unk_25451B000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451B000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v186 = 91;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451B000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[45];
  v23 = &unk_25451B000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451B000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface::Trait<Empty>]";
      v186 = 94;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableMemOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451B000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[193];
  v26 = &unk_25451B000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451B000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface::Trait<Empty>]";
      v186 = 103;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAccessorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451B000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[195];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::StoreOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::memref::StoreOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::StoreOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::StoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.transpose", 16, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::TransposeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04B558;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::memref::TransposeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::TransposeOp::getInherentAttr(Context, v8, a3, a4);
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::TransposeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::TransposeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::TransposeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::TransposeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::TransposeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::TransposeOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::TransposeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::TransposeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[48];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::memref::detail::TransposeOpGenericAdaptorBase::TransposeOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::TransposeOp::fold(&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v198;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v210 = 110;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[17];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v210 = 82;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[340];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[312];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[314];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v32[21] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::memref::TransposeOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::memref::TransposeOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::memref::TransposeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::TransposeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.view", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04C2A0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::ViewOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::ViewOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::ViewOp::getAsmResultNames(&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::ViewOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ViewOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v198;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v210 = 110;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[17];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v210 = 97;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[431];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v210 = 86;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[340];
  v23 = &unk_25451B000;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = (_QWORD *)&unk_25451B000;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v210 = 89;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = (_QWORD *)&unk_25451B000;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[225];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v210 = 95;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[312];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v210 = 99;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[314];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v32[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::ViewOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::memref::ViewOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::memref::ViewOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::ViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.subview", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04C9A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::memref::SubViewOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::memref::SubViewOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::memref::SubViewOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::SubViewOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::memref::ReinterpretCastOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::ReinterpretCastOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  return a3[3] == a2[3] && a3[4] == a2[4];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::ReinterpretCastOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::memref::ReinterpretCastOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDefaultDialect;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[336], v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a2;
  return mlir::memref::SubViewOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getViewSource;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[409], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0xD0uLL, 0x80040B342C78EuLL);
  *v2 = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsetSizeAndStrideStartOperandIndex;
  v2[1] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getArrayAttrMaxRanks;
  v2[2] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsets;
  v2[3] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getSizes;
  v2[4] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStrides;
  v2[5] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffsets;
  v2[6] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSizes;
  v2[7] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStrides;
  v2[8] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedOffsets;
  v2[9] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedSizes;
  v2[10] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedStrides;
  v2[11] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicOffset;
  v2[12] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicSize;
  v2[13] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicStride;
  v2[14] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffset;
  v2[15] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSize;
  v2[16] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStride;
  v2[17] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicOffset;
  v2[18] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicSize;
  v2[19] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicStride;
  v2[20] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicOffset;
  v2[21] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicSize;
  v2[22] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicStride;
  v2[23] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isSameAs;
  v2[24] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasUnitStride;
  v2[25] = mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasZeroOffset;
  v4 = &unk_25451B000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451B000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451B000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[259], v2);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsetSizeAndStrideStartOperandIndex()
{
  return 1;
}

unint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getArrayAttrMaxRanks(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = *(_QWORD *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v4) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  return v2 | ((unint64_t)v2 << 32);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffsets(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSizes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v3);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedOffsets(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedSizes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

void mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getMixedStrides(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = a1;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v2, a2);
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

BOOL mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3) == 0x8000000000000000;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getStaticStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  v4 = a2;
  return *(_QWORD *)(mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v4) + 8 * a3);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v7);
  return mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3) + 1;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return (NumDynamicEntriesUpToIdx + v7 + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getIndexOfDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return (v8 + v9 + NumDynamicEntriesUpToIdx + 1);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticOffsets;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  uint64_t v8;

  v8 = a2;
  StaticOffsets = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticOffsets((mlir::memref::ReinterpretCastOp *)&v8);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticOffsets, v5, a3);
  return *(_QWORD *)(*(_QWORD *)(v8 + 72) + 32 * (NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicSize(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticSizes;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  uint64_t v9;

  v9 = a2;
  StaticSizes = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticSizes((mlir::memref::ReinterpretCastOp *)&v9);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticSizes, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v9);
  return *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32 * (NumDynamicEntriesUpToIdx + v7 + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getDynamicStride(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t *StaticStrides;
  uint64_t v5;
  int NumDynamicEntriesUpToIdx;
  int v7;
  int v8;
  int v9;
  uint64_t v11;

  v11 = a2;
  StaticStrides = (int64x2_t *)mlir::memref::ReinterpretCastOp::getStaticStrides((mlir::memref::ReinterpretCastOp *)&v11);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(StaticStrides, v5, a3);
  mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v11);
  v8 = v7;
  mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v11);
  return *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32 * (v8 + v9 + NumDynamicEntriesUpToIdx + 1) + 24);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::isSameAs(uint64_t a1, uint64_t InterfaceFor, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v10;

  v10 = InterfaceFor;
  if (InterfaceFor)
    InterfaceFor = mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(InterfaceFor);
  return mlir::detail::sameOffsetsSizesAndStrides(v10, InterfaceFor, a3, a4, a5, a6);
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasUnitStride(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 1;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::hasZeroOffset(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t ConstantIntValue;
  char v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v11, (uint64_t)&v12);
  v2 = (uint64_t *)v12;
  if (!v13)
  {
    v8 = 1;
    if (v12 == v14)
      return v8;
    goto LABEL_15;
  }
  v3 = 8 * v13 - 8;
  do
  {
    v4 = *v2++;
    ConstantIntValue = mlir::getConstantIntValue(v4);
    if (v6)
      v7 = ConstantIntValue == 0;
    else
      v7 = 0;
    v8 = v7;
    v9 = (_DWORD)v8 != 1 || v3 == 0;
    v3 -= 8;
  }
  while (!v9);
  v2 = (uint64_t *)v12;
  if (v12 != v14)
LABEL_15:
    free(v2);
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::SubViewOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::SubViewOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[80];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::memref::detail::SubViewOpGenericAdaptorBase::SubViewOpGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::memref::SubViewOp::fold((mlir::memref::ReinterpretCastOp *)&v13);
  v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v9 > 7;
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  unint64_t v288;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v288 = 83;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v273;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v288 = 81;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      v288 = 110;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[17];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v288 = 97;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451B000;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = (_QWORD *)&unk_25451B000;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v288 = 96;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = (_QWORD *)&unk_25451B000;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[37];
  v20 = &unk_254519000;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = (_QWORD *)&unk_254519000;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = (_QWORD *)&unk_254519000;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[423];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[310];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v288 = 86;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[340];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[225];
  v32 = &unk_25451B000;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (_QWORD *)&unk_25451B000;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OffsetSizeAndStrideOpInterface::Trait<Empty>]";
      v288 = 100;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OffsetSizeAndStrideOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (_QWORD *)&unk_25451B000;
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[261];
  v35 = &unk_25451A000;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (_QWORD *)&unk_25451A000;
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (_QWORD *)&unk_25451A000;
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[312];
  v38 = &unk_25451A000;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = (_QWORD *)&unk_25451A000;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v288 = 99;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = (_QWORD *)&unk_25451A000;
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[314];
  v41 = &unk_25451A000;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = (_QWORD *)&unk_25451A000;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v288 = 93;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = (_QWORD *)&unk_25451A000;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v41[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::memref::SubViewOp::print((mlir::memref::SubViewOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::SubViewOp>,mlir::OpTrait::OneResult<mlir::memref::SubViewOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::SubViewOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::SubViewOp>,mlir::OpTrait::OpInvariants<mlir::memref::SubViewOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::SubViewOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::SubViewOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::SubViewOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::memref::SubViewOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::SubViewOp>,mlir::OpTrait::OneResult<mlir::memref::SubViewOp>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::SubViewOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::SubViewOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::memref::SubViewOp>,mlir::OpTrait::OpInvariants<mlir::memref::SubViewOp>,mlir::BytecodeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::SubViewOp>,mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::SubViewOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::SubViewOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::SubViewOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::SubViewOp>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyAtLeastNOperands((mlir::OpTrait::impl *)a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (v6 = a1, mlir::memref::SubViewOp::verifyInvariantsImpl(&v6)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::OffsetSizeAndStrideOpInterface::Trait<mlir::memref::ReinterpretCastOp>>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::SubViewOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ViewLikeOpInterface::Trait,mlir::OffsetSizeAndStrideOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void `anonymous namespace'::MemRefInlinerInterface::~MemRefInlinerInterface(_anonymous_namespace_::MemRefInlinerInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::MemRefInlinerInterface::isLegalToInline()
{
  return 1;
}

{
  return 1;
}

double mlir::memref::AllocaOp::getPromotableSlots@<D0>(mlir::memref::AllocaOp *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  unint64_t v12;
  mlir::IndexType *v13[4];
  mlir::MLIRContext *RHS;

  v12 = *(_QWORD *)(*(_QWORD *)this - 8) & 0xFFFFFFFFFFFFFFF8;
  RHS = (mlir::MLIRContext *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v12);
  if (*(_UNKNOWN **)(*(_QWORD *)RHS + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
    || (v13[0] = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)&RHS),
        memset(&v13[1], 0, 24),
        mlir::Builder::getZeroAttr(v13, RHS)))
  {
    if (mlir::BaseMemRefType::hasRank((mlir::BaseMemRefType *)&v12))
    {
      Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
      if (v5)
      {
        v6 = 8 * v5;
        while (*Value != 0x8000000000000000)
        {
          ++Value;
          v6 -= 8;
          if (!v6)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        v7 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
        if (mlir::ShapedType::getNumElements(v7, v8) == 1)
        {
          v9 = *(_QWORD *)this - 16;
          v10 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v12);
          a2[2] = v9;
          *a2 = a2 + 2;
          a2[3] = v10;
          *(_QWORD *)&result = 0x300000001;
          a2[1] = 0x300000001;
          return result;
        }
      }
    }
  }
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x300000000;
  a2[1] = 0x300000000;
  return result;
}

char *mlir::memref::AllocaOp::getDefaultValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *v3;
  uint64_t v4;
  mlir::MLIRContext **v5;
  uint64_t v6;
  uint64_t v8[2];
  mlir::MLIRContext *v9;

  v3 = *(mlir::MLIRContext **)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = (mlir::MLIRContext **)(a3 + 8);
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v8[0] = (uint64_t)v3;
    return (char *)mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &>(v5, v4, v8) - 16;
  }
  else
  {
    v9 = v3;
    v8[0] = (uint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)(a3 + 8), v3);
    v8[1] = v6;
    return (char *)mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::TypedAttr>((mlir::OpBuilder *)v5, v4, (uint64_t *)&v9, v8)- 16;
  }
}

uint64_t mlir::memref::AllocaOp::handlePromotionComplete(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t DefiningOp;
  _QWORD *v8;

  v8 = a3;
  if (!*a3)
  {
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, DefiningOp);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 40))(a4, *a1);
}

double mlir::memref::AllocaOp::getDestructurableSlots@<D0>(mlir::memref::AllocaOp *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  double result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  int v35;
  unsigned int v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;

  v4 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(*v4 + 8))
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(*v4 + 8);
    v38 = v4;
    v39 = v5;
    if (v4)
    {
      mlir::DestinationStyleOpInterface::getDpsInitsMutable((uint64_t *)&v34, (mlir::DestinationStyleOpInterface *)&v38);
      if (v37)
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        if (!v35)
          goto LABEL_56;
        if (v36)
        {
          v6 = 16 * v36;
          v7 = v34;
          while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v7 += 2;
            v6 -= 16;
            if (!v6)
              goto LABEL_56;
          }
        }
        else
        {
          v7 = v34;
        }
        v9 = &v34[2 * v36];
        if (v7 == v9)
        {
LABEL_56:
          mlir::anec::Convolution::getResult(this);
          llvm::deallocate_buffer(0, 0);
        }
        while (1)
        {
          v10 = mlir::MemRefType::get(0, 0, v7[1], 0, 0, 0);
          v11 = *v7;
          v12 = v33;
          if (!v33)
            goto LABEL_40;
          v13 = ((v11 >> 4) ^ (v11 >> 9)) & (v33 - 1);
          v14 = (_QWORD *)(v31 + 16 * v13);
          v15 = *v14;
          if (*v14 == v11)
            goto LABEL_32;
          v16 = 0;
          v17 = 1;
          while (v15 != -4096)
          {
            if (v16)
              v18 = 0;
            else
              v18 = v15 == -8192;
            if (v18)
              v16 = v14;
            v19 = v13 + v17++;
            v13 = v19 & (v33 - 1);
            v14 = (_QWORD *)(v31 + 16 * v13);
            v15 = *v14;
            if (*v14 == v11)
              goto LABEL_32;
          }
          v21 = v16 ? v16 : v14;
          if (4 * (int)v32 + 4 < 3 * v33)
          {
            if (v33 + ~(_DWORD)v32 - HIDWORD(v32) > v33 >> 3)
              goto LABEL_28;
            v29 = *v7;
            v30 = v10;
          }
          else
          {
LABEL_40:
            v29 = *v7;
            v30 = v10;
            v12 = 2 * v33;
          }
          llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v31, v12);
          v22 = v33 - 1;
          v23 = (v33 - 1) & ((v29 >> 4) ^ (v29 >> 9));
          v21 = (_QWORD *)(v31 + 16 * v23);
          v24 = *v21;
          if (*v21 != v29)
          {
            v25 = 0;
            v26 = 1;
            v10 = v30;
            while (v24 != -4096)
            {
              if (v25)
                v27 = 0;
              else
                v27 = v24 == -8192;
              if (v27)
                v25 = v21;
              v28 = v23 + v26++;
              v23 = v28 & v22;
              v21 = (_QWORD *)(v31 + 16 * (v28 & v22));
              v24 = *v21;
              v11 = v29;
              v20 = v29;
              if (*v21 == v29)
                goto LABEL_29;
            }
            if (v25)
              v21 = v25;
            v11 = v29;
LABEL_28:
            v20 = *v21;
            goto LABEL_29;
          }
          v11 = v29;
          v20 = v29;
          v10 = v30;
LABEL_29:
          LODWORD(v32) = v32 + 1;
          if (v20 != -4096)
            --HIDWORD(v32);
          *v21 = v11;
          v21[1] = v10;
          do
          {
LABEL_32:
            v7 += 2;
            if (v7 == v9)
              goto LABEL_56;
          }
          while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000);
          if (v7 == v9)
            goto LABEL_56;
        }
      }
    }
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x100000000;
  a2[1] = 0x100000000;
  return result;
}

void sub_207374CD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, void *__src, uint64_t a14, unsigned int a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *buffer;

  if (a15)
  {
    buffer = llvm::allocate_buffer(16 * a15, (std::align_val_t)8uLL);
    memcpy(buffer, __src, 16 * a15);
  }
  *(_QWORD *)(v15 + 16) = v16;
  *(_QWORD *)v15 = v15 + 16;
  *(_QWORD *)(v15 + 8) = 0x100000000;
  *(_QWORD *)(v15 + 24) = v17;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  llvm::deallocate_buffer(0, 0);
}

void sub_207374D50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *buffer;

  *(_DWORD *)(v11 + 48) = v14;
  if ((_DWORD)v14)
  {
    v15 = (void *)(16 * v14);
    buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
    *(_QWORD *)(v11 + 32) = buffer;
    *(_QWORD *)(v11 + 40) = a11;
    memcpy(buffer, v12, 16 * *(unsigned int *)(v11 + 48));
  }
  else
  {
    v15 = 0;
    *v13 = 0;
    v13[1] = 0;
  }
  ++*(_DWORD *)(v11 + 8);
  llvm::deallocate_buffer((llvm *)v12, v15);
}

void sub_207374DAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm *a14, uint64_t a15, unsigned int a16)
{
  llvm::deallocate_buffer(a14, (void *)(16 * a16));
}

void sub_207374DC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, llvm *a17, uint64_t a18, unsigned int a19, int a20,char a21)
{
  if (a21)
    llvm::deallocate_buffer(a17, (void *)(16 * a19));
  JUMPOUT(0x207374AB0);
}

uint64_t mlir::memref::AllocaOp::destructure@<X0>(ZinIrHalH13g **a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  ZinIrHalH13g *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *i;
  uint64_t *v19;
  mlir::MLIRContext **v20;
  uint64_t SuccessorBlockArgument;
  int v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v8 = *a1;
  v9 = *((_QWORD *)v8 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v8);
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v11;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v12 = (_QWORD *)(*((_QWORD *)*a1 - 1) & 0xFFFFFFFFFFFFFFF8);
  if (v12)
    result = mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(*v12 + 8);
  else
    result = 0;
  v35[0] = v12;
  v35[1] = result;
  v14 = a2[1];
  if (v14 == *a2)
    v15 = (unsigned int *)a2 + 5;
  else
    v15 = (unsigned int *)(a2 + 2);
  v16 = *v15;
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    for (i = (uint64_t *)a2[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v17 -= 8;
      if (!v17)
        return result;
    }
  }
  else
  {
    i = (uint64_t *)a2[1];
  }
  v19 = (uint64_t *)(v14 + 8 * v16);
  if (i == v19)
    return result;
  v20 = (mlir::MLIRContext **)(a3 + 8);
  do
  {
    v34 = *i;
    SuccessorBlockArgument = mlir::BranchOpInterface::getSuccessorBlockArgument((mlir::BranchOpInterface *)v35, v34);
    v33 = mlir::MemRefType::get(0, 0, SuccessorBlockArgument, 0, 0, 0);
    result = (uint64_t)mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &>(v20, *((_QWORD *)*a1 + 3), &v33);
    *(_QWORD *)&v32 = result - 16;
    *((_QWORD *)&v32 + 1) = SuccessorBlockArgument;
    v22 = *(_DWORD *)(a4 + 16);
    if (!v22)
    {
      v31 = 0;
LABEL_27:
      result = llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>,mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>::InsertIntoBucket<mlir::Attribute const&,mlir::MemorySlot>(a4, v31, &v34, &v32);
      goto LABEL_28;
    }
    v23 = v22 - 1;
    v24 = ((v34 >> 4) ^ (v34 >> 9)) & v23;
    v25 = (_QWORD *)(*(_QWORD *)a4 + 24 * v24);
    v26 = *v25;
    if (v34 == *v25)
      goto LABEL_28;
    v27 = 0;
    v28 = 1;
    do
    {
      if (v26 == -4096)
      {
        if (v27)
          v31 = (uint64_t)v27;
        else
          v31 = (uint64_t)v25;
        goto LABEL_27;
      }
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      v25 = (_QWORD *)(*(_QWORD *)a4 + 24 * v24);
      v26 = *v25;
    }
    while (v34 != *v25);
    do
    {
LABEL_28:
      if (++i == v19)
        return result;
    }
    while ((unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL);
  }
  while (i != v19);
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.alloca", (const unsigned __int8 *)0xD, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"memref.alloca";
    v15[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::memref::AllocaOp::build(a1, (uint64_t)v17, *a3, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

uint64_t mlir::memref::AllocaOp::handleDestructuringComplete(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, *a1);
}

BOOL mlir::memref::LoadOp::loadsFrom(uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) == *a2;
}

BOOL mlir::memref::LoadOp::canUsesBeRemoved(mlir::anec::Convolution *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  if ((_DWORD)v3 - *(_DWORD *)(a3 + 24) != 1)
    return 0;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 == *(_QWORD *)a3)
    v3 = v3;
  else
    v3 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    v6 = v4 + 8 * v3;
    while (*(_QWORD *)v4 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v4 += 8;
      v5 -= 8;
      if (!v5)
      {
        v4 = v6;
        break;
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 24);
  return v7 == *a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) == v7
      && a2[1] == (*(_QWORD *)(mlir::anec::Convolution::getResult(a1) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::LoadOp::removeBlockingUses(mlir::anec::Convolution *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = *(uint64_t **)mlir::anec::Convolution::getResult(a1);
  if (v7)
  {
    do
    {
      v9 = (uint64_t *)*v7;
      v10 = v7[2];
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 72))(a4, v10);
      v11 = (uint64_t *)v7[1];
      if (v11)
      {
        *v11 = *v7;
        if (*v7)
          *(_QWORD *)(*v7 + 8) = v7[1];
      }
      v7[3] = (uint64_t)a5;
      v12 = *a5;
      *v7 = *a5;
      v7[1] = (uint64_t)a5;
      if (v12)
        *(_QWORD *)(v12 + 8) = v7;
      *a5 = (uint64_t)v7;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 80))(a4, v10);
      v7 = v9;
    }
    while (v9);
  }
  return 1;
}

uint64_t mlir::memref::LoadOp::canRewire(mlir::memref::LoadOp *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  mlir::MLIRContext *Context;
  uint64_t Indices;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*a2 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24))
    return 0;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  Indices = mlir::memref::LoadOp::getIndices(a1);
  mlir::ValueRange::ValueRange(v14, Indices, v8);
  result = getAttributeIndexFromIndexOperands(Context, v14[0], v14[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (result)
  {
    v9 = *(_QWORD *)(a3 + 8);
    if (v9 != *(_QWORD *)a3)
      goto LABEL_5;
    v10 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      v13 = *(uint64_t **)(a3 + 8);
      while (*v13 != result)
      {
        if (*v13 == -2)
          v11 = v13;
        ++v13;
        v12 -= 8;
        if (!v12)
        {
          if (!v11)
            goto LABEL_16;
          *v11 = result;
          --*(_DWORD *)(a3 + 24);
          return 1;
        }
      }
      return 1;
    }
LABEL_16:
    if (v10 < *(_DWORD *)(a3 + 16))
    {
      *(_DWORD *)(a3 + 20) = v10 + 1;
      *(_QWORD *)(v9 + 8 * v10) = result;
    }
    else
    {
LABEL_5:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a3, (const void *)result);
    }
    return 1;
  }
  return result;
}

uint64_t getAttributeIndexFromIndexOperands(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Value;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t DefiningOp;
  uint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[48];
  void *v36;
  uint64_t v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x24BDAC8D0];
  v28 = a4;
  v33 = v35;
  v34 = 0x600000000;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  v30 = a2;
  v31 = 0;
  v32 = (unint64_t *)Value;
  if (!a3 || (v9 = v8) == 0)
  {
    v21 = v34;
LABEL_28:
    v24 = mlir::ArrayAttr::get(a1, (uint64_t)v33, v21);
    v25 = v33;
    if (v33 == v35)
      return v24;
LABEL_29:
    free(v25);
    return v24;
  }
  v10 = 0;
  v11 = Value + 8 * v9;
  while (1)
  {
    v12 = mlir::ValueRange::dereference_iterator(&v30, v10);
    v13 = v32;
    v27 = 0;
    v29 = v12;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
    if (!DefiningOp)
      break;
    v15 = DefiningOp;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
      break;
    v36 = v38;
    v37 = 0x100000000;
    mlir::Operation::fold(v15, 0, 0, (uint64_t)&v36);
    v16 = (*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) == 0
       || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    if (!v16)
      v27 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
    if (v36 != v38)
      free(v36);
    if (v16)
      break;
    mlir::IntegerAttr::getValue(&v27, (llvm::APInt *)&v36);
    v17 = v37;
    if (v37 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v36) > 0x40)
      {
        if (v36)
          MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
        break;
      }
      v18 = *(_QWORD *)v36;
      MEMORY[0x20BD002D4]();
      if (v18 >= *v13)
        break;
    }
    else if ((unint64_t)v36 >= *v13)
    {
      break;
    }
    v19 = v27;
    v20 = v34;
    if (v34 >= (unint64_t)HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 8);
      v20 = v34;
    }
    *((_QWORD *)v33 + v20) = v19;
    v21 = v34 + 1;
    LODWORD(v34) = v34 + 1;
    v10 = v31 + 1;
    v22 = v32 + 1;
    v31 = v10;
    ++v32;
    v23 = v10 == a3 && v30 == a2;
    if (v23 || v22 == (_QWORD *)v11)
      goto LABEL_28;
  }
  v24 = 0;
  v25 = v33;
  if (v33 != v35)
    goto LABEL_29;
  return v24;
}

uint64_t mlir::memref::LoadOp::rewire(mlir::memref::LoadOp *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t Indices;
  unint64_t v9;
  uint64_t AttributeIndexFromIndexOperands;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v24[2];
  _BYTE v25[16];
  void *v26;
  _QWORD v27[4];

  v27[3] = *MEMORY[0x24BDAC8D0];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  Indices = mlir::memref::LoadOp::getIndices(a1);
  mlir::ValueRange::ValueRange(v24, Indices, v9);
  AttributeIndexFromIndexOperands = getAttributeIndexFromIndexOperands(Context, v24[0], v24[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v11 = *a3;
  v12 = *((_DWORD *)a3 + 4);
  if (!v12)
  {
LABEL_7:
    v14 = (uint64_t *)(v11 + 24 * v12);
    goto LABEL_8;
  }
  v13 = ((AttributeIndexFromIndexOperands >> 4) ^ (AttributeIndexFromIndexOperands >> 9)) & (v12 - 1);
  v14 = (uint64_t *)(v11 + 24 * v13);
  v15 = *v14;
  if (*v14 != AttributeIndexFromIndexOperands)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v14 = (uint64_t *)(v11 + 24 * v13);
      v15 = *v14;
      if (*v14 == AttributeIndexFromIndexOperands)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  v18 = *(_QWORD *)a1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 72))(a4, *(_QWORD *)a1);
  v19 = (uint64_t *)v14[1];
  v20 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v21 = (uint64_t *)v20[1];
  if (v21)
  {
    *v21 = *v20;
    if (*v20)
      *(_QWORD *)(*v20 + 8) = v20[1];
  }
  v20[3] = (uint64_t)v19;
  v20[1] = (uint64_t)v19;
  v22 = *v19;
  *v20 = *v19;
  if (v22)
    *(_QWORD *)(v22 + 8) = v20;
  *v19 = (uint64_t)v20;
  mlir::memref::LoadOp::getIndicesMutable(a1, (uint64_t)v25);
  mlir::MutableOperandRange::clear((mlir::MutableOperandRange *)v25);
  if (v26 != v27)
    free(v26);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 80))(a4, v18);
  return 0;
}

BOOL mlir::memref::StoreOp::storesTo(uint64_t a1, _QWORD *a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56) == *a2;
}

BOOL mlir::memref::StoreOp::canUsesBeRemoved(mlir::anec::Deconvolution *this, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  LODWORD(v3) = *(_DWORD *)(a3 + 20);
  if ((_DWORD)v3 - *(_DWORD *)(a3 + 24) != 1)
    return 0;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 == *(_QWORD *)a3)
    v3 = v3;
  else
    v3 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    v8 = v6 + 8 * v3;
    while (*(_QWORD *)v6 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v6 += 8;
      v7 -= 8;
      if (!v7)
      {
        v6 = v8;
        break;
      }
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  return v9 == *a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56) == v9
      && *a2 != mlir::anec::Deconvolution::getInput(this)
      && a2[1] == (*(_QWORD *)(mlir::anec::Deconvolution::getInput(this) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::StoreOp::canRewire(mlir::anec::Deconvolution *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  mlir::MLIRContext *Context;
  uint64_t Sizes;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unsigned int v21;
  unint64_t v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56)
    || *(_QWORD *)a2 == mlir::anec::Deconvolution::getInput(a1))
  {
    return 0;
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  Sizes = mlir::memref::ViewOp::getSizes(a1);
  mlir::ValueRange::ValueRange(v22, Sizes, v9);
  result = getAttributeIndexFromIndexOperands(Context, v22[0], v22[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (result)
  {
    v10 = *(_DWORD *)(a2 + 32);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 16);
      v12 = v10 - 1;
      v13 = v12 & ((result >> 4) ^ (result >> 9));
      v14 = *(_QWORD *)(v11 + 16 * v13);
      if (v14 == result)
      {
LABEL_8:
        v15 = *(_QWORD *)(a3 + 8);
        if (v15 != *(_QWORD *)a3)
          goto LABEL_9;
        v16 = *(unsigned int *)(a3 + 20);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = 8 * v16;
          v19 = *(uint64_t **)(a3 + 8);
          while (*v19 != result)
          {
            if (*v19 == -2)
              v17 = v19;
            ++v19;
            v18 -= 8;
            if (!v18)
            {
              if (!v17)
                goto LABEL_19;
              *v17 = result;
              --*(_DWORD *)(a3 + 24);
              return 1;
            }
          }
          return 1;
        }
LABEL_19:
        if (v16 < *(_DWORD *)(a3 + 16))
        {
          *(_DWORD *)(a3 + 20) = v16 + 1;
          *(_QWORD *)(v15 + 8 * v16) = result;
        }
        else
        {
LABEL_9:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)a3, (const void *)result);
        }
        return 1;
      }
      v20 = 1;
      while (v14 != -4096)
      {
        v21 = v13 + v20++;
        v13 = v21 & v12;
        v14 = *(_QWORD *)(v11 + 16 * (v21 & v12));
        if (v14 == result)
          goto LABEL_8;
      }
    }
    return 0;
  }
  return result;
}

uint64_t mlir::memref::StoreOp::rewire(mlir::memref::ViewOp *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t Sizes;
  unint64_t v9;
  uint64_t AttributeIndexFromIndexOperands;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v25[2];
  _BYTE v26[16];
  void *v27;
  _QWORD v28[4];

  v28[3] = *MEMORY[0x24BDAC8D0];
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  Sizes = mlir::memref::ViewOp::getSizes(a1);
  mlir::ValueRange::ValueRange(v25, Sizes, v9);
  AttributeIndexFromIndexOperands = getAttributeIndexFromIndexOperands(Context, v25[0], v25[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  v11 = *a3;
  v12 = *((_DWORD *)a3 + 4);
  if (!v12)
  {
LABEL_7:
    v14 = (uint64_t *)(v11 + 24 * v12);
    goto LABEL_8;
  }
  v13 = ((AttributeIndexFromIndexOperands >> 4) ^ (AttributeIndexFromIndexOperands >> 9)) & (v12 - 1);
  v14 = (uint64_t *)(v11 + 24 * v13);
  v15 = *v14;
  if (*v14 != AttributeIndexFromIndexOperands)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v14 = (uint64_t *)(v11 + 24 * v13);
      v15 = *v14;
      if (*v14 == AttributeIndexFromIndexOperands)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  v18 = *(_QWORD *)a1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 72))(a4, *(_QWORD *)a1);
  v19 = (uint64_t *)v14[1];
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 72);
  v21 = v20 + 4;
  v22 = (_QWORD *)v20[5];
  if (v22)
  {
    *v22 = *v21;
    if (*v21)
      *(_QWORD *)(*v21 + 8) = v20[5];
  }
  v20[7] = v19;
  v20[5] = v19;
  v23 = *v19;
  v20[4] = *v19;
  if (v23)
    *(_QWORD *)(v23 + 8) = v21;
  *v19 = (uint64_t)v21;
  mlir::memref::StoreOp::getIndicesMutable(a1, (uint64_t)v26);
  mlir::MutableOperandRange::clear((mlir::MutableOperandRange *)v26);
  if (v27 != v28)
    free(v27);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 80))(a4, v18);
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::DestructurableTypeInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableTypeInterface]";
      v23 = 83;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::DestructurableTypeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[283];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type &,mlir::TypedAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.constant";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4, a4[1]);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>,mlir::Attribute,mlir::MemorySlot,llvm::DenseMapInfo<mlir::Attribute,void>,llvm::detail::DenseMapPair<mlir::Attribute,mlir::MemorySlot>>::InsertIntoBucket<mlir::Attribute const&,mlir::MemorySlot>(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    v10 = *(_QWORD *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Operation *,mlir::ValueRange,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,mlir::ValueRange>>::grow(a1, v9);
  v10 = *a3;
  v12 = *(_DWORD *)(a1 + 16) - 1;
  v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & v12;
  a2 = *(_QWORD *)a1 + 24 * v13;
  v14 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = a2;
      v18 = v13 + v16++;
      v13 = v18 & v12;
      a2 = *(_QWORD *)a1 + 24 * (v18 & v12);
      v14 = *(_QWORD *)a2;
      if (v10 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v15)
      a2 = v15;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 8) = *a4;
  return a2;
}

ZinIrHalH13g *mlir::memref::MemRefDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  return mlir::arith::ConstantOp::materialize(a2, a3, a4, a5);
}

uint64_t mlir::memref::foldMemRefCast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t DefiningOp;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0 && (v2 = *(unsigned int *)(a1 + 68), (_DWORD)v2))
  {
    v4 = 0;
    v5 = *(uint64_t **)(a1 + 72);
    v6 = 32 * v2;
    do
    {
      v12 = v5[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id
          && v5[3] != a2)
        {
          v8 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
          if (*(_UNKNOWN **)(*(_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
          {
            v9 = (uint64_t *)v5[1];
            if (v9)
            {
              *v9 = *v5;
              if (*v5)
                *(_QWORD *)(*v5 + 8) = v5[1];
            }
            v5[3] = (uint64_t)v8;
            v10 = *v8;
            *v5 = *v8;
            v5[1] = (uint64_t)v8;
            if (v10)
              *(_QWORD *)(v10 + 8) = v5;
            *v8 = (uint64_t)v5;
            v4 = 1;
          }
        }
      }
      v5 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t mlir::memref::getTensorTypeFromMemRefType(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t RHS;
  BOOL v8;
  uint64_t v9;
  mlir::NoneType *Context;
  mlir::MLIRContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  v1 = *(void **)(*(_QWORD *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v2 = a1;
  else
    v2 = 0;
  v13 = v2;
  if (v2)
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
    v5 = v4;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v13);
    return mlir::RankedTensorType::get(Value, v5, RHS, 0);
  }
  else
  {
    v8 = v1 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
    if (v1 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
      v9 = a1;
    else
      v9 = 0;
    v13 = v9;
    if (v8)
    {
      v12 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
      return mlir::UnrankedTensorType::get(v12);
    }
    else
    {
      Context = (mlir::NoneType *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
      return mlir::NoneType::get(Context, v11);
    }
  }
}

uint64_t mlir::memref::AllocOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "alloc", 5);
}

uint64_t mlir::memref::AllocaOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "alloca", 6);
}

uint64_t mlir::memref::AllocOp::verify(mlir::memref::AllocOp *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  int64x2_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int NumSymbols;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  const char *v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  int *v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  int *v50;
  char *v51;
  char *v52;
  __int128 v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  BOOL v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  const void **v69[4];
  __int16 v70;
  unint64_t v71;
  uint64_t *v72;
  int v73;
  const char *v74;
  uint64_t v75;
  uint64_t RawStringData;
  uint64_t v77;
  void *v78;
  unsigned int v79;
  unsigned int v80;
  _BYTE v81[96];
  void *v82;
  _QWORD *v83;
  void *__p;
  _QWORD *v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)this;
  v72 = (uint64_t *)v1;
  v71 = *(_QWORD *)(v1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v71)
  {
    v69[0] = (const void **)"result must be a memref";
    v70 = 259;
    mlir::OpState::emitOpError(&v72, v69, (uint64_t)&RawStringData);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v86)
    {
      v11 = __p;
      if (__p)
      {
        v12 = v85;
        v13 = __p;
        if (v85 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v85 = v11;
        operator delete(v13);
      }
      v14 = v82;
      if (!v82)
        goto LABEL_75;
      v15 = v83;
      v16 = v82;
      if (v83 == v82)
        goto LABEL_74;
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
      }
      while (v15 != v14);
      goto LABEL_73;
    }
    return v10;
  }
  v2 = *(unsigned int *)(v1 + 44);
  v3 = v1 + 16 * ((v2 >> 23) & 1) + 64;
  if (!BYTE3(v2))
    v3 = 0;
  v4 = *(unsigned int *)(v3 + 8);
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_28;
  }
  v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v7 >= 3)
  {
    v19 = v7 + 1;
    v20 = (v7 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v9 = (uint64_t *)(Value + 8 * v20);
    v21 = (int64x2_t *)(Value + 16);
    v22 = 0uLL;
    v23 = vdupq_n_s64(0x8000000000000000);
    v24 = v20;
    v25 = 0uLL;
    do
    {
      v22 = vsubq_s64(v22, vceqq_s64(v21[-1], v23));
      v25 = vsubq_s64(v25, vceqq_s64(*v21, v23));
      v21 += 2;
      v24 -= 4;
    }
    while (v24);
    v8 = vaddvq_s64(vaddq_s64(v25, v22));
    if (v19 == v20)
      goto LABEL_28;
  }
  else
  {
    v8 = 0;
    v9 = (uint64_t *)Value;
  }
  do
  {
    v26 = *v9++;
    if (v26 == 0x8000000000000000)
      ++v8;
  }
  while (v9 != (uint64_t *)(Value + 8 * v6));
LABEL_28:
  if (v8 == v4)
  {
    RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
    v77 = v27;
    if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) != 0)
    {
      NumSymbols = 0;
    }
    else
    {
      RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
      v77 = v35;
      v69[0] = (const void **)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&RawStringData);
      NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v69);
    }
    v36 = &v72[2 * (((unint64_t)*((unsigned int *)v72 + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)v72 + 11)))
      v36 = 0;
    v37 = (const char *)NumSymbols;
    if ((*((_DWORD *)v36 + 3) + *((_DWORD *)v36 + 2)) - (unint64_t)*((unsigned int *)v36 + 2) == NumSymbols)
      return 1;
    v69[0] = (const void **)"symbol operand count does not equal memref symbol count: expected ";
    v70 = 259;
    mlir::OpState::emitOpError(&v72, v69, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      v73 = 5;
      v74 = v37;
      v38 = &v73;
      v39 = (char *)v78;
      if (v79 >= v80)
      {
        v61 = v79 + 1;
        if (v78 <= &v73 && (char *)v78 + 24 * v79 > (char *)&v73)
        {
          v66 = (char *)&v73 - (_BYTE *)v78;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v61, 24);
          v39 = (char *)v78;
          v38 = (int *)((char *)v78 + v66);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v61, 24);
          v38 = &v73;
          v39 = (char *)v78;
        }
      }
      v40 = &v39[24 * v79];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      v42 = ++v79;
      if (RawStringData)
      {
        v73 = 3;
        v74 = ", got ";
        v75 = 6;
        v43 = &v73;
        v44 = (char *)v78;
        if (v42 >= v80)
        {
          v62 = v42 + 1;
          v63 = (char *)v78 + 24 * v42 > (char *)&v73;
          if (v78 <= &v73 && v63)
          {
            v67 = (char *)&v73 - (_BYTE *)v78;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v62, 24);
            v44 = (char *)v78;
            v43 = (int *)((char *)v78 + v67);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v62, 24);
            v43 = &v73;
            v44 = (char *)v78;
          }
        }
        v45 = &v44[24 * v79];
        v46 = *(_OWORD *)v43;
        *((_QWORD *)v45 + 2) = *((_QWORD *)v43 + 2);
        *(_OWORD *)v45 = v46;
        v47 = ++v79;
        if (RawStringData)
        {
          v48 = &v72[2 * (((unint64_t)*((unsigned int *)v72 + 11) >> 23) & 1) + 8];
          if (!HIBYTE(*((_DWORD *)v72 + 11)))
            v48 = 0;
          v49 = (*((_DWORD *)v48 + 2) + *((_DWORD *)v48 + 3))
              - (unint64_t)*((unsigned int *)v48 + 2);
          v73 = 5;
          v74 = (const char *)v49;
          v50 = &v73;
          v51 = (char *)v78;
          if (v47 >= v80)
          {
            v64 = v47 + 1;
            v65 = (char *)v78 + 24 * v47 > (char *)&v73;
            if (v78 <= &v73 && v65)
            {
              v68 = (char *)&v73 - (_BYTE *)v78;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
              v51 = (char *)v78;
              v50 = (int *)((char *)v78 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
              v50 = &v73;
              v51 = (char *)v78;
            }
          }
          v52 = &v51[24 * v79];
          v53 = *(_OWORD *)v50;
          *((_QWORD *)v52 + 2) = *((_QWORD *)v50 + 2);
          *(_OWORD *)v52 = v53;
          ++v79;
        }
      }
    }
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v86)
    {
      v54 = __p;
      if (__p)
      {
        v55 = v85;
        v56 = __p;
        if (v85 != __p)
        {
          do
            v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
          while (v55 != v54);
          v56 = __p;
        }
        v85 = v54;
        operator delete(v56);
      }
      v14 = v82;
      if (!v82)
        goto LABEL_75;
      v57 = v83;
      v16 = v82;
      if (v83 == v82)
      {
LABEL_74:
        v83 = v14;
        operator delete(v16);
LABEL_75:
        if (v78 != v81)
          free(v78);
        return v10;
      }
      do
      {
        v59 = *--v57;
        v58 = v59;
        *v57 = 0;
        if (v59)
          MEMORY[0x20BD002D4](v58, 0x1000C8077774924);
      }
      while (v57 != v14);
LABEL_73:
      v16 = v82;
      goto LABEL_74;
    }
  }
  else
  {
    v69[0] = (const void **)"dimension operand count does not equal memref dynamic dimension count";
    v70 = 259;
    mlir::OpState::emitOpError(&v72, v69, (uint64_t)&RawStringData);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v86)
    {
      v29 = __p;
      if (__p)
      {
        v30 = v85;
        v31 = __p;
        if (v85 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v85 = v29;
        operator delete(v31);
      }
      v14 = v82;
      if (!v82)
        goto LABEL_75;
      v32 = v83;
      v16 = v82;
      if (v83 == v82)
        goto LABEL_74;
      do
      {
        v34 = *--v32;
        v33 = v34;
        *v32 = 0;
        if (v34)
          MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
      }
      while (v32 != v14);
      goto LABEL_73;
    }
  }
  return v10;
}

uint64_t mlir::memref::AllocaOp::verify(uint64_t **this)
{
  uint64_t *v2;
  mlir::Block *v3;
  uint64_t ParentOp;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int NumSymbols;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  const char *v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  int *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  int *v60;
  char *v61;
  char *v62;
  __int128 v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  BOOL v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  const void **v79[4];
  __int16 v80;
  unint64_t v81;
  uint64_t *v82;
  int v83;
  const char *v84;
  uint64_t v85;
  uint64_t RawStringData;
  uint64_t v87;
  void *v88;
  unsigned int v89;
  unsigned int v90;
  _BYTE v91[96];
  void *v92;
  _QWORD *v93;
  void *__p;
  _QWORD *v95;
  char v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  do
  {
    v3 = (mlir::Block *)v2[2];
    if (!v3 || (ParentOp = mlir::Block::getParentOp(v3)) == 0)
    {
      v79[0] = (const void **)"requires an ancestor op with AutomaticAllocationScope trait";
      v80 = 259;
      mlir::OpState::emitOpError(this, v79, (uint64_t)&RawStringData);
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      if (v96)
      {
        v15 = __p;
        if (__p)
        {
          v16 = v95;
          v17 = __p;
          if (v95 != __p)
          {
            do
              v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            v17 = __p;
          }
          v95 = v15;
          operator delete(v17);
        }
        v18 = v92;
        if (!v92)
          goto LABEL_93;
        v19 = v93;
        v20 = v92;
        if (v93 == v92)
          goto LABEL_92;
        do
        {
          v22 = *--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
        }
        while (v19 != v18);
        goto LABEL_91;
      }
      return v14;
    }
    v2 = (uint64_t *)ParentOp;
  }
  while ((mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((_QWORD *)(ParentOp + 48)) & 1) == 0);
  v5 = *this;
  v82 = v5;
  v81 = *(v5 - 1) & 0xFFFFFFFFFFFFFFF8;
  if (v81)
  {
    v6 = *((unsigned int *)v5 + 11);
    v7 = (uint64_t)&v5[2 * ((v6 >> 23) & 1) + 8];
    if (!BYTE3(v6))
      v7 = 0;
    v8 = *(unsigned int *)(v7 + 8);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v81);
    if (v10)
    {
      v11 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v11 >= 3)
      {
        v29 = v11 + 1;
        v30 = (v11 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v13 = (uint64_t *)(Value + 8 * v30);
        v31 = (int64x2_t *)(Value + 16);
        v32 = 0uLL;
        v33 = vdupq_n_s64(0x8000000000000000);
        v34 = v30;
        v35 = 0uLL;
        do
        {
          v32 = vsubq_s64(v32, vceqq_s64(v31[-1], v33));
          v35 = vsubq_s64(v35, vceqq_s64(*v31, v33));
          v31 += 2;
          v34 -= 4;
        }
        while (v34);
        v12 = vaddvq_s64(vaddq_s64(v35, v32));
        if (v29 != v30)
          goto LABEL_43;
      }
      else
      {
        v12 = 0;
        v13 = (uint64_t *)Value;
        do
        {
LABEL_43:
          v36 = *v13++;
          if (v36 == 0x8000000000000000)
            ++v12;
        }
        while (v13 != (uint64_t *)(Value + 8 * v10));
      }
    }
    else
    {
      v12 = 0;
    }
    if (v12 == v8)
    {
      RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
      v87 = v37;
      if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) != 0)
      {
        NumSymbols = 0;
      }
      else
      {
        RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v81);
        v87 = v45;
        v79[0] = (const void **)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&RawStringData);
        NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v79);
      }
      v46 = &v82[2 * (((unint64_t)*((unsigned int *)v82 + 11) >> 23) & 1) + 8];
      if (!HIBYTE(*((_DWORD *)v82 + 11)))
        v46 = 0;
      v47 = (const char *)NumSymbols;
      if ((*((_DWORD *)v46 + 3) + *((_DWORD *)v46 + 2)) - (unint64_t)*((unsigned int *)v46 + 2) == NumSymbols)
        return 1;
      v79[0] = (const void **)"symbol operand count does not equal memref symbol count: expected ";
      v80 = 259;
      mlir::OpState::emitOpError(&v82, v79, (uint64_t)&RawStringData);
      if (RawStringData)
      {
        v83 = 5;
        v84 = v47;
        v48 = &v83;
        v49 = (char *)v88;
        if (v89 >= v90)
        {
          v71 = v89 + 1;
          if (v88 <= &v83 && (char *)v88 + 24 * v89 > (char *)&v83)
          {
            v76 = (char *)&v83 - (_BYTE *)v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v71, 24);
            v49 = (char *)v88;
            v48 = (int *)((char *)v88 + v76);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v71, 24);
            v48 = &v83;
            v49 = (char *)v88;
          }
        }
        v50 = &v49[24 * v89];
        v51 = *(_OWORD *)v48;
        *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
        *(_OWORD *)v50 = v51;
        v52 = ++v89;
        if (RawStringData)
        {
          v83 = 3;
          v84 = ", got ";
          v85 = 6;
          v53 = &v83;
          v54 = (char *)v88;
          if (v52 >= v90)
          {
            v72 = v52 + 1;
            v73 = (char *)v88 + 24 * v52 > (char *)&v83;
            if (v88 <= &v83 && v73)
            {
              v77 = (char *)&v83 - (_BYTE *)v88;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v72, 24);
              v54 = (char *)v88;
              v53 = (int *)((char *)v88 + v77);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v72, 24);
              v53 = &v83;
              v54 = (char *)v88;
            }
          }
          v55 = &v54[24 * v89];
          v56 = *(_OWORD *)v53;
          *((_QWORD *)v55 + 2) = *((_QWORD *)v53 + 2);
          *(_OWORD *)v55 = v56;
          v57 = ++v89;
          if (RawStringData)
          {
            v58 = &v82[2 * (((unint64_t)*((unsigned int *)v82 + 11) >> 23) & 1) + 8];
            if (!HIBYTE(*((_DWORD *)v82 + 11)))
              v58 = 0;
            v59 = (*((_DWORD *)v58 + 2) + *((_DWORD *)v58 + 3))
                - (unint64_t)*((unsigned int *)v58 + 2);
            v83 = 5;
            v84 = (const char *)v59;
            v60 = &v83;
            v61 = (char *)v88;
            if (v57 >= v90)
            {
              v74 = v57 + 1;
              v75 = (char *)v88 + 24 * v57 > (char *)&v83;
              if (v88 <= &v83 && v75)
              {
                v78 = (char *)&v83 - (_BYTE *)v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v74, 24);
                v61 = (char *)v88;
                v60 = (int *)((char *)v88 + v78);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v74, 24);
                v60 = &v83;
                v61 = (char *)v88;
              }
            }
            v62 = &v61[24 * v89];
            v63 = *(_OWORD *)v60;
            *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
            *(_OWORD *)v62 = v63;
            ++v89;
          }
        }
      }
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      if (v96)
      {
        v64 = __p;
        if (__p)
        {
          v65 = v95;
          v66 = __p;
          if (v95 != __p)
          {
            do
              v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
            while (v65 != v64);
            v66 = __p;
          }
          v95 = v64;
          operator delete(v66);
        }
        v18 = v92;
        if (!v92)
          goto LABEL_93;
        v67 = v93;
        v20 = v92;
        if (v93 == v92)
        {
LABEL_92:
          v93 = v18;
          operator delete(v20);
LABEL_93:
          if (v88 != v91)
            free(v88);
          return v14;
        }
        do
        {
          v69 = *--v67;
          v68 = v69;
          *v67 = 0;
          if (v69)
            MEMORY[0x20BD002D4](v68, 0x1000C8077774924);
        }
        while (v67 != v18);
LABEL_91:
        v20 = v92;
        goto LABEL_92;
      }
    }
    else
    {
      v79[0] = (const void **)"dimension operand count does not equal memref dynamic dimension count";
      v80 = 259;
      mlir::OpState::emitOpError(&v82, v79, (uint64_t)&RawStringData);
      v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      if (v96)
      {
        v39 = __p;
        if (__p)
        {
          v40 = v95;
          v41 = __p;
          if (v95 != __p)
          {
            do
              v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
            while (v40 != v39);
            v41 = __p;
          }
          v95 = v39;
          operator delete(v41);
        }
        v18 = v92;
        if (!v92)
          goto LABEL_93;
        v42 = v93;
        v20 = v92;
        if (v93 == v92)
          goto LABEL_92;
        do
        {
          v44 = *--v42;
          v43 = v44;
          *v42 = 0;
          if (v44)
            MEMORY[0x20BD002D4](v43, 0x1000C8077774924);
        }
        while (v42 != v18);
        goto LABEL_91;
      }
    }
  }
  else
  {
    v79[0] = (const void **)"result must be a memref";
    v80 = 259;
    mlir::OpState::emitOpError(&v82, v79, (uint64_t)&RawStringData);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v96)
    {
      v23 = __p;
      if (__p)
      {
        v24 = v95;
        v25 = __p;
        if (v95 != __p)
        {
          do
            v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          v25 = __p;
        }
        v95 = v23;
        operator delete(v25);
      }
      v18 = v92;
      if (!v92)
        goto LABEL_93;
      v26 = v93;
      v20 = v92;
      if (v93 == v92)
        goto LABEL_92;
      do
      {
        v28 = *--v26;
        v27 = v28;
        *v26 = 0;
        if (v28)
          MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
      }
      while (v26 != v18);
      goto LABEL_91;
    }
  }
  return v14;
}

void mlir::memref::AllocOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"memref.alloc", 12, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C029698;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAllocConst<mlir::memref::AllocOp>]";
  v73 = 114;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"memref.alloc", 12, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = &off_24C029328;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyDeadAlloc<mlir::memref::AllocOp>]";
  v73 = 113;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

void mlir::memref::AllocaOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"memref.alloca", 13, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C0296F0;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyAllocConst<mlir::memref::AllocaOp>]";
  v73 = 115;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"memref.alloca", 13, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = &off_24C029380;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyDeadAlloc<mlir::memref::AllocaOp>]";
  v73 = 114;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::memref::ReallocOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t LayerSchedule;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t RHS;
  int *v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  int *v54;
  char *v55;
  char *v56;
  __int128 v57;
  int *v58;
  char *v59;
  char *v60;
  __int128 v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Value;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  int64x2_t *v75;
  int64x2_t v76;
  int64x2_t v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  int *v86;
  char *v87;
  char *v88;
  __int128 v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v97;
  uint64_t v98;
  int64x2_t *v99;
  int64x2_t v100;
  int64x2_t v101;
  uint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  _QWORD v126[4];
  __int16 v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  const char *v131;
  uint64_t v132;
  uint64_t RawStringData;
  uint64_t v134;
  void *v135;
  unsigned int v136;
  unsigned int v137;
  _BYTE v138[96];
  void *v139;
  _QWORD *v140;
  void *__p;
  _QWORD *v142;
  char v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v129 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v128 = *(v2 - 1) & 0xFFFFFFFFFFFFFFF8;
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v129);
  v134 = v3;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v126[0] = "unsupported layout for source memref type ";
    v127 = 259;
    mlir::OpState::emitError(this, (uint64_t)v126, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      v28 = &v130;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v129);
      v29 = (char *)v135;
      if (v136 >= v137)
      {
        v106 = v136 + 1;
        if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
        {
          v117 = (char *)&v130 - (_BYTE *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v106, 24);
          v29 = (char *)v135;
          v28 = (int *)((char *)v135 + v117);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v106, 24);
          v28 = &v130;
          v29 = (char *)v135;
        }
      }
      v30 = &v29[24 * v136];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v136;
    }
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v143)
    {
      v32 = __p;
      if (__p)
      {
        v33 = v142;
        v34 = __p;
        if (v142 != __p)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = __p;
        }
        v142 = v32;
        operator delete(v34);
      }
      v23 = v139;
      if (!v139)
        goto LABEL_115;
      v35 = v140;
      v25 = v139;
      if (v140 == v139)
        goto LABEL_114;
      do
      {
        v37 = *--v35;
        v36 = v37;
        *v35 = 0;
        if (v37)
          MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
      }
      while (v35 != v23);
      goto LABEL_113;
    }
    return v19;
  }
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v128);
  v134 = v4;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v126[0] = "unsupported layout for result memref type ";
    v127 = 259;
    mlir::OpState::emitError(this, (uint64_t)v126, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      v38 = &v130;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
      v39 = (char *)v135;
      if (v136 >= v137)
      {
        v107 = v136 + 1;
        if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
        {
          v118 = (char *)&v130 - (_BYTE *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v107, 24);
          v39 = (char *)v135;
          v38 = (int *)((char *)v135 + v118);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v107, 24);
          v38 = &v130;
          v39 = (char *)v135;
        }
      }
      v40 = &v39[24 * v136];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v136;
    }
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v143)
    {
      v42 = __p;
      if (__p)
      {
        v43 = v142;
        v44 = __p;
        if (v142 != __p)
        {
          do
            v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          v44 = __p;
        }
        v142 = v42;
        operator delete(v44);
      }
      v23 = v139;
      if (!v139)
        goto LABEL_115;
      v45 = v140;
      v25 = v139;
      if (v140 == v139)
        goto LABEL_114;
      do
      {
        v47 = *--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
      }
      while (v45 != v23);
      goto LABEL_113;
    }
    return v19;
  }
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v129);
  if (LayerSchedule != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v128))
  {
    v126[0] = "different memory spaces specified for source memref type ";
    v127 = 259;
    mlir::OpState::emitError(this, (uint64_t)v126, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      v6 = &v130;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v129);
      v7 = (char *)v135;
      if (v136 >= v137)
      {
        v108 = v136 + 1;
        if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
        {
          v119 = (char *)&v130 - (_BYTE *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v108, 24);
          v7 = (char *)v135;
          v6 = (int *)((char *)v135 + v119);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v108, 24);
          v6 = &v130;
          v7 = (char *)v135;
        }
      }
      v8 = &v7[24 * v136];
      v9 = *(_OWORD *)v6;
      *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v8 = v9;
      v10 = ++v136;
      if (RawStringData)
      {
        v130 = 3;
        v131 = " and result memref type ";
        v132 = 24;
        v11 = &v130;
        v12 = (char *)v135;
        if (v10 >= v137)
        {
          v109 = v10 + 1;
          v110 = (char *)v135 + 24 * v10 > (char *)&v130;
          if (v135 <= &v130 && v110)
          {
            v120 = (char *)&v130 - (_BYTE *)v135;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v109, 24);
            v12 = (char *)v135;
            v11 = (int *)((char *)v135 + v120);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v109, 24);
            v11 = &v130;
            v12 = (char *)v135;
          }
        }
        v13 = &v12[24 * v136];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v13 = v14;
        ++v136;
        if (RawStringData)
        {
          v15 = &v130;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
          v16 = (char *)v135;
          if (v136 >= v137)
          {
            v111 = v136 + 1;
            if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
            {
              v121 = (char *)&v130 - (_BYTE *)v135;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v111, 24);
              v16 = (char *)v135;
              v15 = (int *)((char *)v135 + v121);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v111, 24);
              v15 = &v130;
              v16 = (char *)v135;
            }
          }
          v17 = &v16[24 * v136];
          v18 = *(_OWORD *)v15;
          *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
          *(_OWORD *)v17 = v18;
          ++v136;
        }
      }
    }
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v143)
    {
      v20 = __p;
      if (__p)
      {
        v21 = v142;
        v22 = __p;
        if (v142 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v142 = v20;
        operator delete(v22);
      }
      v23 = v139;
      if (!v139)
        goto LABEL_115;
      v24 = v140;
      v25 = v139;
      if (v140 == v139)
      {
LABEL_114:
        v140 = v23;
        operator delete(v25);
LABEL_115:
        if (v135 != v138)
          free(v135);
        return v19;
      }
      do
      {
        v27 = *--v24;
        v26 = v27;
        *v24 = 0;
        if (v27)
          MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
      }
      while (v24 != v23);
LABEL_113:
      v25 = v139;
      goto LABEL_114;
    }
    return v19;
  }
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v129);
  if (RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v128))
  {
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
    if (!v69)
      goto LABEL_93;
    v70 = (v69 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v70 >= 3)
    {
      v73 = v70 + 1;
      v74 = (v70 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v72 = (uint64_t *)(Value + 8 * v74);
      v75 = (int64x2_t *)(Value + 16);
      v76 = 0uLL;
      v77 = vdupq_n_s64(0x8000000000000000);
      v78 = v74;
      v79 = 0uLL;
      do
      {
        v76 = vsubq_s64(v76, vceqq_s64(v75[-1], v77));
        v79 = vsubq_s64(v79, vceqq_s64(*v75, v77));
        v75 += 2;
        v78 -= 4;
      }
      while (v78);
      v71 = vaddvq_s64(vaddq_s64(v79, v76));
      if (v73 == v74)
        goto LABEL_90;
    }
    else
    {
      v71 = 0;
      v72 = (uint64_t *)Value;
    }
    do
    {
      v80 = *v72++;
      if (v80 == 0x8000000000000000)
        ++v71;
    }
    while (v72 != (uint64_t *)(Value + 8 * v69));
LABEL_90:
    if (v71 && (*((_DWORD *)*this + 17) == 1 || !*(_QWORD *)((*this)[9] + 56)))
    {
      v126[0] = "missing dimension operand for result type ";
      v127 = 259;
      mlir::OpState::emitError(this, (uint64_t)v126, (uint64_t)&RawStringData);
      if (RawStringData)
      {
        v86 = &v130;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
        v87 = (char *)v135;
        if (v136 >= v137)
        {
          v116 = v136 + 1;
          if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
          {
            v125 = (char *)&v130 - (_BYTE *)v135;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v116, 24);
            v87 = (char *)v135;
            v86 = (int *)((char *)v135 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v116, 24);
            v86 = &v130;
            v87 = (char *)v135;
          }
        }
        v88 = &v87[24 * v136];
        v89 = *(_OWORD *)v86;
        *((_QWORD *)v88 + 2) = *((_QWORD *)v86 + 2);
        *(_OWORD *)v88 = v89;
        ++v136;
      }
      v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      if (v143)
      {
        v90 = __p;
        if (__p)
        {
          v91 = v142;
          v92 = __p;
          if (v142 != __p)
          {
            do
              v91 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v91 - 1);
            while (v91 != v90);
            v92 = __p;
          }
          v142 = v90;
          operator delete(v92);
        }
        v23 = v139;
        if (!v139)
          goto LABEL_115;
        v93 = v140;
        v25 = v139;
        if (v140 == v139)
          goto LABEL_114;
        do
        {
          v95 = *--v93;
          v94 = v95;
          *v93 = 0;
          if (v95)
            MEMORY[0x20BD002D4](v94, 0x1000C8077774924);
        }
        while (v93 != v23);
        goto LABEL_113;
      }
      return v19;
    }
LABEL_93:
    v81 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
    if (!v82)
    {
LABEL_125:
      if (*((_DWORD *)*this + 17) != 1 && *(_QWORD *)((*this)[9] + 56))
      {
        v126[0] = "unnecessary dimension operand for result type ";
        v127 = 259;
        mlir::OpState::emitError(this, (uint64_t)v126, (uint64_t)&RawStringData);
        v105 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&RawStringData, (uint64_t *)&v128);
        v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v105);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&RawStringData);
        return v19;
      }
      return 1;
    }
    v83 = (v82 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v83 >= 3)
    {
      v97 = v83 + 1;
      v98 = (v83 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v85 = (uint64_t *)(v81 + 8 * v98);
      v99 = (int64x2_t *)(v81 + 16);
      v100 = 0uLL;
      v101 = vdupq_n_s64(0x8000000000000000);
      v102 = v98;
      v103 = 0uLL;
      do
      {
        v100 = vsubq_s64(v100, vceqq_s64(v99[-1], v101));
        v103 = vsubq_s64(v103, vceqq_s64(*v99, v101));
        v99 += 2;
        v102 -= 4;
      }
      while (v102);
      v84 = vaddvq_s64(vaddq_s64(v103, v100));
      if (v97 == v98)
        goto LABEL_124;
    }
    else
    {
      v84 = 0;
      v85 = (uint64_t *)v81;
    }
    do
    {
      v104 = *v85++;
      if (v104 == 0x8000000000000000)
        ++v84;
    }
    while (v85 != (uint64_t *)(v81 + 8 * v82));
LABEL_124:
    if (v84)
      return 1;
    goto LABEL_125;
  }
  v126[0] = "different element types specified for source memref type ";
  v127 = 259;
  mlir::OpState::emitError(this, (uint64_t)v126, (uint64_t)&RawStringData);
  if (RawStringData)
  {
    v49 = &v130;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v129);
    v50 = (char *)v135;
    if (v136 >= v137)
    {
      v112 = v136 + 1;
      if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
      {
        v122 = (char *)&v130 - (_BYTE *)v135;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v112, 24);
        v50 = (char *)v135;
        v49 = (int *)((char *)v135 + v122);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v112, 24);
        v49 = &v130;
        v50 = (char *)v135;
      }
    }
    v51 = &v50[24 * v136];
    v52 = *(_OWORD *)v49;
    *((_QWORD *)v51 + 2) = *((_QWORD *)v49 + 2);
    *(_OWORD *)v51 = v52;
    v53 = ++v136;
    if (RawStringData)
    {
      v130 = 3;
      v131 = " and result memref type ";
      v132 = 24;
      v54 = &v130;
      v55 = (char *)v135;
      if (v53 >= v137)
      {
        v113 = v53 + 1;
        v114 = (char *)v135 + 24 * v53 > (char *)&v130;
        if (v135 <= &v130 && v114)
        {
          v123 = (char *)&v130 - (_BYTE *)v135;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v113, 24);
          v55 = (char *)v135;
          v54 = (int *)((char *)v135 + v123);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v113, 24);
          v54 = &v130;
          v55 = (char *)v135;
        }
      }
      v56 = &v55[24 * v136];
      v57 = *(_OWORD *)v54;
      *((_QWORD *)v56 + 2) = *((_QWORD *)v54 + 2);
      *(_OWORD *)v56 = v57;
      ++v136;
      if (RawStringData)
      {
        v58 = &v130;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v130, v128);
        v59 = (char *)v135;
        if (v136 >= v137)
        {
          v115 = v136 + 1;
          if (v135 <= &v130 && (char *)v135 + 24 * v136 > (char *)&v130)
          {
            v124 = (char *)&v130 - (_BYTE *)v135;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v115, 24);
            v59 = (char *)v135;
            v58 = (int *)((char *)v135 + v124);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v138, v115, 24);
            v58 = &v130;
            v59 = (char *)v135;
          }
        }
        v60 = &v59[24 * v136];
        v61 = *(_OWORD *)v58;
        *((_QWORD *)v60 + 2) = *((_QWORD *)v58 + 2);
        *(_OWORD *)v60 = v61;
        ++v136;
      }
    }
  }
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  if (v143)
  {
    v62 = __p;
    if (__p)
    {
      v63 = v142;
      v64 = __p;
      if (v142 != __p)
      {
        do
          v63 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v63 - 1);
        while (v63 != v62);
        v64 = __p;
      }
      v142 = v62;
      operator delete(v64);
    }
    v23 = v139;
    if (!v139)
      goto LABEL_115;
    v65 = v140;
    v25 = v139;
    if (v140 == v139)
      goto LABEL_114;
    do
    {
      v67 = *--v65;
      v66 = v67;
      *v65 = 0;
      if (v67)
        MEMORY[0x20BD002D4](v66, 0x1000C8077774924);
    }
    while (v65 != v23);
    goto LABEL_113;
  }
  return v19;
}

void mlir::memref::ReallocOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"memref.realloc", 14, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C0293D8;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SimplifyDeadAlloc<mlir::memref::ReallocOp>]";
  v39 = 115;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::memref::AllocaScopeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  int v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  mlir::Operation *v15;
  mlir::ArrayAttr *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v20[4];
  const char *v21;
  uint64_t v22;

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
    v6 = *((_DWORD *)*this + 9);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
    v6 = *((_DWORD *)*this + 9);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v8 = *((_QWORD *)v7 + 4);
  if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 4)
  {
    *(_BYTE *)(v8 + 4) = 40;
    *(_DWORD *)v8 = 540945696;
    *((_QWORD *)v7 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v7, " -> (", 5uLL);
  }
  v9 = *((unsigned int *)*this + 9);
  v10 = (char *)*this - 16;
  if (!(_DWORD)v9)
    v10 = 0;
  v21 = v10;
  v22 = v9;
  mlir::OperandRange::getTypes((uint64_t *)&v21, v20);
  v21 = ", ";
  v22 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v20[0], v20[1], v20[2], v20[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v21);
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ")", 1uLL);
  }
  else
  {
    *v12 = 41;
    ++*((_QWORD *)v11 + 4);
  }
LABEL_13:
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 0, v6 != 0, 0);
  v15 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v20[0] = mlir::Operation::getAttrDictionary(v15);
    v16 = (mlir::ArrayAttr *)v20;
  }
  else
  {
    v16 = (mlir::Operation *)((char *)v15 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v16);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v18, 0, 0);
}

BOOL mlir::memref::AllocaScopeOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)a2 + 224, 1uLL);
  v4 = (_QWORD *)mlir::OperationState::addRegion(a2);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, (uint64_t)a2 + 64)
    || !(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    return 0;
  }
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  mlir::impl::ensureRegionTerminator(v4, v5, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::buildTerminator);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
}

__n128 mlir::memref::AllocaScopeOp::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 *v11;
  __n128 result;
  unint64_t v13;
  BOOL v14;
  char *v15;
  unint64_t v16;
  unint64_t v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = *(unsigned int *)(*(_QWORD *)a1 + 36);
    if ((_DWORD)v4)
      v5 = *(_QWORD *)a1 - 16;
    else
      v5 = 0;
    v16 = 0;
    v6 = (__n128 *)&v16;
    mlir::ValueRange::ValueRange(v17, v5, v4);
    v7 = *(unsigned int *)(a3 + 8);
    v8 = *(_QWORD *)a3;
    if (v7 >= *(_DWORD *)(a3 + 12))
    {
LABEL_12:
      v13 = v7 + 1;
      v14 = v8 + 24 * v7 > (unint64_t)&v16;
      if (v8 <= (unint64_t)&v16 && v14)
      {
        v15 = (char *)&v17[-1] - v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13, 24);
        v8 = *(_QWORD *)a3;
        v6 = (__n128 *)&v15[*(_QWORD *)a3];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13, 24);
        v8 = *(_QWORD *)a3;
        v6 = (__n128 *)&v16;
      }
    }
  }
  else
  {
    v9 = *(unsigned int *)(*(_QWORD *)a1 + 44);
    if ((v9 & 0x7FFFFF) != 0)
      v10 = ((*(_QWORD *)a1 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40);
    else
      v10 = 0;
    v16 = v10;
    v6 = (__n128 *)&v16;
    mlir::ValueRange::ValueRange(v17, 0, 0);
    v7 = *(unsigned int *)(a3 + 8);
    v8 = *(_QWORD *)a3;
    if (v7 >= *(_DWORD *)(a3 + 12))
      goto LABEL_12;
  }
  v11 = (__n128 *)(v8 + 24 * *(unsigned int *)(a3 + 8));
  result = *v6;
  v11[1].n128_u64[0] = v6[1].n128_u64[0];
  *v11 = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

void mlir::memref::AllocaScopeOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  mlir::RewritePatternSet::addImpl<AllocaScopeInliner,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<AllocaScopeHoister,mlir::MLIRContext *&>(a1, 0, 0, &v3);
}

uint64_t mlir::memref::AssumeAlignmentOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const void **v14[4];
  __int16 v15;
  uint64_t *v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v14[0] = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(v14, (llvm::APInt *)&v16);
  if (v17 > 0x40)
  {
    v2 = *v16;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    LODWORD(v2) = (_DWORD)v16;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.i32[0] == 1)
    return 1;
  v14[0] = (const void **)"alignment must be power of 2";
  v15 = 259;
  mlir::OpState::emitOpError(this, v14, (uint64_t)&v16);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
  if (v16)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
  if (v24)
  {
    v5 = __p;
    if (__p)
    {
      v6 = v23;
      v7 = __p;
      if (v23 != __p)
      {
        do
          v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        v7 = __p;
      }
      v23 = v5;
      operator delete(v7);
    }
    v8 = v20;
    if (v20)
    {
      v9 = v21;
      v10 = v20;
      if (v21 != v20)
      {
        do
        {
          v12 = *--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            MEMORY[0x20BD002D4](v11, 0x1000C8077774924);
        }
        while (v9 != v8);
        v10 = v20;
      }
      v21 = v8;
      operator delete(v10);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v4;
}

uint64_t mlir::memref::CastOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "cast", 4);
}

uint64_t mlir::memref::CastOp::canFoldIntoConsumerOp(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  uint64_t RHS;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *Value;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  void *v33;
  uint64_t v34;
  _QWORD v35[5];

  v35[4] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v1 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v1 = 0;
  v29 = v1;
  v2 = *(_QWORD *)(a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v2 = 0;
  v28 = v2;
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v29);
  if (RHS != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28))
    return 0;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
  v6 = v5;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  if (v6 != v7)
    return 0;
  v26 = 0;
  v27 = 0;
  v33 = v35;
  v34 = 0x400000000;
  v30 = v32;
  v31 = 0x400000000;
  if (mlir::getStridesAndOffset(v29, (uint64_t)&v33, &v27)
    && mlir::getStridesAndOffset(v28, (uint64_t)&v30, &v26))
  {
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
    v10 = v9;
    v11 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
    if (v10 && v12)
    {
      v13 = 8 * v12 - 8;
      v14 = 8 * v10 - 8;
      while (*Value != 0x8000000000000000 || *v11 == 0x8000000000000000)
      {
        if (v14)
        {
          ++Value;
          ++v11;
          v16 = v13;
          v13 -= 8;
          v14 -= 8;
          if (v16)
            continue;
        }
        goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      if (v27 != 0x8000000000000000 || v26 == 0x8000000000000000)
      {
        v18 = 1;
        if ((_DWORD)v34 && (_DWORD)v31)
        {
          v19 = v33;
          v20 = v30;
          v21 = 8 * v31 - 8;
          v22 = 8 * v34 - 8;
          do
          {
            v23 = *v19 != 0x8000000000000000 || *v20 == 0x8000000000000000;
            v18 = v23;
            if (!v23)
              break;
            v18 = 1;
            if (!v22)
              break;
            ++v19;
            ++v20;
            v24 = v21;
            v21 -= 8;
            v22 -= 8;
          }
          while (v24);
        }
        goto LABEL_45;
      }
    }
  }
  v18 = 0;
LABEL_45:
  if (v30 != v32)
    free(v30);
  if (v33 != v35)
    free(v33);
  return v18;
}

BOOL mlir::ShapedType::isDynamic(mlir::ShapedType *this)
{
  return this == (mlir::ShapedType *)0x8000000000000000;
}

BOOL mlir::memref::CastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t RHS;
  uint64_t RawStringData;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v22;
  void *v23;
  uint64_t LayerSchedule;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Value;
  uint64_t v33;
  BOOL v35;
  uint64_t LHS;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[32];
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[5];

  result = 0;
  v49[4] = *MEMORY[0x24BDAC8D0];
  if (a2 == 1 && a4 == 1)
  {
    v7 = mlir::TypeRange::dereference_iterator(a1, 0);
    v8 = mlir::TypeRange::dereference_iterator(a3, 0);
    if (*(_UNKNOWN **)(*(_QWORD *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v9 = v7;
    else
      v9 = 0;
    v43 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v10 = v8;
    else
      v10 = 0;
    v42 = v10;
    v11 = *(void **)(*(_QWORD *)v7 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
      v12 = v7;
    else
      v12 = 0;
    v41 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
      v13 = v8;
    else
      v13 = 0;
    v40 = v13;
    if (v9)
    {
      if (v10)
      {
        RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v43);
        if (RHS != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v42))
          return 0;
        RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v43);
        if (RawStringData == mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v42))
          goto LABEL_49;
        v38 = 0;
        v39 = 0;
        v47 = v49;
        v48 = 0x400000000;
        v44 = v46;
        v45 = 0x400000000;
        if (mlir::getStridesAndOffset(v43, (uint64_t)&v47, &v39)
          && mlir::getStridesAndOffset(v42, (uint64_t)&v44, &v38)
          && (_DWORD)v48 == (_DWORD)v45
          && (v39 == 0x8000000000000000 || v38 == 0x8000000000000000 || v39 == v38))
        {
          if (!(_DWORD)v48)
          {
LABEL_74:
            v22 = 1;
            v23 = v44;
            if (v44 == v46)
            {
LABEL_46:
              if (v47 != v49)
                free(v47);
              if (v22)
              {
LABEL_49:
                LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v43);
                if (LayerSchedule == ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v42))
                {
                  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
                  v26 = v25;
                  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
                  if (v26 == v27)
                  {
                    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
                    if (!v28)
                      return 1;
                    v29 = 0;
                    v30 = 8 * v28;
                    while (1)
                    {
                      v31 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43) + v29);
                      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
                      if (v31 != 0x8000000000000000)
                      {
                        v33 = *(_QWORD *)(Value + v29);
                        if (v33 != 0x8000000000000000 && v31 != v33)
                          break;
                      }
                      v29 += 8;
                      result = 1;
                      if (v30 == v29)
                        return result;
                    }
                  }
                }
              }
              return 0;
            }
LABEL_45:
            free(v23);
            goto LABEL_46;
          }
          v16 = v47;
          v17 = v44;
          v18 = 8 * v48;
          while (*v16 == 0x8000000000000000 || *v17 == 0x8000000000000000 || *v16 == *v17)
          {
            ++v16;
            ++v17;
            v18 -= 8;
            if (!v18)
              goto LABEL_74;
          }
        }
        v22 = 0;
        v23 = v44;
        if (v44 == v46)
          goto LABEL_46;
        goto LABEL_45;
      }
      if (v13)
        v19 = v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
      else
        v19 = 1;
      if (v19)
        return 0;
      v20 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v43);
      if (v42)
        goto LABEL_36;
    }
    else
    {
      if (!v12)
        return 0;
      if (v10)
      {
        if (v13)
          return 0;
      }
      else
      {
        if (v13)
          v35 = v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
        else
          v35 = 1;
        if (v35)
          return 0;
      }
      v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
      if (v42)
      {
LABEL_36:
        if (v20 != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v42))
          return 0;
LABEL_68:
        if (v43)
        {
          LHS = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v43);
          if (v42)
          {
LABEL_70:
            v37 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v42);
            return LHS == v37;
          }
        }
        else
        {
          LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v41);
          if (v42)
            goto LABEL_70;
        }
        v37 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v40);
        return LHS == v37;
      }
    }
    if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40))
      return 0;
    goto LABEL_68;
  }
  return result;
}

uint64_t mlir::memref::CastOp::fold(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t DefiningOp;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) == 0)
    return 4;
  v2 = *(unsigned int *)(v1 + 68);
  if (!(_DWORD)v2)
    return 4;
  v4 = 0;
  v5 = *(uint64_t **)(v1 + 72);
  v6 = &v5[4 * v2];
  do
  {
    while (1)
    {
      v12 = v5[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (!DefiningOp)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
        break;
      if (!v5[3])
        break;
      v8 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
        break;
      v9 = (uint64_t *)v5[1];
      if (v9)
      {
        *v9 = *v5;
        if (*v5)
          *(_QWORD *)(*v5 + 8) = v5[1];
      }
      v5[3] = (uint64_t)v8;
      v10 = *v8;
      *v5 = *v8;
      v5[1] = (uint64_t)v8;
      if (v10)
        *(_QWORD *)(v10 + 8) = v5;
      *v8 = (uint64_t)v5;
      v5 += 4;
      v4 = 1;
      if (v5 == v6)
        return (*a1 - 16) | 4;
    }
    v5 += 4;
  }
  while (v5 != v6);
  if ((v4 & 1) == 0)
    return 4;
  return (*a1 - 16) | 4;
}

void mlir::memref::CopyOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"memref.copy", 11, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C028818;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldCopyOfCast]";
  v73 = 87;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"memref.copy", 11, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = &off_24C0286B8;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::FoldSelfCopy]";
  v73 = 85;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::memref::CopyOp::fold(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t DefiningOp;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0 && (v2 = *(unsigned int *)(v1 + 68), (_DWORD)v2))
  {
    v3 = 0;
    v4 = *(uint64_t **)(v1 + 72);
    v5 = 32 * v2;
    do
    {
      v13 = v4[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (DefiningOp)
      {
        v7 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
        v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id ? DefiningOp : 0;
        if (v7 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id
          && mlir::memref::CastOp::canFoldIntoConsumerOp(DefiningOp))
        {
          v9 = *(uint64_t **)(*(_QWORD *)(v8 + 72) + 24);
          v10 = (uint64_t *)v4[1];
          if (v10)
          {
            *v10 = *v4;
            if (*v4)
              *(_QWORD *)(*v4 + 8) = v4[1];
          }
          v4[3] = (uint64_t)v9;
          v11 = *v9;
          *v4 = *v9;
          v4[1] = (uint64_t)v9;
          if (v11)
            *(_QWORD *)(v11 + 8) = v4;
          *v9 = (uint64_t)v4;
          v3 = 1;
        }
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t mlir::memref::DeallocOp::fold(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t DefiningOp;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0 && (v2 = *(unsigned int *)(v1 + 68), (_DWORD)v2))
  {
    v3 = 0;
    v4 = *(uint64_t **)(v1 + 72);
    v5 = 32 * v2;
    do
    {
      v11 = v4[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
        {
          if (v4[3])
          {
            v7 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
            if (*(_UNKNOWN **)(*(_QWORD *)(v7[1] & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
            {
              v8 = (uint64_t *)v4[1];
              if (v8)
              {
                *v8 = *v4;
                if (*v4)
                  *(_QWORD *)(*v4 + 8) = v4[1];
              }
              v4[3] = (uint64_t)v7;
              v9 = *v7;
              *v4 = *v7;
              v4[1] = (uint64_t)v7;
              if (v9)
                *(_QWORD *)(v9 + 8) = v4;
              *v7 = (uint64_t)v4;
              v3 = 1;
            }
          }
        }
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t mlir::memref::DimOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "dim", 3);
}

BOOL mlir::memref::DimOp::getSpeculatability(mlir::memref::DimOp *this)
{
  char v2;

  mlir::getConstantIntValue(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56) | 4);
  if (!v2)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != 0;
  return 0;
}

void mlir::memref::SubViewOp::getDroppedDims(mlir::memref::SubViewOp *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  void *v15;
  unsigned int v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v5 = *(_QWORD *)this - 16;
  else
    v5 = 0;
  v6 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(this, (uint64_t)&v15);
  computeMemRefRankReductionMask(&v13, v4, v6, (uint64_t)v15, v16);
  if (v15 != v17)
    free(v15);
  v7 = v13;
  if ((v13 & 1) != 0)
  {
    *a2 = v13;
    return;
  }
  v8 = (_QWORD *)operator new();
  v9 = v8;
  v10 = v8 + 2;
  *v8 = v8 + 2;
  v8[1] = 0x600000000;
  if (v8 != (_QWORD *)v7)
  {
    v11 = *(_DWORD *)(v7 + 8);
    if (v11)
    {
      if (v11 < 7)
      {
        v12 = *(_DWORD *)(v7 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, v8 + 2, *(unsigned int *)(v7 + 8), 8);
        v12 = *(_DWORD *)(v7 + 8);
        if (!v12)
        {
LABEL_15:
          *((_DWORD *)v9 + 2) = v11;
          goto LABEL_16;
        }
        v10 = (void *)*v9;
      }
      memcpy(v10, *(const void **)v7, 8 * v12);
      goto LABEL_15;
    }
  }
LABEL_16:
  *((_DWORD *)v9 + 16) = *(_DWORD *)(v7 + 64);
  *a2 = v9;
  if (v14 && v7)
  {
    if (*(_QWORD *)v7 != v7 + 16)
      free(*(void **)v7);
    MEMORY[0x20BD002F8](v7, 0x1080C40EF38A13ELL);
  }
}

void computeMemRefRankReductionMask(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int8x8_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  int8x8_t *v24;
  unint64_t v25;
  unsigned int v26;
  int8x8_t *v27;
  uint8x8_t v28;
  unint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  int32x4_t v32;
  uint64_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x8_t *v39;
  int8x8_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  void *v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t **v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t **v86;
  uint64_t **v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  int v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t **v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t **v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t **v106;
  uint64_t **v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  _BYTE *v112;
  int8x8_t *v113;
  unint64_t v114;
  unsigned int v115;
  int8x8_t *v116;
  uint8x8_t v117;
  unint64_t v118;
  uint64_t v119;
  int8x16_t *v120;
  int32x4_t v121;
  uint64_t v122;
  int32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x8_t *v128;
  int8x8_t v129;
  uint8x8_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t **v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _BYTE v147[48];
  uint64_t **v148;
  uint64_t v149;
  _QWORD v150[8];

  v150[6] = *MEMORY[0x24BDAC8D0];
  v143 = a3;
  v144 = a2;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v144);
  v9 = v8;
  if (v8 <= 0x39)
  {
    v10 = (v8 << 58) | 1;
    goto LABEL_9;
  }
  v11 = operator new();
  v10 = v11;
  v12 = v9 + 63;
  v13 = (v9 + 63) >> 6;
  *(_QWORD *)v11 = v11 + 16;
  *(_DWORD *)(v11 + 12) = 6;
  if ((v9 + 63) >= 0x1C0)
  {
    *(_DWORD *)(v11 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, (void *)(v11 + 16), v12 >> 6, 8);
    v14 = *(int8x8_t **)v10;
    v15 = 8 * v13;
LABEL_7:
    bzero(v14, v15);
    goto LABEL_8;
  }
  if (v12 >= 0x40)
  {
    v14 = (int8x8_t *)(v11 + 16);
    v15 = 8 * v13;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(v10 + 8) = v13;
  *(_DWORD *)(v10 + 64) = v9;
LABEL_9:
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v144);
  v17 = v16;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v143);
  if (v17 == v18)
  {
LABEL_31:
    *(_QWORD *)a1 = v10;
    a1[8] = 1;
    return;
  }
  if (a5)
  {
    v19 = 0;
    v20 = 8 * a5;
    do
    {
      v21 = *(_QWORD *)(a4 + 8 * v19);
      if ((v21 & 4) == 0)
      {
        v22 = (uint64_t **)(v21 & 0xFFFFFFFFFFFFFFF8);
        if (v22)
        {
          v148 = v22;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v148) == 1)
          {
            if ((v10 & 1) != 0)
              v10 = v10 & 0xFC00000000000000 | (2
                                                * (((v10 >> 1) & ~(-1 << (v10 >> 58)) | (1 << v19)) & ~(-1 << (v10 >> 58)))) | 1;
            else
              *(_QWORD *)(*(_QWORD *)v10 + 8 * (v19 >> 6)) |= 1 << v19;
          }
        }
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  if ((v10 & 1) != 0)
  {
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)((v10 >> 1) & ~(-1 << (v10 >> 58))));
    v28.i16[0] = vaddlv_u8(v28);
    v26 = v28.i32[0];
    goto LABEL_30;
  }
  v23 = *(unsigned int *)(v10 + 8);
  if (!(_DWORD)v23)
  {
    v26 = 0;
    goto LABEL_30;
  }
  v24 = *(int8x8_t **)v10;
  v25 = (v23 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v25 < 7)
  {
    v26 = 0;
    v27 = *(int8x8_t **)v10;
LABEL_28:
    v39 = &v24[v23];
    do
    {
      v40 = *v27++;
      v41 = (uint8x8_t)vcnt_s8(v40);
      v41.i16[0] = vaddlv_u8(v41);
      v26 += v41.i32[0];
    }
    while (v27 != v39);
    goto LABEL_30;
  }
  v29 = v25 + 1;
  v30 = (v25 + 1) & 0x3FFFFFFFFFFFFFF8;
  v27 = &v24[v30];
  v31 = (int8x16_t *)&v24[4];
  v32 = 0uLL;
  v33 = v30;
  v34 = 0uLL;
  do
  {
    v35 = v31[-2];
    v36 = v31[-1];
    v37 = *v31;
    v38 = v31[1];
    v31 += 4;
    v32 = vaddq_s32(v32, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v35)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v36))))));
    v34 = vaddq_s32(v34, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v37)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v38))))));
    v33 -= 8;
  }
  while (v33);
  v26 = vaddvq_s32(vaddq_s32(v34, v32));
  if (v29 != v30)
    goto LABEL_28;
LABEL_30:
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v143);
  v43 = v42 + v26;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v144);
  if (v43 == v44)
    goto LABEL_31;
  v148 = (uint64_t **)v150;
  v149 = 0x600000000;
  v145 = v147;
  v146 = 0x600000000;
  v141 = 0;
  v142 = 0;
  if (mlir::getStridesAndOffset(v144, (uint64_t)&v148, &v142)
    && mlir::getStridesAndOffset(v143, (uint64_t)&v145, &v141))
  {
    v134 = a1;
    v45 = v148;
    v139 = 0;
    v140 = 0;
    v138 = &v139;
    if ((_DWORD)v149)
    {
      v46 = &v148[v149];
      do
      {
        v47 = *v45;
        v48 = v139;
        v49 = &v139;
        v50 = &v139;
        if (v139)
        {
          while (1)
          {
            while (1)
            {
              v50 = (uint64_t **)v48;
              v51 = v48[4];
              if ((uint64_t)v47 >= v51)
                break;
              v48 = *v50;
              v49 = v50;
              if (!*v50)
                goto LABEL_46;
            }
            if (v51 >= (uint64_t)v47)
              break;
            v48 = v50[1];
            if (!v48)
            {
              v49 = v50 + 1;
              goto LABEL_46;
            }
          }
        }
        else
        {
LABEL_46:
          v52 = (uint64_t *)v50;
          v50 = (uint64_t **)operator new(0x30uLL);
          v50[4] = v47;
          *((_DWORD *)v50 + 10) = 0;
          *v50 = 0;
          v50[1] = 0;
          v50[2] = v52;
          *v49 = (uint64_t *)v50;
          v53 = (uint64_t *)v50;
          if (*v138)
          {
            v138 = (uint64_t **)*v138;
            v53 = *v49;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v139, v53);
          ++v140;
        }
        ++*((_DWORD *)v50 + 10);
        ++v45;
      }
      while (v45 != v46);
    }
    v55 = (uint64_t **)v145;
    v136 = 0;
    v137 = 0;
    v135 = &v136;
    if ((_DWORD)v146)
    {
      v56 = (uint64_t **)((char *)v145 + 8 * v146);
      do
      {
        v57 = *v55;
        v58 = v136;
        v59 = &v136;
        v60 = &v136;
        if (v136)
        {
          while (1)
          {
            while (1)
            {
              v60 = (uint64_t **)v58;
              v61 = v58[4];
              if ((uint64_t)v57 >= v61)
                break;
              v58 = *v60;
              v59 = v60;
              if (!*v60)
                goto LABEL_68;
            }
            if (v61 >= (uint64_t)v57)
              break;
            v58 = v60[1];
            if (!v58)
            {
              v59 = v60 + 1;
              goto LABEL_68;
            }
          }
        }
        else
        {
LABEL_68:
          v62 = (uint64_t *)v60;
          v60 = (uint64_t **)operator new(0x30uLL);
          v60[4] = v57;
          *((_DWORD *)v60 + 10) = 0;
          *v60 = 0;
          v60[1] = 0;
          v60[2] = v62;
          *v59 = (uint64_t *)v60;
          v63 = (uint64_t *)v60;
          if (*v135)
          {
            v135 = (uint64_t **)*v135;
            v63 = *v59;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v136, v63);
          ++v137;
        }
        ++*((_DWORD *)v60 + 10);
        ++v55;
      }
      while (v55 != v56);
    }
    if ((v10 & 1) != 0)
    {
      v64 = v10 >> 58;
      if (!(v10 >> 58))
        goto LABEL_158;
    }
    else
    {
      v64 = *(unsigned int *)(v10 + 64);
      if (!*(_DWORD *)(v10 + 64))
      {
LABEL_158:
        if ((v10 & 1) != 0)
        {
          v117 = (uint8x8_t)vcnt_s8((int8x8_t)((v10 >> 1) & ~(-1 << (v10 >> 58))));
          v117.i16[0] = vaddlv_u8(v117);
          v115 = v117.i32[0];
          v112 = v134;
        }
        else
        {
          v111 = *(unsigned int *)(v10 + 8);
          v112 = v134;
          if ((_DWORD)v111)
          {
            v113 = *(int8x8_t **)v10;
            v114 = (v111 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            if (v114 >= 7)
            {
              v118 = v114 + 1;
              v119 = (v114 + 1) & 0x3FFFFFFFFFFFFFF8;
              v116 = &v113[v119];
              v120 = (int8x16_t *)&v113[4];
              v121 = 0uLL;
              v122 = v119;
              v123 = 0uLL;
              do
              {
                v124 = v120[-2];
                v125 = v120[-1];
                v126 = *v120;
                v127 = v120[1];
                v120 += 4;
                v121 = vaddq_s32(v121, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v124)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v125))))));
                v123 = vaddq_s32(v123, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v126)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v127))))));
                v122 -= 8;
              }
              while (v122);
              v115 = vaddvq_s32(vaddq_s32(v123, v121));
              if (v118 == v119)
                goto LABEL_169;
            }
            else
            {
              v115 = 0;
              v116 = *(int8x8_t **)v10;
            }
            v128 = &v113[v111];
            do
            {
              v129 = *v116++;
              v130 = (uint8x8_t)vcnt_s8(v129);
              v130.i16[0] = vaddlv_u8(v130);
              v115 += v130.i32[0];
            }
            while (v116 != v128);
          }
          else
          {
            v115 = 0;
          }
        }
LABEL_169:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v143);
        v132 = v131 + v115;
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v144);
        if (v132 == v133)
        {
          *(_QWORD *)v112 = v10;
          v10 = 1;
          v112[8] = 1;
        }
        else
        {
          *v112 = 0;
          v112[8] = 0;
        }
LABEL_172:
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v135, v136);
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v138, v139);
        v54 = v145;
        if (v145 == v147)
          goto LABEL_50;
        goto LABEL_49;
      }
    }
    v65 = 0;
    while (1)
    {
      if ((v10 & 1) != 0)
      {
        if (((v10 >> 1) & ~(-1 << (v10 >> 58)) & (1 << v65)) == 0)
          goto LABEL_76;
      }
      else if ((*(_QWORD *)(*(_QWORD *)v10 + 8 * (v65 >> 6)) & (1 << v65)) == 0)
      {
        goto LABEL_76;
      }
      v66 = v148[v65];
      v67 = v139;
      v68 = &v139;
      v69 = &v139;
      if (v139)
      {
        while (1)
        {
          while (1)
          {
            v69 = (uint64_t **)v67;
            v70 = v67[4];
            if ((uint64_t)v66 >= v70)
              break;
            v67 = *v69;
            v68 = v69;
            if (!*v69)
              goto LABEL_88;
          }
          if (v70 >= (uint64_t)v66)
            break;
          v67 = v69[1];
          if (!v67)
          {
            v68 = v69 + 1;
            goto LABEL_88;
          }
        }
      }
      else
      {
LABEL_88:
        v71 = (uint64_t *)v69;
        v69 = (uint64_t **)operator new(0x30uLL);
        v69[4] = v66;
        *((_DWORD *)v69 + 10) = 0;
        *v69 = 0;
        v69[1] = 0;
        v69[2] = v71;
        *v68 = (uint64_t *)v69;
        v72 = (uint64_t *)v69;
        if (*v138)
        {
          v138 = (uint64_t **)*v138;
          v72 = *v68;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v139, v72);
        ++v140;
      }
      v73 = *((_DWORD *)v69 + 10);
      v74 = v136;
      v75 = &v136;
      v76 = &v136;
      if (v136)
      {
        while (1)
        {
          while (1)
          {
            v76 = (uint64_t **)v74;
            v77 = v74[4];
            if ((uint64_t)v66 >= v77)
              break;
            v74 = *v76;
            v75 = v76;
            if (!*v76)
              goto LABEL_98;
          }
          if (v77 >= (uint64_t)v66)
            break;
          v74 = v76[1];
          if (!v74)
          {
            v75 = v76 + 1;
            goto LABEL_98;
          }
        }
      }
      else
      {
LABEL_98:
        v78 = (uint64_t *)v76;
        v76 = (uint64_t **)operator new(0x30uLL);
        v76[4] = v66;
        *((_DWORD *)v76 + 10) = 0;
        *v76 = 0;
        v76[1] = 0;
        v76[2] = v78;
        *v75 = (uint64_t *)v76;
        v79 = (uint64_t *)v76;
        if (*v135)
        {
          v135 = (uint64_t **)*v135;
          v79 = *v75;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v136, v79);
        ++v137;
      }
      v80 = v139;
      if (v73 <= *((_DWORD *)v76 + 10))
      {
        v86 = &v139;
        v87 = &v139;
        if (v139)
        {
          while (1)
          {
            while (1)
            {
              v87 = (uint64_t **)v80;
              v88 = v80[4];
              if ((uint64_t)v66 >= v88)
                break;
              v80 = *v87;
              v86 = v87;
              if (!*v87)
                goto LABEL_120;
            }
            if (v88 >= (uint64_t)v66)
              break;
            v80 = v87[1];
            if (!v80)
            {
              v86 = v87 + 1;
              goto LABEL_120;
            }
          }
        }
        else
        {
LABEL_120:
          v89 = (uint64_t *)v87;
          v87 = (uint64_t **)operator new(0x30uLL);
          v87[4] = v66;
          *((_DWORD *)v87 + 10) = 0;
          *v87 = 0;
          v87[1] = 0;
          v87[2] = v89;
          *v86 = (uint64_t *)v87;
          v90 = (uint64_t *)v87;
          if (*v138)
          {
            v138 = (uint64_t **)*v138;
            v90 = *v86;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v139, v90);
          ++v140;
        }
        v91 = *((_DWORD *)v87 + 10);
        v92 = v136;
        v93 = &v136;
        v94 = &v136;
        if (v136)
        {
          while (1)
          {
            while (1)
            {
              v94 = (uint64_t **)v92;
              v95 = v92[4];
              if ((uint64_t)v66 >= v95)
                break;
              v92 = *v94;
              v93 = v94;
              if (!*v94)
                goto LABEL_130;
            }
            if (v95 >= (uint64_t)v66)
              break;
            v92 = v94[1];
            if (!v92)
            {
              v93 = v94 + 1;
              goto LABEL_130;
            }
          }
        }
        else
        {
LABEL_130:
          v96 = (uint64_t *)v94;
          v94 = (uint64_t **)operator new(0x30uLL);
          v94[4] = v66;
          *((_DWORD *)v94 + 10) = 0;
          *v94 = 0;
          v94[1] = 0;
          v94[2] = v96;
          *v93 = (uint64_t *)v94;
          v97 = (uint64_t *)v94;
          if (*v135)
          {
            v135 = (uint64_t **)*v135;
            v97 = *v93;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v136, v97);
          ++v137;
        }
        if (v91 == *((_DWORD *)v94 + 10))
        {
          if ((v10 & 1) != 0)
            v10 = ((2 * ~((1 << v65) | (-1 << (v10 >> 58)))) | 0xFC00000000000000) & v10 | 1;
          else
            *(_QWORD *)(*(_QWORD *)v10 + 8 * (v65 >> 6)) &= ~(1 << v65);
        }
        else
        {
          v98 = v139;
          v99 = &v139;
          v100 = &v139;
          if (v139)
          {
            while (1)
            {
              while (1)
              {
                v100 = (uint64_t **)v98;
                v101 = v98[4];
                if ((uint64_t)v66 >= v101)
                  break;
                v98 = *v100;
                v99 = v100;
                if (!*v100)
                  goto LABEL_143;
              }
              if (v101 >= (uint64_t)v66)
                break;
              v98 = v100[1];
              if (!v98)
              {
                v99 = v100 + 1;
                goto LABEL_143;
              }
            }
          }
          else
          {
LABEL_143:
            v102 = (uint64_t *)v100;
            v100 = (uint64_t **)operator new(0x30uLL);
            v100[4] = v66;
            *((_DWORD *)v100 + 10) = 0;
            *v100 = 0;
            v100[1] = 0;
            v100[2] = v102;
            *v99 = (uint64_t *)v100;
            v103 = (uint64_t *)v100;
            if (*v138)
            {
              v138 = (uint64_t **)*v138;
              v103 = *v99;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v139, v103);
            ++v140;
          }
          v104 = *((_DWORD *)v100 + 10);
          v105 = v136;
          v106 = &v136;
          v107 = &v136;
          if (v136)
          {
            while (1)
            {
              while (1)
              {
                v107 = (uint64_t **)v105;
                v108 = v105[4];
                if ((uint64_t)v66 >= v108)
                  break;
                v105 = *v107;
                v106 = v107;
                if (!*v107)
                  goto LABEL_153;
              }
              if (v108 >= (uint64_t)v66)
                break;
              v105 = v107[1];
              if (!v105)
              {
                v106 = v107 + 1;
                goto LABEL_153;
              }
            }
          }
          else
          {
LABEL_153:
            v109 = (uint64_t *)v107;
            v107 = (uint64_t **)operator new(0x30uLL);
            v107[4] = v66;
            *((_DWORD *)v107 + 10) = 0;
            *v107 = 0;
            v107[1] = 0;
            v107[2] = v109;
            *v106 = (uint64_t *)v107;
            v110 = (uint64_t *)v107;
            if (*v135)
            {
              v135 = (uint64_t **)*v135;
              v110 = *v106;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v136, v110);
            ++v137;
          }
          if (v104 < *((_DWORD *)v107 + 10))
          {
            *v134 = 0;
            v134[8] = 0;
            goto LABEL_172;
          }
        }
      }
      else
      {
        v81 = &v139;
        v82 = &v139;
        if (v139)
        {
          while (1)
          {
            while (1)
            {
              v82 = (uint64_t **)v80;
              v83 = v80[4];
              if ((uint64_t)v66 >= v83)
                break;
              v80 = *v82;
              v81 = v82;
              if (!*v82)
                goto LABEL_109;
            }
            if (v83 >= (uint64_t)v66)
              break;
            v80 = v82[1];
            if (!v80)
            {
              v81 = v82 + 1;
              goto LABEL_109;
            }
          }
        }
        else
        {
LABEL_109:
          v84 = (uint64_t *)v82;
          v82 = (uint64_t **)operator new(0x30uLL);
          v82[4] = v66;
          *((_DWORD *)v82 + 10) = 0;
          *v82 = 0;
          v82[1] = 0;
          v82[2] = v84;
          *v81 = (uint64_t *)v82;
          v85 = (uint64_t *)v82;
          if (*v138)
          {
            v138 = (uint64_t **)*v138;
            v85 = *v81;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v139, v85);
          ++v140;
        }
        --*((_DWORD *)v82 + 10);
      }
LABEL_76:
      if (++v65 == v64)
        goto LABEL_158;
    }
  }
  *a1 = 0;
  a1[8] = 0;
  v54 = v145;
  if (v145 != v147)
LABEL_49:
    free(v54);
LABEL_50:
  if (v148 != v150)
    free(v148);
  if ((v10 & 1) == 0 && v10)
  {
    if (*(_QWORD *)v10 != v10 + 16)
      free(*(void **)v10);
    MEMORY[0x20BD002F8](v10, 0x1080C40EF38A13ELL);
  }
}

unint64_t mlir::memref::DimOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t Int;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t DefiningOp;
  void *v14;
  BOOL v15;
  mlir::IndexType *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int64x2_t *v38;
  int32x4_t v39;
  int64x2_t v40;
  uint64_t v41;
  int32x4_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t i;
  unint64_t v53;
  uint64_t v54;
  int64x2_t *v55;
  int32x4_t v56;
  int64x2_t v57;
  uint64_t v58;
  int32x4_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64x2_t *v68;
  int32x4_t v69;
  int64x2_t v70;
  uint64_t v71;
  int32x4_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  mlir::IndexType *Context;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  if (!v2)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v2 = 0;
  v90 = v2;
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v4 = 0;
  v89 = v4;
  if (!v4)
    return 0;
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v90);
  if (Int < 0)
    return 0;
  v6 = Int;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
  if (v6 >= v7)
    return 0;
  v8 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v90);
  if (*(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89) + 8 * v8) != 0x8000000000000000)
  {
    Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
    v11 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v90);
    return mlir::Builder::getIndexAttr(&Context, *(mlir::MLIRContext **)(Value + 8 * v11)) & 0xFFFFFFFFFFFFFFFBLL;
  }
  mlir::IntegerAttr::getValue(&v90, (llvm::APInt *)&Context);
  if (v88 > 0x40)
  {
    v9 = *(unsigned int *)Context;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    v9 = Context;
  }
  Context = *(mlir::IndexType **)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Context);
  if (!DefiningOp)
  {
LABEL_23:
    Context = (mlir::IndexType *)llvm::dyn_cast_or_null<mlir::OffsetSizeAndStrideOpInterface,mlir::Operation>(DefiningOp);
    v88 = v17;
    if (Context)
      return mlir::OffsetSizeAndStrideOpInterface::getDynamicSize((mlir::OffsetSizeAndStrideOpInterface *)&Context, v9) | 4;
    if (mlir::memref::foldMemRefCast(*a1, 0))
    {
      if (*(_DWORD *)(*a1 + 36))
        v25 = *a1 - 16;
      else
        v25 = 0;
      return mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0) | 4;
    }
    return 0;
  }
  v14 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v18 = *(_QWORD *)(DefiningOp + 72);
      v19 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v20 >= v9)
        v21 = v9;
      else
        v21 = v20;
      if (!v21)
        goto LABEL_104;
    }
    else
    {
      v18 = 0;
      v19 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v82 >= v9)
        v21 = v9;
      else
        v21 = v82;
      if (!v21)
        goto LABEL_104;
    }
    v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 >= 7)
    {
      v36 = v22 + 1;
      v37 = (v22 + 1) & 0x3FFFFFFFFFFFFFF8;
      v24 = (uint64_t *)(v19 + 8 * v37);
      v38 = (int64x2_t *)(v19 + 32);
      v39 = 0uLL;
      v40 = vdupq_n_s64(0x8000000000000000);
      v41 = v37;
      v42 = 0uLL;
      do
      {
        v43 = v38[-2];
        v44 = v38[-1];
        v45 = *v38;
        v46 = v38[1];
        v38 += 4;
        v39 = vsubq_s32(v39, vuzp1q_s32((int32x4_t)vceqq_s64(v43, v40), (int32x4_t)vceqq_s64(v44, v40)));
        v42 = vsubq_s32(v42, vuzp1q_s32((int32x4_t)vceqq_s64(v45, v40), (int32x4_t)vceqq_s64(v46, v40)));
        v41 -= 8;
      }
      while (v41);
      v23 = vaddvq_s32(vaddq_s32(v42, v39));
      if (v36 == v37)
        goto LABEL_82;
    }
    else
    {
      v23 = 0;
      v24 = (uint64_t *)v19;
    }
    v47 = (uint64_t *)(v19 + 8 * v21);
    do
    {
      v48 = *v24++;
      if (v48 == 0x8000000000000000)
        ++v23;
    }
    while (v24 != v47);
    goto LABEL_82;
  }
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v18 = *(_QWORD *)(DefiningOp + 72);
      v26 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v27 >= v9)
        v28 = v9;
      else
        v28 = v27;
      if (!v28)
        goto LABEL_104;
    }
    else
    {
      v18 = 0;
      v26 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v83 >= v9)
        v28 = v9;
      else
        v28 = v83;
      if (!v28)
        goto LABEL_104;
    }
    v29 = (v28 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v29 >= 7)
    {
      v53 = v29 + 1;
      v54 = (v29 + 1) & 0x3FFFFFFFFFFFFFF8;
      v30 = (uint64_t *)(v26 + 8 * v54);
      v55 = (int64x2_t *)(v26 + 32);
      v56 = 0uLL;
      v57 = vdupq_n_s64(0x8000000000000000);
      v58 = v54;
      v59 = 0uLL;
      do
      {
        v60 = v55[-2];
        v61 = v55[-1];
        v62 = *v55;
        v63 = v55[1];
        v55 += 4;
        v56 = vsubq_s32(v56, vuzp1q_s32((int32x4_t)vceqq_s64(v60, v57), (int32x4_t)vceqq_s64(v61, v57)));
        v59 = vsubq_s32(v59, vuzp1q_s32((int32x4_t)vceqq_s64(v62, v57), (int32x4_t)vceqq_s64(v63, v57)));
        v58 -= 8;
      }
      while (v58);
      v23 = vaddvq_s32(vaddq_s32(v59, v56));
      if (v53 == v54)
        goto LABEL_82;
    }
    else
    {
      v23 = 0;
      v30 = (uint64_t *)v26;
    }
    v64 = (uint64_t *)(v26 + 8 * v28);
    do
    {
      v65 = *v30++;
      if (v65 == 0x8000000000000000)
        ++v23;
    }
    while (v30 != v64);
    goto LABEL_82;
  }
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id)
  {
    if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
    {
      v18 = *(_QWORD *)(DefiningOp + 72) + 64;
      v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v32 >= v9)
        v33 = v9;
      else
        v33 = v32;
      if (v33)
      {
LABEL_50:
        v34 = (v33 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v34 < 7)
        {
          v23 = 0;
          v35 = (uint64_t *)v31;
          goto LABEL_78;
        }
        v66 = v34 + 1;
        v67 = (v34 + 1) & 0x3FFFFFFFFFFFFFF8;
        v35 = (uint64_t *)(v31 + 8 * v67);
        v68 = (int64x2_t *)(v31 + 32);
        v69 = 0uLL;
        v70 = vdupq_n_s64(0x8000000000000000);
        v71 = v67;
        v72 = 0uLL;
        do
        {
          v73 = v68[-2];
          v74 = v68[-1];
          v75 = *v68;
          v76 = v68[1];
          v68 += 4;
          v69 = vsubq_s32(v69, vuzp1q_s32((int32x4_t)vceqq_s64(v73, v70), (int32x4_t)vceqq_s64(v74, v70)));
          v72 = vsubq_s32(v72, vuzp1q_s32((int32x4_t)vceqq_s64(v75, v70), (int32x4_t)vceqq_s64(v76, v70)));
          v71 -= 8;
        }
        while (v71);
        v23 = vaddvq_s32(vaddq_s32(v72, v69));
        if (v66 != v67)
        {
LABEL_78:
          v77 = (uint64_t *)(v31 + 8 * v33);
          do
          {
            v78 = *v35++;
            if (v78 == 0x8000000000000000)
              ++v23;
          }
          while (v35 != v77);
        }
LABEL_82:
        v79 = v23;
        return *(_QWORD *)(v18 + 32 * v79 + 24) | 4;
      }
    }
    else
    {
      v18 = 64;
      v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v89);
      if (v84 >= v9)
        v33 = v9;
      else
        v33 = v84;
      if (v33)
        goto LABEL_50;
    }
LABEL_104:
    v79 = 0;
    return *(_QWORD *)(v18 + 32 * v79 + 24) | 4;
  }
  v15 = v14 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id;
  if (v14 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id)
    v16 = (mlir::IndexType *)DefiningOp;
  else
    v16 = 0;
  Context = v16;
  if (!v15)
    goto LABEL_23;
  mlir::memref::SubViewOp::getDroppedDims((mlir::memref::SubViewOp *)&Context, &v86);
  v85 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)Context + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
  v50 = v49;
  if (v49)
  {
    if ((v86 & 1) == 0)
    {
      v51 = 0;
      i = 0;
      while (1)
      {
        if (((*(_QWORD *)(*(_QWORD *)v86 + 8 * (i >> 6)) >> i) & 1) == 0)
        {
          if (v51 == (_DWORD)v9)
            goto LABEL_89;
          ++v51;
        }
        if (v50 == ++i)
          goto LABEL_88;
      }
    }
    v80 = 0;
    for (i = 0; v50 != i; ++i)
    {
      if (((v86 >> 1) & ~(-1 << (v86 >> 58)) & (1 << i)) == 0)
      {
        if (v80 == (_DWORD)v9)
          goto LABEL_89;
        ++v80;
      }
    }
  }
LABEL_88:
  LODWORD(i) = 0;
LABEL_89:
  v81 = mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::SubViewOp>::getDynamicSize((uint64_t)&Context, i) | 4;
  llvm::SmallBitVector::~SmallBitVector((void ***)&v86);
  return v81;
}

uint64_t mlir::memref::AllocOp::getDynamicSizes(mlir::memref::AllocOp *this)
{
  if ((*(_DWORD *)(*(_QWORD *)this + 44) & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72);
  else
    return 0;
}

uint64_t mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::SubViewOp>::getDynamicSize(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  int64x2_t *v5;
  uint64_t v6;
  int NumDynamicEntriesUpToIdx;
  unint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = 0;
  v10 = *(_QWORD *)(v4 + 8);
  v5 = (int64x2_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v10);
  NumDynamicEntriesUpToIdx = mlir::detail::getNumDynamicEntriesUpToIdx(v5, v6, a2);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v8 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v8 = 0;
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72)
                   + 32 * (NumDynamicEntriesUpToIdx + *(_DWORD *)(v8 + 28) + 1)
                   + 24);
}

void llvm::SmallBitVector::~SmallBitVector(void ***this)
{
  void **v1;

  v1 = *this;
  if ((*this & 1) == 0 && v1)
  {
    if (*v1 != v1 + 2)
      free(*v1);
    MEMORY[0x20BD002F8](v1, 0x1080C40EF38A13ELL);
  }
}

uint64_t llvm::dyn_cast_or_null<mlir::OffsetSizeAndStrideOpInterface,mlir::Operation>(uint64_t a1)
{
  if (!a1)
    return 0;
  if (!mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(a1))
    return 0;
  mlir::OpInterface<mlir::OffsetSizeAndStrideOpInterface,mlir::detail::OffsetSizeAndStrideOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
  return a1;
}

void mlir::memref::DimOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"memref.dim", 10, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C029548;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::DimOfMemRefReshape]";
  v39 = 91;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::memref::DmaStartOp::print(mlir::memref::DmaStartOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  int v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  llvm::raw_ostream *v33;
  _WORD *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  uint64_t TagIndices;
  uint64_t v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  mlir::Operation *v47;
  mlir::ArrayAttr *p_AttrDictionary;
  llvm::raw_ostream *v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t Value;
  uint64_t v60;
  llvm::raw_ostream *v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  _WORD *v64;
  int v65;
  llvm::raw_ostream *v66;
  _WORD *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  const char *AttrDictionary;
  uint64_t v74;

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
  }
  if ((*(_DWORD *)(*(_QWORD *)this + 44) & 0x800000) != 0)
    v8 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v8 = 0;
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  v10 = v9;
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  AttrDictionary = ", ";
  v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8 + 32, 0, v8 + 32, v10, (uint64_t)a2, v11, (uint64_t)&AttrDictionary);
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
  {
    *(_BYTE *)(v13 + 2) = 32;
    *(_WORD *)v13 = 11357;
    *((_QWORD *)v12 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v12, "], ", 3uLL);
  }
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v14 + 1) + 24));
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 91);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 91;
  }
  if ((*(_DWORD *)(*(_QWORD *)this + 44) & 0x800000) != 0)
    v17 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v17 = 0;
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  v19 = v18;
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  v21 = v20;
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                                                        + 32 * (v22 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  v23 = v17 + 32 * v19 + 64;
  v25 = v21 - v19 + v24;
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  AttrDictionary = ", ";
  v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v23, 0, v23, v25, (uint64_t)a2, v26, (uint64_t)&AttrDictionary);
  v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v28 = *((_QWORD *)v27 + 4);
  if ((unint64_t)(*((_QWORD *)v27 + 3) - v28) > 2)
  {
    *(_BYTE *)(v28 + 2) = 32;
    *(_WORD *)v28 = 11357;
    *((_QWORD *)v27 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v27, "], ", 3uLL);
  }
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  v30 = v29;
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                                                        + 32 * (v31 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v30 + v32 + 2) + 24));
  v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v34 = (_WORD *)*((_QWORD *)v33 + 4);
  if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 1uLL)
  {
    *v34 = 8236;
    *((_QWORD *)v33 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v33, ", ", 2uLL);
  }
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  v36 = v35;
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                                                        + 32 * (v37 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v36 + v38 + 3) + 24));
  v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v40 = (_BYTE *)*((_QWORD *)v39 + 4);
  if ((unint64_t)v40 >= *((_QWORD *)v39 + 3))
  {
    llvm::raw_ostream::write(v39, 91);
  }
  else
  {
    *((_QWORD *)v39 + 4) = v40 + 1;
    *v40 = 91;
  }
  TagIndices = mlir::memref::DmaStartOp::getTagIndices(this);
  v43 = v42;
  v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  AttrDictionary = ", ";
  v74 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(TagIndices, 0, TagIndices, v43, (uint64_t)a2, v44, (uint64_t)&AttrDictionary);
  v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v46 = (_BYTE *)*((_QWORD *)v45 + 4);
  if ((unint64_t)v46 < *((_QWORD *)v45 + 3))
  {
    *((_QWORD *)v45 + 4) = v46 + 1;
    *v46 = 93;
    if (!mlir::memref::DmaStartOp::isStrided(this))
      goto LABEL_30;
LABEL_33:
    v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v50 = (_WORD *)*((_QWORD *)v49 + 4);
    if (*((_QWORD *)v49 + 3) - (_QWORD)v50 > 1uLL)
    {
      *v50 = 8236;
      *((_QWORD *)v49 + 4) += 2;
      if (!mlir::memref::DmaStartOp::isStrided(this))
        goto LABEL_35;
    }
    else
    {
      llvm::raw_ostream::write(v49, ", ", 2uLL);
      if (!mlir::memref::DmaStartOp::isStrided(this))
      {
LABEL_35:
        v51 = 0;
        goto LABEL_40;
      }
    }
    v52 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
      v53 = (*(_DWORD *)(v52 + 68) - 2);
    else
      v53 = 4294967294;
    v51 = *(_QWORD *)(*(_QWORD *)(v52 + 72) + 32 * v53 + 24);
LABEL_40:
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v51);
    v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v55 = (_WORD *)*((_QWORD *)v54 + 4);
    if (*((_QWORD *)v54 + 3) - (_QWORD)v55 > 1uLL)
    {
      *v55 = 8236;
      *((_QWORD *)v54 + 4) += 2;
      if (!mlir::memref::DmaStartOp::isStrided(this))
        goto LABEL_42;
    }
    else
    {
      llvm::raw_ostream::write(v54, ", ", 2uLL);
      if (!mlir::memref::DmaStartOp::isStrided(this))
      {
LABEL_42:
        v56 = 0;
        goto LABEL_47;
      }
    }
    v57 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
      v58 = (*(_DWORD *)(v57 + 68) - 1);
    else
      v58 = 0xFFFFFFFFLL;
    v56 = *(_QWORD *)(*(_QWORD *)(v57 + 72) + 32 * v58 + 24);
LABEL_47:
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v56);
    v47 = *(mlir::Operation **)this;
    if (!*(_BYTE *)(*(_QWORD *)this + 47))
      goto LABEL_31;
    goto LABEL_48;
  }
  llvm::raw_ostream::write(v45, 93);
  if (mlir::memref::DmaStartOp::isStrided(this))
    goto LABEL_33;
LABEL_30:
  v47 = *(mlir::Operation **)this;
  if (!*(_BYTE *)(*(_QWORD *)this + 47))
  {
LABEL_31:
    p_AttrDictionary = (mlir::Operation *)((char *)v47 + 56);
    goto LABEL_49;
  }
LABEL_48:
  AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v47);
  p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_49:
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v60, 0, 0);
  v61 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v62 = *((_QWORD *)v61 + 4);
  if ((unint64_t)(*((_QWORD *)v61 + 3) - v62) > 2)
  {
    *(_BYTE *)(v62 + 2) = 32;
    *(_WORD *)v62 = 14880;
    *((_QWORD *)v61 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v61, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v63 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v64 = (_WORD *)*((_QWORD *)v63 + 4);
  if (*((_QWORD *)v63 + 3) - (_QWORD)v64 > 1uLL)
  {
    *v64 = 8236;
    *((_QWORD *)v63 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v63, ", ", 2uLL);
  }
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v65 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v66 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v67 = (_WORD *)*((_QWORD *)v66 + 4);
  if (*((_QWORD *)v66 + 3) - (_QWORD)v67 > 1uLL)
  {
    *v67 = 8236;
    *((_QWORD *)v66 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v66, ", ", 2uLL);
  }
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  v69 = v68;
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  AttrDictionary = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72)
                                                        + 32 * (v70 + 1)
                                                        + 24)
                                            + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&AttrDictionary);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v69 + v71 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::DmaStartOp::getDstIndices(mlir::memref::DmaStartOp *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unint64_t v7;

  if ((*(_DWORD *)(*(_QWORD *)this + 44) & 0x800000) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v2 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  v4 = v3;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v5 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  return v2 + 32 * v4 + 64;
}

uint64_t mlir::memref::DmaStartOp::getNumElements(mlir::memref::DmaStartOp *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  v3 = v2;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v3 + v5 + 2) + 24);
}

uint64_t mlir::memref::DmaStartOp::getTagMemRef(mlir::memref::DmaStartOp *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  v3 = v2;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v7);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v3 + v5 + 3) + 24);
}

uint64_t mlir::memref::DmaStartOp::getTagIndices(mlir::memref::DmaStartOp *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v13;

  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  v3 = v2;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  if ((*(_DWORD *)(*(_QWORD *)this + 44) & 0x800000) != 0)
    v6 = *(_QWORD *)(*(_QWORD *)this + 72);
  else
    v6 = 0;
  v7 = (v3 + v5 + 4);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  v9 = v8;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v10 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v9 + v11 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  return v6 + 32 * v7;
}

BOOL mlir::memref::DmaStartOp::isStrided(mlir::memref::DmaStartOp *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v15;

  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v3 = *(_DWORD *)(v2 + 68);
  else
    v3 = 0;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v5 = v4;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v6 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v8 = v7;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v10 = v9;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v11 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v10 + v12 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v15);
  return v3 != v5 + v8 + v13 + 4;
}

uint64_t mlir::memref::DmaStartOp::getStride(mlir::memref::DmaStartOp *this)
{
  uint64_t v2;
  uint64_t v3;

  if (!mlir::memref::DmaStartOp::isStrided(this))
    return 0;
  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v3 = *(_QWORD *)(v2 + 72) + 32 * (*(_DWORD *)(v2 + 68) - 2);
  else
    v3 = *(_QWORD *)(v2 + 72) + 0x1FFFFFFFC0;
  return *(_QWORD *)(v3 + 24);
}

uint64_t mlir::memref::DmaStartOp::getNumElementsPerStride(mlir::memref::DmaStartOp *this)
{
  uint64_t v2;
  uint64_t v3;

  if (!mlir::memref::DmaStartOp::isStrided(this))
    return 0;
  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v3 = *(_QWORD *)(v2 + 72) + 32 * (*(_DWORD *)(v2 + 68) - 1);
  else
    v3 = *(_QWORD *)(v2 + 72) + 0x1FFFFFFFE0;
  return *(_QWORD *)(v3 + 24);
}

uint64_t mlir::memref::DmaStartOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  void *v28[24];
  void *v29;
  uint64_t v30;
  _BYTE v31[24];
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  void *v35;
  uint64_t v36;
  _BYTE v37[128];
  void *v38;
  uint64_t v39;
  _BYTE v40[128];
  char *v41;
  uint64_t v42;
  _QWORD v43[18];

  v43[16] = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, 24);
  v41 = (char *)v43;
  v42 = 0x400000000;
  memset(v26, 0, 24);
  v38 = v40;
  v39 = 0x400000000;
  memset(v25, 0, 24);
  memset(v24, 0, 24);
  v35 = v37;
  v36 = 0x400000000;
  v32 = v34;
  v33 = 0x200000000;
  v29 = v31;
  v30 = 0x300000000;
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v27, 1)
    || !(*(unsigned __int8 (**)(uint64_t, char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v41, 2, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v26, 1)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v38, 2, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v25, 1)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v24, 1)|| !(*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1,
          &v35,
          2,
          1,
          0xFFFFFFFFLL)
    || (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1)
    && !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v32, 0, 1, 0xFFFFFFFFLL))
  {
    goto LABEL_38;
  }
  v7 = v33;
  if ((v33 | 2) != 2)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v19 = "expected two stride related operands";
LABEL_52:
    v22 = v19;
    v23 = 259;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v28, a1, v18, &v22);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v28);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v28);
    goto LABEL_39;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(_QWORD *)a1 + 552))(a1, &v29))
    goto LABEL_38;
  if ((_DWORD)v30 != 3)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v19 = "fewer/more types expected";
    goto LABEL_52;
  }
  v8 = a2 + 16;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v27, *(_QWORD *)v29, v8))goto LABEL_38;
  v20 = v7;
  if ((_DWORD)v42)
  {
    v9 = v41;
    v10 = 32 * v42;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, v8))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10)
        goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_21:
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v26, *((_QWORD *)v29 + 1), v8))goto LABEL_38;
  if ((_DWORD)v39)
  {
    v11 = (char *)v38;
    v12 = 32 * v39;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v11, IndexType, v8))
    {
      v11 += 32;
      v12 -= 32;
      if (!v12)
        goto LABEL_26;
    }
    goto LABEL_38;
  }
LABEL_26:
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v25, IndexType, v8)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 696))(a1, v24, *((_QWORD *)v29 + 2), v8))
  {
LABEL_38:
    v16 = 0;
    goto LABEL_39;
  }
  if ((_DWORD)v36)
  {
    v13 = (char *)v35;
    v14 = 32 * v36;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v13, IndexType, v8))
    {
      v13 += 32;
      v14 -= 32;
      if (!v14)
        goto LABEL_32;
    }
    goto LABEL_38;
  }
LABEL_32:
  if (v20 == 2 && (_DWORD)v33)
  {
    v15 = (char *)v32;
    v21 = 32 * v33;
    v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v15, IndexType, v8))
    {
      v15 += 32;
      v21 -= 32;
      if (!v21)
        goto LABEL_39;
    }
    goto LABEL_38;
  }
  v16 = 1;
LABEL_39:
  if (v29 != v31)
    free(v29);
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  if (v41 != (char *)v43)
    free(v41);
  return v16;
}

uint64_t mlir::memref::DmaStartOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  unint64_t *v31;
  char *v32;
  char *v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  void *v44;
  unint64_t v45;
  char *v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 isIndex;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  int v62;
  int v63;
  int v64;
  const char *v65;
  unint64_t *v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  unint64_t *v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  unint64_t *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  const char *v102;
  unint64_t *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v116;
  BOOL v117;
  int64_t v118;
  int64_t v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  unsigned int v124;
  const void **TagIndices;
  uint64_t v126;
  __int16 v127;
  unint64_t v128;
  const char *v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  void *v134;
  unsigned int v135;
  unsigned int v136;
  _BYTE v137[96];
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0 || (v3 = *((_DWORD *)v2 + 17), v3 <= 3))
  {
    TagIndices = (const void **)"expected at least 4 operands";
    v127 = 259;
    mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
    if (v131)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    if (v142)
    {
      v5 = v140;
      if (v140)
      {
        v6 = v141;
        v7 = v140;
        if (v141 != v140)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = v140;
        }
        v141 = v5;
        operator delete(v7);
      }
      v8 = v138;
      if (!v138)
        goto LABEL_123;
      v9 = v139;
      v10 = v138;
      if (v139 == v138)
      {
LABEL_122:
        v139 = v8;
        operator delete(v10);
LABEL_123:
        if (v134 != v137)
          free(v134);
        return v4;
      }
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          MEMORY[0x20BD002D4](v11, 0x1000C8077774924);
      }
      while (v9 != v8);
LABEL_121:
      v10 = v138;
      goto LABEL_122;
    }
    return v4;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v131 = v13;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
    if (v3 < v20 + 4)
    {
      v127 = 257;
      mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
      if (v131)
      {
        LODWORD(v128) = 3;
        v129 = "expected at least ";
        v130 = 18;
        v21 = &v128;
        v22 = (char *)v134;
        if (v135 >= v136)
        {
          v109 = v135 + 1;
          if (v134 <= &v128 && (char *)v134 + 24 * v135 > (char *)&v128)
          {
            v118 = (char *)&v128 - (_BYTE *)v134;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v109, 24);
            v22 = (char *)v134;
            v21 = (unint64_t *)((char *)v134 + v118);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v109, 24);
            v21 = &v128;
            v22 = (char *)v134;
          }
        }
        v23 = &v22[24 * v135];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v135;
      }
      v128 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
      if (v131)
      {
        LODWORD(v128) = 5;
        v129 = (const char *)(v25 + 4);
        v26 = &v128;
        v27 = (char *)v134;
        if (v135 >= v136)
        {
          v110 = v135 + 1;
          if (v134 <= &v128 && (char *)v134 + 24 * v135 > (char *)&v128)
          {
            v119 = (char *)&v128 - (_BYTE *)v134;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v110, 24);
            v27 = (char *)v134;
            v26 = (unint64_t *)((char *)v134 + v119);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v110, 24);
            v26 = &v128;
            v27 = (char *)v134;
          }
        }
        v28 = &v27[24 * v135];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = v26[2];
        *(_OWORD *)v28 = v29;
        v30 = ++v135;
        if (v131)
        {
          LODWORD(v128) = 3;
          v129 = " operands";
          v130 = 9;
          v31 = &v128;
          v32 = (char *)v134;
          if (v30 >= v136)
          {
            v111 = v30 + 1;
            v112 = (char *)v134 + 24 * v30 > (char *)&v128;
            if (v134 <= &v128 && v112)
            {
              v120 = (char *)&v128 - (_BYTE *)v134;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v111, 24);
              v32 = (char *)v134;
              v31 = (unint64_t *)((char *)v134 + v120);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v111, 24);
              v31 = &v128;
              v32 = (char *)v134;
            }
          }
          v33 = &v32[24 * v135];
          v34 = *(_OWORD *)v31;
          *((_QWORD *)v33 + 2) = v31[2];
          *(_OWORD *)v33 = v34;
          ++v135;
        }
      }
      v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
      if (v131)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
      if (v142)
      {
        v35 = v140;
        if (v140)
        {
          v36 = v141;
          v37 = v140;
          if (v141 != v140)
          {
            do
              v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
            while (v36 != v35);
            v37 = v140;
          }
          v141 = v35;
          operator delete(v37);
        }
        v8 = v138;
        if (!v138)
          goto LABEL_123;
        v38 = v139;
        v10 = v138;
        if (v139 == v138)
          goto LABEL_122;
        do
        {
          v40 = *--v38;
          v39 = v40;
          *v38 = 0;
          if (v40)
            MEMORY[0x20BD002D4](v39, 0x1000C8077774924);
        }
        while (v38 != v8);
        goto LABEL_121;
      }
      return v4;
    }
    v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
    if (!v41)
      goto LABEL_61;
    v42 = (*((_DWORD *)*this + 11) & 0x800000) != 0 ? (*this)[9] : 0;
    v128 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
    TagIndices = (const void **)(v42 + 32);
    v126 = v43;
    mlir::OperandRange::getTypes((uint64_t *)&TagIndices, (uint64_t *)&v131);
    v45 = v131;
    v44 = v132;
    v46 = (char *)v134;
    v47 = v131 == v133;
    if (v131 == v133 && v134 == v132)
    {
LABEL_61:
      v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      v49 = (*this)[9];
      if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 32 * (v48 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        TagIndices = (const void **)"expected destination to be of memref type";
        v127 = 259;
        mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
        v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
        if (v131)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
        if (v142)
        {
          v50 = v140;
          if (v140)
          {
            v51 = v141;
            v52 = v140;
            if (v141 != v140)
            {
              do
                v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
              while (v51 != v50);
              v52 = v140;
            }
            v141 = v50;
            operator delete(v52);
          }
          v8 = v138;
          if (!v138)
            goto LABEL_123;
          v53 = v139;
          v10 = v138;
          if (v139 == v138)
            goto LABEL_122;
          do
          {
            v55 = *--v53;
            v54 = v55;
            *v53 = 0;
            if (v55)
              MEMORY[0x20BD002D4](v54, 0x1000C8077774924);
          }
          while (v53 != v8);
          goto LABEL_121;
        }
        return v4;
      }
      v131 = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      v62 = v61;
      v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 32 * (v63 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      v65 = (const char *)(v62 + v64 + 4);
      v124 = v65;
      if (v3 < v65)
      {
        v127 = 257;
        mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
        if (v131)
        {
          LODWORD(v128) = 3;
          v129 = "expected at least ";
          v130 = 18;
          v66 = &v128;
          v67 = (char *)v134;
          if (v135 >= v136)
          {
            v113 = v135 + 1;
            if (v134 <= &v128 && (char *)v134 + 24 * v135 > (char *)&v128)
            {
              v121 = (char *)&v128 - (_BYTE *)v134;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v113, 24);
              v67 = (char *)v134;
              v66 = (unint64_t *)((char *)v134 + v121);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v113, 24);
              v66 = &v128;
              v67 = (char *)v134;
            }
          }
          v68 = &v67[24 * v135];
          v69 = *(_OWORD *)v66;
          *((_QWORD *)v68 + 2) = v66[2];
          *(_OWORD *)v68 = v69;
          v70 = ++v135;
          if (v131)
          {
            LODWORD(v128) = 5;
            v129 = v65;
            v71 = &v128;
            v72 = (char *)v134;
            if (v70 >= v136)
            {
              v114 = v70 + 1;
              v115 = (char *)v134 + 24 * v70 > (char *)&v128;
              if (v134 <= &v128 && v115)
              {
                v122 = (char *)&v128 - (_BYTE *)v134;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v114, 24);
                v72 = (char *)v134;
                v71 = (unint64_t *)((char *)v134 + v122);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v114, 24);
                v71 = &v128;
                v72 = (char *)v134;
              }
            }
            v73 = &v72[24 * v135];
            v74 = *(_OWORD *)v71;
            *((_QWORD *)v73 + 2) = v71[2];
            *(_OWORD *)v73 = v74;
            v75 = ++v135;
            if (v131)
            {
              LODWORD(v128) = 3;
              v129 = " operands";
              v130 = 9;
              v76 = &v128;
              v77 = (char *)v134;
              if (v75 >= v136)
              {
                v116 = v75 + 1;
                v117 = (char *)v134 + 24 * v75 > (char *)&v128;
                if (v134 <= &v128 && v117)
                {
                  v123 = (char *)&v128 - (_BYTE *)v134;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v116, 24);
                  v77 = (char *)v134;
                  v76 = (unint64_t *)((char *)v134 + v123);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, v137, v116, 24);
                  v76 = &v128;
                  v77 = (char *)v134;
                }
              }
              v78 = &v77[24 * v135];
              v79 = *(_OWORD *)v76;
              *((_QWORD *)v78 + 2) = v76[2];
              *(_OWORD *)v78 = v79;
              ++v135;
            }
          }
        }
        v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
        if (v131)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
        if (v142)
        {
          v80 = v140;
          if (v140)
          {
            v81 = v141;
            v82 = v140;
            if (v141 != v140)
            {
              do
                v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
              while (v81 != v80);
              v82 = v140;
            }
            v141 = v80;
            operator delete(v82);
          }
          v8 = v138;
          if (!v138)
            goto LABEL_123;
          v83 = v139;
          v10 = v138;
          if (v139 == v138)
            goto LABEL_122;
          do
          {
            v85 = *--v83;
            v84 = v85;
            *v83 = 0;
            if (v85)
              MEMORY[0x20BD002D4](v84, 0x1000C8077774924);
          }
          while (v83 != v8);
          goto LABEL_121;
        }
        return v4;
      }
      v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      v96 = v95;
      v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      v98 = v97;
      v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      v131 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 32 * (v99 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v131);
      if (v98 - v96 + v100
        && (TagIndices = (const void **)mlir::memref::DmaStartOp::getDstIndices((mlir::memref::DmaStartOp *)this),
            v126 = v101,
            mlir::OperandRange::getTypes((uint64_t *)&TagIndices, (uint64_t *)&v131),
            !llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::memref::DmaStartOp::verify(void)::$_1>((uint64_t *)&v131)))
      {
        v102 = "expected destination indices to be of index type";
      }
      else
      {
        v131 = *(_QWORD *)(mlir::memref::DmaStartOp::getNumElements((mlir::memref::DmaStartOp *)this) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::Type::isIndex((mlir::Type *)&v131))
        {
          if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(mlir::memref::DmaStartOp::getTagMemRef((mlir::memref::DmaStartOp *)this)
                                                    + 8) & 0xFFFFFFFFFFFFFFF8)
                            + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
          {
            v104 = (_DWORD)v65 + mlir::memref::DmaStartOp::getTagMemRefRank((mlir::memref::DmaStartOp *)this);
            v124 = v104;
            if (v3 < v104)
            {
              v127 = 257;
              mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
              v105 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v131, "expected at least ");
              v106 = mlir::InFlightDiagnostic::operator<<<unsigned int const&>(v105, &v124);
              v103 = (unint64_t *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v106, " operands");
              goto LABEL_134;
            }
            mlir::memref::DmaStartOp::getTagIndices((mlir::memref::DmaStartOp *)this);
            if (v107
              && (TagIndices = (const void **)mlir::memref::DmaStartOp::getTagIndices((mlir::memref::DmaStartOp *)this),
                  v126 = v108,
                  mlir::OperandRange::getTypes((uint64_t *)&TagIndices, (uint64_t *)&v131),
                  !llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::memref::DmaStartOp::verify(void)::$_1>((uint64_t *)&v131)))
            {
              v102 = "expected tag indices to be of index type";
            }
            else if (v3 == v104 || v3 == v104 + 2)
            {
              if (!mlir::memref::DmaStartOp::isStrided((mlir::memref::DmaStartOp *)this))
                return 1;
              v131 = *(_QWORD *)(mlir::memref::DmaStartOp::getStride((mlir::memref::DmaStartOp *)this) + 8) & 0xFFFFFFFFFFFFFFF8;
              if (mlir::Type::isIndex((mlir::Type *)&v131))
              {
                TagIndices = (const void **)(*(_QWORD *)(mlir::memref::DmaStartOp::getNumElementsPerStride((mlir::memref::DmaStartOp *)this)
                                                       + 8) & 0xFFFFFFFFFFFFFFF8);
                if (mlir::Type::isIndex((mlir::Type *)&TagIndices))
                  return 1;
              }
              v102 = "expected stride and num elements per stride to be of type index";
            }
            else
            {
              v102 = "incorrect number of operands";
            }
          }
          else
          {
            v102 = "expected tag to be of memref type";
          }
        }
        else
        {
          v102 = "expected num elements to be of index type";
        }
      }
      TagIndices = (const void **)v102;
      v127 = 259;
      mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
      v103 = &v131;
LABEL_134:
      v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v103);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v131);
      return v4;
    }
    v128 = *(_QWORD *)(*(_QWORD *)(v131 + 32 * (_QWORD)v132 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    isIndex = mlir::Type::isIndex((mlir::Type *)&v128);
    if (v47)
    {
      if (isIndex)
      {
        v57 = v45 + 32 * (_QWORD)v44 + 56;
        v58 = (char *)(v46 - (_BYTE *)v44);
        while (--v58)
        {
          v59 = v57 + 32;
          v128 = *(_QWORD *)(*(_QWORD *)v57 + 8) & 0xFFFFFFFFFFFFFFF8;
          v60 = mlir::Type::isIndex((mlir::Type *)&v128);
          v57 = v59;
          if (!v60)
            goto LABEL_107;
        }
        goto LABEL_61;
      }
    }
    else if (isIndex)
    {
      v86 = (uint64_t *)(v45 + 32 * (_QWORD)v44 + 56);
      do
      {
        v87 = *v86;
        v86 += 4;
        v128 = *(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      while (mlir::Type::isIndex((mlir::Type *)&v128));
    }
LABEL_107:
    TagIndices = (const void **)"expected source indices to be of index type";
    v127 = 259;
    mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
    if (v131)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    if (v142)
    {
      v88 = v140;
      if (v140)
      {
        v89 = v141;
        v90 = v140;
        if (v141 != v140)
        {
          do
            v89 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v89 - 1);
          while (v89 != v88);
          v90 = v140;
        }
        v141 = v88;
        operator delete(v90);
      }
      v8 = v138;
      if (!v138)
        goto LABEL_123;
      v91 = v139;
      v10 = v138;
      if (v139 == v138)
        goto LABEL_122;
      do
      {
        v93 = *--v91;
        v92 = v93;
        *v91 = 0;
        if (v93)
          MEMORY[0x20BD002D4](v92, 0x1000C8077774924);
      }
      while (v91 != v8);
      goto LABEL_121;
    }
    return v4;
  }
  TagIndices = (const void **)"expected source to be of memref type";
  v127 = 259;
  mlir::OpState::emitOpError(this, &TagIndices, (uint64_t)&v131);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
  if (v131)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
  if (v142)
  {
    v14 = v140;
    if (v140)
    {
      v15 = v141;
      v16 = v140;
      if (v141 != v140)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = v140;
      }
      v141 = v14;
      operator delete(v16);
    }
    v8 = v138;
    if (!v138)
      goto LABEL_123;
    v17 = v139;
    v10 = v138;
    if (v139 == v138)
      goto LABEL_122;
    do
    {
      v19 = *--v17;
      v18 = v19;
      *v17 = 0;
      if (v19)
        MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
    }
    while (v17 != v8);
    goto LABEL_121;
  }
  return v4;
}

BOOL llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::memref::DmaStartOp::verify(void)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL isIndex;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *a1;
  v1 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = *a1 == v3;
  if (*a1 == v3 && v4 == v1)
    return 1;
  v13 = *(_QWORD *)(*(_QWORD *)(v2 + 32 * v1 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  result = mlir::Type::isIndex((mlir::Type *)&v13);
  if (v5)
  {
    if (result)
    {
      v7 = v2 + 32 * v1 + 56;
      v8 = v4 - v1;
      while (1)
      {
        result = --v8 == 0;
        if (!v8)
          break;
        v9 = v7 + 32;
        v13 = *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8;
        isIndex = mlir::Type::isIndex((mlir::Type *)&v13);
        v7 = v9;
        if (!isIndex)
          return 0;
      }
    }
  }
  else if (result)
  {
    v11 = (uint64_t *)(v2 + 32 * v1 + 56);
    do
    {
      v12 = *v11;
      v11 += 4;
      v13 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (mlir::Type::isIndex((mlir::Type *)&v13));
    return 0;
  }
  return result;
}

uint64_t mlir::memref::DmaStartOp::getTagMemRefRank(mlir::memref::DmaStartOp *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  v3 = v2;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v4 + 1) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 32 * (v3 + v5 + 3) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  return v6;
}

uint64_t mlir::memref::DmaWaitOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  BOOL v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  const void **v46;
  __int16 v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[96];
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD *v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_DWORD *)v2 + 17) - 2;
  else
    v3 = -2;
  v51[0] = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v51);
  v5 = v4;
  if (v3 == v4)
    return 1;
  v47 = 257;
  mlir::OpState::emitOpError(this, &v46, (uint64_t)v51);
  if (v51[0])
  {
    v48 = 3;
    v49 = (unint64_t)"expected tagIndices to have the same number of elements as the tagMemRef rank, expected ";
    v50 = 88;
    v7 = &v48;
    v8 = (char *)v52;
    if (v53 >= v54)
    {
      v35 = v53 + 1;
      if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
      {
        v42 = (char *)&v48 - (_BYTE *)v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v35, 24);
        v8 = (char *)v52;
        v7 = (int *)((char *)v52 + v42);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v35, 24);
        v7 = &v48;
        v8 = (char *)v52;
      }
    }
    v9 = &v8[24 * v53];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    v11 = ++v53;
    if (v51[0])
    {
      v48 = 5;
      v49 = v5;
      v12 = &v48;
      v13 = (char *)v52;
      if (v11 >= v54)
      {
        v36 = v11 + 1;
        v37 = (char *)v52 + 24 * v11 > (char *)&v48;
        if (v52 <= &v48 && v37)
        {
          v43 = (char *)&v48 - (_BYTE *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v13 = (char *)v52;
          v12 = (int *)((char *)v52 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v12 = &v48;
          v13 = (char *)v52;
        }
      }
      v14 = &v13[24 * v53];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v53;
      if (v51[0])
      {
        v48 = 3;
        v49 = (unint64_t)", but got ";
        v50 = 10;
        v17 = &v48;
        v18 = (char *)v52;
        if (v16 >= v54)
        {
          v38 = v16 + 1;
          v39 = (char *)v52 + 24 * v16 > (char *)&v48;
          if (v52 <= &v48 && v39)
          {
            v44 = (char *)&v48 - (_BYTE *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            v18 = (char *)v52;
            v17 = (int *)((char *)v52 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            v17 = &v48;
            v18 = (char *)v52;
          }
        }
        v19 = &v18[24 * v53];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        v21 = ++v53;
        if (v51[0])
        {
          v48 = 5;
          v49 = v3;
          v22 = &v48;
          v23 = (char *)v52;
          if (v21 >= v54)
          {
            v40 = v21 + 1;
            v41 = (char *)v52 + 24 * v21 > (char *)&v48;
            if (v52 <= &v48 && v41)
            {
              v45 = (char *)&v48 - (_BYTE *)v52;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v40, 24);
              v23 = (char *)v52;
              v22 = (int *)((char *)v52 + v45);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v40, 24);
              v22 = &v48;
              v23 = (char *)v52;
            }
          }
          v24 = &v23[24 * v53];
          v25 = *(_OWORD *)v22;
          *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
          *(_OWORD *)v24 = v25;
          ++v53;
        }
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
  if (v51[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
  if (v60)
  {
    v26 = __p;
    if (__p)
    {
      v27 = v59;
      v28 = __p;
      if (v59 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v59 = v26;
      operator delete(v28);
    }
    v29 = v56;
    if (v56)
    {
      v30 = v57;
      v31 = v56;
      if (v57 != v56)
      {
        do
        {
          v33 = *--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v30 != v29);
        v31 = v56;
      }
      v57 = v29;
      operator delete(v31);
    }
    if (v52 != v55)
      free(v52);
  }
  return v6;
}

uint64_t mlir::memref::ExtractAlignedPointerAsIndexOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "intptr", 6);
}

uint64_t mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  mlir::MLIRContext *v8;
  int v9;
  uint64_t v10;
  uint64_t RHS;
  uint64_t LayerSchedule;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int i;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v20[0] = *(_QWORD *)(a4 + 40);
  v20[1] = 0;
  v7 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v20, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v7 = 0;
  v20[0] = v7;
  if (!v7)
    return 0;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v20);
  v9 = (int)v8;
  v10 = mlir::IndexType::get(a1, v8);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v20);
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)v20);
  v13 = mlir::MemRefType::get(0, 0, RHS, 0, 0, LayerSchedule);
  v14 = *(unsigned int *)(a5 + 8);
  if (v14 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v14) = v13;
  v15 = *(_DWORD *)(a5 + 12);
  v16 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v16;
  if (v16 >= v15)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v16) = v10;
  v17 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v17;
  for (i = 2 * v9; i; --i)
  {
    if (v17 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v17 + 1, 8);
      v17 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v17) = v10;
    v17 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v17;
  }
  return 1;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t NextResultAtOffset;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v5 = *(_QWORD *)a1 - 16;
  else
    v5 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "base_buffer", 11);
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v7 = *(_QWORD *)a1 - 16;
  else
    v7 = 0;
  v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
  a2(a3, v9, "offset", 6);
  v10 = *(_DWORD *)(*(_QWORD *)a1 + 36);
  if (v10)
    v11 = *(_QWORD *)a1 - 16;
  else
    v11 = 0;
  result = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 2);
  if ((v10 & 0xFFFFFFFE) != 2)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 36))
      v13 = *(_QWORD *)a1 - 16;
    else
      v13 = 0;
    v14 = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 2);
    v15 = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
    a2(a3, v15, "sizes", 5);
    v16 = *(_DWORD *)(*(_QWORD *)a1 + 36);
    if (v16)
      v17 = *(_QWORD *)a1 - 16;
    else
      v17 = 0;
    v18 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, ((v16 - 2) >> 1) + 2);
    v19 = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
    return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v19, "strides", 7);
  }
  return result;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::fold(mlir::memref::ExtractStridedMetadataOp *a1)
{
  ZinIrHalH13g *v2;
  mlir::IndexType *v3;
  mlir::IndexType *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;
  uint64_t *v8;
  uint64_t ConstifiedMixedOffset;
  uint64_t v10;
  ZinIrHalH13g *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  mlir::detail::OpResultImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  mlir::IndexType *v22;
  mlir::IndexType *Context;
  uint64_t v24;
  const void *Value;
  uint64_t v26;
  size_t v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  mlir::MLIRContext *v34;
  uint64_t IndexAttr;
  uint64_t *v36;
  uint64_t i;
  mlir::MLIRContext *v38;
  uint64_t v39;
  unint64_t ConstantIntValue;
  char v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  mlir::detail::OpResultImpl *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  ZinIrHalH13g *v54;
  unint64_t v55;
  mlir::IndexType *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  mlir::MLIRContext *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t j;
  mlir::MLIRContext *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unsigned int v69;
  int v71;
  mlir::IndexType *v72[4];
  unint64_t v73;
  mlir::IndexType *v74;
  void *v75;
  unsigned int v76;
  _BYTE v77[48];
  uint64_t v78;
  unint64_t v79;
  void *Int;
  uint64_t v81;
  _QWORD v82[8];

  v82[6] = *MEMORY[0x24BDAC8D0];
  v2 = *(ZinIrHalH13g **)a1;
  v72[0] = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  v72[1] = 0;
  v3 = (mlir::IndexType *)*((_QWORD *)v2 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v2);
  v72[2] = v3;
  v72[3] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v6 = *(_QWORD *)a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 1);
  v8 = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
  ConstifiedMixedOffset = mlir::memref::ExtractStridedMetadataOp::getConstifiedMixedOffset(a1);
  if (*v8
    && (v10 = ConstifiedMixedOffset, ConstifiedMixedOffset != mlir::getAsOpFoldResult((uint64_t)v8))
    && (v75 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8),
        Int = (void *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v75),
        v11 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(v72, v5, (mlir::MLIRContext **)&Int),
        (v12 = (_QWORD *)*v8) != 0))
  {
    v13 = (uint64_t *)((char *)v11 - 16);
    do
    {
      v14 = (_QWORD *)*v12;
      mlir::Operation::replaceUsesOfWith(v12[2], v8, v13);
      v12 = v14;
    }
    while (v14);
    v71 = 1;
  }
  else
  {
    v71 = 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v16 = *(_DWORD *)(*(_QWORD *)a1 + 36);
  if (v16)
    v17 = *(_QWORD *)a1 - 16;
  else
    v17 = 0;
  v18 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 2);
  v19 = *(_DWORD *)(*(_QWORD *)a1 + 36);
  if (v19)
    v20 = *(_QWORD *)a1 - 16;
  else
    v20 = 0;
  v21 = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 2);
  mlir::ValueRange::ValueRange((unint64_t *)&v78, v21, (v19 - 2) >> 1);
  mlir::getAsOpFoldResult(v78, v79, &v75);
  v22 = (mlir::IndexType *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
  v74 = v22;
  Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v74);
  v26 = v24;
  v27 = 8 * v24;
  Int = v82;
  v81 = 0x600000000;
  if ((unint64_t)(8 * v24) < 0x31)
  {
    v28 = 0;
    v29 = v82;
    v30 = v16 - 2;
    if (!v24)
      goto LABEL_22;
    goto LABEL_21;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Int, v82, (8 * v24) >> 3, 8);
  v28 = v81;
  v29 = Int;
  v30 = v16 - 2;
  if (v26)
  {
LABEL_21:
    memcpy(&v29[v28], Value, v27);
    v28 = v81;
    v29 = Int;
  }
LABEL_22:
  v74 = Context;
  v31 = v28 + (v27 >> 3);
  LODWORD(v81) = v31;
  if ((_DWORD)v31)
  {
    v32 = 0;
    v33 = 8 * v31;
    do
    {
      v34 = (mlir::MLIRContext *)v29[v32 / 8];
      if (v34 != (mlir::MLIRContext *)0x8000000000000000)
      {
        IndexAttr = mlir::Builder::getIndexAttr(&v74, v34);
        *(_QWORD *)((char *)v75 + v32) = IndexAttr & 0xFFFFFFFFFFFFFFFBLL;
      }
      v32 += 8;
    }
    while (v33 != v32);
  }
  if (v76)
  {
    v36 = (uint64_t *)v75;
    for (i = 8 * v76; i; i -= 8)
    {
      v39 = *v36;
      if ((*v36 & 4) != 0)
      {
        ConstantIntValue = mlir::getConstantIntValue(v39 & 0xFFFFFFFFFFFFFFF8 | 4);
        if (!v41)
          goto LABEL_31;
        v38 = (mlir::MLIRContext *)ConstantIntValue;
      }
      else
      {
        v73 = v39 & 0xFFFFFFFFFFFFFFF8;
        v38 = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v73);
      }
      *v36 = mlir::Builder::getIndexAttr(&v74, v38) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_31:
      ++v36;
    }
  }
  if (Int != v82)
    free(Int);
  v42 = replaceConstantUsesOf<mlir::ResultRange>(v72, v15, v18, v30 >> 1, (uint64_t *)v75, v76);
  if (v75 != v77)
    free(v75);
  v43 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v44 = *(_DWORD *)(*(_QWORD *)a1 + 36);
  v45 = (v44 - 2) >> 1;
  v46 = v45 + 2;
  if (v44)
    v47 = *(_QWORD *)a1 - 16;
  else
    v47 = 0;
  v48 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v47, v45 + 2);
  v49 = v46 + v45;
  v50 = *(_DWORD *)(*(_QWORD *)a1 + 36);
  v51 = (v50 - 2) >> 1;
  if (v50)
    v52 = *(_QWORD *)a1 - 16;
  else
    v52 = 0;
  v53 = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, v51 + 2);
  mlir::ValueRange::ValueRange((unint64_t *)&v78, v53, v51 + 2 + v51 - (unint64_t)(v51 + 2));
  mlir::getAsOpFoldResult(v78, v79, &v75);
  v54 = *(ZinIrHalH13g **)a1;
  v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v56 = (mlir::IndexType *)mlir::Attribute::getContext((ZinIrHalH13g *)((char *)v54 + 24));
  getConstantStrides(v55, (uint64_t)&Int);
  v74 = v56;
  if ((_DWORD)v81)
  {
    v57 = 0;
    v58 = (char *)Int;
    v59 = 8 * v81;
    do
    {
      v60 = *(mlir::MLIRContext **)&v58[v57];
      if (v60 != (mlir::MLIRContext *)0x8000000000000000)
      {
        v61 = mlir::Builder::getIndexAttr(&v74, v60);
        *(_QWORD *)((char *)v75 + v57) = v61 & 0xFFFFFFFFFFFFFFFBLL;
      }
      v57 += 8;
    }
    while (v59 != v57);
  }
  v62 = v49 - v46;
  if (v76)
  {
    v63 = (uint64_t *)v75;
    for (j = 8 * v76; j; j -= 8)
    {
      v66 = *v63;
      if ((*v63 & 4) != 0)
      {
        v67 = mlir::getConstantIntValue(v66 & 0xFFFFFFFFFFFFFFF8 | 4);
        if (!v68)
          goto LABEL_54;
        v65 = (mlir::MLIRContext *)v67;
      }
      else
      {
        v73 = v66 & 0xFFFFFFFFFFFFFFF8;
        v65 = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v73);
      }
      *v63 = mlir::Builder::getIndexAttr(&v74, v65) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_54:
      ++v63;
    }
  }
  if (Int != v82)
    free(Int);
  v69 = replaceConstantUsesOf<mlir::ResultRange>(v72, v43, v48, v62, (uint64_t *)v75, v76);
  if (v75 != v77)
    free(v75);
  return v71 | v42 | v69;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::getConstifiedMixedOffset(mlir::memref::ExtractStridedMetadataOp *this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  mlir::IndexType *Context;
  uint64_t v8;
  void *v10[2];
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v2 = *(_QWORD *)this - 16;
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 1);
  v4 = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
  v10[0] = v11;
  v11[0] = mlir::getAsOpFoldResult(v4);
  v10[1] = (void *)0x600000001;
  v5 = *(_QWORD *)this;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v5 + 24));
  constifyIndexValues((uint64_t)v10, v6, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantOffset, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
  v8 = *(_QWORD *)v10[0];
  if (v10[0] != v11)
    free(v10[0]);
  return v8;
}

uint64_t replaceConstantUsesOf<mlir::ResultRange>(mlir::IndexType **a1, uint64_t a2, mlir::detail::OpResultImpl *this, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  char v6;
  uint64_t *v8;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *NextResultAtOffset;
  uint64_t *v15;
  uint64_t v16;
  ZinIrHalH13g *v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v22;
  mlir::MLIRContext *Int;

  v6 = 0;
  if (a6 && a4)
  {
    v8 = a5;
    v6 = 0;
    v12 = 0;
    v13 = &a5[a6];
    do
    {
      NextResultAtOffset = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)this, v12);
      if (*NextResultAtOffset)
      {
        v15 = NextResultAtOffset;
        v16 = *v8;
        if (v16 != mlir::getAsOpFoldResult((uint64_t)NextResultAtOffset))
        {
          v22 = *v8 & 0xFFFFFFFFFFFFFFF8;
          Int = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v22);
          v17 = mlir::OpBuilder::create<mlir::arith::ConstantIndexOp,long long>(a1, a2, &Int);
          v18 = (_QWORD *)*v15;
          if (*v15)
          {
            v19 = (uint64_t *)((char *)v17 - 16);
            do
            {
              v20 = (_QWORD *)*v18;
              mlir::Operation::replaceUsesOfWith(v18[2], v15, v19);
              v18 = v20;
            }
            while (v20);
            v6 = 1;
          }
        }
      }
      if (++v8 == v13)
        break;
      ++v12;
    }
    while (v12 != a4);
  }
  return v6 & 1;
}

void constifyIndexValues(uint64_t a1, uint64_t a2, mlir::IndexType *a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, mlir::MLIRContext *), uint64_t a7)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t i;
  mlir::MLIRContext *Int;
  unint64_t v19;
  unint64_t ConstantIntValue;
  char v21;
  unint64_t v22;
  mlir::IndexType *v23;
  void *v24;
  unsigned int v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x24BDAC8D0];
  a4(&v24, a5);
  v23 = a3;
  if (v25)
  {
    v11 = 0;
    v12 = (char *)v24;
    v13 = 8 * v25;
    do
    {
      v14 = *(mlir::MLIRContext **)&v12[v11];
      if ((a6(a7, v14) & 1) == 0)
        *(_QWORD *)(*(_QWORD *)a1 + v11) = mlir::Builder::getIndexAttr(&v23, v14) & 0xFFFFFFFFFFFFFFFBLL;
      v11 += 8;
    }
    while (v13 != v11);
  }
  v15 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v15)
  {
    v16 = *(unint64_t **)a1;
    for (i = 8 * v15; i; i -= 8)
    {
      v19 = *v16;
      if ((*v16 & 4) != 0)
      {
        ConstantIntValue = mlir::getConstantIntValue(v19 & 0xFFFFFFFFFFFFFFF8 | 4);
        if (!v21)
          goto LABEL_10;
        Int = (mlir::MLIRContext *)ConstantIntValue;
      }
      else
      {
        v22 = v19 & 0xFFFFFFFFFFFFFFF8;
        Int = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v22);
      }
      *v16 = mlir::Builder::getIndexAttr(&v23, Int) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_10:
      ++v16;
    }
  }
  if (v24 != v26)
    free(v24);
}

void getConstantSizes(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const void *Value;
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  uint64_t v8;

  v8 = a1;
  Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v8);
  v5 = v3;
  v6 = 8 * v3;
  *a2 = a2 + 2;
  a2[1] = 0x600000000;
  if ((unint64_t)(8 * v3) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 2, (8 * v3) >> 3, 8);
    v7 = *((_DWORD *)a2 + 2);
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (v3)
  {
LABEL_5:
    memcpy((void *)(*a2 + 8 * v7), Value, v6);
    v7 = *((_DWORD *)a2 + 2);
  }
LABEL_6:
  *((_DWORD *)a2 + 2) = v7 + (v6 >> 3);
}

void getConstantStrides(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char StridesAndOffset;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *__src;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  __src = v10;
  v9 = 0x600000000;
  StridesAndOffset = mlir::getStridesAndOffset(a1, (uint64_t)&__src, &v7);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  if (StridesAndOffset)
  {
    v4 = v9;
    if ((_DWORD)v9)
    {
      if (&__src != (void **)a2)
      {
        if (__src == v10)
        {
          v6 = v9;
          if (v9 < 7
            || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9, 8),
                (v6 = v9) != 0))
          {
            memcpy(*(void **)a2, __src, 8 * v6);
          }
          *(_DWORD *)(a2 + 8) = v4;
        }
        else
        {
          *(_QWORD *)a2 = __src;
          v5 = HIDWORD(v9);
          *(_DWORD *)(a2 + 8) = v4;
          *(_DWORD *)(a2 + 12) = v5;
          __src = v10;
          HIDWORD(v9) = 0;
        }
        LODWORD(v9) = 0;
      }
    }
  }
  if (__src != v10)
    free(__src);
}

void getConstantOffset(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char StridesAndOffset;
  uint64_t v5;
  void *v6[2];
  _QWORD v7[7];

  v7[6] = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6[0] = v7;
  v3 = 0x600000000;
  v6[1] = (void *)0x600000000;
  StridesAndOffset = mlir::getStridesAndOffset(a1, (uint64_t)v6, &v5);
  *a2 = a2 + 2;
  if (StridesAndOffset)
  {
    a2[2] = v5;
    v3 = 0x600000001;
  }
  a2[1] = v3;
  if (v6[0] != v7)
    free(v6[0]);
}

uint64_t mlir::memref::GenericAtomicRMWOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  ZinIrHalH13g *v30;
  ZinIrHalH13g *v31;
  ZinIrHalH13g *v32;
  mlir::ForwardIterator *v33;
  int v34;
  const void **v35[4];
  __int16 v36;
  _QWORD v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = *((unsigned int *)*this + 11);
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = (_QWORD *)((((unint64_t)&v2[2 * ((v3 >> 23) & 1) + 8] + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v2 + 10));
    if ((_QWORD *)*v4 == v4)
      goto LABEL_29;
  }
  else
  {
    v4 = 0;
    if (!MEMORY[0])
      goto LABEL_29;
  }
  v5 = v4[1];
  if (v5)
    v6 = v5 - 8;
  else
    v6 = 0;
  if (((*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) & 0x7FFFFFFF8) != 8)
  {
LABEL_29:
    v35[0] = (const void **)"expected single number of entry block arguments";
    v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v22 = __p;
      if (__p)
      {
        v23 = v43;
        v24 = __p;
        if (v43 != __p)
        {
          do
            v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          v24 = __p;
        }
        v43 = v22;
        operator delete(v24);
      }
      v17 = v40;
      if (!v40)
        goto LABEL_45;
      v25 = v41;
      v19 = v40;
      if (v41 == v40)
      {
LABEL_44:
        v41 = v17;
        operator delete(v19);
LABEL_45:
        if (v38 != &v39)
          free(v38);
        return v13;
      }
      do
      {
        v27 = *--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
          MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
      }
      while (v25 != v17);
LABEL_43:
      v19 = v40;
      goto LABEL_44;
    }
    return v13;
  }
  v7 = *((_DWORD *)v2 + 9);
  v8 = (uint64_t)(v2 - 2);
  if (v7)
    v9 = v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)v4[1];
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v10 == (*(_QWORD *)(*(_QWORD *)v12[6] + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    for (; v11 != v4; v11 = (_QWORD *)v11[1])
    {
      v29 = v11 - 1;
      if (!v11)
        v29 = 0;
      v30 = (ZinIrHalH13g *)(v29 + 4);
      v31 = (ZinIrHalH13g *)v29[5];
      while (v31 != v30)
      {
        v32 = (ZinIrHalH13g *)*((_QWORD *)v31 + 1);
        ZinIrHalH13g::~ZinIrHalH13g(v31);
        v34 = mlir::detail::walk<mlir::ForwardIterator>(v33, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::memref::GenericAtomicRMWOp::verify(void)::$_0>, (uint64_t)v37, 1);
        v31 = v32;
        if (!v34)
          return 0;
      }
    }
    return 1;
  }
  else
  {
    v35[0] = (const void **)"expected block argument of the same type result type";
    v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v14 = __p;
      if (__p)
      {
        v15 = v43;
        v16 = __p;
        if (v43 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v43 = v14;
        operator delete(v16);
      }
      v17 = v40;
      if (!v40)
        goto LABEL_45;
      v18 = v41;
      v19 = v40;
      if (v41 == v40)
        goto LABEL_44;
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
      }
      while (v18 != v17);
      goto LABEL_43;
    }
  }
  return v13;
}

uint64_t mlir::memref::GenericAtomicRMWOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t RHS;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  void *v16[4];
  void *v17;
  uint64_t v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  memset(v16, 0, 24);
  v15 = 0;
  v17 = v19;
  v18 = 0x400000000;
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  if ((*(unsigned __int8 (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 672))(a1, v16, 1)
    && (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v17, 2, 1, 0xFFFFFFFFLL)&& (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v15)&& (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v16, v15, (uint64_t)a2 + 16))
  {
    if ((_DWORD)v18)
    {
      v7 = (char *)v17;
      v8 = 32 * v18;
      while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v7, IndexType, (uint64_t)a2 + 16))
      {
        v7 += 32;
        v8 -= 32;
        if (!v8)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v9 = mlir::OperationState::addRegion(a2);
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v9, 0, 0, 0)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112))
      {
        v14 = v15;
        RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v14);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)a2 + 64, RHS);
        v11 = 1;
        v12 = v17;
        if (v17 == v19)
          return v11;
        goto LABEL_14;
      }
    }
  }
  v11 = 0;
  v12 = v17;
  if (v17 != v19)
LABEL_14:
    free(v12);
  return v11;
}

uint64_t mlir::memref::GenericAtomicRMWOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  _DWORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  mlir::Operation *v18;
  mlir::ArrayAttr *v19;
  uint64_t Value;
  uint64_t v21;
  _QWORD v23[2];

  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_6;
  }
  else
  {
    *v7 = 91;
    ++*((_QWORD *)v6 + 4);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_6:
      v9 = *((unsigned int *)v8 + 17);
      v10 = *((_QWORD *)v8 + 9);
      v11 = v9 - 1;
      goto LABEL_7;
    }
  }
  v10 = 0;
  v11 = -1;
LABEL_7:
  v12 = v10 + 32;
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23[0] = ", ";
  v23[1] = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)v23);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_DWORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 3uLL)
  {
    *v15 = 540680285;
    *((_QWORD *)v14 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v14, "] : ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 1, 1, 0);
  v18 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v23[0] = mlir::Operation::getAttrDictionary(v18);
    v19 = (mlir::ArrayAttr *)v23;
  }
  else
  {
    v19 = (mlir::Operation *)((char *)v18 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v19);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v21, 0, 0);
}

uint64_t mlir::memref::AtomicYieldOp::verify(uint64_t **this)
{
  unsigned int *ParentOp;
  const void **v3;
  const void **v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  const void **v43[4];
  __int16 v44;
  int v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48[3];
  void *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[96];
  void *v53;
  _QWORD *v54;
  void *__p;
  _QWORD *v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  ParentOp = (unsigned int *)(*this)[2];
  if (ParentOp)
    ParentOp = (unsigned int *)mlir::Block::getParentOp((mlir::Block *)ParentOp);
  v3 = (const void **)ParentOp[9];
  v4 = (const void **)(ParentOp - 4);
  if (!(_DWORD)v3)
    v4 = 0;
  v43[0] = v4;
  v43[1] = v3;
  mlir::OperandRange::getTypes((uint64_t *)v43, v48);
  v5 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v48[0], v48[1]) + 8) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == v6)
    return 1;
  v44 = 257;
  mlir::OpState::emitOpError(this, v43, (uint64_t)v48);
  if (v48[0])
  {
    v45 = 3;
    v46 = "types mismatch between yield op: ";
    v47 = 33;
    v7 = &v45;
    v8 = (char *)v49;
    if (v50 >= v51)
    {
      v34 = v50 + 1;
      if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
      {
        v39 = (char *)&v45 - (_BYTE *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
        v8 = (char *)v49;
        v7 = (int *)((char *)v49 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
        v7 = &v45;
        v8 = (char *)v49;
      }
    }
    v9 = &v8[24 * v50];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    ++v50;
    if (v48[0])
    {
      v11 = &v45;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v45, v6);
      v12 = (char *)v49;
      if (v50 >= v51)
      {
        v35 = v50 + 1;
        if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
        {
          v40 = (char *)&v45 - (_BYTE *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          v12 = (char *)v49;
          v11 = (int *)((char *)v49 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          v11 = &v45;
          v12 = (char *)v49;
        }
      }
      v13 = &v12[24 * v50];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      v15 = ++v50;
      if (v48[0])
      {
        v45 = 3;
        v46 = " and its parent: ";
        v47 = 17;
        v16 = &v45;
        v17 = (char *)v49;
        if (v15 >= v51)
        {
          v36 = v15 + 1;
          v37 = (char *)v49 + 24 * v15 > (char *)&v45;
          if (v49 <= &v45 && v37)
          {
            v41 = (char *)&v45 - (_BYTE *)v49;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
            v17 = (char *)v49;
            v16 = (int *)((char *)v49 + v41);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v36, 24);
            v16 = &v45;
            v17 = (char *)v49;
          }
        }
        v18 = &v17[24 * v50];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v18 = v19;
        ++v50;
        if (v48[0])
        {
          v20 = &v45;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v45, v5);
          v21 = (char *)v49;
          if (v50 >= v51)
          {
            v38 = v50 + 1;
            if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
            {
              v42 = (char *)&v45 - (_BYTE *)v49;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v38, 24);
              v21 = (char *)v49;
              v20 = (int *)((char *)v49 + v42);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v38, 24);
              v20 = &v45;
              v21 = (char *)v49;
            }
          }
          v22 = &v21[24 * v50];
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          ++v50;
        }
      }
    }
  }
  v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  if (v48[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  if (v57)
  {
    v25 = __p;
    if (__p)
    {
      v26 = v56;
      v27 = __p;
      if (v56 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v56 = v25;
      operator delete(v27);
    }
    v28 = v53;
    if (v53)
    {
      v29 = v54;
      v30 = v53;
      if (v54 != v53)
      {
        do
        {
          v32 = *--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
        }
        while (v29 != v28);
        v30 = v53;
      }
      v54 = v28;
      operator delete(v30);
    }
    if (v49 != v52)
      free(v49);
  }
  return v24;
}

uint64_t mlir::memref::GlobalOp::verify(uint64_t **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Type;
  uint64_t TensorTypeFromMemRefType;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t *v49;
  int8x8_t v50;
  uint8x8_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  unint64_t v89;
  BOOL v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  const void **v104[4];
  __int16 v105;
  uint64_t Value;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  int8x8_t *v110;
  unsigned int v111;
  void *v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE v115[96];
  void *v116;
  _QWORD *v117;
  void *__p;
  _QWORD *v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v110 = *(int8x8_t **)(v2 + 40);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v110);
  if (!Value || !mlir::BaseMemRefType::hasRank((mlir::BaseMemRefType *)&Value))
    goto LABEL_18;
  v3 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
  if (!v4)
  {
LABEL_9:
    v6 = *this;
    v7 = ((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1;
    if (HIBYTE(*((_DWORD *)*this + 11)))
      v8 = (uint64_t)&(*this)[2 * v7 + 8];
    else
      v8 = 0;
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)v9;
      if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      {
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(v10 + 8))
        {
          v104[0] = (const void **)"initial value should be a unit or elements attribute, but got ";
          v105 = 259;
          mlir::OpState::emitOpError(this, v104, (uint64_t)&v110);
          if (v110)
          {
            v72 = (char *)&v107;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v9);
            v73 = (char *)v112;
            if (v113 >= v114)
            {
              v86 = v113 + 1;
              if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
              {
                v97 = (char *)&v107 - (_BYTE *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v86, 24);
                v73 = (char *)v112;
                v72 = (char *)v112 + v97;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v86, 24);
                v72 = (char *)&v107;
                v73 = (char *)v112;
              }
            }
            v74 = &v73[24 * v113];
            v75 = *(_OWORD *)v72;
            *((_QWORD *)v74 + 2) = *((_QWORD *)v72 + 2);
            *(_OWORD *)v74 = v75;
            ++v113;
          }
          v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
          if (v110)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
          if (!v120)
            return v18;
          v76 = __p;
          if (__p)
          {
            v77 = v119;
            v78 = __p;
            if (v119 != __p)
            {
              do
                v77 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v77 - 1);
              while (v77 != v76);
              v78 = __p;
            }
            v119 = v76;
            operator delete(v78);
          }
          v22 = v116;
          if (!v116)
            goto LABEL_110;
          v79 = v117;
          v24 = v116;
          if (v117 == v116)
            goto LABEL_109;
          do
          {
            v81 = *--v79;
            v80 = v81;
            *v79 = 0;
            if (v81)
              MEMORY[0x20BD002D4](v80, 0x1000C8077774924);
          }
          while (v79 != v22);
          goto LABEL_108;
        }
        v10 = *(_QWORD *)v9;
      }
      if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(v10 + 8))
      {
        v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(_QWORD *)v9 + 8);
        v102 = v9;
        v103 = v11;
        Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v102);
        TensorTypeFromMemRefType = mlir::memref::getTensorTypeFromMemRefType(Value);
        if (Type != TensorTypeFromMemRefType)
        {
          v29 = TensorTypeFromMemRefType;
          v104[0] = (const void **)"initial value expected to be of type ";
          v105 = 259;
          mlir::OpState::emitOpError(this, v104, (uint64_t)&v110);
          if (v110)
          {
            v30 = (char *)&v107;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v29);
            v31 = (char *)v112;
            if (v113 >= v114)
            {
              v85 = v113 + 1;
              if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
              {
                v96 = (char *)&v107 - (_BYTE *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v85, 24);
                v31 = (char *)v112;
                v30 = (char *)v112 + v96;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v85, 24);
                v30 = (char *)&v107;
                v31 = (char *)v112;
              }
            }
            v32 = &v31[24 * v113];
            v33 = *(_OWORD *)v30;
            *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
            *(_OWORD *)v32 = v33;
            v34 = ++v113;
            if (v110)
            {
              LODWORD(v107) = 3;
              v108 = ", but was of type ";
              v109 = 18;
              v35 = (char *)&v107;
              v36 = (char *)v112;
              if (v34 >= v114)
              {
                v89 = v34 + 1;
                v90 = (char *)v112 + 24 * v34 > (char *)&v107;
                if (v112 <= &v107 && v90)
                {
                  v99 = (char *)&v107 - (_BYTE *)v112;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
                  v36 = (char *)v112;
                  v35 = (char *)v112 + v99;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v89, 24);
                  v35 = (char *)&v107;
                  v36 = (char *)v112;
                }
              }
              v37 = &v36[24 * v113];
              v38 = *(_OWORD *)v35;
              *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
              *(_OWORD *)v37 = v38;
              ++v113;
              if (v110)
              {
                v39 = (char *)&v107;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, Type);
                v40 = (char *)v112;
                if (v113 >= v114)
                {
                  v93 = v113 + 1;
                  if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
                  {
                    v101 = (char *)&v107 - (_BYTE *)v112;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
                    v40 = (char *)v112;
                    v39 = (char *)v112 + v101;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v93, 24);
                    v39 = (char *)&v107;
                    v40 = (char *)v112;
                  }
                }
                v41 = &v40[24 * v113];
                v42 = *(_OWORD *)v39;
                *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
                *(_OWORD *)v41 = v42;
                ++v113;
              }
            }
          }
          v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
          if (v110)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
          if (!v120)
            return v18;
          v43 = __p;
          if (__p)
          {
            v44 = v119;
            v45 = __p;
            if (v119 != __p)
            {
              do
                v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
              while (v44 != v43);
              v45 = __p;
            }
            v119 = v43;
            operator delete(v45);
          }
          v22 = v116;
          if (!v116)
            goto LABEL_110;
          v46 = v117;
          v24 = v116;
          if (v117 == v116)
          {
LABEL_109:
            v117 = v22;
            operator delete(v24);
LABEL_110:
            if (v112 != v115)
              free(v112);
            return v18;
          }
          do
          {
            v48 = *--v46;
            v47 = v48;
            *v46 = 0;
            if (v48)
              MEMORY[0x20BD002D4](v47, 0x1000C8077774924);
          }
          while (v46 != v22);
          goto LABEL_108;
        }
      }
      else
      {
        v102 = 0;
        v103 = 0;
      }
      v6 = *this;
      v7 = ((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1;
    }
    v104[0] = (const void **)v6[2 * v7 + 8];
    if (!v104[0])
      return 1;
    mlir::IntegerAttr::getValue(v104, (llvm::APInt *)&v110);
    if (v111 >= 0x41)
      v49 = v110;
    else
      v49 = (int8x8_t *)&v110;
    v50 = *v49;
    if (v111 >= 0x41 && v110)
      MEMORY[0x20BD002D4](v110, 0x1000C8000313F17);
    v51 = (uint8x8_t)vcnt_s8(v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] == 1)
      return 1;
    v105 = 257;
    mlir::OpState::emitError(this, (uint64_t)v104, (uint64_t)&v110);
    if (v110)
    {
      LODWORD(v107) = 3;
      v108 = "alignment attribute value ";
      v109 = 26;
      v52 = (char *)&v107;
      v53 = (char *)v112;
      if (v113 >= v114)
      {
        v84 = v113 + 1;
        if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
        {
          v95 = (char *)&v107 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v84, 24);
          v53 = (char *)v112;
          v52 = (char *)v112 + v95;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v84, 24);
          v52 = (char *)&v107;
          v53 = (char *)v112;
        }
      }
      v54 = &v53[24 * v113];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
      *(_OWORD *)v54 = v55;
      v56 = ++v113;
      if (v110)
      {
        LODWORD(v107) = 5;
        v108 = (const char *)v50;
        v57 = (char *)&v107;
        v58 = (char *)v112;
        if (v56 >= v114)
        {
          v87 = v56 + 1;
          v88 = (char *)v112 + 24 * v56 > (char *)&v107;
          if (v112 <= &v107 && v88)
          {
            v98 = (char *)&v107 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v87, 24);
            v58 = (char *)v112;
            v57 = (char *)v112 + v98;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v87, 24);
            v57 = (char *)&v107;
            v58 = (char *)v112;
          }
        }
        v59 = &v58[24 * v113];
        v60 = *(_OWORD *)v57;
        *((_QWORD *)v59 + 2) = *((_QWORD *)v57 + 2);
        *(_OWORD *)v59 = v60;
        v61 = ++v113;
        if (v110)
        {
          LODWORD(v107) = 3;
          v108 = " is not a power of 2";
          v109 = 20;
          v62 = (char *)&v107;
          v63 = (char *)v112;
          if (v61 >= v114)
          {
            v91 = v61 + 1;
            v92 = (char *)v112 + 24 * v61 > (char *)&v107;
            if (v112 <= &v107 && v92)
            {
              v100 = (char *)&v107 - (_BYTE *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
              v63 = (char *)v112;
              v62 = (char *)v112 + v100;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v91, 24);
              v62 = (char *)&v107;
              v63 = (char *)v112;
            }
          }
          v64 = &v63[24 * v113];
          v65 = *(_OWORD *)v62;
          *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
          *(_OWORD *)v64 = v65;
          ++v113;
        }
      }
    }
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
    if (v110)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
    if (!v120)
      return v18;
    v66 = __p;
    if (__p)
    {
      v67 = v119;
      v68 = __p;
      if (v119 != __p)
      {
        do
          v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        v68 = __p;
      }
      v119 = v66;
      operator delete(v68);
    }
    v22 = v116;
    if (!v116)
      goto LABEL_110;
    v69 = v117;
    v24 = v116;
    if (v117 == v116)
      goto LABEL_109;
    do
    {
      v71 = *--v69;
      v70 = v71;
      *v69 = 0;
      if (v71)
        MEMORY[0x20BD002D4](v70, 0x1000C8077774924);
    }
    while (v69 != v22);
LABEL_108:
    v24 = v116;
    goto LABEL_109;
  }
  v5 = 8 * v4;
  while (*v3 != 0x8000000000000000)
  {
    ++v3;
    v5 -= 8;
    if (!v5)
      goto LABEL_9;
  }
LABEL_18:
  v104[0] = (const void **)"type should be static shaped memref, but got ";
  v105 = 259;
  mlir::OpState::emitOpError(this, v104, (uint64_t)&v110);
  v12 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v12 = 0;
  v107 = *(_QWORD *)(v12 + 40);
  v13 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v107);
  if (v110)
  {
    v14 = (char *)&v107;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v13);
    v15 = (char *)v112;
    if (v113 >= v114)
    {
      v83 = v113 + 1;
      if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
      {
        v94 = (char *)&v107 - (_BYTE *)v112;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v83, 24);
        v15 = (char *)v112;
        v14 = (char *)v112 + v94;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v83, 24);
        v14 = (char *)&v107;
        v15 = (char *)v112;
      }
    }
    v16 = &v15[24 * v113];
    v17 = *(_OWORD *)v14;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v16 = v17;
    ++v113;
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
  if (v110)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
  if (v120)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v119;
      v21 = __p;
      if (v119 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v119 = v19;
      operator delete(v21);
    }
    v22 = v116;
    if (!v116)
      goto LABEL_110;
    v23 = v117;
    v24 = v116;
    if (v117 == v116)
      goto LABEL_109;
    do
    {
      v26 = *--v23;
      v25 = v26;
      *v23 = 0;
      if (v26)
        MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
    }
    while (v23 != v22);
    goto LABEL_108;
  }
  return v18;
}

_QWORD *mlir::memref::GlobalOp::getConstantInitValue(mlir::memref::GlobalOp *this)
{
  _QWORD *result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;

  result = 0;
  v3 = *(_QWORD *)this;
  v4 = *(unsigned int *)(v3 + 44);
  v5 = v3 + 16 * ((v4 >> 23) & 1) + 64;
  if (!BYTE3(v4))
    v5 = 0;
  v6 = *(_QWORD **)(v5 + 16);
  if (*(_QWORD *)(v5 + 8))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v6 + 8);
    return v6;
  }
  return result;
}

uint64_t mlir::memref::GetGlobalOp::verifySymbolUses(mlir::SymbolTable **this, mlir::SymbolTableCollection *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  const char *v6;
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const void ***v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  const void ***v28;
  char *v29;
  char *v30;
  __int128 v31;
  unint64_t v32;
  uint64_t Value;
  const void ***v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  const void ***v39;
  char *v40;
  char *v41;
  __int128 v42;
  const void **AttrData;
  const char *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  BOOL v58;
  int64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  const void **v64[4];
  __int16 v65;
  uint64_t v66;
  const void **v67;
  const char *v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  _BYTE v72[16];
  void *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE v76[96];
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD *v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v3 = mlir::SymbolTableCollection::lookupNearestSymbolFrom((uint64_t)a2, *this, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  if (v3
    && (v4 = v3,
        *(_UNKNOWN **)(*(_QWORD *)(v3 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id))
  {
    if (*((_DWORD *)*this + 9))
      v20 = (uint64_t)*this - 16;
    else
      v20 = 0;
    v21 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (HIBYTE(*(_DWORD *)(v4 + 44)))
      v22 = v4 + 64 + 16 * (((unint64_t)*(unsigned int *)(v4 + 44) >> 23) & 1);
    else
      v22 = 0;
    v71 = *(_QWORD *)(v22 + 40);
    if (mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v71) == v21)
      return 1;
    v64[0] = (const void **)"result type ";
    v65 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v64, (uint64_t)&v71);
    if (v71)
    {
      v23 = &v67;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v21);
      v24 = (char *)v73;
      if (v74 >= v75)
      {
        v53 = v74 + 1;
        if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
        {
          v60 = (char *)&v67 - (_BYTE *)v73;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v53, 24);
          v24 = (char *)v73;
          v23 = (const void ***)((char *)v73 + v60);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v53, 24);
          v23 = &v67;
          v24 = (char *)v73;
        }
      }
      v25 = &v24[24 * v74];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = v23[2];
      *(_OWORD *)v25 = v26;
      v27 = ++v74;
      if (v71)
      {
        LODWORD(v67) = 3;
        v68 = " does not match type ";
        v69 = 21;
        v28 = &v67;
        v29 = (char *)v73;
        if (v27 >= v75)
        {
          v55 = v27 + 1;
          v56 = (char *)v73 + 24 * v27 > (char *)&v67;
          if (v73 <= &v67 && v56)
          {
            v62 = (char *)&v67 - (_BYTE *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v55, 24);
            v29 = (char *)v73;
            v28 = (const void ***)((char *)v73 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v55, 24);
            v28 = &v67;
            v29 = (char *)v73;
          }
        }
        v30 = &v29[24 * v74];
        v31 = *(_OWORD *)v28;
        *((_QWORD *)v30 + 2) = v28[2];
        *(_OWORD *)v30 = v31;
        ++v74;
      }
    }
    if (HIBYTE(*(_DWORD *)(v4 + 44)))
      v32 = v4 + 64 + 16 * (((unint64_t)*(unsigned int *)(v4 + 44) >> 23) & 1);
    else
      v32 = 0;
    v67 = *(const void ***)(v32 + 40);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
    if (v71)
    {
      v34 = &v67;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, Value);
      v35 = (char *)v73;
      if (v74 >= v75)
      {
        v54 = v74 + 1;
        if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
        {
          v61 = (char *)&v67 - (_BYTE *)v73;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
          v35 = (char *)v73;
          v34 = (const void ***)((char *)v73 + v61);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
          v34 = &v67;
          v35 = (char *)v73;
        }
      }
      v36 = &v35[24 * v74];
      v37 = *(_OWORD *)v34;
      *((_QWORD *)v36 + 2) = v34[2];
      *(_OWORD *)v36 = v37;
      v38 = ++v74;
      if (v71)
      {
        LODWORD(v67) = 3;
        v68 = " of the global memref @";
        v69 = 23;
        v39 = &v67;
        v40 = (char *)v73;
        if (v38 >= v75)
        {
          v57 = v38 + 1;
          v58 = (char *)v73 + 24 * v38 > (char *)&v67;
          if (v73 <= &v67 && v58)
          {
            v63 = (char *)&v67 - (_BYTE *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            v40 = (char *)v73;
            v39 = (const void ***)((char *)v73 + v63);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            v39 = &v67;
            v40 = (char *)v73;
          }
        }
        v41 = &v40[24 * v74];
        v42 = *(_OWORD *)v39;
        *((_QWORD *)v41 + 2) = v39[2];
        *(_OWORD *)v41 = v42;
        ++v74;
      }
    }
    v66 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
    v67 = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
    AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v67);
    if (v71)
    {
      v70 = 261;
      v67 = AttrData;
      v68 = v44;
      mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
    }
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if (v71)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    if (v81)
    {
      v45 = __p;
      if (__p)
      {
        v46 = v80;
        v47 = __p;
        if (v80 != __p)
        {
          do
            v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          v47 = __p;
        }
        v80 = v45;
        operator delete(v47);
      }
      v15 = v77;
      if (!v77)
        goto LABEL_59;
      v48 = v78;
      v17 = v77;
      if (v78 == v77)
        goto LABEL_58;
      do
      {
        v50 = *--v48;
        v49 = v50;
        *v48 = 0;
        if (v50)
          MEMORY[0x20BD002D4](v49, 0x1000C8077774924);
      }
      while (v48 != v15);
      goto LABEL_57;
    }
  }
  else
  {
    v64[0] = (const void **)"'";
    v65 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, v64, (uint64_t)&v71);
    v66 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
    v67 = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
    v5 = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v67);
    if (v71)
    {
      v70 = 261;
      v67 = v5;
      v68 = v6;
      mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
      if (v71)
      {
        LODWORD(v67) = 3;
        v68 = "' does not reference a valid global memref";
        v69 = 42;
        v7 = &v67;
        v8 = (char *)v73;
        if (v74 >= v75)
        {
          v52 = v74 + 1;
          if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
          {
            v59 = (char *)&v67 - (_BYTE *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
            v8 = (char *)v73;
            v7 = (const void ***)((char *)v73 + v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
            v7 = &v67;
            v8 = (char *)v73;
          }
        }
        v9 = &v8[24 * v74];
        v10 = *(_OWORD *)v7;
        *((_QWORD *)v9 + 2) = v7[2];
        *(_OWORD *)v9 = v10;
        ++v74;
      }
    }
    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if (v71)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    if (v81)
    {
      v12 = __p;
      if (__p)
      {
        v13 = v80;
        v14 = __p;
        if (v80 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v80 = v12;
        operator delete(v14);
      }
      v15 = v77;
      if (!v77)
        goto LABEL_59;
      v16 = v78;
      v17 = v77;
      if (v78 == v77)
      {
LABEL_58:
        v78 = v15;
        operator delete(v17);
LABEL_59:
        if (v73 != v76)
          free(v73);
        return v11;
      }
      do
      {
        v19 = *--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          MEMORY[0x20BD002D4](v18, 0x1000C8077774924);
      }
      while (v16 != v15);
LABEL_57:
      v17 = v77;
      goto LABEL_58;
    }
  }
  return v11;
}

uint64_t mlir::memref::LoadOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v15;
  __int16 v16;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((unsigned int *)v2 + 17);
  else
    v3 = 0;
  v17[0] = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v17);
  if (v4 + 1 == v3)
    return 1;
  v15 = (const void **)"incorrect number of indices for load";
  v16 = 259;
  mlir::OpState::emitOpError(this, &v15, (uint64_t)v17);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  if (v24)
  {
    v6 = __p;
    if (__p)
    {
      v7 = v23;
      v8 = __p;
      if (v23 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v23 = v6;
      operator delete(v8);
    }
    v9 = v20;
    if (v20)
    {
      v10 = v21;
      v11 = v20;
      if (v21 != v20)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
        }
        while (v10 != v9);
        v11 = v20;
      }
      v21 = v9;
      operator delete(v11);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v5;
}

uint64_t mlir::memref::LoadOp::fold(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t DefiningOp;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) == 0)
    return 0;
  v2 = *(unsigned int *)(v1 + 68);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  v5 = *(uint64_t **)(v1 + 72);
  v6 = &v5[4 * v2];
  do
  {
    while (1)
    {
      v13 = v5[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (!DefiningOp)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
        break;
      if (!v5[3])
        break;
      v8 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
        break;
      v9 = (uint64_t *)v5[1];
      if (v9)
      {
        *v9 = *v5;
        if (*v5)
          *(_QWORD *)(*v5 + 8) = v5[1];
      }
      v5[3] = (uint64_t)v8;
      v10 = *v8;
      *v5 = *v8;
      v5[1] = (uint64_t)v8;
      if (v10)
        *(_QWORD *)(v10 + 8) = v5;
      *v8 = (uint64_t)v5;
      v5 += 4;
      v4 = 1;
      if (v5 == v6)
        goto LABEL_17;
    }
    v5 += 4;
  }
  while (v5 != v6);
  if ((v4 & 1) == 0)
    return 0;
LABEL_17:
  if (*(_DWORD *)(*a1 + 36))
    v11 = *a1 - 16;
  else
    v11 = 0;
  return mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) | 4;
}

uint64_t mlir::memref::MemorySpaceCastOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "memspacecast", 12);
}

BOOL mlir::memref::MemorySpaceCastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t RHS;
  uint64_t RawStringData;
  const void *Value;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[5];

  result = 0;
  if (a2 == 1 && a4 == 1)
  {
    v30[3] = v4;
    v30[4] = v5;
    v9 = mlir::TypeRange::dereference_iterator(a1, 0);
    v10 = mlir::TypeRange::dereference_iterator(a3, 0);
    v11 = *(void **)(*(_QWORD *)v9 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v30[0] = v12;
    v13 = *(void **)(*(_QWORD *)v10 + 136);
    if (v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v14 = v10;
    else
      v14 = 0;
    if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
      v15 = v9;
    else
      v15 = 0;
    if (v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
      v16 = v10;
    else
      v16 = 0;
    v28 = v15;
    v29 = v14;
    v27 = v16;
    if (v11 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
      && v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v30);
      if (RHS == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v29))
      {
        RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v30);
        if (RawStringData == mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v29))
        {
          Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v30);
          v24 = v23;
          v25 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
          if (v24 == v26 && !memcmp(Value, v25, 8 * v24))
            return 1;
        }
      }
    }
    else if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id
           && v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
    {
      v19 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v28);
      return v19 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v27);
    }
    return 0;
  }
  return result;
}

uint64_t mlir::memref::MemorySpaceCastOp::fold(uint64_t a1)
{
  uint64_t DefiningOp;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v8);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::MemorySpaceCastOp,void>::id)
  {
    return 4;
  }
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v5 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
  v6 = (uint64_t *)v4[1];
  if (v6)
  {
    *v6 = *v4;
    if (*v4)
      *(_QWORD *)(*v4 + 8) = v4[1];
  }
  v4[3] = (uint64_t)v5;
  v7 = *v5;
  *v4 = *v5;
  v4[1] = (uint64_t)v5;
  if (v7)
    *(_QWORD *)(v7 + 8) = v4;
  *v5 = (uint64_t)v4;
  return (*(_QWORD *)a1 - 16) | 4;
}

uint64_t mlir::memref::PrefetchOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _WORD *v17;
  unint64_t v18;
  _BOOL4 Value;
  uint64_t v20;
  llvm::raw_ostream *v21;
  const char *v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  const char *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  mlir::Operation *v40;
  mlir::ArrayAttr *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  uint64_t v45;
  uint64_t v47;
  _OWORD v48[3];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 91);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 91;
  }
  v8 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v9 = *((unsigned int *)v8 + 17);
    v10 = *((_QWORD *)v8 + 9);
    v11 = v9 - 1;
  }
  else
  {
    v10 = 0;
    v11 = -1;
  }
  v12 = v10 + 32;
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)&v48[0] = ", ";
  *((_QWORD *)&v48[0] + 1) = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)v48);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 93);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 93;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 1uLL)
  {
    *v17 = 8236;
    *((_QWORD *)v16 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v16, ", ", 2uLL);
  }
  v18 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v18 = 0;
  *(_QWORD *)&v48[0] = *(_QWORD *)(v18 + 8);
  Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)v48);
  v20 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (llvm::raw_ostream *)v20;
  if (Value)
    v22 = "write";
  else
    v22 = "read";
  if (Value)
    v23 = 5;
  else
    v23 = 4;
  v25 = *(_QWORD *)(v20 + 24);
  v24 = *(void **)(v20 + 32);
  if (v23 <= v25 - (uint64_t)v24)
  {
    memcpy(v24, v22, v23);
    *((_QWORD *)v21 + 4) += v23;
  }
  else
  {
    llvm::raw_ostream::write(v21, v22, v23);
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = *((_QWORD *)v26 + 4);
  if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 0xA)
  {
    *(_DWORD *)(v27 + 7) = 1014592617;
    *(_QWORD *)v27 = *(_QWORD *)", locality<";
    *((_QWORD *)v26 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v26, ", locality<", 0xBuLL);
  }
  v28 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v28 = 0;
  v47 = *(_QWORD *)(v28 + 16);
  mlir::IntegerAttr::getValue(&v47, (llvm::APInt *)v48);
  if (DWORD2(v48[0]) > 0x40)
  {
    v29 = **(_DWORD **)&v48[0];
    MEMORY[0x20BD002D4]();
  }
  else
  {
    v29 = LODWORD(v48[0]);
  }
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v30, v29);
  v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v32 = *((_QWORD *)v31 + 4);
  if ((unint64_t)(*((_QWORD *)v31 + 3) - v32) > 2)
  {
    *(_BYTE *)(v32 + 2) = 32;
    *(_WORD *)v32 = 11326;
    *((_QWORD *)v31 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v31, ">, ", 3uLL);
  }
  *(_QWORD *)&v48[0] = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  v33 = mlir::BoolAttr::getValue((mlir::BoolAttr *)v48);
  v34 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = (llvm::raw_ostream *)v34;
  if (v33)
    v36 = "data";
  else
    v36 = "instr";
  if (v33)
    v37 = 4;
  else
    v37 = 5;
  v39 = *(_QWORD *)(v34 + 24);
  v38 = *(void **)(v34 + 32);
  if (v37 <= v39 - (uint64_t)v38)
  {
    memcpy(v38, v36, v37);
    *((_QWORD *)v35 + 4) += v37;
    v40 = *this;
    if (*((_BYTE *)*this + 47))
      goto LABEL_45;
  }
  else
  {
    llvm::raw_ostream::write(v35, v36, v37);
    v40 = *this;
    if (*((_BYTE *)*this + 47))
    {
LABEL_45:
      *(_QWORD *)&v48[0] = mlir::Operation::getAttrDictionary(v40);
      v41 = (mlir::ArrayAttr *)v48;
      goto LABEL_48;
    }
  }
  v41 = (mlir::Operation *)((char *)v40 + 56);
LABEL_48:
  v42 = mlir::ArrayAttr::getValue(v41);
  v48[0] = xmmword_24C060F20;
  v48[1] = *(_OWORD *)&off_24C060F30;
  v48[2] = xmmword_24C060F40;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, v42, v43, v48, 3);
  v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v45 = *((_QWORD *)v44 + 4);
  if ((unint64_t)(*((_QWORD *)v44 + 3) - v45) > 2)
  {
    *(_BYTE *)(v45 + 2) = 32;
    *(_WORD *)v45 = 14880;
    *((_QWORD *)v44 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v44, " : ", 3uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::PrefetchOp::parse(mlir::AsmParser *a1, mlir::Attribute *a2)
{
  mlir::IndexType **v4;
  mlir::MLIRContext *v5;
  uint64_t IndexType;
  mlir::Builder *v7;
  uint64_t IntegerType;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  mlir::BoolAttr **v23;
  mlir::MLIRContext *v25;
  uint64_t BoolAttr;
  mlir::StringAttr *Context;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  mlir::BoolAttr **v37;
  mlir::MLIRContext *v38;
  uint64_t v39;
  mlir::StringAttr *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  const char *v52;
  uint64_t v53;
  void *v54;
  __int16 v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  void *__p;
  _QWORD *v60;
  char v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[17];

  v64[16] = *MEMORY[0x24BDAC8D0];
  memset(v51, 0, 24);
  v62 = (char *)v64;
  v63 = 0x400000000;
  v49 = 0;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v4 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v4, v5);
  v7 = (mlir::Builder *)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  IntegerType = mlir::Builder::getIntegerType(v7, 0x20u);
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v51, 1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v62, 2, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 120))(a1)|| !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v47)|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 120))(a1)|| (v55 = 257, !(*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t, const char **))(*(_QWORD *)a1 + 368))(a1, "locality", 8, &v52))|| !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 152))(a1)|| !mlir::AsmParser::parseAttribute<mlir::IntegerAttr>((uint64_t)a1, &v50, IntegerType,
                           (uint64_t)"localityHint",
                           12,
                           (uint64_t)a2 + 112)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 168))(a1)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 120))(a1)
    || !mlir::AsmParser::parseKeyword(a1, (llvm::StringRef *)&v45)
    || !mlir::AsmParser::parseColonType<mlir::MemRefType>((uint64_t)a1, &v49)
    || !(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v51, v49, (uint64_t)a2 + 16))
  {
LABEL_32:
    v12 = 0;
    goto LABEL_33;
  }
  if ((_DWORD)v63)
  {
    v9 = v62;
    v10 = 32 * v63;
    while ((*(unsigned __int8 (**)(mlir::AsmParser *, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, (uint64_t)a2 + 16))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10)
        goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_18:
  if (v48 == 5)
  {
    if (*(_DWORD *)v47 != 1953067639 || *(_BYTE *)(v47 + 4) != 101)
    {
LABEL_21:
      v11 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 16))(a1);
      v42 = "rw specifier has to be 'read' or 'write'";
      v44 = 259;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v52, a1, v11, &v42);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v52);
      if (v52)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v52);
      if (v61)
      {
        v13 = __p;
        if (__p)
        {
          v14 = v60;
          v15 = __p;
          if (v60 != __p)
          {
            do
              v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            v15 = __p;
          }
          v60 = v13;
          operator delete(v15);
        }
        v16 = v57;
        if (!v57)
          goto LABEL_71;
        v17 = v58;
        v18 = v57;
        if (v58 == v57)
        {
LABEL_70:
          v58 = v16;
          operator delete(v18);
LABEL_71:
          if (v54 != &v56)
            free(v54);
          goto LABEL_33;
        }
        do
        {
          v21 = *--v17;
          v20 = v21;
          *v17 = 0;
          if (v21)
            MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
        }
        while (v17 != v16);
LABEL_69:
        v18 = v57;
        goto LABEL_70;
      }
      goto LABEL_33;
    }
  }
  else if (v48 != 4 || *(_DWORD *)v47 != 1684104562)
  {
    goto LABEL_21;
  }
  v23 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  v25 = (mlir::MLIRContext *)(v48 == 5 && *(_DWORD *)v47 == 1953067639 && *(_BYTE *)(v47 + 4) == 101);
  BoolAttr = mlir::Builder::getBoolAttr(v23, v25);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  v55 = 261;
  v52 = "isWrite";
  v53 = 7;
  v28 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v52);
  ZinMirCacheTensors::ZinMirCacheTensors(&v42, v28, BoolAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
  if (v46 != 5)
  {
    if (v46 != 4 || *(_DWORD *)v45 != 1635017060)
      goto LABEL_55;
LABEL_78:
    v37 = (mlir::BoolAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
    if (v46 == 4)
      v38 = (mlir::MLIRContext *)(*(_DWORD *)v45 == 1635017060);
    else
      v38 = 0;
    v39 = mlir::Builder::getBoolAttr(v37, v38);
    v40 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
    v55 = 261;
    v52 = "isDataCache";
    v53 = 11;
    v41 = mlir::StringAttr::get(v40, (mlir::MLIRContext *)&v52);
    ZinMirCacheTensors::ZinMirCacheTensors(&v42, v41, v39);
    mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v42, v43);
    v12 = 1;
    goto LABEL_33;
  }
  if (*(_DWORD *)v45 == 1953721961 && *(_BYTE *)(v45 + 4) == 114)
    goto LABEL_78;
LABEL_55:
  v29 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 16))(a1);
  v42 = "cache type has to be 'data' or 'instr'";
  v44 = 259;
  (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v52, a1, v29, &v42);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v52);
  if (v52)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v52);
  if (v61)
  {
    v30 = __p;
    if (__p)
    {
      v31 = v60;
      v32 = __p;
      if (v60 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v60 = v30;
      operator delete(v32);
    }
    v16 = v57;
    if (!v57)
      goto LABEL_71;
    v33 = v58;
    v18 = v57;
    if (v58 == v57)
      goto LABEL_70;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v16);
    goto LABEL_69;
  }
LABEL_33:
  if (v62 != (char *)v64)
    free(v62);
  return v12;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    v13 = v26;
  else
    v13 = 0;
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = __p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = *--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

uint64_t mlir::AsmParser::parseColonType<mlir::MemRefType>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[3];
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *__p;
  _QWORD *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v18 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v18))
    return 0;
  v5 = v18;
  if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v16 = "invalid kind of type specified";
  v17 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v19, a1, v4, &v16);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
  if (v19[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v19);
  if (v26)
  {
    v8 = __p;
    if (__p)
    {
      v9 = v25;
      v10 = __p;
      if (v25 != __p)
      {
        do
          v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        v10 = __p;
      }
      v25 = v8;
      operator delete(v10);
    }
    v11 = v22;
    if (v22)
    {
      v12 = v23;
      v13 = v22;
      if (v23 != v22)
      {
        do
        {
          v15 = *--v12;
          v14 = v15;
          *v12 = 0;
          if (v15)
            MEMORY[0x20BD002D4](v14, 0x1000C8077774924);
        }
        while (v12 != v11);
        v13 = v22;
      }
      v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21)
      free(v20);
  }
  return v6;
}

uint64_t mlir::memref::PrefetchOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v15;
  __int16 v16;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((unsigned int *)v2 + 17);
  else
    v3 = 0;
  v17[0] = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v17);
  if (v4 + 1 == v3)
    return 1;
  v15 = (const void **)"too few indices";
  v16 = 259;
  mlir::OpState::emitOpError(this, &v15, (uint64_t)v17);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  if (v24)
  {
    v6 = __p;
    if (__p)
    {
      v7 = v23;
      v8 = __p;
      if (v23 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v23 = v6;
      operator delete(v8);
    }
    v9 = v20;
    if (v20)
    {
      v10 = v21;
      v11 = v20;
      if (v21 != v20)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
        }
        while (v10 != v9);
        v11 = v20;
      }
      v21 = v9;
      operator delete(v11);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v5;
}

unint64_t mlir::memref::RankOp::fold(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  mlir::IndexType *Context;
  mlir::MLIRContext *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    v9 = v2;
    v10 = v3;
    if (v2 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v9))
    {
      Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
      v6 = mlir::IndexType::get(Context, v5);
      mlir::ShapedType::getShape((mlir::ShapedType *)&v9);
      return mlir::IntegerAttr::get(v6, v7) & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  return 0;
}

uint64_t mlir::memref::ReinterpretCastOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "reinterpret_cast", 16);
}

uint64_t mlir::memref::ReinterpretCastOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t MemorySpace;
  const char **v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  const char **v12;
  char *v13;
  char *v14;
  __int128 v15;
  const char **v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ElementType;
  const char **v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  const char **v35;
  char *v36;
  char *v37;
  __int128 v38;
  const char **v39;
  char *v40;
  char *v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t Value;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v60;
  const char **v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  const char **v66;
  char *v67;
  char *v68;
  __int128 v69;
  uint64_t v70;
  const char *v71;
  const char **v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  const char **v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  const char **v82;
  char *v83;
  char *v84;
  __int128 v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  char *v99;
  char *v100;
  __int128 v101;
  _QWORD *v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v119;
  int *v120;
  char *v121;
  char *v122;
  __int128 v123;
  uint64_t v124;
  int *v125;
  char *v126;
  char *v127;
  __int128 v128;
  uint64_t v129;
  const char *v130;
  int *v131;
  char *v132;
  char *v133;
  __int128 v134;
  uint64_t v135;
  int *v136;
  char *v137;
  char *v138;
  __int128 v139;
  uint64_t v140;
  int *v141;
  char *v142;
  char *v143;
  __int128 v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  BOOL v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  BOOL v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  BOOL v162;
  unint64_t v163;
  BOOL v164;
  unint64_t v165;
  unint64_t v166;
  BOOL v167;
  unint64_t v168;
  BOOL v169;
  unint64_t v170;
  BOOL v171;
  unint64_t v172;
  BOOL v173;
  unint64_t v174;
  BOOL v175;
  unint64_t v176;
  BOOL v177;
  int64_t v178;
  int64_t v179;
  int64_t v180;
  int64_t v181;
  int64_t v182;
  int64_t v183;
  int64_t v184;
  int64_t v185;
  int64_t v186;
  int64_t v187;
  int64_t v188;
  int64_t v189;
  int64_t v190;
  int64_t v191;
  int64_t v192;
  int64_t v193;
  int64_t v194;
  uint64_t v195;
  const char *v196;
  const char *v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  const char *v204;
  uint64_t v205;
  const char *v206;
  uint64_t v207;
  _BYTE v208[16];
  __int16 v209;
  _QWORD v210[3];
  void *v211;
  unsigned int v212;
  unsigned int v213;
  _BYTE v214[96];
  void *v215;
  _QWORD *v216;
  void *__p;
  _QWORD *v218;
  char v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v202 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *((_DWORD *)v2 + 9);
  v4 = (uint64_t)(v2 - 2);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v201 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  MemorySpace = mlir::BaseMemRefType::getMemorySpace((mlir::BaseMemRefType *)&v202);
  if (MemorySpace != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v201))
  {
    v206 = "different memory spaces specified for source type ";
    v209 = 259;
    mlir::OpState::emitError(this, (uint64_t)&v206, (uint64_t)v210);
    if (v210[0])
    {
      v7 = &v196;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v202);
      v8 = (char *)v211;
      if (v212 >= v213)
      {
        v151 = v212 + 1;
        if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
        {
          v178 = (char *)&v196 - (_BYTE *)v211;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v151, 24);
          v8 = (char *)v211;
          v7 = (const char **)((char *)v211 + v178);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v151, 24);
          v7 = &v196;
          v8 = (char *)v211;
        }
      }
      v9 = &v8[24 * v212];
      v10 = *(_OWORD *)v7;
      *((_QWORD *)v9 + 2) = v7[2];
      *(_OWORD *)v9 = v10;
      v11 = ++v212;
      if (v210[0])
      {
        LODWORD(v196) = 3;
        v197 = " and result memref type ";
        v198 = 24;
        v12 = &v196;
        v13 = (char *)v211;
        if (v11 >= v213)
        {
          v152 = v11 + 1;
          v153 = (char *)v211 + 24 * v11 > (char *)&v196;
          if (v211 <= &v196 && v153)
          {
            v179 = (char *)&v196 - (_BYTE *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v152, 24);
            v13 = (char *)v211;
            v12 = (const char **)((char *)v211 + v179);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v152, 24);
            v12 = &v196;
            v13 = (char *)v211;
          }
        }
        v14 = &v13[24 * v212];
        v15 = *(_OWORD *)v12;
        *((_QWORD *)v14 + 2) = v12[2];
        *(_OWORD *)v14 = v15;
        ++v212;
        if (v210[0])
        {
          v16 = &v196;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v201);
          v17 = (char *)v211;
          if (v212 >= v213)
          {
            v154 = v212 + 1;
            if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
            {
              v180 = (char *)&v196 - (_BYTE *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v154, 24);
              v17 = (char *)v211;
              v16 = (const char **)((char *)v211 + v180);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v154, 24);
              v16 = &v196;
              v17 = (char *)v211;
            }
          }
          v18 = &v17[24 * v212];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = v16[2];
          *(_OWORD *)v18 = v19;
          ++v212;
        }
      }
    }
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
    if (v210[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
    if (!v219)
      return v20;
    v21 = __p;
    if (__p)
    {
      v22 = v218;
      v23 = __p;
      if (v218 != __p)
      {
        do
          v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        v23 = __p;
      }
      v218 = v21;
      operator delete(v23);
    }
    v24 = v215;
    if (!v215)
      goto LABEL_85;
    v25 = v216;
    v26 = v215;
    if (v216 == v215)
      goto LABEL_84;
    do
    {
      v28 = *--v25;
      v27 = v28;
      *v25 = 0;
      if (v28)
        MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
    }
    while (v25 != v24);
    goto LABEL_83;
  }
  ElementType = mlir::BaseMemRefType::getElementType((mlir::BaseMemRefType *)&v202);
  if (ElementType != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v201))
  {
    v206 = "different element types specified for source type ";
    v209 = 259;
    mlir::OpState::emitError(this, (uint64_t)&v206, (uint64_t)v210);
    if (v210[0])
    {
      v30 = &v196;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v202);
      v31 = (char *)v211;
      if (v212 >= v213)
      {
        v155 = v212 + 1;
        if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
        {
          v181 = (char *)&v196 - (_BYTE *)v211;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v155, 24);
          v31 = (char *)v211;
          v30 = (const char **)((char *)v211 + v181);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v155, 24);
          v30 = &v196;
          v31 = (char *)v211;
        }
      }
      v32 = &v31[24 * v212];
      v33 = *(_OWORD *)v30;
      *((_QWORD *)v32 + 2) = v30[2];
      *(_OWORD *)v32 = v33;
      v34 = ++v212;
      if (v210[0])
      {
        LODWORD(v196) = 3;
        v197 = " and result memref type ";
        v198 = 24;
        v35 = &v196;
        v36 = (char *)v211;
        if (v34 >= v213)
        {
          v156 = v34 + 1;
          v157 = (char *)v211 + 24 * v34 > (char *)&v196;
          if (v211 <= &v196 && v157)
          {
            v182 = (char *)&v196 - (_BYTE *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v156, 24);
            v36 = (char *)v211;
            v35 = (const char **)((char *)v211 + v182);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v156, 24);
            v35 = &v196;
            v36 = (char *)v211;
          }
        }
        v37 = &v36[24 * v212];
        v38 = *(_OWORD *)v35;
        *((_QWORD *)v37 + 2) = v35[2];
        *(_OWORD *)v37 = v38;
        ++v212;
        if (v210[0])
        {
          v39 = &v196;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v196, v201);
          v40 = (char *)v211;
          if (v212 >= v213)
          {
            v158 = v212 + 1;
            if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
            {
              v183 = (char *)&v196 - (_BYTE *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v158, 24);
              v40 = (char *)v211;
              v39 = (const char **)((char *)v211 + v183);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v158, 24);
              v39 = &v196;
              v40 = (char *)v211;
            }
          }
          v41 = &v40[24 * v212];
          v42 = *(_OWORD *)v39;
          *((_QWORD *)v41 + 2) = v39[2];
          *(_OWORD *)v41 = v42;
          ++v212;
        }
      }
    }
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
    if (v210[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
    if (!v219)
      return v20;
    v43 = __p;
    if (__p)
    {
      v44 = v218;
      v45 = __p;
      if (v218 != __p)
      {
        do
          v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
        while (v44 != v43);
        v45 = __p;
      }
      v218 = v43;
      operator delete(v45);
    }
    v24 = v215;
    if (!v215)
      goto LABEL_85;
    v46 = v216;
    v26 = v215;
    if (v216 == v215)
      goto LABEL_84;
    do
    {
      v48 = *--v46;
      v47 = v48;
      *v46 = 0;
      if (v48)
        MEMORY[0x20BD002D4](v47, 0x1000C8077774924);
    }
    while (v46 != v24);
    goto LABEL_83;
  }
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v201);
  v51 = v50;
  v52 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v52 = 0;
  v210[0] = *(_QWORD *)(v52 + 8);
  v53 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v210);
  if (!v51)
  {
LABEL_88:
    v200 = 0;
    v206 = v208;
    v207 = 0x400000000;
    if (mlir::getStridesAndOffset(v201, (uint64_t)&v206, &v200))
    {
      v210[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
      v94 = *(_QWORD *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v210);
      v195 = v94;
      if (v200 != 0x8000000000000000 && v94 != 0x8000000000000000 && v200 != v94)
      {
        v196 = "expected result type with offset = ";
        v199 = 259;
        mlir::OpState::emitError(this, (uint64_t)&v196, (uint64_t)v210);
        v95 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)v210, &v195);
        v96 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v95, " instead of ");
        v97 = mlir::InFlightDiagnostic::operator<<<long long &>(v96, &v200);
        v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v97);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v210);
        goto LABEL_150;
      }
      v110 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
      if (!HIBYTE(*((_DWORD *)*this + 11)))
        v110 = 0;
      v210[0] = *(_QWORD *)(v110 + 16);
      v111 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v210);
      if (!(_DWORD)v207)
      {
LABEL_145:
        v20 = 1;
        goto LABEL_150;
      }
      v112 = v111;
      v113 = 0;
      v114 = v206;
      v115 = 8 * v207;
      while (1)
      {
        v116 = *(_QWORD *)&v206[8 * (_QWORD)v113];
        if (v116 != 0x8000000000000000)
        {
          v117 = *(_QWORD *)(v111 + 8 * (_QWORD)v113);
          if (v117 != 0x8000000000000000 && v116 != v117)
            break;
        }
        ++v113;
        v115 -= 8;
        if (!v115)
          goto LABEL_145;
      }
      v196 = "expected result type with stride = ";
      v199 = 259;
      mlir::OpState::emitError(this, (uint64_t)&v196, (uint64_t)v210);
      if (v210[0])
      {
        v119 = *(const char **)(v112 + 8 * (_QWORD)v113);
        v203 = 2;
        v204 = v119;
        v120 = &v203;
        v121 = (char *)v211;
        if (v212 >= v213)
        {
          v165 = v212 + 1;
          if (v211 <= &v203 && (char *)v211 + 24 * v212 > (char *)&v203)
          {
            v188 = (char *)&v203 - (_BYTE *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v165, 24);
            v121 = (char *)v211;
            v120 = (int *)((char *)v211 + v188);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v165, 24);
            v120 = &v203;
            v121 = (char *)v211;
          }
        }
        v122 = &v121[24 * v212];
        v123 = *(_OWORD *)v120;
        *((_QWORD *)v122 + 2) = *((_QWORD *)v120 + 2);
        *(_OWORD *)v122 = v123;
        v124 = ++v212;
        if (v210[0])
        {
          v203 = 3;
          v204 = " instead of ";
          v205 = 12;
          v125 = &v203;
          v126 = (char *)v211;
          if (v124 >= v213)
          {
            v168 = v124 + 1;
            v169 = (char *)v211 + 24 * v124 > (char *)&v203;
            if (v211 <= &v203 && v169)
            {
              v190 = (char *)&v203 - (_BYTE *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v168, 24);
              v126 = (char *)v211;
              v125 = (int *)((char *)v211 + v190);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v168, 24);
              v125 = &v203;
              v126 = (char *)v211;
            }
          }
          v127 = &v126[24 * v212];
          v128 = *(_OWORD *)v125;
          *((_QWORD *)v127 + 2) = *((_QWORD *)v125 + 2);
          *(_OWORD *)v127 = v128;
          v129 = ++v212;
          if (v210[0])
          {
            v130 = *(const char **)&v114[8 * (_QWORD)v113];
            v203 = 2;
            v204 = v130;
            v131 = &v203;
            v132 = (char *)v211;
            if (v129 >= v213)
            {
              v172 = v129 + 1;
              v173 = (char *)v211 + 24 * v129 > (char *)&v203;
              if (v211 <= &v203 && v173)
              {
                v192 = (char *)&v203 - (_BYTE *)v211;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v172, 24);
                v132 = (char *)v211;
                v131 = (int *)((char *)v211 + v192);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v172, 24);
                v131 = &v203;
                v132 = (char *)v211;
              }
            }
            v133 = &v132[24 * v212];
            v134 = *(_OWORD *)v131;
            *((_QWORD *)v133 + 2) = *((_QWORD *)v131 + 2);
            *(_OWORD *)v133 = v134;
            v135 = ++v212;
            if (v210[0])
            {
              v203 = 3;
              v204 = " in dim = ";
              v205 = 10;
              v136 = &v203;
              v137 = (char *)v211;
              if (v135 >= v213)
              {
                v174 = v135 + 1;
                v175 = (char *)v211 + 24 * v135 > (char *)&v203;
                if (v211 <= &v203 && v175)
                {
                  v193 = (char *)&v203 - (_BYTE *)v211;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v174, 24);
                  v137 = (char *)v211;
                  v136 = (int *)((char *)v211 + v193);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v174, 24);
                  v136 = &v203;
                  v137 = (char *)v211;
                }
              }
              v138 = &v137[24 * v212];
              v139 = *(_OWORD *)v136;
              *((_QWORD *)v138 + 2) = *((_QWORD *)v136 + 2);
              *(_OWORD *)v138 = v139;
              v140 = ++v212;
              if (v210[0])
              {
                v203 = 5;
                v204 = v113;
                v141 = &v203;
                v142 = (char *)v211;
                if (v140 >= v213)
                {
                  v176 = v140 + 1;
                  v177 = (char *)v211 + 24 * v140 > (char *)&v203;
                  if (v211 <= &v203 && v177)
                  {
                    v194 = (char *)&v203 - (_BYTE *)v211;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v176, 24);
                    v142 = (char *)v211;
                    v141 = (int *)((char *)v211 + v194);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v176, 24);
                    v141 = &v203;
                    v142 = (char *)v211;
                  }
                }
                v143 = &v142[24 * v212];
                v144 = *(_OWORD *)v141;
                *((_QWORD *)v143 + 2) = *((_QWORD *)v141 + 2);
                *(_OWORD *)v143 = v144;
                ++v212;
              }
            }
          }
        }
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
      if (v210[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
      if (v219)
      {
        v145 = __p;
        if (__p)
        {
          v146 = v218;
          v147 = __p;
          if (v218 != __p)
          {
            do
              v146 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v146 - 1);
            while (v146 != v145);
            v147 = __p;
          }
          v218 = v145;
          operator delete(v147);
        }
        v105 = v215;
        if (!v215)
          goto LABEL_148;
        v148 = v216;
        v107 = v215;
        if (v216 == v215)
        {
LABEL_147:
          v216 = v105;
          operator delete(v107);
LABEL_148:
          if (v211 != v214)
            free(v211);
          goto LABEL_150;
        }
        do
        {
          v150 = *--v148;
          v149 = v150;
          *v148 = 0;
          if (v150)
            MEMORY[0x20BD002D4](v149, 0x1000C8077774924);
        }
        while (v148 != v105);
LABEL_146:
        v107 = v215;
        goto LABEL_147;
      }
    }
    else
    {
      v196 = "expected result type to have strided layout but found ";
      v199 = 259;
      mlir::OpState::emitError(this, (uint64_t)&v196, (uint64_t)v210);
      if (v210[0])
      {
        v98 = &v203;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v203, v201);
        v99 = (char *)v211;
        if (v212 >= v213)
        {
          v159 = v212 + 1;
          if (v211 <= &v203 && (char *)v211 + 24 * v212 > (char *)&v203)
          {
            v184 = (char *)&v203 - (_BYTE *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v159, 24);
            v99 = (char *)v211;
            v98 = (int *)((char *)v211 + v184);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v159, 24);
            v98 = &v203;
            v99 = (char *)v211;
          }
        }
        v100 = &v99[24 * v212];
        v101 = *(_OWORD *)v98;
        *((_QWORD *)v100 + 2) = *((_QWORD *)v98 + 2);
        *(_OWORD *)v100 = v101;
        ++v212;
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
      if (v210[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
      if (v219)
      {
        v102 = __p;
        if (__p)
        {
          v103 = v218;
          v104 = __p;
          if (v218 != __p)
          {
            do
              v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
            while (v103 != v102);
            v104 = __p;
          }
          v218 = v102;
          operator delete(v104);
        }
        v105 = v215;
        if (!v215)
          goto LABEL_148;
        v106 = v216;
        v107 = v215;
        if (v216 == v215)
          goto LABEL_147;
        do
        {
          v109 = *--v106;
          v108 = v109;
          *v106 = 0;
          if (v109)
            MEMORY[0x20BD002D4](v108, 0x1000C8077774924);
        }
        while (v106 != v105);
        goto LABEL_146;
      }
    }
LABEL_150:
    v92 = (void *)v206;
    if (v206 == v208)
      return v20;
    goto LABEL_86;
  }
  v54 = v53;
  v55 = 0;
  v56 = 8 * v51;
  while (1)
  {
    v57 = *(_QWORD *)(Value + 8 * (_QWORD)v55);
    if (v57 != 0x8000000000000000)
    {
      v58 = *(_QWORD *)(v53 + 8 * (_QWORD)v55);
      if (v58 != 0x8000000000000000 && v57 != v58)
        break;
    }
    ++v55;
    v56 -= 8;
    if (!v56)
      goto LABEL_88;
  }
  v206 = "expected result type with size = ";
  v209 = 259;
  mlir::OpState::emitError(this, (uint64_t)&v206, (uint64_t)v210);
  if (v210[0])
  {
    v60 = *(const char **)(v54 + 8 * (_QWORD)v55);
    LODWORD(v196) = 2;
    v197 = v60;
    v61 = &v196;
    v62 = (char *)v211;
    if (v212 >= v213)
    {
      v160 = v212 + 1;
      if (v211 <= &v196 && (char *)v211 + 24 * v212 > (char *)&v196)
      {
        v185 = (char *)&v196 - (_BYTE *)v211;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v160, 24);
        v62 = (char *)v211;
        v61 = (const char **)((char *)v211 + v185);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v160, 24);
        v61 = &v196;
        v62 = (char *)v211;
      }
    }
    v63 = &v62[24 * v212];
    v64 = *(_OWORD *)v61;
    *((_QWORD *)v63 + 2) = v61[2];
    *(_OWORD *)v63 = v64;
    v65 = ++v212;
    if (v210[0])
    {
      LODWORD(v196) = 3;
      v197 = " instead of ";
      v198 = 12;
      v66 = &v196;
      v67 = (char *)v211;
      if (v65 >= v213)
      {
        v161 = v65 + 1;
        v162 = (char *)v211 + 24 * v65 > (char *)&v196;
        if (v211 <= &v196 && v162)
        {
          v186 = (char *)&v196 - (_BYTE *)v211;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v161, 24);
          v67 = (char *)v211;
          v66 = (const char **)((char *)v211 + v186);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v161, 24);
          v66 = &v196;
          v67 = (char *)v211;
        }
      }
      v68 = &v67[24 * v212];
      v69 = *(_OWORD *)v66;
      *((_QWORD *)v68 + 2) = v66[2];
      *(_OWORD *)v68 = v69;
      v70 = ++v212;
      if (v210[0])
      {
        v71 = *(const char **)(Value + 8 * (_QWORD)v55);
        LODWORD(v196) = 2;
        v197 = v71;
        v72 = &v196;
        v73 = (char *)v211;
        if (v70 >= v213)
        {
          v163 = v70 + 1;
          v164 = (char *)v211 + 24 * v70 > (char *)&v196;
          if (v211 <= &v196 && v164)
          {
            v187 = (char *)&v196 - (_BYTE *)v211;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v163, 24);
            v73 = (char *)v211;
            v72 = (const char **)((char *)v211 + v187);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v163, 24);
            v72 = &v196;
            v73 = (char *)v211;
          }
        }
        v74 = &v73[24 * v212];
        v75 = *(_OWORD *)v72;
        *((_QWORD *)v74 + 2) = v72[2];
        *(_OWORD *)v74 = v75;
        v76 = ++v212;
        if (v210[0])
        {
          LODWORD(v196) = 3;
          v197 = " in dim = ";
          v198 = 10;
          v77 = &v196;
          v78 = (char *)v211;
          if (v76 >= v213)
          {
            v166 = v76 + 1;
            v167 = (char *)v211 + 24 * v76 > (char *)&v196;
            if (v211 <= &v196 && v167)
            {
              v189 = (char *)&v196 - (_BYTE *)v211;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v166, 24);
              v78 = (char *)v211;
              v77 = (const char **)((char *)v211 + v189);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v166, 24);
              v77 = &v196;
              v78 = (char *)v211;
            }
          }
          v79 = &v78[24 * v212];
          v80 = *(_OWORD *)v77;
          *((_QWORD *)v79 + 2) = v77[2];
          *(_OWORD *)v79 = v80;
          v81 = ++v212;
          if (v210[0])
          {
            LODWORD(v196) = 5;
            v197 = v55;
            v82 = &v196;
            v83 = (char *)v211;
            if (v81 >= v213)
            {
              v170 = v81 + 1;
              v171 = (char *)v211 + 24 * v81 > (char *)&v196;
              if (v211 <= &v196 && v171)
              {
                v191 = (char *)&v196 - (_BYTE *)v211;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v170, 24);
                v83 = (char *)v211;
                v82 = (const char **)((char *)v211 + v191);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, v214, v170, 24);
                v82 = &v196;
                v83 = (char *)v211;
              }
            }
            v84 = &v83[24 * v212];
            v85 = *(_OWORD *)v82;
            *((_QWORD *)v84 + 2) = v82[2];
            *(_OWORD *)v84 = v85;
            ++v212;
          }
        }
      }
    }
  }
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v210);
  if (v210[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v210);
  if (!v219)
    return v20;
  v86 = __p;
  if (__p)
  {
    v87 = v218;
    v88 = __p;
    if (v218 != __p)
    {
      do
        v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
      while (v87 != v86);
      v88 = __p;
    }
    v218 = v86;
    operator delete(v88);
  }
  v24 = v215;
  if (v215)
  {
    v89 = v216;
    v26 = v215;
    if (v216 == v215)
      goto LABEL_84;
    do
    {
      v91 = *--v89;
      v90 = v91;
      *v89 = 0;
      if (v91)
        MEMORY[0x20BD002D4](v90, 0x1000C8077774924);
    }
    while (v89 != v24);
LABEL_83:
    v26 = v215;
LABEL_84:
    v216 = v24;
    operator delete(v26);
  }
LABEL_85:
  v92 = v211;
  if (v211 != v214)
LABEL_86:
    free(v92);
  return v20;
}

uint64_t mlir::memref::ReinterpretCastOp::getStaticSizes(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v3 = *(_QWORD *)(v1 + 8);
  return mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v3);
}

uint64_t mlir::memref::ReinterpretCastOp::getStaticOffsets(mlir::memref::ReinterpretCastOp *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  return mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v2);
}

uint64_t mlir::InFlightDiagnostic::operator<<<long long &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v11;
  BOOL v12;
  char *v13;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)a1)
  {
    v3 = a1 + 24;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *a2;
    v14 = 2;
    v15 = v5;
    v6 = *(unsigned int *)(a1 + 32);
    v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      v11 = v6 + 1;
      v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        v4 = *(_QWORD *)(a1 + 24);
        v7 = &v14;
      }
    }
    v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::memref::ReinterpretCastOp::getStaticStrides(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v3 = *(_QWORD *)(v1 + 16);
  return mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v3);
}

uint64_t mlir::memref::ReinterpretCastOp::fold(uint64_t a1)
{
  uint64_t DefiningOp;
  uint64_t v3;
  void *v4;
  BOOL v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 isConstantIntValue;
  BOOL v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *Value;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  unsigned int v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  if (DefiningOp
    && *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ReinterpretCastOp,void>::id
    || (DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25)) != 0
    && *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
  {
    v13 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
    if (!v13)
      goto LABEL_22;
LABEL_36:
    v21 = *(uint64_t **)(*(_QWORD *)a1 + 72);
    v22 = (uint64_t *)v21[1];
    if (v22)
    {
      *v22 = *v21;
      if (*v21)
        *(_QWORD *)(*v21 + 8) = v21[1];
    }
    v21[3] = (uint64_t)v13;
    v21[1] = (uint64_t)v13;
    v23 = *v13;
    *v21 = *v13;
    if (v23)
      *(_QWORD *)(v23 + 8) = v21;
    *v13 = (uint64_t)v21;
    if (*(_DWORD *)(*(_QWORD *)a1 + 36))
      v24 = *(_QWORD *)a1 - 16;
    else
      v24 = 0;
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v24, 0) | 4;
  }
  v3 = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  if (!v3)
    goto LABEL_22;
  v4 = *(void **)(*(_QWORD *)(v3 + 48) + 16);
  v5 = v4 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id;
  v6 = v4 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id ? v3 : 0;
  v26 = v6;
  if (!v5)
    goto LABEL_22;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v26, (uint64_t)&v27);
  v7 = (uint64_t *)v27;
  if (!v28)
  {
    v12 = 1;
    if (v27 == v29)
      goto LABEL_20;
    goto LABEL_19;
  }
  v8 = 8 * v28 - 8;
  do
  {
    v9 = *v7++;
    isConstantIntValue = mlir::isConstantIntValue(v9, 0);
    v11 = !isConstantIntValue || v8 == 0;
    v8 -= 8;
  }
  while (!v11);
  v12 = isConstantIntValue;
  v7 = (uint64_t *)v27;
  if (v27 != v29)
LABEL_19:
    free(v7);
LABEL_20:
  if (v12)
  {
    v13 = *(uint64_t **)(*(_QWORD *)(v26 + 72) + 24);
    if (v13)
      goto LABEL_36;
  }
LABEL_22:
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v14 = *(_QWORD *)a1 - 16;
  else
    v14 = 0;
  v26 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v26);
  if (v16)
  {
    v17 = 8 * v16;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v17 -= 8;
      if (!v17)
        goto LABEL_29;
    }
    return 0;
  }
LABEL_29:
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v19 = *(_QWORD *)a1 - 16;
  else
    v19 = 0;
  v18 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v18 != (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 0;
  v27 = *(void **)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  if (*(_QWORD *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v27))
    return 0;
  return v25 | 4;
}

void mlir::memref::ReinterpretCastOp::getConstifiedMixedSizes(mlir::memref::ReinterpretCastOp *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  _QWORD *v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  mlir::IndexType *Context;
  void *__src;
  unsigned int v13;
  int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(this, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v4 = v13;
  v5 = __src;
  if (v13)
    v6 = &__src == (void **)a2;
  else
    v6 = 1;
  if (!v6)
  {
    if (__src == v15)
    {
      v8 = v13;
      if (v13 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v13, 8), v8 = v13, v5 = __src, v13))
      {
        memcpy(*(void **)a2, v5, 8 * v8);
        v5 = __src;
      }
      *(_DWORD *)(a2 + 8) = v4;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v7 = v14;
      *(_DWORD *)(a2 + 8) = v4;
      *(_DWORD *)(a2 + 12) = v7;
      __src = v15;
      v14 = 0;
      v5 = v15;
    }
    v13 = 0;
  }
  if (v5 != v15)
    free(v5);
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v9 = *(_QWORD *)this - 16;
  else
    v9 = 0;
  v10 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  constifyIndexValues(a2, v10, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantSizes, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
}

void mlir::memref::ReinterpretCastOp::getConstifiedMixedStrides(mlir::memref::ReinterpretCastOp *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  _QWORD *v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  mlir::IndexType *Context;
  void *__src;
  unsigned int v13;
  int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(this, (uint64_t)&__src);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v4 = v13;
  v5 = __src;
  if (v13)
    v6 = &__src == (void **)a2;
  else
    v6 = 1;
  if (!v6)
  {
    if (__src == v15)
    {
      v8 = v13;
      if (v13 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v13, 8), v8 = v13, v5 = __src, v13))
      {
        memcpy(*(void **)a2, v5, 8 * v8);
        v5 = __src;
      }
      *(_DWORD *)(a2 + 8) = v4;
    }
    else
    {
      *(_QWORD *)a2 = __src;
      v7 = v14;
      *(_DWORD *)(a2 + 8) = v4;
      *(_DWORD *)(a2 + 12) = v7;
      __src = v15;
      v14 = 0;
      v5 = v15;
    }
    v13 = 0;
  }
  if (v5 != v15)
    free(v5);
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v9 = *(_QWORD *)this - 16;
  else
    v9 = 0;
  v10 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  constifyIndexValues(a2, v10, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantStrides, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
}

uint64_t mlir::memref::ReinterpretCastOp::getConstifiedMixedOffset(mlir::memref::ReinterpretCastOp *this)
{
  int v2;
  _BYTE *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  mlir::IndexType *Context;
  uint64_t v8;
  void *__src;
  uint64_t v11;
  _BYTE v12[32];
  void *__dst;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets(this, (uint64_t)&__src);
  __dst = v15;
  v14 = 0x600000000;
  v2 = v11;
  v3 = __src;
  if ((_DWORD)v11)
  {
    if (__src == v12)
    {
      v4 = v11;
      if (v11 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v15, v11, 8),
            v4 = v11,
            v3 = __src,
            (_DWORD)v11))
      {
        memcpy(__dst, v3, 8 * v4);
        v3 = __src;
      }
      LODWORD(v14) = v2;
    }
    else
    {
      __dst = __src;
      v14 = v11;
      __src = v12;
      HIDWORD(v11) = 0;
      v3 = v12;
    }
    LODWORD(v11) = 0;
  }
  if (v3 != v12)
    free(v3);
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v5 = *(_QWORD *)this - 16;
  else
    v5 = 0;
  v6 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  constifyIndexValues((uint64_t)&__dst, v6, Context, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>, (uint64_t)getConstantOffset, (uint64_t (*)(uint64_t, mlir::MLIRContext *))llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>, (uint64_t)mlir::ShapedType::isDynamic);
  v8 = *(_QWORD *)__dst;
  if (__dst != v15)
    free(__dst);
  return v8;
}

void mlir::memref::ReinterpretCastOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t v39;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v38, 1);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"memref.reinterpret_cast", 23, (__int16)v38, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C02B230;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v38 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ReinterpretCastOpExtractStridedMetadataFolder]";
  v39 = 118;
  v9 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
  if (v39 >= v9)
    v10 = v9;
  else
    v10 = v39;
  v11 = &v38[v10];
  v12 = v39 - v10;
  if (v39 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v39 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    abort();
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_44;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
}

uint64_t mlir::memref::CollapseShapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "collapse_shape", 14);
}

uint64_t mlir::memref::ExpandShapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "expand_shape", 12);
}

void mlir::memref::CollapseShapeOp::getReassociationIndices(mlir::memref::CollapseShapeOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v24 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  for (i = (uint64_t *)(v4 + 8 * v5); Value != i; ++Value)
  {
    v23 = *Value;
    v7 = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
    v8 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
    v10 = (char *)(v8 + 8 * v9);
    v26 = v28;
    v27 = 0x200000000;
    v11 = v10 - v7;
    if ((unint64_t)(v10 - v7) < 0x11)
    {
      v12 = 0;
      v13 = 0;
      if (v10 == v7)
        goto LABEL_11;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v11 >> 3, 8);
      v12 = v27;
      v13 = v27;
      if (v10 == v7)
        goto LABEL_11;
    }
    v14 = (char *)v26 + 8 * v12;
    do
    {
      v15 = *(_QWORD *)v7;
      v7 += 8;
      v25 = v15;
      *v14++ = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v25);
    }
    while (v7 != v10);
    v13 = v27;
LABEL_11:
    LODWORD(v27) = v13 + ((unint64_t)v11 >> 3);
    v16 = *(unsigned int *)(a2 + 8);
    v17 = *(_QWORD *)a2;
    if (v16 >= *(_DWORD *)(a2 + 12))
    {
      v20 = v16 + 1;
      v21 = v17 + 32 * v16 > (unint64_t)&v26;
      if (v17 <= (unint64_t)&v26 && v21)
      {
        v22 = (char *)&v26 - v17;
        llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow(a2, v20);
        v17 = *(_QWORD *)a2;
        v18 = (void **)&v22[*(_QWORD *)a2];
        goto LABEL_13;
      }
      llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow(a2, v20);
      v17 = *(_QWORD *)a2;
    }
    v18 = &v26;
LABEL_13:
    v19 = (_QWORD *)(v17 + 32 * *(unsigned int *)(a2 + 8));
    *v19 = v19 + 2;
    v19[1] = 0x200000000;
    if (*((_DWORD *)v18 + 2))
      llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v19, (uint64_t)v18);
    ++*(_DWORD *)(a2 + 8);
    if (v26 != v28)
      free(v26);
  }
}

char **llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 32 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 32];
      if (&v2[v4 - 16] != v5)
        free(v5);
      v4 -= 32;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t mlir::memref::ExpandShapeOp::computeExpandedType(uint64_t a1, uint64_t *a2, unint64_t a3, const void **a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t RHS;
  uint64_t LayerSchedule;
  uint64_t *v12;
  mlir::AffineMap *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char StridesAndOffset;
  char v18;
  unint64_t *v19;
  unint64_t *v20;
  const void **v21;
  int v22;
  const void **v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  int8x16_t *v48;
  int8x16_t *v49;
  uint64_t v50;
  int8x16_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  mlir::MLIRContext *Context;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *__dst;
  uint64_t v73;
  _BYTE v74[64];
  void *v75;
  uint64_t v76;
  _BYTE v77[48];
  unint64_t *v78;
  uint64_t v79;
  _QWORD v80[8];

  v80[6] = *MEMORY[0x24BDAC8D0];
  v69 = a1;
  __dst = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v69);
  v73 = v9;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__dst))
  {
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v69);
    LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v69);
    v12 = a2;
    v13 = (mlir::AffineMap *)a3;
    v14 = RHS;
    v15 = 0;
    v16 = 0;
LABEL_67:
    v64 = mlir::MemRefType::get(v12, v13, v14, v15, v16, LayerSchedule);
    v65 = v64 & 0xFFFFFFFFFFFFFF00;
    return v65 | v64;
  }
  v70 = 0;
  v71 = v69;
  v78 = v80;
  v79 = 0x600000000;
  StridesAndOffset = mlir::getStridesAndOffset(v69, (uint64_t)&v78, &v70);
  v18 = StridesAndOffset;
  if (StridesAndOffset)
  {
    v67 = StridesAndOffset;
    v75 = v77;
    v76 = 0x600000000;
    if (a3 >= 7)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v77, a3, 8);
    v68 = a3;
    if (a5 && (_DWORD)v79)
    {
      v19 = v78;
      v20 = &v78[v79];
      v21 = &a4[4 * a5];
      v22 = a3 - 1;
      while (1)
      {
        v23 = v21 - 4;
        --v20;
        __dst = v74;
        v73 = 0x200000000;
        if (&__dst != (void **)(v21 - 4))
        {
          v24 = *((_DWORD *)v21 - 6);
          if (v24)
            break;
        }
LABEL_33:
        if (v23 != a4)
        {
          v21 = v23;
          if (v20 != v19)
            continue;
        }
        goto LABEL_35;
      }
      v25 = v74;
      v26 = *((_DWORD *)v21 - 6);
      if (v24 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v74, *((unsigned int *)v21 - 6), 8);
        v26 = *((_DWORD *)v21 - 6);
        if (!v26)
          goto LABEL_15;
        v25 = __dst;
      }
      memcpy(v25, *v23, 8 * v26);
LABEL_15:
      LODWORD(v73) = v24;
      v27 = *v20;
      v28 = v76;
      do
      {
        if (v28 >= HIDWORD(v76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v77, v28 + 1, 8);
          v28 = v76;
        }
        *((_QWORD *)v75 + v28) = v27;
        if (v27 == 0x8000000000000000)
          v29 = 0;
        else
          v29 = v27;
        v30 = a2[v22];
        v31 = v30 == 0x8000000000000000;
        if (v30 == 0x8000000000000000)
          v32 = 0;
        else
          v32 = a2[v22];
        v28 = v76 + 1;
        LODWORD(v76) = v76 + 1;
        v33 = v31 || v27 == 0x8000000000000000;
        v34 = v32 * v29;
        if (v33)
          v27 = 0x8000000000000000;
        else
          v27 = v34;
        --v22;
        --v24;
      }
      while (v24);
      if (__dst != v74)
        free(__dst);
      goto LABEL_33;
    }
LABEL_35:
    v35 = (char *)v75;
    v36 = v76;
    __dst = v74;
    v73 = 0x800000000;
    if (v76 < 9)
    {
      v37 = 0;
      a3 = v68;
      if (!(_DWORD)v76)
      {
        v38 = v74;
        v18 = v67;
        v53 = 0;
        LODWORD(v73) = 0;
        v54 = 1;
        v55 = v68;
        if (!v68)
          goto LABEL_55;
        goto LABEL_49;
      }
      v39 = 0;
      v38 = v74;
      v40 = (char *)v75 + 8 * v76;
      v41 = v74;
      v42 = (v76 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v42 < 0x17)
        goto LABEL_37;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v74, v76, 8);
      v37 = v73;
      v38 = __dst;
      v39 = v73;
      a3 = v68;
      v40 = &v35[8 * v36];
      v41 = (char *)__dst + 8 * v73;
      v42 = (v36 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v42 < 0x17)
      {
LABEL_37:
        v18 = v67;
        goto LABEL_47;
      }
    }
    v18 = v67;
    if (v41 >= v40 || v35 >= &v38[8 * v39 + 8 * v36])
    {
      v46 = v42 + 1;
      v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      v41 += v47;
      v40 -= v47;
      v48 = (int8x16_t *)&v35[8 * v36 - 16];
      v49 = (int8x16_t *)&v38[8 * v39 + 16];
      v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v51 = vextq_s8(v48[-1], v48[-1], 8uLL);
        v49[-1] = vextq_s8(*v48, *v48, 8uLL);
        *v49 = v51;
        v48 -= 2;
        v49 += 2;
        v50 -= 4;
      }
      while (v50);
      if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        v53 = (v37 + v36);
        LODWORD(v73) = v37 + v36;
        v54 = a3 >= v53;
        v55 = a3 - v53;
        if (a3 == v53)
          goto LABEL_55;
LABEL_49:
        if (v54)
        {
          v57 = v53;
          v58 = v53;
          if (a3 > HIDWORD(v73))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v74, a3, 8);
            v57 = v73;
            v38 = __dst;
            v58 = v73;
          }
          memset_pattern16(&v38[8 * v57], &unk_207A80400, 8 * v55);
          v56 = a3 - v53 + v58;
        }
        else
        {
          v56 = a3;
        }
        LODWORD(v73) = v56;
LABEL_55:
        Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v71);
        v60 = mlir::StridedLayoutAttr::get(Context, v70, (uint64_t)__dst, v73);
        if (__dst != v74)
          free(__dst);
        v44 = v60 & 0xFFFFFFFFFFFFFF00;
        if (v75 != v77)
          free(v75);
        v43 = v60;
        v45 = v78;
        if (v78 != v80)
          goto LABEL_60;
        goto LABEL_61;
      }
    }
    do
    {
LABEL_47:
      v52 = *((_QWORD *)v40 - 1);
      v40 -= 8;
      *(_QWORD *)v41 = v52;
      v41 += 8;
    }
    while (v40 != v35);
    goto LABEL_48;
  }
  v43 = 0;
  v44 = 0;
  v45 = v78;
  if (v78 != v80)
LABEL_60:
    free(v45);
LABEL_61:
  if (v18)
  {
    v61 = (_QWORD *)(v44 | v43);
    v62 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v69);
    if (v61)
      v63 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v61 + 8);
    else
      v63 = 0;
    LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v69);
    v12 = a2;
    v13 = (mlir::AffineMap *)a3;
    v14 = v62;
    v15 = v61;
    v16 = v63;
    goto LABEL_67;
  }
  LOBYTE(v64) = 0;
  v65 = 0;
  return v65 | v64;
}

uint64_t mlir::memref::ExpandShapeOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t Value;
  const char *v11;
  const char *v12;
  _QWORD *v13;
  const char *v14;
  const char *v15;
  char v16;
  char *v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  const char *v30;
  int *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  char *v51;
  uint64_t v52;
  char *v53;
  int *v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  int *v59;
  char *v60;
  char *v61;
  __int128 v62;
  int *v63;
  char *v64;
  char *v65;
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  unint64_t v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  const void **v94[4];
  __int16 v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  unsigned int v102;
  uint64_t v103;
  void *v104;
  unsigned int v105;
  unsigned int v106;
  _BYTE v107[96];
  void *v108;
  _QWORD *v109;
  void *__p;
  _QWORD *v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v97 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *((_DWORD *)v2 + 9);
  v4 = (uint64_t)(v2 - 2);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v96 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v97);
  v7 = v6;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
  if (v7 >= v8)
  {
    v94[0] = (const void **)"expected rank expansion, but found source rank ";
    v95 = 259;
    mlir::OpState::emitOpError(this, v94, (uint64_t)&v101);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v97);
    if (v101)
    {
      v98 = 2;
      v99 = v20;
      v21 = &v98;
      v22 = (char *)v104;
      if (v105 >= v106)
      {
        v80 = v105 + 1;
        if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
        {
          v88 = (char *)&v98 - (_BYTE *)v104;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v80, 24);
          v22 = (char *)v104;
          v21 = (int *)((char *)v104 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v80, 24);
          v21 = &v98;
          v22 = (char *)v104;
        }
      }
      v23 = &v22[24 * v105];
      v24 = *(_OWORD *)v21;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      v25 = ++v105;
      if (v101)
      {
        v98 = 3;
        v99 = " >= result rank ";
        v100 = 16;
        v26 = &v98;
        v27 = (char *)v104;
        if (v25 >= v106)
        {
          v82 = v25 + 1;
          v83 = (char *)v104 + 24 * v25 > (char *)&v98;
          if (v104 <= &v98 && v83)
          {
            v90 = (char *)&v98 - (_BYTE *)v104;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v82, 24);
            v27 = (char *)v104;
            v26 = (int *)((char *)v104 + v90);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v82, 24);
            v26 = &v98;
            v27 = (char *)v104;
          }
        }
        v28 = &v27[24 * v105];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v28 = v29;
        ++v105;
      }
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
    if (v101)
    {
      v98 = 2;
      v99 = v30;
      v31 = &v98;
      v32 = (char *)v104;
      if (v105 >= v106)
      {
        v81 = v105 + 1;
        if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
        {
          v89 = (char *)&v98 - (_BYTE *)v104;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v81, 24);
          v32 = (char *)v104;
          v31 = (int *)((char *)v104 + v89);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v81, 24);
          v31 = &v98;
          v32 = (char *)v104;
        }
      }
      v33 = &v32[24 * v105];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = *((_QWORD *)v31 + 2);
      *(_OWORD *)v33 = v34;
      ++v105;
    }
    v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
    if (v101)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
    if (v112)
    {
      v36 = __p;
      if (__p)
      {
        v37 = v111;
        v38 = __p;
        if (v111 != __p)
        {
          do
            v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          v38 = __p;
        }
        v111 = v36;
        operator delete(v38);
      }
      v39 = v108;
      if (!v108)
        goto LABEL_84;
      v40 = v109;
      v41 = v108;
      if (v109 == v108)
        goto LABEL_83;
      do
      {
        v43 = *--v40;
        v42 = v43;
        *v40 = 0;
        if (v43)
          MEMORY[0x20BD002D4](v42, 0x1000C8077774924);
      }
      while (v40 != v39);
      goto LABEL_82;
    }
  }
  else
  {
    v9 = *this;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v97);
    v12 = v11;
    v13 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
    v15 = v14;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)this, (uint64_t)&v101);
    v16 = verifyCollapsedShape(v9, Value, v12, v13, v15, (uint64_t)v101, (const char *)v102, 0);
    v17 = (char *)v101;
    if (v102)
    {
      v18 = 32 * v102;
      do
      {
        v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19)
          free(v19);
        v18 -= 32;
      }
      while (v18);
      v17 = (char *)v101;
    }
    if (v17 != (char *)&v103)
      free(v17);
    if (!v16)
      return 0;
    v44 = v97;
    v45 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v96);
    v47 = v46;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)this, (uint64_t)&v101);
    v48 = mlir::memref::ExpandShapeOp::computeExpandedType(v44, v45, v47, (const void **)v101, v102);
    v50 = v49;
    v51 = (char *)v101;
    if (v102)
    {
      v52 = 32 * v102;
      do
      {
        v53 = *(char **)&v51[v52 - 32];
        if (&v51[v52 - 16] != v53)
          free(v53);
        v52 -= 32;
      }
      while (v52);
      v51 = (char *)v101;
    }
    if (v51 != (char *)&v103)
      free(v51);
    if (v50)
    {
      if (v96 == v48)
        return 1;
      v94[0] = (const void **)"expected expanded type to be ";
      v95 = 259;
      mlir::OpState::emitOpError(this, v94, (uint64_t)&v101);
      if (v101)
      {
        v54 = &v98;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v98, v48);
        v55 = (char *)v104;
        if (v105 >= v106)
        {
          v84 = v105 + 1;
          if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
          {
            v91 = (char *)&v98 - (_BYTE *)v104;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v84, 24);
            v55 = (char *)v104;
            v54 = (int *)((char *)v104 + v91);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v84, 24);
            v54 = &v98;
            v55 = (char *)v104;
          }
        }
        v56 = &v55[24 * v105];
        v57 = *(_OWORD *)v54;
        *((_QWORD *)v56 + 2) = *((_QWORD *)v54 + 2);
        *(_OWORD *)v56 = v57;
        v58 = ++v105;
        if (v101)
        {
          v98 = 3;
          v99 = " but found ";
          v100 = 11;
          v59 = &v98;
          v60 = (char *)v104;
          if (v58 >= v106)
          {
            v85 = v58 + 1;
            v86 = (char *)v104 + 24 * v58 > (char *)&v98;
            if (v104 <= &v98 && v86)
            {
              v92 = (char *)&v98 - (_BYTE *)v104;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v85, 24);
              v60 = (char *)v104;
              v59 = (int *)((char *)v104 + v92);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v85, 24);
              v59 = &v98;
              v60 = (char *)v104;
            }
          }
          v61 = &v60[24 * v105];
          v62 = *(_OWORD *)v59;
          *((_QWORD *)v61 + 2) = *((_QWORD *)v59 + 2);
          *(_OWORD *)v61 = v62;
          ++v105;
          if (v101)
          {
            v63 = &v98;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v98, v96);
            v64 = (char *)v104;
            if (v105 >= v106)
            {
              v87 = v105 + 1;
              if (v104 <= &v98 && (char *)v104 + 24 * v105 > (char *)&v98)
              {
                v93 = (char *)&v98 - (_BYTE *)v104;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v87, 24);
                v64 = (char *)v104;
                v63 = (int *)((char *)v104 + v93);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, v107, v87, 24);
                v63 = &v98;
                v64 = (char *)v104;
              }
            }
            v65 = &v64[24 * v105];
            v66 = *(_OWORD *)v63;
            *((_QWORD *)v65 + 2) = *((_QWORD *)v63 + 2);
            *(_OWORD *)v65 = v66;
            ++v105;
          }
        }
      }
      v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
      if (v101)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
      if (v112)
      {
        v67 = __p;
        if (__p)
        {
          v68 = v111;
          v69 = __p;
          if (v111 != __p)
          {
            do
              v68 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v68 - 1);
            while (v68 != v67);
            v69 = __p;
          }
          v111 = v67;
          operator delete(v69);
        }
        v39 = v108;
        if (!v108)
          goto LABEL_84;
        v70 = v109;
        v41 = v108;
        if (v109 == v108)
        {
LABEL_83:
          v109 = v39;
          operator delete(v41);
LABEL_84:
          if (v104 != v107)
            free(v104);
          return v35;
        }
        do
        {
          v72 = *--v70;
          v71 = v72;
          *v70 = 0;
          if (v72)
            MEMORY[0x20BD002D4](v71, 0x1000C8077774924);
        }
        while (v70 != v39);
LABEL_82:
        v41 = v108;
        goto LABEL_83;
      }
    }
    else
    {
      v94[0] = (const void **)"invalid source layout map";
      v95 = 259;
      mlir::OpState::emitOpError(this, v94, (uint64_t)&v101);
      v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
      if (v101)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
      if (v112)
      {
        v73 = __p;
        if (__p)
        {
          v74 = v111;
          v75 = __p;
          if (v111 != __p)
          {
            do
              v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
            while (v74 != v73);
            v75 = __p;
          }
          v111 = v73;
          operator delete(v75);
        }
        v39 = v108;
        if (!v108)
          goto LABEL_84;
        v76 = v109;
        v41 = v108;
        if (v109 == v108)
          goto LABEL_83;
        do
        {
          v78 = *--v76;
          v77 = v78;
          *v76 = 0;
          if (v78)
            MEMORY[0x20BD002D4](v77, 0x1000C8077774924);
        }
        while (v76 != v39);
        goto LABEL_82;
      }
    }
  }
  return v35;
}

uint64_t verifyCollapsedShape(uint64_t *a1, uint64_t a2, const char *a3, _QWORD *a4, const char *a5, uint64_t a6, const char *a7, char a8)
{
  uint64_t v8;
  uint64_t v12;
  const char *v13;
  const char *v14;
  unint64_t v15;
  const char **v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  const char **v31;
  uint64_t v32;
  const char *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  int *v54;
  char *v55;
  __int128 v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  int *v69;
  char *v70;
  __int128 v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  void *v80;
  const char *v81;
  char *v82;
  int *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  int *v88;
  char *v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  int *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  int *v98;
  char *v99;
  __int128 v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  BOOL v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  BOOL v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  int64_t v126;
  int64_t v127;
  void **p_dst;
  char *v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  void **v134;
  char *v135;
  char *v136;
  __int128 v137;
  uint64_t v138;
  void **v139;
  char *v140;
  char *v141;
  __int128 v142;
  _QWORD *v143;
  _QWORD *v144;
  void *v145;
  _QWORD *v146;
  _QWORD *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void **v152;
  char *v153;
  char *v154;
  __int128 v155;
  uint64_t v156;
  void **v157;
  char *v158;
  char *v159;
  __int128 v160;
  uint64_t v161;
  void **v162;
  char *v163;
  char *v164;
  __int128 v165;
  uint64_t v166;
  void **v167;
  char *v168;
  char *v169;
  __int128 v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  _QWORD *v179;
  _QWORD *v180;
  void *v181;
  _QWORD *v182;
  _QWORD *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  BOOL v189;
  unint64_t v190;
  BOOL v191;
  unint64_t v192;
  unint64_t v193;
  BOOL v194;
  unint64_t v195;
  BOOL v196;
  unint64_t v197;
  BOOL v198;
  int64_t v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  int64_t v203;
  int64_t v204;
  int64_t v205;
  uint64_t v208;
  const void **v210[4];
  __int16 v211;
  int v212;
  const char *v213;
  uint64_t v214;
  void *__dst;
  const char *v216;
  _QWORD v217[2];
  _QWORD v218[3];
  void *v219;
  unsigned int v220;
  unsigned int v221;
  _BYTE v222[96];
  void *v223;
  _QWORD *v224;
  void *__p;
  _QWORD *v226;
  char v227;
  uint64_t v228;

  v228 = *MEMORY[0x24BDAC8D0];
  if (a3 != a7)
  {
    v210[0] = (const void **)"invalid number of reassociation groups: found ";
    v211 = 259;
    mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
    if (v218[0])
    {
      LODWORD(__dst) = 5;
      v216 = a7;
      p_dst = &__dst;
      v130 = (char *)v219;
      if (v220 >= v221)
      {
        v187 = v220 + 1;
        if (v219 <= &__dst && (char *)v219 + 24 * v220 > (char *)&__dst)
        {
          v199 = (char *)&__dst - (_BYTE *)v219;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v187, 24);
          v130 = (char *)v219;
          p_dst = (void **)((char *)v219 + v199);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v187, 24);
          p_dst = &__dst;
          v130 = (char *)v219;
        }
      }
      v131 = &v130[24 * v220];
      v132 = *(_OWORD *)p_dst;
      *((_QWORD *)v131 + 2) = p_dst[2];
      *(_OWORD *)v131 = v132;
      v133 = ++v220;
      if (v218[0])
      {
        LODWORD(__dst) = 3;
        v216 = ", expected ";
        v217[0] = 11;
        v134 = &__dst;
        v135 = (char *)v219;
        if (v133 >= v221)
        {
          v188 = v133 + 1;
          v189 = (char *)v219 + 24 * v133 > (char *)&__dst;
          if (v219 <= &__dst && v189)
          {
            v200 = (char *)&__dst - (_BYTE *)v219;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v188, 24);
            v135 = (char *)v219;
            v134 = (void **)((char *)v219 + v200);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v188, 24);
            v134 = &__dst;
            v135 = (char *)v219;
          }
        }
        v136 = &v135[24 * v220];
        v137 = *(_OWORD *)v134;
        *((_QWORD *)v136 + 2) = v134[2];
        *(_OWORD *)v136 = v137;
        v138 = ++v220;
        if (v218[0])
        {
          LODWORD(__dst) = 5;
          v216 = a3;
          v139 = &__dst;
          v140 = (char *)v219;
          if (v138 >= v221)
          {
            v190 = v138 + 1;
            v191 = (char *)v219 + 24 * v138 > (char *)&__dst;
            if (v219 <= &__dst && v191)
            {
              v201 = (char *)&__dst - (_BYTE *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v190, 24);
              v140 = (char *)v219;
              v139 = (void **)((char *)v219 + v201);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v190, 24);
              v139 = &__dst;
              v140 = (char *)v219;
            }
          }
          v141 = &v140[24 * v220];
          v142 = *(_OWORD *)v139;
          *((_QWORD *)v141 + 2) = v139[2];
          *(_OWORD *)v141 = v142;
          ++v220;
        }
      }
    }
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
    if (v218[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
    if (!v227)
      return v8;
    v143 = __p;
    if (__p)
    {
      v144 = v226;
      v145 = __p;
      if (v226 != __p)
      {
        do
          v144 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v144 - 1);
        while (v144 != v143);
        v145 = __p;
      }
      v226 = v143;
      operator delete(v145);
    }
    v146 = v223;
    if (v223)
    {
      v147 = v224;
      v148 = v223;
      if (v224 == v223)
        goto LABEL_227;
      do
      {
        v150 = *--v147;
        v149 = v150;
        *v147 = 0;
        if (v150)
          MEMORY[0x20BD002D4](v149, 0x1000C8077774924);
      }
      while (v147 != v146);
      goto LABEL_226;
    }
LABEL_228:
    v177 = v219;
    if (v219 == v222)
      return v8;
LABEL_229:
    free(v177);
    return v8;
  }
  if (a3)
  {
    v12 = a6;
    v13 = 0;
    v14 = 0;
    v208 = a6 + 32 * (_QWORD)a3;
    while (1)
    {
      __dst = v217;
      v216 = (const char *)0x200000000;
      v15 = *(unsigned int *)(v12 + 8);
      if (&__dst != (void **)v12 && v15 != 0)
      {
        v28 = v217;
        v29 = *(unsigned int *)(v12 + 8);
        if (v15 < 3)
          goto LABEL_19;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v217, *(unsigned int *)(v12 + 8), 8);
        v29 = *(unsigned int *)(v12 + 8);
        if ((_DWORD)v29)
        {
          v28 = __dst;
LABEL_19:
          memcpy(v28, *(const void **)v12, 8 * v29);
        }
        v30 = 0;
        LODWORD(v216) = v15;
        v31 = (const char **)__dst;
        v32 = 8 * v15;
        do
        {
          v33 = v13++;
          if (v33 != *v31)
          {
            v210[0] = (const void **)"reassociation indices must be contiguous";
            v211 = 259;
            mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
            v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
            if (v218[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
            if (!v227)
              goto LABEL_138;
            v42 = __p;
            if (__p)
            {
              v43 = v226;
              v44 = __p;
              if (v226 != __p)
              {
                do
                  v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
                while (v43 != v42);
                v44 = __p;
              }
              v226 = v42;
              operator delete(v44);
            }
            v37 = v223;
            if (!v223)
              goto LABEL_136;
            v45 = v224;
            v39 = v223;
            if (v224 == v223)
              goto LABEL_135;
            do
            {
              v47 = *--v45;
              v46 = v47;
              *v45 = 0;
              if (v47)
                MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
            }
            while (v45 != v37);
            goto LABEL_134;
          }
          if ((uint64_t)v33 >= (uint64_t)a5)
          {
            v210[0] = (const void **)"reassociation index ";
            v211 = 259;
            mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
            if (v218[0])
            {
              v212 = 2;
              v213 = v33;
              v48 = (char *)v219;
              if (v220 >= v221)
              {
                v110 = v220 + 1;
                if (v219 <= &v212 && (char *)v219 + 24 * v220 > (char *)&v212)
                {
                  v122 = (char *)&v212 - (_BYTE *)v219;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v110, 24);
                  v48 = (char *)v219;
                  v49 = (int *)((char *)v219 + v122);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v110, 24);
                  v49 = &v212;
                  v48 = (char *)v219;
                }
              }
              else
              {
                v49 = &v212;
              }
              v50 = &v48[24 * v220];
              v51 = *(_OWORD *)v49;
              *((_QWORD *)v50 + 2) = *((_QWORD *)v49 + 2);
              *(_OWORD *)v50 = v51;
              v52 = ++v220;
              if (v218[0])
              {
                v212 = 3;
                v213 = " is out of bounds";
                v214 = 17;
                v53 = (char *)v219;
                if (v52 >= v221)
                {
                  v112 = v52 + 1;
                  v113 = (char *)v219 + 24 * v52 > (char *)&v212;
                  if (v219 <= &v212 && v113)
                  {
                    v124 = (char *)&v212 - (_BYTE *)v219;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v112, 24);
                    v53 = (char *)v219;
                    v54 = (int *)((char *)v219 + v124);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v112, 24);
                    v54 = &v212;
                    v53 = (char *)v219;
                  }
                }
                else
                {
                  v54 = &v212;
                }
                v55 = &v53[24 * v220];
                v56 = *(_OWORD *)v54;
                *((_QWORD *)v55 + 2) = *((_QWORD *)v54 + 2);
                *(_OWORD *)v55 = v56;
                ++v220;
              }
            }
            v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
            if (v218[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
            if (!v227)
              goto LABEL_138;
            v57 = __p;
            if (__p)
            {
              v58 = v226;
              v59 = __p;
              if (v226 != __p)
              {
                do
                  v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
                while (v58 != v57);
                v59 = __p;
              }
              v226 = v57;
              operator delete(v59);
            }
            v37 = v223;
            if (!v223)
              goto LABEL_136;
            v60 = v224;
            v39 = v223;
            if (v224 == v223)
              goto LABEL_135;
            do
            {
              v62 = *--v60;
              v61 = v62;
              *v60 = 0;
              if (v62)
                MEMORY[0x20BD002D4](v61, 0x1000C8077774924);
            }
            while (v60 != v37);
            goto LABEL_134;
          }
          if (a4[(_QWORD)v33] == 0x8000000000000000)
          {
            if ((v30 & 1) != 0)
            {
              v30 = 1;
              if ((a8 & 1) == 0)
              {
                v210[0] = (const void **)"at most one dimension in a reassociation group may be dynamic";
                v211 = 259;
                mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
                v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
                if (v218[0])
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
                if (!v227)
                  goto LABEL_138;
                v34 = __p;
                if (__p)
                {
                  v35 = v226;
                  v36 = __p;
                  if (v226 != __p)
                  {
                    do
                      v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
                    while (v35 != v34);
                    v36 = __p;
                  }
                  v226 = v34;
                  operator delete(v36);
                }
                v37 = v223;
                if (!v223)
                  goto LABEL_136;
                v38 = v224;
                v39 = v223;
                if (v224 == v223)
                  goto LABEL_135;
                do
                {
                  v41 = *--v38;
                  v40 = v41;
                  *v38 = 0;
                  if (v41)
                    MEMORY[0x20BD002D4](v40, 0x1000C8077774924);
                }
                while (v38 != v37);
                goto LABEL_134;
              }
            }
            else
            {
              v30 = 1;
            }
          }
          ++v31;
          v32 -= 8;
        }
        while (v32);
        v17 = (const char **)(a2 + 8 * (_QWORD)v14);
        v18 = *v17;
        if ((v30 & 1) != (*v17 == (const char *)0x8000000000000000))
          goto LABEL_78;
        if ((v30 & 1) == 0)
          break;
LABEL_105:
        v79 = 1;
        v80 = __dst;
        if (__dst == v217)
          goto LABEL_140;
LABEL_139:
        free(v80);
        goto LABEL_140;
      }
      v17 = (const char **)(a2 + 8 * (_QWORD)v14);
      v18 = *v17;
      if (*v17 != (const char *)0x8000000000000000)
        break;
LABEL_78:
      v210[0] = (const void **)"collapsed dim (";
      v211 = 259;
      mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
      if (v218[0])
      {
        v212 = 2;
        v213 = v14;
        v63 = (char *)v219;
        if (v220 >= v221)
        {
          v107 = v220 + 1;
          if (v219 <= &v212 && (char *)v219 + 24 * v220 > (char *)&v212)
          {
            v120 = (char *)&v212 - (_BYTE *)v219;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v107, 24);
            v63 = (char *)v219;
            v64 = (int *)((char *)v219 + v120);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v107, 24);
            v64 = &v212;
            v63 = (char *)v219;
          }
        }
        else
        {
          v64 = &v212;
        }
        v65 = &v63[24 * v220];
        v66 = *(_OWORD *)v64;
        *((_QWORD *)v65 + 2) = *((_QWORD *)v64 + 2);
        *(_OWORD *)v65 = v66;
        v67 = ++v220;
        if (v218[0])
        {
          v212 = 3;
          v213 = ") must be dynamic if and only if reassociation group is dynamic";
          v214 = 63;
          v68 = (char *)v219;
          if (v67 >= v221)
          {
            v108 = v67 + 1;
            v109 = (char *)v219 + 24 * v67 > (char *)&v212;
            if (v219 <= &v212 && v109)
            {
              v121 = (char *)&v212 - (_BYTE *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v108, 24);
              v68 = (char *)v219;
              v69 = (int *)((char *)v219 + v121);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v108, 24);
              v69 = &v212;
              v68 = (char *)v219;
            }
          }
          else
          {
            v69 = &v212;
          }
          v70 = &v68[24 * v220];
          v71 = *(_OWORD *)v69;
          *((_QWORD *)v70 + 2) = *((_QWORD *)v69 + 2);
          *(_OWORD *)v70 = v71;
          ++v220;
        }
      }
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
      if (v218[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
      if (v227)
      {
        v72 = __p;
        if (__p)
        {
          v73 = v226;
          v74 = __p;
          if (v226 != __p)
          {
            do
              v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
            while (v73 != v72);
            v74 = __p;
          }
          v226 = v72;
          operator delete(v74);
        }
        v37 = v223;
        if (!v223)
          goto LABEL_136;
        v75 = v224;
        v39 = v223;
        if (v224 == v223)
          goto LABEL_135;
        do
        {
          v77 = *--v75;
          v76 = v77;
          *v75 = 0;
          if (v77)
            MEMORY[0x20BD002D4](v76, 0x1000C8077774924);
        }
        while (v75 != v37);
        goto LABEL_134;
      }
LABEL_138:
      v79 = 0;
      v80 = __dst;
      if (__dst != v217)
        goto LABEL_139;
LABEL_140:
      if (!v79)
        return v8;
      ++v14;
      v12 += 32;
      if (v12 == v208)
      {
        if (v13 == a5)
          return 1;
        v210[0] = (const void **)"expanded rank (";
        v211 = 259;
        mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
        if (v218[0])
        {
          LODWORD(__dst) = 5;
          v216 = a5;
          v152 = &__dst;
          v153 = (char *)v219;
          if (v220 >= v221)
          {
            v192 = v220 + 1;
            if (v219 <= &__dst && (char *)v219 + 24 * v220 > (char *)&__dst)
            {
              v202 = (char *)&__dst - (_BYTE *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v192, 24);
              v153 = (char *)v219;
              v152 = (void **)((char *)v219 + v202);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v192, 24);
              v152 = &__dst;
              v153 = (char *)v219;
            }
          }
          v154 = &v153[24 * v220];
          v155 = *(_OWORD *)v152;
          *((_QWORD *)v154 + 2) = v152[2];
          *(_OWORD *)v154 = v155;
          v156 = ++v220;
          if (v218[0])
          {
            LODWORD(__dst) = 3;
            v216 = ") inconsistent with number of reassociation indices (";
            v217[0] = 53;
            v157 = &__dst;
            v158 = (char *)v219;
            if (v156 >= v221)
            {
              v193 = v156 + 1;
              v194 = (char *)v219 + 24 * v156 > (char *)&__dst;
              if (v219 <= &__dst && v194)
              {
                v203 = (char *)&__dst - (_BYTE *)v219;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v193, 24);
                v158 = (char *)v219;
                v157 = (void **)((char *)v219 + v203);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v193, 24);
                v157 = &__dst;
                v158 = (char *)v219;
              }
            }
            v159 = &v158[24 * v220];
            v160 = *(_OWORD *)v157;
            *((_QWORD *)v159 + 2) = v157[2];
            *(_OWORD *)v159 = v160;
            v161 = ++v220;
            if (v218[0])
            {
              LODWORD(__dst) = 2;
              v216 = v13;
              v162 = &__dst;
              v163 = (char *)v219;
              if (v161 >= v221)
              {
                v195 = v161 + 1;
                v196 = (char *)v219 + 24 * v161 > (char *)&__dst;
                if (v219 <= &__dst && v196)
                {
                  v204 = (char *)&__dst - (_BYTE *)v219;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v195, 24);
                  v163 = (char *)v219;
                  v162 = (void **)((char *)v219 + v204);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v195, 24);
                  v162 = &__dst;
                  v163 = (char *)v219;
                }
              }
              v164 = &v163[24 * v220];
              v165 = *(_OWORD *)v162;
              *((_QWORD *)v164 + 2) = v162[2];
              *(_OWORD *)v164 = v165;
              v166 = ++v220;
              if (v218[0])
              {
                LODWORD(__dst) = 3;
                v216 = ")";
                v217[0] = 1;
                v167 = &__dst;
                v168 = (char *)v219;
                if (v166 >= v221)
                {
                  v197 = v166 + 1;
                  v198 = (char *)v219 + 24 * v166 > (char *)&__dst;
                  if (v219 <= &__dst && v198)
                  {
                    v205 = (char *)&__dst - (_BYTE *)v219;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v197, 24);
                    v168 = (char *)v219;
                    v167 = (void **)((char *)v219 + v205);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v197, 24);
                    v167 = &__dst;
                    v168 = (char *)v219;
                  }
                }
                v169 = &v168[24 * v220];
                v170 = *(_OWORD *)v167;
                *((_QWORD *)v169 + 2) = v167[2];
                *(_OWORD *)v169 = v170;
                ++v220;
              }
            }
          }
        }
        v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
        if (v218[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
        if (v227)
        {
          v171 = __p;
          if (__p)
          {
            v172 = v226;
            v173 = __p;
            if (v226 != __p)
            {
              do
                v172 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v172 - 1);
              while (v172 != v171);
              v173 = __p;
            }
            v226 = v171;
            operator delete(v173);
          }
          v146 = v223;
          if (v223)
          {
            v174 = v224;
            v148 = v223;
            if (v224 == v223)
            {
LABEL_227:
              v224 = v146;
              operator delete(v148);
              goto LABEL_228;
            }
            do
            {
              v176 = *--v174;
              v175 = v176;
              *v174 = 0;
              if (v176)
                MEMORY[0x20BD002D4](v175, 0x1000C8077774924);
            }
            while (v174 != v146);
LABEL_226:
            v148 = v223;
            goto LABEL_227;
          }
          goto LABEL_228;
        }
        return v8;
      }
    }
    if (!(_DWORD)v216)
    {
      v27 = 1;
      goto LABEL_104;
    }
    v19 = (v216 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v19)
    {
      v20 = v19 + 1;
      v21 = (v19 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v22 = (uint64_t *)((char *)__dst + 8 * v21);
      v23 = (char *)__dst + 8;
      v24 = v21;
      v25 = 1;
      v26 = 1;
      do
      {
        v25 *= a4[*(v23 - 1)];
        v26 *= a4[*v23];
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      v27 = v26 * v25;
      if (v20 == v21)
      {
LABEL_104:
        if ((const char *)v27 == v18)
          goto LABEL_105;
        v210[0] = (const void **)"collapsed dim size (";
        v211 = 259;
        mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
        if (v218[0])
        {
          v81 = *v17;
          v212 = 2;
          v213 = v81;
          v82 = (char *)v219;
          if (v220 >= v221)
          {
            v111 = v220 + 1;
            if (v219 <= &v212 && (char *)v219 + 24 * v220 > (char *)&v212)
            {
              v123 = (char *)&v212 - (_BYTE *)v219;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v111, 24);
              v82 = (char *)v219;
              v83 = (int *)((char *)v219 + v123);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v111, 24);
              v83 = &v212;
              v82 = (char *)v219;
            }
          }
          else
          {
            v83 = &v212;
          }
          v84 = &v82[24 * v220];
          v85 = *(_OWORD *)v83;
          *((_QWORD *)v84 + 2) = *((_QWORD *)v83 + 2);
          *(_OWORD *)v84 = v85;
          v86 = ++v220;
          if (v218[0])
          {
            v212 = 3;
            v213 = ") must equal reassociation group size (";
            v214 = 39;
            v87 = (char *)v219;
            if (v86 >= v221)
            {
              v114 = v86 + 1;
              v115 = (char *)v219 + 24 * v86 > (char *)&v212;
              if (v219 <= &v212 && v115)
              {
                v125 = (char *)&v212 - (_BYTE *)v219;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v114, 24);
                v87 = (char *)v219;
                v88 = (int *)((char *)v219 + v125);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v114, 24);
                v88 = &v212;
                v87 = (char *)v219;
              }
            }
            else
            {
              v88 = &v212;
            }
            v89 = &v87[24 * v220];
            v90 = *(_OWORD *)v88;
            *((_QWORD *)v89 + 2) = *((_QWORD *)v88 + 2);
            *(_OWORD *)v89 = v90;
            v91 = ++v220;
            if (v218[0])
            {
              v212 = 2;
              v213 = (const char *)v27;
              v92 = (char *)v219;
              if (v91 >= v221)
              {
                v116 = v91 + 1;
                v117 = (char *)v219 + 24 * v91 > (char *)&v212;
                if (v219 <= &v212 && v117)
                {
                  v126 = (char *)&v212 - (_BYTE *)v219;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v116, 24);
                  v92 = (char *)v219;
                  v93 = (int *)((char *)v219 + v126);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v116, 24);
                  v93 = &v212;
                  v92 = (char *)v219;
                }
              }
              else
              {
                v93 = &v212;
              }
              v94 = &v92[24 * v220];
              v95 = *(_OWORD *)v93;
              *((_QWORD *)v94 + 2) = *((_QWORD *)v93 + 2);
              *(_OWORD *)v94 = v95;
              v96 = ++v220;
              if (v218[0])
              {
                v212 = 3;
                v213 = ")";
                v214 = 1;
                v97 = (char *)v219;
                if (v96 >= v221)
                {
                  v118 = v96 + 1;
                  v119 = (char *)v219 + 24 * v96 > (char *)&v212;
                  if (v219 <= &v212 && v119)
                  {
                    v127 = (char *)&v212 - (_BYTE *)v219;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v118, 24);
                    v97 = (char *)v219;
                    v98 = (int *)((char *)v219 + v127);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, v222, v118, 24);
                    v98 = &v212;
                    v97 = (char *)v219;
                  }
                }
                else
                {
                  v98 = &v212;
                }
                v99 = &v97[24 * v220];
                v100 = *(_OWORD *)v98;
                *((_QWORD *)v99 + 2) = *((_QWORD *)v98 + 2);
                *(_OWORD *)v99 = v100;
                ++v220;
              }
            }
          }
        }
        v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
        if (v218[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
        if (v227)
        {
          v101 = __p;
          if (__p)
          {
            v102 = v226;
            v103 = __p;
            if (v226 != __p)
            {
              do
                v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
              while (v102 != v101);
              v103 = __p;
            }
            v226 = v101;
            operator delete(v103);
          }
          v37 = v223;
          if (!v223)
            goto LABEL_136;
          v104 = v224;
          v39 = v223;
          if (v224 == v223)
          {
LABEL_135:
            v224 = v37;
            operator delete(v39);
LABEL_136:
            if (v219 != v222)
              free(v219);
            goto LABEL_138;
          }
          do
          {
            v106 = *--v104;
            v105 = v106;
            *v104 = 0;
            if (v106)
              MEMORY[0x20BD002D4](v105, 0x1000C8077774924);
          }
          while (v104 != v37);
LABEL_134:
          v39 = v223;
          goto LABEL_135;
        }
        goto LABEL_138;
      }
    }
    else
    {
      v22 = (uint64_t *)__dst;
      v27 = 1;
    }
    do
    {
      v78 = *v22++;
      v27 *= a4[v78];
    }
    while (v22 != (uint64_t *)((char *)__dst + 8 * v216));
    goto LABEL_104;
  }
  if (!a5)
    return 1;
  v151 = 8 * (_QWORD)a5;
  while (*a4 == 1)
  {
    ++a4;
    v151 -= 8;
    if (!v151)
      return 1;
  }
  v210[0] = (const void **)"rank 0 memrefs can only be extended/collapsed with/from ones";
  v211 = 259;
  mlir::Operation::emitOpError(a1, v210, (uint64_t)v218);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v218);
  if (v218[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v218);
  if (v227)
  {
    v179 = __p;
    if (__p)
    {
      v180 = v226;
      v181 = __p;
      if (v226 != __p)
      {
        do
          v180 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v180 - 1);
        while (v180 != v179);
        v181 = __p;
      }
      v226 = v179;
      operator delete(v181);
    }
    v182 = v223;
    if (v223)
    {
      v183 = v224;
      v184 = v223;
      if (v224 != v223)
      {
        do
        {
          v186 = *--v183;
          v185 = v186;
          *v183 = 0;
          if (v186)
            MEMORY[0x20BD002D4](v185, 0x1000C8077774924);
        }
        while (v183 != v182);
        v184 = v223;
      }
      v224 = v182;
      operator delete(v184);
    }
    v177 = v219;
    if (v219 != v222)
      goto LABEL_229;
  }
  return v8;
}

void mlir::memref::ExpandShapeOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>,mlir::MLIRContext *&>(a1, 0, 0, &v3);
}

unint64_t computeCollapsedLayoutMap(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t Value;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  mlir::MLIRContext *Context;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[48];
  void *v60[2];
  _QWORD v61[7];

  v61[6] = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v56 = a1;
  v60[0] = v61;
  v60[1] = (void *)0x600000000;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
  if (!mlir::getStridesAndOffset(v56, (uint64_t)v60, &v55))
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_69;
  }
  v57 = v59;
  v58 = 0x600000000;
  if (a3 < 7)
  {
    if (!a3)
      goto LABEL_40;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, a3, 8);
  }
  v10 = a2 + 32 * a3;
  v11 = a2;
  do
  {
    v12 = *(unsigned int *)(v11 + 8) - 1;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v12);
      v14 = *(_QWORD *)(Value + 8 * v13);
      if (v14 != 1)
        break;
      v15 = v12-- + 1;
      if (v15 <= 1)
        goto LABEL_14;
    }
    if (v14 != 0x8000000000000000)
    {
LABEL_14:
      v16 = v58;
      v17 = HIDWORD(v58);
      goto LABEL_15;
    }
    v16 = v58;
    v17 = HIDWORD(v58);
    if (v12)
    {
      v18 = 0x8000000000000000;
      goto LABEL_16;
    }
LABEL_15:
    v18 = *((_QWORD *)v60[0] + v13);
LABEL_16:
    if (v16 >= v17)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v16 + 1, 8);
      v16 = v58;
    }
    *((_QWORD *)v57 + v16) = v18;
    v19 = v58;
    LODWORD(v58) = v58 + 1;
    v11 += 32;
  }
  while (v11 != v10);
  v20 = v57;
  if ((a4 & 1) == 0)
  {
    do
    {
      v22 = *(_QWORD *)(v10 - 32);
      v10 -= 32;
      v21 = v22;
      v23 = *((_QWORD *)v57 + v19);
      v24 = v23 == 0x8000000000000000;
      if (v23 == 0x8000000000000000)
        v23 = 0;
      v25 = *(unsigned int *)(v10 + 8) - 1;
      while (v25)
      {
        v26 = 8 * *(_QWORD *)(v21 + 8 * v25);
        v27 = *(_QWORD *)(Value + v26);
        v28 = v27 == 0x8000000000000000;
        if (v27 == 0x8000000000000000)
          v27 = 0;
        v24 |= v28;
        v23 *= v27;
        if ((v24 & 1) != 0)
          v23 = 0;
        v29 = *(_QWORD *)((char *)v60[0] + v26 - 8);
        if (v29 == 0x8000000000000000)
          v30 = 0;
        else
          v30 = v29;
        --v25;
        if ((v24 & 1) == 0 && v29 != 0x8000000000000000 && v30 != v23)
          goto LABEL_67;
      }
      --v19;
    }
    while (v10 != a2);
LABEL_40:
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v56);
    v34 = mlir::StridedLayoutAttr::get(Context, v55, (uint64_t)v57, v58);
    v8 = v34;
    v9 = v34 & 0xFFFFFFFFFFFFFF00;
    v20 = v57;
    if (v57 != v59)
      goto LABEL_68;
    goto LABEL_69;
  }
  while (1)
  {
    v36 = *(_QWORD *)(v10 - 32);
    v10 -= 32;
    v35 = v36;
    v37 = *(unsigned int *)(v10 + 8);
    v38 = *((_QWORD *)v57 + v19);
    v39 = v38 == 0x8000000000000000 ? 0 : *((_QWORD *)v57 + v19);
    if ((_DWORD)v37 != 1)
      break;
LABEL_42:
    --v19;
    if (v10 == a2)
      goto LABEL_40;
  }
  v40 = 8 * *(_QWORD *)(v35 + 8 * v37 - 8);
  v41 = *(_QWORD *)(Value + v40);
  v42 = *(_QWORD *)((char *)v60[0] + v40 - 8);
  v43 = v41 * v39;
  if (v38 != 0x8000000000000000 && v41 != 0x8000000000000000 && v42 != 0x8000000000000000 && v42 == v43)
  {
    v47 = v37 - 2;
    while (v47)
    {
      v48 = 8 * *(_QWORD *)(v35 + 8 * v47);
      v49 = *(_QWORD *)(Value + v48);
      v50 = v49 * v42;
      v51 = *(_QWORD *)((char *)v60[0] + v48 - 8);
      --v47;
      v53 = v49 != 0x8000000000000000 && v51 != 0x8000000000000000 && v51 == v50;
      v42 = v51;
      if (!v53)
        goto LABEL_67;
    }
    goto LABEL_42;
  }
LABEL_67:
  v8 = 0;
  v9 = 0;
  if (v57 != v59)
LABEL_68:
    free(v20);
LABEL_69:
  if (v60[0] != v61)
    free(v60[0]);
  return v9 & 0xFFFFFFFFFFFFFF00 | v8;
}

uint64_t mlir::memref::CollapseShapeOp::computeCollapsedType(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  mlir::AffineMap *v18;
  uint64_t RHS;
  uint64_t LayerSchedule;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t *v24;
  mlir::AffineMap *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[7];

  v34[6] = *MEMORY[0x24BDAC8D0];
  v31 = a1;
  v32 = v34;
  v33 = 0x600000000;
  if (a3 < 7)
  {
    if (!a3)
      goto LABEL_19;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, a3, 8);
  }
  v5 = a2;
  do
  {
    v6 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(unsigned int **)v5;
      v9 = 8 * v6;
      v10 = 1;
      do
      {
        v11 = *v8;
        v8 += 2;
        v12 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31) + 8 * v11);
        v13 = v12 == 0x8000000000000000;
        if (v12 == 0x8000000000000000)
          v12 = 0;
        v7 |= v13;
        v14 = v12 * v10;
        if ((v7 & 1) != 0)
          v10 = 0;
        else
          v10 = v14;
        v9 -= 8;
      }
      while (v9);
      if ((v7 & 1) != 0)
        v10 = 0x8000000000000000;
    }
    else
    {
      v10 = 1;
    }
    v15 = v33;
    if (v33 >= (unint64_t)HIDWORD(v33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
      v15 = v33;
    }
    *((_QWORD *)v32 + v15) = v10;
    LODWORD(v33) = v33 + 1;
    v5 += 32;
  }
  while (v5 != a2 + 32 * a3);
LABEL_19:
  v30[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v31);
  v30[1] = v16;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v30) & 1) != 0)
  {
    v17 = (uint64_t *)v32;
    v18 = (mlir::AffineMap *)v33;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v31);
    LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v31);
    v21 = mlir::MemRefType::get(v17, v18, RHS, 0, 0, LayerSchedule);
    v22 = v32;
    if (v32 == v34)
      return v21;
    goto LABEL_26;
  }
  v23 = (_QWORD *)computeCollapsedLayoutMap(v31, a2, a3, 0);
  v24 = (uint64_t *)v32;
  v25 = (mlir::AffineMap *)v33;
  v26 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v31);
  if (v23)
    v27 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v23 + 8);
  else
    v27 = 0;
  v28 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v31);
  v21 = mlir::MemRefType::get(v24, v25, v26, v23, v27, v28);
  v22 = v32;
  if (v32 != v34)
LABEL_26:
    free(v22);
  return v21;
}

void mlir::memref::CollapseShapeOp::build(uint64_t *a1, mlir::Attribute *a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, uint64_t a7)
{
  unint64_t *v13;
  uint64_t ReassociationIndicesAttribute;
  mlir::StringAttr *Context;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21[2];
  unint64_t v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v18 = a3;
  v17 = mlir::memref::CollapseShapeOp::computeCollapsedType(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8, a4, a5);
  v13 = mlir::ValueRange::ValueRange(v22, (uint64_t)&v17, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)a2, v22[0], v22[1], (uint64_t)&v18, 1, a6, a7);
  ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, a4, a5);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  v20 = 261;
  v19[0] = "reassociation";
  v19[1] = 13;
  v16 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v19);
  ZinMirCacheTensors::ZinMirCacheTensors(v21, v16, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, v21[0], v21[1]);
}

uint64_t mlir::memref::CollapseShapeOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t Value;
  const char *v11;
  const char *v12;
  _QWORD *v13;
  const char *v14;
  const char *v15;
  char v16;
  char *v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  const char *v30;
  int *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  mlir::AffineMap *v46;
  mlir::AffineMap *v47;
  uint64_t RHS;
  uint64_t LayerSchedule;
  uint64_t v50;
  int *v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  int *v56;
  char *v57;
  char *v58;
  __int128 v59;
  int *v60;
  char *v61;
  char *v62;
  __int128 v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char v72;
  char v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  mlir::AffineMap *v78;
  mlir::AffineMap *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  const void **v104[4];
  __int16 v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  const char *v109;
  uint64_t v110;
  void *RawStringData;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  unsigned int v115;
  unsigned int v116;
  _BYTE v117[96];
  void *v118;
  _QWORD *v119;
  void *__p;
  _QWORD *v121;
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v107 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *((_DWORD *)v2 + 9);
  v4 = (uint64_t)(v2 - 2);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v106 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
  v7 = v6;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
  if (v7 <= v8)
  {
    v104[0] = (const void **)"expected rank reduction, but found source rank ";
    v105 = 259;
    mlir::OpState::emitOpError(this, v104, (uint64_t)&RawStringData);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
    if (RawStringData)
    {
      v108 = 2;
      v109 = v20;
      v21 = &v108;
      v22 = (char *)v114;
      if (v115 >= v116)
      {
        v90 = v115 + 1;
        if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
        {
          v98 = (char *)&v108 - (_BYTE *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v90, 24);
          v22 = (char *)v114;
          v21 = (int *)((char *)v114 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v90, 24);
          v21 = &v108;
          v22 = (char *)v114;
        }
      }
      v23 = &v22[24 * v115];
      v24 = *(_OWORD *)v21;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      v25 = ++v115;
      if (RawStringData)
      {
        v108 = 3;
        v109 = " <= result rank ";
        v110 = 16;
        v26 = &v108;
        v27 = (char *)v114;
        if (v25 >= v116)
        {
          v92 = v25 + 1;
          v93 = (char *)v114 + 24 * v25 > (char *)&v108;
          if (v114 <= &v108 && v93)
          {
            v100 = (char *)&v108 - (_BYTE *)v114;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v92, 24);
            v27 = (char *)v114;
            v26 = (int *)((char *)v114 + v100);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v92, 24);
            v26 = &v108;
            v27 = (char *)v114;
          }
        }
        v28 = &v27[24 * v115];
        v29 = *(_OWORD *)v26;
        *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v28 = v29;
        ++v115;
      }
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
    if (RawStringData)
    {
      v108 = 2;
      v109 = v30;
      v31 = &v108;
      v32 = (char *)v114;
      if (v115 >= v116)
      {
        v91 = v115 + 1;
        if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
        {
          v99 = (char *)&v108 - (_BYTE *)v114;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v91, 24);
          v32 = (char *)v114;
          v31 = (int *)((char *)v114 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v91, 24);
          v31 = &v108;
          v32 = (char *)v114;
        }
      }
      v33 = &v32[24 * v115];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = *((_QWORD *)v31 + 2);
      *(_OWORD *)v33 = v34;
      ++v115;
    }
    v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v122)
    {
      v36 = __p;
      if (__p)
      {
        v37 = v121;
        v38 = __p;
        if (v121 != __p)
        {
          do
            v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          v38 = __p;
        }
        v121 = v36;
        operator delete(v38);
      }
      v39 = v118;
      if (!v118)
        goto LABEL_87;
      v40 = v119;
      v41 = v118;
      if (v119 == v118)
        goto LABEL_86;
      do
      {
        v43 = *--v40;
        v42 = v43;
        *v40 = 0;
        if (v43)
          MEMORY[0x20BD002D4](v42, 0x1000C8077774924);
      }
      while (v40 != v39);
      goto LABEL_85;
    }
    return v35;
  }
  v9 = *this;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
  v12 = v11;
  v13 = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v107);
  v15 = v14;
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)this, (uint64_t)&RawStringData);
  v16 = verifyCollapsedShape(v9, Value, v12, v13, v15, (uint64_t)RawStringData, (const char *)v112, 1);
  v17 = (char *)RawStringData;
  if ((_DWORD)v112)
  {
    v18 = 32 * v112;
    do
    {
      v19 = *(char **)&v17[v18 - 32];
      if (&v17[v18 - 16] != v19)
        free(v19);
      v18 -= 32;
    }
    while (v18);
    v17 = (char *)RawStringData;
  }
  if (v17 != (char *)&v113)
    free(v17);
  if (!v16)
    return 0;
  RawStringData = (void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v107);
  v112 = v44;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData))
  {
    v45 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
    v47 = v46;
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v107);
    LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v107);
    v50 = mlir::MemRefType::get(v45, v47, RHS, 0, 0, LayerSchedule);
    if (v106 != v50)
      goto LABEL_38;
    return 1;
  }
  v70 = v107;
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)this, (uint64_t)&RawStringData);
  v71 = (_QWORD *)computeCollapsedLayoutMap(v70, (uint64_t)RawStringData, v112, 0);
  v73 = v72;
  v74 = (char *)RawStringData;
  if ((_DWORD)v112)
  {
    v75 = 32 * v112;
    do
    {
      v76 = *(char **)&v74[v75 - 32];
      if (&v74[v75 - 16] != v76)
        free(v76);
      v75 -= 32;
    }
    while (v75);
    v74 = (char *)RawStringData;
  }
  if (v74 != (char *)&v113)
    free(v74);
  if (v73)
  {
    v77 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v106);
    v79 = v78;
    v80 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v107);
    if (v71)
      v81 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v71 + 8);
    else
      v81 = 0;
    v89 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v107);
    v50 = mlir::MemRefType::get(v77, v79, v80, v71, v81, v89);
    if (v106 != v50)
    {
LABEL_38:
      v104[0] = (const void **)"expected collapsed type to be ";
      v105 = 259;
      mlir::OpState::emitOpError(this, v104, (uint64_t)&RawStringData);
      if (RawStringData)
      {
        v51 = &v108;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v50);
        v52 = (char *)v114;
        if (v115 >= v116)
        {
          v94 = v115 + 1;
          if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
          {
            v101 = (char *)&v108 - (_BYTE *)v114;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v94, 24);
            v52 = (char *)v114;
            v51 = (int *)((char *)v114 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v94, 24);
            v51 = &v108;
            v52 = (char *)v114;
          }
        }
        v53 = &v52[24 * v115];
        v54 = *(_OWORD *)v51;
        *((_QWORD *)v53 + 2) = *((_QWORD *)v51 + 2);
        *(_OWORD *)v53 = v54;
        v55 = ++v115;
        if (RawStringData)
        {
          v108 = 3;
          v109 = " but found ";
          v110 = 11;
          v56 = &v108;
          v57 = (char *)v114;
          if (v55 >= v116)
          {
            v95 = v55 + 1;
            v96 = (char *)v114 + 24 * v55 > (char *)&v108;
            if (v114 <= &v108 && v96)
            {
              v102 = (char *)&v108 - (_BYTE *)v114;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v95, 24);
              v57 = (char *)v114;
              v56 = (int *)((char *)v114 + v102);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v95, 24);
              v56 = &v108;
              v57 = (char *)v114;
            }
          }
          v58 = &v57[24 * v115];
          v59 = *(_OWORD *)v56;
          *((_QWORD *)v58 + 2) = *((_QWORD *)v56 + 2);
          *(_OWORD *)v58 = v59;
          ++v115;
          if (RawStringData)
          {
            v60 = &v108;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v108, v106);
            v61 = (char *)v114;
            if (v115 >= v116)
            {
              v97 = v115 + 1;
              if (v114 <= &v108 && (char *)v114 + 24 * v115 > (char *)&v108)
              {
                v103 = (char *)&v108 - (_BYTE *)v114;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v97, 24);
                v61 = (char *)v114;
                v60 = (int *)((char *)v114 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v117, v97, 24);
                v60 = &v108;
                v61 = (char *)v114;
              }
            }
            v62 = &v61[24 * v115];
            v63 = *(_OWORD *)v60;
            *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
            *(_OWORD *)v62 = v63;
            ++v115;
          }
        }
      }
      v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      if (v122)
      {
        v64 = __p;
        if (__p)
        {
          v65 = v121;
          v66 = __p;
          if (v121 != __p)
          {
            do
              v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
            while (v65 != v64);
            v66 = __p;
          }
          v121 = v64;
          operator delete(v66);
        }
        v39 = v118;
        if (!v118)
          goto LABEL_87;
        v67 = v119;
        v41 = v118;
        if (v119 == v118)
        {
LABEL_86:
          v119 = v39;
          operator delete(v41);
LABEL_87:
          if (v114 != v117)
            free(v114);
          return v35;
        }
        do
        {
          v69 = *--v67;
          v68 = v69;
          *v67 = 0;
          if (v69)
            MEMORY[0x20BD002D4](v68, 0x1000C8077774924);
        }
        while (v67 != v39);
LABEL_85:
        v41 = v118;
        goto LABEL_86;
      }
      return v35;
    }
    return 1;
  }
  v104[0] = (const void **)"invalid source layout map or collapsing non-contiguous dims";
  v105 = 259;
  mlir::OpState::emitOpError(this, v104, (uint64_t)&RawStringData);
  v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  if (v122)
  {
    v82 = __p;
    if (__p)
    {
      v83 = v121;
      v84 = __p;
      if (v121 != __p)
      {
        do
          v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        v84 = __p;
      }
      v121 = v82;
      operator delete(v84);
    }
    v39 = v118;
    if (!v118)
      goto LABEL_87;
    v85 = v119;
    v41 = v118;
    if (v119 == v118)
      goto LABEL_86;
    do
    {
      v87 = *--v85;
      v86 = v87;
      *v85 = 0;
      if (v87)
        MEMORY[0x20BD002D4](v86, 0x1000C8077774924);
    }
    while (v85 != v39);
    goto LABEL_85;
  }
  return v35;
}

void mlir::memref::CollapseShapeOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>,mlir::MLIRContext *&>(a1, 0, 0, &v3);
  mlir::RewritePatternSet::addImpl<CollapseShapeOpMemRefCastFolder,mlir::MLIRContext *&>(a1, 0, 0, &v3);
}

unint64_t mlir::memref::ExpandShapeOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t DefiningOp;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *a1;
  v3 = *(uint64_t **)(a2 + 48);
  v15 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    v5 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_DWORD *)(v2 + 36) ? v2 - 16 : 0;
      if (v6 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
        return *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) | 4;
    }
  }
  v8 = *v3;
  if (!*v3)
    return 0;
  v9 = mlir::DenseElementsAttr::classof(*v3);
  v10 = v9 ? v8 : 0;
  v15 = v10;
  if (!v9)
    return 0;
  if (*(_DWORD *)(v2 + 36))
    v11 = v2 - 16;
  else
    v11 = 0;
  v12 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v12)
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  else
    v13 = 0;
  return mlir::DenseElementsAttr::reshape(&v15, (uint64_t)v12, v13) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::memref::CollapseShapeOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t DefiningOp;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *a1;
  v3 = *(uint64_t **)(a2 + 48);
  v15 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v15);
  if (DefiningOp)
  {
    v5 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_DWORD *)(v2 + 36) ? v2 - 16 : 0;
      if (v6 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
        return *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) | 4;
    }
  }
  v8 = *v3;
  if (!*v3)
    return 0;
  v9 = mlir::DenseElementsAttr::classof(*v3);
  v10 = v9 ? v8 : 0;
  v15 = v10;
  if (!v9)
    return 0;
  if (*(_DWORD *)(v2 + 36))
    v11 = v2 - 16;
  else
    v11 = 0;
  v12 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v12)
    v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  else
    v13 = 0;
  return mlir::DenseElementsAttr::reshape(&v15, (uint64_t)v12, v13) & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::memref::ReshapeOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "reshape", 7);
}

uint64_t mlir::memref::ReshapeOp::verify(uint64_t **this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t OperandRange;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  const void **v43[4];
  __int16 v44;
  unint64_t RawStringData;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *__p;
  _QWORD *v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*this + 9))
    v3 = (uint64_t)(*this - 2);
  else
    v3 = 0;
  v4 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v3, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v2 + 8);
    RawStringData = v2;
    v46 = v5;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData);
    if (v4)
      goto LABEL_6;
  }
  else
  {
    RawStringData = 0;
    v46 = 0;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData);
    if (v4)
    {
LABEL_6:
      v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v4 + 8);
      RawStringData = v4;
      v46 = v7;
      if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData))
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  RawStringData = v4;
  v46 = 0;
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData))
  {
LABEL_7:
    v43[0] = (const void **)"element types of source and destination memref types should be the same";
    v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)&RawStringData);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v53)
    {
      v9 = __p;
      if (__p)
      {
        v10 = v52;
        v11 = __p;
        if (v52 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v52 = v9;
        operator delete(v11);
      }
      v12 = v49;
      if (!v49)
        goto LABEL_78;
      v13 = v50;
      v14 = v49;
      if (v50 == v49)
      {
LABEL_77:
        v50 = v12;
        operator delete(v14);
LABEL_78:
        if (v47 != &v48)
          free(v47);
        return v8;
      }
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          MEMORY[0x20BD002D4](v15, 0x1000C8077774924);
      }
      while (v13 != v12);
LABEL_76:
      v14 = v49;
      goto LABEL_77;
    }
    return v8;
  }
LABEL_23:
  if (*(_UNKNOWN **)(*(_QWORD *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v17 = v2;
  else
    v17 = 0;
  v42 = v17;
  if (v17)
  {
    RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v42);
    v46 = v18;
    if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
    {
      v43[0] = (const void **)"source memref type should have identity affine map";
      v44 = 259;
      mlir::OpState::emitOpError(this, v43, (uint64_t)&RawStringData);
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      if (RawStringData)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
      if (v53)
      {
        v28 = __p;
        if (__p)
        {
          v29 = v52;
          v30 = __p;
          if (v52 != __p)
          {
            do
              v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
            while (v29 != v28);
            v30 = __p;
          }
          v52 = v28;
          operator delete(v30);
        }
        v12 = v49;
        if (!v49)
          goto LABEL_78;
        v31 = v50;
        v14 = v49;
        if (v50 == v49)
          goto LABEL_77;
        do
        {
          v33 = *--v31;
          v32 = v33;
          *v31 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v31 != v12);
        goto LABEL_76;
      }
      return v8;
    }
  }
  RawStringData = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&RawStringData);
  if (*(_UNKNOWN **)(*(_QWORD *)v4 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v20 = v4;
  else
    v20 = 0;
  v42 = v20;
  if (!v20)
    return 1;
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v42);
  v46 = v21;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v43[0] = (const void **)"result memref type should have identity affine map";
    v44 = 259;
    mlir::OpState::emitOpError(this, v43, (uint64_t)&RawStringData);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v53)
    {
      v34 = __p;
      if (__p)
      {
        v35 = v52;
        v36 = __p;
        if (v52 != __p)
        {
          do
            v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
          while (v35 != v34);
          v36 = __p;
        }
        v52 = v34;
        operator delete(v36);
      }
      v12 = v49;
      if (!v49)
        goto LABEL_78;
      v37 = v50;
      v14 = v49;
      if (v50 == v49)
        goto LABEL_77;
      do
      {
        v39 = *--v37;
        v38 = v39;
        *v37 = 0;
        if (v39)
          MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
      }
      while (v37 != v12);
      goto LABEL_76;
    }
    return v8;
  }
  if (v19 != 0x8000000000000000)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
    if (v19 != v40)
    {
      v43[0] = (const void **)"length of shape operand differs from the result's memref rank";
      v44 = 259;
      mlir::OpState::emitOpError(this, v43, (uint64_t)&RawStringData);
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&RawStringData);
      return v8;
    }
    return 1;
  }
  v43[0] = (const void **)"cannot use shape operand with dynamic length to reshape to statically-ranked memref type";
  v44 = 259;
  mlir::OpState::emitOpError(this, v43, (uint64_t)&RawStringData);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  if (v53)
  {
    v22 = __p;
    if (__p)
    {
      v23 = v52;
      v24 = __p;
      if (v52 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v52 = v22;
      operator delete(v24);
    }
    v12 = v49;
    if (!v49)
      goto LABEL_78;
    v25 = v50;
    v14 = v49;
    if (v50 == v49)
      goto LABEL_77;
    do
    {
      v27 = *--v25;
      v26 = v27;
      *v25 = 0;
      if (v27)
        MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
    }
    while (v25 != v12);
    goto LABEL_76;
  }
  return v8;
}

uint64_t mlir::memref::StoreOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v15;
  __int16 v16;
  _QWORD v17[3];
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *__p;
  _QWORD *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((unsigned int *)v2 + 17);
  else
    v3 = 0;
  v17[0] = *(_QWORD *)(*(_QWORD *)(v2[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v17);
  if (v4 + 2 == v3)
    return 1;
  v15 = (const void **)"store index operand count not equal to memref rank";
  v16 = 259;
  mlir::OpState::emitOpError(this, &v15, (uint64_t)v17);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v17[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v17);
  if (v24)
  {
    v6 = __p;
    if (__p)
    {
      v7 = v23;
      v8 = __p;
      if (v23 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v23 = v6;
      operator delete(v8);
    }
    v9 = v20;
    if (v20)
    {
      v10 = v21;
      v11 = v20;
      if (v21 != v20)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            MEMORY[0x20BD002D4](v12, 0x1000C8077774924);
        }
        while (v10 != v9);
        v11 = v20;
      }
      v21 = v9;
      operator delete(v11);
    }
    if (v18 != &v19)
      free(v18);
  }
  return v5;
}

uint64_t mlir::memref::StoreOp::fold(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t DefiningOp;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0 && (v2 = *(unsigned int *)(v1 + 68), (_DWORD)v2))
  {
    v3 = 0;
    v4 = *(uint64_t **)(v1 + 72);
    v5 = v4[3];
    v6 = 32 * v2;
    do
    {
      v12 = v4[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (DefiningOp)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id
          && v4[3] != v5)
        {
          v8 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
          if (*(_UNKNOWN **)(*(_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
          {
            v9 = (uint64_t *)v4[1];
            if (v9)
            {
              *v9 = *v4;
              if (*v4)
                *(_QWORD *)(*v4 + 8) = v4[1];
            }
            v4[3] = (uint64_t)v8;
            v10 = *v8;
            *v4 = *v8;
            v4[1] = (uint64_t)v8;
            if (v10)
              *(_QWORD *)(v10 + 8) = v4;
            *v8 = (uint64_t)v4;
            v3 = 1;
          }
        }
      }
      v4 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t mlir::memref::SubViewOp::getAsmResultNames(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v4 = *(_QWORD *)a1 - 16;
  else
    v4 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return a2(a3, NextResultAtOffset, "subview", 7);
}

uint64_t mlir::memref::SubViewOp::inferResultType(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, mlir::AffineMap *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t RHS;
  mlir::MLIRContext *Context;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t LayerSchedule;
  uint64_t v42;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[32];
  void *v48;
  unsigned int v49;
  _QWORD v50[8];

  v50[7] = *MEMORY[0x24BDAC8D0];
  v44 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
  mlir::getStridesAndOffset(v44, (uint64_t)&v48);
  v13 = v50[6];
  v14 = (uint64_t *)v48;
  v15 = v49;
  if (a3 && v49)
  {
    v16 = 8 * v49 - 8;
    v17 = 8 * a3 - 8;
    v18 = (uint64_t *)v48;
    do
    {
      v20 = *a2++;
      v19 = v20;
      v22 = *v18++;
      v21 = v22;
      v23 = v19 == 0x8000000000000000;
      if (v19 == 0x8000000000000000)
        v19 = 0;
      if (v21 == 0x8000000000000000)
      {
        v21 = 0;
        v23 = 1;
      }
      v24 = v21 * v19;
      if (v23)
        v24 = 0;
      if (v13 == 0x8000000000000000)
        v25 = 0;
      else
        v25 = v13;
      if (v13 == 0x8000000000000000)
        v23 = 1;
      v26 = v24 + v25;
      if (v23)
        v13 = 0x8000000000000000;
      else
        v13 = v26;
      if (!v17)
        break;
      v27 = v16;
      v16 -= 8;
      v17 -= 8;
    }
    while (v27);
  }
  v45 = v47;
  v46 = 0x400000000;
  if (a3 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, a3, 8);
    v14 = (uint64_t *)v48;
    v15 = v49;
  }
  if ((_DWORD)v15 && a7)
  {
    v28 = v46;
    v29 = 8 * a7 - 8;
    v30 = 8 * v15 - 8;
    do
    {
      v31 = *a6;
      if (*v14 == 0x8000000000000000)
        v32 = 0;
      else
        v32 = *v14;
      if (v31 == 0x8000000000000000)
      {
        v31 = 0;
        v33 = 1;
      }
      else
      {
        v33 = *v14 == 0x8000000000000000;
      }
      if (v33)
        v34 = 0x8000000000000000;
      else
        v34 = v31 * v32;
      if (v28 >= HIDWORD(v46))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, v28 + 1, 8);
        *((_QWORD *)v45 + v46) = v34;
        v28 = v46 + 1;
        LODWORD(v46) = v46 + 1;
        if (!v30)
          break;
      }
      else
      {
        *((_QWORD *)v45 + v28) = v34;
        v28 = v46 + 1;
        LODWORD(v46) = v46 + 1;
        if (!v30)
          break;
      }
      ++v14;
      ++a6;
      v35 = v29;
      v29 -= 8;
      v30 -= 8;
    }
    while (v35);
  }
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v44);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v44);
  v38 = (_QWORD *)mlir::StridedLayoutAttr::get(Context, v13, (uint64_t)v45, v46);
  v39 = v38;
  if (v38)
    v40 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v38 + 8);
  else
    v40 = 0;
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v44);
  v42 = mlir::MemRefType::get(a4, a5, RHS, v39, v40, LayerSchedule);
  if (v45 != v47)
    free(v45);
  if (v48 != v50)
    free(v48);
  return v42;
}

uint64_t mlir::memref::SubViewOp::inferResultType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  _BYTE v20[48];
  void *v21[2];
  _BYTE v22[48];
  void *v23[2];
  _BYTE v24[48];
  void *v25;
  uint64_t v26;
  _BYTE v27[48];
  uint64_t *v28;
  uint64_t v29;
  _BYTE v30[48];
  uint64_t *v31;
  uint64_t v32;
  _QWORD v33[8];

  v33[6] = *MEMORY[0x24BDAC8D0];
  v31 = v33;
  v32 = 0x600000000;
  v28 = (uint64_t *)v30;
  v29 = 0x600000000;
  v25 = v27;
  v26 = 0x600000000;
  v23[0] = v24;
  v23[1] = (void *)0x600000000;
  v21[0] = v22;
  v21[1] = (void *)0x600000000;
  v19[0] = v20;
  v19[1] = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a2, a3, (uint64_t)v23, (uint64_t)&v31);
  mlir::dispatchIndexOpFoldResults(a4, a5, (uint64_t)v21, (uint64_t)&v28);
  mlir::dispatchIndexOpFoldResults(a6, a7, (uint64_t)v19, (uint64_t)&v25);
  if (!(_DWORD)v32)
  {
LABEL_5:
    if ((_DWORD)v29)
    {
      v14 = 8 * v29;
      v15 = v28;
      while ((unint64_t)*v15 < 0x8000000000000001)
      {
        ++v15;
        v14 -= 8;
        if (!v14)
          goto LABEL_9;
      }
      v16 = 0;
      v17 = (void *)v19[0];
      if ((_BYTE *)v19[0] == v20)
        goto LABEL_13;
    }
    else
    {
LABEL_9:
      v16 = mlir::memref::SubViewOp::inferResultType(a1, v31, v32, v28, (mlir::AffineMap *)v29, (uint64_t *)v25, v26);
      v17 = (void *)v19[0];
      if ((_BYTE *)v19[0] == v20)
        goto LABEL_13;
    }
LABEL_12:
    free(v17);
    goto LABEL_13;
  }
  v12 = 8 * v32;
  v13 = v31;
  while ((unint64_t)*v13 < 0x8000000000000001)
  {
    ++v13;
    v12 -= 8;
    if (!v12)
      goto LABEL_5;
  }
  v16 = 0;
  v17 = (void *)v19[0];
  if ((_BYTE *)v19[0] != v20)
    goto LABEL_12;
LABEL_13:
  if (v21[0] != v22)
    free(v21[0]);
  if (v23[0] != v24)
    free(v23[0]);
  if (v25 != v27)
    free(v25);
  if (v28 != (uint64_t *)v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v16;
}

void mlir::memref::SubViewOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *__src, uint64_t a12)
{
  uint64_t DenseI64ArrayAttr;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22[2];
  unint64_t v23[2];
  unint64_t v24[2];
  void *v25;
  uint64_t v26;
  _BYTE v27[48];
  void *v28;
  uint64_t v29;
  _BYTE v30[48];
  void *v31;
  uint64_t v32;
  _BYTE v33[48];
  void *v34;
  uint64_t v35;
  _BYTE v36[48];
  uint64_t *v37;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t *v40;
  uint64_t v41;
  _QWORD v42[8];

  v42[6] = *MEMORY[0x24BDAC8D0];
  v40 = v42;
  v41 = 0x600000000;
  v37 = (uint64_t *)v39;
  v38 = 0x600000000;
  v34 = v36;
  v35 = 0x600000000;
  v31 = v33;
  v32 = 0x600000000;
  v28 = v30;
  v29 = 0x600000000;
  v25 = v27;
  v26 = 0x600000000;
  mlir::dispatchIndexOpFoldResults(a5, a6, (uint64_t)&v31, (uint64_t)&v40);
  mlir::dispatchIndexOpFoldResults(a7, a8, (uint64_t)&v28, (uint64_t)&v37);
  mlir::dispatchIndexOpFoldResults(a9, a10, (uint64_t)&v25, (uint64_t)&v34);
  if (!a3)
    a3 = mlir::memref::SubViewOp::inferResultType(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8, v40, v41, v37, (mlir::AffineMap *)v38, (uint64_t *)v34, v35);
  mlir::ValueRange::ValueRange(v24, (uint64_t)v31, v32);
  mlir::ValueRange::ValueRange(v23, (uint64_t)v28, v29);
  mlir::ValueRange::ValueRange(v22, (uint64_t)v25, v26);
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v40, v41);
  v19 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v37, v38);
  v20 = mlir::Builder::getDenseI64ArrayAttr(a1, (uint64_t)v34, v35);
  mlir::memref::SubViewOp::build(v20, a2, a3, a4, v24[0], v24[1], v23[0], v23[1], v22[0], v22[1], DenseI64ArrayAttr, v19, v20);
  *(_QWORD *)(a2 + 192) = 0;
  v21 = *(unsigned int *)(a2 + 120);
  if (a12 + v21 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a12 + v21, 16);
    LODWORD(v21) = *(_DWORD *)(a2 + 120);
  }
  if (a12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v21), __src, 16 * a12);
    LODWORD(v21) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v21 + a12;
  if (v25 != v27)
    free(v25);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  if (v34 != v36)
    free(v34);
  if (v37 != (uint64_t *)v39)
    free(v37);
  if (v40 != v42)
    free(v40);
}

void mlir::memref::SubViewOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _DWORD *v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9, a10);
  v18 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  v18[6] = 1;
  v18[7] = a6;
  v18[8] = a8;
  v18[9] = a10;
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2) = a11;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = a12;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = a13;
  v19 = *(unsigned int *)(a2 + 72);
  if (v19 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v19) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::memref::SubViewOp::verify(uint64_t **this)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t LayerSchedule;
  void **v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  void **v12;
  char *v13;
  char *v14;
  __int128 v15;
  void **v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  mlir::AffineMap *v35;
  mlir::AffineMap *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void **v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int isRankReducedType;
  void **v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  void **v51;
  char *v52;
  char *v53;
  __int128 v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int StridesAndOffset;
  int v64;
  void **v67;
  uint64_t v68;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  void **v85;
  uint64_t *v86;
  void **v87;
  uint64_t v88;
  uint64_t *v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  void *v93[2];
  _BYTE v94[16];
  __int16 v95;
  void *v96[2];
  uint64_t v97;
  void *v98;
  unsigned int v99;
  unsigned int v100;
  _BYTE v101[96];
  void *v102;
  _QWORD *v103;
  void *__p;
  _QWORD *v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v83 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v3 = *((_DWORD *)v2 + 9);
  v4 = (uint64_t)(v2 - 2);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  v82 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v83);
  if (LayerSchedule != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v82))
  {
    v93[0] = "different memory spaces specified for base memref type ";
    v95 = 259;
    mlir::OpState::emitError(this, (uint64_t)v93, (uint64_t)v96);
    if (v96[0])
    {
      v7 = &v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v83);
      v8 = (char *)v98;
      if (v99 >= v100)
      {
        v70 = v99 + 1;
        if (v98 <= &v90 && (char *)v98 + 24 * v99 > (char *)&v90)
        {
          v77 = (char *)&v90 - (_BYTE *)v98;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v70, 24);
          v8 = (char *)v98;
          v7 = (void **)((char *)v98 + v77);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v70, 24);
          v7 = &v90;
          v8 = (char *)v98;
        }
      }
      v9 = &v8[24 * v99];
      v10 = *(_OWORD *)v7;
      *((_QWORD *)v9 + 2) = v7[2];
      *(_OWORD *)v9 = v10;
      v11 = ++v99;
      if (v96[0])
      {
        LODWORD(v90) = 3;
        v91 = " and subview memref type ";
        v92 = 25;
        v12 = &v90;
        v13 = (char *)v98;
        if (v11 >= v100)
        {
          v71 = v11 + 1;
          v72 = (char *)v98 + 24 * v11 > (char *)&v90;
          if (v98 <= &v90 && v72)
          {
            v78 = (char *)&v90 - (_BYTE *)v98;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v71, 24);
            v13 = (char *)v98;
            v12 = (void **)((char *)v98 + v78);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v71, 24);
            v12 = &v90;
            v13 = (char *)v98;
          }
        }
        v14 = &v13[24 * v99];
        v15 = *(_OWORD *)v12;
        *((_QWORD *)v14 + 2) = v12[2];
        *(_OWORD *)v14 = v15;
        ++v99;
        if (v96[0])
        {
          v16 = &v90;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v82);
          v17 = (char *)v98;
          if (v99 >= v100)
          {
            v73 = v99 + 1;
            if (v98 <= &v90 && (char *)v98 + 24 * v99 > (char *)&v90)
            {
              v79 = (char *)&v90 - (_BYTE *)v98;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v73, 24);
              v17 = (char *)v98;
              v16 = (void **)((char *)v98 + v79);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v73, 24);
              v16 = &v90;
              v17 = (char *)v98;
            }
          }
          v18 = &v17[24 * v99];
          v19 = *(_OWORD *)v16;
          *((_QWORD *)v18 + 2) = v16[2];
          *(_OWORD *)v18 = v19;
          ++v99;
        }
      }
    }
    v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v96);
    if (v96[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
    if (v106)
    {
      v21 = __p;
      if (__p)
      {
        v22 = v105;
        v23 = __p;
        if (v105 != __p)
        {
          do
            v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          v23 = __p;
        }
        v105 = v21;
        operator delete(v23);
      }
      v24 = v102;
      if (!v102)
        goto LABEL_86;
      v25 = v103;
      v26 = v102;
      if (v103 == v102)
      {
LABEL_85:
        v103 = v24;
        operator delete(v26);
LABEL_86:
        if (v98 != v101)
          free(v98);
        return v20;
      }
      do
      {
        v28 = *--v25;
        v27 = v28;
        *v25 = 0;
        if (v28)
          MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
      }
      while (v25 != v24);
LABEL_84:
      v26 = v102;
      goto LABEL_85;
    }
    return v20;
  }
  if (mlir::isStrided(v83))
  {
    v29 = v83;
    v96[0] = (void *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    v30 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v96);
    v32 = v31;
    v33 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v33 = 0;
    v96[0] = *(void **)(v33 + 8);
    v34 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v96);
    v36 = v35;
    v37 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v37 = 0;
    v96[0] = *(void **)(v37 + 16);
    v38 = (uint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)v96);
    v40 = (void **)mlir::memref::SubViewOp::inferResultType(v29, v30, v32, v34, v36, v38, v39);
    v41 = (_QWORD *)v82;
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)this, (uint64_t)&v90);
    v42 = v90;
    v43 = v91;
    v84 = v41;
    v85 = v40;
    if (v40)
    {
      v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v40 + 8);
      if (v41)
        goto LABEL_33;
    }
    else
    {
      v44 = 0;
      if (v41)
      {
LABEL_33:
        mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v41 + 8);
        isRankReducedType = mlir::isRankReducedType(v40, v44, v41);
        if (isRankReducedType)
          goto LABEL_78;
LABEL_56:
        computeMemRefRankReductionMask(&v87, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42, v43);
        if ((_BYTE)v88)
        {
          v61 = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v85);
          if (v61 == ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v84))
          {
            v62 = (uint64_t)v84;
            v89 = 0;
            v86 = 0;
            v96[0] = &v97;
            v96[1] = (void *)0x600000000;
            v93[0] = v94;
            v93[1] = (void *)0x600000000;
            StridesAndOffset = mlir::getStridesAndOffset((uint64_t)v85, (uint64_t)v96, &v89);
            v64 = mlir::getStridesAndOffset(v62, (uint64_t)v93, &v86);
            if (v89 != v86 || v64 == 0 || StridesAndOffset == 0)
              isRankReducedType = 5;
            else
              isRankReducedType = 0;
            if (v93[0] != v94)
              free(v93[0]);
            if (v96[0] != &v97)
              free(v96[0]);
          }
          else
          {
            isRankReducedType = 4;
          }
          v67 = v87;
          if ((v87 & 1) == 0 && v87)
          {
            if (*v87 != v87 + 2)
              free(*v87);
            MEMORY[0x20BD002F8](v67, 0x1080C40EF38A13ELL);
          }
        }
        else
        {
          isRankReducedType = 5;
        }
LABEL_78:
        if (v90 != &v92)
          free(v90);
        v89 = *this;
        if (v40)
          v68 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v40 + 8);
        else
          v68 = 0;
        v87 = v40;
        v88 = v68;
        __asm { BR              X10 }
      }
    }
    isRankReducedType = mlir::isRankReducedType(v40, v44, v41);
    if (isRankReducedType)
      goto LABEL_78;
    goto LABEL_56;
  }
  v93[0] = "base type ";
  v95 = 259;
  mlir::OpState::emitError(this, (uint64_t)v93, (uint64_t)v96);
  if (v96[0])
  {
    v46 = &v90;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v83);
    v47 = (char *)v98;
    if (v99 >= v100)
    {
      v74 = v99 + 1;
      if (v98 <= &v90 && (char *)v98 + 24 * v99 > (char *)&v90)
      {
        v80 = (char *)&v90 - (_BYTE *)v98;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v74, 24);
        v47 = (char *)v98;
        v46 = (void **)((char *)v98 + v80);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v74, 24);
        v46 = &v90;
        v47 = (char *)v98;
      }
    }
    v48 = &v47[24 * v99];
    v49 = *(_OWORD *)v46;
    *((_QWORD *)v48 + 2) = v46[2];
    *(_OWORD *)v48 = v49;
    v50 = ++v99;
    if (v96[0])
    {
      LODWORD(v90) = 3;
      v91 = " is not strided";
      v92 = 15;
      v51 = &v90;
      v52 = (char *)v98;
      if (v50 >= v100)
      {
        v75 = v50 + 1;
        v76 = (char *)v98 + 24 * v50 > (char *)&v90;
        if (v98 <= &v90 && v76)
        {
          v81 = (char *)&v90 - (_BYTE *)v98;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v75, 24);
          v52 = (char *)v98;
          v51 = (void **)((char *)v98 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v75, 24);
          v51 = &v90;
          v52 = (char *)v98;
        }
      }
      v53 = &v52[24 * v99];
      v54 = *(_OWORD *)v51;
      *((_QWORD *)v53 + 2) = v51[2];
      *(_OWORD *)v53 = v54;
      ++v99;
    }
  }
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v96);
  if (v96[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v96);
  if (v106)
  {
    v55 = __p;
    if (__p)
    {
      v56 = v105;
      v57 = __p;
      if (v105 != __p)
      {
        do
          v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
        while (v56 != v55);
        v57 = __p;
      }
      v105 = v55;
      operator delete(v57);
    }
    v24 = v102;
    if (!v102)
      goto LABEL_86;
    v58 = v103;
    v26 = v102;
    if (v103 == v102)
      goto LABEL_85;
    do
    {
      v60 = *--v58;
      v59 = v60;
      *v58 = 0;
      if (v60)
        MEMORY[0x20BD002D4](v59, 0x1000C8077774924);
    }
    while (v58 != v24);
    goto LABEL_84;
  }
  return v20;
}

void mlir::memref::SubViewOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  unint64_t v75;

  v73 = a2;
  mlir::RewritePatternSet::addImpl<mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>,mlir::MLIRContext *&>(a1, 0, 0, &v73);
  v3 = operator new();
  v4 = v73;
  mlir::PatternBenefit::PatternBenefit(&v74, 1);
  mlir::Pattern::Pattern(v3 + 8, (uint64_t)"memref.subview", 14, (__int16)v74, v4, 0, 0);
  *(_QWORD *)v3 = &off_24C02A940;
  if (*(_QWORD *)(v3 + 72))
  {
    v5 = *(unsigned int *)(v3 + 88);
    if (v5 <= *(_DWORD *)(v3 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 80, (void *)(v3 + 96), v5, 16);
    *(_DWORD *)(v3 + 88) = *(_DWORD *)(v3 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v74 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::SubViewOpMemRefCastFolder]";
  v75 = 98;
  v9 = llvm::StringRef::find((uint64_t *)&v74, "DesiredTypeName = ", 0x12uLL, 0);
  if (v75 >= v9)
    v10 = v9;
  else
    v10 = v75;
  v11 = &v74[v10];
  v12 = v75 - v10;
  if (v75 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v75 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v3 + 64) = v14;
  *(_QWORD *)(v3 + 72) = v15;
  v5 = *(unsigned int *)(v3 + 88);
  if (v5 > *(_DWORD *)(v3 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v3 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v3;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v3;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v3;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  v39 = v73;
  mlir::PatternBenefit::PatternBenefit(&v74, 1);
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"memref.subview", 14, (__int16)v74, v39, 0, 0);
  *(_QWORD *)v38 = &off_24C02A4F8;
  if (*(_QWORD *)(v38 + 72))
  {
    v40 = *(unsigned int *)(v38 + 88);
    if (v40 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v40, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v42 = (char *)a1[2];
    v41 = a1[3];
    if ((unint64_t)v42 < v41)
      goto LABEL_42;
    goto LABEL_53;
  }
  v74 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::TrivialSubViewOpFolder]";
  v75 = 95;
  v44 = llvm::StringRef::find((uint64_t *)&v74, "DesiredTypeName = ", 0x12uLL, 0);
  if (v75 >= v44)
    v45 = v44;
  else
    v45 = v75;
  v46 = &v74[v45];
  v47 = v75 - v45;
  if (v75 - v45 >= 0x12)
    v48 = 18;
  else
    v48 = v75 - v45;
  v49 = &v46[v48];
  v50 = v47 - v48;
  if (v50 >= v50 - 1)
    --v50;
  *(_QWORD *)(v38 + 64) = v49;
  *(_QWORD *)(v38 + 72) = v50;
  v40 = *(unsigned int *)(v38 + 88);
  if (v40 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v40;
  v42 = (char *)a1[2];
  v41 = a1[3];
  if ((unint64_t)v42 < v41)
  {
LABEL_42:
    *(_QWORD *)v42 = v38;
    v43 = (uint64_t)(v42 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v51 = (char *)a1[1];
  v52 = (v42 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
LABEL_78:
    abort();
  v54 = v41 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (!v55)
  {
    v56 = 0;
    v57 = (uint64_t *)(8 * v52);
    v58 = 0;
    *(_QWORD *)(8 * v52) = v38;
    v43 = 8 * v52 + 8;
    v59 = (char *)(v42 - v51);
    if (v42 != v51)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v55 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v56 = (char *)operator new(8 * v55);
  v57 = (uint64_t *)&v56[8 * v52];
  v58 = &v56[8 * v55];
  *v57 = v38;
  v43 = (uint64_t)(v57 + 1);
  v59 = (char *)(v42 - v51);
  if (v42 != v51)
  {
LABEL_62:
    v60 = (unint64_t)(v59 - 8);
    if (v60 < 0x78
      || &v42[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v57
      && &v56[v42 - v51 - (v60 & 0xFFFFFFFFFFFFFFF8) - 8] < v42)
    {
      goto LABEL_83;
    }
    v61 = (v60 >> 3) + 1;
    v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    v63 = &v42[-v62];
    v57 = (uint64_t *)((char *)v57 - v62);
    v64 = &v56[8 * v52 - 16];
    v65 = v42 - 16;
    v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *((_OWORD *)v65 - 1);
      v67 = *(_OWORD *)v65;
      *((_OWORD *)v65 - 1) = 0uLL;
      *(_OWORD *)v65 = 0uLL;
      *((_OWORD *)v64 - 1) = v68;
      *(_OWORD *)v64 = v67;
      v64 -= 32;
      v65 -= 32;
      v66 -= 4;
    }
    while (v66);
    v42 = v63;
    if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v69 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *(_QWORD *)v42 = 0;
        *--v57 = v69;
      }
      while (v42 != v51);
    }
    v42 = (char *)a1[1];
    v70 = (char *)a1[2];
    a1[1] = v57;
    a1[2] = v43;
    a1[3] = v58;
    while (v70 != v42)
    {
      v72 = *((_QWORD *)v70 - 1);
      v70 -= 8;
      v71 = v72;
      *(_QWORD *)v70 = 0;
      if (v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v57;
  a1[2] = v43;
  a1[3] = v58;
LABEL_75:
  if (v42)
    operator delete(v42);
LABEL_77:
  a1[2] = v43;
}

uint64_t mlir::memref::SubViewOp::fold(mlir::memref::ReinterpretCastOp *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *Shape;
  uint64_t v7;
  uint64_t v8;
  uint64_t DefiningOp;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 isConstantIntValue;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD v37[2];
  void *v38;
  unsigned int v39;
  _BYTE v40[32];
  void *v41;
  unsigned int v42;
  _BYTE v43[32];
  void *v44;
  unsigned int v45;
  _BYTE v46[32];
  char *v47;
  unsigned int v48;
  _QWORD v49[5];

  v49[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v2 = *(_QWORD *)a1 - 16;
  else
    v2 = 0;
  v3 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  else
    v4 = 0;
  v37[0] = v3;
  v37[1] = v4;
  v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v5)
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v37))
  {
    Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v37);
    if (v7)
    {
      v8 = 8 * v7;
      while (*Shape != 0x8000000000000000)
      {
        ++Shape;
        v8 -= 8;
        if (!v8)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      if ((_QWORD *)v37[0] == v5)
        return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24) | 4;
    }
  }
  v47 = *(char **)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v47);
  if (!DefiningOp)
    return 0;
  v10 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v11 = v10 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id;
  v12 = v10 == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id ? DefiningOp : 0;
  v36 = v12;
  if (!v11)
    return 0;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v36, (uint64_t)&v47);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes(a1, (uint64_t)&v44);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets(a1, (uint64_t)&v41);
  if (!v42)
  {
    v18 = 0;
    mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(a1, (uint64_t)&v38);
    v19 = v39;
    if (v39)
      goto LABEL_29;
LABEL_39:
    v25 = 0;
    v26 = v45;
    v27 = v48;
    if (v45 != v48)
    {
LABEL_59:
      if (v38 != v40)
        free(v38);
      if (v41 != v43)
        free(v41);
      if (v44 != v46)
        free(v44);
      if (v47 != (char *)v49)
        free(v47);
      return 0;
    }
    goto LABEL_40;
  }
  v13 = (uint64_t *)v41;
  v14 = 8 * v42 - 8;
  do
  {
    v15 = *v13++;
    isConstantIntValue = mlir::isConstantIntValue(v15, 0);
    v17 = !isConstantIntValue || v14 == 0;
    v14 -= 8;
  }
  while (!v17);
  v18 = !isConstantIntValue;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides(a1, (uint64_t)&v38);
  v19 = v39;
  if (!v39)
    goto LABEL_39;
LABEL_29:
  v20 = (uint64_t *)v38;
  v21 = 8 * v19 - 8;
  do
  {
    v22 = *v20++;
    v23 = mlir::isConstantIntValue(v22, 1);
    v24 = !v23 || v21 == 0;
    v21 -= 8;
  }
  while (!v24);
  v25 = !v23;
  v26 = v45;
  v27 = v48;
  if (v45 != v48)
    goto LABEL_59;
LABEL_40:
  if ((_DWORD)v26)
  {
    v29 = 8 * v26 - 8;
    v30 = 8 * v27 - 8;
    v31 = v44;
    v32 = v47;
    while (*v31 == *(_QWORD *)v32)
    {
      ++v31;
      v32 += 8;
      if (v29)
      {
        v29 -= 8;
        v33 = v30;
        v30 -= 8;
        if (v33)
          continue;
      }
      goto LABEL_47;
    }
    goto LABEL_59;
  }
  v32 = v47;
  v31 = v44;
LABEL_47:
  if ((v18 | v25) == 1 || v31 != (_QWORD *)((char *)v44 + 8 * v26) || v32 != &v47[8 * v27] || (_QWORD *)v37[0] != v5)
    goto LABEL_59;
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  if (v38 != v40)
    free(v38);
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
  v28 = v34 | 4;
  if (v47 != (char *)v49)
    free(v47);
  return v28;
}

uint64_t mlir::memref::TransposeOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "transpose", 9);
}

uint64_t inferTransposeResultType(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t Value;
  size_t v5;
  _BYTE *v6;
  uint64_t Results;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Position;
  uint64_t RHS;
  uint64_t LayerSchedule;
  uint64_t *v15;
  mlir::AffineMap *v16;
  mlir::MLIRContext *Context;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[48];
  void *v29;
  unsigned int v30;
  int v31;
  _BYTE v32[48];
  uint64_t *v33;
  uint64_t v34[8];

  v34[7] = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v24 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  v3 = v2;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v24);
  mlir::getStridesAndOffset(v24, (uint64_t)&v33);
  v29 = v32;
  v31 = 6;
  if (v3 > 6)
  {
    v30 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v32, v3, 8);
    v5 = 8 * v3;
    bzero(v29, 8 * v3);
    v30 = v3;
    v26 = v28;
    v27 = 0x600000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v3, 8);
    v6 = v26;
    goto LABEL_5;
  }
  if (v3)
  {
    v5 = 8 * v3;
    bzero(v32, 8 * v3);
    v30 = v3;
    v26 = v28;
    HIDWORD(v27) = 6;
    v6 = v28;
LABEL_5:
    memset_pattern16(v6, &unk_207A80400, v5);
    LODWORD(v27) = v3;
    Results = mlir::AffineMap::getResults((mlir::AffineMap *)&v23);
    if (v8)
      goto LABEL_6;
    goto LABEL_8;
  }
  v30 = 0;
  v26 = v28;
  v27 = 0x600000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&v23);
  if (v8)
  {
LABEL_6:
    v9 = Results;
    v10 = 0;
    v11 = 8 * v8;
    do
    {
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v25, *(_QWORD *)(v9 + v10));
      Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v25);
      *(_QWORD *)((char *)v29 + v10) = *(_QWORD *)(Value + Position * 8);
      *(_QWORD *)((char *)v26 + v10) = v33[Position];
      v10 += 8;
    }
    while (v11 != v10);
  }
LABEL_8:
  v25 = v24;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
  mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v25);
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v25);
  v15 = (uint64_t *)v29;
  v16 = (mlir::AffineMap *)v30;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v18 = (_QWORD *)mlir::StridedLayoutAttr::get(Context, v34[6], (uint64_t)v26, v27);
  v19 = v18;
  if (v18)
    v20 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v18 + 8);
  else
    v20 = 0;
  v21 = mlir::MemRefType::get(v15, v16, RHS, v19, v20, LayerSchedule);
  if (v26 != v28)
    free(v26);
  if (v29 != v32)
    free(v29);
  if (v33 != v34)
    free(v33);
  return v21;
}

uint64_t mlir::memref::TransposeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t Value;
  llvm::raw_ostream *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, " ", 1uLL);
  }
  else
  {
    *v7 = 32;
    ++*((_QWORD *)v6 + 4);
  }
  v19[0] = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19[0] = Value;
  mlir::AffineMap::print((mlir::AffineMap *)v19, v9);
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v19[0] = mlir::Operation::getAttrDictionary(v10);
    v11 = (mlir::ArrayAttr *)v19;
  }
  else
  {
    v11 = (mlir::Operation *)((char *)v10 + 56);
  }
  v12 = mlir::ArrayAttr::getValue(v11);
  v19[0] = "permutation";
  v19[1] = 11;
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2 + 192))(a2, v12, v13, v19, 1);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = *((_QWORD *)v14 + 4);
  if ((unint64_t)(*((_QWORD *)v14 + 3) - v15) > 2)
  {
    *(_BYTE *)(v15 + 2) = 32;
    *(_WORD *)v15 = 14880;
    *((_QWORD *)v14 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v14, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_DWORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 3uLL)
  {
    *v17 = 544175136;
    *((_QWORD *)v16 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v16, " to ", 4uLL);
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *((_QWORD *)*this - 1) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::memref::TransposeOp::parse(uint64_t a1, mlir::Attribute *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[4];
  _BYTE v10[32];
  __int16 v11;

  memset(v9, 0, 24);
  v7 = 0;
  v8 = 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v9, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 472))(a1, &v8))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112))
    return 0;
  if (!mlir::AsmParser::parseColonType<mlir::MemRefType>(a1, &v7))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, v7, (uint64_t)a2 + 16))return 0;
  v11 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _BYTE *))(*(_QWORD *)a1 + 368))(a1, "to", 2, v10)|| !(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6)|| !mlir::AsmParser::addTypeToList(a1, v6, (uint64_t)a2 + 64))
  {
    return 0;
  }
  v4 = mlir::AffineMapAttr::get(v8);
  mlir::OperationState::addAttribute(a2, (uint64_t)"permutation", 11, v4);
  return 1;
}

uint64_t mlir::AsmParser::addTypeToList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(unsigned int *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = a2;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

uint64_t mlir::memref::TransposeOp::verify(uint64_t **this)
{
  int NumDims;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  const void **v65[4];
  __int16 v66;
  int v67;
  const char *v68;
  uint64_t v69;
  _QWORD v70[3];
  void *v71;
  unsigned int v72;
  unsigned int v73;
  _BYTE v74[96];
  void *v75;
  _QWORD *v76;
  void *__p;
  _QWORD *v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v70[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v70[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v70);
  if ((mlir::AffineMap::isPermutation((mlir::AffineMap *)v70) & 1) != 0)
  {
    v70[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    v70[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v70);
    NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)v70);
    v65[0] = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v65);
    if (v3 == NumDims)
    {
      v4 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v5 = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
      v70[0] = (*this)[10];
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v70);
      v7 = inferTransposeResultType(v4, Value);
      if (v5 == v7)
        return 1;
      v8 = v7;
      v65[0] = (const void **)"output type ";
      v66 = 259;
      mlir::OpState::emitOpError(this, v65, (uint64_t)v70);
      if (v70[0])
      {
        v9 = &v67;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v5);
        v10 = (char *)v71;
        if (v72 >= v73)
        {
          v53 = v72 + 1;
          if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
          {
            v60 = (char *)&v67 - (_BYTE *)v71;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v53, 24);
            v10 = (char *)v71;
            v9 = (int *)((char *)v71 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v53, 24);
            v9 = &v67;
            v10 = (char *)v71;
          }
        }
        v11 = &v10[24 * v72];
        v12 = *(_OWORD *)v9;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v11 = v12;
        v13 = ++v72;
        if (v70[0])
        {
          v67 = 3;
          v68 = " does not match transposed input type ";
          v69 = 38;
          v14 = &v67;
          v15 = (char *)v71;
          if (v13 >= v73)
          {
            v54 = v13 + 1;
            v55 = (char *)v71 + 24 * v13 > (char *)&v67;
            if (v71 <= &v67 && v55)
            {
              v61 = (char *)&v67 - (_BYTE *)v71;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v54, 24);
              v15 = (char *)v71;
              v14 = (int *)((char *)v71 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v54, 24);
              v14 = &v67;
              v15 = (char *)v71;
            }
          }
          v16 = &v15[24 * v72];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v16 = v17;
          ++v72;
          if (v70[0])
          {
            v18 = &v67;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v4);
            v19 = (char *)v71;
            if (v72 >= v73)
            {
              v56 = v72 + 1;
              if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
              {
                v62 = (char *)&v67 - (_BYTE *)v71;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v56, 24);
                v19 = (char *)v71;
                v18 = (int *)((char *)v71 + v62);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v56, 24);
                v18 = &v67;
                v19 = (char *)v71;
              }
            }
            v20 = &v19[24 * v72];
            v21 = *(_OWORD *)v18;
            *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
            *(_OWORD *)v20 = v21;
            v22 = ++v72;
            if (v70[0])
            {
              v67 = 3;
              v68 = ", ";
              v69 = 2;
              v23 = &v67;
              v24 = (char *)v71;
              if (v22 >= v73)
              {
                v57 = v22 + 1;
                v58 = (char *)v71 + 24 * v22 > (char *)&v67;
                if (v71 <= &v67 && v58)
                {
                  v63 = (char *)&v67 - (_BYTE *)v71;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v57, 24);
                  v24 = (char *)v71;
                  v23 = (int *)((char *)v71 + v63);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v57, 24);
                  v23 = &v67;
                  v24 = (char *)v71;
                }
              }
              v25 = &v24[24 * v72];
              v26 = *(_OWORD *)v23;
              *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
              *(_OWORD *)v25 = v26;
              ++v72;
              if (v70[0])
              {
                v27 = &v67;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v67, v8);
                v28 = (char *)v71;
                if (v72 >= v73)
                {
                  v59 = v72 + 1;
                  if (v71 <= &v67 && (char *)v71 + 24 * v72 > (char *)&v67)
                  {
                    v64 = (char *)&v67 - (_BYTE *)v71;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
                    v28 = (char *)v71;
                    v27 = (int *)((char *)v71 + v64);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v74, v59, 24);
                    v27 = &v67;
                    v28 = (char *)v71;
                  }
                }
                v29 = &v28[24 * v72];
                v30 = *(_OWORD *)v27;
                *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
                *(_OWORD *)v29 = v30;
                ++v72;
              }
            }
          }
        }
      }
      v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v70);
      if (v70[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
      if (v79)
      {
        v32 = __p;
        if (__p)
        {
          v33 = v78;
          v34 = __p;
          if (v78 != __p)
          {
            do
              v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            v34 = __p;
          }
          v78 = v32;
          operator delete(v34);
        }
        v35 = v75;
        if (!v75)
          goto LABEL_59;
        v36 = v76;
        v37 = v75;
        if (v76 == v75)
        {
LABEL_58:
          v76 = v35;
          operator delete(v37);
LABEL_59:
          if (v71 != v74)
            free(v71);
          return v31;
        }
        do
        {
          v39 = *--v36;
          v38 = v39;
          *v36 = 0;
          if (v39)
            MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
        }
        while (v36 != v35);
LABEL_57:
        v37 = v75;
        goto LABEL_58;
      }
    }
    else
    {
      v65[0] = (const void **)"expected a permutation map of same rank as the input";
      v66 = 259;
      mlir::OpState::emitOpError(this, v65, (uint64_t)v70);
      v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v70);
      if (v70[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
      if (v79)
      {
        v46 = __p;
        if (__p)
        {
          v47 = v78;
          v48 = __p;
          if (v78 != __p)
          {
            do
              v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            v48 = __p;
          }
          v78 = v46;
          operator delete(v48);
        }
        v35 = v75;
        if (!v75)
          goto LABEL_59;
        v49 = v76;
        v37 = v75;
        if (v76 == v75)
          goto LABEL_58;
        do
        {
          v51 = *--v49;
          v50 = v51;
          *v49 = 0;
          if (v51)
            MEMORY[0x20BD002D4](v50, 0x1000C8077774924);
        }
        while (v49 != v35);
        goto LABEL_57;
      }
    }
  }
  else
  {
    v65[0] = (const void **)"expected a permutation map";
    v66 = 259;
    mlir::OpState::emitOpError(this, v65, (uint64_t)v70);
    v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v70);
    if (v70[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v70);
    if (v79)
    {
      v40 = __p;
      if (__p)
      {
        v41 = v78;
        v42 = __p;
        if (v78 != __p)
        {
          do
            v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          v42 = __p;
        }
        v78 = v40;
        operator delete(v42);
      }
      v35 = v75;
      if (!v75)
        goto LABEL_59;
      v43 = v76;
      v37 = v75;
      if (v76 == v75)
        goto LABEL_58;
      do
      {
        v45 = *--v43;
        v44 = v45;
        *v43 = 0;
        if (v45)
          MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
      }
      while (v43 != v35);
      goto LABEL_57;
    }
  }
  return v31;
}

uint64_t mlir::memref::TransposeOp::fold(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t DefiningOp;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *a1;
  if ((*(_BYTE *)(*a1 + 46) & 0x80) == 0)
    return 0;
  v2 = *(unsigned int *)(v1 + 68);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  v5 = *(uint64_t **)(v1 + 72);
  v6 = &v5[4 * v2];
  do
  {
    while (1)
    {
      v12 = v5[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
      if (!DefiningOp)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
        break;
      if (!v5[3])
        break;
      v8 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
        break;
      v9 = (uint64_t *)v5[1];
      if (v9)
      {
        *v9 = *v5;
        if (*v5)
          *(_QWORD *)(*v5 + 8) = v5[1];
      }
      v5[3] = (uint64_t)v8;
      v10 = *v8;
      *v5 = *v8;
      v5[1] = (uint64_t)v8;
      if (v10)
        *(_QWORD *)(v10 + 8) = v5;
      *v8 = (uint64_t)v5;
      v5 += 4;
      v4 = 1;
      if (v5 == v6)
        return (*a1 - 16) | 4;
    }
    v5 += 4;
  }
  while (v5 != v6);
  if ((v4 & 1) == 0)
    return 0;
  return (*a1 - 16) | 4;
}

uint64_t mlir::memref::ViewOp::getAsmResultNames(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  return a2(a3, *a1 - 16, "view", 4);
}

uint64_t mlir::memref::ViewOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t LayerSchedule;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t Value;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64x2_t *v56;
  int64x2_t v57;
  int64x2_t v58;
  uint64_t v59;
  int64x2_t v60;
  uint64_t v61;
  int *v62;
  char *v63;
  char *v64;
  __int128 v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v78;
  unint64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  _QWORD v86[4];
  __int16 v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  const char *v91;
  uint64_t v92;
  uint64_t RawStringData;
  uint64_t v94;
  void *v95;
  unsigned int v96;
  unsigned int v97;
  _BYTE v98[96];
  void *v99;
  _QWORD *v100;
  void *__p;
  _QWORD *v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v89 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v88 = *(v2 - 1) & 0xFFFFFFFFFFFFFFF8;
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v89);
  v94 = v3;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v86[0] = "unsupported map for base memref type ";
    v87 = 259;
    mlir::OpState::emitError(this, (uint64_t)v86, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      v28 = &v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v89);
      v29 = (char *)v95;
      if (v96 >= v97)
      {
        v73 = v96 + 1;
        if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
        {
          v80 = (char *)&v90 - (_BYTE *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v73, 24);
          v29 = (char *)v95;
          v28 = (int *)((char *)v95 + v80);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v73, 24);
          v28 = &v90;
          v29 = (char *)v95;
        }
      }
      v30 = &v29[24 * v96];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v96;
    }
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v103)
    {
      v32 = __p;
      if (__p)
      {
        v33 = v102;
        v34 = __p;
        if (v102 != __p)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = __p;
        }
        v102 = v32;
        operator delete(v34);
      }
      v23 = v99;
      if (!v99)
        goto LABEL_92;
      v35 = v100;
      v25 = v99;
      if (v100 == v99)
        goto LABEL_91;
      do
      {
        v37 = *--v35;
        v36 = v37;
        *v35 = 0;
        if (v37)
          MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
      }
      while (v35 != v23);
      goto LABEL_90;
    }
    return v19;
  }
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v88);
  v94 = v4;
  if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&RawStringData) & 1) == 0)
  {
    v86[0] = "unsupported map for result memref type ";
    v87 = 259;
    mlir::OpState::emitError(this, (uint64_t)v86, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      v38 = &v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v88);
      v39 = (char *)v95;
      if (v96 >= v97)
      {
        v74 = v96 + 1;
        if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
        {
          v81 = (char *)&v90 - (_BYTE *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v74, 24);
          v39 = (char *)v95;
          v38 = (int *)((char *)v95 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v74, 24);
          v38 = &v90;
          v39 = (char *)v95;
        }
      }
      v40 = &v39[24 * v96];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v96;
    }
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v103)
    {
      v42 = __p;
      if (__p)
      {
        v43 = v102;
        v44 = __p;
        if (v102 != __p)
        {
          do
            v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          v44 = __p;
        }
        v102 = v42;
        operator delete(v44);
      }
      v23 = v99;
      if (!v99)
        goto LABEL_92;
      v45 = v100;
      v25 = v99;
      if (v100 == v99)
        goto LABEL_91;
      do
      {
        v47 = *--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
      }
      while (v45 != v23);
      goto LABEL_90;
    }
    return v19;
  }
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v89);
  if (LayerSchedule != ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v88))
  {
    v86[0] = "different memory spaces specified for base memref type ";
    v87 = 259;
    mlir::OpState::emitError(this, (uint64_t)v86, (uint64_t)&RawStringData);
    if (RawStringData)
    {
      v6 = &v90;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v89);
      v7 = (char *)v95;
      if (v96 >= v97)
      {
        v75 = v96 + 1;
        if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
        {
          v82 = (char *)&v90 - (_BYTE *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
          v7 = (char *)v95;
          v6 = (int *)((char *)v95 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
          v6 = &v90;
          v7 = (char *)v95;
        }
      }
      v8 = &v7[24 * v96];
      v9 = *(_OWORD *)v6;
      *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v8 = v9;
      v10 = ++v96;
      if (RawStringData)
      {
        v90 = 3;
        v91 = " and view memref type ";
        v92 = 22;
        v11 = &v90;
        v12 = (char *)v95;
        if (v10 >= v97)
        {
          v76 = v10 + 1;
          v77 = (char *)v95 + 24 * v10 > (char *)&v90;
          if (v95 <= &v90 && v77)
          {
            v83 = (char *)&v90 - (_BYTE *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
            v12 = (char *)v95;
            v11 = (int *)((char *)v95 + v83);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
            v11 = &v90;
            v12 = (char *)v95;
          }
        }
        v13 = &v12[24 * v96];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
        *(_OWORD *)v13 = v14;
        ++v96;
        if (RawStringData)
        {
          v15 = &v90;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v88);
          v16 = (char *)v95;
          if (v96 >= v97)
          {
            v78 = v96 + 1;
            if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
            {
              v84 = (char *)&v90 - (_BYTE *)v95;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v78, 24);
              v16 = (char *)v95;
              v15 = (int *)((char *)v95 + v84);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v78, 24);
              v15 = &v90;
              v16 = (char *)v95;
            }
          }
          v17 = &v16[24 * v96];
          v18 = *(_OWORD *)v15;
          *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
          *(_OWORD *)v17 = v18;
          ++v96;
        }
      }
    }
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
    if (RawStringData)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
    if (v103)
    {
      v20 = __p;
      if (__p)
      {
        v21 = v102;
        v22 = __p;
        if (v102 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v102 = v20;
        operator delete(v22);
      }
      v23 = v99;
      if (!v99)
        goto LABEL_92;
      v24 = v100;
      v25 = v99;
      if (v100 == v99)
      {
LABEL_91:
        v100 = v23;
        operator delete(v25);
LABEL_92:
        if (v95 != v98)
          free(v95);
        return v19;
      }
      do
      {
        v27 = *--v24;
        v26 = v27;
        *v24 = 0;
        if (v27)
          MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
      }
      while (v24 != v23);
LABEL_90:
      v25 = v99;
      goto LABEL_91;
    }
    return v19;
  }
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v88);
  if (v49)
  {
    v50 = (v49 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v50 >= 3)
    {
      v54 = v50 + 1;
      v55 = (v50 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v52 = (uint64_t *)(Value + 8 * v55);
      v56 = (int64x2_t *)(Value + 16);
      v57 = 0uLL;
      v58 = vdupq_n_s64(0x8000000000000000);
      v59 = v55;
      v60 = 0uLL;
      do
      {
        v57 = vsubq_s64(v57, vceqq_s64(v56[-1], v58));
        v60 = vsubq_s64(v60, vceqq_s64(*v56, v58));
        v56 += 2;
        v59 -= 4;
      }
      while (v59);
      v51 = vaddvq_s64(vaddq_s64(v60, v57));
      if (v54 == v55)
      {
LABEL_69:
        v53 = v51;
        goto LABEL_70;
      }
    }
    else
    {
      v51 = 0;
      v52 = (uint64_t *)Value;
    }
    do
    {
      v61 = *v52++;
      if (v61 == 0x8000000000000000)
        ++v51;
    }
    while (v52 != (uint64_t *)(Value + 8 * v49));
    goto LABEL_69;
  }
  v53 = 0;
LABEL_70:
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && *((unsigned int *)*this + 17) - 2 == v53)
    return 1;
  v86[0] = "incorrect number of size operands for type ";
  v87 = 259;
  mlir::OpState::emitError(this, (uint64_t)v86, (uint64_t)&RawStringData);
  if (RawStringData)
  {
    v62 = &v90;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v90, v88);
    v63 = (char *)v95;
    if (v96 >= v97)
    {
      v79 = v96 + 1;
      if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
      {
        v85 = (char *)&v90 - (_BYTE *)v95;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
        v63 = (char *)v95;
        v62 = (int *)((char *)v95 + v85);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
        v62 = &v90;
        v63 = (char *)v95;
      }
    }
    v64 = &v63[24 * v96];
    v65 = *(_OWORD *)v62;
    *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
    *(_OWORD *)v64 = v65;
    ++v96;
  }
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&RawStringData);
  if (RawStringData)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RawStringData);
  if (v103)
  {
    v66 = __p;
    if (__p)
    {
      v67 = v102;
      v68 = __p;
      if (v102 != __p)
      {
        do
          v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        v68 = __p;
      }
      v102 = v66;
      operator delete(v68);
    }
    v23 = v99;
    if (!v99)
      goto LABEL_92;
    v69 = v100;
    v25 = v99;
    if (v100 == v99)
      goto LABEL_91;
    do
    {
      v71 = *--v69;
      v70 = v71;
      *v69 = 0;
      if (v71)
        MEMORY[0x20BD002D4](v70, 0x1000C8077774924);
    }
    while (v69 != v23);
    goto LABEL_90;
  }
  return v19;
}

uint64_t mlir::memref::ViewOp::getSizes(mlir::memref::ViewOp *this)
{
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 64;
  else
    return 64;
}

void mlir::memref::ViewOp::getCanonicalizationPatterns(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;

  v4 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v4 + 8, (uint64_t)"memref.view", 11, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v4 = &off_24C029470;
  if (*(_QWORD *)(v4 + 72))
  {
    v5 = *(unsigned int *)(v4 + 88);
    if (v5 <= *(_DWORD *)(v4 + 92))
      goto LABEL_3;
LABEL_14:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, (void *)(v4 + 96), v5, 16);
    *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 88);
    v7 = (char *)a1[2];
    v6 = a1[3];
    if ((unint64_t)v7 < v6)
      goto LABEL_4;
    goto LABEL_15;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ViewOpShapeFolder]";
  v73 = 90;
  v9 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v9)
    v10 = v9;
  else
    v10 = v73;
  v11 = &v72[v10];
  v12 = v73 - v10;
  if (v73 - v10 >= 0x12)
    v13 = 18;
  else
    v13 = v73 - v10;
  v14 = &v11[v13];
  v15 = v12 - v13;
  if (v15 >= v15 - 1)
    --v15;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v15;
  v5 = *(unsigned int *)(v4 + 88);
  if (v5 > *(_DWORD *)(v4 + 92))
    goto LABEL_14;
LABEL_3:
  *(_DWORD *)(v4 + 88) = v5;
  v7 = (char *)a1[2];
  v6 = a1[3];
  if ((unint64_t)v7 < v6)
  {
LABEL_4:
    *(_QWORD *)v7 = v4;
    v8 = (uint64_t)(v7 + 8);
    goto LABEL_39;
  }
LABEL_15:
  v16 = (char *)a1[1];
  v17 = (v7 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_78;
  v19 = v6 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      goto LABEL_79;
    v21 = (char *)operator new(8 * v20);
    v22 = (uint64_t *)&v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v4;
    v8 = (uint64_t)(v22 + 1);
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
      goto LABEL_24;
  }
  else
  {
    v21 = 0;
    v22 = (uint64_t *)(8 * v17);
    v23 = 0;
    *(_QWORD *)(8 * v17) = v4;
    v8 = 8 * v17 + 8;
    v24 = (char *)(v7 - v16);
    if (v7 != v16)
    {
LABEL_24:
      v25 = (unint64_t)(v24 - 8);
      if (v25 < 0x78
        || &v7[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v22
        && &v21[v7 - v16 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_82;
      }
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v7[-v27];
      v22 = (uint64_t *)((char *)v22 - v27);
      v29 = &v21[8 * v17 - 16];
      v30 = v7 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v30 - 1) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
        *((_OWORD *)v29 - 1) = v33;
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v34 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *--v22 = v34;
        }
        while (v7 != v16);
      }
      v7 = (char *)a1[1];
      v35 = (char *)a1[2];
      a1[1] = v22;
      a1[2] = v8;
      a1[3] = v23;
      while (v35 != v7)
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        v36 = v37;
        *(_QWORD *)v35 = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      }
      goto LABEL_37;
    }
  }
  a1[1] = v22;
  a1[2] = v8;
  a1[3] = v23;
LABEL_37:
  if (v7)
    operator delete(v7);
LABEL_39:
  a1[2] = v8;
  v38 = operator new();
  mlir::PatternBenefit::PatternBenefit(&v72, 1);
  mlir::Pattern::Pattern(v38 + 8, (uint64_t)"memref.view", 11, (__int16)v72, a2, 0, 0);
  *(_QWORD *)v38 = &off_24C02A550;
  if (*(_QWORD *)(v38 + 72))
  {
    v39 = *(unsigned int *)(v38 + 88);
    if (v39 <= *(_DWORD *)(v38 + 92))
      goto LABEL_41;
LABEL_52:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v38 + 80, (void *)(v38 + 96), v39, 16);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v38 + 88);
    v41 = (char *)a1[2];
    v40 = a1[3];
    if ((unint64_t)v41 < v40)
      goto LABEL_42;
    goto LABEL_53;
  }
  v72 = "StringRef llvm::getTypeName() [DesiredTypeName = (anonymous namespace)::ViewOpMemrefCastFolder]";
  v73 = 95;
  v43 = llvm::StringRef::find((uint64_t *)&v72, "DesiredTypeName = ", 0x12uLL, 0);
  if (v73 >= v43)
    v44 = v43;
  else
    v44 = v73;
  v45 = &v72[v44];
  v46 = v73 - v44;
  if (v73 - v44 >= 0x12)
    v47 = 18;
  else
    v47 = v73 - v44;
  v48 = &v45[v47];
  v49 = v46 - v47;
  if (v49 >= v49 - 1)
    --v49;
  *(_QWORD *)(v38 + 64) = v48;
  *(_QWORD *)(v38 + 72) = v49;
  v39 = *(unsigned int *)(v38 + 88);
  if (v39 > *(_DWORD *)(v38 + 92))
    goto LABEL_52;
LABEL_41:
  *(_DWORD *)(v38 + 88) = v39;
  v41 = (char *)a1[2];
  v40 = a1[3];
  if ((unint64_t)v41 < v40)
  {
LABEL_42:
    *(_QWORD *)v41 = v38;
    v42 = (uint64_t)(v41 + 8);
    goto LABEL_77;
  }
LABEL_53:
  v50 = (char *)a1[1];
  v51 = (v41 - v50) >> 3;
  v52 = v51 + 1;
  if ((unint64_t)(v51 + 1) >> 61)
LABEL_78:
    abort();
  v53 = v40 - (_QWORD)v50;
  if (v53 >> 2 > v52)
    v52 = v53 >> 2;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
    v54 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (!v54)
  {
    v55 = 0;
    v56 = (uint64_t *)(8 * v51);
    v57 = 0;
    *(_QWORD *)(8 * v51) = v38;
    v42 = 8 * v51 + 8;
    v58 = (char *)(v41 - v50);
    if (v41 != v50)
      goto LABEL_62;
    goto LABEL_74;
  }
  if (v54 >> 61)
LABEL_79:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v55 = (char *)operator new(8 * v54);
  v56 = (uint64_t *)&v55[8 * v51];
  v57 = &v55[8 * v54];
  *v56 = v38;
  v42 = (uint64_t)(v56 + 1);
  v58 = (char *)(v41 - v50);
  if (v41 != v50)
  {
LABEL_62:
    v59 = (unint64_t)(v58 - 8);
    if (v59 < 0x78
      || &v41[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v56
      && &v55[v41 - v50 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v41)
    {
      goto LABEL_83;
    }
    v60 = (v59 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v62 = &v41[-v61];
    v56 = (uint64_t *)((char *)v56 - v61);
    v63 = &v55[8 * v51 - 16];
    v64 = v41 - 16;
    v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v67 = *((_OWORD *)v64 - 1);
      v66 = *(_OWORD *)v64;
      *((_OWORD *)v64 - 1) = 0uLL;
      *(_OWORD *)v64 = 0uLL;
      *((_OWORD *)v63 - 1) = v67;
      *(_OWORD *)v63 = v66;
      v63 -= 32;
      v64 -= 32;
      v65 -= 4;
    }
    while (v65);
    v41 = v62;
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        v68 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *(_QWORD *)v41 = 0;
        *--v56 = v68;
      }
      while (v41 != v50);
    }
    v41 = (char *)a1[1];
    v69 = (char *)a1[2];
    a1[1] = v56;
    a1[2] = v42;
    a1[3] = v57;
    while (v69 != v41)
    {
      v71 = *((_QWORD *)v69 - 1);
      v69 -= 8;
      v70 = v71;
      *(_QWORD *)v69 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    goto LABEL_75;
  }
LABEL_74:
  a1[1] = v56;
  a1[2] = v42;
  a1[3] = v57;
LABEL_75:
  if (v41)
    operator delete(v41);
LABEL_77:
  a1[2] = v42;
}

uint64_t mlir::memref::AtomicRMWOp::verify(uint64_t **this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t Value;
  uint64_t v6;
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  char *v12;
  const char *v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void ***v33;
  char *v34;
  char *v35;
  __int128 v36;
  unint64_t v37;
  char *v38;
  const char *v39;
  const void ***v40;
  char *v41;
  char *v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  const void **v65[4];
  __int16 v66;
  const void **v67;
  const char *v68;
  uint64_t v69;
  __int16 v70;
  unint64_t v71;
  _BYTE v72[16];
  void *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE v76[96];
  void *v77;
  _QWORD *v78;
  void *__p;
  _QWORD *v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v71 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  v3 = *this;
  v4 = *((unsigned int *)*this + 11);
  if ((v4 & 0x800000) != 0)
  {
    if (v2 == *((_DWORD *)v3 + 17) - 2)
      goto LABEL_3;
LABEL_74:
    v67 = (const void **)"expects the number of subscripts to be equal to memref rank";
    v70 = 259;
    mlir::OpState::emitOpError(this, &v67, (uint64_t)&v71);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
    if (v71)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
    if (v81)
    {
      v50 = __p;
      if (__p)
      {
        v51 = v80;
        v52 = __p;
        if (v80 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v80 = v50;
        operator delete(v52);
      }
      v21 = v77;
      if (!v77)
        goto LABEL_90;
      v53 = v78;
      v23 = v77;
      if (v78 == v77)
        goto LABEL_89;
      do
      {
        v55 = *--v53;
        v54 = v55;
        *v53 = 0;
        if (v55)
          MEMORY[0x20BD002D4](v54, 0x1000C8077774924);
      }
      while (v53 != v21);
      goto LABEL_88;
    }
    return v6;
  }
  if (v2 != 4294967294)
    goto LABEL_74;
LABEL_3:
  v71 = v3[2 * ((v4 >> 23) & 1) + 8];
  Value = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v71);
  v6 = 1;
  if (Value > 0xC)
    return v6;
  if (((1 << Value) & 0x1DB2) != 0)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v66 = 257;
      mlir::OpState::emitOpError(this, v65, (uint64_t)&v71);
      if (v71)
      {
        LODWORD(v67) = 3;
        v68 = "with kind '";
        v69 = 11;
        v7 = &v67;
        v8 = (char *)v73;
        if (v74 >= v75)
        {
          v57 = v74 + 1;
          if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
          {
            v61 = (char *)&v67 - (_BYTE *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            v8 = (char *)v73;
            v7 = (const void ***)((char *)v73 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v57, 24);
            v7 = &v67;
            v8 = (char *)v73;
          }
        }
        v9 = &v8[24 * v74];
        v10 = *(_OWORD *)v7;
        *((_QWORD *)v9 + 2) = v7[2];
        *(_OWORD *)v9 = v10;
        ++v74;
      }
      v67 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
      v11 = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v67);
      v12 = mlir::arith::stringifyAtomicRMWKind(v11);
      if (v71)
      {
        v70 = 261;
        v67 = (const void **)v12;
        v68 = v13;
        mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
        if (v71)
        {
          LODWORD(v67) = 3;
          v68 = "' expects an integer type";
          v69 = 25;
          v14 = &v67;
          v15 = (char *)v73;
          if (v74 >= v75)
          {
            v58 = v74 + 1;
            if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
            {
              v62 = (char *)&v67 - (_BYTE *)v73;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
              v15 = (char *)v73;
              v14 = (const void ***)((char *)v73 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
              v14 = &v67;
              v15 = (char *)v73;
            }
          }
          v16 = &v15[24 * v74];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = v14[2];
          *(_OWORD *)v16 = v17;
          ++v74;
        }
      }
      v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
      if (v71)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
      if (v81)
      {
        v18 = __p;
        if (__p)
        {
          v19 = v80;
          v20 = __p;
          if (v80 != __p)
          {
            do
              v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            v20 = __p;
          }
          v80 = v18;
          operator delete(v20);
        }
        v21 = v77;
        if (!v77)
          goto LABEL_90;
        v22 = v78;
        v23 = v77;
        if (v78 == v77)
        {
LABEL_89:
          v78 = v21;
          operator delete(v23);
LABEL_90:
          if (v73 != v76)
            free(v73);
          return v6;
        }
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
LABEL_88:
        v23 = v77;
        goto LABEL_89;
      }
    }
  }
  else if (((1 << Value) & 0x249) != 0)
  {
    v26 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v26 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v66 = 257;
      mlir::OpState::emitOpError(this, v65, (uint64_t)&v71);
      if (v71)
      {
        LODWORD(v67) = 3;
        v68 = "with kind '";
        v69 = 11;
        v33 = &v67;
        v34 = (char *)v73;
        if (v74 >= v75)
        {
          v59 = v74 + 1;
          if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
          {
            v63 = (char *)&v67 - (_BYTE *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v59, 24);
            v34 = (char *)v73;
            v33 = (const void ***)((char *)v73 + v63);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v59, 24);
            v33 = &v67;
            v34 = (char *)v73;
          }
        }
        v35 = &v34[24 * v74];
        v36 = *(_OWORD *)v33;
        *((_QWORD *)v35 + 2) = v33[2];
        *(_OWORD *)v35 = v36;
        ++v74;
      }
      v67 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
      v37 = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v67);
      v38 = mlir::arith::stringifyAtomicRMWKind(v37);
      if (v71)
      {
        v70 = 261;
        v67 = (const void **)v38;
        v68 = v39;
        mlir::Diagnostic::operator<<((uint64_t)v72, &v67);
        if (v71)
        {
          LODWORD(v67) = 3;
          v68 = "' expects a floating-point type";
          v69 = 31;
          v40 = &v67;
          v41 = (char *)v73;
          if (v74 >= v75)
          {
            v60 = v74 + 1;
            if (v73 <= &v67 && (char *)v73 + 24 * v74 > (char *)&v67)
            {
              v64 = (char *)&v67 - (_BYTE *)v73;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v60, 24);
              v41 = (char *)v73;
              v40 = (const void ***)((char *)v73 + v64);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v60, 24);
              v40 = &v67;
              v41 = (char *)v73;
            }
          }
          v42 = &v41[24 * v74];
          v43 = *(_OWORD *)v40;
          *((_QWORD *)v42 + 2) = v40[2];
          *(_OWORD *)v42 = v43;
          ++v74;
        }
      }
      v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v71);
      if (v71)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v71);
      if (v81)
      {
        v44 = __p;
        if (__p)
        {
          v45 = v80;
          v46 = __p;
          if (v80 != __p)
          {
            do
              v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
            while (v45 != v44);
            v46 = __p;
          }
          v80 = v44;
          operator delete(v46);
        }
        v21 = v77;
        if (!v77)
          goto LABEL_90;
        v47 = v78;
        v23 = v77;
        if (v78 == v77)
          goto LABEL_89;
        do
        {
          v49 = *--v47;
          v48 = v49;
          *v47 = 0;
          if (v49)
            MEMORY[0x20BD002D4](v48, 0x1000C8077774924);
        }
        while (v47 != v21);
        goto LABEL_88;
      }
    }
  }
  return v6;
}

uint64_t mlir::memref::AtomicRMWOp::fold(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t DefiningOp;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(unsigned int *)(*(_QWORD *)a1 + 68);
  if (!(_DWORD)v1)
    return 0;
  v3 = 0;
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 72);
  v5 = v4[3];
  v6 = &v4[4 * v1];
  do
  {
    while (1)
    {
      v13 = v4[3];
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (!DefiningOp)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
        break;
      if (v4[3] == v5)
        break;
      v8 = *(uint64_t **)(*(_QWORD *)(DefiningOp + 72) + 24);
      if (*(_UNKNOWN **)(*(_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
        break;
      v9 = (uint64_t *)v4[1];
      if (v9)
      {
        *v9 = *v4;
        if (*v4)
          *(_QWORD *)(*v4 + 8) = v4[1];
      }
      v4[3] = (uint64_t)v8;
      v10 = *v8;
      *v4 = *v8;
      v4[1] = (uint64_t)v8;
      if (v10)
        *(_QWORD *)(v10 + 8) = v4;
      *v8 = (uint64_t)v4;
      v4 += 4;
      v3 = 1;
      if (v4 == v6)
        goto LABEL_16;
    }
    v4 += 4;
  }
  while (v4 != v6);
  if ((v3 & 1) == 0)
    return 0;
LABEL_16:
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v11 = *(_QWORD *)a1 - 16;
  else
    v11 = 0;
  return mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) | 4;
}

uint64_t mlir::memref::AssumeAlignmentOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v26 = &v56;
      v27 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v27 = (char *)v60;
          v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v26 = &v56;
          v27 = (char *)v60;
        }
      }
      v28 = &v27[24 * v61];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v33 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "alignment", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for alignment in DictionaryAttr to set Properties.";
      v58 = 69;
      v36 = &v56;
      v37 = (char *)v60;
      if (v61 >= v62)
      {
        v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v37 = (char *)v60;
          v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v36 = &v56;
          v37 = (char *)v60;
        }
      }
      v38 = &v37[24 * v61];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v40 = __p;
    if (__p)
    {
      v41 = v67;
      v42 = __p;
      if (v67 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v67 = v40;
      operator delete(v42);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v43 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v45 = *--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 54;
    v10 = &v56;
    v11 = (char *)v60;
    if (v61 >= v62)
    {
      v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v11 = (char *)v60;
        v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v10 = &v56;
        v11 = (char *)v60;
      }
    }
    v12 = &v11[24 * v61];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v61;
    if (v59[0])
    {
      v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v15 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v15 = (char *)v60;
          v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v14 = &v56;
          v15 = (char *)v60;
        }
      }
      v16 = &v15[24 * v61];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v67;
      v20 = __p;
      if (v67 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v67 = v18;
      operator delete(v20);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v22 = v65;
    v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v25 = *--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
    }
    while (v22 != v21);
LABEL_57:
    v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::memref::AssumeAlignmentOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"alignment", 9, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::AssumeAlignmentOp::getInherentAttr(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;

  if (a4 == 9 && (*(_QWORD *)a3 == 0x6E656D6E67696C61 ? (v4 = *(_BYTE *)(a3 + 8) == 116) : (v4 = 0), v4))
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  else
    return 0;
}

_QWORD *mlir::memref::AssumeAlignmentOp::setInherentAttr(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (a3 == 9 && *(_QWORD *)a2 == 0x6E656D6E67696C61 && *(_BYTE *)(a2 + 8) == 116)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v5 = a4;
      else
        v5 = 0;
      *result = v5;
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

void mlir::memref::AssumeAlignmentOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"alignment", 9, *a2);
}

BOOL mlir::memref::AssumeAlignmentOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(unint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(v6, (const void **)"alignment", (const char *)9, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(uint64_t a1, const void **a2, const char *a3, void (*a4)(unint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  const void ***p_Value;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void **Value;
  const char *v39;
  uint64_t v40;
  __int16 v41;
  unint64_t v42;
  unsigned int v43[4];
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48;
  _QWORD *v49;
  void *__p;
  _QWORD *v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    goto LABEL_11;
  v37 = a1;
  Value = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32))
    goto LABEL_11;
  v36 = a1;
  mlir::IntegerAttr::getValue(&v36, (llvm::APInt *)&v42);
  v10 = v43[0];
  v11 = v43[0] - 1;
  if (v43[0] < 0x41)
  {
    if (((v42 >> v11) & 1) != 0 || !v42)
      goto LABEL_11;
    return 1;
  }
  v12 = v42;
  if (((*(_QWORD *)(v42 + 8 * (v11 >> 6)) >> v11) & 1) != 0)
  {
    MEMORY[0x20BD002D4](v42, 0x1000C8000313F17);
  }
  else
  {
    v13 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v42);
    MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
    if (v13 != v10)
      return 1;
  }
LABEL_11:
  a4(&v42, a5);
  if (v42)
  {
    LODWORD(Value) = 3;
    v39 = "attribute '";
    v40 = 11;
    p_Value = &Value;
    v15 = (char *)v44;
    if (v45 >= v46)
    {
      v32 = v45 + 1;
      if (v44 <= &Value && (char *)v44 + 24 * v45 > (char *)&Value)
      {
        v34 = (char *)&Value - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
        v15 = (char *)v44;
        p_Value = (const void ***)((char *)v44 + v34);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
        p_Value = &Value;
        v15 = (char *)v44;
      }
    }
    v16 = &v15[24 * v45];
    v17 = *(_OWORD *)p_Value;
    *((_QWORD *)v16 + 2) = p_Value[2];
    *(_OWORD *)v16 = v17;
    ++v45;
    if (v42)
    {
      v41 = 261;
      Value = a2;
      v39 = a3;
      mlir::Diagnostic::operator<<((uint64_t)v43, &Value);
      if (v42)
      {
        LODWORD(Value) = 3;
        v39 = "' failed to satisfy constraint: 32-bit signless integer attribute whose value is positive";
        v40 = 89;
        v18 = &Value;
        v19 = (char *)v44;
        if (v45 >= v46)
        {
          v33 = v45 + 1;
          if (v44 <= &Value && (char *)v44 + 24 * v45 > (char *)&Value)
          {
            v35 = (char *)&Value - (_BYTE *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            v19 = (char *)v44;
            v18 = (const void ***)((char *)v44 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            v18 = &Value;
            v19 = (char *)v44;
          }
        }
        v20 = &v19[24 * v45];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v45;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v42);
  if (v42)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  if (v52)
  {
    v23 = __p;
    if (__p)
    {
      v24 = v51;
      v25 = __p;
      if (v51 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v51 = v23;
      operator delete(v25);
    }
    v26 = v48;
    if (v48)
    {
      v27 = v49;
      v28 = v48;
      if (v49 != v48)
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48;
      }
      v49 = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
  return v22;
}

BOOL mlir::memref::AssumeAlignmentOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties]";
        v15 = 119;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[287];
    return a1[32];
  }
  return result;
}

BOOL mlir::memref::AssumeAlignmentOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const void **v14;
  __int16 v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  _QWORD *v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v16[0] = v2;
    return mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(v3, (const void **)"alignment", (const char *)9, (void (*)(unint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v16)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
  }
  else
  {
    v14 = (const void **)"requires attribute 'alignment'";
    v15 = 259;
    mlir::OpState::emitOpError(this, &v14, (uint64_t)v16);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
    if (v16[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
    if (v23)
    {
      v5 = __p;
      if (__p)
      {
        v6 = v22;
        v7 = __p;
        if (v22 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v22 = v5;
        operator delete(v7);
      }
      v8 = v19;
      if (v19)
      {
        v9 = v20;
        v10 = v19;
        if (v20 != v19)
        {
          do
          {
            v12 = *--v9;
            v11 = v12;
            *v9 = 0;
            if (v12)
              MEMORY[0x20BD002D4](v11, 0x1000C8077774924);
          }
          while (v9 != v8);
          v10 = v19;
        }
        v20 = v8;
        operator delete(v10);
      }
      if (v17 != &v18)
        free(v17);
    }
  }
  return v4;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v6;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  const void **v46[4];
  __int16 v47;
  int v48;
  const char *v49;
  uint64_t v50;
  _QWORD v51[3];
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[96];
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD *v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v51[0] = a2;
    v51[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v51);
    return 1;
  }
  else
  {
    v47 = 261;
    v46[0] = a3;
    v46[1] = a4;
    mlir::Operation::emitOpError(a1, v46, (uint64_t)v51);
    if (v51[0])
    {
      v48 = 3;
      v49 = " #";
      v50 = 2;
      v8 = &v48;
      v9 = (char *)v52;
      if (v53 >= v54)
      {
        v36 = v53 + 1;
        if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
        {
          v42 = (char *)&v48 - (_BYTE *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v9 = (char *)v52;
          v8 = (int *)((char *)v52 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v36, 24);
          v8 = &v48;
          v9 = (char *)v52;
        }
      }
      v10 = &v9[24 * v53];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v12 = ++v53;
      if (v51[0])
      {
        v48 = 5;
        v49 = (const char *)a5;
        v13 = &v48;
        v14 = (char *)v52;
        if (v12 >= v54)
        {
          v37 = v12 + 1;
          v38 = (char *)v52 + 24 * v12 > (char *)&v48;
          if (v52 <= &v48 && v38)
          {
            v43 = (char *)&v48 - (_BYTE *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            v14 = (char *)v52;
            v13 = (int *)((char *)v52 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
            v13 = &v48;
            v14 = (char *)v52;
          }
        }
        v15 = &v14[24 * v53];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v15 = v16;
        v17 = ++v53;
        if (v51[0])
        {
          v48 = 3;
          v49 = " must be memref of any type values, but got ";
          v50 = 44;
          v18 = &v48;
          v19 = (char *)v52;
          if (v17 >= v54)
          {
            v39 = v17 + 1;
            v40 = (char *)v52 + 24 * v17 > (char *)&v48;
            if (v52 <= &v48 && v40)
            {
              v44 = (char *)&v48 - (_BYTE *)v52;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              v19 = (char *)v52;
              v18 = (int *)((char *)v52 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v39, 24);
              v18 = &v48;
              v19 = (char *)v52;
            }
          }
          v20 = &v19[24 * v53];
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v20 = v21;
          ++v53;
          if (v51[0])
          {
            v22 = &v48;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v48, a2);
            v23 = (char *)v52;
            if (v53 >= v54)
            {
              v41 = v53 + 1;
              if (v52 <= &v48 && (char *)v52 + 24 * v53 > (char *)&v48)
              {
                v45 = (char *)&v48 - (_BYTE *)v52;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                v23 = (char *)v52;
                v22 = (int *)((char *)v52 + v45);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v41, 24);
                v22 = &v48;
                v23 = (char *)v52;
              }
            }
            v24 = &v23[24 * v53];
            v25 = *(_OWORD *)v22;
            *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
            *(_OWORD *)v24 = v25;
            ++v53;
          }
        }
      }
    }
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (v60)
    {
      v27 = __p;
      if (__p)
      {
        v28 = v59;
        v29 = __p;
        if (v59 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v59 = v27;
        operator delete(v29);
      }
      v30 = v56;
      if (v56)
      {
        v31 = v57;
        v32 = v56;
        if (v57 != v56)
        {
          do
          {
            v34 = *--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
          }
          while (v31 != v30);
          v32 = v56;
        }
        v57 = v30;
        operator delete(v32);
      }
      if (v52 != v55)
        free(v52);
    }
  }
  return v26;
}

BOOL mlir::memref::AssumeAlignmentOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  mlir::Builder *v5;
  uint64_t IntegerType;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IntegerType = mlir::Builder::getIntegerType(v5, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v14, IntegerType))
    return 0;
  if (v14)
  {
    v7 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(a2);
    *v7 = v14;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v8 = a2[1];
  v11[0] = a1;
  v11[1] = &v12;
  v11[2] = a2;
  v9 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v8 + 96));
  if (v9)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(v9, (const void **)"alignment", (const char *)9, (void (*)(unint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AssumeAlignmentOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v11))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v11[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, v11))
    return 0;
  v16 = v11[0];
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, (uint64_t)(a2 + 2)) != 0;
}

void mlir::memref::AssumeAlignmentOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  unint64_t AttrDictionary;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *v7 = 44;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  v21 = v23;
  v23[0] = "alignment";
  v23[1] = 9;
  v22 = 0x200000001;
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, v21, v22);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v21 != v23)
    free(v21);
}

uint64_t mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::AtomicRMWOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.atomic_rmw", 17, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::AtomicRMWOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v11 = &v56;
      v12 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v12 = (char *)v60;
          v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v11 = &v56;
          v12 = (char *)v60;
        }
      }
      v13 = &v12[24 * v61];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v15 = __p;
    if (__p)
    {
      v16 = v67;
      v17 = __p;
      if (v67 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v67 = v15;
      operator delete(v17);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v19 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v22 = *--v19;
      v21 = v22;
      *v19 = 0;
      if (v22)
        MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "kind", 4uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for kind in DictionaryAttr to set Properties.";
      v58 = 64;
      v23 = &v56;
      v24 = (char *)v60;
      if (v61 >= v62)
      {
        v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v52 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v24 = (char *)v60;
          v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          v23 = &v56;
          v24 = (char *)v60;
        }
      }
      v25 = &v24[24 * v61];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v27 = __p;
    if (__p)
    {
      v28 = v67;
      v29 = __p;
      if (v67 != __p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p;
      }
      v67 = v27;
      operator delete(v29);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v30 = v65;
    v20 = v64;
    if (v65 == v64)
      goto LABEL_59;
    do
    {
      v32 = *--v30;
      v31 = v32;
      *v30 = 0;
      if (v32)
        MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  v9 = v8;
  if ((mlir::arith::AtomicRMWKindAttr::classof(v8) & 1) != 0)
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 49;
    v33 = &v56;
    v34 = (char *)v60;
    if (v61 >= v62)
    {
      v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v53 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v34 = (char *)v60;
        v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        v33 = &v56;
        v34 = (char *)v60;
      }
    }
    v35 = &v34[24 * v61];
    v36 = *(_OWORD *)v33;
    *((_QWORD *)v35 + 2) = *((_QWORD *)v33 + 2);
    *(_OWORD *)v35 = v36;
    ++v61;
    if (v59[0])
    {
      v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v38 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v38 = (char *)v60;
          v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v37 = &v56;
          v38 = (char *)v60;
        }
      }
      v39 = &v38[24 * v61];
      v40 = *(_OWORD *)v37;
      *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
      *(_OWORD *)v39 = v40;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v41 = __p;
    if (__p)
    {
      v42 = v67;
      v43 = __p;
      if (v67 != __p)
      {
        do
          v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        v43 = __p;
      }
      v67 = v41;
      operator delete(v43);
    }
    v18 = v64;
    if (!v64)
      goto LABEL_60;
    v44 = v65;
    v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v46 = *--v44;
      v45 = v46;
      *v44 = 0;
      if (v46)
        MEMORY[0x20BD002D4](v45, 0x1000C8077774924);
    }
    while (v44 != v18);
LABEL_58:
    v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::memref::AtomicRMWOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"kind", 4, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::AtomicRMWOp::getInherentAttr(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1684957547)
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  else
    return 0;
}

uint64_t mlir::memref::AtomicRMWOp::setInherentAttr(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;

  if (a3 == 4 && *a2 == 1684957547)
  {
    v5 = (_QWORD *)result;
    if (a4)
    {
      result = mlir::arith::AtomicRMWKindAttr::classof(a4);
      if ((_DWORD)result)
        v6 = a4;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    *v5 = v6;
  }
  return result;
}

void mlir::memref::AtomicRMWOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"kind", 4, *a2);
}

BOOL mlir::memref::AtomicRMWOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(v6, (const void **)"kind", (const char *)4, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (mlir::arith::AtomicRMWKindAttr::classof(a1) & 1) != 0)
    return 1;
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v11 = &v31;
    v12 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v12 = (char *)v37;
        v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = &v31;
        v12 = (char *)v37;
      }
    }
    v13 = &v12[24 * v38];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14";
        v33 = 119;
        v15 = &v31;
        v16 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v16 = (char *)v37;
            v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = &v31;
            v16 = (char *)v37;
          }
        }
        v17 = &v16[24 * v38];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v44;
      v21 = __p;
      if (v44 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v44 = v19;
      operator delete(v21);
    }
    v22 = v41;
    if (v41)
    {
      v23 = v42;
      v24 = v41;
      if (v42 != v41)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v41;
      }
      v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

BOOL mlir::memref::AtomicRMWOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::AtomicRMWKindAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties]";
        v15 = 113;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[289];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::AtomicRMWKindAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::arith::AtomicRMWKindAttr::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::AtomicRMWKindAttr]";
  v41 = 80;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = __p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::memref::AtomicRMWOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const void **v35[4];
  __int16 v36;
  _QWORD v37[3];
  void *v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  void *__p;
  _QWORD *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v37[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(v3, (const void **)"kind", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v37)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -2;
      v7 = 64;
LABEL_8:
      v8 = 0;
      v9 = v7 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2))
      {
        ++v8;
        v9 += 32;
        if (v6 == v8)
        {
          v4 = *this;
          goto LABEL_12;
        }
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 2;
    if (v5 != 2)
    {
      v7 = v4[9] + 64;
      goto LABEL_8;
    }
LABEL_12:
    v10 = *((_DWORD *)v4 + 9);
    v11 = v4 - 2;
    v12 = v10 ? (uint64_t)v11 : 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
    if (*((_DWORD *)*this + 9))
      v15 = (uint64_t)(*this - 2);
    else
      v15 = 0;
    v14 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v14 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v16 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      v17 = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0);
      v18 = (*this)[9];
      if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(*(_QWORD *)(v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v37[0] = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v37) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
          return 1;
        v35[0] = (const void **)"failed to verify that value type matches element type of memref";
        v36 = 259;
        mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
        v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v37);
        return v19;
      }
    }
    v35[0] = (const void **)"failed to verify that all of {value, result} have same type";
    v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v20 = __p;
      if (__p)
      {
        v21 = v43;
        v22 = __p;
        if (v43 != __p)
        {
          do
            v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          v22 = __p;
        }
        v43 = v20;
        operator delete(v22);
      }
      v23 = v40;
      if (!v40)
        goto LABEL_55;
      v24 = v41;
      v25 = v40;
      if (v41 == v40)
      {
LABEL_54:
        v41 = v23;
        operator delete(v25);
LABEL_55:
        if (v38 != &v39)
          free(v38);
        return v19;
      }
      do
      {
        v27 = *--v24;
        v26 = v27;
        *v24 = 0;
        if (v27)
          MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
      }
      while (v24 != v23);
LABEL_53:
      v25 = v40;
      goto LABEL_54;
    }
  }
  else
  {
    v35[0] = (const void **)"requires attribute 'kind'";
    v36 = 259;
    mlir::OpState::emitOpError(this, v35, (uint64_t)v37);
    v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
    if (v37[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    if (v44)
    {
      v28 = __p;
      if (__p)
      {
        v29 = v43;
        v30 = __p;
        if (v43 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v43 = v28;
        operator delete(v30);
      }
      v23 = v40;
      if (!v40)
        goto LABEL_55;
      v31 = v41;
      v25 = v40;
      if (v41 == v40)
        goto LABEL_54;
      do
      {
        v33 = *--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
      }
      while (v31 != v23);
      goto LABEL_53;
    }
  }
  return v19;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  void *v9;
  uint64_t v16;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  const void **v54[4];
  __int16 v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  _QWORD v60[3];
  void *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[96];
  void *v65;
  _QWORD *v66;
  void *__p;
  _QWORD *v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v56 = a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v56))
    return 1;
  v9 = *(void **)(*(_QWORD *)v56 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  if (v9 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v9 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  v55 = 261;
  v54[0] = a3;
  v54[1] = a4;
  mlir::Operation::emitOpError(a1, v54, (uint64_t)v60);
  if (v60[0])
  {
    v57 = 3;
    v58 = " #";
    v59 = 2;
    v18 = &v57;
    v19 = (char *)v61;
    if (v62 >= v63)
    {
      v44 = v62 + 1;
      if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
      {
        v50 = (char *)&v57 - (_BYTE *)v61;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
        v19 = (char *)v61;
        v18 = (int *)((char *)v61 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
        v18 = &v57;
        v19 = (char *)v61;
      }
    }
    v20 = &v19[24 * v62];
    v21 = *(_OWORD *)v18;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
    *(_OWORD *)v20 = v21;
    v22 = ++v62;
    if (v60[0])
    {
      v57 = 5;
      v58 = (const char *)a5;
      v23 = &v57;
      v24 = (char *)v61;
      if (v22 >= v63)
      {
        v45 = v22 + 1;
        v46 = (char *)v61 + 24 * v22 > (char *)&v57;
        if (v61 <= &v57 && v46)
        {
          v51 = (char *)&v57 - (_BYTE *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
          v24 = (char *)v61;
          v23 = (int *)((char *)v61 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
          v23 = &v57;
          v24 = (char *)v61;
        }
      }
      v25 = &v24[24 * v62];
      v26 = *(_OWORD *)v23;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      v27 = ++v62;
      if (v60[0])
      {
        v57 = 3;
        v58 = " must be signless integer or floating-point, but got ";
        v59 = 53;
        v28 = &v57;
        v29 = (char *)v61;
        if (v27 >= v63)
        {
          v47 = v27 + 1;
          v48 = (char *)v61 + 24 * v27 > (char *)&v57;
          if (v61 <= &v57 && v48)
          {
            v52 = (char *)&v57 - (_BYTE *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            v29 = (char *)v61;
            v28 = (int *)((char *)v61 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            v28 = &v57;
            v29 = (char *)v61;
          }
        }
        v30 = &v29[24 * v62];
        v31 = *(_OWORD *)v28;
        *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v30 = v31;
        ++v62;
        if (v60[0])
        {
          v32 = &v57;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, v56);
          v33 = (char *)v61;
          if (v62 >= v63)
          {
            v49 = v62 + 1;
            if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
            {
              v53 = (char *)&v57 - (_BYTE *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
              v33 = (char *)v61;
              v32 = (int *)((char *)v61 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
              v32 = &v57;
              v33 = (char *)v61;
            }
          }
          v34 = &v33[24 * v62];
          v35 = *(_OWORD *)v32;
          *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
          *(_OWORD *)v34 = v35;
          ++v62;
        }
      }
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
  if (v60[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
  if (v69)
  {
    v36 = __p;
    if (__p)
    {
      v37 = v68;
      v38 = __p;
      if (v68 != __p)
      {
        do
          v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        v38 = __p;
      }
      v68 = v36;
      operator delete(v38);
    }
    v39 = v65;
    if (v65)
    {
      v40 = v66;
      v41 = v65;
      if (v66 != v65)
      {
        do
        {
          v43 = *--v40;
          v42 = v43;
          *v40 = 0;
          if (v43)
            MEMORY[0x20BD002D4](v42, 0x1000C8077774924);
        }
        while (v40 != v39);
        v41 = v65;
      }
      v66 = v39;
      operator delete(v41);
    }
    if (v61 != v64)
      free(v61);
  }
  return v16;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps2(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  const void **v60[4];
  __int16 v61;
  int v62;
  const char *v63;
  uint64_t v64;
  _QWORD v65[3];
  void *v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE v69[96];
  void *v70;
  _QWORD *v71;
  void *__p;
  _QWORD *v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_2;
  v65[0] = a2;
  v65[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v10 + 8);
  v60[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
  if (mlir::Type::isSignlessInteger((mlir::Type *)v60))
    return 1;
  v38 = (void *)*((_QWORD *)*v60[0] + 17);
  v39 = v38 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  v40 = v39 || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  v41 = v40 || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  v42 = v41 || v38 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  v43 = v42 || v38 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  v44 = v43 || v38 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  v45 = v44 || v38 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  v46 = v45 || v38 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  if (v46 || v38 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    return 1;
  if (v38 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v38 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
LABEL_2:
  v61 = 261;
  v60[0] = a3;
  v60[1] = a4;
  mlir::Operation::emitOpError(a1, v60, (uint64_t)v65);
  if (v65[0])
  {
    v62 = 3;
    v63 = " #";
    v64 = 2;
    v11 = &v62;
    v12 = (char *)v66;
    if (v67 >= v68)
    {
      v50 = v67 + 1;
      if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
      {
        v56 = (char *)&v62 - (_BYTE *)v66;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v50, 24);
        v12 = (char *)v66;
        v11 = (int *)((char *)v66 + v56);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v50, 24);
        v11 = &v62;
        v12 = (char *)v66;
      }
    }
    v13 = &v12[24 * v67];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
    *(_OWORD *)v13 = v14;
    v15 = ++v67;
    if (v65[0])
    {
      v62 = 5;
      v63 = (const char *)a5;
      v16 = &v62;
      v17 = (char *)v66;
      if (v15 >= v68)
      {
        v51 = v15 + 1;
        v52 = (char *)v66 + 24 * v15 > (char *)&v62;
        if (v66 <= &v62 && v52)
        {
          v57 = (char *)&v62 - (_BYTE *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v51, 24);
          v17 = (char *)v66;
          v16 = (int *)((char *)v66 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v51, 24);
          v16 = &v62;
          v17 = (char *)v66;
        }
      }
      v18 = &v17[24 * v67];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v67;
      if (v65[0])
      {
        v62 = 3;
        v63 = " must be memref of signless integer or floating-point values, but got ";
        v64 = 70;
        v21 = &v62;
        v22 = (char *)v66;
        if (v20 >= v68)
        {
          v53 = v20 + 1;
          v54 = (char *)v66 + 24 * v20 > (char *)&v62;
          if (v66 <= &v62 && v54)
          {
            v58 = (char *)&v62 - (_BYTE *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
            v22 = (char *)v66;
            v21 = (int *)((char *)v66 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v53, 24);
            v21 = &v62;
            v22 = (char *)v66;
          }
        }
        v23 = &v22[24 * v67];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        ++v67;
        if (v65[0])
        {
          v25 = &v62;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v62, a2);
          v26 = (char *)v66;
          if (v67 >= v68)
          {
            v55 = v67 + 1;
            if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
            {
              v59 = (char *)&v62 - (_BYTE *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
              v26 = (char *)v66;
              v25 = (int *)((char *)v66 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
              v25 = &v62;
              v26 = (char *)v66;
            }
          }
          v27 = &v26[24 * v67];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v27 = v28;
          ++v67;
        }
      }
    }
  }
  v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
  if (v65[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
  if (v74)
  {
    v30 = __p;
    if (__p)
    {
      v31 = v73;
      v32 = __p;
      if (v73 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v73 = v30;
      operator delete(v32);
    }
    v33 = v70;
    if (v70)
    {
      v34 = v71;
      v35 = v70;
      if (v71 != v70)
      {
        do
        {
          v37 = *--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
        }
        while (v34 != v33);
        v35 = v70;
      }
      v71 = v33;
      operator delete(v35);
    }
    if (v66 != v69)
      free(v66);
  }
  return v29;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  const void **v45[4];
  __int16 v46;
  int v47;
  const char *v48;
  uint64_t v49;
  _QWORD v50[3];
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55;
  _QWORD *v56;
  void *__p;
  _QWORD *v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    return 1;
  v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    v47 = 3;
    v48 = " #";
    v49 = 2;
    v7 = &v47;
    v8 = (char *)v51;
    if (v52 >= v53)
    {
      v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        v41 = (char *)&v47 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v8 = (char *)v51;
        v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v7 = &v47;
        v8 = (char *)v51;
      }
    }
    v9 = &v8[24 * v52];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    v11 = ++v52;
    if (v50[0])
    {
      v47 = 5;
      v48 = (const char *)a5;
      v12 = &v47;
      v13 = (char *)v51;
      if (v11 >= v53)
      {
        v36 = v11 + 1;
        v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          v42 = (char *)&v47 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v13 = (char *)v51;
          v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v12 = &v47;
          v13 = (char *)v51;
        }
      }
      v14 = &v13[24 * v52];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v52;
      if (v50[0])
      {
        v47 = 3;
        v48 = " must be variadic of index, but got ";
        v49 = 36;
        v17 = &v47;
        v18 = (char *)v51;
        if (v16 >= v53)
        {
          v38 = v16 + 1;
          v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            v43 = (char *)&v47 - (_BYTE *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v18 = (char *)v51;
            v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v17 = &v47;
            v18 = (char *)v51;
          }
        }
        v19 = &v18[24 * v52];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        ++v52;
        if (v50[0])
        {
          v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          v22 = (char *)v51;
          if (v52 >= v53)
          {
            v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              v44 = (char *)&v47 - (_BYTE *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v22 = (char *)v51;
              v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v21 = &v47;
              v22 = (char *)v51;
            }
          }
          v23 = &v22[24 * v52];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          ++v52;
        }
      }
    }
  }
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  if (v59)
  {
    v26 = __p;
    if (__p)
    {
      v27 = v58;
      v28 = __p;
      if (v58 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v58 = v26;
      operator delete(v28);
    }
    v29 = v55;
    if (v55)
    {
      v30 = v56;
      v31 = v55;
      if (v56 != v55)
      {
        do
        {
          v33 = *--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v30 != v29);
        v31 = v55;
      }
      v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54)
      free(v51);
  }
  return v25;
}

uint64_t mlir::memref::AtomicRMWOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mlir::IndexType **v10;
  mlir::MLIRContext *v11;
  uint64_t IndexType;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  mlir::NoneType **v17;
  mlir::MLIRContext *v18;
  uint64_t NoneType;
  unsigned __int16 v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  const void ***v34;
  char *v35;
  char *v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v46;
  int64_t v47;
  uint64_t v48[4];
  __int16 v49;
  const void **AttrData;
  const char *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  uint64_t v54[2];
  uint64_t v55[2];
  const void **v56;
  const char *v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  void *v61[2];
  _OWORD v62[6];
  void *v63[2];
  __int128 v64;
  void *__p[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  void *v70[2];
  _QWORD v71[9];
  uint64_t __src;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[128];
  _QWORD v78[4];
  _QWORD v79[5];

  v79[4] = *MEMORY[0x24BDAC8D0];
  memset(v79, 0, 24);
  v55[0] = (uint64_t)v79;
  v55[1] = 1;
  memset(v78, 0, 24);
  v54[0] = (uint64_t)v78;
  v54[1] = 1;
  v75 = v77;
  v76 = 0x400000000;
  v73 = 0;
  v74 = 0;
  v53[0] = &v74;
  v53[1] = 1;
  v52[0] = &v73;
  v52[1] = 1;
  AttrData = 0;
  v51 = 0;
  v70[0] = v71;
  v70[1] = (void *)0x400000000;
  v71[8] = 4;
  __src = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v67 = xmmword_24C061010;
  v68 = *(_OWORD *)&off_24C061020;
  v69 = xmmword_24C061030;
  *(_OWORD *)v63 = xmmword_24C060FD0;
  v64 = *(_OWORD *)&off_24C060FE0;
  *(_OWORD *)__p = xmmword_24C060FF0;
  v66 = *(_OWORD *)&off_24C061000;
  v62[2] = xmmword_24C060F90;
  v62[3] = *(_OWORD *)&off_24C060FA0;
  v62[4] = xmmword_24C060FB0;
  v62[5] = *(_OWORD *)&off_24C060FC0;
  v60 = xmmword_24C060F50;
  *(_OWORD *)v61 = *(_OWORD *)&off_24C060F60;
  v62[0] = xmmword_24C060F70;
  v62[1] = *(_OWORD *)&off_24C060F80;
  if ((*(unsigned __int8 (**)(uint64_t, const void ***, __int128 *, uint64_t))(*(_QWORD *)a1 + 392))(a1, &AttrData, &v60, 15))
  {
    v5 = (uint64_t)v51;
    if (!v51)
      goto LABEL_3;
  }
  else
  {
    v48[0] = 0;
    v17 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    NoneType = mlir::Builder::getNoneType(v17, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 440))(a1, v48, NoneType);
    if (v20 >= 0x100u && (_BYTE)v20)
    {
      mlir::NamedAttrList::append((uint64_t)v70, (uint64_t)"kind", 4, v48[0]);
    }
    else
    {
      if (v20 < 0x100u)
      {
        v56 = (const void **)"expected string or keyword containing one of the following enum values for attribute 'kind'"
                             " [addf, addi, assign, maximumf, maxs, maxu, minimumf, mins, minu, mulf, muli, ori, andi, maxnumf, minnumf]";
        v59 = 259;
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, const void ***))(*(_QWORD *)a1 + 24))(&v60, a1, v4, &v56);
        v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v60);
        if ((_QWORD)v60)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
        if (BYTE8(v66))
        {
          v21 = __p[0];
          if (__p[0])
          {
            v22 = __p[1];
            v23 = __p[0];
            if (__p[1] != __p[0])
            {
              do
                v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
              while (v22 != v21);
              v23 = __p[0];
            }
            __p[1] = v21;
            operator delete(v23);
          }
          v24 = v63[1];
          if (!v63[1])
            goto LABEL_73;
          v25 = (_QWORD *)v64;
          v26 = v63[1];
          if ((void *)v64 == v63[1])
            goto LABEL_72;
          do
          {
            v28 = *--v25;
            v27 = v28;
            *v25 = 0;
            if (v28)
              MEMORY[0x20BD002D4](v27, 0x1000C8077774924);
          }
          while (v25 != v24);
          goto LABEL_71;
        }
LABEL_75:
        v44 = v70[0];
        if (v70[0] == v71)
          goto LABEL_77;
        goto LABEL_76;
      }
      if (!(_BYTE)v20)
      {
        v16 = 0;
        v44 = v70[0];
        if (v70[0] == v71)
          goto LABEL_77;
LABEL_76:
        free(v44);
        goto LABEL_77;
      }
    }
    AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v48);
    v51 = (const char *)v5;
    if (!v5)
    {
LABEL_3:
      v6 = v70[0];
      if (v70[0] == v71)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v29 = mlir::arith::symbolizeAtomicRMWKind((uint64_t)AttrData, v5);
  if (!v30)
  {
    v48[0] = (uint64_t)"invalid ";
    v49 = 259;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(&v60, a1, v4, v48);
    if ((_QWORD)v60)
    {
      LODWORD(v56) = 3;
      v57 = "kind attribute specification: \"";
      v58 = 31;
      v34 = &v56;
      v35 = (char *)v61[1];
      if (LODWORD(v62[0]) >= DWORD1(v62[0]))
      {
        v46 = LODWORD(v62[0]) + 1;
        if (v61[1] <= &v56 && (char *)v61[1] + 24 * LODWORD(v62[0]) > (char *)&v56)
        {
          v47 = (char *)&v56 - (char *)v61[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61[1], (char *)v62 + 8, v46, 24);
          v35 = (char *)v61[1];
          v34 = (const void ***)((char *)v61[1] + v47);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61[1], (char *)v62 + 8, v46, 24);
          v34 = &v56;
          v35 = (char *)v61[1];
        }
      }
      v36 = &v35[24 * LODWORD(v62[0])];
      v37 = *(_OWORD *)v34;
      *((_QWORD *)v36 + 2) = v34[2];
      *(_OWORD *)v36 = v37;
      ++LODWORD(v62[0]);
      if ((_QWORD)v60)
      {
        v59 = 261;
        v56 = AttrData;
        v57 = v51;
        mlir::Diagnostic::operator<<((uint64_t)&v60 + 8, &v56);
        if ((_QWORD)v60)
          mlir::Diagnostic::operator<<((uint64_t)&v60 + 8, 34);
      }
    }
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v60);
    if ((_QWORD)v60)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v60);
    if (BYTE8(v66))
    {
      v38 = __p[0];
      if (__p[0])
      {
        v39 = __p[1];
        v40 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          v40 = __p[0];
        }
        __p[1] = v38;
        operator delete(v40);
      }
      v24 = v63[1];
      if (!v63[1])
        goto LABEL_73;
      v41 = (_QWORD *)v64;
      v26 = v63[1];
      if ((void *)v64 == v63[1])
      {
LABEL_72:
        *(_QWORD *)&v64 = v24;
        operator delete(v26);
LABEL_73:
        if (v61[1] != (char *)v62 + 8)
          free(v61[1]);
        goto LABEL_75;
      }
      do
      {
        v43 = *--v41;
        v42 = v43;
        *v41 = 0;
        if (v43)
          MEMORY[0x20BD002D4](v42, 0x1000C8077774924);
      }
      while (v41 != v24);
LABEL_71:
      v26 = v63[1];
      goto LABEL_72;
    }
    goto LABEL_75;
  }
  v31 = v29;
  v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v33 = mlir::anec::BoxCoordinateModeAttr::get(*v32, v31);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(a2) = v33;
  v6 = v70[0];
  if (v70[0] != v71)
LABEL_4:
    free(v6);
LABEL_5:
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v79, 1))
    goto LABEL_28;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    goto LABEL_28;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v78, 1))
    goto LABEL_28;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    goto LABEL_28;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v75, 0, 1, 0xFFFFFFFFLL))goto LABEL_28;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
    goto LABEL_28;
  v70[0] = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_28;
  v9 = a2[1];
  *(_QWORD *)&v60 = a1;
  *((_QWORD *)&v60 + 1) = v70;
  v61[0] = a2;
  if (!mlir::memref::AtomicRMWOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AtomicRMWOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v60))goto LABEL_28;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_28;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    goto LABEL_28;
  *(_QWORD *)&v60 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 504))(a1, &v60))
    goto LABEL_28;
  v74 = v60;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    goto LABEL_28;
  *(_QWORD *)&v60 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v60)
    || (v73 = v60, !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    || !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1)
    || (*(_QWORD *)&v60 = 0,
        !(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 504))(a1, &v60))
    || (__src = v60,
        v10 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
        IndexType = mlir::Builder::getIndexType(v10, v11),
        mlir::OperationState::addTypes((uint64_t)a2, &__src, 1),
        v13 = a2 + 2,
        !mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v55, v53, v7, (uint64_t)(a2 + 2)))|| !mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v54, v52, v8, (uint64_t)(a2 + 2)))
  {
LABEL_28:
    v16 = 0;
    goto LABEL_77;
  }
  if ((_DWORD)v76)
  {
    v14 = (char *)v75;
    v15 = 32 * v76;
    v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v14, IndexType, v13))
    {
      v14 += 32;
      v15 -= 32;
      if (!v15)
        goto LABEL_77;
    }
    goto LABEL_28;
  }
  v16 = 1;
LABEL_77:
  if (v75 != v77)
    free(v75);
  return v16;
}

void mlir::memref::AtomicRMWOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unint64_t Value;
  char *v7;
  size_t v8;
  size_t v9;
  llvm::raw_ostream *v10;
  void *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  mlir::Operation *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  mlir::Operation *v28;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  llvm::raw_ostream *v40;
  _BYTE *v41;
  llvm::raw_ostream *v42;
  _BYTE *v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  llvm::raw_ostream *v48;
  _WORD *v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v55;
  uint64_t v56;
  _QWORD v57[5];

  v57[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v55 = (void *)*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  Value = mlir::arith::AtomicRMWKindAttr::getValue((mlir::arith::AtomicRMWKindAttr *)&v55);
  v7 = mlir::arith::stringifyAtomicRMWKind(Value);
  v9 = v8;
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (v9 <= *((_QWORD *)v10 + 3) - (_QWORD)v11)
  {
    if (v9)
    {
      memcpy(v11, v7, v9);
      *((_QWORD *)v10 + 4) += v9;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, v7, v9);
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ",", 1uLL);
  }
  else
  {
    *v15 = 44;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "[", 1uLL);
    v20 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_19;
  }
  else
  {
    *v19 = 91;
    ++*((_QWORD *)v18 + 4);
    v20 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_19:
      v21 = *((unsigned int *)v20 + 17);
      v22 = *((_QWORD *)v20 + 9);
      v23 = v21 - 2;
      goto LABEL_20;
    }
  }
  v22 = 0;
  v23 = -2;
LABEL_20:
  v24 = v22 + 64;
  v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v55 = ", ";
  v56 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v24, 0, v24, v23, (uint64_t)a2, v25, (uint64_t)&v55);
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, "]", 1uLL);
  }
  else
  {
    *v27 = 93;
    ++*((_QWORD *)v26 + 4);
  }
  v55 = v57;
  v57[0] = "kind";
  v57[1] = 4;
  v56 = 0x200000001;
  v28 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v28);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v28 + 56);
  }
  v30 = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, v30, v31, v55, v56);
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((_QWORD *)v32 + 4) = v33 + 1;
    *v33 = 32;
  }
  v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = (_BYTE *)*((_QWORD *)v34 + 4);
  if (*((_BYTE **)v34 + 3) == v35)
  {
    llvm::raw_ostream::write(v34, ":", 1uLL);
  }
  else
  {
    *v35 = 58;
    ++*((_QWORD *)v34 + 4);
  }
  v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v37 = (_BYTE *)*((_QWORD *)v36 + 4);
  if ((unint64_t)v37 >= *((_QWORD *)v36 + 3))
  {
    llvm::raw_ostream::write(v36, 32);
  }
  else
  {
    *((_QWORD *)v36 + 4) = v37 + 1;
    *v37 = 32;
  }
  v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v39 = (_BYTE *)*((_QWORD *)v38 + 4);
  if (*((_BYTE **)v38 + 3) == v39)
  {
    llvm::raw_ostream::write(v38, "(", 1uLL);
  }
  else
  {
    *v39 = 40;
    ++*((_QWORD *)v38 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v40 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v41 = (_BYTE *)*((_QWORD *)v40 + 4);
  if (*((_BYTE **)v40 + 3) == v41)
  {
    llvm::raw_ostream::write(v40, ",", 1uLL);
  }
  else
  {
    *v41 = 44;
    ++*((_QWORD *)v40 + 4);
  }
  v42 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v43 = (_BYTE *)*((_QWORD *)v42 + 4);
  if ((unint64_t)v43 >= *((_QWORD *)v42 + 3))
  {
    llvm::raw_ostream::write(v42, 32);
  }
  else
  {
    *((_QWORD *)v42 + 4) = v43 + 1;
    *v43 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v45 = (_BYTE *)*((_QWORD *)v44 + 4);
  if (*((_BYTE **)v44 + 3) == v45)
  {
    llvm::raw_ostream::write(v44, ")", 1uLL);
  }
  else
  {
    *v45 = 41;
    ++*((_QWORD *)v44 + 4);
  }
  v46 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v47 = (_BYTE *)*((_QWORD *)v46 + 4);
  if ((unint64_t)v47 >= *((_QWORD *)v46 + 3))
  {
    llvm::raw_ostream::write(v46, 32);
  }
  else
  {
    *((_QWORD *)v46 + 4) = v47 + 1;
    *v47 = 32;
  }
  v48 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v49 = (_WORD *)*((_QWORD *)v48 + 4);
  if (*((_QWORD *)v48 + 3) - (_QWORD)v49 > 1uLL)
  {
    *v49 = 15917;
    *((_QWORD *)v48 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v48, "->", 2uLL);
  }
  v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v51 = (_BYTE *)*((_QWORD *)v50 + 4);
  if ((unint64_t)v51 >= *((_QWORD *)v50 + 3))
  {
    llvm::raw_ostream::write(v50, 32);
  }
  else
  {
    *((_QWORD *)v50 + 4) = v51 + 1;
    *v51 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v52 = (uint64_t)*this - 16;
  else
    v52 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v55 != v57)
    free(v55);
}

void mlir::memref::AtomicRMWOp::getEffects(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  const char **v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)(a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56);
  v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  if ((v7 & 1) == 0)
  {
    v48 = v6;
    v6 = v48;
    if (v29)
    {
      if ((v30 & 1) == 0
      {
        v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v50 = 84;
        v34 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
        if (v50 >= v34)
          v35 = v34;
        else
          v35 = v50;
        v36 = &v49[v35];
        v37 = v50 - v35;
        if (v50 - v35 >= 0x12)
          v38 = 18;
        else
          v38 = v50 - v35;
        v39 = v37 - v38;
        if (v39 >= v39 - 1)
          v40 = v39 - 1;
        else
          v40 = v39;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v6 = v48;
    }
  }
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    v49 = (const char *)v6;
    v50 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v51 = v5 | 4;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v15 = v8 + 1;
    v16 = *(_QWORD *)a2 + 40 * (unint64_t)v8 > (unint64_t)&v49;
    if (*(_QWORD *)a2 <= (unint64_t)&v49 && v16)
    {
      v32 = (char *)&v49 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v15, 40);
      v17 = *(_QWORD *)a2;
      v18 = (const char **)&v32[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v15, 40);
      v17 = *(_QWORD *)a2;
      v18 = &v49;
    }
    v19 = v17 + 40 * *(unsigned int *)(a2 + 8);
    v20 = *(_OWORD *)v18;
    v21 = *((_OWORD *)v18 + 1);
    *(_QWORD *)(v19 + 32) = v18[4];
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
  }
  else
  {
    v9 = *(_QWORD *)a2 + 40 * v8;
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v9 + 16) = v5 | 4;
    *(_QWORD *)(v9 + 24) = 0;
    *(_DWORD *)(v9 + 32) = 0;
    *(_BYTE *)(v9 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56);
  v11 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  if ((v12 & 1) == 0
  {
    if ((v31 & 1) == 0
    {
      v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      v50 = 84;
      v41 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
      if (v50 >= v41)
        v42 = v41;
      else
        v42 = v50;
      v43 = &v49[v42];
      v44 = v50 - v42;
      if (v50 - v42 >= 0x12)
        v45 = 18;
      else
        v45 = v50 - v42;
      v46 = v44 - v45;
      if (v46 >= v46 - 1)
        v47 = v46 - 1;
      else
        v47 = v46;
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
    *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
  }
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= *(_DWORD *)(a2 + 12))
  {
    v49 = (const char *)v11;
    v50 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v51 = v10 | 4;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v22 = v13 + 1;
    v23 = *(_QWORD *)a2 + 40 * (unint64_t)v13 > (unint64_t)&v49;
    if (*(_QWORD *)a2 <= (unint64_t)&v49 && v23)
    {
      v33 = (char *)&v49 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v22, 40);
      v24 = *(_QWORD *)a2;
      v25 = (const char **)&v33[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v22, 40);
      v24 = *(_QWORD *)a2;
      v25 = &v49;
    }
    v26 = v24 + 40 * *(unsigned int *)(a2 + 8);
    v27 = *(_OWORD *)v25;
    v28 = *((_OWORD *)v25 + 1);
    *(_QWORD *)(v26 + 32) = v25[4];
    *(_OWORD *)v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
  }
  else
  {
    v14 = *(_QWORD *)a2 + 40 * v13;
    *(_QWORD *)v14 = v11;
    *(_QWORD *)(v14 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v14 + 16) = v10 | 4;
    *(_QWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 32) = 0;
    *(_BYTE *)(v14 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AtomicYieldOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v6 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v6))
    return 0;
  v9 = v6;
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

void mlir::memref::AtomicYieldOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  unint64_t AttrDictionary;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v17 = v19;
  v18 = 0x200000000;
  v6 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v9, v17, v18);
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *v13 = 58;
    ++*((_QWORD *)v12 + 4);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v17 != v19)
    free(v17);
}

uint64_t mlir::memref::detail::CopyOpGenericAdaptorBase::CopyOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.copy", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::CopyOp::verifyInvariantsImpl(uint64_t **this)
{
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u) != 0;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v6;
  void *v7;
  uint64_t v9;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  const void **v48[4];
  __int16 v49;
  int v50;
  const char *v51;
  uint64_t v52;
  _QWORD v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD *v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a2;
  v7 = *(void **)(*(_QWORD *)a2 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    v53[0] = a2;
    v53[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v6 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v53);
    return 1;
  }
  else
  {
    v49 = 261;
    v48[0] = a3;
    v48[1] = a4;
    mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
    if (v53[0])
    {
      v50 = 3;
      v51 = " #";
      v52 = 2;
      v11 = &v50;
      v12 = (char *)v54;
      if (v55 >= v56)
      {
        v38 = v55 + 1;
        if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
        {
          v44 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v12 = (char *)v54;
          v11 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v11 = &v50;
          v12 = (char *)v54;
        }
      }
      v13 = &v12[24 * v55];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      v15 = ++v55;
      if (v53[0])
      {
        v50 = 5;
        v51 = (const char *)a5;
        v16 = &v50;
        v17 = (char *)v54;
        if (v15 >= v56)
        {
          v39 = v15 + 1;
          v40 = (char *)v54 + 24 * v15 > (char *)&v50;
          if (v54 <= &v50 && v40)
          {
            v45 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
            v17 = (char *)v54;
            v16 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
            v16 = &v50;
            v17 = (char *)v54;
          }
        }
        v18 = &v17[24 * v55];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v18 = v19;
        v20 = ++v55;
        if (v53[0])
        {
          v50 = 3;
          v51 = " must be ranked or unranked memref of any type values, but got ";
          v52 = 63;
          v21 = &v50;
          v22 = (char *)v54;
          if (v20 >= v56)
          {
            v41 = v20 + 1;
            v42 = (char *)v54 + 24 * v20 > (char *)&v50;
            if (v54 <= &v50 && v42)
            {
              v46 = (char *)&v50 - (_BYTE *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
              v22 = (char *)v54;
              v21 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
              v21 = &v50;
              v22 = (char *)v54;
            }
          }
          v23 = &v22[24 * v55];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          ++v55;
          if (v53[0])
          {
            v25 = &v50;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
            v26 = (char *)v54;
            if (v55 >= v56)
            {
              v43 = v55 + 1;
              if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
              {
                v47 = (char *)&v50 - (_BYTE *)v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
                v26 = (char *)v54;
                v25 = (int *)((char *)v54 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
                v25 = &v50;
                v26 = (char *)v54;
              }
            }
            v27 = &v26[24 * v55];
            v28 = *(_OWORD *)v25;
            *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
            *(_OWORD *)v27 = v28;
            ++v55;
          }
        }
      }
    }
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    if (v62)
    {
      v29 = __p;
      if (__p)
      {
        v30 = v61;
        v31 = __p;
        if (v61 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v61 = v29;
        operator delete(v31);
      }
      v32 = v58;
      if (v58)
      {
        v33 = v59;
        v34 = v58;
        if (v59 != v58)
        {
          do
          {
            v36 = *--v33;
            v35 = v36;
            *v33 = 0;
            if (v36)
              MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
          }
          while (v33 != v32);
          v34 = v58;
        }
        v59 = v32;
        operator delete(v34);
      }
      if (v54 != v57)
        free(v54);
    }
  }
  return v9;
}

BOOL mlir::memref::CopyOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t v10[2];
  uint64_t v11[2];
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[5];

  v17[4] = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, 24);
  v11[0] = (uint64_t)v17;
  v11[1] = 1;
  memset(v16, 0, 24);
  v10[0] = (uint64_t)v16;
  v10[1] = 1;
  v14 = 0;
  v15 = 0;
  v9[0] = &v15;
  v9[1] = 1;
  v8[0] = &v14;
  v8[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v16, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (v12[0] = 0, mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, v12))
    && (v15 = v12[0],
        v13 = 257,
        (*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, v12))&& (v12[0] = 0, mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, v12))&& (v14 = v12[0], v6 = a2 + 16, mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v11, v9, v4, v6)))
  {
    return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v8, v5, v6) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::memref::CopyOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  _WORD *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  unint64_t AttrDictionary;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *v7 = 44;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v27 = v29;
  v28 = 0x200000000;
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, v27, v28);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_WORD *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 1uLL)
  {
    *v23 = 28532;
    *((_QWORD *)v22 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v22, "to", 2uLL);
  }
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v27 != v29)
    free(v27);
}

void mlir::memref::CopyOp::getEffects(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  const char **v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)(a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  if ((v7 & 1) == 0)
  {
    v48 = v6;
    v6 = v48;
    if (v29)
    {
      if ((v30 & 1) == 0
      {
        v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v50 = 84;
        v34 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
        if (v50 >= v34)
          v35 = v34;
        else
          v35 = v50;
        v36 = &v49[v35];
        v37 = v50 - v35;
        if (v50 - v35 >= 0x12)
          v38 = 18;
        else
          v38 = v50 - v35;
        v39 = v37 - v38;
        if (v39 >= v39 - 1)
          v40 = v39 - 1;
        else
          v40 = v39;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v6 = v48;
    }
  }
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    v49 = (const char *)v6;
    v50 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v51 = v5 | 4;
    v52 = 0;
    v53 = 0;
    v54 = 1;
    v15 = v8 + 1;
    v16 = *(_QWORD *)a2 + 40 * (unint64_t)v8 > (unint64_t)&v49;
    if (*(_QWORD *)a2 <= (unint64_t)&v49 && v16)
    {
      v32 = (char *)&v49 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v15, 40);
      v17 = *(_QWORD *)a2;
      v18 = (const char **)&v32[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v15, 40);
      v17 = *(_QWORD *)a2;
      v18 = &v49;
    }
    v19 = v17 + 40 * *(unsigned int *)(a2 + 8);
    v20 = *(_OWORD *)v18;
    v21 = *((_OWORD *)v18 + 1);
    *(_QWORD *)(v19 + 32) = v18[4];
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
  }
  else
  {
    v9 = *(_QWORD *)a2 + 40 * v8;
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v9 + 16) = v5 | 4;
    *(_QWORD *)(v9 + 24) = 0;
    *(_DWORD *)(v9 + 32) = 0;
    *(_BYTE *)(v9 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56);
  v11 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  if ((v12 & 1) == 0
  {
    if ((v31 & 1) == 0
    {
      v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      v50 = 84;
      v41 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
      if (v50 >= v41)
        v42 = v41;
      else
        v42 = v50;
      v43 = &v49[v42];
      v44 = v50 - v42;
      if (v50 - v42 >= 0x12)
        v45 = 18;
      else
        v45 = v50 - v42;
      v46 = v44 - v45;
      if (v46 >= v46 - 1)
        v47 = v46 - 1;
      else
        v47 = v46;
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
    *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
  }
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= *(_DWORD *)(a2 + 12))
  {
    v49 = (const char *)v11;
    v50 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v51 = v10 | 4;
    v52 = 0;
    v53 = 0;
    v54 = 1;
    v22 = v13 + 1;
    v23 = *(_QWORD *)a2 + 40 * (unint64_t)v13 > (unint64_t)&v49;
    if (*(_QWORD *)a2 <= (unint64_t)&v49 && v23)
    {
      v33 = (char *)&v49 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v22, 40);
      v24 = *(_QWORD *)a2;
      v25 = (const char **)&v33[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v22, 40);
      v24 = *(_QWORD *)a2;
      v25 = &v49;
    }
    v26 = v24 + 40 * *(unsigned int *)(a2 + 8);
    v27 = *(_OWORD *)v25;
    v28 = *((_OWORD *)v25 + 1);
    *(_QWORD *)(v26 + 32) = v25[4];
    *(_OWORD *)v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
  }
  else
  {
    v14 = *(_QWORD *)a2 + 40 * v13;
    *(_QWORD *)v14 = v11;
    *(_QWORD *)(v14 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v14 + 16) = v10 | 4;
    *(_QWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 32) = 0;
    *(_BYTE *)(v14 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::GenericAtomicRMWOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t NextResultAtOffset;
  uint64_t RHS;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void **v24;
  __int16 v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v4 = -1;
    v5 = 32;
LABEL_5:
    v6 = 0;
    v7 = v5 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v6 + 1))
    {
      ++v6;
      v7 += 32;
      if (v4 == v6)
      {
        v2 = *this;
        goto LABEL_9;
      }
    }
    return 0;
  }
  v3 = *((unsigned int *)v2 + 17);
  v4 = v3 - 1;
  if (v3 != 1)
  {
    v5 = v2[9] + 32;
    goto LABEL_5;
  }
LABEL_9:
  v8 = *((_DWORD *)v2 + 9);
  v9 = v2 - 2;
  v10 = v8 ? (uint64_t)v9 : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  v26[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v26);
  if (*((_DWORD *)*this + 9))
    v13 = (uint64_t)(*this - 2);
  else
    v13 = 0;
  if (RHS == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v24 = (const void **)"failed to verify that result type matches element type of memref";
  v25 = 259;
  mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  if (v33)
  {
    v15 = __p;
    if (__p)
    {
      v16 = v32;
      v17 = __p;
      if (v32 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v32 = v15;
      operator delete(v17);
    }
    v18 = v29;
    if (v29)
    {
      v19 = v30;
      v20 = v29;
      if (v30 != v29)
      {
        do
        {
          v22 = *--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
        }
        while (v19 != v18);
        v20 = v29;
      }
      v30 = v18;
      operator delete(v20);
    }
    if (v27 != &v28)
      free(v27);
  }
  return v14;
}

uint64_t mlir::memref::GenericAtomicRMWOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  unint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v15[0] = a4;
  v15[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v12 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  v14 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(_QWORD **)a11 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v14);
  return 1;
}

void mlir::memref::GenericAtomicRMWOp::getEffects(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  const char **v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)(a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  if ((v7 & 1) == 0)
  {
    v48 = v6;
    v6 = v48;
    if (v29)
    {
      if ((v30 & 1) == 0
      {
        v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v50 = 84;
        v34 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
        if (v50 >= v34)
          v35 = v34;
        else
          v35 = v50;
        v36 = &v49[v35];
        v37 = v50 - v35;
        if (v50 - v35 >= 0x12)
          v38 = 18;
        else
          v38 = v50 - v35;
        v39 = v37 - v38;
        if (v39 >= v39 - 1)
          v40 = v39 - 1;
        else
          v40 = v39;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v6 = v48;
    }
  }
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    v49 = (const char *)v6;
    v50 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v51 = v5 | 4;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v15 = v8 + 1;
    v16 = *(_QWORD *)a2 + 40 * (unint64_t)v8 > (unint64_t)&v49;
    if (*(_QWORD *)a2 <= (unint64_t)&v49 && v16)
    {
      v32 = (char *)&v49 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v15, 40);
      v17 = *(_QWORD *)a2;
      v18 = (const char **)&v32[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v15, 40);
      v17 = *(_QWORD *)a2;
      v18 = &v49;
    }
    v19 = v17 + 40 * *(unsigned int *)(a2 + 8);
    v20 = *(_OWORD *)v18;
    v21 = *((_OWORD *)v18 + 1);
    *(_QWORD *)(v19 + 32) = v18[4];
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
  }
  else
  {
    v9 = *(_QWORD *)a2 + 40 * v8;
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v9 + 16) = v5 | 4;
    *(_QWORD *)(v9 + 24) = 0;
    *(_DWORD *)(v9 + 32) = 0;
    *(_BYTE *)(v9 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v11 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  if ((v12 & 1) == 0
  {
    if ((v31 & 1) == 0
    {
      v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
      v50 = 84;
      v41 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
      if (v50 >= v41)
        v42 = v41;
      else
        v42 = v50;
      v43 = &v49[v42];
      v44 = v50 - v42;
      if (v50 - v42 >= 0x12)
        v45 = 18;
      else
        v45 = v50 - v42;
      v46 = v44 - v45;
      if (v46 >= v46 - 1)
        v47 = v46 - 1;
      else
        v47 = v46;
      mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
    }
    mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
    *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
  }
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 >= *(_DWORD *)(a2 + 12))
  {
    v49 = (const char *)v11;
    v50 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v51 = v10 | 4;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v22 = v13 + 1;
    v23 = *(_QWORD *)a2 + 40 * (unint64_t)v13 > (unint64_t)&v49;
    if (*(_QWORD *)a2 <= (unint64_t)&v49 && v23)
    {
      v33 = (char *)&v49 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v22, 40);
      v24 = *(_QWORD *)a2;
      v25 = (const char **)&v33[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v22, 40);
      v24 = *(_QWORD *)a2;
      v25 = &v49;
    }
    v26 = v24 + 40 * *(unsigned int *)(a2 + 8);
    v27 = *(_OWORD *)v25;
    v28 = *((_OWORD *)v25 + 1);
    *(_QWORD *)(v26 + 32) = v25[4];
    *(_OWORD *)v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
  }
  else
  {
    v14 = *(_QWORD *)a2 + 40 * v13;
    *(_QWORD *)v14 = v11;
    *(_QWORD *)(v14 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v14 + 16) = v10 | 4;
    *(_QWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 32) = 0;
    *(_BYTE *)(v14 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::detail::LoadOpGenericAdaptorBase::LoadOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.load", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::LoadOp::getIndices(mlir::memref::LoadOp *this)
{
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32;
  else
    return 32;
}

uint64_t mlir::memref::LoadOp::getIndicesMutable@<X0>(mlir::memref::LoadOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v3 = *(_DWORD *)(v2 + 68) - 1;
  else
    v3 = -1;
  return mlir::MutableOperandRange::MutableOperandRange(a2, v2, 1, v3, 0, 0);
}

uint64_t mlir::memref::LoadOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[3];
  void *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[96];
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      v44 = 3;
      v45 = "expected DictionaryAttr to set properties";
      v46 = 41;
      v11 = &v44;
      v12 = (char *)v48;
      if (v49 >= v50)
      {
        v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v40 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v12 = (char *)v48;
          v11 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v11 = &v44;
          v12 = (char *)v48;
        }
      }
      v13 = &v12[24 * v49];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v56)
      return 0;
    v15 = __p;
    if (__p)
    {
      v16 = v55;
      v17 = __p;
      if (v55 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v55 = v15;
      operator delete(v17);
    }
    v18 = v52;
    if (!v52)
      goto LABEL_45;
    v19 = v53;
    v20 = v52;
    if (v53 == v52)
      goto LABEL_44;
    do
    {
      v22 = *--v19;
      v21 = v22;
      *v19 = 0;
      if (v22)
        MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
    }
    while (v19 != v18);
    goto LABEL_43;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v43, "nontemporal", 0xBuLL);
  if (!v8)
    return 1;
  v9 = (uint64_t)v8;
  if (mlir::BoolAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    v44 = 3;
    v46 = 56;
    v23 = &v44;
    v24 = (char *)v48;
    if (v49 >= v50)
    {
      v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        v41 = (char *)&v44 - (_BYTE *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v24 = (char *)v48;
        v23 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v23 = &v44;
        v24 = (char *)v48;
      }
    }
    v25 = &v24[24 * v49];
    v26 = *(_OWORD *)v23;
    *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v25 = v26;
    ++v49;
    if (v47[0])
    {
      v27 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      v28 = (char *)v48;
      if (v49 >= v50)
      {
        v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v42 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v28 = (char *)v48;
          v27 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v27 = &v44;
          v28 = (char *)v48;
        }
      }
      v29 = &v28[24 * v49];
      v30 = *(_OWORD *)v27;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v29 = v30;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
  }
  if (v56)
  {
    v31 = __p;
    if (__p)
    {
      v32 = v55;
      v33 = __p;
      if (v55 != __p)
      {
        do
          v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        v33 = __p;
      }
      v55 = v31;
      operator delete(v33);
    }
    v18 = v52;
    if (!v52)
      goto LABEL_45;
    v34 = v53;
    v20 = v52;
    if (v53 == v52)
    {
LABEL_44:
      v53 = v18;
      operator delete(v20);
LABEL_45:
      if (v48 != v51)
        free(v48);
      return 0;
    }
    do
    {
      v36 = *--v34;
      v35 = v36;
      *v34 = 0;
      if (v36)
        MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
    }
    while (v34 != v18);
LABEL_43:
    v20 = v52;
    goto LABEL_44;
  }
  return 0;
}

uint64_t mlir::memref::LoadOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"nontemporal", 11, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::LoadOp::getInherentAttr(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  BOOL v4;

  if (a4 == 11
    && (*a3 == 0x6F706D65746E6F6ELL ? (v4 = *(_QWORD *)((char *)a3 + 3) == 0x6C61726F706D6574) : (v4 = 0), v4))
  {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::memref::LoadOp::setInherentAttr(_BOOL8 result, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  _QWORD *v7;

  if (a3 == 11 && *a2 == 0x6F706D65746E6F6ELL && *(_QWORD *)((char *)a2 + 3) == 0x6C61726F706D6574)
  {
    v6 = (_QWORD *)result;
    if (a4)
    {
      result = mlir::BoolAttr::classof(a4);
      if (result)
        v7 = a4;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    *v6 = v7;
  }
  return result;
}

void mlir::memref::LoadOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"nontemporal", 11, *a2);
}

BOOL mlir::memref::LoadOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v6;

  v6 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v6, (const void **)"nontemporal", (const char *)0xB, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(_QWORD *a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1 || mlir::BoolAttr::classof(a1))
    return 1;
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v11 = &v31;
    v12 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v12 = (char *)v37;
        v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = &v31;
        v12 = (char *)v37;
      }
    }
    v13 = &v12[24 * v38];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: BOOL attribute";
        v33 = 46;
        v15 = &v31;
        v16 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v16 = (char *)v37;
            v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = &v31;
            v16 = (char *)v37;
          }
        }
        v17 = &v16[24 * v38];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v44;
      v21 = __p;
      if (v44 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v44 = v19;
      operator delete(v21);
    }
    v22 = v41;
    if (v41)
    {
      v23 = v42;
      v24 = v41;
      if (v42 != v41)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v41;
      }
      v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

BOOL mlir::memref::LoadOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::LoadOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[291];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const void ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  _WORD v39[20];
  _QWORD *v40;
  const void **v41;
  unint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[96];
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v40 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 56))(a1, &v40))
    return 0;
  v4 = v40;
  if (!v40)
    return 1;
  v5 = mlir::BoolAttr::classof(v40);
  v6 = v5 ? v4 : 0;
  *a2 = v6;
  if (v5)
    return 1;
  v39[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v45, a1, v39);
  if (v45)
  {
    LODWORD(v41) = 3;
    v42 = (unint64_t)"expected ";
    v43 = 9;
    v9 = &v41;
    v10 = (char *)v47;
    if (v48 >= v49)
    {
      v33 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        v36 = (char *)&v41 - (_BYTE *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
        v10 = (char *)v47;
        v9 = (const void ***)((char *)v47 + v36);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v33, 24);
        v9 = &v41;
        v10 = (char *)v47;
      }
    }
    v11 = &v10[24 * v48];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v48;
  }
  v41 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::BoolAttr]";
  v42 = 64;
  v13 = llvm::StringRef::find((uint64_t *)&v41, "DesiredTypeName = ", 0x12uLL, 0);
  if (v45)
  {
    if (v42 >= v13)
      v14 = v13;
    else
      v14 = v42;
    v15 = 18;
    if (v42 - v14 < 0x12)
      v15 = v42 - v14;
    v16 = v42 - v14 - v15;
    if (v16 >= v16 - 1)
      --v16;
    v44 = 261;
    v41 = (const void **)((char *)v41 + v14 + v15);
    v42 = v16;
    mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
    if (v45)
    {
      LODWORD(v41) = 3;
      v42 = (unint64_t)", but got: ";
      v43 = 11;
      v17 = &v41;
      v18 = (char *)v47;
      if (v48 >= v49)
      {
        v34 = v48 + 1;
        if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
        {
          v37 = (char *)&v41 - (_BYTE *)v47;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
          v18 = (char *)v47;
          v17 = (const void ***)((char *)v47 + v37);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v34, 24);
          v17 = &v41;
          v18 = (char *)v47;
        }
      }
      v19 = &v18[24 * v48];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = v17[2];
      *(_OWORD *)v19 = v20;
      ++v48;
      if (v45)
      {
        v21 = &v41;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v41, (uint64_t)v40);
        v22 = (char *)v47;
        if (v48 >= v49)
        {
          v35 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            v38 = (char *)&v41 - (_BYTE *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            v22 = (char *)v47;
            v21 = (const void ***)((char *)v47 + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
            v21 = &v41;
            v22 = (char *)v47;
          }
        }
        v23 = &v22[24 * v48];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = v21[2];
        *(_OWORD *)v23 = v24;
        ++v48;
      }
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  if (v55)
  {
    v25 = __p;
    if (__p)
    {
      v26 = v54;
      v27 = __p;
      if (v54 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v54 = v25;
      operator delete(v27);
    }
    v28 = v51;
    if (v51)
    {
      v29 = v52;
      v30 = v51;
      if (v52 != v51)
      {
        do
        {
          v32 = *--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
        }
        while (v29 != v28);
        v30 = v51;
      }
      v52 = v28;
      operator delete(v30);
    }
    if (v47 != v50)
      free(v47);
  }
  return v7;
}

void mlir::memref::LoadOp::build(mlir::BoolAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, mlir::MLIRContext *a6)
{
  uint64_t BoolAttr;
  mlir::MLIRContext *Context;
  unsigned int v13;
  uint64_t RHS;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  void *__src;
  uint64_t v24;
  _BYTE v25[16];
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v19 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, a4, a5);
  BoolAttr = mlir::Builder::getBoolAttr(a1, a6);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>((_QWORD *)a2) = BoolAttr;
  __src = v25;
  v24 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v22, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v21, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v26 = v22;
  if ((_DWORD)v24 != 1)
  {
    if (!(_DWORD)v24)
    {
      if (HIDWORD(v24))
      {
        v13 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v25, 1uLL, 8);
      v13 = v24;
      if ((_DWORD)v24 != 1)
        goto LABEL_6;
    }
LABEL_7:
    LODWORD(v24) = 1;
  }
  v20 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v20);
  *(_QWORD *)__src = RHS;
  v15 = __src;
  v16 = v24;
  v17 = *(unsigned int *)(a2 + 72);
  v18 = v17 + v24;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v16)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v25)
    free(__src);
}

uint64_t mlir::memref::LoadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t RHS;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v25;
  __int16 v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (_QWORD *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v27[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v3, (const void **)"nontemporal", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v27)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  v4 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v6 = -1;
    v7 = 32;
LABEL_6:
    v8 = 0;
    v9 = v7 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 1))
    {
      ++v8;
      v9 += 32;
      if (v6 == v8)
      {
        v4 = *this;
        goto LABEL_10;
      }
    }
    return 0;
  }
  v5 = *((unsigned int *)v4 + 17);
  v6 = v5 - 1;
  if (v5 != 1)
  {
    v7 = v4[9] + 32;
    goto LABEL_6;
  }
LABEL_10:
  v10 = *((_DWORD *)v4 + 9);
  v11 = v4 - 2;
  if (v10)
    v12 = (uint64_t)v11;
  else
    v12 = 0;
  mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  v27[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v27);
  if (*((_DWORD *)*this + 9))
    v14 = (uint64_t)(*this - 2);
  else
    v14 = 0;
  if (RHS == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v25 = (const void **)"failed to verify that result type matches element type of 'memref'";
  v26 = 259;
  mlir::OpState::emitOpError(this, &v25, (uint64_t)v27);
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  if (v34)
  {
    v16 = __p;
    if (__p)
    {
      v17 = v33;
      v18 = __p;
      if (v33 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v33 = v16;
      operator delete(v18);
    }
    v19 = v30;
    if (v30)
    {
      v20 = v31;
      v21 = v30;
      if (v31 != v30)
      {
        do
        {
          v23 = *--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
        }
        while (v20 != v19);
        v21 = v30;
      }
      v31 = v19;
      operator delete(v21);
    }
    if (v28 != &v29)
      free(v28);
  }
  return v15;
}

uint64_t mlir::memref::LoadOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  mlir::IndexType **v14;
  mlir::MLIRContext *v15;
  uint64_t IndexType;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25[2];
  uint64_t __src;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE v32[128];
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  memset(v33, 0, 24);
  v25[0] = (uint64_t)v33;
  v25[1] = 1;
  v29 = 0;
  v30 = v32;
  v31 = 0x400000000;
  v24[0] = &v29;
  v24[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v33, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, _BYTE **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v30, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
        {
          v21[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
          {
            v5 = *(_QWORD *)(a2 + 8);
            __src = a1;
            v27 = v21;
            v28 = a2;
            v6 = (_QWORD *)mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v5 + 96));
            if (!v6
              || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v6, (const void **)"nontemporal", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::LoadOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))
            {
              if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
              {
                __src = 0;
                if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &__src))
                {
                  v7 = __src;
                  v29 = __src;
                  v23 = __src;
                  if (*(_UNKNOWN **)(*(_QWORD *)__src + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
                  {
                    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
                    v22 = 257;
                    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(&__src, a1, v8, v21);
                    v9 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'memref' must be memref of any type values, but got ");
                    v10 = mlir::InFlightDiagnostic::append<mlir::Type &>(v9, &v23);
                    v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
                    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
                    v12 = v30;
                    if (v30 == v32)
                      return v11;
                    goto LABEL_21;
                  }
                  v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)__src + 8);
                  __src = v7;
                  v27 = (_QWORD *)v13;
                  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
                  v14 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                  IndexType = mlir::Builder::getIndexType(v14, v15);
                  v21[0] = v29;
                  __src = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v21);
                  mlir::OperationState::addTypes(a2, &__src, 1);
                  v17 = a2 + 16;
                  if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, v17))
                  {
                    if (!(_DWORD)v31)
                    {
                      v11 = 1;
                      v12 = v30;
                      if (v30 == v32)
                        return v11;
                      goto LABEL_21;
                    }
                    v18 = v30;
                    v19 = 32 * v31;
                    v11 = 1;
                    while ((*(unsigned __int8 (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, IndexType, v17))
                    {
                      v18 += 32;
                      v19 -= 32;
                      if (!v19)
                        goto LABEL_20;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v11 = 0;
LABEL_20:
  v12 = v30;
  if (v30 != v32)
LABEL_21:
    free(v12);
  return v11;
}

void mlir::memref::LoadOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  uint64_t v16;
  mlir::Operation *v17;
  mlir::ArrayAttr *p_Context;
  unsigned int v19;
  _QWORD *v20;
  uint64_t Value;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  mlir::BoolAttr *Context;
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_6;
  }
  else
  {
    *v7 = 91;
    ++*((_QWORD *)v6 + 4);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_6:
      v9 = *((unsigned int *)v8 + 17);
      v10 = *((_QWORD *)v8 + 9);
      v11 = v9 - 1;
      goto LABEL_7;
    }
  }
  v10 = 0;
  v11 = -1;
LABEL_7:
  v12 = v10 + 32;
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v30 = ", ";
  v31 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)&v30);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "]", 1uLL);
  }
  else
  {
    *v15 = 93;
    ++*((_QWORD *)v14 + 4);
  }
  v30 = v32;
  v31 = 0x200000000;
  Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v16 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v16 && v16 == mlir::Builder::getBoolAttr(&Context, 0))
  {
    v19 = v31;
    if (v31 >= HIDWORD(v31))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v31 + 1, 16);
      v19 = v31;
    }
    v20 = (char *)v30 + 16 * v19;
    *v20 = "nontemporal";
    v20[1] = 11;
    LODWORD(v31) = v31 + 1;
    v17 = *this;
    if (!*((_BYTE *)*this + 47))
      goto LABEL_15;
  }
  else
  {
    v17 = *this;
    if (!*((_BYTE *)*this + 47))
    {
LABEL_15:
      p_Context = (mlir::Operation *)((char *)v17 + 56);
      goto LABEL_20;
    }
  }
  Context = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v17);
  p_Context = (mlir::ArrayAttr *)&Context;
LABEL_20:
  Value = mlir::ArrayAttr::getValue(p_Context);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v22, v30, v31);
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((_QWORD *)v23 + 4) = v24 + 1;
    *v24 = 32;
  }
  v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if (*((_BYTE **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    *v26 = 58;
    ++*((_QWORD *)v25 + 4);
  }
  v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v28 = (_BYTE *)*((_QWORD *)v27 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32)
    free(v30);
}

void mlir::memref::LoadOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  const char **v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unsigned __int8 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Read,mlir::MemoryEffects::Effect>::get();
  if ((v5 & 1) == 0)
  {
    v26 = v4;
    v4 = v26;
    if (v16)
    {
      if ((v17 & 1) == 0
      {
        v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v28 = 84;
        v19 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
        if (v28 >= v19)
          v20 = v19;
        else
          v20 = v28;
        v21 = &v27[v20];
        v22 = v28 - v20;
        if (v28 - v20 >= 0x12)
          v23 = 18;
        else
          v23 = v28 - v20;
        v24 = v22 - v23;
        if (v24 >= v24 - 1)
          v25 = v24 - 1;
        else
          v25 = v24;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v4 = v26;
    }
  }
  v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    v8 = (void *)(a2 + 16);
    v27 = (const char *)v4;
    v28 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v29 = v3 | 4;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v9 = v6 + 1;
    v10 = *(_QWORD *)a2 + 40 * (unint64_t)v6 > (unint64_t)&v27;
    if (*(_QWORD *)a2 <= (unint64_t)&v27 && v10)
    {
      v18 = (char *)&v27 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      v11 = *(_QWORD *)a2;
      v12 = (const char **)&v18[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      v11 = *(_QWORD *)a2;
      v12 = &v27;
    }
    v13 = v11 + 40 * *(unsigned int *)(a2 + 8);
    v14 = *(_OWORD *)v12;
    v15 = *((_OWORD *)v12 + 1);
    *(_QWORD *)(v13 + 32) = v12[4];
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
  }
  else
  {
    v7 = *(_QWORD *)a2 + 40 * v6;
    *(_QWORD *)v7 = v4;
    *(_QWORD *)(v7 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v7 + 16) = v3 | 4;
    *(_QWORD *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    *(_BYTE *)(v7 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AllocOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  _QWORD v60[3];
  void *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[96];
  void *v65;
  _QWORD *v66;
  void *__p;
  _QWORD *v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      v57 = 3;
      v58 = "expected DictionaryAttr to set properties";
      v59 = 41;
      v26 = &v57;
      v27 = (char *)v61;
      if (v62 >= v63)
      {
        v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          v52 = (char *)&v57 - (_BYTE *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          v27 = (char *)v61;
          v26 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          v26 = &v57;
          v27 = (char *)v61;
        }
      }
      v28 = &v27[24 * v62];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v62;
      if (v60[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    }
    if (!v69)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v68;
      v32 = __p;
      if (v68 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v68 = v30;
      operator delete(v32);
    }
    v21 = v65;
    if (!v65)
      goto LABEL_64;
    v33 = v66;
    v23 = v65;
    if (v66 == v65)
    {
LABEL_63:
      v66 = v21;
      operator delete(v23);
LABEL_64:
      if (v61 != v64)
        free(v61);
      return 0;
    }
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
LABEL_62:
    v23 = v65;
    goto LABEL_63;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v56, "alignment", 9uLL);
  if (v8)
  {
    v9 = v8;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      a3(v60, a4);
      if (v60[0])
      {
        v57 = 3;
        v59 = 54;
        v10 = &v57;
        v11 = (char *)v61;
        if (v62 >= v63)
        {
          v49 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            v53 = (char *)&v57 - (_BYTE *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            v11 = (char *)v61;
            v10 = (int *)((char *)v61 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            v10 = &v57;
            v11 = (char *)v61;
          }
        }
        v12 = &v11[24 * v62];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v12 = v13;
        ++v62;
        if (v60[0])
        {
          v14 = &v57;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, v9);
          v15 = (char *)v61;
          if (v62 >= v63)
          {
            v50 = v62 + 1;
            if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
            {
              v54 = (char *)&v57 - (_BYTE *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              v15 = (char *)v61;
              v14 = (int *)((char *)v61 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              v14 = &v57;
              v15 = (char *)v61;
            }
          }
          v16 = &v15[24 * v62];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v16 = v17;
          ++v62;
          if (v60[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
        }
      }
      if (!v69)
        return 0;
      v18 = __p;
      if (__p)
      {
        v19 = v68;
        v20 = __p;
        if (v68 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v68 = v18;
        operator delete(v20);
      }
      v21 = v65;
      if (!v65)
        goto LABEL_64;
      v22 = v66;
      v23 = v65;
      if (v66 == v65)
        goto LABEL_63;
      do
      {
        v25 = *--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  v36 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v56, "operandSegmentSizes", 0x13uLL);
  if (!v36)
  {
    v36 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v56, "operand_segment_sizes", 0x15uLL);
    if (!v36)
    {
      a3(v60, a4);
      if (v60[0])
      {
        v57 = 3;
        v58 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        v59 = 79;
        v38 = &v57;
        v39 = (char *)v61;
        if (v62 >= v63)
        {
          v51 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            v55 = (char *)&v57 - (_BYTE *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            v39 = (char *)v61;
            v38 = (int *)((char *)v61 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            v38 = &v57;
            v39 = (char *)v61;
          }
        }
        v40 = &v39[24 * v62];
        v41 = *(_OWORD *)v38;
        *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
        *(_OWORD *)v40 = v41;
        ++v62;
        if (v60[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
      if (!v69)
        return 0;
      v42 = __p;
      if (__p)
      {
        v43 = v68;
        v44 = __p;
        if (v68 != __p)
        {
          do
            v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          v44 = __p;
        }
        v68 = v42;
        operator delete(v44);
      }
      v21 = v65;
      if (!v65)
        goto LABEL_64;
      v45 = v66;
      v23 = v65;
      if (v66 == v65)
        goto LABEL_63;
      do
      {
        v47 = *--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
      }
      while (v45 != v21);
      goto LABEL_62;
    }
  }
  return mlir::convertFromAttribute(a1 + 1, (const char *)2, v36, a3, a4) != 0;
}

uint64_t mlir::memref::AllocOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t DictionaryAttr;
  void *v18;
  mlir::DictionaryAttr *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x24BDAC8D0];
  v20 = a1;
  v21 = v23;
  v22 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v20, (uint64_t)"alignment", 9, *a2);
    v6 = v5;
    v7 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
      v7 = v22;
    }
    v8 = (uint64_t *)((char *)v21 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v22) = v22 + 1;
  }
  v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 1), 2);
  v10 = mlir::Builder::getNamedAttr(&v20, (uint64_t)"operandSegmentSizes", 19, v9);
  v12 = v11;
  v13 = v22;
  if (v22 >= HIDWORD(v22))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
    v13 = v22;
  }
  v14 = (uint64_t *)((char *)v21 + 16 * v13);
  *v14 = v10;
  v14[1] = v12;
  v15 = __CFADD__((_DWORD)v22, 1);
  v16 = (v22 + 1);
  LODWORD(v22) = v22 + 1;
  if (v15)
  {
    DictionaryAttr = 0;
    v18 = v21;
    if (v21 == v23)
      return DictionaryAttr;
    goto LABEL_12;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v20, (mlir::MLIRContext *)v21, v16);
  v18 = v21;
  if (v21 != v23)
LABEL_12:
    free(v18);
  return DictionaryAttr;
}

unint64_t mlir::memref::AllocOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  _OWORD v33[3];
  _OWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = &unk_254519000;
  if ((v2 & 1) == 0)
  {
    v26 = a1;
    v29 = *a1;
    v3 = &unk_254519000;
    v15 = v14;
    a1 = v26;
    v1 = v29;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      a1 = v26;
      v1 = v29;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v4 = v3[373];
  if ((v5 & 1) == 0)
  {
    v27 = a1;
    v30 = v1;
    v24 = v3[373];
    v1 = v30;
    v3 = &unk_254519000;
    v18 = v17;
    v4 = v24;
    a1 = v27;
    if (v18)
    {
      v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v19 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v19;
      v4 = v24;
      a1 = v27;
      v1 = v30;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v6 = v3[373];
  v8 = *((unsigned int *)a1 + 2);
  v7 = *((unsigned int *)a1 + 3);
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  v32 = 0u;
  if ((v9 & 1) == 0)
  {
    v28 = v6;
    v31 = v1;
    v23 = v7;
    v25 = v4;
    v22 = v8;
    v8 = v22;
    v7 = v23;
    v4 = v25;
    v6 = v28;
    v1 = v31;
    v3 = &unk_254519000;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v8 = v22;
      v7 = v23;
      v4 = v25;
      v6 = v28;
      v1 = v31;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v10 = 0x9DDFEA08EB382D69
      * (v6 ^ v7 ^ ((0x9DDFEA08EB382D69 * (v6 ^ v7 ^ (8 * v8 + 8))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                              * (v6 ^ v7 ^ (8 * v8 + 8))));
  v11 = HIDWORD(v1);
  v12 = 0x9DDFEA08EB382D69 * ((v4 + 8 * v1) ^ HIDWORD(v1));
  v36 = v3[373];
  *(_QWORD *)&v32 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69
                                                                          * (v11 ^ (v12 >> 47) ^ v12)) >> 47));
  *((_QWORD *)&v32 + 1) = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v32, 0, (char *)v33, (char *)v34);
}

uint64_t mlir::memref::AllocOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t a2, _QWORD *__s1, size_t __n)
{
  if (__n == 21)
  {
    if (!memcmp(__s1, "operand_segment_sizes", 0x15uLL))
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, a2 + 8, 2);
    return 0;
  }
  if (__n != 19)
  {
    if (__n == 9 && *__s1 == 0x6E656D6E67696C61 && *((_BYTE *)__s1 + 8) == 116)
      return *(_QWORD *)a2;
    return 0;
  }
  if (memcmp(__s1, "operandSegmentSizes", 0x13uLL))
    return 0;
  return mlir::detail::DenseArrayAttrImpl<int>::get(a1, a2 + 8, 2);
}

uint64_t mlir::memref::AllocOp::setInherentAttr(uint64_t result, _QWORD *__s1, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  if (a3 == 21)
  {
    result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    if (a3 != 19)
    {
      if (a3 == 9 && *__s1 == 0x6E656D6E67696C61 && *((_BYTE *)__s1 + 8) == 116)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
            v9 = a4;
          else
            v9 = 0;
          *(_QWORD *)result = v9;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      return result;
    }
    result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if ((_DWORD)result)
      return result;
  }
  if (a4)
  {
    result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    v7 = (_DWORD)result ? a4 : 0;
    v10 = v7;
    if ((_DWORD)result)
    {
      result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v10);
      if (result == 2)
      {
        result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v10);
        if (v8)
          return (uint64_t)memmove((void *)(v5 + 8), (const void *)result, 4 * v8);
      }
    }
  }
  return result;
}

void mlir::memref::AllocOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"alignment", 9, *a2);
  v6 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 1), 2);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v6);
}

BOOL mlir::memref::AllocOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  const void **v6;

  v6 = (const void **)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v6, (const void **)"alignment", (const char *)9, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(const void **a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  const void **v32;
  const void **v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t Value;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v33 = a1;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v33);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
    {
      v32 = a1;
      if ((mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v32) & 0x8000000000000000) == 0)
        return 1;
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v33) = 3;
    v34 = "attribute '";
    v35 = 11;
    v11 = &v33;
    v12 = (char *)v39;
    if (v40 >= v41)
    {
      v28 = v40 + 1;
      if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
      {
        v30 = (char *)&v33 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        v12 = (char *)v39;
        v11 = (const void ***)((char *)v39 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v28, 24);
        v11 = &v33;
        v12 = (char *)v39;
      }
    }
    v13 = &v12[24 * v40];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v40;
    if (Value)
    {
      v36 = 261;
      v33 = a2;
      v34 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v38, &v33);
      if (Value)
      {
        LODWORD(v33) = 3;
        v34 = "' failed to satisfy constraint: 64-bit signless integer attribute whose minimum value is 0";
        v35 = 90;
        v15 = &v33;
        v16 = (char *)v39;
        if (v40 >= v41)
        {
          v29 = v40 + 1;
          if (v39 <= &v33 && (char *)v39 + 24 * v40 > (char *)&v33)
          {
            v31 = (char *)&v33 - (_BYTE *)v39;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            v16 = (char *)v39;
            v15 = (const void ***)((char *)v39 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v29, 24);
            v15 = &v33;
            v16 = (char *)v39;
          }
        }
        v17 = &v16[24 * v40];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v40;
      }
    }
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  if (v47)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v46;
      v21 = __p;
      if (v46 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v46 = v19;
      operator delete(v21);
    }
    v22 = v43;
    if (v43)
    {
      v23 = v44;
      v24 = v43;
      if (v44 != v43)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v43;
      }
      v44 = v22;
      operator delete(v24);
    }
    if (v39 != v42)
      free(v39);
  }
  return v10;
}

BOOL mlir::memref::AllocOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = __p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = *--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                MEMORY[0x20BD002D4](v10, 0x1000C8077774924);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 1, v12, 4 * v13);
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 2, (const char *)2);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::AllocOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[293];
    return a1[32];
  }
  return result;
}

uint64_t mlir::memref::AllocOp::writeProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)v4);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
    v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 8, 2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 8), 2);
  return result;
}

void mlir::memref::AllocOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t DenseI32ArrayAttr;
  mlir::StringAttr *Context;
  uint64_t v19;
  mlir::StringAttr *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v16 = *(unsigned int *)(a2 + 72);
  if (v16 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v16) = a3;
  ++*(_DWORD *)(a2 + 72);
  mlir::OperationState::addOperands(a2, a4, a5);
  mlir::OperationState::addOperands(a2, a6, a7);
  v27[0] = a5;
  v27[1] = a7;
  DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a1, (uint64_t)v27, 2);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v24 = 261;
  v22 = "operandSegmentSizes";
  v23 = 19;
  v19 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v22);
  ZinMirCacheTensors::ZinMirCacheTensors(&v25, v19, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v25, v26);
  if (a8)
  {
    v20 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
    v24 = 261;
    v22 = "alignment";
    v23 = 9;
    v21 = mlir::StringAttr::get(v20, (mlir::MLIRContext *)&v22);
    ZinMirCacheTensors::ZinMirCacheTensors(&v25, v21, a8);
    mlir::NamedAttrList::push_back(a2 + 112, v25, v26);
  }
}

BOOL mlir::memref::AllocOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t NextResultAtOffset;
  uint64_t *v25;

  v2 = *this;
  v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v25 = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v3, (const void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v25))return 0;
  v4 = *this;
  v5 = *((unsigned int *)*this + 11);
  v6 = (v5 >> 23) & 1;
  v7 = (uint64_t)&(*this)[2 * v6 + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v7 = 0;
  v8 = *(unsigned int *)(v7 + 8);
  if ((v5 & 0x800000) != 0)
  {
    v9 = v4[9];
    if ((_DWORD)v8)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    if ((_DWORD)v8)
    {
LABEL_6:
      v10 = 0;
      v11 = v9 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v10))
      {
        ++v10;
        v11 += 32;
        if (v8 == v10)
        {
          v4 = *this;
          v5 = *((unsigned int *)*this + 11);
          v6 = (v5 >> 23) & 1;
          v12 = v5 & 0x800000;
          goto LABEL_12;
        }
      }
      return 0;
    }
  }
  v12 = v5 & 0x800000;
LABEL_12:
  v13 = (uint64_t)&v4[2 * v6 + 8];
  if (BYTE3(v5))
    v14 = v13;
  else
    v14 = 0;
  v15 = *(_DWORD *)(v14 + 12);
  if (v12)
  {
    v16 = v4[9];
    if (v15)
      goto LABEL_17;
  }
  else
  {
    v16 = 0;
    if (v15)
    {
LABEL_17:
      v17 = *(unsigned int *)(v14 + 8);
      v18 = (v15 + v17) - v17;
      v19 = v16 + 32 * v17 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v8))
      {
        LODWORD(v8) = v8 + 1;
        v19 += 32;
        if (!--v18)
        {
          v4 = *this;
          goto LABEL_21;
        }
      }
      return 0;
    }
  }
LABEL_21:
  v20 = *((_DWORD *)v4 + 9);
  v21 = v4 - 2;
  if (v20)
    v22 = (uint64_t)v21;
  else
    v22 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::memref::AllocOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  mlir::IndexType **v8;
  mlir::MLIRContext *v9;
  uint64_t IndexType;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  _QWORD __src[3];
  void *v21;
  uint64_t v22;
  _BYTE v23[128];
  void *v24;
  uint64_t v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x24BDAC8D0];
  v24 = v26;
  v25 = 0x400000000;
  v21 = v23;
  v22 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    goto LABEL_21;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v24, 0, 1, 0xFFFFFFFFLL))goto LABEL_21;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    goto LABEL_21;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v21, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
    {
      goto LABEL_21;
    }
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_21;
  v4 = a2[1];
  __src[0] = a1;
  __src[1] = &v19;
  __src[2] = a2;
  v5 = (const void **)mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v4 + 96));
  if (v5)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v5, (const void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_21;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_21;
  v19 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v19))
    goto LABEL_21;
  __src[0] = v19;
  v6 = v25;
  v7 = v22;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(a2)
            + 8) = v6 | (v7 << 32);
  v8 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v8, v9);
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  v11 = a2 + 2;
  if ((_DWORD)v25)
  {
    v12 = (char *)v24;
    v13 = 32 * v25;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, IndexType, v11))
    {
      v12 += 32;
      v13 -= 32;
      if (!v13)
        goto LABEL_16;
    }
LABEL_21:
    v16 = 0;
LABEL_22:
    v17 = v21;
    if (v21 != v23)
      goto LABEL_23;
    goto LABEL_24;
  }
LABEL_16:
  if ((_DWORD)v22)
  {
    v14 = (char *)v21;
    v15 = 32 * v22;
    v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v14, IndexType, v11))
    {
      v14 += 32;
      v15 -= 32;
      if (!v15)
        goto LABEL_22;
    }
    goto LABEL_21;
  }
  v16 = 1;
  v17 = v21;
  if (v21 != v23)
LABEL_23:
    free(v17);
LABEL_24:
  if (v24 != v26)
    free(v24);
  return v16;
}

void mlir::memref::AllocOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  unint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  mlir::Operation *v26;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v39;
  uint64_t v40;
  _QWORD v41[5];

  v41[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    *v5 = 40;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = *((unsigned int *)*this + 11);
  v7 = (uint64_t)*this + 16 * ((v6 >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v7 = 0;
  v8 = *(unsigned int *)(v7 + 8);
  if ((v6 & 0x800000) != 0)
    v9 = *((_QWORD *)*this + 9);
  else
    v9 = 0;
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v39 = ", ";
  v40 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v9, 0, v9, v8, (uint64_t)a2, v10, (uint64_t)&v39);
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ")", 1uLL);
  }
  else
  {
    *v12 = 41;
    ++*((_QWORD *)v11 + 4);
  }
  v13 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v13 = 0;
  if (*(_DWORD *)(v13 + 12))
  {
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, "[", 1uLL);
    }
    else
    {
      *v15 = 91;
      ++*((_QWORD *)v14 + 4);
    }
    v16 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11)))
      v17 = (uint64_t)*this + 16 * ((v16 >> 23) & 1) + 64;
    else
      v17 = 0;
    v18 = *(unsigned int *)(v17 + 8);
    v19 = *(_DWORD *)(v17 + 12);
    if ((v16 & 0x800000) != 0)
      v20 = *((_QWORD *)*this + 9);
    else
      v20 = 0;
    v21 = v20 + 32 * v18;
    v22 = (v19 + v18) - v18;
    v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v39 = ", ";
    v40 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v21, 0, v21, v22, (uint64_t)a2, v23, (uint64_t)&v39);
    v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v25 = (_BYTE *)*((_QWORD *)v24 + 4);
    if (*((_BYTE **)v24 + 3) == v25)
    {
      llvm::raw_ostream::write(v24, "]", 1uLL);
    }
    else
    {
      *v25 = 93;
      ++*((_QWORD *)v24 + 4);
    }
  }
  v39 = v41;
  v41[0] = "operandSegmentSizes";
  v41[1] = 19;
  v40 = 0x200000001;
  v26 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v26);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v26 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v29, v39, v40);
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 32;
  }
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if (*((_BYTE **)v32 + 3) == v33)
  {
    llvm::raw_ostream::write(v32, ":", 1uLL);
  }
  else
  {
    *v33 = 58;
    ++*((_QWORD *)v32 + 4);
  }
  v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = (_BYTE *)*((_QWORD *)v34 + 4);
  if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
  {
    llvm::raw_ostream::write(v34, 32);
  }
  else
  {
    *((_QWORD *)v34 + 4) = v35 + 1;
    *v35 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v36 = (uint64_t)*this - 16;
  else
    v36 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v39 != v41)
    free(v39);
}

void mlir::memref::AllocOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t NextResultAtOffset;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned __int8 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v3 = *(_QWORD *)a1 - 16;
  else
    v3 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, 0);
  v5 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get();
  if ((v6 & 1) == 0)
  {
    v27 = v5;
    v5 = v27;
    if (v17)
    {
      if ((v18 & 1) == 0
      {
        v28 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v29 = 84;
        v20 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
        if (v29 >= v20)
          v21 = v20;
        else
          v21 = v29;
        v22 = &v28[v21];
        v23 = v29 - v21;
        if (v29 - v21 >= 0x12)
          v24 = 18;
        else
          v24 = v29 - v21;
        v25 = v23 - v24;
        if (v25 >= v25 - 1)
          v26 = v25 - 1;
        else
          v26 = v25;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v5 = v27;
    }
  }
  v7 = *(unsigned int *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    v9 = (void *)(a2 + 16);
    v28 = (const char *)v5;
    v29 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v30 = NextResultAtOffset | 4;
    v31 = 0;
    v32 = 0;
    v33 = 1;
    v10 = v7 + 1;
    v11 = *(_QWORD *)a2 + 40 * (unint64_t)v7 > (unint64_t)&v28;
    if (*(_QWORD *)a2 <= (unint64_t)&v28 && v11)
    {
      v19 = (char *)&v28 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v9, v10, 40);
      v12 = *(_QWORD *)a2;
      v13 = (const char **)&v19[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v9, v10, 40);
      v12 = *(_QWORD *)a2;
      v13 = &v28;
    }
    v14 = v12 + 40 * *(unsigned int *)(a2 + 8);
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    *(_QWORD *)(v14 + 32) = v13[4];
    *(_OWORD *)v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
  }
  else
  {
    v8 = *(_QWORD *)a2 + 40 * v7;
    *(_QWORD *)v8 = v5;
    *(_QWORD *)(v8 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v8 + 16) = NextResultAtOffset | 4;
    *(_QWORD *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 32) = 0;
    *(_BYTE *)(v8 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AllocaOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = __p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = *--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                MEMORY[0x20BD002D4](v10, 0x1000C8077774924);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 1, v12, 4 * v13);
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 2, (const char *)2);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[295];
    return a1[32];
  }
  return result;
}

void mlir::memref::AllocaOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v10, 0, 0);
  v8 = v10[0];
  v9 = v10[1];
  mlir::ValueRange::ValueRange(v11, 0, 0);
  mlir::memref::AllocOp::build(a1, a2, a3, v8, v9, v11[0], v11[1], a4);
}

uint64_t mlir::memref::AllocaOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  mlir::IndexType **v8;
  mlir::MLIRContext *v9;
  uint64_t IndexType;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  _QWORD __src[3];
  void *v21;
  uint64_t v22;
  _BYTE v23[128];
  void *v24;
  uint64_t v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x24BDAC8D0];
  v24 = v26;
  v25 = 0x400000000;
  v21 = v23;
  v22 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    goto LABEL_21;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v24, 0, 1, 0xFFFFFFFFLL))goto LABEL_21;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    goto LABEL_21;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v21, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
    {
      goto LABEL_21;
    }
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_21;
  v4 = a2[1];
  __src[0] = a1;
  __src[1] = &v19;
  __src[2] = a2;
  v5 = (const void **)mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v4 + 96));
  if (v5)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v5, (const void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocaOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_21;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_21;
  v19 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v19))
    goto LABEL_21;
  __src[0] = v19;
  v6 = v25;
  v7 = v22;
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(a2)
            + 8) = v6 | (v7 << 32);
  v8 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v8, v9);
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  v11 = a2 + 2;
  if ((_DWORD)v25)
  {
    v12 = (char *)v24;
    v13 = 32 * v25;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v12, IndexType, v11))
    {
      v12 += 32;
      v13 -= 32;
      if (!v13)
        goto LABEL_16;
    }
LABEL_21:
    v16 = 0;
LABEL_22:
    v17 = v21;
    if (v21 != v23)
      goto LABEL_23;
    goto LABEL_24;
  }
LABEL_16:
  if ((_DWORD)v22)
  {
    v14 = (char *)v21;
    v15 = 32 * v22;
    v16 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v14, IndexType, v11))
    {
      v14 += 32;
      v15 -= 32;
      if (!v15)
        goto LABEL_22;
    }
    goto LABEL_21;
  }
  v16 = 1;
  v17 = v21;
  if (v21 != v23)
LABEL_23:
    free(v17);
LABEL_24:
  if (v24 != v26)
    free(v24);
  return v16;
}

void mlir::memref::AllocaOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t NextResultAtOffset;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned __int8 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v3 = *(_QWORD *)a1 - 16;
  else
    v3 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, 0);
  v5 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get();
  if ((v6 & 1) == 0)
  {
    v27 = v5;
    v5 = v27;
    if (v17)
    {
      if ((v18 & 1) == 0
      {
        v28 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::AutomaticAllocationScopeResource]";
        v29 = 101;
        v20 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
        if (v29 >= v20)
          v21 = v20;
        else
          v21 = v29;
        v22 = &v28[v21];
        v23 = v29 - v21;
        if (v29 - v21 >= 0x12)
          v24 = 18;
        else
          v24 = v29 - v21;
        v25 = v23 - v24;
        if (v25 >= v25 - 1)
          v26 = v25 - 1;
        else
          v26 = v25;
        mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::AutomaticAllocationScopeResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E850;
      unk_25451B950 = mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id;
      v5 = v27;
    }
  }
  v7 = *(unsigned int *)(a2 + 8);
  if (v7 >= *(_DWORD *)(a2 + 12))
  {
    v9 = (void *)(a2 + 16);
    v28 = (const char *)v5;
    v29 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::AutomaticAllocationScopeResource,mlir::SideEffects::Resource>::get(void)::instance;
    v30 = NextResultAtOffset | 4;
    v31 = 0;
    v32 = 0;
    v33 = 1;
    v10 = v7 + 1;
    v11 = *(_QWORD *)a2 + 40 * (unint64_t)v7 > (unint64_t)&v28;
    if (*(_QWORD *)a2 <= (unint64_t)&v28 && v11)
    {
      v19 = (char *)&v28 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v9, v10, 40);
      v12 = *(_QWORD *)a2;
      v13 = (const char **)&v19[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v9, v10, 40);
      v12 = *(_QWORD *)a2;
      v13 = &v28;
    }
    v14 = v12 + 40 * *(unsigned int *)(a2 + 8);
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    *(_QWORD *)(v14 + 32) = v13[4];
    *(_OWORD *)v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
  }
  else
  {
    v8 = *(_QWORD *)a2 + 40 * v7;
    *(_QWORD *)v8 = v5;
    *(_QWORD *)(v8 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::AutomaticAllocationScopeResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v8 + 16) = NextResultAtOffset | 4;
    *(_QWORD *)(v8 + 24) = 0;
    *(_DWORD *)(v8 + 32) = 0;
    *(_BYTE *)(v8 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

BOOL mlir::memref::AllocaScopeOp::verifyInvariantsImpl(mlir::memref::AllocaScopeOp *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unint64_t v6;
  uint64_t v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  BOOL v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  _QWORD v31[4];
  __int16 v32;
  const void **v33[4];
  __int16 v34;
  const void **v35;
  __int16 v36;
  int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE v45[96];
  void *v46;
  _QWORD *v47;
  void *__p;
  _QWORD *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)this;
  v3 = *(unsigned int *)(v2 + 36);
  if (*(_DWORD *)(v2 + 36))
    v4 = v2 - 16;
  else
    v4 = 0;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    v2 = *(_QWORD *)this;
  }
  v6 = ((v2
       + 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)
       + (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)
       + 71) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *(unsigned int *)(v2 + 40);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7 != v6 && *(_QWORD *)(v7 + 8) == v6)
    return 1;
  v35 = (const void **)"region #";
  v36 = 259;
  mlir::Operation::emitOpError((uint64_t *)v2, &v35, (uint64_t)&v40);
  if (v40)
  {
    LODWORD(v33[0]) = 5;
    v33[1] = 0;
    v8 = v33;
    v9 = (char *)v42;
    if (v43 >= v44)
    {
      v27 = v43 + 1;
      if (v42 <= v33 && (char *)v42 + 24 * v43 > (char *)v33)
      {
        v29 = (char *)v33 - (_BYTE *)v42;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        v9 = (char *)v42;
        v8 = (const void ***)((char *)v42 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v27, 24);
        v8 = v33;
        v9 = (char *)v42;
      }
    }
    v10 = &v9[24 * v43];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v43;
    v12 = v40 == 0;
  }
  else
  {
    v12 = 1;
  }
  v32 = 1283;
  v31[0] = " ('";
  v31[2] = "bodyRegion";
  v31[3] = 10;
  v33[0] = (const void **)v31;
  v33[2] = (const void **)"') ";
  v34 = 770;
  if (!v12)
  {
    mlir::Diagnostic::operator<<((uint64_t)&v41, v33);
    if (v40)
    {
      v37 = 3;
      v38 = "failed to verify constraint: region with 1 blocks";
      v39 = 49;
      v13 = &v37;
      v14 = (char *)v42;
      if (v43 >= v44)
      {
        v28 = v43 + 1;
        if (v42 <= &v37 && (char *)v42 + 24 * v43 > (char *)&v37)
        {
          v30 = (char *)&v37 - (_BYTE *)v42;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          v14 = (char *)v42;
          v13 = (int *)((char *)v42 + v30);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v28, 24);
          v13 = &v37;
          v14 = (char *)v42;
        }
      }
      v15 = &v14[24 * v43];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      ++v43;
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  if (v50)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v49;
      v20 = __p;
      if (v49 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v49 = v18;
      operator delete(v20);
    }
    v21 = v46;
    if (v46)
    {
      v22 = v47;
      v23 = v46;
      if (v47 != v46)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v46;
      }
      v47 = v21;
      operator delete(v23);
    }
    if (v42 != v45)
      free(v42);
  }
  return v17 != 0;
}

BOOL mlir::memref::AllocaScopeReturnOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| (_DWORD)v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    v5 = 0;
    v6 = v8[0];
    if (v8[0] == &v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  v6 = v8[0];
  if (v8[0] != &v9)
LABEL_9:
    free(v6);
LABEL_10:
  if (v10 != v12)
    free(v10);
  return v5;
}

double mlir::memref::AllocaScopeReturnOp::getMutableSuccessorOperands@<D0>(mlir::Operation **a1@<X0>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, *a1);
}

uint64_t mlir::memref::detail::CastOpGenericAdaptorBase::CastOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.cast", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::CastOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::memref::CastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.collapse_shape", 21, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::CollapseShapeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v26 = &v56;
      v27 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v27 = (char *)v60;
          v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v26 = &v56;
          v27 = (char *)v60;
        }
      }
      v28 = &v27[24 * v61];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v33 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "reassociation", 0xDuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for reassociation in DictionaryAttr to set Properties.";
      v58 = 73;
      v36 = &v56;
      v37 = (char *)v60;
      if (v61 >= v62)
      {
        v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v37 = (char *)v60;
          v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v36 = &v56;
          v37 = (char *)v60;
        }
      }
      v38 = &v37[24 * v61];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v40 = __p;
    if (__p)
    {
      v41 = v67;
      v42 = __p;
      if (v67 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v67 = v40;
      operator delete(v42);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v43 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v45 = *--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 58;
    v10 = &v56;
    v11 = (char *)v60;
    if (v61 >= v62)
    {
      v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v11 = (char *)v60;
        v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v10 = &v56;
        v11 = (char *)v60;
      }
    }
    v12 = &v11[24 * v61];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v61;
    if (v59[0])
    {
      v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v15 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v15 = (char *)v60;
          v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v14 = &v56;
          v15 = (char *)v60;
        }
      }
      v16 = &v15[24 * v61];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v67;
      v20 = __p;
      if (v67 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v67 = v18;
      operator delete(v20);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v22 = v65;
    v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v25 = *--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
    }
    while (v22 != v21);
LABEL_57:
    v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::memref::CollapseShapeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"reassociation", 13, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::CollapseShapeOp::getInherentAttr(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  BOOL v4;

  if (a4 == 13
    && (*a3 == 0x69636F7373616572 ? (v4 = *(_QWORD *)((char *)a3 + 5) == 0x6E6F69746169636FLL) : (v4 = 0), v4))
  {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else
  {
    return 0;
  }
}

_QWORD *mlir::memref::CollapseShapeOp::setInherentAttr(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (a3 == 13 && *a2 == 0x69636F7373616572 && *(_QWORD *)((char *)a2 + 5) == 0x6E6F69746169636FLL)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v5 = a4;
      else
        v5 = 0;
      *result = v5;
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

void mlir::memref::CollapseShapeOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"reassociation", 13, *a2);
}

BOOL mlir::memref::CollapseShapeOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v6, (const void **)"reassociation", (const char *)0xD, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void **v41;
  const char *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[96];
  void *v51;
  _QWORD *v52;
  void *__p;
  _QWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    v39 = a1;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(_QWORD *)Value
           && *(_UNKNOWN **)(**(_QWORD **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
      {
        v40 = *(_QWORD *)Value;
        v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
        v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
        v33 = v31 + 8 * v32;
        if (v33 != v30)
        {
          while (*(_QWORD *)v30)
          {
            if (*(_UNKNOWN **)(**(_QWORD **)v30 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
              break;
            v41 = *(const void ***)v30;
            v45 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
            if (!mlir::Type::isSignlessInteger((mlir::Type *)&v45, 64))
              break;
            v30 += 8;
            if (v30 == v33)
              goto LABEL_31;
          }
          goto LABEL_3;
        }
LABEL_31:
        Value += 8;
        if (Value == v29)
          return 1;
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v45, a5);
  if (v45)
  {
    LODWORD(v41) = 3;
    v42 = "attribute '";
    v43 = 11;
    v9 = &v41;
    v10 = (char *)v47;
    if (v48 >= v49)
    {
      v35 = v48 + 1;
      if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
      {
        v37 = (char *)&v41 - (_BYTE *)v47;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
        v10 = (char *)v47;
        v9 = (const void ***)((char *)v47 + v37);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
        v9 = &v41;
        v10 = (char *)v47;
      }
    }
    v11 = &v10[24 * v48];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v48;
    if (v45)
    {
      v44 = 261;
      v41 = a2;
      v42 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v46, &v41);
      if (v45)
      {
        LODWORD(v41) = 3;
        v42 = "' failed to satisfy constraint: Array of 64-bit integer array attributes";
        v43 = 72;
        v13 = &v41;
        v14 = (char *)v47;
        if (v48 >= v49)
        {
          v36 = v48 + 1;
          if (v47 <= &v41 && (char *)v47 + 24 * v48 > (char *)&v41)
          {
            v38 = (char *)&v41 - (_BYTE *)v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
            v14 = (char *)v47;
            v13 = (const void ***)((char *)v47 + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
            v13 = &v41;
            v14 = (char *)v47;
          }
        }
        v15 = &v14[24 * v48];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v48;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  if (v55)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v54;
      v20 = __p;
      if (v54 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v54 = v18;
      operator delete(v20);
    }
    v21 = v51;
    if (v51)
    {
      v22 = v52;
      v23 = v51;
      if (v52 != v51)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v51;
      }
      v52 = v21;
      operator delete(v23);
    }
    if (v47 != v50)
      free(v47);
  }
  return v17;
}

BOOL mlir::memref::CollapseShapeOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties]";
        v15 = 117;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[300];
    return a1[32];
  }
  return result;
}

BOOL mlir::memref::CollapseShapeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const void **v16;
  __int16 v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v3, (const void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v4 = (uint64_t)(*this - 2);
      else
        v4 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v16 = (const void **)"requires attribute 'reassociation'";
    v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    if (v25)
    {
      v7 = __p;
      if (__p)
      {
        v8 = v24;
        v9 = __p;
        if (v24 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v24 = v7;
        operator delete(v9);
      }
      v10 = v21;
      if (v21)
      {
        v11 = v22;
        v12 = v21;
        if (v22 != v21)
        {
          do
          {
            v14 = *--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              MEMORY[0x20BD002D4](v13, 0x1000C8077774924);
          }
          while (v11 != v10);
          v12 = v21;
        }
        v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v6;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  const void **v49[4];
  __int16 v50;
  int v51;
  const char *v52;
  uint64_t v53;
  _QWORD v54[3];
  void *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[96];
  void *v59;
  _QWORD *v60;
  void *__p;
  _QWORD *v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v54[0] = a2;
    v54[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v10 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v54);
    if (mlir::isStrided(a2))
      return 1;
  }
  v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    v51 = 3;
    v52 = " #";
    v53 = 2;
    v12 = &v51;
    v13 = (char *)v55;
    if (v56 >= v57)
    {
      v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        v45 = (char *)&v51 - (_BYTE *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        v13 = (char *)v55;
        v12 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        v12 = &v51;
        v13 = (char *)v55;
      }
    }
    v14 = &v13[24 * v56];
    v15 = *(_OWORD *)v12;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v14 = v15;
    v16 = ++v56;
    if (v54[0])
    {
      v51 = 5;
      v52 = (const char *)a5;
      v17 = &v51;
      v18 = (char *)v55;
      if (v16 >= v57)
      {
        v40 = v16 + 1;
        v41 = (char *)v55 + 24 * v16 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          v46 = (char *)&v51 - (_BYTE *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          v18 = (char *)v55;
          v17 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          v17 = &v51;
          v18 = (char *)v55;
        }
      }
      v19 = &v18[24 * v56];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v19 = v20;
      v21 = ++v56;
      if (v54[0])
      {
        v51 = 3;
        v52 = " must be strided memref of any type values, but got ";
        v53 = 52;
        v22 = &v51;
        v23 = (char *)v55;
        if (v21 >= v57)
        {
          v42 = v21 + 1;
          v43 = (char *)v55 + 24 * v21 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            v47 = (char *)&v51 - (_BYTE *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            v23 = (char *)v55;
            v22 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            v22 = &v51;
            v23 = (char *)v55;
          }
        }
        v24 = &v23[24 * v56];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        ++v56;
        if (v54[0])
        {
          v26 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          v27 = (char *)v55;
          if (v56 >= v57)
          {
            v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              v48 = (char *)&v51 - (_BYTE *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v27 = (char *)v55;
              v26 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v26 = &v51;
              v27 = (char *)v55;
            }
          }
          v28 = &v27[24 * v56];
          v29 = *(_OWORD *)v26;
          *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v28 = v29;
          ++v56;
        }
      }
    }
  }
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  if (v63)
  {
    v30 = __p;
    if (__p)
    {
      v31 = v62;
      v32 = __p;
      if (v62 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v62 = v30;
      operator delete(v32);
    }
    v33 = v59;
    if (v59)
    {
      v34 = v60;
      v35 = v59;
      if (v60 != v59)
      {
        do
        {
          v37 = *--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
        }
        while (v34 != v33);
        v35 = v59;
      }
      v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58)
      free(v55);
  }
  return v11;
}

BOOL mlir::memref::CollapseShapeOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  mlir::NoneType **v5;
  mlir::MLIRContext *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[4];
  _QWORD __src[4];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  v5 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v7 = mlir::NoneType::get(*v5, v6);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v14, v7))
    return 0;
  if (v14)
  {
    v8 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(a2);
    *v8 = v14;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v9 = a2[1];
  __src[0] = a1;
  __src[1] = &v12;
  __src[2] = a2;
  v10 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v9 + 96));
  if (v10)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v10, (const void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::CollapseShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, __src))
    return 0;
  v16 = __src[0];
  v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "into", 4, __src))return 0;
  v12 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v12))
    return 0;
  __src[0] = v12;
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, (uint64_t)(a2 + 2)) != 0;
}

void mlir::memref::CollapseShapeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  v27 = v29;
  v29[0] = "reassociation";
  v29[1] = 13;
  v28 = 0x200000001;
  v8 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v8);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v8 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v11, v27, v28);
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    *v15 = 58;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_DWORD *)*((_QWORD *)v20 + 4);
  if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 3uLL)
  {
    *v21 = 1869901417;
    *((_QWORD *)v20 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v20, "into", 4uLL);
  }
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((_QWORD *)v22 + 4) = v23 + 1;
    *v23 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v24 = (uint64_t)*this - 16;
  else
    v24 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v24, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v27 != v29)
    free(v27);
}

uint64_t mlir::memref::detail::DeallocOpGenericAdaptorBase::DeallocOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.dealloc", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::DeallocOp::verifyInvariantsImpl(uint64_t **this)
{
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

BOOL mlir::memref::DeallocOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v6 = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v6))
    return 0;
  v9 = v6;
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

void mlir::memref::DeallocOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  const char **v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unsigned __int8 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Free,mlir::MemoryEffects::Effect>::get();
  if ((v5 & 1) == 0)
  {
    v26 = v4;
    v4 = v26;
    if (v16)
    {
      if ((v17 & 1) == 0
      {
        v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v28 = 84;
        v19 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
        if (v28 >= v19)
          v20 = v19;
        else
          v20 = v28;
        v21 = &v27[v20];
        v22 = v28 - v20;
        if (v28 - v20 >= 0x12)
          v23 = 18;
        else
          v23 = v28 - v20;
        v24 = v22 - v23;
        if (v24 >= v24 - 1)
          v25 = v24 - 1;
        else
          v25 = v24;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v4 = v26;
    }
  }
  v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    v8 = (void *)(a2 + 16);
    v27 = (const char *)v4;
    v28 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v29 = v3 | 4;
    v30 = 0;
    v31 = 0;
    v32 = 1;
    v9 = v6 + 1;
    v10 = *(_QWORD *)a2 + 40 * (unint64_t)v6 > (unint64_t)&v27;
    if (*(_QWORD *)a2 <= (unint64_t)&v27 && v10)
    {
      v18 = (char *)&v27 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      v11 = *(_QWORD *)a2;
      v12 = (const char **)&v18[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      v11 = *(_QWORD *)a2;
      v12 = &v27;
    }
    v13 = v11 + 40 * *(unsigned int *)(a2 + 8);
    v14 = *(_OWORD *)v12;
    v15 = *((_OWORD *)v12 + 1);
    *(_QWORD *)(v13 + 32) = v12[4];
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
  }
  else
  {
    v7 = *(_QWORD *)a2 + 40 * v6;
    *(_QWORD *)v7 = v4;
    *(_QWORD *)(v7 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v7 + 16) = v3 | 4;
    *(_QWORD *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    *(_BYTE *)(v7 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t *mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Free,mlir::MemoryEffects::Effect>::get()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;

  if ((v0 & 1) != 0
  {
    return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Free>(void)::instance;
  }
  if ((v2 & 1) == 0
  {
    v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Free]";
    v11 = 75;
    v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
    if (v11 >= v3)
      v4 = v3;
    else
      v4 = v11;
    v5 = &v10[v4];
    v6 = v11 - v4;
    if (v11 - v4 >= 0x12)
      v7 = 18;
    else
      v7 = v11 - v4;
    v8 = v6 - v7;
    if (v8 >= v8 - 1)
      v9 = v8 - 1;
    else
      v9 = v8;
    mlir::detail::TypeIDResolver<mlir::MemoryEffects::Free,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
  }
  mlir::SideEffects::Effect::get<mlir::MemoryEffects::Free>(void)::instance = mlir::detail::TypeIDResolver<mlir::MemoryEffects::Free,void>::resolveTypeID(void)::id;
  return &mlir::SideEffects::Effect::get<mlir::MemoryEffects::Free>(void)::instance;
}

uint64_t mlir::memref::detail::DimOpGenericAdaptorBase::DimOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.dim", 10, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::DimOp::inferReturnTypes(mlir::IndexType *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12;
  unsigned int v13;
  mlir::IndexType *v15;

  v12 = *(_DWORD *)(a11 + 8);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        v13 = 0;
LABEL_6:
        bzero((void *)(*(_QWORD *)a11 + 8 * v13), 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      v13 = *(_DWORD *)(a11 + 8);
      if (v13 != 1)
        goto LABEL_6;
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  v15 = a1;
  **(_QWORD **)a11 = mlir::Builder::getIndexType(&v15, a2);
  return 1;
}

BOOL mlir::memref::DimOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  char *v20;
  char *v21;
  __int128 v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t NextResultAtOffset;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  const void **v49;
  uint64_t v50;
  __int16 v51;
  _QWORD v52[2];
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  _QWORD v56[3];
  void *v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE v60[96];
  void *v61;
  _QWORD *v62;
  void *__p;
  _QWORD *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)v3;
  v5 = *(void **)(*(_QWORD *)v3 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    v56[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v56[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v56);
  }
  else
  {
    if (v5 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      goto LABEL_33;
    v49 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
    v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8);
    v53 = v3;
    v54 = (const char *)v6;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53)
      || (v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v3 + 8),
          v52[0] = v3,
          v52[1] = v7,
          mlir::ShapedType::getShape((mlir::ShapedType *)v52),
          v8 < 1))
    {
LABEL_33:
      v51 = 261;
      v49 = (const void **)"operand";
      v50 = 7;
      mlir::Operation::emitOpError(v2, &v49, (uint64_t)v56);
      if (v56[0])
      {
        LODWORD(v53) = 3;
        v54 = " #";
        v55 = 2;
        v9 = &v53;
        v10 = (char *)v57;
        if (v58 >= v59)
        {
          v39 = v58 + 1;
          if (v57 <= &v53 && (char *)v57 + 24 * v58 > (char *)&v53)
          {
            v45 = (char *)&v53 - (_BYTE *)v57;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v39, 24);
            v10 = (char *)v57;
            v9 = (unint64_t *)((char *)v57 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v39, 24);
            v9 = &v53;
            v10 = (char *)v57;
          }
        }
        v11 = &v10[24 * v58];
        v12 = *(_OWORD *)v9;
        *((_QWORD *)v11 + 2) = v9[2];
        *(_OWORD *)v11 = v12;
        v13 = ++v58;
        if (v56[0])
        {
          LODWORD(v53) = 5;
          v54 = 0;
          v14 = &v53;
          v15 = (char *)v57;
          if (v13 >= v59)
          {
            v40 = v13 + 1;
            v41 = (char *)v57 + 24 * v13 > (char *)&v53;
            if (v57 <= &v53 && v41)
            {
              v46 = (char *)&v53 - (_BYTE *)v57;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v40, 24);
              v15 = (char *)v57;
              v14 = (unint64_t *)((char *)v57 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v40, 24);
              v14 = &v53;
              v15 = (char *)v57;
            }
          }
          v16 = &v15[24 * v58];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = v14[2];
          *(_OWORD *)v16 = v17;
          v18 = ++v58;
          if (v56[0])
          {
            LODWORD(v53) = 3;
            v54 = " must be unranked.memref of any type values or non-0-ranked.memref of any type values, but got ";
            v55 = 95;
            v19 = &v53;
            v20 = (char *)v57;
            if (v18 >= v59)
            {
              v42 = v18 + 1;
              v43 = (char *)v57 + 24 * v18 > (char *)&v53;
              if (v57 <= &v53 && v43)
              {
                v47 = (char *)&v53 - (_BYTE *)v57;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
                v20 = (char *)v57;
                v19 = (unint64_t *)((char *)v57 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v42, 24);
                v19 = &v53;
                v20 = (char *)v57;
              }
            }
            v21 = &v20[24 * v58];
            v22 = *(_OWORD *)v19;
            *((_QWORD *)v21 + 2) = v19[2];
            *(_OWORD *)v21 = v22;
            ++v58;
            if (v56[0])
            {
              v23 = &v53;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v53, v3);
              v24 = (char *)v57;
              if (v58 >= v59)
              {
                v44 = v58 + 1;
                if (v57 <= &v53 && (char *)v57 + 24 * v58 > (char *)&v53)
                {
                  v48 = (char *)&v53 - (_BYTE *)v57;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  v24 = (char *)v57;
                  v23 = (unint64_t *)((char *)v57 + v48);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v60, v44, 24);
                  v23 = &v53;
                  v24 = (char *)v57;
                }
              }
              v25 = &v24[24 * v58];
              v26 = *(_OWORD *)v23;
              *((_QWORD *)v25 + 2) = v23[2];
              *(_OWORD *)v25 = v26;
              ++v58;
            }
          }
        }
      }
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v56);
      if (v56[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v56);
      if (v65)
      {
        v28 = __p;
        if (__p)
        {
          v29 = v64;
          v30 = __p;
          if (v64 != __p)
          {
            do
              v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
            while (v29 != v28);
            v30 = __p;
          }
          v64 = v28;
          operator delete(v30);
        }
        v31 = v61;
        if (v61)
        {
          v32 = v62;
          v33 = v61;
          if (v62 != v61)
          {
            do
            {
              v35 = *--v32;
              v34 = v35;
              *v32 = 0;
              if (v35)
                MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
            }
            while (v32 != v31);
            v33 = v61;
          }
          v62 = v31;
          operator delete(v33);
        }
        if (v57 != v60)
          free(v57);
      }
      if (!v27)
        return 0;
    }
  }
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))return 0;
  if (*((_DWORD *)*this + 9))
    v36 = (uint64_t)(*this - 2);
  else
    v36 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  const void **v45[4];
  __int16 v46;
  int v47;
  const char *v48;
  uint64_t v49;
  _QWORD v50[3];
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55;
  _QWORD *v56;
  void *__p;
  _QWORD *v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    return 1;
  v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    v47 = 3;
    v48 = " #";
    v49 = 2;
    v7 = &v47;
    v8 = (char *)v51;
    if (v52 >= v53)
    {
      v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        v41 = (char *)&v47 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v8 = (char *)v51;
        v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v7 = &v47;
        v8 = (char *)v51;
      }
    }
    v9 = &v8[24 * v52];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    v11 = ++v52;
    if (v50[0])
    {
      v47 = 5;
      v48 = (const char *)a5;
      v12 = &v47;
      v13 = (char *)v51;
      if (v11 >= v53)
      {
        v36 = v11 + 1;
        v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          v42 = (char *)&v47 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v13 = (char *)v51;
          v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v12 = &v47;
          v13 = (char *)v51;
        }
      }
      v14 = &v13[24 * v52];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v52;
      if (v50[0])
      {
        v47 = 3;
        v48 = " must be index, but got ";
        v49 = 24;
        v17 = &v47;
        v18 = (char *)v51;
        if (v16 >= v53)
        {
          v38 = v16 + 1;
          v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            v43 = (char *)&v47 - (_BYTE *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v18 = (char *)v51;
            v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v17 = &v47;
            v18 = (char *)v51;
          }
        }
        v19 = &v18[24 * v52];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        ++v52;
        if (v50[0])
        {
          v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          v22 = (char *)v51;
          if (v52 >= v53)
          {
            v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              v44 = (char *)&v47 - (_BYTE *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v22 = (char *)v51;
              v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v21 = &v47;
              v22 = (char *)v51;
            }
          }
          v23 = &v22[24 * v52];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          ++v52;
        }
      }
    }
  }
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  if (v59)
  {
    v26 = __p;
    if (__p)
    {
      v27 = v58;
      v28 = __p;
      if (v58 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v58 = v26;
      operator delete(v28);
    }
    v29 = v55;
    if (v55)
    {
      v30 = v56;
      v31 = v55;
      if (v56 != v55)
      {
        do
        {
          v33 = *--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
        }
        while (v30 != v29);
        v31 = v55;
      }
      v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54)
      free(v51);
  }
  return v25;
}

BOOL mlir::memref::DimOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::IndexType **v5;
  mlir::MLIRContext *v6;
  uint64_t v7;
  uint64_t __src;
  _QWORD v10[2];
  uint64_t v11[2];
  uint64_t v12;
  _QWORD v13[4];
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, 24);
  v11[0] = (uint64_t)v14;
  v11[1] = 1;
  memset(v13, 0, 24);
  v12 = 0;
  v10[0] = &v12;
  v10[1] = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v14, 1))
    return 0;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v13, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && (__src = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &__src))
    && (v12 = __src,
        v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
        __src = mlir::Builder::getIndexType(v5, v6),
        mlir::OperationState::addTypes(a2, &__src, 1),
        v7 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v11, v10, v4, v7)))
  {
    return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v13, __src, v7) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::memref::DimOp::print(mlir::memref::DimOp *this, mlir::OpAsmPrinter *a2)
{
  _BYTE *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  unint64_t AttrDictionary;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v21 = v23;
  v22 = 0x200000000;
  v4 = *(_BYTE **)this;
  if (v4[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v7, v21, v22);
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, ",", 1uLL);
  }
  else
  {
    *v11 = 44;
    ++*((_QWORD *)v10 + 4);
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 56));
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v21 != v23)
    free(v21);
}

uint64_t mlir::memref::detail::DmaStartOpGenericAdaptorBase::DmaStartOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.dma_start", 16, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::detail::DmaWaitOpGenericAdaptorBase::DmaWaitOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.dma_wait", 15, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::DmaWaitOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v4 = 4294967294;
    v5 = 32;
LABEL_5:
    v6 = 0;
    v7 = v5 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v6 + 1))
    {
      ++v6;
      v7 += 32;
      if (v4 == v6)
      {
        v2 = *this;
        v8 = v6 + 1;
        if ((*((_BYTE *)*this + 46) & 0x80) != 0)
          goto LABEL_11;
        v9 = 0;
        v10 = -3;
        goto LABEL_12;
      }
    }
    return 0;
  }
  v3 = (*((_DWORD *)v2 + 17) - 1);
  v4 = v3 - 1;
  if (v3 != 1)
  {
    v5 = v2[9] + 32;
    goto LABEL_5;
  }
  v8 = 1;
LABEL_11:
  v11 = *((_DWORD *)v2 + 17);
  v9 = v2[9];
  v10 = v11 - 3;
LABEL_12:
  v12 = (v10 + 2);
  v13 = (v10 + 3) - v12;
  for (i = v9 + 32 * v12 + 24;
        mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v8);
        i += 32)
  {
    ++v8;
    if (!--v13)
      return 1;
  }
  return 0;
}

BOOL mlir::memref::DmaWaitOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::IndexType **v5;
  mlir::MLIRContext *v6;
  uint64_t IndexType;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15[2];
  uint64_t v16;
  void *v17[4];
  void *v18;
  uint64_t v19;
  _BYTE v20[128];
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  memset(v21, 0, 24);
  v15[0] = (uint64_t)v21;
  v15[1] = 1;
  v18 = v20;
  v19 = 0x400000000;
  memset(v17, 0, 24);
  v16 = 0;
  v14[0] = &v16;
  v14[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v21, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v18, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
        {
          if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            if ((*(unsigned __int8 (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
              {
                if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
                {
                  v13 = 0;
                  if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v13))
                  {
                    v16 = v13;
                    v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                    IndexType = mlir::Builder::getIndexType(v5, v6);
                    v8 = a2 + 16;
                    if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v14, v4, v8))
                    {
                      if (!(_DWORD)v19)
                      {
LABEL_15:
                        v11 = (*(unsigned __int8 (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, IndexType, v8) != 0;
                        goto LABEL_17;
                      }
                      v9 = (char *)v18;
                      v10 = 32 * v19;
                      while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, v8))
                      {
                        v9 += 32;
                        v10 -= 32;
                        if (!v10)
                          goto LABEL_15;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v11 = 0;
LABEL_17:
  if (v18 != v20)
    free(v18);
  return v11;
}

void mlir::memref::DmaWaitOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  mlir::Operation *v20;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  unint64_t AttrDictionary;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_6;
  }
  else
  {
    *v7 = 91;
    ++*((_QWORD *)v6 + 4);
    v8 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_6:
      v9 = *((_DWORD *)v8 + 17);
      v10 = *((_QWORD *)v8 + 9);
      v11 = (v9 - 1) - 1;
      goto LABEL_7;
    }
  }
  v10 = 0;
  v11 = 4294967294;
LABEL_7:
  v12 = v10 + 32;
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = ", ";
  v32 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v12, 0, v12, v11, (uint64_t)a2, v13, (uint64_t)&v31);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "]", 1uLL);
  }
  else
  {
    *v15 = 93;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ",", 1uLL);
  }
  else
  {
    *v17 = 44;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 32 * (*((_DWORD *)*this + 17) - 1) + 24));
  v31 = v33;
  v32 = 0x200000000;
  v20 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v20);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v23, v31, v32);
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ":", 1uLL);
  }
  else
  {
    *v27 = 58;
    ++*((_QWORD *)v26 + 4);
  }
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((_QWORD *)v28 + 4) = v29 + 1;
    *v29 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v31 != v33)
    free(v31);
}

uint64_t mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::ExpandShapeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.expand_shape", 19, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::ExpandShapeOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties]";
        v15 = 115;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[304];
    return a1[32];
  }
  return result;
}

BOOL mlir::memref::ExpandShapeOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  mlir::NoneType **v5;
  mlir::MLIRContext *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[4];
  _QWORD __src[4];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, 24);
  v15[0] = (uint64_t)v17;
  v15[1] = 1;
  v13[1] = 1;
  v14 = 0;
  v16 = 0;
  v13[0] = &v16;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v17, 1))
    return 0;
  v5 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v7 = mlir::NoneType::get(*v5, v6);
  if (!mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v14, v7))
    return 0;
  if (v14)
  {
    v8 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(a2);
    *v8 = v14;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    return 0;
  v9 = a2[1];
  __src[0] = a1;
  __src[1] = &v12;
  __src[2] = a2;
  v10 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v9 + 96));
  if (v10)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(v10, (const void **)"reassociation", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ExpandShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, __src))
    return 0;
  v16 = __src[0];
  v19 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "into", 4, __src))return 0;
  v12 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v12))
    return 0;
  __src[0] = v12;
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v13, v4, (uint64_t)(a2 + 2)) != 0;
}

BOOL mlir::memref::ExtractAlignedPointerAsIndexOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::memref::ExtractAlignedPointerAsIndexOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10[2];
  void *__src;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, 24);
  v10[0] = (uint64_t)v15;
  v10[1] = 1;
  v14 = 0;
  v9[0] = &v14;
  v9[1] = 1;
  __src = &v13;
  v12 = 0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v15, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    {
      v8 = 0;
      if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v8))
      {
        v14 = v8;
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
        {
          if (mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
            {
              mlir::OperationState::addTypes(a2, __src, v12);
              v5 = mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, a2 + 16) != 0;
              v6 = __src;
              if (__src == &v13)
                return v5;
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  v5 = 0;
  v6 = __src;
  if (__src != &v13)
LABEL_10:
    free(v6);
  return v5;
}

void mlir::memref::ExtractAlignedPointerAsIndexOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  const char *v19;
  mlir::Operation *v20;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v23;
  const char *AttrDictionary;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    *v9 = 58;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
  {
    *v15 = 15917;
    *((_QWORD *)v14 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v14, "->", 2uLL);
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = *((unsigned int *)*this + 9);
  v19 = (char *)*this - 16;
  if (!(_DWORD)v18)
    v19 = 0;
  AttrDictionary = v19;
  v25 = v18;
  mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, (uint64_t *)&v26);
  AttrDictionary = ", ";
  v25 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v26, v27, v28[0], v28[1], (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  v26 = v28;
  v27 = 0x200000000;
  v20 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v20);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v23, v26, v27);
  if (v26 != v28)
    free(v26);
}

uint64_t mlir::memref::detail::ExtractStridedMetadataOpGenericAdaptorBase::ExtractStridedMetadataOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.extract_strided_metadata", 31, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(mlir::IndexType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  _OWORD v16[3];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18 = a6;
  BYTE8(v18) = 0;
  LOBYTE(v19) = 0;
  *((_QWORD *)&v19 + 1) = a9;
  *(_QWORD *)&v20 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v18);
    if ((_BYTE)v19)
      LOBYTE(v19) = 0;
    mlir::OperationName::OperationName((char *)&v18 + 8, "memref.extract_strided_metadata", 31, Context);
    LOBYTE(v19) = 1;
  }
  *((_QWORD *)&v20 + 1) = a4;
  v21 = a5;
  v16[0] = v18;
  v16[1] = v19;
  v17 = a5;
  v16[2] = v20;
  return mlir::memref::ExtractStridedMetadataOp::inferReturnTypes(a1, a2, a3, (uint64_t)v16, a11);
}

uint64_t mlir::memref::ExtractStridedMetadataOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t *v4;
  const void **v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  const void ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  const void **v69;
  uint64_t v70;
  __int16 v71;
  _QWORD v72[2];
  const void **v73;
  const char *v74;
  uint64_t v75;
  _QWORD v76[3];
  void *v77;
  unsigned int v78;
  unsigned int v79;
  _BYTE v80[96];
  void *v81;
  _QWORD *v82;
  void *__p;
  _QWORD *v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  if (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
    v4 = *this;
    v5 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    v6 = *v5;
    if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      v76[0] = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      v76[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v6 + 8);
      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76);
      if (mlir::isStrided((uint64_t)v5))
      {
        v7 = *v5;
        if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        {
          v69 = v5;
          v70 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v7 + 8);
          mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69);
          v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
          v73 = v5;
          v74 = (const char *)v8;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73))
          {
            v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
            v72[0] = v5;
            v72[1] = v9;
            mlir::ShapedType::getShape((mlir::ShapedType *)v72);
            if (!v10)
              goto LABEL_78;
          }
        }
      }
    }
    v71 = 261;
    v69 = (const void **)"result";
    v70 = 6;
    mlir::Operation::emitOpError(v4, &v69, (uint64_t)v76);
    if (v76[0])
    {
      LODWORD(v73) = 3;
      v74 = " #";
      v75 = 2;
      v11 = &v73;
      v12 = (char *)v77;
      if (v78 >= v79)
      {
        v59 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          v65 = (char *)&v73 - (_BYTE *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          v12 = (char *)v77;
          v11 = (const void ***)((char *)v77 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          v11 = &v73;
          v12 = (char *)v77;
        }
      }
      v13 = &v12[24 * v78];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = v11[2];
      *(_OWORD *)v13 = v14;
      v15 = ++v78;
      if (v76[0])
      {
        LODWORD(v73) = 5;
        v74 = 0;
        v16 = &v73;
        v17 = (char *)v77;
        if (v15 >= v79)
        {
          v60 = v15 + 1;
          v61 = (char *)v77 + 24 * v15 > (char *)&v73;
          if (v77 <= &v73 && v61)
          {
            v66 = (char *)&v73 - (_BYTE *)v77;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v60, 24);
            v17 = (char *)v77;
            v16 = (const void ***)((char *)v77 + v66);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v60, 24);
            v16 = &v73;
            v17 = (char *)v77;
          }
        }
        v18 = &v17[24 * v78];
        v19 = *(_OWORD *)v16;
        *((_QWORD *)v18 + 2) = v16[2];
        *(_OWORD *)v18 = v19;
        v20 = ++v78;
        if (v76[0])
        {
          LODWORD(v73) = 3;
          v74 = " must be strided memref of any type values of rank 0, but got ";
          v75 = 62;
          v21 = &v73;
          v22 = (char *)v77;
          if (v20 >= v79)
          {
            v62 = v20 + 1;
            v63 = (char *)v77 + 24 * v20 > (char *)&v73;
            if (v77 <= &v73 && v63)
            {
              v67 = (char *)&v73 - (_BYTE *)v77;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v62, 24);
              v22 = (char *)v77;
              v21 = (const void ***)((char *)v77 + v67);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v62, 24);
              v21 = &v73;
              v22 = (char *)v77;
            }
          }
          v23 = &v22[24 * v78];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = v21[2];
          *(_OWORD *)v23 = v24;
          ++v78;
          if (v76[0])
          {
            v25 = &v73;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v73, (uint64_t)v5);
            v26 = (char *)v77;
            if (v78 >= v79)
            {
              v64 = v78 + 1;
              if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
              {
                v68 = (char *)&v73 - (_BYTE *)v77;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v64, 24);
                v26 = (char *)v77;
                v25 = (const void ***)((char *)v77 + v68);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v64, 24);
                v25 = &v73;
                v26 = (char *)v77;
              }
            }
            v27 = &v26[24 * v78];
            v28 = *(_OWORD *)v25;
            *((_QWORD *)v27 + 2) = v25[2];
            *(_OWORD *)v27 = v28;
            ++v78;
          }
        }
      }
    }
    v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v76);
    if (v76[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v76);
    if (v85)
    {
      v30 = __p;
      if (__p)
      {
        v31 = v84;
        v32 = __p;
        if (v84 != __p)
        {
          do
            v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          v32 = __p;
        }
        v84 = v30;
        operator delete(v32);
      }
      v33 = v81;
      if (v81)
      {
        v34 = v82;
        v35 = v81;
        if (v82 != v81)
        {
          do
          {
            v37 = *--v34;
            v36 = v37;
            *v34 = 0;
            if (v37)
              MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
          }
          while (v34 != v33);
          v35 = v81;
        }
        v82 = v33;
        operator delete(v35);
      }
      if (v77 != v80)
        free(v77);
    }
    if (v29)
    {
LABEL_78:
      v38 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
      v39 = mlir::detail::OpResultImpl::getNextResultAtOffset(v38, 1);
      v40 = mlir::detail::OpResultImpl::getNextResultAtOffset(v39, 0);
      if (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 1u))
      {
        v41 = *((_DWORD *)*this + 9);
        v42 = v41 - 2;
        if (v41)
          v43 = (uint64_t)(*this - 2);
        else
          v43 = 0;
        v44 = 2;
        v45 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 2);
        if (v42 < 2)
        {
LABEL_50:
          v49 = *((_DWORD *)*this + 9);
          v50 = v49 - 2;
          v51 = (v49 - 2) >> 1;
          if (v49)
            v52 = (uint64_t)(*this - 2);
          else
            v52 = 0;
          v53 = mlir::detail::OpResultImpl::getNextResultAtOffset(v52, v51 + 2);
          if (v50 < 2)
            return 1;
          v54 = v53;
          v55 = 0;
          v56 = v51 + 2 + v51 - (unint64_t)(v51 + 2);
          while (1)
          {
            v57 = mlir::detail::OpResultImpl::getNextResultAtOffset(v54, v55);
            if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v44 + (int)v55))break;
            if (v56 == ++v55)
              return 1;
          }
        }
        else
        {
          v46 = v45;
          v47 = 0;
          while (1)
          {
            v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, v47);
            if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, (int)v47 + 2))break;
            if (v42 >> 1 == ++v47)
            {
              v44 = v47 + 2;
              goto LABEL_50;
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL mlir::memref::ExtractStridedMetadataOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10[2];
  void *__src;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, 24);
  v10[0] = (uint64_t)v15;
  v10[1] = 1;
  v14 = 0;
  v9[0] = &v14;
  v9[1] = 1;
  __src = &v13;
  v12 = 0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v15, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    {
      v8 = 0;
      if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v8))
      {
        v14 = v8;
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
        {
          if (mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
            {
              mlir::OperationState::addTypes(a2, __src, v12);
              v5 = mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v10, v9, v4, a2 + 16) != 0;
              v6 = __src;
              if (__src == &v13)
                return v5;
              goto LABEL_10;
            }
          }
        }
      }
    }
  }
  v5 = 0;
  v6 = __src;
  if (__src != &v13)
LABEL_10:
    free(v6);
  return v5;
}

uint64_t mlir::memref::GetGlobalOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int *v18;
  char *v19;
  char *v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint64_t v62;
  _QWORD v63[3];
  void *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[96];
  void *v68;
  _QWORD *v69;
  void *__p;
  _QWORD *v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v59 = v6;
  if (!v6)
  {
    a3(v63, a4);
    if (v63[0])
    {
      v60 = 3;
      v61 = "expected DictionaryAttr to set properties";
      v62 = 41;
      v30 = &v60;
      v31 = (char *)v64;
      if (v65 >= v66)
      {
        v51 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          v55 = (char *)&v60 - (_BYTE *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
          v31 = (char *)v64;
          v30 = (int *)((char *)v64 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
          v30 = &v60;
          v31 = (char *)v64;
        }
      }
      v32 = &v31[24 * v65];
      v33 = *(_OWORD *)v30;
      *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
      *(_OWORD *)v32 = v33;
      ++v65;
      if (v63[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
    }
    if (!v72)
      return 0;
    v34 = __p;
    if (__p)
    {
      v35 = v71;
      v36 = __p;
      if (v71 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v71 = v34;
      operator delete(v36);
    }
    v25 = v68;
    if (!v68)
      goto LABEL_64;
    v37 = v69;
    v27 = v68;
    if (v69 == v68)
      goto LABEL_63;
    do
    {
      v39 = *--v37;
      v38 = v39;
      *v37 = 0;
      if (v39)
        MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
    }
    while (v37 != v25);
    goto LABEL_62;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v59, "name", 4uLL);
  if (!v8)
  {
    a3(v63, a4);
    if (v63[0])
    {
      v60 = 3;
      v61 = "expected key entry for name in DictionaryAttr to set Properties.";
      v62 = 64;
      v40 = &v60;
      v41 = (char *)v64;
      if (v65 >= v66)
      {
        v53 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          v57 = (char *)&v60 - (_BYTE *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v53, 24);
          v41 = (char *)v64;
          v40 = (int *)((char *)v64 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v53, 24);
          v40 = &v60;
          v41 = (char *)v64;
        }
      }
      v42 = &v41[24 * v65];
      v43 = *(_OWORD *)v40;
      *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
      *(_OWORD *)v42 = v43;
      ++v65;
      if (v63[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
    }
    if (!v72)
      return 0;
    v44 = __p;
    if (__p)
    {
      v45 = v71;
      v46 = __p;
      if (v71 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v71 = v44;
      operator delete(v46);
    }
    v25 = v68;
    if (!v68)
      goto LABEL_64;
    v47 = v69;
    v27 = v68;
    if (v69 == v68)
      goto LABEL_63;
    do
    {
      v49 = *--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        MEMORY[0x20BD002D4](v48, 0x1000C8077774924);
    }
    while (v47 != v25);
    goto LABEL_62;
  }
  v9 = v8;
  v10 = *(void **)(*(_QWORD *)v8 + 136);
  v11 = v10 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v12 = v8;
  else
    v12 = 0;
  v63[0] = v12;
  if (v11)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v63);
    if (!v13)
    {
      *a1 = v9;
      return 1;
    }
  }
  a3(v63, a4);
  if (v63[0])
  {
    v60 = 3;
    v62 = 49;
    v14 = &v60;
    v15 = (char *)v64;
    if (v65 >= v66)
    {
      v52 = v65 + 1;
      if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
      {
        v56 = (char *)&v60 - (_BYTE *)v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v52, 24);
        v15 = (char *)v64;
        v14 = (int *)((char *)v64 + v56);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v52, 24);
        v14 = &v60;
        v15 = (char *)v64;
      }
    }
    v16 = &v15[24 * v65];
    v17 = *(_OWORD *)v14;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v16 = v17;
    ++v65;
    if (v63[0])
    {
      v18 = &v60;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, v9);
      v19 = (char *)v64;
      if (v65 >= v66)
      {
        v54 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          v58 = (char *)&v60 - (_BYTE *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v54, 24);
          v19 = (char *)v64;
          v18 = (int *)((char *)v64 + v58);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v54, 24);
          v18 = &v60;
          v19 = (char *)v64;
        }
      }
      v20 = &v19[24 * v65];
      v21 = *(_OWORD *)v18;
      *((_QWORD *)v20 + 2) = *((_QWORD *)v18 + 2);
      *(_OWORD *)v20 = v21;
      ++v65;
      if (v63[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
    }
  }
  if (v72)
  {
    v22 = __p;
    if (__p)
    {
      v23 = v71;
      v24 = __p;
      if (v71 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v71 = v22;
      operator delete(v24);
    }
    v25 = v68;
    if (!v68)
      goto LABEL_64;
    v26 = v69;
    v27 = v68;
    if (v69 == v68)
    {
LABEL_63:
      v69 = v25;
      operator delete(v27);
LABEL_64:
      if (v64 != v67)
        free(v64);
      return 0;
    }
    do
    {
      v29 = *--v26;
      v28 = v29;
      *v26 = 0;
      if (v29)
        MEMORY[0x20BD002D4](v28, 0x1000C8077774924);
    }
    while (v26 != v25);
LABEL_62:
    v27 = v68;
    goto LABEL_63;
  }
  return 0;
}

uint64_t mlir::memref::GetGlobalOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"name", 4, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::GetGlobalOp::getInherentAttr(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  if (a4 == 4 && *a3 == 1701667182)
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  else
    return 0;
}

uint64_t mlir::memref::GetGlobalOp::setInherentAttr(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  if (a3 == 4)
  {
    v10[3] = v4;
    v10[4] = v5;
    if (*a2 == 1701667182)
    {
      v7 = (_QWORD *)result;
      if (a4)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
          v8 = a4;
        else
          v8 = 0;
        v10[0] = v8;
        if (v8)
        {
          result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v10);
          if (v9)
            v8 = 0;
          else
            v8 = a4;
        }
      }
      else
      {
        v8 = 0;
      }
      *v7 = v8;
    }
  }
  return result;
}

void mlir::memref::GetGlobalOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, *a2);
}

BOOL mlir::memref::GetGlobalOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps0(v6, (const void **)"name", (const char *)4, a3, a4);
}

BOOL mlir::memref::GetGlobalOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::FlatSymbolRefAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties]";
        v15 = 113;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[306];
    return a1[32];
  }
  return result;
}

uint64_t mlir::memref::GetGlobalOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t *v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *Shape;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  const void **v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  const char *v64;
  uint64_t v65;
  _QWORD v66[3];
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE v70[96];
  void *v71;
  _QWORD *v72;
  void *__p;
  _QWORD *v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v66[0] = v2;
    if (mlir::func::__mlir_ods_local_attr_constraint_FuncOps0(v3, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v66))
    {
      if (*((_DWORD *)*this + 9))
        v4 = (uint64_t)(*this - 2);
      else
        v4 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      v6 = *this;
      v7 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
      if (*((_UNKNOWN **)*v7 + 17) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
        v66[0] = v7;
        v66[1] = v8;
        mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v66);
        v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v7 + 8);
        v60 = v7;
        v61 = v9;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v60))
        {
          Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v60);
          if (!v11)
            return 1;
          v12 = 8 * v11;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v12 -= 8;
            if (!v12)
              return 1;
          }
        }
      }
      v62 = 261;
      v60 = (const void **)"result";
      v61 = 6;
      mlir::Operation::emitOpError(v6, &v60, (uint64_t)v66);
      if (v66[0])
      {
        v63 = 3;
        v64 = " #";
        v65 = 2;
        v22 = &v63;
        v23 = (char *)v67;
        if (v68 >= v69)
        {
          v50 = v68 + 1;
          if (v67 <= &v63 && (char *)v67 + 24 * v68 > (char *)&v63)
          {
            v56 = (char *)&v63 - (_BYTE *)v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v50, 24);
            v23 = (char *)v67;
            v22 = (int *)((char *)v67 + v56);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v50, 24);
            v22 = &v63;
            v23 = (char *)v67;
          }
        }
        v24 = &v23[24 * v68];
        v25 = *(_OWORD *)v22;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v24 = v25;
        v26 = ++v68;
        if (v66[0])
        {
          v63 = 5;
          v64 = 0;
          v27 = &v63;
          v28 = (char *)v67;
          if (v26 >= v69)
          {
            v51 = v26 + 1;
            v52 = (char *)v67 + 24 * v26 > (char *)&v63;
            if (v67 <= &v63 && v52)
            {
              v57 = (char *)&v63 - (_BYTE *)v67;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
              v28 = (char *)v67;
              v27 = (int *)((char *)v67 + v57);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
              v27 = &v63;
              v28 = (char *)v67;
            }
          }
          v29 = &v28[24 * v68];
          v30 = *(_OWORD *)v27;
          *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v29 = v30;
          v31 = ++v68;
          if (v66[0])
          {
            v63 = 3;
            v64 = " must be statically shaped memref of any type values, but got ";
            v65 = 62;
            v32 = &v63;
            v33 = (char *)v67;
            if (v31 >= v69)
            {
              v53 = v31 + 1;
              v54 = (char *)v67 + 24 * v31 > (char *)&v63;
              if (v67 <= &v63 && v54)
              {
                v58 = (char *)&v63 - (_BYTE *)v67;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v53, 24);
                v33 = (char *)v67;
                v32 = (int *)((char *)v67 + v58);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v53, 24);
                v32 = &v63;
                v33 = (char *)v67;
              }
            }
            v34 = &v33[24 * v68];
            v35 = *(_OWORD *)v32;
            *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
            *(_OWORD *)v34 = v35;
            ++v68;
            if (v66[0])
            {
              v36 = &v63;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v63, (uint64_t)v7);
              v37 = (char *)v67;
              if (v68 >= v69)
              {
                v55 = v68 + 1;
                if (v67 <= &v63 && (char *)v67 + 24 * v68 > (char *)&v63)
                {
                  v59 = (char *)&v63 - (_BYTE *)v67;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v55, 24);
                  v37 = (char *)v67;
                  v36 = (int *)((char *)v67 + v59);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v55, 24);
                  v36 = &v63;
                  v37 = (char *)v67;
                }
              }
              v38 = &v37[24 * v68];
              v39 = *(_OWORD *)v36;
              *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
              *(_OWORD *)v38 = v39;
              ++v68;
            }
          }
        }
      }
      v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v66);
      if (v66[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
      if (v75)
      {
        v41 = __p;
        if (__p)
        {
          v42 = v74;
          v43 = __p;
          if (v74 != __p)
          {
            do
              v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            v43 = __p;
          }
          v74 = v41;
          operator delete(v43);
        }
        v44 = v71;
        if (v71)
        {
          v45 = v72;
          v46 = v71;
          if (v72 != v71)
          {
            do
            {
              v48 = *--v45;
              v47 = v48;
              *v45 = 0;
              if (v48)
                MEMORY[0x20BD002D4](v47, 0x1000C8077774924);
            }
            while (v45 != v44);
            v46 = v71;
          }
          v72 = v44;
          operator delete(v46);
        }
        if (v67 != v70)
          free(v67);
      }
      if (v40)
        return 1;
    }
    return 0;
  }
  v60 = (const void **)"requires attribute 'name'";
  v62 = 259;
  mlir::OpState::emitOpError(this, &v60, (uint64_t)v66);
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v66);
  if (v66[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v66);
  if (v75)
  {
    v14 = __p;
    if (__p)
    {
      v15 = v74;
      v16 = __p;
      if (v74 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v74 = v14;
      operator delete(v16);
    }
    v17 = v71;
    if (v71)
    {
      v18 = v72;
      v19 = v71;
      if (v72 != v71)
      {
        do
        {
          v21 = *--v18;
          v20 = v21;
          *v18 = 0;
          if (v21)
            MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
        }
        while (v18 != v17);
        v19 = v71;
      }
      v72 = v17;
      operator delete(v19);
    }
    if (v67 != v70)
      free(v67);
  }
  return v13;
}

uint64_t mlir::memref::GetGlobalOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::NoneType **v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::FlatSymbolRefAttr>(a1, &v15, v6))
    return 0;
  if (v15)
  {
    v7 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v7 = v15;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v13[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, v13))
    return 0;
  v8 = v13[0];
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v9 = *(_QWORD *)(a2 + 8);
  v13[0] = a1;
  v13[1] = &v14;
  v13[2] = a2;
  v10 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v9 + 96));
  if (v10)
  {
    if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps0(v10, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GetGlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v13))return 0;
  }
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v11) = v8;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::memref::GetGlobalOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  mlir::Operation *v14;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v17;
  unint64_t AttrDictionary;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    *v9 = 58;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  if (*((_DWORD *)*this + 9))
    v12 = (uint64_t)*this - 16;
  else
    v12 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  v19 = v21;
  v21[0] = "name";
  v21[1] = 4;
  v20 = 0x200000001;
  v14 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v14);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v14 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v17, v19, v20);
  if (v19 != v21)
    free(v19);
}

uint64_t mlir::memref::GlobalOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  __int128 v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  _QWORD v86[3];
  void *v87;
  unsigned int v88;
  unsigned int v89;
  _BYTE v90[96];
  void *v91;
  _QWORD *v92;
  void *__p;
  _QWORD *v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v82 = v6;
  if (!v6)
  {
    a3(v86, a4);
    if (v86[0])
    {
      LODWORD(v83) = 3;
      v84 = "expected DictionaryAttr to set properties";
      v85 = 41;
      v26 = &v83;
      v27 = (char *)v87;
      if (v88 >= v89)
      {
        v69 = v88 + 1;
        if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
        {
          v75 = (char *)&v83 - (_BYTE *)v87;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v69, 24);
          v27 = (char *)v87;
          v26 = (uint64_t *)((char *)v87 + v75);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v69, 24);
          v26 = &v83;
          v27 = (char *)v87;
        }
      }
      v28 = &v27[24 * v88];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = v26[2];
      *(_OWORD *)v28 = v29;
      ++v88;
      if (v86[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
    }
    if (!v95)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v94;
      v32 = __p;
      if (v94 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v94 = v30;
      operator delete(v32);
    }
    v21 = v91;
    if (!v91)
      goto LABEL_86;
    v33 = v92;
    v23 = v91;
    if (v92 == v91)
    {
LABEL_85:
      v92 = v21;
      operator delete(v23);
LABEL_86:
      if (v87 != v90)
        free(v87);
      return 0;
    }
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
LABEL_84:
    v23 = v91;
    goto LABEL_85;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v82, "alignment", 9uLL);
  if (v8)
  {
    v9 = v8;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      a3(v86, a4);
      if (v86[0])
      {
        LODWORD(v83) = 3;
        v85 = 54;
        v10 = &v83;
        v11 = (char *)v87;
        if (v88 >= v89)
        {
          v70 = v88 + 1;
          if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
          {
            v76 = (char *)&v83 - (_BYTE *)v87;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v70, 24);
            v11 = (char *)v87;
            v10 = (uint64_t *)((char *)v87 + v76);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v70, 24);
            v10 = &v83;
            v11 = (char *)v87;
          }
        }
        v12 = &v11[24 * v88];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = v10[2];
        *(_OWORD *)v12 = v13;
        ++v88;
        if (v86[0])
        {
          v14 = &v83;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v83, v9);
          v15 = (char *)v87;
          if (v88 >= v89)
          {
            v71 = v88 + 1;
            if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
            {
              v77 = (char *)&v83 - (_BYTE *)v87;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v71, 24);
              v15 = (char *)v87;
              v14 = (uint64_t *)((char *)v87 + v77);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v71, 24);
              v14 = &v83;
              v15 = (char *)v87;
            }
          }
          v16 = &v15[24 * v88];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = v14[2];
          *(_OWORD *)v16 = v17;
          ++v88;
          if (v86[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
        }
      }
      if (!v95)
        return 0;
      v18 = __p;
      if (__p)
      {
        v19 = v94;
        v20 = __p;
        if (v94 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v94 = v18;
        operator delete(v20);
      }
      v21 = v91;
      if (!v91)
        goto LABEL_86;
      v22 = v92;
      v23 = v91;
      if (v92 == v91)
        goto LABEL_85;
      do
      {
        v25 = *--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
      }
      while (v22 != v21);
      goto LABEL_84;
    }
    *a1 = v8;
  }
  v36 = mlir::DictionaryAttr::get((uint64_t)&v82, "constant", 8uLL);
  if (v36)
  {
    v37 = v36;
    if (*(_UNKNOWN **)(*(_QWORD *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      a3(v86, a4);
      if (v86[0])
      {
        LODWORD(v83) = 3;
        v85 = 53;
        v38 = &v83;
        v39 = (char *)v87;
        if (v88 >= v89)
        {
          v72 = v88 + 1;
          if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
          {
            v78 = (char *)&v83 - (_BYTE *)v87;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v72, 24);
            v39 = (char *)v87;
            v38 = (uint64_t *)((char *)v87 + v78);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v72, 24);
            v38 = &v83;
            v39 = (char *)v87;
          }
        }
        v40 = &v39[24 * v88];
        v41 = *(_OWORD *)v38;
        *((_QWORD *)v40 + 2) = v38[2];
        *(_OWORD *)v40 = v41;
        ++v88;
        if (v86[0])
        {
          v42 = &v83;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v83, v37);
          v43 = (char *)v87;
          if (v88 >= v89)
          {
            v73 = v88 + 1;
            if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
            {
              v79 = (char *)&v83 - (_BYTE *)v87;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v73, 24);
              v43 = (char *)v87;
              v42 = (uint64_t *)((char *)v87 + v79);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v73, 24);
              v42 = &v83;
              v43 = (char *)v87;
            }
          }
          v44 = &v43[24 * v88];
          v45 = *(_OWORD *)v42;
          *((_QWORD *)v44 + 2) = v42[2];
          *(_OWORD *)v44 = v45;
          ++v88;
          if (v86[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
        }
      }
      if (!v95)
        return 0;
      v46 = __p;
      if (__p)
      {
        v47 = v94;
        v48 = __p;
        if (v94 != __p)
        {
          do
            v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          v48 = __p;
        }
        v94 = v46;
        operator delete(v48);
      }
      v21 = v91;
      if (!v91)
        goto LABEL_86;
      v49 = v92;
      v23 = v91;
      if (v92 == v91)
        goto LABEL_85;
      do
      {
        v51 = *--v49;
        v50 = v51;
        *v49 = 0;
        if (v51)
          MEMORY[0x20BD002D4](v50, 0x1000C8077774924);
      }
      while (v49 != v21);
      goto LABEL_84;
    }
    a1[1] = v36;
  }
  v52 = mlir::DictionaryAttr::get((uint64_t)&v82, "initial_value", 0xDuLL);
  if (v52)
    a1[2] = v52;
  v53 = mlir::DictionaryAttr::get((uint64_t)&v82, "sym_name", 8uLL);
  v81 = v53;
  if (!v53)
  {
    a3(v86, a4);
    if (v86[0])
    {
      LODWORD(v83) = 3;
      v84 = "expected key entry for sym_name in DictionaryAttr to set Properties.";
      v85 = 68;
      v55 = &v83;
      v56 = (char *)v87;
      if (v88 >= v89)
      {
        v74 = v88 + 1;
        if (v87 <= &v83 && (char *)v87 + 24 * v88 > (char *)&v83)
        {
          v80 = (char *)&v83 - (_BYTE *)v87;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v74, 24);
          v56 = (char *)v87;
          v55 = (uint64_t *)((char *)v87 + v80);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v90, v74, 24);
          v55 = &v83;
          v56 = (char *)v87;
        }
      }
      v57 = &v56[24 * v88];
      v58 = *(_OWORD *)v55;
      *((_QWORD *)v57 + 2) = v55[2];
      *(_OWORD *)v57 = v58;
      ++v88;
      if (v86[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v86);
    }
    if (!v95)
      return 0;
    v59 = __p;
    if (__p)
    {
      v60 = v94;
      v61 = __p;
      if (v94 != __p)
      {
        do
          v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
        while (v60 != v59);
        v61 = __p;
      }
      v94 = v59;
      operator delete(v61);
    }
    v21 = v91;
    if (!v91)
      goto LABEL_86;
    v62 = v92;
    v23 = v91;
    if (v92 == v91)
      goto LABEL_85;
    do
    {
      v64 = *--v62;
      v63 = v64;
      *v62 = 0;
      if (v64)
        MEMORY[0x20BD002D4](v63, 0x1000C8077774924);
    }
    while (v62 != v21);
    goto LABEL_84;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[3] = v53;
    v65 = mlir::DictionaryAttr::get((uint64_t)&v82, "sym_visibility", 0xEuLL);
    v83 = v65;
    if (v65)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)v65 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      {
        a3(v86, a4);
LABEL_95:
        mlir::InFlightDiagnostic::append<mlir::Attribute>(v66, &v83);
        goto LABEL_97;
      }
      a1[4] = v65;
    }
    v67 = mlir::DictionaryAttr::get((uint64_t)&v82, "type", 4uLL);
    v83 = v67;
    if (!v67)
    {
      a3(v86, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v86, "expected key entry for type in DictionaryAttr to set Properties.");
      goto LABEL_97;
    }
    if (*(_UNKNOWN **)(*(_QWORD *)v67 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      a1[5] = v67;
      return 1;
    }
    a3(v86, a4);
    goto LABEL_95;
  }
  a3(v86, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v54, &v81);
LABEL_97:
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v86);
  return 0;
}

uint64_t mlir::memref::GlobalOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  void *v39;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[7];

  v45[6] = *MEMORY[0x24BDAC8D0];
  v42 = a1;
  v43 = v45;
  v44 = 0x300000000;
  if (!*a2)
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  NamedAttr = mlir::Builder::getNamedAttr(&v42, (uint64_t)"alignment", 9, *a2);
  v5 = v4;
  v6 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
    v6 = v44;
  }
  v7 = (uint64_t *)((char *)v43 + 16 * v6);
  *v7 = NamedAttr;
  v7[1] = v5;
  v8 = v44 + 1;
  LODWORD(v44) = v44 + 1;
  v9 = a2[1];
  if (v9)
  {
LABEL_7:
    v10 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"constant", 8, v9);
    v12 = v11;
    v13 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v13 = v44;
    }
    v14 = (uint64_t *)((char *)v43 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
LABEL_10:
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"initial_value", 13, v15);
    v18 = v17;
    v19 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v19 = v44;
    }
    v20 = (uint64_t *)((char *)v43 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v21 = a2[3];
  if (v21)
  {
    v22 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"sym_name", 8, v21);
    v24 = v23;
    v25 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v25 = v44;
    }
    v26 = (uint64_t *)((char *)v43 + 16 * v25);
    *v26 = v22;
    v26[1] = v24;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v27 = a2[4];
  if (v27)
  {
    v28 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"sym_visibility", 14, v27);
    v30 = v29;
    v31 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v31 = v44;
    }
    v32 = (uint64_t *)((char *)v43 + 16 * v31);
    *v32 = v28;
    v32[1] = v30;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v33 = a2[5];
  if (v33)
  {
    v34 = mlir::Builder::getNamedAttr(&v42, (uint64_t)"type", 4, v33);
    v36 = v35;
    v37 = v44;
    if (v44 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 16);
      v37 = v44;
    }
    v38 = (uint64_t *)((char *)v43 + 16 * v37);
    *v38 = v34;
    v38[1] = v36;
    v8 = v44 + 1;
    LODWORD(v44) = v44 + 1;
  }
  v39 = v43;
  if (!v8)
  {
    DictionaryAttr = 0;
    if (v43 == v45)
      return DictionaryAttr;
    goto LABEL_28;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v42, (mlir::MLIRContext *)v43, v8);
  v39 = v43;
  if (v43 != v45)
LABEL_28:
    free(v39);
  return DictionaryAttr;
}

unint64_t mlir::memref::GlobalOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _OWORD v58[4];
  _OWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = &unk_254519000;
  if ((v2 & 1) == 0)
  {
    v41 = *a1;
    v46 = a1;
    v3 = &unk_254519000;
    v23 = v22;
    v1 = v41;
    a1 = v46;
    if (v23)
    {
      v24 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v24 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v24;
      v1 = v41;
      a1 = v46;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v4 = HIDWORD(v1);
  v5 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v1) ^ HIDWORD(v1));
  v57 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v6 = a1[1];
  if ((v4 & 1) == 0)
  {
    v42 = a1[1];
    v47 = a1;
    v3 = &unk_254519000;
    v26 = v25;
    v6 = v42;
    a1 = v47;
    if (v26)
    {
      v27 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v27 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v27;
      v6 = v42;
      a1 = v47;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v7 = HIDWORD(v6);
  v8 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v6) ^ HIDWORD(v6));
  v56 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v9 = a1[2];
  if ((v7 & 1) == 0)
  {
    v43 = a1[2];
    v48 = a1;
    v3 = &unk_254519000;
    v29 = v28;
    v9 = v43;
    a1 = v48;
    if (v29)
    {
      v30 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v30 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v30;
      v9 = v43;
      a1 = v48;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v10 = HIDWORD(v9);
  v11 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v9) ^ HIDWORD(v9));
  v55 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  v12 = a1[3];
  if ((v10 & 1) == 0)
  {
    v44 = a1[3];
    v49 = a1;
    v3 = &unk_254519000;
    v32 = v31;
    v12 = v44;
    a1 = v49;
    if (v32)
    {
      v33 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v33 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v33;
      v12 = v44;
      a1 = v49;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v13 = HIDWORD(v12);
  v14 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v12) ^ HIDWORD(v12));
  v54 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 47));
  v15 = a1[4];
  if ((v13 & 1) == 0)
  {
    v45 = a1[4];
    v50 = a1;
    v3 = &unk_254519000;
    v35 = v34;
    v15 = v45;
    a1 = v50;
    if (v35)
    {
      v36 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v36 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v36;
      v15 = v45;
      a1 = v50;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v16 = HIDWORD(v15);
  v17 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v15) ^ HIDWORD(v15));
  v53 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) ^ ((0x9DDFEA08EB382D69 * (v16 ^ (v17 >> 47) ^ v17)) >> 47));
  v18 = a1[5];
  if ((v17 & 1) == 0)
  {
    v51 = a1[5];
    v18 = v51;
    v3 = &unk_254519000;
    if (v37)
    {
      v38 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v38 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v38;
      v18 = v51;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v19 = HIDWORD(v18);
  v20 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v18) ^ HIDWORD(v18));
  v52 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) ^ ((0x9DDFEA08EB382D69 * (v19 ^ (v20 >> 47) ^ v20)) >> 47));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if ((v20 & 1) == 0)
  {
    v3 = &unk_254519000;
    if (v39)
    {
      v40 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v40 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v40;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v61 = v3[373];
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v58, 0, v58, (char *)v59, (uint64_t *)&v57, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52);
}

uint64_t mlir::memref::GlobalOp::getInherentAttr(int a1, _QWORD *a2, _QWORD *__s1, size_t __n)
{
  switch(__n)
  {
    case 4uLL:
      if (memcmp(__s1, "type", __n))
        return 0;
      return a2[5];
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
      return 0;
    case 8uLL:
      if (!memcmp(__s1, "constant", __n))
        return a2[1];
      if (memcmp(__s1, "sym_name", __n))
        return 0;
      return a2[3];
    case 9uLL:
      if (*__s1 != 0x6E656D6E67696C61 || *((_BYTE *)__s1 + 8) != 116)
        return 0;
      return *a2;
    case 0xDuLL:
      if (memcmp(__s1, "initial_value", __n))
        return 0;
      return a2[2];
    case 0xEuLL:
      if (memcmp(__s1, "sym_visibility", __n))
        return 0;
      return a2[4];
    default:
      return 0;
  }
}

uint64_t mlir::memref::GlobalOp::setInherentAttr(uint64_t result, _QWORD *__s1, size_t __n, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = (_QWORD *)result;
  switch(__n)
  {
    case 4uLL:
      result = memcmp(__s1, "type", __n);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
            v12 = a4;
          else
            v12 = 0;
          v7[5] = v12;
        }
        else
        {
          v7[5] = 0;
        }
      }
      break;
    case 8uLL:
      result = memcmp(__s1, "constant", __n);
      if ((_DWORD)result)
      {
        result = memcmp(__s1, "sym_name", __n);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
              v8 = a4;
            else
              v8 = 0;
            v7[3] = v8;
          }
          else
          {
            v7[3] = 0;
          }
        }
      }
      else if (a4)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
          v13 = a4;
        else
          v13 = 0;
        v7[1] = v13;
      }
      else
      {
        v7[1] = 0;
      }
      break;
    case 9uLL:
      if (*__s1 == 0x6E656D6E67696C61 && *((_BYTE *)__s1 + 8) == 116)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
            v10 = a4;
          else
            v10 = 0;
          *(_QWORD *)result = v10;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      break;
    case 0xDuLL:
      result = memcmp(__s1, "initial_value", __n);
      if (!(_DWORD)result)
        v7[2] = a4;
      break;
    case 0xEuLL:
      result = memcmp(__s1, "sym_visibility", __n);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
            v11 = a4;
          else
            v11 = 0;
          v7[4] = v11;
        }
        else
        {
          v7[4] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::memref::GlobalOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"alignment", 9, *a2);
  v5 = a2[1];
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"constant", 8, v5);
  v6 = a2[2];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"initial_value", 13, v6);
  v7 = a2[3];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, v7);
  v8 = a2[4];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_visibility", 14, v8);
  v9 = a2[5];
  if (v9)
    mlir::NamedAttrList::append(a3, (uint64_t)"type", 4, v9);
}

BOOL mlir::memref::GlobalOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;

  v8 = (const void **)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(v8, (const void **)"alignment", (const char *)9, a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v9, (const void **)"constant", (const char *)8, a3, a4))
    {
      mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      v10 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
      if (!v10
        || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v10, (const void **)"sym_name", (const char *)8, a3, a4))
      {
        v11 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
        if (!v11
          || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v11, (const void **)"sym_visibility", (const char *)0xE, a3, a4))
        {
          v12 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 40));
          if (!v12
            || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(v12, (const void **)"type", (const char *)4, a3, a4))
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(const void **a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t Value;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v31 = a1;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64))
      return 1;
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v10 = &v31;
    v11 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = (char *)v37;
        v10 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v10 = &v31;
        v11 = (char *)v37;
      }
    }
    v12 = &v11[24 * v38];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = v10[2];
    *(_OWORD *)v12 = v13;
    ++v38;
    if (Value)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (Value)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: 64-bit signless integer attribute";
        v33 = 65;
        v14 = &v31;
        v15 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = (char *)v37;
            v14 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v14 = &v31;
            v15 = (char *)v37;
          }
        }
        v16 = &v15[24 * v38];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = v14[2];
        *(_OWORD *)v16 = v17;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  if (v45)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v44;
      v20 = __p;
      if (v44 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v44 = v18;
      operator delete(v20);
    }
    v21 = v41;
    if (v41)
    {
      v22 = v42;
      v23 = v41;
      if (v42 != v41)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v41;
      }
      v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!a1 || *(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    return 1;
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    v30 = "attribute '";
    v31 = 11;
    v7 = &v29;
    v8 = (char *)v35;
    if (v36 >= v37)
    {
      v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        v27 = (char *)&v29 - (_BYTE *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v8 = (char *)v35;
        v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v7 = &v29;
        v8 = (char *)v35;
      }
    }
    v9 = &v8[24 * v36];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v36;
    if (v33)
    {
      v32 = 261;
      v29 = a2;
      v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        v30 = "' failed to satisfy constraint: unit attribute";
        v31 = 46;
        v11 = &v29;
        v12 = (char *)v35;
        if (v36 >= v37)
        {
          v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            v28 = (char *)&v29 - (_BYTE *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v12 = (char *)v35;
            v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v11 = &v29;
            v12 = (char *)v35;
          }
        }
        v13 = &v12[24 * v36];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v36;
      }
    }
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  if (v43)
  {
    v16 = __p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          v23 = *--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38)
      free(v35);
  }
  return v15;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    v35 = a1;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v9 = &v31;
    v10 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v10 = (char *)v37;
        v9 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v9 = &v31;
        v10 = (char *)v37;
      }
    }
    v11 = &v10[24 * v38];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: memref type attribute";
        v33 = 53;
        v13 = &v31;
        v14 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v14 = (char *)v37;
            v13 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v13 = &v31;
            v14 = (char *)v37;
          }
        }
        v15 = &v14[24 * v38];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v38;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v44;
      v20 = __p;
      if (v44 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v44 = v18;
      operator delete(v20);
    }
    v21 = v41;
    if (v41)
    {
      v22 = v42;
      v23 = v41;
      if (v42 != v41)
      {
        do
        {
          v25 = *--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
        }
        while (v22 != v21);
        v23 = v41;
      }
      v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40)
      free(v37);
  }
  return v17;
}

BOOL mlir::memref::GlobalOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::UnitAttr>(a1, v3 + 1)
      && (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 4)
      && mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3 + 5) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_OWORD *)operator new();
    *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_25451B000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v4[308];
    return a1[32];
  }
  return result;
}

uint64_t mlir::memref::GlobalOp::writeProperties(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v3);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v3[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[4]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v3[5]);
}

BOOL mlir::memref::GlobalOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void **v28[4];
  __int16 v29;
  _QWORD v30[3];
  void *v31;
  _BYTE v32[96];
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 40);
    if (v5)
    {
      v6 = *(const void ***)v3;
      v7 = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 32);
      v30[0] = v2;
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v4, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(v5, (const void **)"type", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(v7, (const void **)"constant", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      return mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(v6, (const void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30) != 0;
    }
    v28[0] = (const void **)"requires attribute 'type'";
    v29 = 259;
    mlir::OpState::emitOpError(this, v28, (uint64_t)v30);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v18 = __p;
      if (__p)
      {
        v19 = v36;
        v20 = __p;
        if (v36 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v36 = v18;
        operator delete(v20);
      }
      v21 = v33;
      if (v33)
      {
        v22 = v34;
        v23 = v33;
        if (v34 != v33)
        {
          do
          {
            v25 = *--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
          }
          while (v22 != v21);
          v23 = v33;
        }
        v34 = v21;
        operator delete(v23);
      }
      v26 = v31;
      if (v31 != v32)
LABEL_47:
        free(v26);
    }
  }
  else
  {
    v28[0] = (const void **)"requires attribute 'sym_name'";
    v29 = 259;
    mlir::OpState::emitOpError(this, v28, (uint64_t)v30);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v10 = __p;
      if (__p)
      {
        v11 = v36;
        v12 = __p;
        if (v36 != __p)
        {
          do
            v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          v12 = __p;
        }
        v36 = v10;
        operator delete(v12);
      }
      v13 = v33;
      if (v33)
      {
        v14 = v34;
        v15 = v33;
        if (v34 != v33)
        {
          do
          {
            v17 = *--v14;
            v16 = v17;
            *v14 = 0;
            if (v17)
              MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
          }
          while (v14 != v13);
          v15 = v33;
        }
        v34 = v13;
        operator delete(v15);
      }
      v26 = v31;
      if (v31 != v32)
        goto LABEL_47;
    }
  }
  return v9;
}

uint64_t mlir::memref::GlobalOp::parse(mlir::AsmParser *a1, _QWORD *a2)
{
  mlir::NoneType **v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  mlir::UnitAttr **v9;
  mlir::MLIRContext *v10;
  uint64_t UnitAttr;
  uint64_t v12;
  uint64_t v13;
  _QWORD *Value;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::UnitAttr *Context;
  mlir::MLIRContext *v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TensorTypeFromMemRefType;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v4 = (mlir::NoneType **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  v6 = mlir::NoneType::get(*v4, v5);
  v7 = (*(uint64_t (**)(mlir::AsmParser *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 440))(a1, &v51, v6);
  if (v7 >= 0x100u)
  {
    if (!(_BYTE)v7)
      return 0;
    if (v51)
    {
      v8 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
      *(_QWORD *)(v8 + 32) = v51;
    }
  }
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "constant", 8))
  {
    v9 = (mlir::UnitAttr **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
    UnitAttr = mlir::Builder::getUnitAttr(v9, v10);
    *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2)
              + 8) = UnitAttr;
  }
  if (!mlir::AsmParser::parseSymbolName(a1, (mlir::StringAttr *)&v50))
    return 0;
  if (v50)
  {
    v12 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
    *(_QWORD *)(v12 + 24) = v50;
  }
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v55 = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v55))
    return 0;
  v13 = v55;
  if (*(_UNKNOWN **)(*(_QWORD *)v55 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v13 = 0;
  v54 = v13;
  if (v13 && mlir::BaseMemRefType::hasRank((mlir::BaseMemRefType *)&v54))
  {
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
    if (!v15)
    {
LABEL_20:
      v17 = mlir::TypeAttr::get(v55);
      if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 144))(a1))
      {
        if ((*(unsigned __int8 (**)(mlir::AsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "uninitialized", 13))
        {
          Context = (mlir::UnitAttr *)mlir::AsmParser::getContext(a1);
          v49 = (_QWORD *)mlir::UnitAttr::get(Context, v19);
        }
        else
        {
          TensorTypeFromMemRefType = mlir::memref::getTensorTypeFromMemRefType(v54);
          if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD **, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v49, TensorTypeFromMemRefType))return 0;
          if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v49 + 8))
          {
            v42 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 16))(a1);
            v53 = 257;
            (*(void (**)(_QWORD *__return_ptr, mlir::AsmParser *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v59, a1, v42, v52);
            v43 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v59, "initial value should be a unit or elements attribute");
            v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v59);
            if (!v44)
              return 0;
          }
        }
      }
      goto LABEL_47;
    }
    v16 = 8 * v15;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v16 -= 8;
      if (!v16)
        goto LABEL_20;
    }
  }
  v20 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 16))(a1);
  v53 = 257;
  (*(void (**)(_QWORD *__return_ptr, mlir::AsmParser *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(v59, a1, v20, v52);
  if (v59[0])
  {
    v56 = 3;
    v57 = "type should be static shaped memref, but got ";
    v58 = 45;
    v21 = &v56;
    v22 = (char *)v60;
    if (v61 >= v62)
    {
      v45 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v47 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
        v22 = (char *)v60;
        v21 = (int *)((char *)v60 + v47);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
        v21 = &v56;
        v22 = (char *)v60;
      }
    }
    v23 = &v22[24 * v61];
    v24 = *(_OWORD *)v21;
    *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
    *(_OWORD *)v23 = v24;
    ++v61;
    if (v59[0])
    {
      v25 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v55);
      v26 = (char *)v60;
      if (v61 >= v62)
      {
        v46 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v48 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
          v26 = (char *)v60;
          v25 = (int *)((char *)v60 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v46, 24);
          v25 = &v56;
          v26 = (char *)v60;
        }
      }
      v27 = &v26[24 * v61];
      v28 = *(_OWORD *)v25;
      *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v27 = v28;
      ++v61;
    }
  }
  v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  if (v68)
  {
    v30 = __p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v33 = v64;
    if (v64)
    {
      v34 = v65;
      v35 = v64;
      if (v65 != v64)
      {
        do
        {
          v37 = *--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
        }
        while (v34 != v33);
        v35 = v64;
      }
      v65 = v33;
      operator delete(v35);
    }
    if (v60 != v63)
      free(v60);
  }
  v17 = 0;
  if (!v29)
    return 0;
LABEL_47:
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2)
            + 40) = v17;
  if (v49)
  {
    v38 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(a2);
    *(_QWORD *)(v38 + 16) = v49;
  }
  v52[0] = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
  {
    v39 = a2[1];
    v59[0] = a1;
    v59[1] = v52;
    v59[2] = a2;
    if (mlir::memref::GlobalOp::verifyInherentAttrs(v39, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v59))
    {
      return 1;
    }
  }
  return 0;
}

void mlir::memref::GlobalOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  mlir::Operation *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _QWORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t AttrData;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  mlir::Operation *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  mlir::Operation *v41;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v44;
  llvm::raw_ostream *v45;
  void *v46;
  unint64_t AttrDictionary;
  void *v48;
  uint64_t v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x24BDAC8D0];
  v4 = *this;
  v5 = *((unsigned int *)*this + 11);
  v6 = (v5 >> 23) & 1;
  v7 = (uint64_t)*this + 16 * v6 + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v7 = 0;
  if (*(_QWORD *)(v7 + 32))
  {
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 32;
    }
    v10 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v10 = 0;
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(v10 + 32));
    v4 = *this;
    v5 = *((unsigned int *)*this + 11);
    v6 = (v5 >> 23) & 1;
  }
  v11 = (uint64_t)v4 + 16 * v6 + 64;
  if (!BYTE3(v5))
    v11 = 0;
  if (*(_QWORD *)(v11 + 8))
  {
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 32;
    }
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v15 = (_QWORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 7uLL)
    {
      *v15 = 0x746E6174736E6F63;
      *((_QWORD *)v14 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v14, "constant", 8uLL);
    }
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v18 = 0;
  v48 = *(void **)(v18 + 24);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v48);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, AttrData, v20);
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = (_BYTE *)*((_QWORD *)v21 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
  {
    llvm::raw_ostream::write(v21, 32);
  }
  else
  {
    *((_QWORD *)v21 + 4) = v22 + 1;
    *v22 = 32;
  }
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if (*((_BYTE **)v23 + 3) == v24)
  {
    llvm::raw_ostream::write(v23, ":", 1uLL);
  }
  else
  {
    *v24 = 58;
    ++*((_QWORD *)v23 + 4);
  }
  v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
  {
    llvm::raw_ostream::write(v25, 32);
  }
  else
  {
    *((_QWORD *)v25 + 4) = v26 + 1;
    *v26 = 32;
  }
  v27 = *this;
  v28 = (uint64_t)*this + 64;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v29 = v28 + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1);
  else
    v29 = 0;
  v30 = *(_QWORD *)(v29 + 16);
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(v29 + 40));
  if (HIBYTE(*((_DWORD *)v27 + 11)))
    v31 = v28 + 16 * (((unint64_t)*((unsigned int *)v27 + 11) >> 23) & 1);
  else
    v31 = 0;
  if (*(_QWORD *)(v31 + 16))
  {
    v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v33 = *((_QWORD *)v32 + 4);
    if ((unint64_t)(*((_QWORD *)v32 + 3) - v33) > 2)
    {
      *(_BYTE *)(v33 + 2) = 32;
      *(_WORD *)v33 = 15648;
      *((_QWORD *)v32 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v32, " = ", 3uLL);
    }
    if (HIBYTE(*((_DWORD *)v27 + 11)))
      v34 = v28 + 16 * (((unint64_t)*((unsigned int *)v27 + 11) >> 23) & 1);
    else
      v34 = 0;
    v35 = *(_QWORD *)(v34 + 16);
    if (v35 && *(_UNKNOWN **)(*(_QWORD *)v35 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
    {
      v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
      v46 = (void *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v46 > 0xCuLL)
      {
        qmemcpy(v46, "uninitialized", 13);
        *((_QWORD *)v45 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v45, "uninitialized", 0xDuLL);
      }
    }
    else
    {
      (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v30);
    }
  }
  v48 = v50;
  v50[0] = "sym_visibility";
  v50[1] = 14;
  v50[2] = "constant";
  v50[3] = 8;
  v49 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, 3uLL, 16);
  v36 = (char *)v48 + 16 * v49;
  *v36 = "sym_name";
  v36[1] = 8;
  v37 = (v49 + 1);
  LODWORD(v49) = v37;
  if (v37 >= HIDWORD(v49))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v37 + 1, 16);
    LODWORD(v37) = v49;
  }
  v38 = (char *)v48 + 16 * v37;
  *v38 = "type";
  v38[1] = 4;
  v39 = (v49 + 1);
  LODWORD(v49) = v39;
  if (v39 >= HIDWORD(v49))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v39 + 1, 16);
    LODWORD(v39) = v49;
  }
  v40 = (char *)v48 + 16 * v39;
  *v40 = "initial_value";
  v40[1] = 13;
  LODWORD(v49) = v49 + 1;
  mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v41 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v41);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v41 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v44, v48, v49);
  if (v48 != v50)
    free(v48);
}

uint64_t mlir::memref::detail::MemorySpaceCastOpGenericAdaptorBase::MemorySpaceCastOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.memory_space_cast", 24, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::MemorySpaceCastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8[2];
  uint64_t v9;
  _QWORD v10[4];
  _QWORD __src[4];
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v10, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, __src))
    return 0;
  v9 = __src[0];
  v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))return 0;
  v6 = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v6))
    return 0;
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::memref::detail::PrefetchOpGenericAdaptorBase::PrefetchOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t Context;
  unint64_t v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v11;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.prefetch", 15, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::PrefetchOp::getODSOperands(mlir::memref::PrefetchOp *this, unsigned int a2)
{
  int v2;
  unsigned int v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  unsigned int v8;
  int32x4_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (a2)
  {
    if (a2 >= 8)
    {
      v4 = (int32x4_t)xmmword_207A8E9A0;
      v3 = a2 & 0xFFFFFFF8;
      v5 = 0uLL;
      v6.i64[0] = 0x300000003;
      v6.i64[1] = 0x300000003;
      v7.i64[0] = 0x800000008;
      v7.i64[1] = 0x800000008;
      v8 = a2 & 0xFFFFFFF8;
      v9 = 0uLL;
      do
      {
        v5 = vsubq_s32(v5, vtstq_s32(v4, v4));
        v9 = vsubq_s32(v9, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v4, v6)));
        v4 = vaddq_s32(v4, v7);
        v8 -= 8;
      }
      while (v8);
      v2 = vaddvq_s32(vaddq_s32(v9, v5));
      if (v3 == a2)
        goto LABEL_11;
    }
    else
    {
      v2 = 0;
      v3 = 0;
    }
    do
    {
      if (v3)
        ++v2;
      ++v3;
    }
    while (a2 != v3);
  }
  else
  {
    v2 = 0;
  }
LABEL_11:
  v10 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
  {
    v11 = *(_DWORD *)(v10 + 68);
    v12 = *(_QWORD *)(v10 + 72);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  return v12 + 32 * (a2 + (v11 - 2) * v2);
}

uint64_t mlir::memref::PrefetchOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  char *v51;
  char *v52;
  __int128 v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  char *v61;
  char *v62;
  __int128 v63;
  int *v64;
  char *v65;
  char *v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  char *v75;
  char *v76;
  __int128 v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  const char *v104;
  uint64_t v105;
  _QWORD v106[3];
  void *v107;
  unsigned int v108;
  unsigned int v109;
  _BYTE v110[96];
  void *v111;
  _QWORD *v112;
  void *__p;
  _QWORD *v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v102 = v6;
  if (!v6)
  {
    a3(v106, a4);
    if (v106[0])
    {
      v103 = 3;
      v104 = "expected DictionaryAttr to set properties";
      v105 = 41;
      v14 = &v103;
      v15 = (char *)v107;
      if (v108 >= v109)
      {
        v85 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          v93 = (char *)&v103 - (_BYTE *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v85, 24);
          v15 = (char *)v107;
          v14 = (int *)((char *)v107 + v93);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v85, 24);
          v14 = &v103;
          v15 = (char *)v107;
        }
      }
      v16 = &v15[24 * v108];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v108;
      if (v106[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
    }
    if (!v115)
      return 0;
    v18 = __p;
    if (__p)
    {
      v19 = v114;
      v20 = __p;
      if (v114 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v114 = v18;
      operator delete(v20);
    }
    v21 = v111;
    if (!v111)
      goto LABEL_114;
    v22 = v112;
    v23 = v111;
    if (v112 == v111)
    {
LABEL_113:
      v112 = v21;
      operator delete(v23);
LABEL_114:
      if (v107 != v110)
        free(v107);
      return 0;
    }
    do
    {
      v25 = *--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
    }
    while (v22 != v21);
LABEL_112:
    v23 = v111;
    goto LABEL_113;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v102, "isDataCache", 0xBuLL);
  if (!v8)
  {
    a3(v106, a4);
    if (v106[0])
    {
      v103 = 3;
      v104 = "expected key entry for isDataCache in DictionaryAttr to set Properties.";
      v105 = 71;
      v26 = &v103;
      v27 = (char *)v107;
      if (v108 >= v109)
      {
        v86 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          v94 = (char *)&v103 - (_BYTE *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v86, 24);
          v27 = (char *)v107;
          v26 = (int *)((char *)v107 + v94);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v86, 24);
          v26 = &v103;
          v27 = (char *)v107;
        }
      }
      v28 = &v27[24 * v108];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v108;
      if (v106[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
    }
    if (!v115)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v114;
      v32 = __p;
      if (v114 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v114 = v30;
      operator delete(v32);
    }
    v21 = v111;
    if (!v111)
      goto LABEL_114;
    v33 = v112;
    v23 = v111;
    if (v112 == v111)
      goto LABEL_113;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
    goto LABEL_112;
  }
  v9 = (uint64_t)v8;
  if (!mlir::BoolAttr::classof(v8))
  {
    a3(v106, a4);
    if (v106[0])
    {
      v103 = 3;
      v105 = 56;
      v36 = &v103;
      v37 = (char *)v107;
      if (v108 >= v109)
      {
        v87 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          v95 = (char *)&v103 - (_BYTE *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v87, 24);
          v37 = (char *)v107;
          v36 = (int *)((char *)v107 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v87, 24);
          v36 = &v103;
          v37 = (char *)v107;
        }
      }
      v38 = &v37[24 * v108];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v108;
      if (v106[0])
      {
        v40 = &v103;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v103, v9);
        v41 = (char *)v107;
        if (v108 >= v109)
        {
          v88 = v108 + 1;
          if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
          {
            v96 = (char *)&v103 - (_BYTE *)v107;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v88, 24);
            v41 = (char *)v107;
            v40 = (int *)((char *)v107 + v96);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v88, 24);
            v40 = &v103;
            v41 = (char *)v107;
          }
        }
        v42 = &v41[24 * v108];
        v43 = *(_OWORD *)v40;
        *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
        *(_OWORD *)v42 = v43;
        ++v108;
        if (v106[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
      }
    }
    if (!v115)
      return 0;
    v44 = __p;
    if (__p)
    {
      v45 = v114;
      v46 = __p;
      if (v114 != __p)
      {
        do
          v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
        while (v45 != v44);
        v46 = __p;
      }
      v114 = v44;
      operator delete(v46);
    }
    v21 = v111;
    if (!v111)
      goto LABEL_114;
    v47 = v112;
    v23 = v111;
    if (v112 == v111)
      goto LABEL_113;
    do
    {
      v49 = *--v47;
      v48 = v49;
      *v47 = 0;
      if (v49)
        MEMORY[0x20BD002D4](v48, 0x1000C8077774924);
    }
    while (v47 != v21);
    goto LABEL_112;
  }
  *a1 = v9;
  v10 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v102, "isWrite", 7uLL);
  if (!v10)
  {
    a3(v106, a4);
    if (v106[0])
    {
      v103 = 3;
      v104 = "expected key entry for isWrite in DictionaryAttr to set Properties.";
      v105 = 67;
      v50 = &v103;
      v51 = (char *)v107;
      if (v108 >= v109)
      {
        v89 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          v97 = (char *)&v103 - (_BYTE *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v89, 24);
          v51 = (char *)v107;
          v50 = (int *)((char *)v107 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v89, 24);
          v50 = &v103;
          v51 = (char *)v107;
        }
      }
      v52 = &v51[24 * v108];
      v53 = *(_OWORD *)v50;
      *((_QWORD *)v52 + 2) = *((_QWORD *)v50 + 2);
      *(_OWORD *)v52 = v53;
      ++v108;
      if (v106[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
    }
    if (!v115)
      return 0;
    v54 = __p;
    if (__p)
    {
      v55 = v114;
      v56 = __p;
      if (v114 != __p)
      {
        do
          v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
        while (v55 != v54);
        v56 = __p;
      }
      v114 = v54;
      operator delete(v56);
    }
    v21 = v111;
    if (!v111)
      goto LABEL_114;
    v57 = v112;
    v23 = v111;
    if (v112 == v111)
      goto LABEL_113;
    do
    {
      v59 = *--v57;
      v58 = v59;
      *v57 = 0;
      if (v59)
        MEMORY[0x20BD002D4](v58, 0x1000C8077774924);
    }
    while (v57 != v21);
    goto LABEL_112;
  }
  v11 = (uint64_t)v10;
  if (!mlir::BoolAttr::classof(v10))
  {
    a3(v106, a4);
    if (v106[0])
    {
      v103 = 3;
      v105 = 52;
      v60 = &v103;
      v61 = (char *)v107;
      if (v108 >= v109)
      {
        v90 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          v98 = (char *)&v103 - (_BYTE *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
          v61 = (char *)v107;
          v60 = (int *)((char *)v107 + v98);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v90, 24);
          v60 = &v103;
          v61 = (char *)v107;
        }
      }
      v62 = &v61[24 * v108];
      v63 = *(_OWORD *)v60;
      *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
      *(_OWORD *)v62 = v63;
      ++v108;
      if (v106[0])
      {
        v64 = &v103;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v103, v11);
        v65 = (char *)v107;
        if (v108 >= v109)
        {
          v91 = v108 + 1;
          if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
          {
            v99 = (char *)&v103 - (_BYTE *)v107;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
            v65 = (char *)v107;
            v64 = (int *)((char *)v107 + v99);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v91, 24);
            v64 = &v103;
            v65 = (char *)v107;
          }
        }
        v66 = &v65[24 * v108];
        v67 = *(_OWORD *)v64;
        *((_QWORD *)v66 + 2) = *((_QWORD *)v64 + 2);
        *(_OWORD *)v66 = v67;
        ++v108;
        if (v106[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
      }
    }
    if (!v115)
      return 0;
    v68 = __p;
    if (__p)
    {
      v69 = v114;
      v70 = __p;
      if (v114 != __p)
      {
        do
          v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
        while (v69 != v68);
        v70 = __p;
      }
      v114 = v68;
      operator delete(v70);
    }
    v21 = v111;
    if (!v111)
      goto LABEL_114;
    v71 = v112;
    v23 = v111;
    if (v112 == v111)
      goto LABEL_113;
    do
    {
      v73 = *--v71;
      v72 = v73;
      *v71 = 0;
      if (v73)
        MEMORY[0x20BD002D4](v72, 0x1000C8077774924);
    }
    while (v71 != v21);
    goto LABEL_112;
  }
  a1[1] = v11;
  v12 = mlir::DictionaryAttr::get((uint64_t)&v102, "localityHint", 0xCuLL);
  v101 = v12;
  if (!v12)
  {
    a3(v106, a4);
    if (v106[0])
    {
      v103 = 3;
      v104 = "expected key entry for localityHint in DictionaryAttr to set Properties.";
      v105 = 72;
      v74 = &v103;
      v75 = (char *)v107;
      if (v108 >= v109)
      {
        v92 = v108 + 1;
        if (v107 <= &v103 && (char *)v107 + 24 * v108 > (char *)&v103)
        {
          v100 = (char *)&v103 - (_BYTE *)v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v92, 24);
          v75 = (char *)v107;
          v74 = (int *)((char *)v107 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v92, 24);
          v74 = &v103;
          v75 = (char *)v107;
        }
      }
      v76 = &v75[24 * v108];
      v77 = *(_OWORD *)v74;
      *((_QWORD *)v76 + 2) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      ++v108;
      if (v106[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v106);
    }
    if (!v115)
      return 0;
    v78 = __p;
    if (__p)
    {
      v79 = v114;
      v80 = __p;
      if (v114 != __p)
      {
        do
          v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
        while (v79 != v78);
        v80 = __p;
      }
      v114 = v78;
      operator delete(v80);
    }
    v21 = v111;
    if (!v111)
      goto LABEL_114;
    v81 = v112;
    v23 = v111;
    if (v112 == v111)
      goto LABEL_113;
    do
    {
      v83 = *--v81;
      v82 = v83;
      *v81 = 0;
      if (v83)
        MEMORY[0x20BD002D4](v82, 0x1000C8077774924);
    }
    while (v81 != v21);
    goto LABEL_112;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a1[2] = v12;
    return 1;
  }
  a3(v106, a4);
  mlir::InFlightDiagnostic::append<mlir::Attribute>(v13, &v101);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v106);
  return 0;
}

uint64_t mlir::memref::PrefetchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  void *v21;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[7];

  v27[6] = *MEMORY[0x24BDAC8D0];
  v24 = a1;
  v25 = v27;
  v26 = 0x300000000;
  if (!*a2)
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  NamedAttr = mlir::Builder::getNamedAttr(&v24, (uint64_t)"isDataCache", 11, *a2);
  v5 = v4;
  v6 = v26;
  if (v26 >= HIDWORD(v26))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
    v6 = v26;
  }
  v7 = (uint64_t *)((char *)v25 + 16 * v6);
  *v7 = NamedAttr;
  v7[1] = v5;
  v8 = v26 + 1;
  LODWORD(v26) = v26 + 1;
  v9 = a2[1];
  if (v9)
  {
LABEL_7:
    v10 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"isWrite", 7, v9);
    v12 = v11;
    v13 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      v13 = v26;
    }
    v14 = (uint64_t *)((char *)v25 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
LABEL_10:
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v24, (uint64_t)"localityHint", 12, v15);
    v18 = v17;
    v19 = v26;
    if (v26 >= HIDWORD(v26))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v26 + 1, 16);
      v19 = v26;
    }
    v20 = (uint64_t *)((char *)v25 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    v8 = v26 + 1;
    LODWORD(v26) = v26 + 1;
  }
  v21 = v25;
  if (!v8)
  {
    DictionaryAttr = 0;
    if (v25 == v27)
      return DictionaryAttr;
    goto LABEL_16;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v24, (mlir::MLIRContext *)v25, v8);
  v21 = v25;
  if (v25 != v27)
LABEL_16:
    free(v21);
  return DictionaryAttr;
}

unint64_t mlir::memref::PrefetchOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v1 = *a1;
  v3 = &unk_254519000;
  if ((v2 & 1) == 0)
  {
    v22 = *a1;
    v24 = a1;
    v3 = &unk_254519000;
    v15 = v14;
    v1 = v22;
    a1 = v24;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v16;
      v1 = v22;
      a1 = v24;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v4 = HIDWORD(v1);
  v5 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v1) ^ HIDWORD(v1));
  v29 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v6 = a1[1];
  if ((v4 & 1) == 0)
  {
    v23 = a1[1];
    v25 = a1;
    v3 = &unk_254519000;
    v18 = v17;
    v6 = v23;
    a1 = v25;
    if (v18)
    {
      v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v19 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v19;
      v6 = v23;
      a1 = v25;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v7 = HIDWORD(v6);
  v8 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v6) ^ HIDWORD(v6));
  v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v9 = a1[2];
  if ((v10 & 1) == 0)
  {
    v26 = a1[2];
    v9 = v26;
    v3 = &unk_254519000;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v9 = v26;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v11 = HIDWORD(v9);
  v12 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v9) ^ HIDWORD(v9));
  v27 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 47));
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v29, (uint64_t *)&v28, (uint64_t *)&v27);
}

uint64_t mlir::memref::PrefetchOp::getInherentAttr(int a1, _QWORD *a2, char *__s1, size_t __n)
{
  if (__n == 7)
  {
    if (!memcmp(__s1, "isWrite", 7uLL))
      return a2[1];
    return 0;
  }
  if (__n == 12)
  {
    if (!memcmp(__s1, "localityHint", 0xCuLL))
      return a2[2];
    return 0;
  }
  if (__n != 11)
    return 0;
  if (*(_QWORD *)__s1 != 0x6143617461447369 || *(_QWORD *)(__s1 + 3) != 0x6568636143617461)
    return 0;
  return *a2;
}

uint64_t mlir::memref::PrefetchOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v5 = (_QWORD *)result;
  if (a3 == 7)
  {
    result = memcmp(__s1, "isWrite", 7uLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        result = mlir::BoolAttr::classof(a4);
        if ((_DWORD)result)
          v7 = a4;
        else
          v7 = 0;
        v5[1] = v7;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (a3 == 12)
  {
    result = memcmp(__s1, "localityHint", 0xCuLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          v8 = a4;
        else
          v8 = 0;
        v5[2] = v8;
      }
      else
      {
        v5[2] = 0;
      }
    }
  }
  else if (a3 == 11 && *(_QWORD *)__s1 == 0x6143617461447369 && *(_QWORD *)(__s1 + 3) == 0x6568636143617461)
  {
    if (a4)
    {
      result = mlir::BoolAttr::classof(a4);
      if ((_DWORD)result)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *(_QWORD *)result = 0;
    }
  }
  return result;
}

void mlir::memref::PrefetchOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"isDataCache", 11, *a2);
  v5 = a2[1];
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"isWrite", 7, v5);
  v6 = a2[2];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"localityHint", 12, v6);
}

BOOL mlir::memref::PrefetchOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  const void **v10;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (const void **)"isDataCache", (const char *)0xB, a3, a4))
  {
    v9 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (const void **)"isWrite", (const char *)7, a3, a4))
    {
      v10 = (const void **)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v10, (const void **)"localityHint", (const char *)0xC, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(const void **a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  const void **v32;
  const void **v33;
  const void **v34;
  const char *v35;
  uint64_t v36;
  __int16 v37;
  uint64_t Value;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE v43[96];
  void *v44;
  _QWORD *v45;
  void *__p;
  _QWORD *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v34 = a1;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32))
    {
      v33 = a1;
      if ((mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v33) & 0x8000000000000000) == 0)
      {
        v32 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v32) <= 3)
          return 1;
      }
    }
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v34) = 3;
    v35 = "attribute '";
    v36 = 11;
    v10 = &v34;
    v11 = (char *)v40;
    if (v41 >= v42)
    {
      v28 = v41 + 1;
      if (v40 <= &v34 && (char *)v40 + 24 * v41 > (char *)&v34)
      {
        v30 = (char *)&v34 - (_BYTE *)v40;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v28, 24);
        v11 = (char *)v40;
        v10 = (const void ***)((char *)v40 + v30);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v28, 24);
        v10 = &v34;
        v11 = (char *)v40;
      }
    }
    v12 = &v11[24 * v41];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = v10[2];
    *(_OWORD *)v12 = v13;
    ++v41;
    if (Value)
    {
      v37 = 261;
      v34 = a2;
      v35 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v39, &v34);
      if (Value)
      {
        LODWORD(v34) = 3;
        v35 = "' failed to satisfy constraint: 32-bit signless integer attribute whose minimum value is 0 whose maximum value is 3";
        v36 = 115;
        v14 = &v34;
        v15 = (char *)v40;
        if (v41 >= v42)
        {
          v29 = v41 + 1;
          if (v40 <= &v34 && (char *)v40 + 24 * v41 > (char *)&v34)
          {
            v31 = (char *)&v34 - (_BYTE *)v40;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
            v15 = (char *)v40;
            v14 = (const void ***)((char *)v40 + v31);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v29, 24);
            v14 = &v34;
            v15 = (char *)v40;
          }
        }
        v16 = &v15[24 * v41];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = v14[2];
        *(_OWORD *)v16 = v17;
        ++v41;
      }
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  if (v48)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v47;
      v21 = __p;
      if (v47 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v47 = v19;
      operator delete(v21);
    }
    v22 = v44;
    if (v44)
    {
      v23 = v45;
      v24 = v44;
      if (v45 != v44)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v44;
      }
      v45 = v22;
      operator delete(v24);
    }
    if (v40 != v43)
      free(v40);
  }
  return v18;
}

BOOL mlir::memref::PrefetchOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 2) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_25451B000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties]";
        v15 = 112;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v4[310];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  _QWORD *v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::BoolAttr::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::BoolAttr]";
  v41 = 64;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = __p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::memref::PrefetchOp::writeProperties(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *v3);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v3[1]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v3[2]);
}

uint64_t mlir::memref::PrefetchOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const void **v6;
  uint64_t v7;
  uint64_t ODSOperands;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const void **v34[4];
  __int16 v35;
  _QWORD v36[3];
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v34[0] = (const void **)"requires attribute 'isDataCache'";
    v35 = 259;
    mlir::OpState::emitOpError(this, v34, (uint64_t)v36);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    if (!v43)
      return v7;
    v13 = __p;
    if (__p)
    {
      v14 = v42;
      v15 = __p;
      if (v42 != __p)
      {
        do
          v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        v15 = __p;
      }
      v42 = v13;
      operator delete(v15);
    }
    v16 = v39;
    if (v39)
    {
      v17 = v40;
      v18 = v39;
      if (v40 == v39)
        goto LABEL_60;
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          MEMORY[0x20BD002D4](v19, 0x1000C8077774924);
      }
      while (v17 != v16);
LABEL_59:
      v18 = v39;
LABEL_60:
      v40 = v16;
      operator delete(v18);
    }
LABEL_61:
    if (v37 != &v38)
      free(v37);
    return v7;
  }
  v5 = *(_QWORD **)(v3 + 8);
  if (!v5)
  {
    v34[0] = (const void **)"requires attribute 'isWrite'";
    v35 = 259;
    mlir::OpState::emitOpError(this, v34, (uint64_t)v36);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    if (!v43)
      return v7;
    v21 = __p;
    if (__p)
    {
      v22 = v42;
      v23 = __p;
      if (v42 != __p)
      {
        do
          v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
        while (v22 != v21);
        v23 = __p;
      }
      v42 = v21;
      operator delete(v23);
    }
    v16 = v39;
    if (v39)
    {
      v24 = v40;
      v18 = v39;
      if (v40 == v39)
        goto LABEL_60;
      do
      {
        v26 = *--v24;
        v25 = v26;
        *v24 = 0;
        if (v26)
          MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
      }
      while (v24 != v16);
      goto LABEL_59;
    }
    goto LABEL_61;
  }
  v6 = *(const void ***)(v3 + 16);
  if (!v6)
  {
    v34[0] = (const void **)"requires attribute 'localityHint'";
    v35 = 259;
    mlir::OpState::emitOpError(this, v34, (uint64_t)v36);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    if (!v43)
      return v7;
    v27 = __p;
    if (__p)
    {
      v28 = v42;
      v29 = __p;
      if (v42 != __p)
      {
        do
          v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        v29 = __p;
      }
      v42 = v27;
      operator delete(v29);
    }
    v16 = v39;
    if (v39)
    {
      v30 = v40;
      v18 = v39;
      if (v40 == v39)
        goto LABEL_60;
      do
      {
        v32 = *--v30;
        v31 = v32;
        *v30 = 0;
        if (v32)
          MEMORY[0x20BD002D4](v31, 0x1000C8077774924);
      }
      while (v30 != v16);
      goto LABEL_59;
    }
    goto LABEL_61;
  }
  v36[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (const void **)"isWrite", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v36))return 0;
  v36[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v6, (const void **)"localityHint", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v36))return 0;
  v36[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v4, (const void **)"isDataCache", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v36)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  v7 = 1;
  ODSOperands = mlir::memref::PrefetchOp::getODSOperands((mlir::memref::PrefetchOp *)this, 1u);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    for (i = ODSOperands + 24;
          mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v11 + 1);
          i += 32)
    {
      if (v10 == ++v11)
        return v7;
    }
    return 0;
  }
  return v7;
}

uint64_t mlir::memref::detail::RankOpGenericAdaptorBase::RankOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.rank", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::memref::RankOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::memref::RankOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::IndexType **v5;
  mlir::MLIRContext *v6;
  uint64_t IndexType;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12[2];
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, 24);
  v12[0] = (uint64_t)v14;
  v12[1] = 1;
  v13 = 0;
  v11[0] = &v13;
  v11[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v14, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v10 = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, &v10))
    return 0;
  v13 = v10;
  v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v5, v6);
  v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v8) = IndexType;
  ++*(_DWORD *)(a2 + 72);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v12, v11, v4, a2 + 16) != 0;
}

uint64_t mlir::memref::ReallocOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[3];
  void *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[96];
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      v44 = 3;
      v45 = "expected DictionaryAttr to set properties";
      v46 = 41;
      v26 = &v44;
      v27 = (char *)v48;
      if (v49 >= v50)
      {
        v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v40 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v27 = (char *)v48;
          v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v26 = &v44;
          v27 = (char *)v48;
        }
      }
      v28 = &v27[24 * v49];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v56)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v55;
      v32 = __p;
      if (v55 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v55 = v30;
      operator delete(v32);
    }
    v21 = v52;
    if (!v52)
      goto LABEL_43;
    v33 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "alignment", 9uLL);
  if (!v8)
    return 1;
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    v44 = 3;
    v46 = 54;
    v10 = &v44;
    v11 = (char *)v48;
    if (v49 >= v50)
    {
      v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        v41 = (char *)&v44 - (_BYTE *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v11 = (char *)v48;
        v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v10 = &v44;
        v11 = (char *)v48;
      }
    }
    v12 = &v11[24 * v49];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v49;
    if (v47[0])
    {
      v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      v15 = (char *)v48;
      if (v49 >= v50)
      {
        v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v42 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v15 = (char *)v48;
          v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v14 = &v44;
          v15 = (char *)v48;
        }
      }
      v16 = &v15[24 * v49];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
  }
  if (!v56)
    return 0;
  v18 = __p;
  if (__p)
  {
    v19 = v55;
    v20 = __p;
    if (v55 != __p)
    {
      do
        v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      v20 = __p;
    }
    v55 = v18;
    operator delete(v20);
  }
  v21 = v52;
  if (v52)
  {
    v22 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v25 = *--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
    }
    while (v22 != v21);
LABEL_41:
    v23 = v52;
LABEL_42:
    v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51)
    free(v48);
  return 0;
}

BOOL mlir::memref::ReallocOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties]";
        v15 = 111;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[312];
    return a1[32];
  }
  return result;
}

BOOL mlir::memref::ReallocOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t NextResultAtOffset;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  BOOL v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  const void **v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55;
  _QWORD *v56;
  void *__p;
  _QWORD *v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v50[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v3, (const void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v50)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps12(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 0))
  {
    return 0;
  }
  v4 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v6 = -1;
    goto LABEL_5;
  }
  v5 = *((unsigned int *)v4 + 17);
  v6 = v5 - 1;
  if ((unint64_t)(v5 - 1) <= 1)
  {
    if (v5 == 1)
    {
LABEL_31:
      v32 = *((_DWORD *)v4 + 9);
      v33 = v4 - 2;
      if (v32)
        v34 = (uint64_t)v33;
      else
        v34 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, 0);
      return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps12(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", 6, 0) != 0;
    }
    v30 = v4[9] + 56;
    v31 = 1;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(*(_QWORD *)v30 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v31))
    {
      ++v31;
      v30 += 32;
      if (v5 == v31)
      {
        v4 = *this;
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_5:
  v45 = (const void **)"operand group starting at #";
  v46 = 259;
  mlir::OpState::emitOpError(this, &v45, (uint64_t)v50);
  if (v50[0])
  {
    v47 = 5;
    v48 = 1;
    v7 = &v47;
    v8 = (char *)v51;
    if (v52 >= v53)
    {
      v37 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        v42 = (char *)&v47 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        v8 = (char *)v51;
        v7 = (int *)((char *)v51 + v42);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v37, 24);
        v7 = &v47;
        v8 = (char *)v51;
      }
    }
    v9 = &v8[24 * v52];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    v11 = ++v52;
    if (v50[0])
    {
      v47 = 3;
      v48 = (uint64_t)" requires 0 or 1 element, but found ";
      v49 = 36;
      v12 = &v47;
      v13 = (char *)v51;
      if (v11 >= v53)
      {
        v38 = v11 + 1;
        v39 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v39)
        {
          v43 = (char *)&v47 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          v13 = (char *)v51;
          v12 = (int *)((char *)v51 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
          v12 = &v47;
          v13 = (char *)v51;
        }
      }
      v14 = &v13[24 * v52];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v52;
      if (v50[0])
      {
        v47 = 5;
        v48 = v6;
        v17 = &v47;
        v18 = (char *)v51;
        if (v16 >= v53)
        {
          v40 = v16 + 1;
          v41 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v41)
          {
            v44 = (char *)&v47 - (_BYTE *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            v18 = (char *)v51;
            v17 = (int *)((char *)v51 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
            v17 = &v47;
            v18 = (char *)v51;
          }
        }
        v19 = &v18[24 * v52];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        ++v52;
      }
    }
  }
  v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  if (v59)
  {
    v22 = __p;
    if (__p)
    {
      v23 = v58;
      v24 = __p;
      if (v58 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v58 = v22;
      operator delete(v24);
    }
    v25 = v55;
    if (v55)
    {
      v26 = v56;
      v27 = v55;
      if (v56 != v55)
      {
        do
        {
          v29 = *--v26;
          v28 = v29;
          *v26 = 0;
          if (v29)
            MEMORY[0x20BD002D4](v28, 0x1000C8077774924);
        }
        while (v26 != v25);
        v27 = v55;
      }
      v56 = v25;
      operator delete(v27);
    }
    if (v51 != v54)
      free(v51);
  }
  return v21;
}

uint64_t mlir::memref::__mlir_ods_local_type_constraint_MemRefOps12(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  const void ***v29;
  char *v30;
  char *v31;
  __int128 v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  const void **v52;
  uint64_t v53;
  __int16 v54;
  const void **v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  void *v59;
  unsigned int v60;
  unsigned int v61;
  _BYTE v62[96];
  void *v63;
  _QWORD *v64;
  void *__p;
  _QWORD *v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_5;
  v58[0] = a2;
  v58[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v10 + 8);
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v58);
  v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
  v52 = a2;
  v53 = v11;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52))
    goto LABEL_5;
  v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
  v55 = a2;
  v56 = v12;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v55);
  if (v13 == 1)
    return 1;
LABEL_5:
  v54 = 261;
  v52 = a3;
  v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v58);
  if (v58[0])
  {
    LODWORD(v55) = 3;
    v56 = (uint64_t)" #";
    v57 = 2;
    v15 = &v55;
    v16 = (char *)v59;
    if (v60 >= v61)
    {
      v42 = v60 + 1;
      if (v59 <= &v55 && (char *)v59 + 24 * v60 > (char *)&v55)
      {
        v48 = (char *)&v55 - (_BYTE *)v59;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v42, 24);
        v16 = (char *)v59;
        v15 = (const void ***)((char *)v59 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v42, 24);
        v15 = &v55;
        v16 = (char *)v59;
      }
    }
    v17 = &v16[24 * v60];
    v18 = *(_OWORD *)v15;
    *((_QWORD *)v17 + 2) = v15[2];
    *(_OWORD *)v17 = v18;
    v19 = ++v60;
    if (v58[0])
    {
      LODWORD(v55) = 5;
      v56 = a5;
      v20 = &v55;
      v21 = (char *)v59;
      if (v19 >= v61)
      {
        v43 = v19 + 1;
        v44 = (char *)v59 + 24 * v19 > (char *)&v55;
        if (v59 <= &v55 && v44)
        {
          v49 = (char *)&v55 - (_BYTE *)v59;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v43, 24);
          v21 = (char *)v59;
          v20 = (const void ***)((char *)v59 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v43, 24);
          v20 = &v55;
          v21 = (char *)v59;
        }
      }
      v22 = &v21[24 * v60];
      v23 = *(_OWORD *)v20;
      *((_QWORD *)v22 + 2) = v20[2];
      *(_OWORD *)v22 = v23;
      v24 = ++v60;
      if (v58[0])
      {
        LODWORD(v55) = 3;
        v56 = (uint64_t)" must be 1D memref of any type values, but got ";
        v57 = 47;
        v25 = &v55;
        v26 = (char *)v59;
        if (v24 >= v61)
        {
          v45 = v24 + 1;
          v46 = (char *)v59 + 24 * v24 > (char *)&v55;
          if (v59 <= &v55 && v46)
          {
            v50 = (char *)&v55 - (_BYTE *)v59;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v45, 24);
            v26 = (char *)v59;
            v25 = (const void ***)((char *)v59 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v45, 24);
            v25 = &v55;
            v26 = (char *)v59;
          }
        }
        v27 = &v26[24 * v60];
        v28 = *(_OWORD *)v25;
        *((_QWORD *)v27 + 2) = v25[2];
        *(_OWORD *)v27 = v28;
        ++v60;
        if (v58[0])
        {
          v29 = &v55;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v55, (uint64_t)a2);
          v30 = (char *)v59;
          if (v60 >= v61)
          {
            v47 = v60 + 1;
            if (v59 <= &v55 && (char *)v59 + 24 * v60 > (char *)&v55)
            {
              v51 = (char *)&v55 - (_BYTE *)v59;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v47, 24);
              v30 = (char *)v59;
              v29 = (const void ***)((char *)v59 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v62, v47, 24);
              v29 = &v55;
              v30 = (char *)v59;
            }
          }
          v31 = &v30[24 * v60];
          v32 = *(_OWORD *)v29;
          *((_QWORD *)v31 + 2) = v29[2];
          *(_OWORD *)v31 = v32;
          ++v60;
        }
      }
    }
  }
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
  if (v58[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  if (v67)
  {
    v33 = __p;
    if (__p)
    {
      v34 = v66;
      v35 = __p;
      if (v66 != __p)
      {
        do
          v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        v35 = __p;
      }
      v66 = v33;
      operator delete(v35);
    }
    v36 = v63;
    if (v63)
    {
      v37 = v64;
      v38 = v63;
      if (v64 != v63)
      {
        do
        {
          v40 = *--v37;
          v39 = v40;
          *v37 = 0;
          if (v40)
            MEMORY[0x20BD002D4](v39, 0x1000C8077774924);
        }
        while (v37 != v36);
        v38 = v63;
      }
      v64 = v36;
      operator delete(v38);
    }
    if (v59 != v62)
      free(v59);
  }
  return v14;
}

uint64_t mlir::memref::ReallocOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  const void **v11;
  mlir::IndexType **v12;
  mlir::MLIRContext *v13;
  uint64_t IndexType;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25[2];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int16 v29;
  void *__src;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[128];
  _QWORD v37[5];

  v37[4] = *MEMORY[0x24BDAC8D0];
  memset(v37, 0, 24);
  v25[0] = (uint64_t)v37;
  v25[1] = 1;
  v33 = 0;
  v34 = v36;
  v35 = 0x400000000;
  v24[0] = &v33;
  v24[1] = 1;
  __src = &v32;
  v31 = 0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v37, 1))
    goto LABEL_21;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 680))(a1, &v26, 1);
    if (v5 >= 0x100u)
    {
      if (!(_BYTE)v5)
        goto LABEL_21;
      v6 = &v26;
      v7 = (char *)v34;
      if (v35 >= HIDWORD(v35))
      {
        v21 = v35 + 1;
        if (v34 <= &v26 && (char *)v34 + 32 * v35 > (char *)&v26)
        {
          v22 = (char *)&v26 - (_BYTE *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v21, 32);
          v7 = (char *)v34;
          v6 = (uint64_t *)((char *)v34 + v22);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v21, 32);
          v6 = &v26;
          v7 = (char *)v34;
        }
      }
      v8 = &v7[32 * v35];
      v9 = *((_OWORD *)v6 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v6;
      *((_OWORD *)v8 + 1) = v9;
      LODWORD(v35) = v35 + 1;
    }
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
      goto LABEL_21;
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    goto LABEL_21;
  v10 = *(_QWORD *)(a2 + 8);
  v26 = a1;
  v27 = &v23;
  v28 = a2;
  v11 = (const void **)mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v10 + 96));
  if (v11)
  {
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(v11, (const void **)"alignment", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReallocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v26))goto LABEL_21;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_21;
  v26 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26))
    goto LABEL_21;
  v33 = v26;
  v29 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "to", 2, &v26))goto LABEL_21;
  if (!mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
    goto LABEL_21;
  v12 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v12, v13);
  mlir::OperationState::addTypes(a2, __src, v31);
  v15 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, a2 + 16))goto LABEL_21;
  if ((_DWORD)v35)
  {
    v16 = (char *)v34;
    v17 = 32 * v35;
    v18 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v16, IndexType, v15))
    {
      v16 += 32;
      v17 -= 32;
      if (!v17)
        goto LABEL_22;
    }
LABEL_21:
    v18 = 0;
LABEL_22:
    v19 = __src;
    if (__src != &v32)
      goto LABEL_23;
    goto LABEL_24;
  }
  v18 = 1;
  v19 = __src;
  if (__src != &v32)
LABEL_23:
    free(v19);
LABEL_24:
  if (v34 != v36)
    free(v34);
  return v18;
}

void mlir::memref::ReallocOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  mlir::Operation *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;
  mlir::Operation *v11;
  mlir::ArrayAttr *v12;
  uint64_t Value;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _WORD *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29[4];
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  if (*((_DWORD *)*this + 17) == 1 || !*(_QWORD *)(*((_QWORD *)*this + 9) + 56))
    goto LABEL_15;
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "(", 1uLL);
    v8 = *this;
    if (*((_DWORD *)*this + 17) == 1)
      goto LABEL_12;
LABEL_10:
    if (*(_QWORD *)(*((_QWORD *)v8 + 9) + 56))
      (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 160))(a2);
    goto LABEL_12;
  }
  *v7 = 40;
  ++*((_QWORD *)v6 + 4);
  v8 = *this;
  if (*((_DWORD *)*this + 17) != 1)
    goto LABEL_10;
LABEL_12:
  v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if (*((_BYTE **)v9 + 3) == v10)
  {
    llvm::raw_ostream::write(v9, ")", 1uLL);
  }
  else
  {
    *v10 = 41;
    ++*((_QWORD *)v9 + 4);
  }
LABEL_15:
  v32 = v34;
  v33 = 0x200000000;
  v11 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v29[0] = mlir::Operation::getAttrDictionary(v11);
    v12 = (mlir::ArrayAttr *)v29;
  }
  else
  {
    v12 = (mlir::Operation *)((char *)v11 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v12);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v14, v32, v33);
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 32);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 32;
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if (*((_BYTE **)v17 + 3) == v18)
  {
    llvm::raw_ostream::write(v17, ":", 1uLL);
  }
  else
  {
    *v18 = 58;
    ++*((_QWORD *)v17 + 4);
  }
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((_QWORD *)v19 + 4) = v20 + 1;
    *v20 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = (_BYTE *)*((_QWORD *)v21 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
  {
    llvm::raw_ostream::write(v21, 32);
  }
  else
  {
    *((_QWORD *)v21 + 4) = v22 + 1;
    *v22 = 32;
  }
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_WORD *)*((_QWORD *)v23 + 4);
  if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 1uLL)
  {
    *v24 = 28532;
    *((_QWORD *)v23 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v23, "to", 2uLL);
  }
  v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
  {
    llvm::raw_ostream::write(v25, 32);
  }
  else
  {
    *((_QWORD *)v25 + 4) = v26 + 1;
    *v26 = 32;
  }
  v27 = *((unsigned int *)*this + 9);
  v28 = (char *)*this - 16;
  if (!(_DWORD)v27)
    v28 = 0;
  v30 = v28;
  v31 = v27;
  mlir::OperandRange::getTypes((uint64_t *)&v30, v29);
  v30 = ", ";
  v31 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v29[0], v29[1], v29[2], v29[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v30);
  if (v32 != v34)
    free(v32);
}

void mlir::memref::ReallocOp::getEffects(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t NextResultAtOffset;
  uint64_t *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  const char **v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  unsigned __int8 v31;
  uint64_t *v32;
  int v33;
  unsigned __int8 v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)(a2 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 24);
  v6 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Free,mlir::MemoryEffects::Effect>::get();
  if ((v7 & 1) == 0)
  {
    v51 = v6;
    v6 = v51;
    if (v30)
    {
      if ((v31 & 1) == 0
      {
        v52 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v53 = 84;
        v37 = llvm::StringRef::find((uint64_t *)&v52, "DesiredTypeName = ", 0x12uLL, 0);
        if (v53 >= v37)
          v38 = v37;
        else
          v38 = v53;
        v39 = &v52[v38];
        v40 = v53 - v38;
        if (v53 - v38 >= 0x12)
          v41 = 18;
        else
          v41 = v53 - v38;
        v42 = v40 - v41;
        if (v42 >= v42 - 1)
          v43 = v42 - 1;
        else
          v43 = v42;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v39[v41], v43);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v6 = v51;
    }
  }
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    v52 = (const char *)v6;
    v53 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v54 = v5 | 4;
    v55 = 0;
    v56 = 0;
    v57 = 1;
    v16 = v8 + 1;
    v17 = *(_QWORD *)a2 + 40 * (unint64_t)v8 > (unint64_t)&v52;
    if (*(_QWORD *)a2 <= (unint64_t)&v52 && v17)
    {
      v35 = (char *)&v52 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v16, 40);
      v18 = *(_QWORD *)a2;
      v19 = (const char **)&v35[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v16, 40);
      v18 = *(_QWORD *)a2;
      v19 = &v52;
    }
    v20 = v18 + 40 * *(unsigned int *)(a2 + 8);
    v21 = *(_OWORD *)v19;
    v22 = *((_OWORD *)v19 + 1);
    *(_QWORD *)(v20 + 32) = v19[4];
    *(_OWORD *)v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
  }
  else
  {
    v9 = *(_QWORD *)a2 + 40 * v8;
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v9 + 16) = v5 | 4;
    *(_QWORD *)(v9 + 24) = 0;
    *(_DWORD *)(v9 + 32) = 0;
    *(_BYTE *)(v9 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(*(_QWORD *)a1 + 36))
    v10 = *(_QWORD *)a1 - 16;
  else
    v10 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  v12 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Allocate,mlir::MemoryEffects::Effect>::get();
  if ((v13 & 1) == 0)
  {
    v32 = v12;
    v12 = v32;
    if (v33)
    {
      if ((v34 & 1) == 0
      {
        v52 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v53 = 84;
        v44 = llvm::StringRef::find((uint64_t *)&v52, "DesiredTypeName = ", 0x12uLL, 0);
        if (v53 >= v44)
          v45 = v44;
        else
          v45 = v53;
        v46 = &v52[v45];
        v47 = v53 - v45;
        if (v53 - v45 >= 0x12)
          v48 = 18;
        else
          v48 = v53 - v45;
        v49 = v47 - v48;
        if (v49 >= v49 - 1)
          v50 = v49 - 1;
        else
          v50 = v49;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v12 = v32;
    }
  }
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12))
  {
    v52 = (const char *)v12;
    v53 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v54 = NextResultAtOffset | 4;
    v55 = 0;
    v56 = 1;
    v57 = 1;
    v23 = v14 + 1;
    v24 = *(_QWORD *)a2 + 40 * (unint64_t)v14 > (unint64_t)&v52;
    if (*(_QWORD *)a2 <= (unint64_t)&v52 && v24)
    {
      v36 = (char *)&v52 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v23, 40);
      v25 = *(_QWORD *)a2;
      v26 = (const char **)&v36[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v23, 40);
      v25 = *(_QWORD *)a2;
      v26 = &v52;
    }
    v27 = v25 + 40 * *(unsigned int *)(a2 + 8);
    v28 = *(_OWORD *)v26;
    v29 = *((_OWORD *)v26 + 1);
    *(_QWORD *)(v27 + 32) = v26[4];
    *(_OWORD *)v27 = v28;
    *(_OWORD *)(v27 + 16) = v29;
  }
  else
  {
    v15 = *(_QWORD *)a2 + 40 * v14;
    *(_QWORD *)v15 = v12;
    *(_QWORD *)(v15 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v15 + 16) = NextResultAtOffset | 4;
    *(_QWORD *)(v15 + 24) = 0;
    *(_DWORD *)(v15 + 32) = 1;
    *(_BYTE *)(v15 + 36) = 1;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::ReinterpretCastOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t Context;
  unint64_t v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v5;
  v9 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v5 + 32);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.reinterpret_cast", 23, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::ReinterpretCastOp::getODSOperands(mlir::memref::ReinterpretCastOp *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int32x4_t *v7;
  int32x4_t v8;
  uint64_t v9;
  int32x4_t v10;
  uint64_t v11;
  int *v12;
  int v13;

  v2 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v3 = *(_QWORD *)this + 16 * ((v2 >> 23) & 1) + 64;
  else
    v3 = 0;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_14;
  }
  if (a2 >= 8)
  {
    v4 = a2 & 0xFFFFFFF8;
    v7 = (int32x4_t *)(v3 + 40);
    v8 = 0uLL;
    v9 = v4;
    v10 = 0uLL;
    do
    {
      v8 = vaddq_s32(v7[-1], v8);
      v10 = vaddq_s32(*v7, v10);
      v7 += 2;
      v9 -= 8;
    }
    while (v9);
    v5 = vaddvq_s32(vaddq_s32(v10, v8));
    if (v4 == a2)
      goto LABEL_13;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v11 = a2 - v4;
  v12 = (int *)(v3 + 4 * v4 + 24);
  do
  {
    v13 = *v12++;
    v5 += v13;
    --v11;
  }
  while (v11);
LABEL_13:
  v6 = v5;
LABEL_14:
  if ((v2 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v6;
  else
    return 32 * v6;
}

uint64_t mlir::memref::ReinterpretCastOp::getOffsets(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = *(unsigned int *)(v2 + 24);
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

uint64_t mlir::memref::ReinterpretCastOp::getSizes(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = (*(_DWORD *)(v2 + 28) + *(_DWORD *)(v2 + 24));
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

uint64_t mlir::memref::ReinterpretCastOp::getStrides(mlir::memref::ReinterpretCastOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  else
    v2 = 0;
  v3 = (v2[8] + v2[7] + v2[6]);
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

BOOL mlir::memref::ReinterpretCastOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  char *v63;
  char *v64;
  __int128 v65;
  int *v66;
  char *v67;
  char *v68;
  __int128 v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  char *v77;
  char *v78;
  __int128 v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  const char *v106;
  uint64_t v107;
  _QWORD v108[3];
  void *v109;
  unsigned int v110;
  unsigned int v111;
  _BYTE v112[96];
  void *v113;
  _QWORD *v114;
  void *__p;
  _QWORD *v116;
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v104 = v6;
  if (!v6)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected DictionaryAttr to set properties";
      v107 = 41;
      v16 = &v105;
      v17 = (char *)v109;
      if (v110 >= v111)
      {
        v87 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v95 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          v17 = (char *)v109;
          v16 = (int *)((char *)v109 + v95);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v87, 24);
          v16 = &v105;
          v17 = (char *)v109;
        }
      }
      v18 = &v17[24 * v110];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v20 = __p;
    if (__p)
    {
      v21 = v116;
      v22 = __p;
      if (v116 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v116 = v20;
      operator delete(v22);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v24 = v114;
    v25 = v113;
    if (v114 == v113)
    {
LABEL_116:
      v114 = v23;
      operator delete(v25);
LABEL_117:
      if (v109 != v112)
        free(v109);
      return 0;
    }
    do
    {
      v27 = *--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
    }
    while (v24 != v23);
LABEL_115:
    v25 = v113;
    goto LABEL_116;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_offsets", 0xEuLL);
  if (!v8)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected key entry for static_offsets in DictionaryAttr to set Properties.";
      v107 = 74;
      v28 = &v105;
      v29 = (char *)v109;
      if (v110 >= v111)
      {
        v88 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v96 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          v29 = (char *)v109;
          v28 = (int *)((char *)v109 + v96);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v88, 24);
          v28 = &v105;
          v29 = (char *)v109;
        }
      }
      v30 = &v29[24 * v110];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v32 = __p;
    if (__p)
    {
      v33 = v116;
      v34 = __p;
      if (v116 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v116 = v32;
      operator delete(v34);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v35 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v37 = *--v35;
      v36 = v37;
      *v35 = 0;
      if (v37)
        MEMORY[0x20BD002D4](v36, 0x1000C8077774924);
    }
    while (v35 != v23);
    goto LABEL_115;
  }
  v9 = (uint64_t)v8;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v8))
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v107 = 59;
      v38 = &v105;
      v39 = (char *)v109;
      if (v110 >= v111)
      {
        v89 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v97 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v39 = (char *)v109;
          v38 = (int *)((char *)v109 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          v38 = &v105;
          v39 = (char *)v109;
        }
      }
      v40 = &v39[24 * v110];
      v41 = *(_OWORD *)v38;
      *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
      *(_OWORD *)v40 = v41;
      ++v110;
      if (v108[0])
      {
        v42 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v9);
        v43 = (char *)v109;
        if (v110 >= v111)
        {
          v90 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            v98 = (char *)&v105 - (_BYTE *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            v43 = (char *)v109;
            v42 = (int *)((char *)v109 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
            v42 = &v105;
            v43 = (char *)v109;
          }
        }
        v44 = &v43[24 * v110];
        v45 = *(_OWORD *)v42;
        *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
        *(_OWORD *)v44 = v45;
        ++v110;
        if (v108[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117)
      return 0;
    v46 = __p;
    if (__p)
    {
      v47 = v116;
      v48 = __p;
      if (v116 != __p)
      {
        do
          v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
        while (v47 != v46);
        v48 = __p;
      }
      v116 = v46;
      operator delete(v48);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v49 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v51 = *--v49;
      v50 = v51;
      *v49 = 0;
      if (v51)
        MEMORY[0x20BD002D4](v50, 0x1000C8077774924);
    }
    while (v49 != v23);
    goto LABEL_115;
  }
  *a1 = v9;
  v10 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_sizes", 0xCuLL);
  if (!v10)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected key entry for static_sizes in DictionaryAttr to set Properties.";
      v107 = 72;
      v52 = &v105;
      v53 = (char *)v109;
      if (v110 >= v111)
      {
        v91 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v99 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          v53 = (char *)v109;
          v52 = (int *)((char *)v109 + v99);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v91, 24);
          v52 = &v105;
          v53 = (char *)v109;
        }
      }
      v54 = &v53[24 * v110];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
      *(_OWORD *)v54 = v55;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v56 = __p;
    if (__p)
    {
      v57 = v116;
      v58 = __p;
      if (v116 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v116 = v56;
      operator delete(v58);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v59 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v61 = *--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        MEMORY[0x20BD002D4](v60, 0x1000C8077774924);
    }
    while (v59 != v23);
    goto LABEL_115;
  }
  v11 = (uint64_t)v10;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v10))
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v107 = 57;
      v62 = &v105;
      v63 = (char *)v109;
      if (v110 >= v111)
      {
        v92 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v100 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          v63 = (char *)v109;
          v62 = (int *)((char *)v109 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v92, 24);
          v62 = &v105;
          v63 = (char *)v109;
        }
      }
      v64 = &v63[24 * v110];
      v65 = *(_OWORD *)v62;
      *((_QWORD *)v64 + 2) = *((_QWORD *)v62 + 2);
      *(_OWORD *)v64 = v65;
      ++v110;
      if (v108[0])
      {
        v66 = &v105;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v105, v11);
        v67 = (char *)v109;
        if (v110 >= v111)
        {
          v93 = v110 + 1;
          if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
          {
            v101 = (char *)&v105 - (_BYTE *)v109;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            v67 = (char *)v109;
            v66 = (int *)((char *)v109 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v93, 24);
            v66 = &v105;
            v67 = (char *)v109;
          }
        }
        v68 = &v67[24 * v110];
        v69 = *(_OWORD *)v66;
        *((_QWORD *)v68 + 2) = *((_QWORD *)v66 + 2);
        *(_OWORD *)v68 = v69;
        ++v110;
        if (v108[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
      }
    }
    if (!v117)
      return 0;
    v70 = __p;
    if (__p)
    {
      v71 = v116;
      v72 = __p;
      if (v116 != __p)
      {
        do
          v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
        while (v71 != v70);
        v72 = __p;
      }
      v116 = v70;
      operator delete(v72);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v73 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v75 = *--v73;
      v74 = v75;
      *v73 = 0;
      if (v75)
        MEMORY[0x20BD002D4](v74, 0x1000C8077774924);
    }
    while (v73 != v23);
    goto LABEL_115;
  }
  a1[1] = v11;
  v12 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "static_strides", 0xEuLL);
  v103 = v12;
  if (!v12)
  {
    a3(v108, a4);
    if (v108[0])
    {
      v105 = 3;
      v106 = "expected key entry for static_strides in DictionaryAttr to set Properties.";
      v107 = 74;
      v76 = &v105;
      v77 = (char *)v109;
      if (v110 >= v111)
      {
        v94 = v110 + 1;
        if (v109 <= &v105 && (char *)v109 + 24 * v110 > (char *)&v105)
        {
          v102 = (char *)&v105 - (_BYTE *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          v77 = (char *)v109;
          v76 = (int *)((char *)v109 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v94, 24);
          v76 = &v105;
          v77 = (char *)v109;
        }
      }
      v78 = &v77[24 * v110];
      v79 = *(_OWORD *)v76;
      *((_QWORD *)v78 + 2) = *((_QWORD *)v76 + 2);
      *(_OWORD *)v78 = v79;
      ++v110;
      if (v108[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v108);
    }
    if (!v117)
      return 0;
    v80 = __p;
    if (__p)
    {
      v81 = v116;
      v82 = __p;
      if (v116 != __p)
      {
        do
          v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
        while (v81 != v80);
        v82 = __p;
      }
      v116 = v80;
      operator delete(v82);
    }
    v23 = v113;
    if (!v113)
      goto LABEL_117;
    v83 = v114;
    v25 = v113;
    if (v114 == v113)
      goto LABEL_116;
    do
    {
      v85 = *--v83;
      v84 = v85;
      *v83 = 0;
      if (v85)
        MEMORY[0x20BD002D4](v84, 0x1000C8077774924);
    }
    while (v83 != v23);
    goto LABEL_115;
  }
  v13 = v12;
  if (!mlir::detail::DenseArrayAttrImpl<long long>::classof(v12))
  {
    a3(v108, a4);
    mlir::InFlightDiagnostic::append<mlir::Attribute>(v86, (uint64_t *)&v103);
LABEL_122:
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v108);
    return 0;
  }
  a1[2] = (uint64_t)v13;
  v14 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "operandSegmentSizes", 0x13uLL);
  if (!v14)
  {
    v14 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v104, "operand_segment_sizes", 0x15uLL);
    if (!v14)
    {
      a3(v108, a4);
      mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v108, "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.");
      goto LABEL_122;
    }
  }
  return mlir::convertFromAttribute(a1 + 3, (const char *)4, v14, a3, a4) != 0;
}

uint64_t mlir::memref::ReinterpretCastOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t DictionaryAttr;
  void *v30;
  mlir::DictionaryAttr *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x24BDAC8D0];
  v32 = a1;
  v33 = v35;
  v34 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_offsets", 14, *a2);
    v6 = v5;
    v7 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v7 = v34;
    }
    v8 = (uint64_t *)((char *)v33 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v34) = v34 + 1;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_sizes", 12, v9);
    v12 = v11;
    v13 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v13 = v34;
    }
    v14 = (uint64_t *)((char *)v33 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    LODWORD(v34) = v34 + 1;
  }
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"static_strides", 14, v15);
    v18 = v17;
    v19 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
      v19 = v34;
    }
    v20 = (uint64_t *)((char *)v33 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    LODWORD(v34) = v34 + 1;
  }
  v21 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
  v22 = mlir::Builder::getNamedAttr(&v32, (uint64_t)"operandSegmentSizes", 19, v21);
  v24 = v23;
  v25 = v34;
  if (v34 >= HIDWORD(v34))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v34 + 1, 16);
    v25 = v34;
  }
  v26 = (uint64_t *)((char *)v33 + 16 * v25);
  *v26 = v22;
  v26[1] = v24;
  v27 = __CFADD__((_DWORD)v34, 1);
  v28 = (v34 + 1);
  LODWORD(v34) = v34 + 1;
  if (v27)
  {
    DictionaryAttr = 0;
    v30 = v33;
    if (v33 == v35)
      return DictionaryAttr;
    goto LABEL_20;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v32, (mlir::MLIRContext *)v33, v28);
  v30 = v33;
  if (v33 != v35)
LABEL_20:
    free(v30);
  return DictionaryAttr;
}

unint64_t mlir::memref::ReinterpretCastOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v1 = *a1;
  v3 = &unk_254519000;
  if ((v2 & 1) == 0)
  {
    v28 = *a1;
    v31 = a1;
    v3 = &unk_254519000;
    v17 = v16;
    v1 = v28;
    a1 = v31;
    if (v17)
    {
      v18 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v18 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v18;
      v1 = v28;
      a1 = v31;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v4 = HIDWORD(v1);
  v5 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v1) ^ HIDWORD(v1));
  v38 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v6 = a1[1];
  if ((v4 & 1) == 0)
  {
    v29 = a1[1];
    v32 = a1;
    v3 = &unk_254519000;
    v20 = v19;
    v6 = v29;
    a1 = v32;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v6 = v29;
      a1 = v32;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v7 = HIDWORD(v6);
  v8 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v6) ^ HIDWORD(v6));
  v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v9 = a1[2];
  if ((v7 & 1) == 0)
  {
    v30 = a1[2];
    v33 = a1;
    v3 = &unk_254519000;
    v23 = v22;
    v9 = v30;
    a1 = v33;
    if (v23)
    {
      v24 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v24 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v24;
      v9 = v30;
      a1 = v33;
      v3 = (_QWORD *)&unk_254519000;
    }
  }
  v10 = HIDWORD(v9);
  v11 = 0x9DDFEA08EB382D69 * ((v3[373] + 8 * v9) ^ HIDWORD(v9));
  v36 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
  if ((v10 & 1) == 0)
  {
    v34 = a1;
    v3 = &unk_254519000;
    v26 = v25;
    a1 = v34;
    if (v26)
    {
      v27 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v27 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v27;
      v3 = (_QWORD *)&unk_254519000;
      a1 = v34;
    }
  }
  v12 = a1[4];
  v13 = __ROR8__(v12 + 16, 16);
  v14 = 0x9DDFEA08EB382D69 * (a1[3] ^ v3[373] ^ v13);
  v35 = (0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v13 ^ (v14 >> 47) ^ v14)) >> 47))) ^ v12;
  return llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(&v38, (uint64_t *)&v37, (uint64_t *)&v36, (uint64_t *)&v35);
}

unint64_t llvm::hash_combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v19[4];
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  if ((v6 & 1) == 0)
  {
    v14 = a2;
    v15 = a1;
    a2 = v14;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a2 = v14;
      a1 = v15;
    }
  }
  v7 = *a1;
  v22 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v19[0] = v7;
  v16 = 0;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v19, (uint64_t *)&v16, (_QWORD *)v19 + 1, (unint64_t)v20, *a2);
  v17 = v16;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v19, (uint64_t *)&v17, v8, (unint64_t)v20, *a3);
  v18 = v17;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v19, (uint64_t *)&v18, v9, (unint64_t)v20, *a4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v19, v18, v10, (char *)v20);
}

uint64_t mlir::memref::ReinterpretCastOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "static_sizes", __n))
        goto LABEL_11;
      return a2[1];
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        result = *a2;
      }
      else if (!memcmp(__s1, "static_strides", __n))
      {
        result = a2[2];
      }
      else
      {
LABEL_11:
        result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_11;
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n))
        goto LABEL_11;
LABEL_13:
      result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::memref::ReinterpretCastOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 0xCuLL:
      result = memcmp(__s1, "static_sizes", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v10 = a4;
          else
            v10 = 0;
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v11 = a4;
          else
            v11 = 0;
          *v5 = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "static_strides", a3);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if ((_DWORD)result)
              v7 = a4;
            else
              v7 = 0;
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_17;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_17:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v8 = (_DWORD)result ? a4 : 0;
          v12 = v8;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 4)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void mlir::memref::ReinterpretCastOp::populateInherentAttrs(mlir::MLIRContext *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_offsets", 14, *a2);
  v6 = a2[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_sizes", 12, v6);
  v7 = a2[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"static_strides", 14, v7);
  v8 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v8);
}

BOOL mlir::memref::ReinterpretCastOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v8, (const void **)"static_offsets", (const char *)0xE, a3, a4))
  {
    v9 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v9, (const void **)"static_sizes", (const char *)0xC, a3, a4))
    {
      v10 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v10, (const void **)"static_strides", (const char *)0xE, a3, a4))
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(_QWORD *a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!a1 || mlir::detail::DenseArrayAttrImpl<long long>::classof(a1))
    return 1;
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v11 = &v31;
    v12 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v12 = (char *)v37;
        v11 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = &v31;
        v12 = (char *)v37;
      }
    }
    v13 = &v12[24 * v38];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = v11[2];
    *(_OWORD *)v13 = v14;
    ++v38;
    if (v35)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: i64 dense array attribute";
        v33 = 57;
        v15 = &v31;
        v16 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v16 = (char *)v37;
            v15 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = &v31;
            v16 = (char *)v37;
          }
        }
        v17 = &v16[24 * v38];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = v15[2];
        *(_OWORD *)v17 = v18;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  if (v45)
  {
    v19 = __p;
    if (__p)
    {
      v20 = v44;
      v21 = __p;
      if (v44 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v44 = v19;
      operator delete(v21);
    }
    v22 = v41;
    if (v41)
    {
      v23 = v42;
      v24 = v41;
      if (v42 != v41)
      {
        do
        {
          v26 = *--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            MEMORY[0x20BD002D4](v25, 0x1000C8077774924);
        }
        while (v23 != v22);
        v24 = v41;
      }
      v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

BOOL mlir::memref::ReinterpretCastOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = __p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = *--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                MEMORY[0x20BD002D4](v10, 0x1000C8077774924);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_QWORD *)(v3 + 32) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_25451B000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties]";
        v15 = 119;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v4[314];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void ***v16;
  char *v17;
  char *v18;
  __int128 v19;
  const void ***v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  _QWORD *v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 48))(a1, &v39))
    return 0;
  v4 = v39;
  if (mlir::detail::DenseArrayAttrImpl<long long>::classof(v39))
    v5 = v4;
  else
    v5 = 0;
  *a2 = v5;
  if (v5)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v8 = &v40;
    v9 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v9 = (char *)v46;
        v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v8 = &v40;
        v9 = (char *)v46;
      }
    }
    v10 = &v9[24 * v47];
    v11 = *(_OWORD *)v8;
    *((_QWORD *)v10 + 2) = v8[2];
    *(_OWORD *)v10 = v11;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::DenseArrayAttrImpl<int64_t>]";
  v41 = 91;
  v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12)
      v13 = v12;
    else
      v13 = v41;
    v14 = 18;
    if (v41 - v13 < 0x12)
      v14 = v41 - v13;
    v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1)
      --v15;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v13 + v14);
    v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v16 = &v40;
          v17 = (char *)v46;
        }
      }
      v18 = &v17[24 * v47];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = v16[2];
      *(_OWORD *)v18 = v19;
      ++v47;
      if (v44)
      {
        v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        v21 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v21 = (char *)v46;
            v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v20 = &v40;
            v21 = (char *)v46;
          }
        }
        v22 = &v21[24 * v47];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = v20[2];
        *(_OWORD *)v22 = v23;
        ++v47;
      }
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v24 = __p;
    if (__p)
    {
      v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v53 = v24;
      operator delete(v26);
    }
    v27 = v50;
    if (v50)
    {
      v28 = v51;
      v29 = v50;
      if (v51 != v50)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v50;
      }
      v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49)
      free(v46);
  }
  return v6;
}

uint64_t mlir::memref::ReinterpretCastOp::writeProperties(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v4 = *(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)a1 + 24));
    v6 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v4 + 24, 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(v4 + 16));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a2, (int *)(v4 + 24), 4);
  return result;
}

BOOL mlir::memref::ReinterpretCastOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ODSOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t NextResultAtOffset;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  const void **v49[4];
  __int16 v50;
  _QWORD v51[3];
  void *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v49[0] = (const void **)"requires attribute 'static_offsets'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v28 = __p;
    if (__p)
    {
      v29 = v57;
      v30 = __p;
      if (v57 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v57 = v28;
      operator delete(v30);
    }
    v31 = v54;
    if (v54)
    {
      v32 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v35 = *--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
      }
      while (v32 != v31);
LABEL_76:
      v33 = v54;
LABEL_77:
      v55 = v31;
      operator delete(v33);
    }
LABEL_78:
    if (v52 != &v53)
      free(v52);
    return v27;
  }
  v5 = *(_QWORD **)(v3 + 8);
  if (!v5)
  {
    v49[0] = (const void **)"requires attribute 'static_sizes'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v36 = __p;
    if (__p)
    {
      v37 = v57;
      v38 = __p;
      if (v57 != __p)
      {
        do
          v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        v38 = __p;
      }
      v57 = v36;
      operator delete(v38);
    }
    v31 = v54;
    if (v54)
    {
      v39 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v41 = *--v39;
        v40 = v41;
        *v39 = 0;
        if (v41)
          MEMORY[0x20BD002D4](v40, 0x1000C8077774924);
      }
      while (v39 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v6 = *(_QWORD **)(v3 + 16);
  if (!v6)
  {
    v49[0] = (const void **)"requires attribute 'static_strides'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v42 = __p;
    if (__p)
    {
      v43 = v57;
      v44 = __p;
      if (v57 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v57 = v42;
      operator delete(v44);
    }
    v31 = v54;
    if (v54)
    {
      v45 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v47 = *--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
      }
      while (v45 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v51[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"static_offsets", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v51[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_sizes", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v51[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"static_strides", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v7 = *((unsigned int *)*this + 11);
  v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v8 = 0;
  v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    v10 = (*this)[9];
    if ((_DWORD)v9)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)v9)
    {
LABEL_14:
      v11 = 0;
      v12 = v10 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11)
          goto LABEL_17;
      }
      return 0;
    }
  }
LABEL_17:
  ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v14)
  {
    v15 = v14;
    v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  v17 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  if (v18)
  {
    v19 = v18;
    v20 = v17 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v20 += 32;
      if (!--v19)
        goto LABEL_25;
    }
    return 0;
  }
LABEL_25:
  v21 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 3u);
  if (v22)
  {
    v23 = v22;
    v24 = v21 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v24 += 32;
      if (!--v23)
        goto LABEL_29;
    }
    return 0;
  }
LABEL_29:
  if (*((_DWORD *)*this + 9))
    v25 = (uint64_t)(*this - 2);
  else
    v25 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::memref::ReinterpretCastOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  mlir::IndexType **v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t IndexType;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  void *v36;
  uint64_t v37;
  _BYTE v38[128];
  void *v39;
  uint64_t v40;
  _BYTE v41[128];
  _QWORD v42[4];
  uint64_t __src[4];
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  memset(v42, 0, 24);
  v31[0] = (uint64_t)v42;
  v31[1] = 1;
  v39 = v41;
  v40 = 0x400000000;
  v29 = 0;
  v30 = 0;
  v36 = v38;
  v37 = 0x400000000;
  v32 = 0;
  v33 = v35;
  v34 = 0x400000000;
  v27[1] = 1;
  v28 = 0;
  v27[0] = &v32;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v42, 1))
    goto LABEL_34;
  v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))goto LABEL_34;
  v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "offset", 6, __src))goto LABEL_34;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_34;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v39, &v30, __src, 0, 2))
    goto LABEL_34;
  v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  *v5 = v30;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    goto LABEL_34;
  v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "sizes", 5, __src))goto LABEL_34;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_34;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v36, &v29, __src, 0, 2))
    goto LABEL_34;
  v6 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v6 + 8) = v29;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    goto LABEL_34;
  v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "strides", 7, __src))goto LABEL_34;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_34;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v33, &v28, __src, 0, 2))
    goto LABEL_34;
  v7 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v7 + 16) = v28;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_34;
  v8 = a2[1];
  __src[0] = a1;
  __src[1] = (uint64_t)&v26;
  __src[2] = (uint64_t)a2;
  if (!mlir::memref::ReinterpretCastOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReinterpretCastOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_34;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_34;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::BaseMemRefType>(a1, __src))
    goto LABEL_34;
  v32 = __src[0];
  v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))goto LABEL_34;
  v26 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26))
    goto LABEL_34;
  __src[0] = v26;
  v9 = v40;
  v10 = v37;
  v11 = v34;
  v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(a2);
  v12[6] = 1;
  v12[7] = v9;
  v12[8] = v10;
  v12[9] = v11;
  v13 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v13, v14);
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  v15 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v31, v27, v4, v15))goto LABEL_34;
  if ((_DWORD)v40)
  {
    v16 = (char *)v39;
    v17 = 32 * v40;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v16, IndexType, v15))
    {
      v16 += 32;
      v17 -= 32;
      if (!v17)
        goto LABEL_25;
    }
LABEL_34:
    v22 = 0;
LABEL_35:
    v23 = v33;
    if (v33 != v35)
      goto LABEL_36;
    goto LABEL_37;
  }
LABEL_25:
  if ((_DWORD)v37)
  {
    v18 = (char *)v36;
    v19 = 32 * v37;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, IndexType, v15))
    {
      v18 += 32;
      v19 -= 32;
      if (!v19)
        goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_29:
  if ((_DWORD)v34)
  {
    v20 = (char *)v33;
    v21 = 32 * v34;
    v22 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v20, IndexType, v15))
    {
      v20 += 32;
      v21 -= 32;
      if (!v21)
        goto LABEL_35;
    }
    goto LABEL_34;
  }
  v22 = 1;
  v23 = v33;
  if (v33 != v35)
LABEL_36:
    free(v23);
LABEL_37:
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
  return v22;
}

void mlir::memref::ReinterpretCastOp::print(mlir::memref::ReinterpretCastOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  _DWORD *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  mlir::Operation *v73;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v76;
  llvm::raw_ostream *v77;
  _BYTE *v78;
  llvm::raw_ostream *v79;
  _BYTE *v80;
  llvm::raw_ostream *v81;
  _BYTE *v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  llvm::raw_ostream *v85;
  _WORD *v86;
  llvm::raw_ostream *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v92;
  uint64_t v93;
  _QWORD v94[4];
  unint64_t v95[2];
  unint64_t v96[2];
  unint64_t v97[3];

  v97[2] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 28532;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "to", 2uLL);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 5)
  {
    *(_WORD *)(v13 + 4) = 29797;
    *(_DWORD *)v13 = 1936090735;
    *((_QWORD *)v12 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12, "offset", 6uLL);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    *v15 = 58;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = *(_QWORD *)this;
  v19 = *(unsigned int *)(*(_QWORD *)this + 44);
  v20 = (void **)(*(_QWORD *)this + 16 * ((v19 >> 23) & 1) + 64);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v21 = *(_QWORD *)this + 16 * ((v19 >> 23) & 1) + 64;
  else
    v21 = 0;
  v22 = *(unsigned int *)(v21 + 24);
  v23 = *(_DWORD *)(v21 + 28);
  if ((v19 & 0x800000) != 0)
    v24 = *(_QWORD *)(v18 + 72);
  else
    v24 = 0;
  v25 = v24 + 32 * v22;
  v26 = (v23 + v22) - v22;
  v92 = *v20;
  v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  v29 = v28;
  mlir::ValueRange::ValueRange(v97, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v18, v25, v26, v27, v29, v97[0], v97[1], 0, 0, 2);
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if (*((_BYTE **)v30 + 3) == v31)
  {
    llvm::raw_ostream::write(v30, ",", 1uLL);
  }
  else
  {
    *v31 = 44;
    ++*((_QWORD *)v30 + 4);
  }
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_BYTE *)*((_QWORD *)v32 + 4);
  if ((unint64_t)v33 >= *((_QWORD *)v32 + 3))
  {
    llvm::raw_ostream::write(v32, 32);
  }
  else
  {
    *((_QWORD *)v32 + 4) = v33 + 1;
    *v33 = 32;
  }
  v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = *((_QWORD *)v34 + 4);
  if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 4)
  {
    *(_BYTE *)(v35 + 4) = 115;
    *(_DWORD *)v35 = 1702521203;
    *((_QWORD *)v34 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v34, "sizes", 5uLL);
  }
  v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v37 = (_BYTE *)*((_QWORD *)v36 + 4);
  if (*((_BYTE **)v36 + 3) == v37)
  {
    llvm::raw_ostream::write(v36, ":", 1uLL);
  }
  else
  {
    *v37 = 58;
    ++*((_QWORD *)v36 + 4);
  }
  v38 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v39 = (_BYTE *)*((_QWORD *)v38 + 4);
  if ((unint64_t)v39 >= *((_QWORD *)v38 + 3))
  {
    llvm::raw_ostream::write(v38, 32);
  }
  else
  {
    *((_QWORD *)v38 + 4) = v39 + 1;
    *v39 = 32;
  }
  v40 = *(_QWORD *)this;
  v41 = *(unsigned int *)(*(_QWORD *)this + 44);
  v42 = *(_QWORD *)this + 16 * ((v41 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v42 = 0;
  if ((v41 & 0x800000) != 0)
    v43 = *(_QWORD *)(v40 + 72);
  else
    v43 = 0;
  v44 = (*(_DWORD *)(v42 + 28) + *(_DWORD *)(v42 + 24));
  v45 = v43 + 32 * v44;
  v46 = (*(_DWORD *)(v42 + 32) + v44) - v44;
  v92 = *(void **)(v42 + 8);
  v47 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  v49 = v48;
  mlir::ValueRange::ValueRange(v96, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v40, v45, v46, v47, v49, v96[0], v96[1], 0, 0, 2);
  v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v51 = (_BYTE *)*((_QWORD *)v50 + 4);
  if (*((_BYTE **)v50 + 3) == v51)
  {
    llvm::raw_ostream::write(v50, ",", 1uLL);
  }
  else
  {
    *v51 = 44;
    ++*((_QWORD *)v50 + 4);
  }
  v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v53 = (_BYTE *)*((_QWORD *)v52 + 4);
  if ((unint64_t)v53 >= *((_QWORD *)v52 + 3))
  {
    llvm::raw_ostream::write(v52, 32);
  }
  else
  {
    *((_QWORD *)v52 + 4) = v53 + 1;
    *v53 = 32;
  }
  v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v55 = (_DWORD *)*((_QWORD *)v54 + 4);
  if (*((_QWORD *)v54 + 3) - (_QWORD)v55 > 6uLL)
  {
    *(_DWORD *)((char *)v55 + 3) = 1936024681;
    *v55 = 1769108595;
    *((_QWORD *)v54 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v54, "strides", 7uLL);
  }
  v56 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v57 = (_BYTE *)*((_QWORD *)v56 + 4);
  if (*((_BYTE **)v56 + 3) == v57)
  {
    llvm::raw_ostream::write(v56, ":", 1uLL);
  }
  else
  {
    *v57 = 58;
    ++*((_QWORD *)v56 + 4);
  }
  v58 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v59 = (_BYTE *)*((_QWORD *)v58 + 4);
  if ((unint64_t)v59 >= *((_QWORD *)v58 + 3))
  {
    llvm::raw_ostream::write(v58, 32);
  }
  else
  {
    *((_QWORD *)v58 + 4) = v59 + 1;
    *v59 = 32;
  }
  v60 = *(_QWORD *)this;
  v61 = *(unsigned int *)(*(_QWORD *)this + 44);
  v62 = *(_QWORD *)this + 16 * ((v61 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v62 = 0;
  if ((v61 & 0x800000) != 0)
    v63 = *(_QWORD *)(v60 + 72);
  else
    v63 = 0;
  v64 = (*(_DWORD *)(v62 + 28) + *(_DWORD *)(v62 + 24) + *(_DWORD *)(v62 + 32));
  v65 = v63 + 32 * v64;
  v66 = (*(_DWORD *)(v62 + 36) + v64) - v64;
  v92 = *(void **)(v62 + 16);
  v67 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v92);
  v69 = v68;
  mlir::ValueRange::ValueRange(v95, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v60, v65, v66, v67, v69, v95[0], v95[1], 0, 0, 2);
  v92 = v94;
  v94[0] = "operandSegmentSizes";
  v94[1] = 19;
  v94[2] = "static_offsets";
  v94[3] = 14;
  v93 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, 3uLL, 16);
  v70 = (char *)v92 + 16 * v93;
  *v70 = "static_sizes";
  v70[1] = 12;
  v71 = (v93 + 1);
  LODWORD(v93) = v71;
  if (v71 >= HIDWORD(v93))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v94, v71 + 1, 16);
    LODWORD(v71) = v93;
  }
  v72 = (char *)v92 + 16 * v71;
  *v72 = "static_strides";
  v72[1] = 14;
  LODWORD(v93) = v93 + 1;
  v73 = *(mlir::Operation **)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v73);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v73 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v76, v92, v93);
  v77 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v78 = (_BYTE *)*((_QWORD *)v77 + 4);
  if ((unint64_t)v78 >= *((_QWORD *)v77 + 3))
  {
    llvm::raw_ostream::write(v77, 32);
  }
  else
  {
    *((_QWORD *)v77 + 4) = v78 + 1;
    *v78 = 32;
  }
  v79 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v80 = (_BYTE *)*((_QWORD *)v79 + 4);
  if (*((_BYTE **)v79 + 3) == v80)
  {
    llvm::raw_ostream::write(v79, ":", 1uLL);
  }
  else
  {
    *v80 = 58;
    ++*((_QWORD *)v79 + 4);
  }
  v81 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v82 = (_BYTE *)*((_QWORD *)v81 + 4);
  if ((unint64_t)v82 >= *((_QWORD *)v81 + 3))
  {
    llvm::raw_ostream::write(v81, 32);
  }
  else
  {
    *((_QWORD *)v81 + 4) = v82 + 1;
    *v82 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v83 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v84 = (_BYTE *)*((_QWORD *)v83 + 4);
  if ((unint64_t)v84 >= *((_QWORD *)v83 + 3))
  {
    llvm::raw_ostream::write(v83, 32);
  }
  else
  {
    *((_QWORD *)v83 + 4) = v84 + 1;
    *v84 = 32;
  }
  v85 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v86 = (_WORD *)*((_QWORD *)v85 + 4);
  if (*((_QWORD *)v85 + 3) - (_QWORD)v86 > 1uLL)
  {
    *v86 = 28532;
    *((_QWORD *)v85 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v85, "to", 2uLL);
  }
  v87 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v88 = (_BYTE *)*((_QWORD *)v87 + 4);
  if ((unint64_t)v88 >= *((_QWORD *)v87 + 3))
  {
    llvm::raw_ostream::write(v87, 32);
  }
  else
  {
    *((_QWORD *)v87 + 4) = v88 + 1;
    *v88 = 32;
  }
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v89 = *(_QWORD *)this - 16;
  else
    v89 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v89, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v92 != v94)
    free(v92);
}

BOOL mlir::memref::ReshapeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  const void *v4;
  const void ***v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  const void ***v15;
  char *v16;
  char *v17;
  __int128 v18;
  const void ***v19;
  char *v20;
  char *v21;
  __int128 v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t NextResultAtOffset;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  const void **v48;
  uint64_t v49;
  __int16 v50;
  uint64_t OperandRange;
  const void **v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD *v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_35;
  v55[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  v55[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v4 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)
    && *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    goto LABEL_35;
  }
  v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8);
  v48 = v3;
  v49 = v32;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v48)
    || (v33 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8),
        v52 = v3,
        v53 = v33,
        mlir::ShapedType::getShape((mlir::ShapedType *)&v52),
        v34 != 1))
  {
LABEL_35:
    v50 = 261;
    v48 = (const void **)"operand";
    v49 = 7;
    mlir::Operation::emitOpError(v2, &v48, (uint64_t)v55);
    if (v55[0])
    {
      LODWORD(v52) = 3;
      v53 = (uint64_t)" #";
      v54 = 2;
      v5 = &v52;
      v6 = (char *)v56;
      if (v57 >= v58)
      {
        v38 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          v44 = (char *)&v52 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v38, 24);
          v6 = (char *)v56;
          v5 = (const void ***)((char *)v56 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v38, 24);
          v5 = &v52;
          v6 = (char *)v56;
        }
      }
      v7 = &v6[24 * v57];
      v8 = *(_OWORD *)v5;
      *((_QWORD *)v7 + 2) = v5[2];
      *(_OWORD *)v7 = v8;
      v9 = ++v57;
      if (v55[0])
      {
        LODWORD(v52) = 5;
        v53 = 1;
        v10 = &v52;
        v11 = (char *)v56;
        if (v9 >= v58)
        {
          v39 = v9 + 1;
          v40 = (char *)v56 + 24 * v9 > (char *)&v52;
          if (v56 <= &v52 && v40)
          {
            v45 = (char *)&v52 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
            v11 = (char *)v56;
            v10 = (const void ***)((char *)v56 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
            v10 = &v52;
            v11 = (char *)v56;
          }
        }
        v12 = &v11[24 * v57];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = v10[2];
        *(_OWORD *)v12 = v13;
        v14 = ++v57;
        if (v55[0])
        {
          LODWORD(v52) = 3;
          v53 = (uint64_t)" must be 1D memref of signless integer or index values, but got ";
          v54 = 64;
          v15 = &v52;
          v16 = (char *)v56;
          if (v14 >= v58)
          {
            v41 = v14 + 1;
            v42 = (char *)v56 + 24 * v14 > (char *)&v52;
            if (v56 <= &v52 && v42)
            {
              v46 = (char *)&v52 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
              v16 = (char *)v56;
              v15 = (const void ***)((char *)v56 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
              v15 = &v52;
              v16 = (char *)v56;
            }
          }
          v17 = &v16[24 * v57];
          v18 = *(_OWORD *)v15;
          *((_QWORD *)v17 + 2) = v15[2];
          *(_OWORD *)v17 = v18;
          ++v57;
          if (v55[0])
          {
            v19 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v3);
            v20 = (char *)v56;
            if (v57 >= v58)
            {
              v43 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                v47 = (char *)&v52 - (_BYTE *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
                v20 = (char *)v56;
                v19 = (const void ***)((char *)v56 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
                v19 = &v52;
                v20 = (char *)v56;
              }
            }
            v21 = &v20[24 * v57];
            v22 = *(_OWORD *)v19;
            *((_QWORD *)v21 + 2) = v19[2];
            *(_OWORD *)v21 = v22;
            ++v57;
          }
        }
      }
    }
    v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v24 = __p;
      if (__p)
      {
        v25 = v63;
        v26 = __p;
        if (v63 != __p)
        {
          do
            v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          v26 = __p;
        }
        v63 = v24;
        operator delete(v26);
      }
      v27 = v60;
      if (v60)
      {
        v28 = v61;
        v29 = v60;
        if (v61 != v60)
        {
          do
          {
            v31 = *--v28;
            v30 = v31;
            *v28 = 0;
            if (v31)
              MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
          }
          while (v28 != v27);
          v29 = v60;
        }
        v61 = v27;
        operator delete(v29);
      }
      if (v56 != v59)
        free(v56);
    }
    if (!v23)
      return 0;
  }
  if (*((_DWORD *)*this + 9))
    v35 = (uint64_t)(*this - 2);
  else
    v35 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v35, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps5(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::memref::ReshapeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *Results;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9[2];
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[4];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, 24);
  v13[0] = v15;
  v13[1] = 1;
  memset(v14, 0, 24);
  v12[0] = v14;
  v12[1] = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v15, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v14, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 0;
  v10 = 0;
  if (!mlir::AsmParser::parseType<mlir::FunctionType>(a1, &v10))
    return 0;
  v11[0] = mlir::FunctionType::getInputs((mlir::FunctionType *)&v10);
  v11[1] = v4;
  Results = (void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v10);
  mlir::OperationState::addTypes(a2, Results, v6);
  v9[0] = v13;
  v9[1] = v12;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return mlir::OpAsmParser::resolveOperands<llvm::detail::concat_range<mlir::OpAsmParser::UnresolvedOperand const,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &>,llvm::ArrayRef<mlir::Type> &>(a1, v9, v11, v7, a2 + 16) != 0;
}

void mlir::memref::ReshapeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  mlir::Operation *v10;
  mlir::ArrayAttr *v11;
  uint64_t Value;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  mlir::Operation *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[4];
  uint64_t v26[4];
  uint64_t v27[2];
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "(", 1uLL);
  }
  else
  {
    *v7 = 40;
    ++*((_QWORD *)v6 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ")", 1uLL);
  }
  else
  {
    *v9 = 41;
    ++*((_QWORD *)v8 + 4);
  }
  v28 = v30;
  v29 = 0x200000000;
  v10 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v26[0] = mlir::Operation::getAttrDictionary(v10);
    v11 = (mlir::ArrayAttr *)v26;
  }
  else
  {
    v11 = (mlir::Operation *)((char *)v10 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v11);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v13, v28, v29);
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if (*((_BYTE **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    *v17 = 58;
    ++*((_QWORD *)v16 + 4);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  v20 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v21 = *((_QWORD *)v20 + 9);
    v22 = *((unsigned int *)v20 + 17);
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v25[0] = v21;
  v25[1] = v22;
  mlir::OperandRange::getTypes(v25, v26);
  v23 = *((unsigned int *)*this + 9);
  v24 = (uint64_t)*this - 16;
  if (!(_DWORD)v23)
    v24 = 0;
  v27[0] = v24;
  v27[1] = v23;
  mlir::OperandRange::getTypes(v27, v25);
  mlir::AsmPrinter::printFunctionalType<mlir::ValueTypeRange<mlir::OperandRange>,mlir::ValueTypeRange<mlir::ResultRange>>((uint64_t)a2, v26, v25);
  if (v28 != v30)
    free(v28);
}

uint64_t mlir::memref::detail::StoreOpGenericAdaptorBase::StoreOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.store", 12, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::StoreOp::getIndicesMutable@<X0>(mlir::memref::StoreOp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    v3 = *(_DWORD *)(v2 + 68) - 2;
  else
    v3 = -2;
  return mlir::MutableOperandRange::MutableOperandRange(a2, v2, 2, v3, 0, 0);
}

BOOL mlir::memref::StoreOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::StoreOpGenericAdaptorBase::Properties]";
        v15 = 109;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[316];
    return a1[32];
  }
  return result;
}

uint64_t mlir::memref::StoreOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void **v20;
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (_QWORD *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v22[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v3, (const void **)"nontemporal", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  v4 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v6 = -2;
    v7 = 64;
LABEL_6:
    v8 = 0;
    v9 = v7 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2))
    {
      ++v8;
      v9 += 32;
      if (v6 == v8)
      {
        v4 = *this;
        goto LABEL_10;
      }
    }
    return 0;
  }
  v5 = *((unsigned int *)v4 + 17);
  v6 = v5 - 2;
  if (v5 != 2)
  {
    v7 = v4[9] + 64;
    goto LABEL_6;
  }
LABEL_10:
  v22[0] = *(_QWORD *)(*(_QWORD *)(v4[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v22) == (*(_QWORD *)(*(_QWORD *)((*this)[9] + 24)
                                                                                       + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v20 = (const void **)"failed to verify that type of 'value' matches element type of 'memref'";
  v21 = 259;
  mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  if (v29)
  {
    v11 = __p;
    if (__p)
    {
      v12 = v28;
      v13 = __p;
      if (v28 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v28 = v11;
      operator delete(v13);
    }
    v14 = v25;
    if (v25)
    {
      v15 = v26;
      v16 = v25;
      if (v26 != v25)
      {
        do
        {
          v18 = *--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
        }
        while (v15 != v14);
        v16 = v25;
      }
      v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24)
      free(v23);
  }
  return v10;
}

uint64_t mlir::memref::StoreOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  mlir::IndexType **v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t RHS;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25[2];
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[128];
  _QWORD v33[4];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  memset(v34, 0, 24);
  memset(v33, 0, 24);
  v25[0] = (uint64_t)v33;
  v25[1] = 1;
  v29 = 0;
  v30 = v32;
  v31 = 0x400000000;
  v24[0] = &v29;
  v24[1] = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v34, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v33, 1))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v30, 0, 1, 0xFFFFFFFFLL))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
            {
              v21[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
              if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
              {
                v5 = *(_QWORD *)(a2 + 8);
                v26 = a1;
                v27 = v21;
                v28 = a2;
                if (mlir::memref::LoadOp::verifyInherentAttrs(v5, a2 + 112, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::StoreOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v26))
                {
                  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
                  {
                    v26 = 0;
                    if (mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26))
                    {
                      v6 = v26;
                      v29 = v26;
                      v23 = v26;
                      if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
                      {
                        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
                        v22 = 257;
                        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(&v26, a1, v7, v21);
                        v8 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v26, "'memref' must be memref of any type values, but got ");
                        v9 = mlir::InFlightDiagnostic::append<mlir::Type &>(v8, &v23);
                        v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
                        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v26);
                        v11 = v30;
                        if (v30 == v32)
                          return v10;
                        goto LABEL_23;
                      }
                      v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v26 + 8);
                      v26 = v6;
                      v27 = (_QWORD *)v12;
                      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
                      v13 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                      IndexType = mlir::Builder::getIndexType(v13, v14);
                      v26 = v29;
                      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v26);
                      v17 = a2 + 16;
                      if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v34, RHS, v17))
                      {
                        if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, v17))
                        {
                          if (!(_DWORD)v31)
                          {
                            v10 = 1;
                            v11 = v30;
                            if (v30 == v32)
                              return v10;
                            goto LABEL_23;
                          }
                          v18 = (char *)v30;
                          v19 = 32 * v31;
                          v10 = 1;
                          while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, IndexType, v17))
                          {
                            v18 += 32;
                            v19 -= 32;
                            if (!v19)
                              goto LABEL_22;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v10 = 0;
LABEL_22:
  v11 = v30;
  if (v30 != v32)
LABEL_23:
    free(v11);
  return v10;
}

void mlir::memref::StoreOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  mlir::Operation *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  mlir::Operation *v21;
  mlir::ArrayAttr *p_Context;
  unsigned int v23;
  _QWORD *v24;
  uint64_t Value;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  mlir::BoolAttr *Context;
  void *v34;
  uint64_t v35;
  _QWORD v36[5];

  v36[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *v7 = 44;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "[", 1uLL);
    v12 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_12;
  }
  else
  {
    *v11 = 91;
    ++*((_QWORD *)v10 + 4);
    v12 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_12:
      v13 = *((unsigned int *)v12 + 17);
      v14 = *((_QWORD *)v12 + 9);
      v15 = v13 - 2;
      goto LABEL_13;
    }
  }
  v14 = 0;
  v15 = -2;
LABEL_13:
  v16 = v14 + 64;
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v34 = ", ";
  v35 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v16, 0, v16, v15, (uint64_t)a2, v17, (uint64_t)&v34);
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "]", 1uLL);
  }
  else
  {
    *v19 = 93;
    ++*((_QWORD *)v18 + 4);
  }
  v34 = v36;
  v35 = 0x200000000;
  Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v20 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v20 && v20 == mlir::Builder::getBoolAttr(&Context, 0))
  {
    v23 = v35;
    if (v35 >= HIDWORD(v35))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 16);
      v23 = v35;
    }
    v24 = (char *)v34 + 16 * v23;
    *v24 = "nontemporal";
    v24[1] = 11;
    LODWORD(v35) = v35 + 1;
    v21 = *this;
    if (!*((_BYTE *)*this + 47))
      goto LABEL_21;
  }
  else
  {
    v21 = *this;
    if (!*((_BYTE *)*this + 47))
    {
LABEL_21:
      p_Context = (mlir::Operation *)((char *)v21 + 56);
      goto LABEL_26;
    }
  }
  Context = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v21);
  p_Context = (mlir::ArrayAttr *)&Context;
LABEL_26:
  Value = mlir::ArrayAttr::getValue(p_Context);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v26, v34, v35);
  v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v28 = (_BYTE *)*((_QWORD *)v27 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((_QWORD *)v27 + 4) = v28 + 1;
    *v28 = 32;
  }
  v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v30 = (_BYTE *)*((_QWORD *)v29 + 4);
  if (*((_BYTE **)v29 + 3) == v30)
  {
    llvm::raw_ostream::write(v29, ":", 1uLL);
  }
  else
  {
    *v30 = 58;
    ++*((_QWORD *)v29 + 4);
  }
  v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v32 = (_BYTE *)*((_QWORD *)v31 + 4);
  if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
  {
    llvm::raw_ostream::write(v31, 32);
  }
  else
  {
    *((_QWORD *)v31 + 4) = v32 + 1;
    *v32 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v34 != v36)
    free(v34);
}

void mlir::memref::StoreOp::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  const char **v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unsigned __int8 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 56);
  v4 = mlir::SideEffects::Effect::Base<mlir::MemoryEffects::Write,mlir::MemoryEffects::Effect>::get();
  if ((v5 & 1) == 0)
  {
    v26 = v4;
    v4 = v26;
    if (v16)
    {
      if ((v17 & 1) == 0
      {
        v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::DefaultResource]";
        v28 = 84;
        v19 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
        if (v28 >= v19)
          v20 = v19;
        else
          v20 = v28;
        v21 = &v27[v20];
        v22 = v28 - v20;
        if (v28 - v20 >= 0x12)
          v23 = 18;
        else
          v23 = v28 - v20;
        v24 = v22 - v23;
        if (v24 >= v24 - 1)
          v25 = v24 - 1;
        else
          v25 = v24;
        mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v21[v23], v25);
      }
      mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance = (uint64_t)&unk_24C02E828;
      *(_QWORD *)algn_25451AC88 = mlir::detail::TypeIDResolver<mlir::SideEffects::DefaultResource,void>::resolveTypeID(void)::id;
      v4 = v26;
    }
  }
  v6 = *(unsigned int *)(a2 + 8);
  if (v6 >= *(_DWORD *)(a2 + 12))
  {
    v8 = (void *)(a2 + 16);
    v27 = (const char *)v4;
    v28 = (unint64_t)&mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    v29 = v3 | 4;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v9 = v6 + 1;
    v10 = *(_QWORD *)a2 + 40 * (unint64_t)v6 > (unint64_t)&v27;
    if (*(_QWORD *)a2 <= (unint64_t)&v27 && v10)
    {
      v18 = (char *)&v27 - *(_QWORD *)a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      v11 = *(_QWORD *)a2;
      v12 = (const char **)&v18[*(_QWORD *)a2];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v8, v9, 40);
      v11 = *(_QWORD *)a2;
      v12 = &v27;
    }
    v13 = v11 + 40 * *(unsigned int *)(a2 + 8);
    v14 = *(_OWORD *)v12;
    v15 = *((_OWORD *)v12 + 1);
    *(_QWORD *)(v13 + 32) = v12[4];
    *(_OWORD *)v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
  }
  else
  {
    v7 = *(_QWORD *)a2 + 40 * v6;
    *(_QWORD *)v7 = v4;
    *(_QWORD *)(v7 + 8) = &mlir::SideEffects::Resource::Base<mlir::SideEffects::DefaultResource,mlir::SideEffects::Resource>::get(void)::instance;
    *(_QWORD *)(v7 + 16) = v3 | 4;
    *(_QWORD *)(v7 + 24) = 0;
    *(_DWORD *)(v7 + 32) = 0;
    *(_BYTE *)(v7 + 36) = 0;
  }
  ++*(_DWORD *)(a2 + 8);
}

uint64_t mlir::memref::detail::TransposeOpGenericAdaptorBase::TransposeOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  v5 = (_QWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.transpose", 16, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::TransposeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v26 = &v56;
      v27 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v27 = (char *)v60;
          v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v26 = &v56;
          v27 = (char *)v60;
        }
      }
      v28 = &v27[24 * v61];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v30 = __p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v33 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v35 = *--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "permutation", 0xBuLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for permutation in DictionaryAttr to set Properties.";
      v58 = 71;
      v36 = &v56;
      v37 = (char *)v60;
      if (v61 >= v62)
      {
        v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v37 = (char *)v60;
          v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v36 = &v56;
          v37 = (char *)v60;
        }
      }
      v38 = &v37[24 * v61];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v40 = __p;
    if (__p)
    {
      v41 = v67;
      v42 = __p;
      if (v67 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v67 = v40;
      operator delete(v42);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v43 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v45 = *--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        MEMORY[0x20BD002D4](v44, 0x1000C8077774924);
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 56;
    v10 = &v56;
    v11 = (char *)v60;
    if (v61 >= v62)
    {
      v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v11 = (char *)v60;
        v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v10 = &v56;
        v11 = (char *)v60;
      }
    }
    v12 = &v11[24 * v61];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v61;
    if (v59[0])
    {
      v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v15 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v15 = (char *)v60;
          v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v14 = &v56;
          v15 = (char *)v60;
        }
      }
      v16 = &v15[24 * v61];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v18 = __p;
    if (__p)
    {
      v19 = v67;
      v20 = __p;
      if (v67 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v67 = v18;
      operator delete(v20);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v22 = v65;
    v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v25 = *--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        MEMORY[0x20BD002D4](v24, 0x1000C8077774924);
    }
    while (v22 != v21);
LABEL_57:
    v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::memref::TransposeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"permutation", 11, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::memref::TransposeOp::getInherentAttr(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  BOOL v4;

  if (a4 == 11
    && (*a3 == 0x746174756D726570 ? (v4 = *(_QWORD *)((char *)a3 + 3) == 0x6E6F69746174756DLL) : (v4 = 0), v4))
  {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else
  {
    return 0;
  }
}

_QWORD *mlir::memref::TransposeOp::setInherentAttr(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (a3 == 11 && *a2 == 0x746174756D726570 && *(_QWORD *)((char *)a2 + 3) == 0x6E6F69746174756DLL)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v5 = a4;
      else
        v5 = 0;
      *result = v5;
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

void mlir::memref::TransposeOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"permutation", 11, *a2);
}

BOOL mlir::memref::TransposeOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;

  v6 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  return !v6
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v6, (const void **)"permutation", (const char *)0xB, a3, a4);
}

uint64_t mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!a1 || *(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    return 1;
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    v30 = "attribute '";
    v31 = 11;
    v7 = &v29;
    v8 = (char *)v35;
    if (v36 >= v37)
    {
      v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        v27 = (char *)&v29 - (_BYTE *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v8 = (char *)v35;
        v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v7 = &v29;
        v8 = (char *)v35;
      }
    }
    v9 = &v8[24 * v36];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v36;
    if (v33)
    {
      v32 = 261;
      v29 = a2;
      v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        v30 = "' failed to satisfy constraint: AffineMap attribute";
        v31 = 51;
        v11 = &v29;
        v12 = (char *)v35;
        if (v36 >= v37)
        {
          v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            v28 = (char *)&v29 - (_BYTE *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v12 = (char *)v35;
            v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v11 = &v29;
            v12 = (char *)v35;
          }
        }
        v13 = &v12[24 * v36];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v36;
      }
    }
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  if (v43)
  {
    v16 = __p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          v23 = *--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38)
      free(v35);
  }
  return v15;
}

BOOL mlir::memref::TransposeOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &unk_25451B000;
    if ((v4 & 1) == 0)
    {
      v5 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties]";
        v15 = 113;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v5[318];
    return a1[32];
  }
  return result;
}

BOOL mlir::memref::TransposeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const void **v16;
  __int16 v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"permutation", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v4 = (uint64_t)(*this - 2);
      else
        v4 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps7(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v16 = (const void **)"requires attribute 'permutation'";
    v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    if (v25)
    {
      v7 = __p;
      if (__p)
      {
        v8 = v24;
        v9 = __p;
        if (v24 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v24 = v7;
        operator delete(v9);
      }
      v10 = v21;
      if (v21)
      {
        v11 = v22;
        v12 = v21;
        if (v22 != v21)
        {
          do
          {
            v14 = *--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              MEMORY[0x20BD002D4](v13, 0x1000C8077774924);
          }
          while (v11 != v10);
          v12 = v21;
        }
        v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v6;
}

BOOL mlir::memref::ViewOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void ***v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  const void ***v22;
  char *v23;
  char *v24;
  __int128 v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t NextResultAtOffset;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  const void **v56;
  uint64_t v57;
  __int16 v58;
  uint64_t OperandRange;
  const void **v60;
  const char *v61;
  uint64_t v62;
  _QWORD v63[3];
  void *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[96];
  void *v68;
  _QWORD *v69;
  void *__p;
  _QWORD *v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_32;
  v63[0] = *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v63[1] = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v4 + 8);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 8)
    || (v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8),
        v56 = v3,
        v57 = v5,
        !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
    || (v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v3 + 8),
        v60 = v3,
        v61 = (const char *)v6,
        mlir::ShapedType::getShape((mlir::ShapedType *)&v60),
        v7 != 1))
  {
LABEL_32:
    v58 = 261;
    v56 = (const void **)"operand";
    v57 = 7;
    mlir::Operation::emitOpError(v2, &v56, (uint64_t)v63);
    if (v63[0])
    {
      LODWORD(v60) = 3;
      v61 = " #";
      v62 = 2;
      v8 = &v60;
      v9 = (char *)v64;
      if (v65 >= v66)
      {
        v46 = v65 + 1;
        if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
        {
          v52 = (char *)&v60 - (_BYTE *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v46, 24);
          v9 = (char *)v64;
          v8 = (const void ***)((char *)v64 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v46, 24);
          v8 = &v60;
          v9 = (char *)v64;
        }
      }
      v10 = &v9[24 * v65];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = v8[2];
      *(_OWORD *)v10 = v11;
      v12 = ++v65;
      if (v63[0])
      {
        LODWORD(v60) = 5;
        v61 = 0;
        v13 = &v60;
        v14 = (char *)v64;
        if (v12 >= v66)
        {
          v47 = v12 + 1;
          v48 = (char *)v64 + 24 * v12 > (char *)&v60;
          if (v64 <= &v60 && v48)
          {
            v53 = (char *)&v60 - (_BYTE *)v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            v14 = (char *)v64;
            v13 = (const void ***)((char *)v64 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            v13 = &v60;
            v14 = (char *)v64;
          }
        }
        v15 = &v14[24 * v65];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        v17 = ++v65;
        if (v63[0])
        {
          LODWORD(v60) = 3;
          v61 = " must be 1D memref of 8-bit signless integer values, but got ";
          v62 = 61;
          v18 = &v60;
          v19 = (char *)v64;
          if (v17 >= v66)
          {
            v49 = v17 + 1;
            v50 = (char *)v64 + 24 * v17 > (char *)&v60;
            if (v64 <= &v60 && v50)
            {
              v54 = (char *)&v60 - (_BYTE *)v64;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              v19 = (char *)v64;
              v18 = (const void ***)((char *)v64 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              v18 = &v60;
              v19 = (char *)v64;
            }
          }
          v20 = &v19[24 * v65];
          v21 = *(_OWORD *)v18;
          *((_QWORD *)v20 + 2) = v18[2];
          *(_OWORD *)v20 = v21;
          ++v65;
          if (v63[0])
          {
            v22 = &v60;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, (uint64_t)v3);
            v23 = (char *)v64;
            if (v65 >= v66)
            {
              v51 = v65 + 1;
              if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
              {
                v55 = (char *)&v60 - (_BYTE *)v64;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
                v23 = (char *)v64;
                v22 = (const void ***)((char *)v64 + v55);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
                v22 = &v60;
                v23 = (char *)v64;
              }
            }
            v24 = &v23[24 * v65];
            v25 = *(_OWORD *)v22;
            *((_QWORD *)v24 + 2) = v22[2];
            *(_OWORD *)v24 = v25;
            ++v65;
          }
        }
      }
    }
    v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v63);
    if (v63[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
    if (v72)
    {
      v27 = __p;
      if (__p)
      {
        v28 = v71;
        v29 = __p;
        if (v71 != __p)
        {
          do
            v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          v29 = __p;
        }
        v71 = v27;
        operator delete(v29);
      }
      v30 = v68;
      if (v68)
      {
        v31 = v69;
        v32 = v68;
        if (v69 != v68)
        {
          do
          {
            v34 = *--v31;
            v33 = v34;
            *v31 = 0;
            if (v34)
              MEMORY[0x20BD002D4](v33, 0x1000C8077774924);
          }
          while (v31 != v30);
          v32 = v68;
        }
        v69 = v30;
        operator delete(v32);
      }
      if (v64 != v67)
        free(v64);
    }
    if (!v26)
      return 0;
  }
  if (!mlir::memref::__mlir_ods_local_type_constraint_MemRefOps9(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))return 0;
  v35 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v37 = -2;
    v38 = 64;
LABEL_37:
    v39 = 0;
    v40 = v38 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v40 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v39 + 2))
    {
      ++v39;
      v40 += 32;
      if (v37 == v39)
      {
        v35 = *this;
        goto LABEL_41;
      }
    }
    return 0;
  }
  v36 = *((unsigned int *)v35 + 17);
  v37 = v36 - 2;
  if (v36 != 2)
  {
    v38 = v35[9] + 64;
    goto LABEL_37;
  }
LABEL_41:
  v41 = *((_DWORD *)v35 + 9);
  v42 = v35 - 2;
  if (v41)
    v43 = (uint64_t)v42;
  else
    v43 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::memref::ViewOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::IndexType **v5;
  mlir::MLIRContext *v6;
  uint64_t IndexType;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];
  uint64_t v15[2];
  _QWORD v16[4];
  __int16 v17;
  void *__src;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[128];
  _QWORD v25[4];
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  memset(v26, 0, 24);
  v15[0] = (uint64_t)v26;
  v15[1] = 1;
  memset(v25, 0, 24);
  v21 = 0;
  v22 = v24;
  v23 = 0x400000000;
  v14[0] = &v21;
  v14[1] = 1;
  __src = &v20;
  v19 = 0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v26, 1))
    goto LABEL_20;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    goto LABEL_20;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v25, 1))
    goto LABEL_20;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
    goto LABEL_20;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    goto LABEL_20;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v22, 0, 1, 0xFFFFFFFFLL))goto LABEL_20;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
    goto LABEL_20;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    goto LABEL_20;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_20;
  v16[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, v16))
    goto LABEL_20;
  v21 = v16[0];
  v17 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "to", 2, v16))goto LABEL_20;
  if (!mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
    goto LABEL_20;
  v5 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v5, v6);
  mlir::OperationState::addTypes(a2, __src, v19);
  v8 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v15, v14, v4, v8)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v25, IndexType, v8))
  {
    goto LABEL_20;
  }
  if ((_DWORD)v23)
  {
    v9 = (char *)v22;
    v10 = 32 * v23;
    v11 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v9, IndexType, v8))
    {
      v9 += 32;
      v10 -= 32;
      if (!v10)
        goto LABEL_21;
    }
LABEL_20:
    v11 = 0;
LABEL_21:
    v12 = __src;
    if (__src != &v20)
      goto LABEL_22;
    goto LABEL_23;
  }
  v11 = 1;
  v12 = __src;
  if (__src != &v20)
LABEL_22:
    free(v12);
LABEL_23:
  if (v22 != v24)
    free(v22);
  return v11;
}

void mlir::memref::ViewOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  mlir::Operation *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  mlir::Operation *v20;
  mlir::ArrayAttr *v21;
  uint64_t Value;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38[4];
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[5];

  v43[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "[", 1uLL);
  }
  else
  {
    *v7 = 91;
    ++*((_QWORD *)v6 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "]", 1uLL);
  }
  else
  {
    *v9 = 93;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "[", 1uLL);
    v12 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_12;
  }
  else
  {
    *v11 = 91;
    ++*((_QWORD *)v10 + 4);
    v12 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_12:
      v13 = *((unsigned int *)v12 + 17);
      v14 = *((_QWORD *)v12 + 9);
      v15 = v13 - 2;
      goto LABEL_13;
    }
  }
  v14 = 0;
  v15 = -2;
LABEL_13:
  v16 = v14 + 64;
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v41 = ", ";
  v42 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v16, 0, v16, v15, (uint64_t)a2, v17, (uint64_t)&v41);
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "]", 1uLL);
  }
  else
  {
    *v19 = 93;
    ++*((_QWORD *)v18 + 4);
  }
  v41 = v43;
  v42 = 0x200000000;
  v20 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v38[0] = mlir::Operation::getAttrDictionary(v20);
    v21 = (mlir::ArrayAttr *)v38;
  }
  else
  {
    v21 = (mlir::Operation *)((char *)v20 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v21);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v23, v41, v42);
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ":", 1uLL);
  }
  else
  {
    *v27 = 58;
    ++*((_QWORD *)v26 + 4);
  }
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((_QWORD *)v28 + 4) = v29 + 1;
    *v29 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 32;
  }
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = (_WORD *)*((_QWORD *)v32 + 4);
  if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 1uLL)
  {
    *v33 = 28532;
    *((_QWORD *)v32 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v32, "to", 2uLL);
  }
  v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = (_BYTE *)*((_QWORD *)v34 + 4);
  if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
  {
    llvm::raw_ostream::write(v34, 32);
  }
  else
  {
    *((_QWORD *)v34 + 4) = v35 + 1;
    *v35 = 32;
  }
  v36 = *((unsigned int *)*this + 9);
  v37 = (char *)*this - 16;
  if (!(_DWORD)v36)
    v37 = 0;
  v39 = v37;
  v40 = v36;
  mlir::OperandRange::getTypes((uint64_t *)&v39, v38);
  v39 = ", ";
  v40 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v38[0], v38[1], v38[2], v38[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)&v39);
  if (v41 != v43)
    free(v41);
}

uint64_t mlir::memref::detail::SubViewOpGenericAdaptorBase::SubViewOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t Context;
  unint64_t v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * ((v4 >> 23) & 1) + 64;
  else
    v5 = 0;
  v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v12, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = *(_OWORD *)v5;
  v9 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v5 + 32);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  if (v3)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "memref.subview", 14, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::memref::SubViewOp::getInherentAttr(mlir::MLIRContext *a1, uint64_t *a2, char *__s1, size_t __n)
{
  uint64_t result;

  result = 0;
  switch(__n)
  {
    case 0xCuLL:
      if (memcmp(__s1, "static_sizes", __n))
        goto LABEL_11;
      return a2[1];
    case 0xDuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x14uLL:
      goto LABEL_11;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        result = *a2;
      }
      else if (!memcmp(__s1, "static_strides", __n))
      {
        result = a2[2];
      }
      else
      {
LABEL_11:
        result = 0;
      }
      break;
    case 0x13uLL:
      if (memcmp(__s1, "operandSegmentSizes", __n))
        goto LABEL_11;
      goto LABEL_13;
    case 0x15uLL:
      if (memcmp(__s1, "operand_segment_sizes", __n))
        goto LABEL_11;
LABEL_13:
      result = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 3), 4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mlir::memref::SubViewOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 0xCuLL:
      result = memcmp(__s1, "static_sizes", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v10 = a4;
          else
            v10 = 0;
          v5[1] = v10;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      if (*(_QWORD *)__s1 == 0x6F5F636974617473 && *(_QWORD *)(__s1 + 6) == 0x7374657366666F5FLL)
      {
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
          if ((_DWORD)result)
            v11 = a4;
          else
            v11 = 0;
          *v5 = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "static_strides", a3);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            result = mlir::detail::DenseArrayAttrImpl<long long>::classof(a4);
            if ((_DWORD)result)
              v7 = a4;
            else
              v7 = 0;
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0x13uLL:
      result = memcmp(__s1, "operandSegmentSizes", a3);
      if (!(_DWORD)result)
        goto LABEL_17;
      break;
    case 0x15uLL:
      result = memcmp(__s1, "operand_segment_sizes", a3);
      if (!(_DWORD)result)
      {
LABEL_17:
        if (a4)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
          v8 = (_DWORD)result ? a4 : 0;
          v12 = v8;
          if ((_DWORD)result)
          {
            result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
            if (result == 4)
            {
              result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
              if (v9)
                result = (uint64_t)memmove(v5 + 3, (const void *)result, 4 * v9);
            }
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::memref::SubViewOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 5)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = __p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = *--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                MEMORY[0x20BD002D4](v10, 0x1000C8077774924);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 3, v12, 4 * v13);
  }
  return mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 1)&& mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<long long>>(a1, v3 + 2)&& ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6|| mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 6, (const char *)4));
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_QWORD *)(v3 + 32) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &unk_25451B000;
    if ((v5 & 1) == 0)
    {
      v4 = (_QWORD *)&unk_25451B000;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties]";
        v15 = 111;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = (_QWORD *)&unk_25451B000;
      }
    }
    a1[33] = v4[320];
    return a1[32];
  }
  return result;
}

void mlir::memref::SubViewOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _DWORD *v22;
  uint64_t DenseI64ArrayAttr;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v28 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v28, 1);
  mlir::OperationState::addOperands(a2, a5, a6);
  mlir::OperationState::addOperands(a2, a7, a8);
  mlir::OperationState::addOperands(a2, a9, a10);
  v22 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  v22[6] = 1;
  v22[7] = a6;
  v22[8] = a8;
  v22[9] = a10;
  DenseI64ArrayAttr = mlir::Builder::getDenseI64ArrayAttr(a1, a11, a12);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2) = DenseI64ArrayAttr;
  v24 = mlir::Builder::getDenseI64ArrayAttr(a1, a13, a14);
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 8) = v24;
  v25 = mlir::Builder::getDenseI64ArrayAttr(a1, a15, a16);
  *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>((_QWORD *)a2)
            + 16) = v25;
  v26 = *(unsigned int *)(a2 + 72);
  if (v26 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v26) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::memref::SubViewOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ODSOperands;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t NextResultAtOffset;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  const void **v49[4];
  __int16 v50;
  _QWORD v51[3];
  void *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  void *__p;
  _QWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v49[0] = (const void **)"requires attribute 'static_offsets'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v28 = __p;
    if (__p)
    {
      v29 = v57;
      v30 = __p;
      if (v57 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v57 = v28;
      operator delete(v30);
    }
    v31 = v54;
    if (v54)
    {
      v32 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v35 = *--v32;
        v34 = v35;
        *v32 = 0;
        if (v35)
          MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
      }
      while (v32 != v31);
LABEL_76:
      v33 = v54;
LABEL_77:
      v55 = v31;
      operator delete(v33);
    }
LABEL_78:
    if (v52 != &v53)
      free(v52);
    return v27;
  }
  v5 = *(_QWORD **)(v3 + 8);
  if (!v5)
  {
    v49[0] = (const void **)"requires attribute 'static_sizes'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v36 = __p;
    if (__p)
    {
      v37 = v57;
      v38 = __p;
      if (v57 != __p)
      {
        do
          v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
        while (v37 != v36);
        v38 = __p;
      }
      v57 = v36;
      operator delete(v38);
    }
    v31 = v54;
    if (v54)
    {
      v39 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v41 = *--v39;
        v40 = v41;
        *v39 = 0;
        if (v41)
          MEMORY[0x20BD002D4](v40, 0x1000C8077774924);
      }
      while (v39 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v6 = *(_QWORD **)(v3 + 16);
  if (!v6)
  {
    v49[0] = (const void **)"requires attribute 'static_strides'";
    v50 = 259;
    mlir::OpState::emitOpError(this, v49, (uint64_t)v51);
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    if (!v58)
      return v27;
    v42 = __p;
    if (__p)
    {
      v43 = v57;
      v44 = __p;
      if (v57 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v57 = v42;
      operator delete(v44);
    }
    v31 = v54;
    if (v54)
    {
      v45 = v55;
      v33 = v54;
      if (v55 == v54)
        goto LABEL_77;
      do
      {
        v47 = *--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          MEMORY[0x20BD002D4](v46, 0x1000C8077774924);
      }
      while (v45 != v31);
      goto LABEL_76;
    }
    goto LABEL_78;
  }
  v51[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v4, (const void **)"static_offsets", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v51[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v5, (const void **)"static_sizes", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v51[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(v6, (const void **)"static_strides", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v51))return 0;
  v7 = *((unsigned int *)*this + 11);
  v8 = (uint64_t)&(*this)[2 * ((v7 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v8 = 0;
  v9 = *(unsigned int *)(v8 + 24);
  if ((v7 & 0x800000) != 0)
  {
    v10 = (*this)[9];
    if ((_DWORD)v9)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)v9)
    {
LABEL_14:
      v11 = 0;
      v12 = v10 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v11))
      {
        ++v11;
        v12 += 32;
        if (v9 == v11)
          goto LABEL_17;
      }
      return 0;
    }
  }
LABEL_17:
  ODSOperands = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 1u);
  if (v14)
  {
    v15 = v14;
    v16 = ODSOperands + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v16 += 32;
      if (!--v15)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  v17 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 2u);
  if (v18)
  {
    v19 = v18;
    v20 = v17 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v20 += 32;
      if (!--v19)
        goto LABEL_25;
    }
    return 0;
  }
LABEL_25:
  v21 = mlir::memref::ReinterpretCastOp::getODSOperands((mlir::memref::ReinterpretCastOp *)this, 3u);
  if (v22)
  {
    v23 = v22;
    v24 = v21 + 24;
    while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v9))
    {
      LODWORD(v9) = v9 + 1;
      v24 += 32;
      if (!--v23)
        goto LABEL_29;
    }
    return 0;
  }
LABEL_29:
  if (*((_DWORD *)*this + 9))
    v25 = (uint64_t)(*this - 2);
  else
    v25 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, 0);
  return mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::memref::SubViewOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  mlir::IndexType **v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  void *v36;
  uint64_t v37;
  _BYTE v38[128];
  void *v39;
  uint64_t v40;
  _BYTE v41[128];
  _QWORD v42[4];
  uint64_t __src[4];
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  memset(v42, 0, 24);
  v31[0] = (uint64_t)v42;
  v31[1] = 1;
  v39 = v41;
  v40 = 0x400000000;
  v29 = 0;
  v30 = 0;
  v36 = v38;
  v37 = 0x400000000;
  v32 = 0;
  v33 = v35;
  v34 = 0x400000000;
  v27[1] = 1;
  v28 = 0;
  v27[0] = &v32;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v42, 1))
    goto LABEL_25;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v39, &v30, __src, 0, 2))
    goto LABEL_25;
  v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  *v5 = v30;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v36, &v29, __src, 0, 2))
    goto LABEL_25;
  v6 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v6 + 8) = v29;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  __src[0] = 0;
  if (!mlir::parseDynamicIndexList(a1, (uint64_t)&v33, &v28, __src, 0, 2))
    goto LABEL_25;
  v7 = mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  *(_QWORD *)(v7 + 16) = v28;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_25;
  v8 = a2[1];
  __src[0] = a1;
  __src[1] = (uint64_t)&v26;
  __src[2] = (uint64_t)a2;
  if (!mlir::memref::ReinterpretCastOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::SubViewOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))goto LABEL_25;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_25;
  __src[0] = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, __src))
    goto LABEL_25;
  v32 = __src[0];
  v44 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 368))(a1, "to", 2, __src))goto LABEL_25;
  v26 = 0;
  if (!mlir::AsmParser::parseType<mlir::MemRefType>(a1, &v26))
    goto LABEL_25;
  __src[0] = v26;
  v9 = v40;
  v10 = v37;
  v11 = v34;
  v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(a2);
  v12[6] = 1;
  v12[7] = v9;
  v12[8] = v10;
  v12[9] = v11;
  v13 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v13, v14);
  mlir::OperationState::addTypes((uint64_t)a2, __src, 1);
  v16 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v31, v27, v4, v16))goto LABEL_25;
  if ((_DWORD)v40)
  {
    v17 = (char *)v39;
    v18 = 32 * v40;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, IndexType, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18)
        goto LABEL_16;
    }
LABEL_25:
    v23 = 0;
LABEL_26:
    v24 = v33;
    if (v33 != v35)
      goto LABEL_27;
    goto LABEL_28;
  }
LABEL_16:
  if ((_DWORD)v37)
  {
    v19 = (char *)v36;
    v20 = 32 * v37;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v19, IndexType, v16))
    {
      v19 += 32;
      v20 -= 32;
      if (!v20)
        goto LABEL_20;
    }
    goto LABEL_25;
  }
LABEL_20:
  if ((_DWORD)v34)
  {
    v21 = (char *)v33;
    v22 = 32 * v34;
    v23 = 1;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v21, IndexType, v16))
    {
      v21 += 32;
      v22 -= 32;
      if (!v22)
        goto LABEL_26;
    }
    goto LABEL_25;
  }
  v23 = 1;
  v24 = v33;
  if (v33 != v35)
LABEL_27:
    free(v24);
LABEL_28:
  if (v36 != v38)
    free(v36);
  if (v39 != v41)
    free(v39);
  return v23;
}

void mlir::memref::SubViewOp::print(mlir::memref::SubViewOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  mlir::Operation *v45;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  llvm::raw_ostream *v57;
  _WORD *v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;
  void *v64;
  uint64_t v65;
  _QWORD v66[4];
  unint64_t v67[2];
  unint64_t v68[2];
  unint64_t v69[3];

  v69[2] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = *(_QWORD *)this;
  v7 = *(unsigned int *)(*(_QWORD *)this + 44);
  v8 = (void **)(*(_QWORD *)this + 16 * ((v7 >> 23) & 1) + 64);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v9 = *(_QWORD *)this + 16 * ((v7 >> 23) & 1) + 64;
  else
    v9 = 0;
  v10 = *(unsigned int *)(v9 + 24);
  v11 = *(_DWORD *)(v9 + 28);
  if ((v7 & 0x800000) != 0)
    v12 = *(_QWORD *)(v6 + 72);
  else
    v12 = 0;
  v13 = v12 + 32 * v10;
  v14 = (v11 + v10) - v10;
  v64 = *v8;
  v15 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v64);
  v17 = v16;
  mlir::ValueRange::ValueRange(v69, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v6, v13, v14, v15, v17, v69[0], v69[1], 0, 0, 2);
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 32;
  }
  v20 = *(_QWORD *)this;
  v21 = *(unsigned int *)(*(_QWORD *)this + 44);
  v22 = *(_QWORD *)this + 16 * ((v21 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v22 = 0;
  if ((v21 & 0x800000) != 0)
    v23 = *(_QWORD *)(v20 + 72);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 + 28) + *(_DWORD *)(v22 + 24));
  v25 = v23 + 32 * v24;
  v26 = (*(_DWORD *)(v22 + 32) + v24) - v24;
  v64 = *(void **)(v22 + 8);
  v27 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v64);
  v29 = v28;
  mlir::ValueRange::ValueRange(v68, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v20, v25, v26, v27, v29, v68[0], v68[1], 0, 0, 2);
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 32;
  }
  v32 = *(_QWORD *)this;
  v33 = *(unsigned int *)(*(_QWORD *)this + 44);
  v34 = *(_QWORD *)this + 16 * ((v33 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v34 = 0;
  if ((v33 & 0x800000) != 0)
    v35 = *(_QWORD *)(v32 + 72);
  else
    v35 = 0;
  v36 = (*(_DWORD *)(v34 + 28) + *(_DWORD *)(v34 + 24) + *(_DWORD *)(v34 + 32));
  v37 = v35 + 32 * v36;
  v38 = (*(_DWORD *)(v34 + 36) + v36) - v36;
  v64 = *(void **)(v34 + 16);
  v39 = (unint64_t *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v64);
  v41 = v40;
  mlir::ValueRange::ValueRange(v67, 0, 0);
  mlir::printDynamicIndexList((uint64_t)a2, v32, v37, v38, v39, v41, v67[0], v67[1], 0, 0, 2);
  v64 = v66;
  v66[0] = "operandSegmentSizes";
  v66[1] = 19;
  v66[2] = "static_offsets";
  v66[3] = 14;
  v65 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, 3uLL, 16);
  v42 = (char *)v64 + 16 * v65;
  *v42 = "static_sizes";
  v42[1] = 12;
  v43 = (v65 + 1);
  LODWORD(v65) = v43;
  if (v43 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v43 + 1, 16);
    LODWORD(v43) = v65;
  }
  v44 = (char *)v64 + 16 * v43;
  *v44 = "static_strides";
  v44[1] = 14;
  LODWORD(v65) = v65 + 1;
  v45 = *(mlir::Operation **)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v45);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v45 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v48, v64, v65);
  v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v50 = (_BYTE *)*((_QWORD *)v49 + 4);
  if ((unint64_t)v50 >= *((_QWORD *)v49 + 3))
  {
    llvm::raw_ostream::write(v49, 32);
  }
  else
  {
    *((_QWORD *)v49 + 4) = v50 + 1;
    *v50 = 32;
  }
  v51 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v52 = (_BYTE *)*((_QWORD *)v51 + 4);
  if (*((_BYTE **)v51 + 3) == v52)
  {
    llvm::raw_ostream::write(v51, ":", 1uLL);
  }
  else
  {
    *v52 = 58;
    ++*((_QWORD *)v51 + 4);
  }
  v53 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v54 = (_BYTE *)*((_QWORD *)v53 + 4);
  if ((unint64_t)v54 >= *((_QWORD *)v53 + 3))
  {
    llvm::raw_ostream::write(v53, 32);
  }
  else
  {
    *((_QWORD *)v53 + 4) = v54 + 1;
    *v54 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v55 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v56 = (_BYTE *)*((_QWORD *)v55 + 4);
  if ((unint64_t)v56 >= *((_QWORD *)v55 + 3))
  {
    llvm::raw_ostream::write(v55, 32);
  }
  else
  {
    *((_QWORD *)v55 + 4) = v56 + 1;
    *v56 = 32;
  }
  v57 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v58 = (_WORD *)*((_QWORD *)v57 + 4);
  if (*((_QWORD *)v57 + 3) - (_QWORD)v58 > 1uLL)
  {
    *v58 = 28532;
    *((_QWORD *)v57 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v57, "to", 2uLL);
  }
  v59 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v60 = (_BYTE *)*((_QWORD *)v59 + 4);
  if ((unint64_t)v60 >= *((_QWORD *)v59 + 3))
  {
    llvm::raw_ostream::write(v59, 32);
  }
  else
  {
    *((_QWORD *)v59 + 4) = v60 + 1;
    *v60 = 32;
  }
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v61 = *(_QWORD *)this - 16;
  else
    v61 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v61, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v64 != v66)
    free(v64);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps9(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps10(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps12(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v15 = 96;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v2[55]);
}

_QWORD *`anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocOp>::~SimplifyAllocConst(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocOp>::~SimplifyAllocConst(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  int v11;
  uint64_t *v12;
  uint64_t DefiningOp;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  void **v20;
  _BOOL4 v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrHalH13g *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t RHS;
  _QWORD *RawStringData;
  uint64_t v46;
  uint64_t v47;
  uint64_t LayerSchedule;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  ZinIrHalH13g *v56;
  uint64_t v58;
  unint64_t *v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  ZinIrHalH13g *v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[32];
  void *v68;
  uint64_t v69;
  _BYTE v70[32];
  uint64_t *v71;
  uint64_t v72;
  _QWORD v73[3];

  v73[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 44);
  v5 = a2 + 64 + 16 * ((v4 >> 23) & 1);
  if (!HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = 0;
  v6 = *(unsigned int *)(v5 + 8);
  if ((v4 & 0x800000) != 0)
  {
    v7 = *(_QWORD *)(a2 + 72);
    if (!(_DWORD)v6)
      return 0;
  }
  else
  {
    v7 = 0;
    if (!(_DWORD)v6)
      return 0;
  }
  v58 = a2 + 64;
  v8 = v6 - 1;
  v9 = (void **)(v7 + 24);
  v10 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  do
  {
    v12 = (uint64_t *)*v9;
    LODWORD(v66) = 1;
    v65 = 0;
    v61 = (unint64_t)&v65;
    v71 = v12;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v71);
    if (!DefiningOp)
      goto LABEL_31;
    v14 = DefiningOp;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
      goto LABEL_31;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v14, 0, 0, (uint64_t)&v68);
    v15 = *(_QWORD *)v68;
    if (v68 != v70)
      free(v68);
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0
      || ((v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(v14 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
           v16 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        ? (v17 = v16 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        : (v17 = 1),
          !v17 ? (v18 = v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v18 = 1),
          !v18 ? (v19 = v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (v19 = 1),
          !v19))
    {
LABEL_31:
      v21 = 0;
      if (v66 < 0x41)
        goto LABEL_6;
LABEL_32:
      if (v65)
        MEMORY[0x20BD002D4](v65, 0x1000C8000313F17);
      goto LABEL_6;
    }
    if (!mlir::detail::constant_int_value_binder::match((uint64_t *)&v61, v15 & 0xFFFFFFFFFFFFFFF8))
    {
      v21 = 0;
      if (v66 < 0x41)
        goto LABEL_6;
      goto LABEL_32;
    }
    v20 = (void **)((char *)v65 + 8 * ((v66 - 1) >> 6));
    if (v66 < 0x41)
      v20 = &v65;
    v21 = (((unint64_t)*v20 >> (v66 - 1)) & 1) == 0;
    if (v66 >= 0x41)
      goto LABEL_32;
LABEL_6:
    if (v8)
      v11 = v21;
    else
      v11 = 1;
    --v8;
    v9 += 4;
  }
  while (v11 != 1);
  if (!v21)
    return 0;
  v63 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v68 = v70;
  v69 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v22 > HIDWORD(v69))
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v22, 8);
  v65 = v67;
  v66 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    v26 = 8 * v23;
    do
    {
      while (1)
      {
        v27 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63) + v24);
        if (v27 == 0x8000000000000000)
          break;
        v40 = v69;
        if (v69 >= (unint64_t)HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
          v40 = v69;
        }
        *((_QWORD *)v68 + v40) = v27;
        LODWORD(v69) = v69 + 1;
        v24 += 8;
        if (v26 == v24)
          goto LABEL_80;
      }
      v28 = *(ZinIrHalH13g **)(*(_QWORD *)(a2 + 72) + 32 * v25 + 24);
      v62 = 1;
      v60 = &v61;
      v61 = 0;
      v64 = v28;
      v29 = mlir::Value::getDefiningOp((mlir::Value *)&v64);
      if (v29)
      {
        v30 = v29;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v29 + 48)))
        {
          v31 = v10;
          v71 = v73;
          v72 = 0x100000000;
          mlir::Operation::fold(v30, 0, 0, (uint64_t)&v71);
          v32 = *v71;
          if (v71 != v73)
            free(v71);
          v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          v10 = v31;
          if (v33)
          {
            v34 = *(void **)(*(_QWORD *)(*(_QWORD *)(v30 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
            v35 = v34 == v31 || v34 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
            v36 = v35 || v34 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
            v37 = v36 || v34 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v37 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v60, v33))
            {
              v38 = v62 - 1;
              if (v62 > 0x40)
              {
                if (((*(_QWORD *)(v61 + 8 * (v38 >> 6)) >> v38) & 1) == 0)
                {
                  v39 = *(_QWORD *)v61;
LABEL_76:
                  v43 = v69;
                  if (v69 >= (unint64_t)HIDWORD(v69))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
                    v43 = v69;
                  }
                  *((_QWORD *)v68 + v43) = v39;
                  LODWORD(v69) = v69 + 1;
                  if (v62 < 0x41)
                    goto LABEL_41;
                  goto LABEL_73;
                }
              }
              else
              {
                v39 = v61;
                if (((v61 >> v38) & 1) == 0)
                  goto LABEL_76;
              }
            }
          }
        }
      }
      v41 = v69;
      if (v69 >= (unint64_t)HIDWORD(v69))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
        v41 = v69;
      }
      *((_QWORD *)v68 + v41) = 0x8000000000000000;
      LODWORD(v69) = v69 + 1;
      v42 = v66;
      if (v66 >= (unint64_t)HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v66 + 1, 8);
        v42 = v66;
      }
      *((_QWORD *)v65 + v42) = v28;
      LODWORD(v66) = v66 + 1;
      if (v62 < 0x41)
        goto LABEL_41;
LABEL_73:
      if (v61)
        MEMORY[0x20BD002D4](v61, 0x1000C8000313F17);
LABEL_41:
      ++v25;
      v24 += 8;
    }
    while (v26 != v24);
  }
LABEL_80:
  v71 = v63;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  RawStringData = (_QWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
  v47 = v46;
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v71);
  v61 = mlir::MemRefType::get((uint64_t *)v68, (mlir::AffineMap *)v69, RHS, RawStringData, v47, LayerSchedule);
  v49 = *(_QWORD *)(a2 + 24);
  v50 = *(unsigned int *)(a2 + 44);
  v51 = (uint64_t *)(v58 + 16 * ((v50 >> 23) & 1));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v52 = v58 + 16 * ((v50 >> 23) & 1);
  else
    v52 = 0;
  v53 = *(unsigned int *)(v52 + 8);
  v54 = *(_DWORD *)(v52 + 12);
  if ((v50 & 0x800000) != 0)
    v55 = *(_QWORD *)(a2 + 72);
  else
    v55 = 0;
  v71 = (uint64_t *)(v55 + 32 * v53);
  v72 = (v54 + v53) - v53;
  v60 = (unint64_t *)*v51;
  v64 = mlir::OpBuilder::create<mlir::memref::AllocOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(a3 + 1, v49, (uint64_t *)&v61, (uint64_t)&v65, (uint64_t)&v71, (uint64_t *)&v60);
  v71 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v56 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v71, &v64);
  (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v56);
  if (v65 != v67)
    free(v65);
  if (v68 != v70)
    free(v68);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::AllocOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  ZinIrHalH13g *v16;
  ZinIrHalH13g *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  unint64_t v24[2];
  unint64_t v25[2];
  _QWORD v26[39];

  v26[38] = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.alloc", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"memref.alloc";
    v22[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v13);
  v15 = *a3;
  mlir::ValueRange::ValueRange(v25, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  mlir::memref::AllocOp::build(a1, (uint64_t)v26, v15, v25[0], v25[1], v24[0], v24[1], *a6);
  v16 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v17;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"memref.cast";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4 - 16;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *`anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocOp>::~SimplifyDeadAlloc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocOp>::~SimplifyDeadAlloc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t j;
  uint64_t v25[4];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a2 + 36);
  v6 = a2 - 16;
  if ((_DWORD)v5)
    v7 = a2 - 16;
  else
    v7 = 0;
  v27 = v7;
  v28 = v5;
  mlir::ResultRange::use_begin(&v27, (uint64_t *)&v29);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
    v9 = v6;
  else
    v9 = 0;
  v27 = v9;
  v28 = v8;
  mlir::ResultRange::use_end(&v27, v25);
  v10 = v31;
  j = v31;
  v22 = v29;
  v23 = v30;
  for (i = v26; v31 != i; v10 = v31)
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(void **)(*(_QWORD *)(v12 + 48) + 16);
    if (v12)
      v14 = v13 == &mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id;
    else
      v14 = 0;
    if (v14)
    {
      if (*(_QWORD *)(*(_QWORD *)(v12 + 72) + 24) == v6)
        return 0;
    }
    else if (v13 != &mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id)
    {
      return 0;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v29);
  }
  v16 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v16)
    v17 = v6;
  else
    v17 = 0;
  *(_QWORD *)&v22 = v17;
  *((_QWORD *)&v22 + 1) = v16;
  mlir::ResultRange::use_begin((uint64_t *)&v22, (uint64_t *)&v29);
  v18 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v18)
    v19 = v6;
  else
    v19 = 0;
  v27 = v19;
  v28 = v18;
  mlir::ResultRange::use_end(&v27, v25);
  v20 = v26;
  v22 = v29;
  v23 = v30;
  v21 = v31;
  for (j = v31; j != v20; v21 = j)
  {
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v22);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, *(_QWORD *)(v21 + 16));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2);
  return 1;
}

_QWORD *`anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocaOp>::~SimplifyAllocConst(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocaOp>::~SimplifyAllocConst(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAllocConst<mlir::memref::AllocaOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  int v11;
  uint64_t *v12;
  uint64_t DefiningOp;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  void **v20;
  _BOOL4 v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  ZinIrHalH13g *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t RHS;
  _QWORD *RawStringData;
  uint64_t v46;
  uint64_t v47;
  uint64_t LayerSchedule;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  ZinIrHalH13g *v56;
  uint64_t v58;
  unint64_t *v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  ZinIrHalH13g *v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[32];
  void *v68;
  uint64_t v69;
  _BYTE v70[32];
  uint64_t *v71;
  uint64_t v72;
  _QWORD v73[3];

  v73[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 44);
  v5 = a2 + 64 + 16 * ((v4 >> 23) & 1);
  if (!HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = 0;
  v6 = *(unsigned int *)(v5 + 8);
  if ((v4 & 0x800000) != 0)
  {
    v7 = *(_QWORD *)(a2 + 72);
    if (!(_DWORD)v6)
      return 0;
  }
  else
  {
    v7 = 0;
    if (!(_DWORD)v6)
      return 0;
  }
  v58 = a2 + 64;
  v8 = v6 - 1;
  v9 = (void **)(v7 + 24);
  v10 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  do
  {
    v12 = (uint64_t *)*v9;
    LODWORD(v66) = 1;
    v65 = 0;
    v61 = (unint64_t)&v65;
    v71 = v12;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v71);
    if (!DefiningOp)
      goto LABEL_31;
    v14 = DefiningOp;
    if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
      goto LABEL_31;
    v68 = v70;
    v69 = 0x100000000;
    mlir::Operation::fold(v14, 0, 0, (uint64_t)&v68);
    v15 = *(_QWORD *)v68;
    if (v68 != v70)
      free(v68);
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0
      || ((v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(v14 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
           v16 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        ? (v17 = v16 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        : (v17 = 1),
          !v17 ? (v18 = v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (v18 = 1),
          !v18 ? (v19 = v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (v19 = 1),
          !v19))
    {
LABEL_31:
      v21 = 0;
      if (v66 < 0x41)
        goto LABEL_6;
LABEL_32:
      if (v65)
        MEMORY[0x20BD002D4](v65, 0x1000C8000313F17);
      goto LABEL_6;
    }
    if (!mlir::detail::constant_int_value_binder::match((uint64_t *)&v61, v15 & 0xFFFFFFFFFFFFFFF8))
    {
      v21 = 0;
      if (v66 < 0x41)
        goto LABEL_6;
      goto LABEL_32;
    }
    v20 = (void **)((char *)v65 + 8 * ((v66 - 1) >> 6));
    if (v66 < 0x41)
      v20 = &v65;
    v21 = (((unint64_t)*v20 >> (v66 - 1)) & 1) == 0;
    if (v66 >= 0x41)
      goto LABEL_32;
LABEL_6:
    if (v8)
      v11 = v21;
    else
      v11 = 1;
    --v8;
    v9 += 4;
  }
  while (v11 != 1);
  if (!v21)
    return 0;
  v63 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v68 = v70;
  v69 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v22 > HIDWORD(v69))
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v22, 8);
  v65 = v67;
  v66 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    v26 = 8 * v23;
    do
    {
      while (1)
      {
        v27 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63) + v24);
        if (v27 == 0x8000000000000000)
          break;
        v40 = v69;
        if (v69 >= (unint64_t)HIDWORD(v69))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
          v40 = v69;
        }
        *((_QWORD *)v68 + v40) = v27;
        LODWORD(v69) = v69 + 1;
        v24 += 8;
        if (v26 == v24)
          goto LABEL_80;
      }
      v28 = *(ZinIrHalH13g **)(*(_QWORD *)(a2 + 72) + 32 * v25 + 24);
      v62 = 1;
      v60 = &v61;
      v61 = 0;
      v64 = v28;
      v29 = mlir::Value::getDefiningOp((mlir::Value *)&v64);
      if (v29)
      {
        v30 = v29;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v29 + 48)))
        {
          v31 = v10;
          v71 = v73;
          v72 = 0x100000000;
          mlir::Operation::fold(v30, 0, 0, (uint64_t)&v71);
          v32 = *v71;
          if (v71 != v73)
            free(v71);
          v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          v10 = v31;
          if (v33)
          {
            v34 = *(void **)(*(_QWORD *)(*(_QWORD *)(v30 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
            v35 = v34 == v31 || v34 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
            v36 = v35 || v34 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
            v37 = v36 || v34 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v37 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v60, v33))
            {
              v38 = v62 - 1;
              if (v62 > 0x40)
              {
                if (((*(_QWORD *)(v61 + 8 * (v38 >> 6)) >> v38) & 1) == 0)
                {
                  v39 = *(_QWORD *)v61;
LABEL_76:
                  v43 = v69;
                  if (v69 >= (unint64_t)HIDWORD(v69))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
                    v43 = v69;
                  }
                  *((_QWORD *)v68 + v43) = v39;
                  LODWORD(v69) = v69 + 1;
                  if (v62 < 0x41)
                    goto LABEL_41;
                  goto LABEL_73;
                }
              }
              else
              {
                v39 = v61;
                if (((v61 >> v38) & 1) == 0)
                  goto LABEL_76;
              }
            }
          }
        }
      }
      v41 = v69;
      if (v69 >= (unint64_t)HIDWORD(v69))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
        v41 = v69;
      }
      *((_QWORD *)v68 + v41) = 0x8000000000000000;
      LODWORD(v69) = v69 + 1;
      v42 = v66;
      if (v66 >= (unint64_t)HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v66 + 1, 8);
        v42 = v66;
      }
      *((_QWORD *)v65 + v42) = v28;
      LODWORD(v66) = v66 + 1;
      if (v62 < 0x41)
        goto LABEL_41;
LABEL_73:
      if (v61)
        MEMORY[0x20BD002D4](v61, 0x1000C8000313F17);
LABEL_41:
      ++v25;
      v24 += 8;
    }
    while (v26 != v24);
  }
LABEL_80:
  v71 = v63;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  RawStringData = (_QWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v71);
  v47 = v46;
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v71);
  v61 = mlir::MemRefType::get((uint64_t *)v68, (mlir::AffineMap *)v69, RHS, RawStringData, v47, LayerSchedule);
  v49 = *(_QWORD *)(a2 + 24);
  v50 = *(unsigned int *)(a2 + 44);
  v51 = (uint64_t *)(v58 + 16 * ((v50 >> 23) & 1));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v52 = v58 + 16 * ((v50 >> 23) & 1);
  else
    v52 = 0;
  v53 = *(unsigned int *)(v52 + 8);
  v54 = *(_DWORD *)(v52 + 12);
  if ((v50 & 0x800000) != 0)
    v55 = *(_QWORD *)(a2 + 72);
  else
    v55 = 0;
  v71 = (uint64_t *)(v55 + 32 * v53);
  v72 = (v54 + v53) - v53;
  v60 = (unint64_t *)*v51;
  v64 = mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(a3 + 1, v49, (uint64_t *)&v61, (uint64_t)&v65, (uint64_t)&v71, (uint64_t *)&v60);
  v71 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  v56 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v71, &v64);
  (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v56);
  if (v65 != v67)
    free(v65);
  if (v68 != v70)
    free(v68);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::AllocaOp,mlir::MemRefType &,llvm::SmallVector<mlir::Value,4u> &,mlir::OperandRange,mlir::IntegerAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  ZinIrHalH13g *v16;
  ZinIrHalH13g *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  unint64_t v24[2];
  unint64_t v25[2];
  _QWORD v26[39];

  v26[38] = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.alloca", (const unsigned __int8 *)0xD, Context);
  if (!v14)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"memref.alloca";
    v22[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v13);
  v15 = *a3;
  mlir::ValueRange::ValueRange(v25, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  mlir::memref::AllocOp::build(a1, (uint64_t)v26, v15, v25[0], v25[1], v24[0], v24[1], *a6);
  v16 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v17;
}

_QWORD *`anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocaOp>::~SimplifyDeadAlloc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocaOp>::~SimplifyDeadAlloc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SimplifyDeadAlloc<mlir::memref::AllocaOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t j;
  uint64_t v25[4];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a2 + 36);
  v6 = a2 - 16;
  if ((_DWORD)v5)
    v7 = a2 - 16;
  else
    v7 = 0;
  v27 = v7;
  v28 = v5;
  mlir::ResultRange::use_begin(&v27, (uint64_t *)&v29);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
    v9 = v6;
  else
    v9 = 0;
  v27 = v9;
  v28 = v8;
  mlir::ResultRange::use_end(&v27, v25);
  v10 = v31;
  j = v31;
  v22 = v29;
  v23 = v30;
  for (i = v26; v31 != i; v10 = v31)
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(void **)(*(_QWORD *)(v12 + 48) + 16);
    if (v12)
      v14 = v13 == &mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id;
    else
      v14 = 0;
    if (v14)
    {
      if (*(_QWORD *)(*(_QWORD *)(v12 + 72) + 24) == v6)
        return 0;
    }
    else if (v13 != &mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id)
    {
      return 0;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v29);
  }
  v16 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v16)
    v17 = v6;
  else
    v17 = 0;
  *(_QWORD *)&v22 = v17;
  *((_QWORD *)&v22 + 1) = v16;
  mlir::ResultRange::use_begin((uint64_t *)&v22, (uint64_t *)&v29);
  v18 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v18)
    v19 = v6;
  else
    v19 = 0;
  v27 = v19;
  v28 = v18;
  mlir::ResultRange::use_end(&v27, v25);
  v20 = v26;
  v22 = v29;
  v23 = v30;
  v21 = v31;
  for (j = v31; j != v20; v21 = j)
  {
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v22);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, *(_QWORD *)(v21 + 16));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2);
  return 1;
}

_QWORD *`anonymous namespace'::SimplifyDeadAlloc<mlir::memref::ReallocOp>::~SimplifyDeadAlloc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyDeadAlloc<mlir::memref::ReallocOp>::~SimplifyDeadAlloc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReallocOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReallocOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReallocOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyDeadAlloc<mlir::memref::ReallocOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t j;
  uint64_t v25[4];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a2 + 36);
  v6 = a2 - 16;
  if ((_DWORD)v5)
    v7 = a2 - 16;
  else
    v7 = 0;
  v27 = v7;
  v28 = v5;
  mlir::ResultRange::use_begin(&v27, (uint64_t *)&v29);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
    v9 = v6;
  else
    v9 = 0;
  v27 = v9;
  v28 = v8;
  mlir::ResultRange::use_end(&v27, v25);
  v10 = v31;
  j = v31;
  v22 = v29;
  v23 = v30;
  for (i = v26; v31 != i; v10 = v31)
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(void **)(*(_QWORD *)(v12 + 48) + 16);
    if (v12)
      v14 = v13 == &mlir::detail::TypeIDResolver<mlir::memref::StoreOp,void>::id;
    else
      v14 = 0;
    if (v14)
    {
      if (*(_QWORD *)(*(_QWORD *)(v12 + 72) + 24) == v6)
        return 0;
    }
    else if (v13 != &mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id)
    {
      return 0;
    }
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v29);
  }
  v16 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v16)
    v17 = v6;
  else
    v17 = 0;
  *(_QWORD *)&v22 = v17;
  *((_QWORD *)&v22 + 1) = v16;
  mlir::ResultRange::use_begin((uint64_t *)&v22, (uint64_t *)&v29);
  v18 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v18)
    v19 = v6;
  else
    v19 = 0;
  v27 = v19;
  v28 = v18;
  mlir::ResultRange::use_end(&v27, v25);
  v20 = v26;
  v22 = v29;
  v23 = v30;
  v21 = v31;
  for (j = v31; j != v20; v21 = j)
  {
    mlir::ResultRange::UseIterator::operator++((uint64_t *)&v22);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, *(_QWORD *)(v21 + 16));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2);
  return 1;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x24BDAC8D0];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"memref.alloca_scope.return", 26);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void mlir::RewritePatternSet::addImpl<AllocaScopeInliner,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.alloca_scope", 19, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C01D740;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = AllocaScopeInliner]";
    v25 = 68;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<AllocaScopeHoister,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.alloca_scope", 19, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C01D6E8;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = AllocaScopeHoister]";
    v25 = 68;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void AllocaScopeInliner::~AllocaScopeInliner(AllocaScopeInliner *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaScopeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaScopeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::AllocaScopeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t AllocaScopeInliner::matchAndRewrite(uint64_t a1, mlir::ForwardIterator *a2, uint64_t a3)
{
  uint64_t v4;
  ZinIrHalH13g **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  mlir::Block *ParentOp;
  mlir::ForwardIterator *v13;
  ZinIrHalH13g **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::Block *Parent;
  mlir::Block *v20;
  uint64_t v21;
  mlir::ForwardIterator *v22;
  unint64_t v23[2];
  unint64_t v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v24[0] = (unint64_t)&v22;
  if (mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<AllocaScopeInliner::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}>, (uint64_t)v24, 0))
  {
LABEL_2:
    v4 = *(_QWORD *)((((unint64_t)v22
                     + 16 * (((unint64_t)*((unsigned int *)v22 + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)v22 + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v22 + 10)
                   + 8);
    if (v4)
      v5 = (ZinIrHalH13g **)(v4 - 8);
    else
      v5 = 0;
    mlir::Block::getTerminator(v5);
    v7 = v6;
    if ((*(_BYTE *)(v6 + 46) & 0x80) != 0)
    {
      v8 = *(_QWORD *)(v6 + 72);
      v9 = *(unsigned int *)(v6 + 68);
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    mlir::ValueRange::ValueRange(v24, v8, v9);
    v10 = (uint64_t)v22;
    mlir::ValueRange::ValueRange(v23, 0, 0);
    mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v5, v10, v23[0], v23[1]);
    (*(void (**)(uint64_t, mlir::ForwardIterator *, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, v22, v24[0], v24[1]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v7);
    return 1;
  }
  ParentOp = (mlir::Block *)*((_QWORD *)v22 + 2);
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  result = mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((_QWORD *)ParentOp + 6);
  if ((_DWORD)result)
  {
    v13 = v22;
    v14 = (ZinIrHalH13g **)*((_QWORD *)v22 + 2);
    if (*((ZinIrHalH13g ***)v22 + 1) == v14 + 4)
    {
      mlir::Block::getTerminator(v14);
      if (v18)
        return 0;
    }
    else
    {
      ZinIrHalH13g::~ZinIrHalH13g(*((ZinIrHalH13g **)v22 + 1));
      v16 = v15;
      mlir::Block::getTerminator(*((ZinIrHalH13g ***)v13 + 2));
      if (v16 != v17)
        return 0;
    }
    Parent = (mlir::Block *)*((_QWORD *)v13 + 2);
    if (Parent)
      Parent = (mlir::Block *)mlir::Block::getParent(Parent);
    v20 = (mlir::Block *)*((_QWORD *)Parent + 1);
    if (v20 != Parent)
    {
      v21 = 1;
      do
      {
        v20 = (mlir::Block *)*((_QWORD *)v20 + 1);
        --v21;
      }
      while (v20 != Parent);
      if (!v21)
        goto LABEL_2;
    }
    return 0;
  }
  return result;
}

uint64_t AllocaScopeInliner::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)const::{lambda(mlir::Operation *)#1}::operator()(_QWORD **a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t InterfaceFor;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t NextResultAtOffset;
  void *v24;
  unint64_t v25;
  _QWORD v26[22];

  v26[20] = *MEMORY[0x24BDAC8D0];
  if (**a1 == a2)
    return 1;
  v4 = (_QWORD *)(a2 + 48);
  if ((mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>((_QWORD *)(a2 + 48)) & 1) != 0)
    goto LABEL_3;
  if (!mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
    v21 = 0;
    v22 = 0;
    return 0;
  }
  if (a2)
    InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  else
    InterfaceFor = 0;
  v21 = a2;
  v22 = InterfaceFor;
  if (!a2)
    return 0;
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7)
    v8 = a2 - 16;
  else
    v8 = 0;
  if ((_DWORD)v7)
  {
    v9 = 0;
    do
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v9);
      v24 = v26;
      v25 = 0x400000000;
      mlir::RegionBranchOpInterface::getEntrySuccessorOperands((uint64_t)&v21, (uint64_t)&v24);
      v10 = llvm::find_if<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,std::optional<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>> mlir::MemoryEffectOpInterface::getEffectOnValue<mlir::MemoryEffects::Allocate>(mlir::Value)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & &)#1}>((uint64_t)&v24, &NextResultAtOffset);
      v11 = (uint64_t **)((char *)v24 + 40 * v25);
      if (v10 != v11)
        v2 = v10[1];
      if (v24 != v26)
        free(v24);
      if (v10 != v11)
      {
        v12 = v2[1];
        if ((v13 & 1) == 0
        {
          v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::AutomaticAllocationScopeResource]";
          v25 = 101;
          v14 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
          if (v25 >= v14)
            v15 = v14;
          else
            v15 = v25;
          v16 = (char *)v24 + v15;
          v17 = v25 - v15;
          v18 = 18;
          if (v17 < 0x12)
            v18 = v17;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
        }
        if (v12 == mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id)
          return 0;
      }
    }
    while (v7 != ++v9);
  }
LABEL_3:
  if (mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>(v4))
    return 2;
  else
    return 1;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::HasRecursiveMemoryEffects>(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v15 = 97;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v2[219]);
}

void AllocaScopeHoister::~AllocaScopeHoister(AllocaScopeHoister *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

mlir::Block *AllocaScopeHoister::matchAndRewrite(uint64_t a1, ZinIrHalH13g **a2, uint64_t a3)
{
  mlir::Block *v5;
  mlir::Block *result;
  ZinIrHalH13g *v7;
  ZinIrHalH13g **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlir::Block *Parent;
  mlir::Block *v14;
  uint64_t v15;
  ZinIrHalH13g **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlir::Block *v20;
  mlir::Block *v21;
  uint64_t v22;
  ZinIrHalH13g **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  mlir::Block *v27;
  mlir::Block *v28;
  uint64_t v29;
  mlir::Block *ParentOp;
  unint64_t v31;
  mlir::Region *v32;
  mlir::Region *v33;
  uint64_t v34;
  mlir::Block *v35;
  mlir::Region *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  mlir::Region *v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[7];

  v44[6] = *MEMORY[0x24BDAC8D0];
  v5 = (mlir::Block *)a2;
  do
  {
    result = (mlir::Block *)*((_QWORD *)v5 + 2);
    if (!result)
      return result;
    result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (!result)
      return result;
    v5 = result;
  }
  while (!mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((_QWORD *)result + 6));
  result = a2[2];
  if (result)
  {
    result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (result)
    {
      v7 = result;
      if ((mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((_QWORD *)result + 6) & 1) == 0)
      {
        v8 = (ZinIrHalH13g **)a2[2];
        if (a2[1] == (ZinIrHalH13g *)(v8 + 4))
        {
          mlir::Block::getTerminator(v8);
          if (v12)
            return 0;
        }
        else
        {
          ZinIrHalH13g::~ZinIrHalH13g(a2[1]);
          v10 = v9;
          mlir::Block::getTerminator((ZinIrHalH13g **)a2[2]);
          if (v10 != v11)
            return 0;
        }
        Parent = a2[2];
        if (Parent)
          Parent = (mlir::Block *)mlir::Block::getParent(Parent);
        v14 = (mlir::Block *)*((_QWORD *)Parent + 1);
        if (v14 != Parent)
        {
          v15 = 1;
          do
          {
            v14 = (mlir::Block *)*((_QWORD *)v14 + 1);
            --v15;
          }
          while (v14 != Parent);
          if (!v15)
          {
            v16 = (ZinIrHalH13g **)*((_QWORD *)v7 + 2);
            if (*((ZinIrHalH13g ***)v7 + 1) == v16 + 4)
            {
              v18 = 0;
            }
            else
            {
              ZinIrHalH13g::~ZinIrHalH13g(*((ZinIrHalH13g **)v7 + 1));
              v18 = v17;
              v16 = (ZinIrHalH13g **)*((_QWORD *)v7 + 2);
            }
            mlir::Block::getTerminator(v16);
            if (v18 == v19)
            {
              v20 = (mlir::Block *)*((_QWORD *)v7 + 2);
              if (v20)
                v20 = (mlir::Block *)mlir::Block::getParent(v20);
              v21 = (mlir::Block *)*((_QWORD *)v20 + 1);
              if (v21 != v20)
              {
                v22 = 1;
                do
                {
                  v21 = (mlir::Block *)*((_QWORD *)v21 + 1);
                  --v22;
                }
                while (v21 != v20);
                if (!v22)
                {
                  while (1)
                  {
                    ParentOp = (mlir::Block *)*((_QWORD *)v7 + 2);
                    if (ParentOp)
                      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
                    if ((mlir::OperationName::hasTrait<mlir::OpTrait::AutomaticAllocationScope>((_QWORD *)ParentOp + 6) & 1) != 0)
                      break;
                    result = (mlir::Block *)*((_QWORD *)v7 + 2);
                    if (!result)
                      return result;
                    result = (mlir::Block *)mlir::Block::getParentOp(result);
                    if (!result)
                      return result;
                    v7 = result;
                    v23 = (ZinIrHalH13g **)*((_QWORD *)result + 2);
                    if (*((ZinIrHalH13g ***)v7 + 1) == v23 + 4)
                    {
                      v25 = 0;
                    }
                    else
                    {
                      ZinIrHalH13g::~ZinIrHalH13g(*((ZinIrHalH13g **)v7 + 1));
                      v25 = v24;
                      v23 = (ZinIrHalH13g **)*((_QWORD *)v7 + 2);
                    }
                    mlir::Block::getTerminator(v23);
                    if (v25 != v26)
                      return 0;
                    v27 = (mlir::Block *)*((_QWORD *)v7 + 2);
                    if (v27)
                      v27 = (mlir::Block *)mlir::Block::getParent(v27);
                    v28 = (mlir::Block *)*((_QWORD *)v27 + 1);
                    if (v28 == v27)
                      return 0;
                    v29 = 1;
                    do
                    {
                      v28 = (mlir::Block *)*((_QWORD *)v28 + 1);
                      --v29;
                    }
                    while (v28 != v27);
                    result = 0;
                    if (v29)
                      return result;
                  }
                  v31 = *((unsigned int *)v7 + 11);
                  v32 = 0;
                  if ((v31 & 0x7FFFFF) != 0)
                  {
                    v33 = (mlir::Region *)((((unint64_t)v7
                                           + 16 * ((v31 >> 23) & 1)
                                           + ((v31 >> 21) & 0x7F8)
                                           + 71) & 0xFFFFFFFFFFFFFFF8)
                                         + 32 * *((unsigned int *)v7 + 10));
                    v34 = 24 * (v31 & 0x7FFFFF);
                    do
                    {
                      v35 = a2[2];
                      if (v35)
                        v36 = (mlir::Region *)mlir::Block::getParent(v35);
                      else
                        v36 = 0;
                      if (v33 == v36 || mlir::Region::isProperAncestor(v33, v36))
                        v32 = v33;
                      v33 = (mlir::Region *)((char *)v33 + 24);
                      v34 -= 24;
                    }
                    while (v34);
                  }
                  v42 = v44;
                  v43 = 0x600000000;
                  v40[0] = &v41;
                  v40[1] = &v42;
                  v41 = v32;
                  mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a2, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}>, (uint64_t)v40, 1);
                  if ((_DWORD)v43)
                  {
                    v37 = *((_QWORD *)v7 + 2);
                    ZinIrHalH13g::~ZinIrHalH13g(v7);
                    *(_QWORD *)(a3 + 24) = v37;
                    *(_QWORD *)(a3 + 32) = v38;
                    if ((_DWORD)v43)
                      mlir::OpBuilder::clone((uint64_t **)(a3 + 8), *(mlir::Operation **)v42);
                    v39 = 1;
                  }
                  else
                  {
                    v39 = 0;
                  }
                  if (v42 != v44)
                    free(v42);
                  return (mlir::Block *)v39;
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)const::{lambda(mlir::Operation *)#1}::operator()(mlir::Region ***a1, uint64_t a2)
{
  mlir::Region ***v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  mlir::Region **v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  mlir::Region ***v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t InterfaceFor;
  uint64_t NextResultAtOffset;
  void *v26;
  unint64_t v27;
  _QWORD v28[22];

  v3 = a1;
  v28[20] = *MEMORY[0x24BDAC8D0];
  if (!mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
    v23 = 0;
    InterfaceFor = 0;
    return 2;
  }
  if (!a2)
  {
    v23 = 0;
    InterfaceFor = 0;
    return 2;
  }
  v23 = a2;
  InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v4 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v4)
    v5 = a2 - 16;
  else
    v5 = 0;
  if (!(_DWORD)v4)
    return 2;
  v6 = 0;
  while (1)
  {
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6);
    v26 = v28;
    v27 = 0x400000000;
    mlir::RegionBranchOpInterface::getEntrySuccessorOperands((uint64_t)&v23, (uint64_t)&v26);
    v7 = llvm::find_if<llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> &,std::optional<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>> mlir::MemoryEffectOpInterface::getEffectOnValue<mlir::MemoryEffects::Allocate>(mlir::Value)::{lambda(llvm::SmallVector<mlir::SideEffects::EffectInstance<mlir::MemoryEffects::Effect>,4u> & &)#1}>((uint64_t)&v26, &NextResultAtOffset);
    v8 = (uint64_t **)((char *)v26 + 40 * v27);
    if (v7 != v8)
      v3 = (mlir::Region ***)v7[1];
    if (v26 != v28)
      free(v26);
    if (v7 != v8)
    {
      v9 = v3[1];
      if ((v10 & 1) == 0
      {
        v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SideEffects::AutomaticAllocationScopeResource]";
        v27 = 101;
        v11 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
        if (v27 >= v11)
          v12 = v11;
        else
          v12 = v27;
        v13 = (char *)v26 + v12;
        v14 = v27 - v12;
        v15 = 18;
        if (v14 < 0x12)
          v15 = v14;
        v16 = v14 - v15;
        if (v16 >= v16 - 1)
          v17 = v16 - 1;
        else
          v17 = v16;
        mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      }
      if (v9 == (mlir::Region **)mlir::detail::TypeIDResolver<mlir::SideEffects::AutomaticAllocationScopeResource,void>::resolveTypeID(void)::id)
        break;
    }
    if (v4 == ++v6)
      return 2;
  }
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v18 = a1;
    if ((std::any_of[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}::operator() const(mlir::Operation *)::{lambda(mlir::Value)#1}>(*(_QWORD *)(a2 + 72), 0, *(_QWORD *)(a2 + 72), *(unsigned int *)(a2 + 68), *a1) & 1) != 0)return 2;
  }
  else
  {
    v18 = a1;
    if ((std::any_of[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}::operator() const(mlir::Operation *)::{lambda(mlir::Value)#1}>(0, 0, 0, 0, *a1) & 1) != 0)return 2;
  }
  v20 = (uint64_t)v18[1];
  v21 = *(unsigned int *)(v20 + 8);
  if (v21 >= *(_DWORD *)(v20 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v20, (void *)(v20 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(v20 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = a2;
  ++*(_DWORD *)(v20 + 8);
  return 1;
}

unint64_t std::any_of[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,AllocaScopeHoister::matchAndRewrite(mlir::memref::AllocaScopeOp,mlir::PatternRewriter &)::{lambda(mlir::Operation *)#1}::operator() const(mlir::Operation *)::{lambda(mlir::Value)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, mlir::Region **a5)
{
  unint64_t result;
  mlir::Region *v9;
  mlir::Block *v10;
  uint64_t v11;
  mlir::Region *v12;
  mlir::Block *v13;
  mlir::Block *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  mlir::Region *v20;
  mlir::Block *ParentRegion;
  uint64_t v22;

  if (a1 == a3 && a2 == a4)
    return 0;
  if (a1 == a3)
  {
    v17 = ~a2 + a4;
    v18 = (uint64_t *)(a1 + 32 * a2 + 24);
    while (1)
    {
      v19 = v17;
      v22 = *v18;
      v20 = *a5;
      ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v22);
      if (v20 == ParentRegion)
        break;
      result = mlir::Region::isProperAncestor(v20, ParentRegion);
      if ((result & 1) == 0)
      {
        v17 = v19 - 1;
        v18 += 4;
        if (v19)
          continue;
      }
      return result;
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 32 * a2 + 24);
    v9 = *a5;
    v10 = mlir::Value::getParentRegion((mlir::Value *)&v22);
    if (v9 != v10 && (mlir::Region::isProperAncestor(v9, v10) & 1) == 0)
    {
      v11 = a1 + 32 * a2;
      v22 = *(_QWORD *)(v11 + 56);
      v12 = *a5;
      v13 = mlir::Value::getParentRegion((mlir::Value *)&v22);
      if (v12 != v13)
      {
        v14 = v13;
        v15 = (uint64_t *)(v11 + 88);
        do
        {
          if ((mlir::Region::isProperAncestor(v12, v14) & 1) != 0)
            break;
          v16 = *v15;
          v15 += 4;
          v22 = v16;
          v12 = *a5;
          v14 = mlir::Value::getParentRegion((mlir::Value *)&v22);
        }
        while (v12 != v14);
      }
    }
  }
  return 1;
}

void `anonymous namespace'::FoldCopyOfCast::~FoldCopyOfCast(_anonymous_namespace_::FoldCopyOfCast *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CopyOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CopyOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CopyOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::FoldCopyOfCast::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DefiningOp;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  const void *Value;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t RHS;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;

  v36 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v36);
  v6 = DefiningOp;
  if (!DefiningOp)
  {
LABEL_10:
    v36 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
    v15 = mlir::Value::getDefiningOp((mlir::Value *)&v36);
    if (!v15)
      return v6;
    goto LABEL_11;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    goto LABEL_9;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(void **)(*(_QWORD *)v7 + 136);
  if (v8 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    v7 = 0;
  v35 = v7;
  v36 = v7;
  if (v8 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id
    || (Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36),
        v11 = v10,
        v12 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35),
        v11 != v13)
    || memcmp(Value, v12, 8 * v11)
    || (RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v36),
        RHS != mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v35)))
  {
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, a2);
  v30 = *(uint64_t **)(a2 + 72);
  v31 = *(uint64_t **)(*(_QWORD *)(v6 + 72) + 24);
  v32 = (uint64_t *)v30[1];
  if (v32)
  {
    *v32 = *v30;
    if (*v30)
      *(_QWORD *)(*v30 + 8) = v30[1];
  }
  v30[3] = (uint64_t)v31;
  v30[1] = (uint64_t)v31;
  v33 = *v31;
  *v30 = *v31;
  if (v33)
    *(_QWORD *)(v33 + 8) = v30;
  *v31 = (uint64_t)v30;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a2);
  v6 = 1;
  v36 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
  v15 = mlir::Value::getDefiningOp((mlir::Value *)&v36);
  if (v15)
  {
LABEL_11:
    v16 = v15;
    if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v18 = *(void **)(*(_QWORD *)v17 + 136);
      if (v18 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        v17 = 0;
      v35 = v17;
      v36 = v17;
      if (v18 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      {
        v19 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
        v21 = v20;
        v22 = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
        if (v21 == v23 && !memcmp(v19, v22, 8 * v21))
        {
          v24 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v36);
          if (v24 == mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v35))
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, a2);
            v25 = *(_QWORD **)(a2 + 72);
            v26 = *(uint64_t **)(*(_QWORD *)(v16 + 72) + 24);
            v27 = v25 + 4;
            v28 = (_QWORD *)v25[5];
            if (v28)
            {
              *v28 = *v27;
              if (*v27)
                *(_QWORD *)(*v27 + 8) = v25[5];
            }
            v25[7] = v26;
            v25[5] = v26;
            v29 = *v26;
            v25[4] = *v26;
            if (v29)
              *(_QWORD *)(v29 + 8) = v27;
            *v26 = (uint64_t)v27;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a2);
            return 1;
          }
        }
      }
    }
  }
  return v6;
}

void `anonymous namespace'::FoldSelfCopy::~FoldSelfCopy(_anonymous_namespace_::FoldSelfCopy *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::FoldSelfCopy::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) != *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  return 1;
}

void `anonymous namespace'::DimOfMemRefReshape::~DimOfMemRefReshape(_anonymous_namespace_::DimOfMemRefReshape *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::DimOfMemRefReshape::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ZinIrHalH13g *DefiningOp;
  ZinIrHalH13g *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v17);
  if (!DefiningOp)
    return 0;
  v6 = DefiningOp;
  if (*(_UNKNOWN **)(*((_QWORD *)DefiningOp + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::ReshapeOp,void>::id)
    return 0;
  v8 = *((_QWORD *)DefiningOp + 2);
  ZinIrHalH13g::~ZinIrHalH13g(DefiningOp);
  v10 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(*((_QWORD *)v6 + 9) + 56);
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
  v16 = v12;
  v13 = mlir::OpBuilder::create<mlir::memref::LoadOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::IndexType>>((mlir::BoolAttr **)(a3 + 8), v11, (uint64_t *)&v16, (uint64_t)&v15);
  v17 = (uint64_t)v13 - 16;
  if ((*((_QWORD *)v13 - 1) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    v17 = (uint64_t)mlir::OpBuilder::create<mlir::arith::IndexCastOp,mlir::IndexType,mlir::Value &>((mlir::OpBuilder *)(a3 + 8), v11, (uint64_t *)&v16, &v17)- 16;
  }
  v7 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2, &v17, 1);
  return v7;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::LoadOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::IndexType>>(mlir::BoolAttr **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.load", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"memref.load";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::memref::LoadOp::build(a1, (uint64_t)v19, *a3, a4, 1, 0);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::LoadOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::IndexCastOp,mlir::IndexType,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.index_cast", (const unsigned __int8 *)0x10, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"arith.index_cast";
    v17[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

uint64_t llvm::function_ref<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>::callback_fn<llvm::SmallVector<long long,6u> ()(mlir::MemRefType)>(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t llvm::function_ref<BOOL ()(long long)>::callback_fn<BOOL ()(long long)>(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return a1(a2);
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::memref::GenericAtomicRMWOp::verify(void)::$_0>(uint64_t a1, mlir *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((mlir::isMemoryEffectFree(a2, a2) & 1) != 0)
    return 1;
  v12 = "body of 'memref.generic_atomic_rmw' should contain only operations with no side effects";
  v13 = 259;
  mlir::Operation::emitError((uint64_t *)a2, (uint64_t)&v12, (uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = __p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = *--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            MEMORY[0x20BD002D4](v10, 0x1000C8077774924);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return 0;
}

void `anonymous namespace'::ReinterpretCastOpExtractStridedMetadataFolder::~ReinterpretCastOpExtractStridedMetadataFolder(_anonymous_namespace_::ReinterpretCastOpExtractStridedMetadataFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReinterpretCastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReinterpretCastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ReinterpretCastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::ReinterpretCastOpExtractStridedMetadataFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DefiningOp;
  uint64_t v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t NextResultAtOffset;
  unint64_t v13;
  void *Context;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  mlir::MLIRContext *v18;
  uint64_t IndexAttr;
  uint64_t *v20;
  uint64_t i;
  mlir::MLIRContext *Int;
  uint64_t v23;
  unint64_t ConstantIntValue;
  char v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  mlir::IndexType *v38;
  mlir::IndexType *v39;
  uint64_t v40;
  const void *Value;
  uint64_t v42;
  size_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  mlir::MLIRContext *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t j;
  mlir::MLIRContext *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ConstifiedMixedOffset;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrHalH13g *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  mlir::IndexType *v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83[2];
  char *v84;
  uint64_t v85;
  _QWORD v86[8];

  v86[6] = *MEMORY[0x24BDAC8D0];
  v71 = a2;
  v84 = *(char **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v84);
  v5 = DefiningOp;
  if (!DefiningOp)
    return v5;
  v6 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExtractStridedMetadataOp,void>::id;
  if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExtractStridedMetadataOp,void>::id)
    v8 = DefiningOp;
  else
    v8 = 0;
  v70 = v8;
  if (!v7)
    return 0;
  v9 = *(_DWORD *)(DefiningOp + 36);
  v10 = (v9 - 2) >> 1;
  if (v9)
    v11 = DefiningOp - 16;
  else
    v11 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, v10 + 2);
  mlir::ValueRange::ValueRange((unint64_t *)&v77, NextResultAtOffset, v10 + 2 + v10 - (unint64_t)(v10 + 2));
  mlir::getAsOpFoldResult((uint64_t)v77, v78, &v80);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  Context = (void *)mlir::Attribute::getContext((mlir::Attribute *)(v5 + 24));
  getConstantStrides(v13, (uint64_t)&v84);
  v74 = Context;
  if ((_DWORD)v85)
  {
    v15 = 0;
    v16 = v84;
    v17 = 8 * v85;
    do
    {
      v18 = *(mlir::MLIRContext **)&v16[v15];
      if (v18 != (mlir::MLIRContext *)0x8000000000000000)
      {
        IndexAttr = mlir::Builder::getIndexAttr((mlir::IndexType **)&v74, v18);
        *(_QWORD *)((char *)v80 + v15) = IndexAttr & 0xFFFFFFFFFFFFFFFBLL;
      }
      v15 += 8;
    }
    while (v17 != v15);
  }
  if (v81)
  {
    v20 = (uint64_t *)v80;
    for (i = 8 * v81; i; i -= 8)
    {
      v23 = *v20;
      if ((*v20 & 4) != 0)
      {
        ConstantIntValue = mlir::getConstantIntValue(v23 & 0xFFFFFFFFFFFFFFF8 | 4);
        if (!v25)
          goto LABEL_19;
        Int = (mlir::MLIRContext *)ConstantIntValue;
      }
      else
      {
        v83[0] = v23 & 0xFFFFFFFFFFFFFFF8;
        Int = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v83);
      }
      *v20 = mlir::Builder::getIndexAttr((mlir::IndexType **)&v74, Int) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_19:
      ++v20;
    }
  }
  if (v84 != (char *)v86)
    free(v84);
  mlir::memref::ReinterpretCastOp::getConstifiedMixedStrides((mlir::memref::ReinterpretCastOp *)&v71, (uint64_t)&v77);
  if (v81 != (_DWORD)v78)
    goto LABEL_38;
  if (*(_DWORD *)(v71 + 36))
    v26 = v71 - 16;
  else
    v26 = 0;
  v84 = (char *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v84);
  v28 = v27;
  if (!v27)
  {
LABEL_33:
    v35 = *(_DWORD *)(v5 + 36);
    if (v35)
      v36 = v5 - 16;
    else
      v36 = 0;
    v37 = mlir::detail::OpResultImpl::getNextResultAtOffset(v36, 2);
    mlir::ValueRange::ValueRange((unint64_t *)v83, v37, (v35 - 2) >> 1);
    mlir::getAsOpFoldResult(v83[0], v83[1], &v74);
    v38 = (mlir::IndexType *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v39 = (mlir::IndexType *)mlir::Attribute::getContext((mlir::Attribute *)(v5 + 24));
    v73 = v38;
    Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
    v42 = v40;
    v43 = 8 * v40;
    v84 = (char *)v86;
    v85 = 0x600000000;
    if ((unint64_t)(8 * v40) < 0x31)
    {
      v44 = 0;
      v45 = (char *)v86;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, (8 * v40) >> 3, 8);
      v44 = v85;
      v45 = v84;
    }
    if (v42)
    {
      memcpy(&v45[8 * v44], Value, v43);
      v44 = v85;
      v45 = v84;
    }
    v73 = v39;
    v46 = v44 + (v43 >> 3);
    LODWORD(v85) = v46;
    if ((_DWORD)v46)
    {
      v47 = 0;
      v48 = 8 * v46;
      do
      {
        v49 = *(mlir::MLIRContext **)&v45[v47];
        if (v49 != (mlir::MLIRContext *)0x8000000000000000)
        {
          v50 = mlir::Builder::getIndexAttr(&v73, v49);
          *(_QWORD *)((char *)v74 + v47) = v50 & 0xFFFFFFFFFFFFFFFBLL;
        }
        v47 += 8;
      }
      while (v48 != v47);
    }
    if (v75)
    {
      v51 = (uint64_t *)v74;
      for (j = 8 * v75; j; j -= 8)
      {
        v54 = *v51;
        if ((*v51 & 4) != 0)
        {
          v55 = mlir::getConstantIntValue(v54 & 0xFFFFFFFFFFFFFFF8 | 4);
          if (!v56)
            goto LABEL_51;
          v53 = (mlir::MLIRContext *)v55;
        }
        else
        {
          v72 = v54 & 0xFFFFFFFFFFFFFFF8;
          v53 = (mlir::MLIRContext *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v72);
        }
        *v51 = mlir::Builder::getIndexAttr(&v73, v53) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_51:
        ++v51;
      }
    }
    if (v84 != (char *)v86)
      free(v84);
    mlir::memref::ReinterpretCastOp::getConstifiedMixedSizes((mlir::memref::ReinterpretCastOp *)&v71, (uint64_t)&v84);
    if (v28)
    {
      v57 = (uint64_t *)v74;
      v58 = (uint64_t *)v84;
      while (1)
      {
        v60 = *v57++;
        v59 = v60;
        v61 = *v58++;
        if (v59 != v61)
          break;
        if (!--v28)
          goto LABEL_61;
      }
    }
    else
    {
LABEL_61:
      ConstifiedMixedOffset = mlir::memref::ExtractStridedMetadataOp::getConstifiedMixedOffset((mlir::memref::ExtractStridedMetadataOp *)&v70);
      if (ConstifiedMixedOffset == mlir::memref::ReinterpretCastOp::getConstifiedMixedOffset((mlir::memref::ReinterpretCastOp *)&v71))
      {
        v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v71 + 36))
          v65 = v71 - 16;
        else
          v65 = 0;
        v66 = mlir::detail::OpResultImpl::getNextResultAtOffset(v65, 0);
        v67 = v71;
        if (v64 == (*(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v83[0] = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 24);
          v5 = 1;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 24))(a3, v71, v83, 1);
        }
        else
        {
          if (*(_DWORD *)(v71 + 36))
            v68 = v71 - 16;
          else
            v68 = 0;
          v83[0] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
          v73 = *(mlir::IndexType **)(*(_QWORD *)(v70 + 72) + 24);
          v69 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(v67 + 24), v83, (uint64_t *)&v73);
          (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, v67, v69);
          v5 = 1;
        }
        goto LABEL_63;
      }
    }
    v5 = 0;
LABEL_63:
    if (v84 != (char *)v86)
      free(v84);
    if (v74 != &v76)
      free(v74);
    goto LABEL_67;
  }
  v29 = (uint64_t *)v80;
  v30 = (uint64_t *)v77;
  v31 = v27;
  while (1)
  {
    v33 = *v29++;
    v32 = v33;
    v34 = *v30++;
    if (v32 != v34)
      break;
    if (!--v31)
      goto LABEL_33;
  }
LABEL_38:
  v5 = 0;
LABEL_67:
  if (v77 != &v79)
    free(v77);
  if (v80 != &v82)
    free(v80);
  return v5;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[8];
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[29];

  v25[28] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.cast", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"memref.cast";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  v19[0] = *a4;
  mlir::OperationState::addOperands((uint64_t)v21, (uint64_t)v19, 1);
  v12 = v23;
  if (v23 >= v24)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v23 + 1, 8);
    v12 = v23;
  }
  *(_QWORD *)(v22 + 8 * v12) = v11;
  ++v23;
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.expand_shape", 19, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C04FBA8;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>]";
    v25 = 115;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.expand_shape", 19, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C04F938;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp, "
          "mlir::memref::CollapseShapeOp>]";
    v25 = 141;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ExpandShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ExpandShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ExpandShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::ComposeReassociativeReshapeOps<mlir::memref::ExpandShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t NextResultAtOffset;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  ZinIrHalH13g *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v30 = a2;
  v34 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v34);
  if (result)
  {
    v6 = result;
    v7 = *(void **)(*(_QWORD *)(result + 48) + 16);
    v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id;
    if (v7 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id)
      v9 = result;
    else
      v9 = 0;
    v29 = v9;
    if (!v8)
      return 0;
    v10 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    v11 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8) : 0;
    v28[0] = (uint64_t)v11;
    v28[1] = v12;
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
      || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    {
      return 0;
    }
    v13 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
      return 0;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v29, (uint64_t)&v34);
    v15 = v34;
    v16 = v35;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v30, (uint64_t)&v31);
    mlir::composeReassociationIndices((uint64_t)v15, v16, (uint64_t)v31, v32, (uint64_t)&v37);
    v17 = (char *)v31;
    if (v32)
    {
      v18 = 32 * v32;
      do
      {
        v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19)
          free(v19);
        v18 -= 32;
      }
      while (v18);
      v17 = (char *)v31;
    }
    if (v17 != (char *)&v33)
      free(v17);
    v20 = (char *)v34;
    if (v35)
    {
      v21 = 32 * v35;
      do
      {
        v22 = *(char **)&v20[v21 - 32];
        if (&v20[v21 - 16] != v22)
          free(v22);
        v21 -= 32;
      }
      while (v21);
      v20 = (char *)v34;
    }
    if (v20 != (char *)&v36)
      free(v20);
    if (!v40)
    {
      return 0;
    }
    else
    {
      v23 = v30;
      v34 = *(void **)(*(_QWORD *)(v29 + 72) + 24);
      v24 = mlir::OpBuilder::create<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v30 + 24), v28, (uint64_t *)&v34, (uint64_t)&v37);
      (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v23, v24);
      if (v40)
      {
        v25 = v37;
        if (v38)
        {
          v26 = 32 * v38;
          do
          {
            v27 = *(char **)&v25[v26 - 32];
            if (&v25[v26 - 16] != v27)
              free(v27);
            v26 -= 32;
          }
          while (v26);
          v25 = v37;
        }
        if (v25 != (char *)&v39)
          free(v25);
      }
      return 1;
    }
  }
  return result;
}

char **std::optional<llvm::SmallVector<llvm::SmallVector<long long,2u>,1u>>::~optional(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  if (*((_BYTE *)a1 + 48))
  {
    v2 = *a1;
    v3 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v3)
    {
      v4 = 32 * v3;
      do
      {
        v5 = *(char **)&v2[v4 - 32];
        if (&v2[v4 - 16] != v5)
          free(v5);
        v4 -= 32;
      }
      while (v4);
      v2 = *a1;
    }
    if (v2 != (char *)(a1 + 2))
      free(v2);
  }
  return a1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t ReassociationIndicesAttribute;
  mlir::StringAttr *v19;
  uint64_t v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];
  __int16 v30;
  _QWORD v31[14];
  uint64_t v32;
  unint64_t v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.expand_shape", (const unsigned __int8 *)0x13, Context);
  if (!v12)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"memref.expand_shape";
    v29[3] = 19;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v29, v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  v13 = *a3;
  v14 = *a4;
  v15 = *(_QWORD *)a5;
  v16 = *(unsigned int *)(a5 + 8);
  v27 = v14;
  v28 = v13;
  v17 = mlir::ValueRange::ValueRange(v33, (uint64_t)&v28, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v17, (uint64_t)v31, v33[0], v33[1], (uint64_t)&v27, 1, 0, 0);
  ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, v15, v16);
  v19 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v31);
  v30 = 261;
  v29[0] = (uint64_t)"reassociation";
  v29[1] = 13;
  v20 = mlir::StringAttr::get(v19, (mlir::MLIRContext *)v29);
  ZinMirCacheTensors::ZinMirCacheTensors(v25, v20, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)&v32, v25[0], v25[1]);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

_QWORD *mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::~ComposeExpandOfCollapseOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::~ComposeExpandOfCollapseOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DefiningOp;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  ZinIrHalH13g *v31;
  uint64_t v32;
  void *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t Shape;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t **v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50[2];
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  char *v54[6];
  char v55;
  void *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t **v59;
  unsigned int v60;
  _QWORD v61[17];

  v61[16] = *MEMORY[0x24BDAC8D0];
  v53 = a2;
  v59 = *(uint64_t ***)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!DefiningOp)
    return 0;
  v6 = DefiningOp;
  v7 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id;
  v9 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id ? DefiningOp : 0;
  v52 = v9;
  if (!v8)
    return 0;
  v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8) : 0;
  v51[0] = v10;
  v51[1] = v11;
  v12 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
  v13 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8) : 0;
  v50[0] = (uint64_t)v13;
  v50[1] = v14;
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
    || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    return 0;
  }
  v15 = *(_DWORD *)(v6 + 36) ? v6 - 16 : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    return 0;
  mlir::ShapedType::getShape((mlir::ShapedType *)v51);
  v18 = v17;
  mlir::ShapedType::getShape((mlir::ShapedType *)v50);
  if (v51[0] == v50[0])
    return 0;
  v20 = v19;
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v52, (uint64_t)&v59);
  mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v53, (uint64_t)&v56);
  if (v18 <= v20)
  {
    v34 = v56;
    v35 = v57;
    v36 = v59;
    v37 = v60;
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v50);
    v40 = v39;
    v41 = mlir::ShapedType::getShape((mlir::ShapedType *)v51);
    mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation((unint64_t)v34, v35, v36, v37, Shape, v40, (uint64_t)v54, v41, v42);
    if (v55)
    {
      v30 = v53;
      v49 = *(_QWORD *)(*(_QWORD *)(v52 + 72) + 24);
      v31 = mlir::OpBuilder::create<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v53 + 24), v50, &v49, (uint64_t)v54);
      goto LABEL_30;
    }
LABEL_31:
    v32 = 0;
    goto LABEL_32;
  }
  v21 = (unint64_t)v59;
  v22 = v60;
  v23 = (uint64_t **)v56;
  v24 = v57;
  v25 = mlir::ShapedType::getShape((mlir::ShapedType *)v51);
  v27 = v26;
  v28 = mlir::ShapedType::getShape((mlir::ShapedType *)v50);
  mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation(v21, v22, v23, v24, v25, v27, (uint64_t)v54, v28, v29);
  if (!v55)
    goto LABEL_31;
  v30 = v53;
  v49 = *(_QWORD *)(*(_QWORD *)(v52 + 72) + 24);
  v31 = mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v53 + 24), v50, &v49, (uint64_t)v54);
LABEL_30:
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v30, v31);
  v32 = 1;
LABEL_32:
  std::optional<llvm::SmallVector<llvm::SmallVector<long long,2u>,1u>>::~optional(v54);
  v43 = (char *)v56;
  if (v57)
  {
    v44 = 32 * v57;
    do
    {
      v45 = *(char **)&v43[v44 - 32];
      if (&v43[v44 - 16] != v45)
        free(v45);
      v44 -= 32;
    }
    while (v44);
    v43 = (char *)v56;
  }
  if (v43 != (char *)&v58)
    free(v43);
  v46 = v59;
  if (v60)
  {
    v47 = 4 * v60;
    do
    {
      v48 = (char *)v46[v47 - 4];
      if (&v46[v47 - 2] != (uint64_t **)v48)
        free(v48);
      v47 -= 4;
    }
    while (v47 * 8);
    v46 = v59;
  }
  if (v46 != v61)
    free(v46);
  return v32;
}

void mlir::ComposeExpandOfCollapseOp<mlir::memref::ExpandShapeOp,mlir::memref::CollapseShapeOp>::findCollapsingReassociation(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, unint64_t a9)
{
  uint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void **v26;
  void **v27;
  void *v28;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v42;
  uint64_t **v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[16];
  void *v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[18];

  v9 = a5;
  v53[16] = *MEMORY[0x24BDAC8D0];
  v51 = v53;
  v52 = 0x400000000;
  if (!a2)
  {
    mlir::getReassociationIndicesForCollapse(a5, a6, a8, a9, a7);
    v36 = (char *)v51;
    goto LABEL_55;
  }
  v10 = a3;
  v11 = a1;
  v42 = a1 + 32 * a2;
  v43 = &a3[4 * a4];
LABEL_4:
  if (v10 != v43)
  {
    v12 = *(unsigned int *)(v11 + 8);
    v13 = v9 + 8 * **(_QWORD **)v11;
    v14 = **v10;
    v15 = *((unsigned int *)v10 + 2);
    v16 = a8 + 8 * v14;
    if ((_DWORD)v12 == (_DWORD)v15)
    {
      if (memcmp((const void *)(v9 + 8 * **(_QWORD **)v11), (const void *)(a8 + 8 * v14), 8 * v12))
        goto LABEL_49;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::push_back((uint64_t)&v51, v11);
    }
    mlir::getReassociationIndicesForCollapse(v13, v12, v16, v15, (uint64_t)&v47);
    if (!v50)
    {
LABEL_49:
      *(_BYTE *)a7 = 0;
      *(_BYTE *)(a7 + 48) = 0;
      v36 = (char *)v51;
      v37 = v52;
      if (!(_DWORD)v52)
        goto LABEL_55;
      goto LABEL_50;
    }
    v17 = (char *)v47;
    if (!v48)
      goto LABEL_42;
    v18 = (char *)v47 + 32 * v48;
    while (1)
    {
      v44 = v46;
      v45 = 0x200000000;
      v19 = *((unsigned int *)v17 + 2);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = *(uint64_t **)v17;
        v22 = 8 * v19;
        do
        {
          v23 = *v21;
          v24 = **(_QWORD **)v11;
          if (v20 >= HIDWORD(v45))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v20 + 1, 8);
            v20 = v45;
          }
          *((_QWORD *)v44 + v20) = v24 + v23;
          v20 = v45 + 1;
          LODWORD(v45) = v45 + 1;
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)v51;
      if (v52 >= HIDWORD(v52))
      {
        v32 = v52 + 1;
        if (v51 <= &v44 && (char *)v51 + 32 * v52 > (char *)&v44)
        {
          v33 = (char *)&v44 - (_BYTE *)v51;
          llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow((uint64_t)&v51, v32);
          v25 = (char *)v51;
          v26 = (void **)((char *)v51 + v33);
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::grow((uint64_t)&v51, v32);
          v26 = &v44;
          v25 = (char *)v51;
        }
      }
      else
      {
        v26 = &v44;
      }
      v27 = (void **)&v25[32 * v52];
      v28 = v27 + 2;
      *v27 = v27 + 2;
      v27[1] = (void *)0x200000000;
      v29 = *((unsigned int *)v26 + 2);
      if (v27 == v26 || v29 == 0)
        goto LABEL_29;
      if (v29 < 3)
        break;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v27, v27 + 2, *((unsigned int *)v26 + 2), 8);
      v31 = *((unsigned int *)v26 + 2);
      if ((_DWORD)v31)
      {
        v28 = *v27;
LABEL_27:
        memcpy(v28, *v26, 8 * v31);
      }
      *((_DWORD *)v27 + 2) = v29;
LABEL_29:
      LODWORD(v52) = v52 + 1;
      if (v44 != v46)
        free(v44);
      v17 += 32;
      if (v17 == v18)
      {
        v9 = a5;
        if (v50)
        {
          v17 = (char *)v47;
          if (v48)
          {
            v34 = 32 * v48;
            do
            {
              v35 = *(char **)&v17[v34 - 32];
              if (&v17[v34 - 16] != v35)
                free(v35);
              v34 -= 32;
            }
            while (v34);
            v17 = (char *)v47;
            v9 = a5;
          }
LABEL_42:
          if (v17 != (char *)&v49)
            free(v17);
        }
        v11 += 32;
        v10 += 4;
        if (v11 == v42)
          goto LABEL_45;
        goto LABEL_4;
      }
    }
    v31 = *((unsigned int *)v26 + 2);
    goto LABEL_27;
  }
LABEL_45:
  *(_QWORD *)a7 = a7 + 16;
  *(_QWORD *)(a7 + 8) = 0x100000000;
  if ((_DWORD)v52)
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=(a7, (uint64_t)&v51);
  *(_BYTE *)(a7 + 48) = 1;
  v36 = (char *)v51;
  v37 = v52;
  if ((_DWORD)v52)
  {
LABEL_50:
    v38 = 32 * v37;
    do
    {
      v39 = *(char **)&v36[v38 - 32];
      if (&v36[v38 - 16] != v39)
        free(v39);
      v38 -= 32;
    }
    while (v38);
    v36 = (char *)v51;
  }
LABEL_55:
  if (v36 != (char *)v53)
    free(v36);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t ReassociationIndicesAttribute;
  mlir::StringAttr *v19;
  uint64_t v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];
  __int16 v30;
  _QWORD v31[14];
  uint64_t v32;
  unint64_t v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.collapse_shape", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"memref.collapse_shape";
    v29[3] = 21;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v29, v25, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  v13 = *a3;
  v14 = *a4;
  v15 = *(_QWORD *)a5;
  v16 = *(unsigned int *)(a5 + 8);
  v27 = v14;
  v28 = v13;
  v17 = mlir::ValueRange::ValueRange(v33, (uint64_t)&v28, 1uLL);
  mlir::arith::CmpIOp::build((uint64_t)v17, (uint64_t)v31, v33[0], v33[1], (uint64_t)&v27, 1, 0, 0);
  ReassociationIndicesAttribute = mlir::getReassociationIndicesAttribute(a1, v15, v16);
  v19 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v31);
  v30 = 261;
  v29[0] = (uint64_t)"reassociation";
  v29[1] = 13;
  v20 = mlir::StringAttr::get(v19, (mlir::MLIRContext *)v29);
  ZinMirCacheTensors::ZinMirCacheTensors(v25, v20, ReassociationIndicesAttribute);
  mlir::NamedAttrList::push_back((uint64_t)&v32, v25[0], v25[1]);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v22;
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.collapse_shape", 21, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C04FC00;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>]";
    v25 = 117;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.collapse_shape", 21, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C04F888;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp"
          ", mlir::memref::ExpandShapeOp, mlir::memref::CastOp>]";
    v25 = 163;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<CollapseShapeOpMemRefCastFolder,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.collapse_shape", 21, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C0255F0;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CollapseShapeOpMemRefCastFolder]";
    v25 = 81;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>::~ComposeReassociativeReshapeOps(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CollapseShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CollapseShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::CollapseShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::ComposeReassociativeReshapeOps<mlir::memref::CollapseShapeOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t NextResultAtOffset;
  void *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  ZinIrHalH13g *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v30 = a2;
  v34 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v34);
  if (result)
  {
    v6 = result;
    v7 = *(void **)(*(_QWORD *)(result + 48) + 16);
    v8 = v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id;
    if (v7 == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id)
      v9 = result;
    else
      v9 = 0;
    v29 = v9;
    if (!v8)
      return 0;
    v10 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    v11 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8) : 0;
    v28[0] = (uint64_t)v11;
    v28[1] = v12;
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
      || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    {
      return 0;
    }
    v13 = *(_DWORD *)(a2 + 36) ? a2 - 16 : 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0);
    if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
      return 0;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v29, (uint64_t)&v34);
    v15 = v34;
    v16 = v35;
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v30, (uint64_t)&v31);
    mlir::composeReassociationIndices((uint64_t)v15, v16, (uint64_t)v31, v32, (uint64_t)&v37);
    v17 = (char *)v31;
    if (v32)
    {
      v18 = 32 * v32;
      do
      {
        v19 = *(char **)&v17[v18 - 32];
        if (&v17[v18 - 16] != v19)
          free(v19);
        v18 -= 32;
      }
      while (v18);
      v17 = (char *)v31;
    }
    if (v17 != (char *)&v33)
      free(v17);
    v20 = (char *)v34;
    if (v35)
    {
      v21 = 32 * v35;
      do
      {
        v22 = *(char **)&v20[v21 - 32];
        if (&v20[v21 - 16] != v22)
          free(v22);
        v21 -= 32;
      }
      while (v21);
      v20 = (char *)v34;
    }
    if (v20 != (char *)&v36)
      free(v20);
    if (!v40)
    {
      return 0;
    }
    else
    {
      v23 = v30;
      v34 = *(void **)(*(_QWORD *)(v29 + 72) + 24);
      v24 = mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v30 + 24), v28, (uint64_t *)&v34, (uint64_t)&v37);
      (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v23, v24);
      if (v40)
      {
        v25 = v37;
        if (v38)
        {
          v26 = 32 * v38;
          do
          {
            v27 = *(char **)&v25[v26 - 32];
            if (&v25[v26 - 16] != v27)
              free(v27);
            v26 -= 32;
          }
          while (v26);
          v25 = v37;
        }
        if (v25 != (char *)&v39)
          free(v25);
      }
      return 1;
    }
  }
  return result;
}

_QWORD *mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>::~ComposeCollapseOfExpandOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>::~ComposeCollapseOfExpandOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::ComposeCollapseOfExpandOp<mlir::memref::CollapseShapeOp,mlir::memref::ExpandShapeOp,mlir::memref::CastOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t DefiningOp;
  void *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  char *v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  ZinIrHalH13g *v31;
  uint64_t v32;
  mlir::OpBuilder *v33;
  ZinIrHalH13g *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44[2];
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[16];
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  char *v57;
  uint64_t v58;
  _QWORD v59[18];

  v4 = a2;
  v59[16] = *MEMORY[0x24BDAC8D0];
  v47 = a2;
  v57 = *(char **)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v57);
  if (!DefiningOp)
    return 0;
  v6 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v7 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id;
  v8 = v6 == &mlir::detail::TypeIDResolver<mlir::memref::ExpandShapeOp,void>::id ? DefiningOp : 0;
  v46 = v8;
  if (!v7)
    return 0;
  v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
  {
    v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    v4 = v47;
  }
  else
  {
    v10 = 0;
  }
  v45[0] = v9;
  v45[1] = v10;
  v11 = *(_DWORD *)(v4 + 36) ? v4 - 16 : 0;
  v12 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v11, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  v13 = v12 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8) : 0;
  v44[0] = (uint64_t)v12;
  v44[1] = v13;
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0
    || (mlir::hasNonIdentityLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
  {
    return 0;
  }
  v14 = *(_DWORD *)(v46 + 36) ? v46 - 16 : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  if ((mlir::hasNonIdentityLayout(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) & 1) != 0)
    return 0;
  mlir::ShapedType::getShape((mlir::ShapedType *)v45);
  v17 = v16;
  mlir::ShapedType::getShape((mlir::ShapedType *)v44);
  if (v45[0] == v44[0])
    return 0;
  v19 = v18;
  v57 = (char *)v59;
  v58 = 0x400000000;
  v54 = v56;
  v55 = 0x400000000;
  if (v17 <= v18)
  {
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v47, (uint64_t)&v51);
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v57, (uint64_t)&v51);
    llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v51);
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v46, (uint64_t)&v51);
  }
  else
  {
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v46, (uint64_t)&v51);
    llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v57, (uint64_t)&v51);
    llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v51);
    mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v47, (uint64_t)&v51);
  }
  llvm::SmallVectorImpl<llvm::SmallVector<long long,2u>>::operator=((uint64_t)&v54, (uint64_t)&v51);
  llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>::~SmallVector((char **)&v51);
  v51 = v53;
  v52 = 0x400000000;
  if (!(_DWORD)v55)
    goto LABEL_43;
  v22 = 0;
  v23 = (char *)v54;
  v24 = (char *)v54 + 32 * v55;
  do
  {
    v25 = 0;
    v48 = v50;
    v49 = 0x200000000;
    v26 = 32 * v22;
    while (1)
    {
      if (v22 >= v58)
      {
LABEL_36:
        llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,2u>,false>::push_back((uint64_t)&v51, (unint64_t)&v48);
        v28 = 1;
        v29 = v48;
        if (v48 == v50)
          goto LABEL_38;
LABEL_37:
        free(v29);
        goto LABEL_38;
      }
      v27 = *(_QWORD *)(*(_QWORD *)&v57[v26] + 8 * *(unsigned int *)&v57[v26 + 8] - 8);
      if (v27 > *(_QWORD *)(*(_QWORD *)v23 + 8 * *((unsigned int *)v23 + 2) - 8))
        break;
      if (v25 >= HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v25 + 1, 8);
        v25 = v49;
      }
      *((_QWORD *)v48 + v25) = v22;
      v25 = v49 + 1;
      LODWORD(v49) = v49 + 1;
      v26 += 32;
      ++v22;
      if (v27 == *(_QWORD *)(*(_QWORD *)v23 + 8 * *((unsigned int *)v23 + 2) - 8))
        goto LABEL_36;
    }
    v28 = 0;
    v29 = v48;
    if (v48 != v50)
      goto LABEL_37;
LABEL_38:
    if ((v28 & 1) == 0)
    {
      v20 = 0;
      goto LABEL_51;
    }
    v23 += 32;
  }
  while (v23 != v24);
LABEL_43:
  if (v17 <= v19)
  {
    v32 = v47;
    v33 = (mlir::OpBuilder *)(a3 + 1);
    v48 = *(void **)(*(_QWORD *)(v46 + 72) + 24);
    if (v17 >= v19)
      v34 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>(v33, *(_QWORD *)(v47 + 24), v44, (uint64_t *)&v48);
    else
      v34 = mlir::OpBuilder::create<mlir::memref::ExpandShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>((uint64_t *)v33, *(_QWORD *)(v47 + 24), v44, (uint64_t *)&v48, (uint64_t)&v51);
    (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v32, v34);
  }
  else
  {
    v30 = v47;
    v48 = *(void **)(*(_QWORD *)(v46 + 72) + 24);
    v31 = mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::ShapedType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,1u> &>(a3 + 1, *(_QWORD *)(v47 + 24), v44, (uint64_t *)&v48, (uint64_t)&v51);
    (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v30, v31);
  }
  v20 = 1;
LABEL_51:
  v35 = (char *)v51;
  if ((_DWORD)v52)
  {
    v36 = 32 * v52;
    do
    {
      v37 = *(char **)&v35[v36 - 32];
      if (&v35[v36 - 16] != v37)
        free(v37);
      v36 -= 32;
    }
    while (v36);
    v35 = (char *)v51;
  }
  if (v35 != v53)
    free(v35);
  v38 = (char *)v54;
  if ((_DWORD)v55)
  {
    v39 = 32 * v55;
    do
    {
      v40 = *(char **)&v38[v39 - 32];
      if (&v38[v39 - 16] != v40)
        free(v40);
      v39 -= 32;
    }
    while (v39);
    v38 = (char *)v54;
  }
  if (v38 != v56)
    free(v38);
  v41 = v57;
  if ((_DWORD)v58)
  {
    v42 = 32 * v58;
    do
    {
      v43 = *(char **)&v41[v42 - 32];
      if (&v41[v42 - 16] != v43)
        free(v43);
      v42 -= 32;
    }
    while (v42);
    v41 = v57;
  }
  if (v41 != (char *)v59)
    free(v41);
  return v20;
}

void CollapseShapeOpMemRefCastFolder::~CollapseShapeOpMemRefCastFolder(CollapseShapeOpMemRefCastFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t CollapseShapeOpMemRefCastFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x24BDAC8D0];
  v4 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
  v27 = a2;
  v28 = v4;
  result = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (result)
  {
    v6 = *(void **)(*(_QWORD *)(result + 48) + 16);
    if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
      v7 = result;
    else
      v7 = 0;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    {
      result = mlir::memref::CastOp::canFoldIntoConsumerOp(result);
      if ((_DWORD)result)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
        mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v27, (uint64_t)&v28);
        v9 = mlir::memref::CollapseShapeOp::computeCollapsedType(v8, (uint64_t)v28, v29);
        v10 = (char *)v28;
        if (v29)
        {
          v11 = 32 * v29;
          do
          {
            v12 = *(char **)&v10[v11 - 32];
            if (&v10[v11 - 16] != v12)
              free(v12);
            v11 -= 32;
          }
          while (v11);
          v10 = (char *)v28;
        }
        if (v10 != (char *)v30)
          free(v10);
        if (*(_DWORD *)(v27 + 36))
          v13 = v27 - 16;
        else
          v13 = 0;
        if (v9 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          v20 = v27;
          (*(void (**)(uint64_t *, uint64_t))(*a3 + 72))(a3, v27);
          v21 = *(uint64_t **)(v27 + 72);
          v22 = *(uint64_t **)(*(_QWORD *)(v7 + 72) + 24);
          v23 = (uint64_t *)v21[1];
          if (v23)
          {
            *v23 = *v21;
            if (*v21)
              *(_QWORD *)(*v21 + 8) = v21[1];
          }
          v21[3] = (uint64_t)v22;
          v21[1] = (uint64_t)v22;
          v24 = *v22;
          *v21 = *v22;
          if (v24)
            *(_QWORD *)(v24 + 8) = v21;
          *v22 = (uint64_t)v21;
          (*(void (**)(uint64_t *, uint64_t))(*a3 + 80))(a3, v20);
        }
        else
        {
          v14 = *(_QWORD *)(v27 + 24);
          v25 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 24);
          mlir::memref::CollapseShapeOp::getReassociationIndices((mlir::memref::CollapseShapeOp *)&v27, (uint64_t)&v28);
          v26 = (uint64_t)mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::detail::TypedValue<mlir::BaseMemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>>(a3 + 1, v14, &v25, (uint64_t)&v28)- 16;
          v15 = (char *)v28;
          if (v29)
          {
            v16 = 32 * v29;
            do
            {
              v17 = *(char **)&v15[v16 - 32];
              if (&v15[v16 - 16] != v17)
                free(v17);
              v16 -= 32;
            }
            while (v16);
            v15 = (char *)v28;
          }
          if (v15 != (char *)v30)
            free(v15);
          v18 = v27;
          v28 = (void *)(*(_QWORD *)(v27 - 8) & 0xFFFFFFFFFFFFFFF8);
          v19 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(v27 + 24), (uint64_t *)&v28, &v26);
          (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a3 + 32))(a3, v18, v19);
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::CollapseShapeOp,mlir::detail::TypedValue<mlir::BaseMemRefType>,llvm::SmallVector<llvm::SmallVector<long long,2u>,4u>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.collapse_shape", (const unsigned __int8 *)0x15, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"memref.collapse_shape";
    v17[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::memref::CollapseShapeOp::build(a1, (mlir::Attribute *)v19, *a3, *(_QWORD *)a4, *(unsigned int *)(a4 + 8), 0, 0);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::RewritePatternSet::addImpl<mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v26, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"memref.subview", 14, (__int16)v26, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C0506E0;
  v25 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir:"
          ":memref::SubViewOp, SubViewReturnTypeCanonicalizer, SubViewCanonicalizer>]";
    v27 = 184;
    v18 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
    if (v27 >= v18)
      v19 = v18;
    else
      v19 = v27;
    v20 = &v26[v19];
    v21 = v27 - v19;
    if (v27 - v19 >= 0x12)
      v22 = 18;
    else
      v22 = v27 - v19;
    v23 = &v20[v22];
    v24 = v21 - v22;
    if (v24 >= v24 - 1)
      --v24;
    *(_QWORD *)(v8 + 64) = v23;
    *(_QWORD *)(v8 + 72) = v24;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v25);
    v15 = v25;
    a1[2] = v14;
    v25 = 0;
    if (v15)
    {
      v16 = *(void **)(v15 + 80);
      if (v16 != (void *)(v15 + 96))
        free(v16);
      v17 = *(void **)(v15 + 32);
      if (v17 != (void *)(v15 + 48))
        free(v17);
      MEMORY[0x20BD002F8](v15, 0x10D1C403AF06869);
    }
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>::~OpWithOffsetSizesAndStridesConstantArgumentFolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>::~OpWithOffsetSizesAndStridesConstantArgumentFolder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::SubViewOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::SubViewOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::SubViewOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpWithOffsetSizesAndStridesConstantArgumentFolder<mlir::memref::SubViewOp,SubViewReturnTypeCanonicalizer,SubViewCanonicalizer>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3)
{
  int v4;
  _BYTE *v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  ZinIrHalH13g *v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrHalH13g *v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  void *__dst;
  uint64_t v28;
  _BYTE v29[48];
  void *__src;
  uint64_t v31;
  _BYTE v32[48];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v22, (uint64_t)&__src);
  v33 = v35;
  v34 = 0x600000000;
  v4 = v31;
  v5 = __src;
  if ((_DWORD)v31)
  {
    if (__src == v32)
    {
      v6 = v31;
      if (v31 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, v35, v31, 8),
            v6 = v31,
            v5 = __src,
            (_DWORD)v31))
      {
        memcpy(v33, v5, 8 * v6);
        v5 = __src;
      }
      LODWORD(v34) = v4;
    }
    else
    {
      v33 = __src;
      v34 = v31;
      __src = v32;
      HIDWORD(v31) = 0;
      v5 = v32;
    }
    LODWORD(v31) = 0;
  }
  if (v5 != v32)
    free(v5);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v22, (uint64_t)&__dst);
  __src = v32;
  v31 = 0x600000000;
  v7 = v28;
  v8 = __dst;
  if ((_DWORD)v28)
  {
    if (__dst == v29)
    {
      v9 = v28;
      if (v28 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v32, v28, 8),
            v9 = v28,
            v8 = __dst,
            (_DWORD)v28))
      {
        memcpy(__src, v8, 8 * v9);
        v8 = __dst;
      }
      LODWORD(v31) = v7;
    }
    else
    {
      __src = __dst;
      v31 = v28;
      __dst = v29;
      HIDWORD(v28) = 0;
      v8 = v29;
    }
    LODWORD(v28) = 0;
  }
  if (v8 != v29)
    free(v8);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v22, (uint64_t)&v24);
  __dst = v29;
  v28 = 0x600000000;
  v10 = v25;
  v11 = v24;
  if ((_DWORD)v25)
  {
    if (v24 == v26)
    {
      v12 = v25;
      if (v25 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v29, v25, 8),
            v12 = v25,
            v11 = v24,
            (_DWORD)v25))
      {
        memcpy(__dst, v11, 8 * v12);
        v11 = v24;
      }
      LODWORD(v28) = v10;
    }
    else
    {
      __dst = v24;
      v28 = v25;
      v24 = v26;
      HIDWORD(v25) = 0;
      v11 = v26;
    }
    LODWORD(v25) = 0;
  }
  if (v11 != v26)
    free(v11);
  if ((mlir::foldDynamicIndexList((uint64_t)&v33, 1)
     || mlir::foldDynamicIndexList((uint64_t)&__src, 1)
     || mlir::foldDynamicIndexList((uint64_t)&__dst, 0))
    && (v21 = SubViewReturnTypeCanonicalizer::operator()((uint64_t)&v24, v22, v33, v34, (uint64_t *)__src, v31, (uint64_t *)__dst, v28)) != 0)
  {
    v13 = *(_QWORD *)(v22 + 24);
    v24 = *(void **)(*(_QWORD *)(v22 + 72) + 24);
    v14 = mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(a3 + 1, v13, &v21, (uint64_t *)&v24, (uint64_t)&v33, (uint64_t)&__src, (uint64_t)&__dst);
    v15 = v22;
    v24 = v14;
    if (*(_DWORD *)(v22 + 36))
      v16 = v22 - 16;
    else
      v16 = 0;
    v23 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    v17 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(v15 + 24), (uint64_t *)&v23, &v24);
    (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v15, v17);
    v18 = 1;
    v19 = __dst;
    if (__dst != v29)
      goto LABEL_39;
  }
  else
  {
    v18 = 0;
    v19 = __dst;
    if (__dst != v29)
LABEL_39:
      free(v19);
  }
  if (__src != v32)
    free(__src);
  if (v33 != v35)
    free(v33);
  return v18;
}

uint64_t SubViewReturnTypeCanonicalizer::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  mlir::AffineMap *v26;
  uint64_t RHS;
  mlir::MLIRContext *Context;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t LayerSchedule;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[48];
  void *v40;
  uint64_t v41;
  _BYTE v42[48];
  void *v43;
  uint64_t v44[8];

  v44[7] = *MEMORY[0x24BDAC8D0];
  v36 = a2;
  v9 = mlir::memref::SubViewOp::inferResultType(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, a3, a4, a5, a6, a7, a8);
  if (!v9)
    return 0;
  v35 = v9;
  mlir::memref::SubViewOp::getDroppedDims((mlir::memref::SubViewOp *)&v36, &v34);
  v10 = v34;
  if ((v34 & 1) != 0)
  {
    if (((v34 >> 1) & ~(-1 << (v34 >> 58))) != 0)
    {
LABEL_10:
      mlir::getStridesAndOffset(v35, (uint64_t)&v43);
      v40 = v42;
      v41 = 0x600000000;
      v37 = v39;
      v38 = 0x600000000;
      if (a6 < 1)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        if ((v10 & 1) != 0)
        {
          do
          {
            if (((((v10 >> 1) & ~(-1 << (v10 >> 58))) >> v16) & 1) == 0)
            {
              v21 = *((_QWORD *)v43 + v16);
              v22 = v38;
              if (v38 >= (unint64_t)HIDWORD(v38))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v38 + 1, 8);
                v22 = v38;
              }
              *((_QWORD *)v37 + v22) = v21;
              LODWORD(v38) = v38 + 1;
              v23 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35) + 8 * v16);
              v24 = v41;
              if (v41 >= (unint64_t)HIDWORD(v41))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v42, v41 + 1, 8);
                v24 = v41;
              }
              *((_QWORD *)v40 + v24) = v23;
              v15 = v41 + 1;
              LODWORD(v41) = v41 + 1;
            }
            ++v16;
          }
          while (a6 != v16);
        }
        else
        {
          do
          {
            if (((*(_QWORD *)(*(_QWORD *)v10 + 8 * (v16 >> 6)) >> v16) & 1) == 0)
            {
              v17 = *((_QWORD *)v43 + v16);
              v18 = v38;
              if (v38 >= (unint64_t)HIDWORD(v38))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v38 + 1, 8);
                v18 = v38;
              }
              *((_QWORD *)v37 + v18) = v17;
              LODWORD(v38) = v38 + 1;
              v19 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35) + 8 * v16);
              v20 = v41;
              if (v41 >= (unint64_t)HIDWORD(v41))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v42, v41 + 1, 8);
                v20 = v41;
              }
              *((_QWORD *)v40 + v20) = v19;
              v15 = v41 + 1;
              LODWORD(v41) = v41 + 1;
            }
            ++v16;
          }
          while (a6 != v16);
        }
      }
      v25 = (uint64_t *)v40;
      v26 = (mlir::AffineMap *)v15;
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v35);
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v35);
      v29 = (_QWORD *)mlir::StridedLayoutAttr::get(Context, v44[6], (uint64_t)v37, v38);
      v30 = v29;
      if (v29)
        v31 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v29 + 8);
      else
        v31 = 0;
      LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v35);
      v14 = mlir::MemRefType::get(v25, v26, RHS, v30, v31, LayerSchedule);
      if (v37 != v39)
        free(v37);
      if (v40 != v42)
        free(v40);
      if (v43 != v44)
        free(v43);
      goto LABEL_38;
    }
  }
  else
  {
    v11 = *(unsigned int *)(v34 + 8);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD **)v34;
      v13 = 8 * v11;
      while (!*v12)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_27;
      }
      goto LABEL_10;
    }
  }
LABEL_27:
  v14 = v35;
LABEL_38:
  if ((v10 & 1) == 0 && v10)
  {
    if (*(_QWORD *)v10 != v10 + 16)
      free(*(void **)v10);
    MEMORY[0x20BD002F8](v10, 0x1080C40EF38A13ELL);
  }
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::MemRefType>,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &,llvm::SmallVector<mlir::OpFoldResult,6u> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.subview", (const unsigned __int8 *)0xE, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"memref.subview";
    v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::memref::SubViewOp::build(a1, (uint64_t)v25, *a3, *a4, *(uint64_t **)a5, *(unsigned int *)(a5 + 8), *(uint64_t **)a6, *(unsigned int *)(a6 + 8), *(uint64_t **)a7, *(unsigned int *)(a7 + 8), 0, 0);
  v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

void `anonymous namespace'::SubViewOpMemRefCastFolder::~SubViewOpMemRefCastFolder(_anonymous_namespace_::SubViewOpMemRefCastFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SubViewOpMemRefCastFolder::matchAndRewrite(uint64_t DefiningOp, uint64_t a2, mlir::MLIRContext **a3)
{
  uint64_t v4;
  void **v5;
  uint64_t *v6;
  mlir::Operation *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int8x8_t *v21;
  unint64_t v22;
  int v23;
  int8x8_t *v24;
  uint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  int32x4_t v30;
  uint64_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x8_t *v37;
  int8x8_t v38;
  uint8x8_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t Value;
  uint64_t v44;
  uint64_t v45;
  uint64_t AttrData;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  mlir::AffineMap *v68;
  uint64_t RHS;
  mlir::MLIRContext *Context;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t LayerSchedule;
  uint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  ZinIrHalH13g *v92;
  uint64_t v93;
  mlir::MLIRContext **v94;
  uint64_t v95;
  uint64_t RawStringData;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _BYTE v112[48];
  uint64_t *v113;
  uint64_t v114;
  _QWORD v115[8];

  v115[6] = *MEMORY[0x24BDAC8D0];
  v95 = a2;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v4 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v4)
    {
      v5 = (void **)(*(_QWORD *)(a2 + 72) + 24);
      while (1)
      {
        v6 = (uint64_t *)*v5;
        ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)DefiningOp);
        v113 = v6;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v113);
        if (DefiningOp)
        {
          DefiningOp = mlir::arith::ConstantIndexOp::classof(DefiningOp, v7);
          if ((DefiningOp & 1) != 0)
            return 0;
        }
        v5 += 4;
        if (!--v4)
        {
          a2 = v95;
          break;
        }
      }
    }
  }
  v113 = *(uint64_t **)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v113);
  if (result)
  {
    v9 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
      return 0;
    result = mlir::memref::CastOp::canFoldIntoConsumerOp(result);
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(v95 + 36))
        v10 = v95 - 16;
      else
        v10 = 0;
      v11 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v95, (uint64_t)&v107);
      v14 = (uint64_t *)v107;
      v15 = v108;
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v95, (uint64_t)&v104);
      v16 = (uint64_t *)v104;
      v17 = v105;
      mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v95, (uint64_t)&v101);
      v100 = v13;
      v99 = mlir::memref::SubViewOp::inferResultType(v13, v14, v15, v16, v17, (uint64_t *)v101, v102);
      computeMemRefRankReductionMask(&v97, v12, v11, (uint64_t)v16, v17);
      if (!(_BYTE)v98)
      {
        v25 = 0;
LABEL_70:
        v100 = v25;
        if (v101 != &v103)
          free(v101);
        if (v104 != &v106)
          free(v104);
        if (v107 != &v109)
          free(v107);
        if (!v25)
          return 0;
        v76 = *(_QWORD *)(v95 + 24);
        RawStringData = *(_QWORD *)(*(_QWORD *)(v9 + 72) + 24);
        v77 = *(unsigned int *)(v95 + 44);
        if (HIBYTE(*(_DWORD *)(v95 + 44)))
          v78 = (unsigned int *)(v95 + 16 * ((v77 >> 23) & 1) + 64);
        else
          v78 = 0;
        v79 = v78[6];
        v80 = v78[7];
        if ((v77 & 0x800000) != 0)
        {
          v81 = v80 + v79;
          v113 = (uint64_t *)(*(_QWORD *)(v95 + 72) + 32 * v79);
          v114 = v81 - v79;
          v82 = v78[8] + v81;
          v110 = (_QWORD *)(*(_QWORD *)(v95 + 72) + 32 * v81);
          v111 = v82 - v81;
          v83 = *(_QWORD *)(v95 + 72);
        }
        else
        {
          v83 = 0;
          v93 = v80 + v79;
          v113 = (uint64_t *)(32 * v79);
          v114 = v93 - v79;
          v82 = v78[8] + v93;
          v110 = (_QWORD *)(32 * v93);
          v111 = v82 - v93;
        }
        v84 = v78[9] + v82 - v82;
        v107 = (void *)(v83 + 32 * v82);
        v108 = v84;
        v104 = *(void **)(v95 + 16 * ((v77 >> 23) & 1) + 64);
        v104 = (void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v104);
        v105 = v85;
        v86 = v95 + 16 * (((unint64_t)*(unsigned int *)(v95 + 44) >> 23) & 1) + 64;
        if (!HIBYTE(*(_DWORD *)(v95 + 44)))
          v86 = 0;
        v101 = *(void **)(v86 + 8);
        v101 = (void *)mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v101);
        v102 = v87;
        v88 = v95 + 16 * (((unint64_t)*(unsigned int *)(v95 + 44) >> 23) & 1) + 64;
        if (!HIBYTE(*(_DWORD *)(v95 + 44)))
          v88 = 0;
        v97 = *(_QWORD *)(v88 + 16);
        v97 = mlir::detail::DenseArrayAttrImpl<long long>::operator llvm::ArrayRef<long long>((uint64_t)&v97);
        v98 = v89;
        v99 = (uint64_t)mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::BaseMemRefType>,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(a3 + 1, v76, (uint64_t *)&v100, &RawStringData, (uint64_t)&v113, (uint64_t)&v110, (uint64_t)&v107, (uint64_t *)&v104, (uint64_t *)&v101, (uint64_t *)&v97)- 16;
        v90 = v95;
        if (*(_DWORD *)(v95 + 36))
          v91 = v95 - 16;
        else
          v91 = 0;
        v113 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v91, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        v92 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(v90 + 24), (uint64_t *)&v113, &v99);
        (*((void (**)(mlir::MLIRContext **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v90, v92);
        return 1;
      }
      RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v99);
      v113 = v115;
      v114 = 0x600000000;
      v110 = v112;
      v111 = 0x600000000;
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99);
      v19 = v97;
      if ((v97 & 1) != 0)
      {
        v26 = (uint8x8_t)vcnt_s8((int8x8_t)((v97 >> 1) & ~(-1 << (v97 >> 58))));
        v26.i16[0] = vaddlv_u8(v26);
        v23 = v26.i32[0];
      }
      else
      {
        v20 = *(unsigned int *)(v97 + 8);
        if ((_DWORD)v20)
        {
          v21 = *(int8x8_t **)v97;
          v22 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v22 >= 7)
          {
            v27 = v22 + 1;
            v28 = (v22 + 1) & 0x3FFFFFFFFFFFFFF8;
            v24 = &v21[v28];
            v29 = (int8x16_t *)&v21[4];
            v30 = 0uLL;
            v31 = v28;
            v32 = 0uLL;
            do
            {
              v33 = v29[-2];
              v34 = v29[-1];
              v35 = *v29;
              v36 = v29[1];
              v29 += 4;
              v30 = vaddq_s32(v30, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v33)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v34))))));
              v32 = vaddq_s32(v32, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v35)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v36))))));
              v31 -= 8;
            }
            while (v31);
            v23 = vaddvq_s32(vaddq_s32(v32, v30));
            if (v27 == v28)
              goto LABEL_29;
          }
          else
          {
            v23 = 0;
            v24 = *(int8x8_t **)v97;
          }
          v37 = &v21[v20];
          do
          {
            v38 = *v24++;
            v39 = (uint8x8_t)vcnt_s8(v38);
            v39.i16[0] = vaddlv_u8(v39);
            v23 += v39.i32[0];
          }
          while (v24 != v37);
        }
        else
        {
          v23 = 0;
        }
      }
LABEL_29:
      v40 = (v18 - v23);
      if (HIDWORD(v114) < v40)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v115, v40, 8);
      v94 = a3;
      if (HIDWORD(v111) < v40)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, v40, 8);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99);
      v42 = v41;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99);
      v45 = v44;
      AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&RawStringData);
      if (v42 && v45 && v47)
      {
        v48 = AttrData;
        v49 = 8 * v47;
        v50 = 8 * v45;
        v51 = 0;
        if ((v19 & 1) != 0)
        {
          v59 = v49 - 8;
          v60 = v50 - 8;
          v61 = v42 - 1;
          do
          {
            if (((((v19 >> 1) & ~(-1 << (v19 >> 58))) >> v51) & 1) == 0)
            {
              v62 = *(_QWORD *)(Value + 8 * v51);
              v63 = v114;
              if (v114 >= (unint64_t)HIDWORD(v114))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v115, v114 + 1, 8);
                v63 = v114;
              }
              v113[v63] = v62;
              LODWORD(v114) = v114 + 1;
              v64 = *(_QWORD *)(v48 + 8 * v51);
              v65 = v111;
              if (v111 >= (unint64_t)HIDWORD(v111))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, v111 + 1, 8);
                v65 = v111;
              }
              v110[v65] = v64;
              LODWORD(v111) = v111 + 1;
            }
            if (v61 == v51)
              break;
            if (!v60)
              break;
            ++v51;
            v66 = v59;
            v59 -= 8;
            v60 -= 8;
          }
          while (v66);
        }
        else
        {
          v52 = v49 - 8;
          v53 = v50 - 8;
          do
          {
            if (((*(_QWORD *)(*(_QWORD *)v19 + 8 * (v51 >> 6)) >> v51) & 1) == 0)
            {
              v54 = *(_QWORD *)(Value + 8 * v51);
              v55 = v114;
              if (v114 >= (unint64_t)HIDWORD(v114))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, v115, v114 + 1, 8);
                v55 = v114;
              }
              v113[v55] = v54;
              LODWORD(v114) = v114 + 1;
              v56 = *(_QWORD *)(v48 + 8 * v51);
              v57 = v111;
              if (v111 >= (unint64_t)HIDWORD(v111))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, v111 + 1, 8);
                v57 = v111;
              }
              v110[v57] = v56;
              LODWORD(v111) = v111 + 1;
            }
            if (v42 - 1 == v51)
              break;
            if (!v53)
              break;
            ++v51;
            v58 = v52;
            v52 -= 8;
            v53 -= 8;
          }
          while (v58);
        }
      }
      v67 = v113;
      v68 = (mlir::AffineMap *)v114;
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v99);
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v100);
      v71 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&RawStringData);
      v72 = (_QWORD *)mlir::StridedLayoutAttr::get(Context, v71, (uint64_t)v110, v111);
      v73 = v72;
      if (v72)
        v74 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v72 + 8);
      else
        v74 = 0;
      LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&v99);
      v25 = mlir::MemRefType::get(v67, v68, RHS, v73, v74, LayerSchedule);
      if (v110 != (_QWORD *)v112)
        free(v110);
      a3 = v94;
      if (v113 != v115)
        free(v113);
      if ((v19 & 1) == 0 && v19)
      {
        if (*(_QWORD *)v19 != v19 + 16)
          free(*(void **)v19);
        MEMORY[0x20BD002F8](v19, 0x1080C40EF38A13ELL);
      }
      goto LABEL_70;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::SubViewOp,mlir::MemRefType &,mlir::detail::TypedValue<mlir::BaseMemRefType>,mlir::OperandRange,mlir::OperandRange,mlir::OperandRange,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>,llvm::ArrayRef<long long>>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  ZinIrHalH13g *v23;
  ZinIrHalH13g *v24;
  uint64_t v26;
  const char *v27;
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;
  unint64_t v31[2];
  unint64_t v32[2];
  unint64_t v33[2];
  _QWORD v34[40];

  v34[38] = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.subview", (const unsigned __int8 *)0xE, Context);
  if (!v20)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"memref.subview";
    v29[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v19);
  v21 = *a3;
  v22 = *a4;
  mlir::ValueRange::ValueRange(v33, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  mlir::ValueRange::ValueRange(v32, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  mlir::ValueRange::ValueRange(v31, *(_QWORD *)a7, *(_QWORD *)(a7 + 8));
  mlir::memref::SubViewOp::build(a1, (uint64_t)v34, v21, v22, v33[0], v33[1], v32[0], v32[1], v31[0], v31[1], *a8, a8[1], *a9, a9[1], *a10, a10[1]);
  v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((_QWORD *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id)
    v24 = v23;
  else
    v24 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

void `anonymous namespace'::TrivialSubViewOpFolder::~TrivialSubViewOpFolder(_anonymous_namespace_::TrivialSubViewOpFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::TrivialSubViewOpFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t ConstantIntValue;
  char v12;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t Value;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  ZinIrHalH13g *v30;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  _BYTE v36[32];
  void *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  _QWORD v42[5];

  v42[4] = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
  v6 = v5;
  if (*(_DWORD *)(a2 + 36))
    v7 = a2 - 16;
  else
    v7 = 0;
  v37 = (void *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37);
  if (v6 != v8)
    return 0;
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedOffsets((mlir::memref::ReinterpretCastOp *)&v33, (uint64_t)&v40);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedSizes((mlir::memref::ReinterpretCastOp *)&v33, (uint64_t)&v37);
  mlir::detail::OffsetSizeAndStrideOpInterfaceTrait<mlir::memref::ReinterpretCastOp>::getMixedStrides((mlir::memref::ReinterpretCastOp *)&v33, (uint64_t)&v34);
  if (v41)
  {
    v9 = v40;
    v10 = 8 * v41;
    while (1)
    {
      ConstantIntValue = mlir::getConstantIntValue(*v9);
      if (!v12 || ConstantIntValue != 0)
        break;
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    if (v35)
    {
      v14 = (uint64_t *)v34;
      v15 = 8 * v35;
      while (1)
      {
        v16 = mlir::getConstantIntValue(*v14);
        if (!v17 || v16 != 1)
          break;
        ++v14;
        v15 -= 8;
        if (!v15)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v32);
      if (!v38)
      {
LABEL_26:
        v25 = 1;
        v26 = v34;
        if (v34 == v36)
          goto LABEL_31;
        goto LABEL_30;
      }
      v20 = (_QWORD *)Value;
      v21 = (uint64_t *)v37;
      v22 = 8 * v38;
      while (1)
      {
        v23 = mlir::getConstantIntValue(*v21);
        if (!v24 || v23 != *v20)
          break;
        ++v21;
        ++v20;
        v22 -= 8;
        if (!v22)
          goto LABEL_26;
      }
    }
  }
  v25 = 0;
  v26 = v34;
  if (v34 != v36)
LABEL_30:
    free(v26);
LABEL_31:
  if (v37 != &v39)
    free(v37);
  if (v40 != v42)
    free(v40);
  if ((_DWORD)v25)
  {
    if (*(_DWORD *)(a2 + 36))
      v28 = a2 - 16;
    else
      v28 = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v27 == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v28, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v40 = *(uint64_t **)(*(_QWORD *)(a2 + 72) + 24);
      v25 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t))(*(_QWORD *)a3 + 24))(a3, a2, &v40, 1);
    }
    else
    {
      if (*(_DWORD *)(a2 + 36))
        v29 = a2 - 16;
      else
        v29 = 0;
      v40 = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      v37 = *(void **)(*(_QWORD *)(a2 + 72) + 24);
      v30 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::detail::TypedValue<mlir::MemRefType>>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v40, (uint64_t *)&v37);
      (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v30);
      return 1;
    }
  }
  return v25;
}

void `anonymous namespace'::ViewOpShapeFolder::~ViewOpShapeFolder(_anonymous_namespace_::ViewOpShapeFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ViewOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ViewOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::memref::ViewOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::ViewOpShapeFolder::matchAndRewrite(uint64_t DefiningOp, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  mlir::Operation *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  mlir::Operation *v18;
  uint64_t v19;
  _BOOL4 v20;
  ZinIrHalH13g *v21;
  uint64_t Int;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t RHS;
  _QWORD *RawStringData;
  uint64_t v31;
  uint64_t v32;
  uint64_t LayerSchedule;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  ZinIrHalH13g *v37;
  void *v38;
  void *v39;
  uint64_t v41;
  unint64_t v42;
  ZinIrHalH13g *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Value;
  void *v47;
  uint64_t v48;
  _BYTE v49[32];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  _QWORD v53[2];
  _QWORD v54[6];

  v54[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
    return 0;
  v4 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v4)
    return 0;
  for (i = (uint64_t *)(*(_QWORD *)(a2 + 72) + 24); ; i += 4)
  {
    v7 = *i;
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)DefiningOp);
    v53[0] = v7;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v53);
    if (DefiningOp)
    {
      DefiningOp = mlir::arith::ConstantIndexOp::classof(DefiningOp, v8);
      if ((DefiningOp & 1) != 0)
        break;
    }
    if (!--v4)
      return 0;
  }
  v9 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
  v44 = 0;
  v45 = v9;
  v53[0] = v54;
  v53[1] = 0x400000000;
  if (!mlir::getStridesAndOffset(v9, (uint64_t)v53, &v44))
  {
    v28 = 0;
    v39 = (void *)v53[0];
    if ((_QWORD *)v53[0] == v54)
      return v28;
    goto LABEL_39;
  }
  v50 = v52;
  v51 = 0x400000000;
  v47 = v49;
  v48 = 0x400000000;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
  if (v10 > HIDWORD(v48))
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v10, 8);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 8 * v11;
    while (1)
    {
      while (1)
      {
        v16 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45) + v12);
        if (v16 == 0x8000000000000000)
          break;
        v24 = v48;
        if (v48 >= (unint64_t)HIDWORD(v48))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
          v24 = v48;
        }
        *((_QWORD *)v47 + v24) = v16;
        LODWORD(v48) = v48 + 1;
        v12 += 8;
        if (v14 == v12)
          goto LABEL_33;
      }
      Value = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v13 + 88);
      v17 = mlir::Value::getDefiningOp((mlir::Value *)&Value);
      if (!v17)
        break;
      v19 = v17;
      v20 = mlir::arith::ConstantIndexOp::classof(v17, v18);
      if (v20)
        v21 = (ZinIrHalH13g *)v19;
      else
        v21 = 0;
      v43 = v21;
      if (!v20)
        goto LABEL_28;
      Value = (uint64_t)mlir::arith::ConstantOp::getValue((mlir::arith::ConstantOp *)&v43);
      Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&Value);
      v23 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
        v23 = v48;
      }
      *((_QWORD *)v47 + v23) = Int;
      v15 = &v48;
LABEL_13:
      ++*(_DWORD *)v15;
      ++v13;
      v12 += 8;
      if (v14 == v12)
        goto LABEL_33;
    }
    v43 = 0;
LABEL_28:
    v25 = v48;
    if (v48 >= (unint64_t)HIDWORD(v48))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
      v25 = v48;
    }
    *((_QWORD *)v47 + v25) = 0x8000000000000000;
    LODWORD(v48) = v48 + 1;
    v26 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v13 + 88);
    v27 = v51;
    if (v51 >= (unint64_t)HIDWORD(v51))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v51 + 1, 8);
      v27 = v51;
    }
    *((_QWORD *)v50 + v27) = v26;
    v15 = &v51;
    goto LABEL_13;
  }
LABEL_33:
  Value = v45;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&Value);
  RawStringData = (_QWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&Value);
  v32 = v31;
  LayerSchedule = ZinIrHazardNode::GetLayerSchedule((ZinIrHazardNode *)&Value);
  Value = mlir::MemRefType::get((uint64_t *)v47, (mlir::AffineMap *)v48, RHS, RawStringData, v32, LayerSchedule);
  if (v45 != Value)
  {
    v34 = *(_QWORD *)(a2 + 24);
    v35 = *(_QWORD *)(a2 + 72);
    v36 = *(_QWORD *)(v35 + 24);
    v41 = *(_QWORD *)(v35 + 56);
    v42 = v36;
    v43 = mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType &,mlir::Value,mlir::detail::TypedValue<mlir::IndexType>,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)(a3 + 8), v34, &Value, (uint64_t *)&v42, &v41, (uint64_t)&v50);
    v42 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    v37 = mlir::OpBuilder::create<mlir::memref::CastOp,mlir::MemRefType,mlir::memref::AllocOp &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v42, &v43);
    (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v37);
    v28 = 1;
    v38 = v47;
    if (v47 == v49)
      goto LABEL_36;
    goto LABEL_35;
  }
  v28 = 0;
  v38 = v47;
  if (v47 != v49)
LABEL_35:
    free(v38);
LABEL_36:
  if (v50 != v52)
    free(v50);
  v39 = (void *)v53[0];
  if ((_QWORD *)v53[0] != v54)
LABEL_39:
    free(v39);
  return v28;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType &,mlir::Value,mlir::detail::TypedValue<mlir::IndexType>,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  unint64_t v29[2];
  _QWORD v30[8];
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[29];

  v34[28] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.view", (const unsigned __int8 *)0xB, Context);
  if (!v14)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"memref.view";
    v27[3] = 11;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v27, v25, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  mlir::ValueRange::ValueRange(v29, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  v18 = v29[0];
  v19 = v29[1];
  v27[0] = v16;
  v25[0] = v17;
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v27, 1);
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v25, 1);
  mlir::OperationState::addOperands((uint64_t)v30, v18, v19);
  v20 = v32;
  if (v32 >= v33)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v32 + 1, 8);
    v20 = v32;
  }
  *(_QWORD *)(v31 + 8 * v20) = v15;
  ++v32;
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v22;
}

void `anonymous namespace'::ViewOpMemrefCastFolder::~ViewOpMemrefCastFolder(_anonymous_namespace_::ViewOpMemrefCastFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::ViewOpMemrefCastFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  ZinIrHalH13g *v9;
  _QWORD v10[2];
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v14);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
      result = mlir::Value::getDefiningOp((mlir::Value *)&v13);
      if (result)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
        {
          v6 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
          v7 = *(_QWORD *)(a2 + 72);
          v11 = *(_QWORD *)(v7 + 56);
          v12 = v6;
          v8 = *(unsigned int *)(a2 + 68) - 2;
          v10[0] = v7 + 64;
          v10[1] = v8;
          v9 = mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>,mlir::OperandRange>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v12, &v13, &v11, (uint64_t)v10);
          (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v9);
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::memref::ViewOp,mlir::MemRefType,mlir::Value &,mlir::detail::TypedValue<mlir::IndexType>,mlir::OperandRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  unint64_t v29[2];
  _QWORD v30[8];
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[29];

  v34[28] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"memref.view", (const unsigned __int8 *)0xB, Context);
  if (!v14)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"memref.view";
    v27[3] = 11;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v27, v25, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  mlir::ValueRange::ValueRange(v29, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v18 = v29[0];
  v19 = v29[1];
  v27[0] = v16;
  v25[0] = v17;
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v27, 1);
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v25, 1);
  mlir::OperationState::addOperands((uint64_t)v30, v18, v19);
  v20 = v32;
  if (v32 >= v33)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v32 + 1, 8);
    v20 = v32;
  }
  *(_QWORD *)(v31 + 8 * v20) = v15;
  ++v32;
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v22;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AssumeAlignmentOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AssumeAlignmentOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AtomicRMWOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::LoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::LoadOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::AllocaOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::AllocaOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void mlir::SideEffects::AutomaticAllocationScopeResource::~AutomaticAllocationScopeResource(mlir::SideEffects::AutomaticAllocationScopeResource *this)
{
  JUMPOUT(0x20BD002F8);
}

const char *mlir::SideEffects::AutomaticAllocationScopeResource::getName(mlir::SideEffects::AutomaticAllocationScopeResource *this)
{
  return "AutomaticAllocationScope";
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::CollapseShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ExpandShapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ExpandShapeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GetGlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GetGlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v22 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v23, v15, (unint64_t)a4, *a6);
  v24 = v23;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, *a7);
  v25 = v24;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v25, v17, (unint64_t)a4, *a8);
  v26 = v25;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v26, v18, (unint64_t)a4, *a9);
  v27 = v26;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v27, v19, (unint64_t)a4, *a10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v27, v20, a4);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::GlobalOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::GlobalOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::PrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReallocOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReallocOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::ReinterpretCastOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::StoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::StoreOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::TransposeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::memref::detail::SubViewOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::memref::SubViewOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t mlir::mps::createConstantsConversionPass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = operator new();
  *(_QWORD *)v5 = &off_24BFFEC60;
  *(_DWORD *)(v5 + 472) = *(_DWORD *)a1;
  v6 = *(_QWORD *)(v5 + 936);
  if (!v6)
    goto LABEL_5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a1);
  *(_BYTE *)(v4 + 1088) = *(_BYTE *)(a1 + 4);
  v7 = *(_QWORD *)(v4 + 1144);
  if (!v7)
    goto LABEL_5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1 + 4);
  v9 = *(_BYTE *)(a1 + 5);
  v8 = a1 + 5;
  *(_BYTE *)(v4 + 1296) = v9;
  v10 = *(_QWORD *)(v4 + 1352);
  if (v10)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v8);
    *a2 = v4;
  }
  else
  {
LABEL_5:
    v12 = std::__throw_bad_function_call[abi:nn180100]();
    return mlir::mps::getConstantsConversionPattern(v12);
  }
  return result;
}

