uint64_t mlir::affine::AffinePrefetchOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  void *v27;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[7];

  v33[6] = *MEMORY[0x24BDAC8D0];
  v30 = a1;
  v31 = v33;
  v32 = 0x300000000;
  if (!*a2)
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_10;
    goto LABEL_7;
  }
  NamedAttr = mlir::Builder::getNamedAttr(&v30, (uint64_t)"isDataCache", 11, *a2);
  v5 = v4;
  v6 = v32;
  if (v32 >= HIDWORD(v32))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
    v6 = v32;
  }
  v7 = (uint64_t *)((char *)v31 + 16 * v6);
  *v7 = NamedAttr;
  v7[1] = v5;
  v8 = v32 + 1;
  LODWORD(v32) = v32 + 1;
  v9 = a2[1];
  if (v9)
  {
LABEL_7:
    v10 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"isWrite", 7, v9);
    v12 = v11;
    v13 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      v13 = v32;
    }
    v14 = (uint64_t *)((char *)v31 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
LABEL_10:
  v15 = a2[2];
  if (v15)
  {
    v16 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"localityHint", 12, v15);
    v18 = v17;
    v19 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      v19 = v32;
    }
    v20 = (uint64_t *)((char *)v31 + 16 * v19);
    *v20 = v16;
    v20[1] = v18;
    v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  v21 = a2[3];
  if (v21)
  {
    v22 = mlir::Builder::getNamedAttr(&v30, (uint64_t)"map", 3, v21);
    v24 = v23;
    v25 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      v25 = v32;
    }
    v26 = (uint64_t *)((char *)v31 + 16 * v25);
    *v26 = v22;
    v26[1] = v24;
    v8 = v32 + 1;
    LODWORD(v32) = v32 + 1;
  }
  v27 = v31;
  if (!v8)
  {
    DictionaryAttr = 0;
    if (v31 == v33)
      return DictionaryAttr;
    goto LABEL_20;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v30, (mlir::MLIRContext *)v31, v8);
  v27 = v31;
  if (v31 != v33)
LABEL_20:
    free(v27);
  return DictionaryAttr;
}

uint64_t mlir::affine::AffinePrefetchOp::getInherentAttr(int a1, _QWORD *a2, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 3uLL:
      if (memcmp(__s1, "map", __n))
        return 0;
      return a2[3];
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
      return 0;
    case 7uLL:
      if (memcmp(__s1, "isWrite", __n))
        return 0;
      return a2[1];
    case 0xBuLL:
      if (*(_QWORD *)__s1 != 0x6143617461447369 || *(_QWORD *)(__s1 + 3) != 0x6568636143617461)
        return 0;
      return *a2;
    case 0xCuLL:
      if (memcmp(__s1, "localityHint", __n))
        return 0;
      return a2[2];
    default:
      return 0;
  }
}

uint64_t mlir::affine::AffinePrefetchOp::setInherentAttr(uint64_t result, char *__s1, size_t a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 3uLL:
      result = memcmp(__s1, "map", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
            v10 = a4;
          else
            v10 = 0;
          v5[3] = v10;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 7uLL:
      result = memcmp(__s1, "isWrite", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          result = mlir::BoolAttr::classof(a4);
          if ((_DWORD)result)
            v6 = a4;
          else
            v6 = 0;
          v5[1] = v6;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xBuLL:
      if (*(_QWORD *)__s1 == 0x6143617461447369 && *(_QWORD *)(__s1 + 3) == 0x6568636143617461)
      {
        if (a4)
        {
          result = mlir::BoolAttr::classof(a4);
          if ((_DWORD)result)
            v8 = a4;
          else
            v8 = 0;
          *v5 = v8;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      break;
    case 0xCuLL:
      result = memcmp(__s1, "localityHint", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
            v9 = a4;
          else
            v9 = 0;
          v5[2] = v9;
        }
        else
        {
          v5[2] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::affine::AffinePrefetchOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  const void **v10;
  uint64_t v11;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (const void **)"isDataCache", (const char *)0xB, a3, a4))
  {
    v9 = (_QWORD *)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (const void **)"isWrite", (const char *)7, a3, a4))
    {
      v10 = (const void **)mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16));
      if (!v10
        || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v10, (const void **)"localityHint", (const char *)0xC, a3, a4))
      {
        v11 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24));
        if (!v11
          || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v11, (const void **)"map", (const char *)3, a3, a4))
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_OWORD *)operator new();
    *v3 = 0u;
    v3[1] = 0u;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if ((v4 & 1) == 0)
    {
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties]";
        v15 = 118;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v5[332];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffinePrefetchOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ODSOperands;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  const void **v41[4];
  __int16 v42;
  _QWORD v43[3];
  void *v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  void *__p;
  _QWORD *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)v3)
  {
    v41[0] = (const void **)"requires attribute 'isDataCache'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v14 = __p;
    if (__p)
    {
      v15 = v49;
      v16 = __p;
      if (v49 != __p)
      {
        do
          v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        v16 = __p;
      }
      v49 = v14;
      operator delete(v16);
    }
    v17 = v46;
    if (v46)
    {
      v18 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v21 = *--v18;
        v20 = v21;
        *v18 = 0;
        if (v21)
          MEMORY[0x20BD002D4](v20, 0x1000C8077774924);
      }
      while (v18 != v17);
LABEL_75:
      v19 = v46;
LABEL_76:
      v47 = v17;
      operator delete(v19);
    }
LABEL_77:
    if (v44 != &v45)
      free(v44);
    return v8;
  }
  v5 = *(_QWORD **)(v3 + 8);
  if (!v5)
  {
    v41[0] = (const void **)"requires attribute 'isWrite'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v22 = __p;
    if (__p)
    {
      v23 = v49;
      v24 = __p;
      if (v49 != __p)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = __p;
      }
      v49 = v22;
      operator delete(v24);
    }
    v17 = v46;
    if (v46)
    {
      v25 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v27 = *--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
          MEMORY[0x20BD002D4](v26, 0x1000C8077774924);
      }
      while (v25 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  v6 = *(const void ***)(v3 + 16);
  if (!v6)
  {
    v41[0] = (const void **)"requires attribute 'localityHint'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v28 = __p;
    if (__p)
    {
      v29 = v49;
      v30 = __p;
      if (v49 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v49 = v28;
      operator delete(v30);
    }
    v17 = v46;
    if (v46)
    {
      v31 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v33 = *--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          MEMORY[0x20BD002D4](v32, 0x1000C8077774924);
      }
      while (v31 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
  {
    v41[0] = (const void **)"requires attribute 'map'";
    v42 = 259;
    mlir::OpState::emitOpError(this, v41, (uint64_t)v43);
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    if (!v50)
      return v8;
    v34 = __p;
    if (__p)
    {
      v35 = v49;
      v36 = __p;
      if (v49 != __p)
      {
        do
          v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        v36 = __p;
      }
      v49 = v34;
      operator delete(v36);
    }
    v17 = v46;
    if (v46)
    {
      v37 = v47;
      v19 = v46;
      if (v47 == v46)
        goto LABEL_76;
      do
      {
        v39 = *--v37;
        v38 = v39;
        *v37 = 0;
        if (v39)
          MEMORY[0x20BD002D4](v38, 0x1000C8077774924);
      }
      while (v37 != v17);
      goto LABEL_75;
    }
    goto LABEL_77;
  }
  v43[0] = v2;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (const void **)"isWrite", (const char *)7, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0;
  v43[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps11(v6, (const void **)"localityHint", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0;
  v43[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v4, (const void **)"isDataCache", (const char *)0xB, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43))return 0;
  v43[0] = *this;
  if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v43)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  v8 = 1;
  ODSOperands = mlir::memref::PrefetchOp::getODSOperands((mlir::memref::PrefetchOp *)this, 1u);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    for (i = ODSOperands + 24;
          mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v12 + 1);
          i += 32)
    {
      if (v11 == ++v12)
        return v8;
    }
    return 0;
  }
  return v8;
}

uint64_t mlir::affine::AffineStoreOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void **v20;
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v22[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -2;
      v7 = 64;
LABEL_7:
      v8 = 0;
      for (i = v7 + 24;
            mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2);
            i += 32)
      {
        if (v6 == ++v8)
          return 1;
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 2;
    if (v5 != 2)
    {
      v7 = v4[9] + 64;
      goto LABEL_7;
    }
    return 1;
  }
  else
  {
    v20 = (const void **)"requires attribute 'map'";
    v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v11 = __p;
      if (__p)
      {
        v12 = v28;
        v13 = __p;
        if (v28 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v28 = v11;
        operator delete(v13);
      }
      v14 = v25;
      if (v25)
      {
        v15 = v26;
        v16 = v25;
        if (v26 != v25)
        {
          do
          {
            v18 = *--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
          }
          while (v15 != v14);
          v16 = v25;
        }
        v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24)
        free(v23);
    }
  }
  return v10;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if ((v4 & 1) == 0)
    {
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties]";
        v15 = 120;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v5[334];
    return a1[32];
  }
  return result;
}

BOOL mlir::affine::AffineVectorLoadOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void **v24;
  __int16 v25;
  _QWORD v26[3];
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v26[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -1;
      v7 = 32;
LABEL_7:
      v8 = 0;
      v9 = v7 + 24;
      while (mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 1))
      {
        ++v8;
        v9 += 32;
        if (v6 == v8)
        {
          v4 = *this;
          goto LABEL_11;
        }
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 1;
    if (v5 != 1)
    {
      v7 = v4[9] + 32;
      goto LABEL_7;
    }
LABEL_11:
    v10 = *((_DWORD *)v4 + 9);
    v11 = v4 - 2;
    if (v10)
      v12 = (uint64_t)v11;
    else
      v12 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
    return mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    v24 = (const void **)"requires attribute 'map'";
    v25 = 259;
    mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v33)
    {
      v15 = __p;
      if (__p)
      {
        v16 = v32;
        v17 = __p;
        if (v32 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v32 = v15;
        operator delete(v17);
      }
      v18 = v29;
      if (v29)
      {
        v19 = v30;
        v20 = v29;
        if (v30 != v29)
        {
          do
          {
            v22 = *--v19;
            v21 = v22;
            *v19 = 0;
            if (v22)
              MEMORY[0x20BD002D4](v21, 0x1000C8077774924);
          }
          while (v19 != v18);
          v20 = v29;
        }
        v30 = v18;
        operator delete(v20);
      }
      if (v27 != &v28)
        free(v27);
    }
  }
  return v14;
}

uint64_t mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  const void **v50[4];
  __int16 v51;
  int v52;
  const char *v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD *v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    && (v50[0] = a2, mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v50), v37 >= 1))
  {
    v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*a2 + 8);
    v55[0] = a2;
    v55[1] = v38;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55);
    return 1;
  }
  else
  {
    v51 = 261;
    v50[0] = a3;
    v50[1] = a4;
    mlir::Operation::emitOpError(a1, v50, (uint64_t)v55);
    if (v55[0])
    {
      v52 = 3;
      v53 = " #";
      v54 = 2;
      v10 = &v52;
      v11 = (char *)v56;
      if (v57 >= v58)
      {
        v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          v46 = (char *)&v52 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v11 = (char *)v56;
          v10 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v10 = &v52;
          v11 = (char *)v56;
        }
      }
      v12 = &v11[24 * v57];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      v14 = ++v57;
      if (v55[0])
      {
        v52 = 5;
        v53 = (const char *)a5;
        v15 = &v52;
        v16 = (char *)v56;
        if (v14 >= v58)
        {
          v41 = v14 + 1;
          v42 = (char *)v56 + 24 * v14 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            v47 = (char *)&v52 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v16 = (char *)v56;
            v15 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v15 = &v52;
            v16 = (char *)v56;
          }
        }
        v17 = &v16[24 * v57];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        v19 = ++v57;
        if (v55[0])
        {
          v52 = 3;
          v53 = " must be vector of any type values, but got ";
          v54 = 44;
          v20 = &v52;
          v21 = (char *)v56;
          if (v19 >= v58)
          {
            v43 = v19 + 1;
            v44 = (char *)v56 + 24 * v19 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              v48 = (char *)&v52 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v21 = (char *)v56;
              v20 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v20 = &v52;
              v21 = (char *)v56;
            }
          }
          v22 = &v21[24 * v57];
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          ++v57;
          if (v55[0])
          {
            v24 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)a2);
            v25 = (char *)v56;
            if (v57 >= v58)
            {
              v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                v49 = (char *)&v52 - (_BYTE *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v25 = (char *)v56;
                v24 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v24 = &v52;
                v25 = (char *)v56;
              }
            }
            v26 = &v25[24 * v57];
            v27 = *(_OWORD *)v24;
            *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v26 = v27;
            ++v57;
          }
        }
      }
    }
    v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v29 = __p;
      if (__p)
      {
        v30 = v63;
        v31 = __p;
        if (v63 != __p)
        {
          do
            v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
          while (v30 != v29);
          v31 = __p;
        }
        v63 = v29;
        operator delete(v31);
      }
      v32 = v60;
      if (v60)
      {
        v33 = v61;
        v34 = v60;
        if (v61 != v60)
        {
          do
          {
            v36 = *--v33;
            v35 = v36;
            *v33 = 0;
            if (v36)
              MEMORY[0x20BD002D4](v35, 0x1000C8077774924);
          }
          while (v33 != v32);
          v34 = v60;
        }
        v61 = v32;
        operator delete(v34);
      }
      if (v56 != v59)
        free(v56);
    }
  }
  return v28;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if ((v4 & 1) == 0)
    {
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties]";
        v15 = 121;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v5[336];
    return a1[32];
  }
  return result;
}

uint64_t mlir::affine::AffineVectorStoreOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void **v20;
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v22[0] = v2;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v3, (const void **)"map", (const char *)3, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22)|| !mlir::affine::__mlir_ods_local_type_constraint_AffineOps5(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, 0)|| !mlir::memref::__mlir_ods_local_type_constraint_MemRefOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
    {
      return 0;
    }
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) == 0)
    {
      v6 = -2;
      v7 = 64;
LABEL_8:
      v8 = 0;
      for (i = v7 + 24;
            mlir::memref::__mlir_ods_local_type_constraint_MemRefOps3(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 2);
            i += 32)
      {
        if (v6 == ++v8)
          return 1;
      }
      return 0;
    }
    v5 = *((unsigned int *)v4 + 17);
    v6 = v5 - 2;
    if (v5 != 2)
    {
      v7 = v4[9] + 64;
      goto LABEL_8;
    }
    return 1;
  }
  else
  {
    v20 = (const void **)"requires attribute 'map'";
    v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v11 = __p;
      if (__p)
      {
        v12 = v28;
        v13 = __p;
        if (v28 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v28 = v11;
        operator delete(v13);
      }
      v14 = v25;
      if (v25)
      {
        v15 = v26;
        v16 = v25;
        if (v26 != v25)
        {
          do
          {
            v18 = *--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
          }
          while (v15 != v14);
          v16 = v25;
        }
        v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24)
        free(v23);
    }
  }
  return v10;
}

BOOL mlir::affine::AffineYieldOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| (_DWORD)v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    v5 = 0;
    v6 = v8[0];
    if (v8[0] == &v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  v6 = v8[0];
  if (v8[0] != &v9)
LABEL_9:
    free(v6);
LABEL_10:
  if (v10 != v12)
    free(v10);
  return v5;
}

uint64_t mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
          v31 = 76;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
          v31 = 76;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ShapedDimOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedDimOpInterface]";
      v23 = 76;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::ShapedDimOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[229];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::ViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(_BYTE *a1, unsigned int **a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isValidSymbol;
  uint64_t Value;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  int32x4_t v19;
  int64x2_t v20;
  uint64_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t Sizes;
  unint64_t v31;
  uint64_t v32;

  if (!a1[9])
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::memref::ViewOp,void>::id)
    {
      v5 = **a2;
      v6 = *(_QWORD *)a2[1];
      v32 = *(_QWORD *)a1;
      v31 = *(_QWORD *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31) + 8 * v5);
      isValidSymbol = 1;
      if (v7 != 0x8000000000000000)
      {
LABEL_24:
        a1[8] = isValidSymbol;
        a1[9] = 1;
        return a1;
      }
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v31);
      if (v10 >= v5)
        v11 = v5;
      else
        v11 = v10;
      if (!v11)
      {
        v15 = 0;
LABEL_23:
        Sizes = mlir::memref::ViewOp::getSizes((mlir::memref::ViewOp *)&v32);
        mlir::memref::ViewOp::getSizes((mlir::memref::ViewOp *)&v32);
        isValidSymbol = mlir::affine::isValidSymbol(*(_QWORD *)(Sizes + 32 * v15 + 24), v6);
        goto LABEL_24;
      }
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 >= 7)
      {
        v16 = v12 + 1;
        v17 = (v12 + 1) & 0x3FFFFFFFFFFFFFF8;
        v14 = (uint64_t *)(Value + 8 * v17);
        v18 = (int64x2_t *)(Value + 32);
        v19 = 0uLL;
        v20 = vdupq_n_s64(0x8000000000000000);
        v21 = v17;
        v22 = 0uLL;
        do
        {
          v23 = v18[-2];
          v24 = v18[-1];
          v25 = *v18;
          v26 = v18[1];
          v18 += 4;
          v19 = vsubq_s32(v19, vuzp1q_s32((int32x4_t)vceqq_s64(v23, v20), (int32x4_t)vceqq_s64(v24, v20)));
          v22 = vsubq_s32(v22, vuzp1q_s32((int32x4_t)vceqq_s64(v25, v20), (int32x4_t)vceqq_s64(v26, v20)));
          v21 -= 8;
        }
        while (v21);
        v13 = vaddvq_s32(vaddq_s32(v22, v19));
        if (v16 == v17)
        {
LABEL_22:
          v15 = v13;
          goto LABEL_23;
        }
      }
      else
      {
        v13 = 0;
        v14 = (uint64_t *)Value;
      }
      v27 = (uint64_t *)(Value + 8 * v11);
      do
      {
        v28 = *v14++;
        if (v28 == 0x8000000000000000)
          ++v13;
      }
      while (v14 != v27);
      goto LABEL_22;
    }
  }
  return a1;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::SubViewOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(_BYTE *result, unsigned int **a2)
{
  _BYTE *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isValidSymbol;
  uint64_t Value;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  int32x4_t v18;
  int64x2_t v19;
  uint64_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t Sizes;
  unint64_t v29;
  uint64_t v30;

  v2 = result;
  if (!result[9]
    && *(_QWORD *)result
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::memref::SubViewOp,void>::id)
  {
    v4 = **a2;
    v5 = *(_QWORD *)a2[1];
    v30 = *(_QWORD *)result;
    v29 = *(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v30) + 8) & 0xFFFFFFFFFFFFFFF8;
    v6 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29) + 8 * v4);
    isValidSymbol = 1;
    if (v6 != 0x8000000000000000)
    {
LABEL_24:
      v2[8] = isValidSymbol;
      v2[9] = 1;
      return v2;
    }
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v29);
    if (v9 >= v4)
      v10 = v4;
    else
      v10 = v9;
    if (!v10)
    {
      v14 = 0;
LABEL_23:
      Sizes = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v30);
      isValidSymbol = mlir::affine::isValidSymbol(*(_QWORD *)(Sizes + 32 * v14 + 24), v5);
      goto LABEL_24;
    }
    v11 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v11 >= 7)
    {
      v15 = v11 + 1;
      v16 = (v11 + 1) & 0x3FFFFFFFFFFFFFF8;
      v13 = (uint64_t *)(Value + 8 * v16);
      v17 = (int64x2_t *)(Value + 32);
      v18 = 0uLL;
      v19 = vdupq_n_s64(0x8000000000000000);
      v20 = v16;
      v21 = 0uLL;
      do
      {
        v22 = v17[-2];
        v23 = v17[-1];
        v24 = *v17;
        v25 = v17[1];
        v17 += 4;
        v18 = vsubq_s32(v18, vuzp1q_s32((int32x4_t)vceqq_s64(v22, v19), (int32x4_t)vceqq_s64(v23, v19)));
        v21 = vsubq_s32(v21, vuzp1q_s32((int32x4_t)vceqq_s64(v24, v19), (int32x4_t)vceqq_s64(v25, v19)));
        v20 -= 8;
      }
      while (v20);
      v12 = vaddvq_s32(vaddq_s32(v21, v18));
      if (v15 == v16)
      {
LABEL_22:
        v14 = v12;
        goto LABEL_23;
      }
    }
    else
    {
      v12 = 0;
      v13 = (uint64_t *)Value;
    }
    v26 = (uint64_t *)(Value + 8 * v10);
    do
    {
      v27 = *v13++;
      if (v27 == 0x8000000000000000)
        ++v12;
    }
    while (v13 != v26);
    goto LABEL_22;
  }
  return result;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,BOOL>::Case<mlir::memref::AllocOp,isDimOpValidSymbol(mlir::ShapedDimOpInterface,mlir::Region *)::$_0 &>(_BYTE *result, unsigned int **a2)
{
  _BYTE *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isValidSymbol;
  uint64_t Value;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  int32x4_t v19;
  int64x2_t v20;
  uint64_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t DynamicSizes;
  unint64_t v30;
  uint64_t v31;

  v2 = result;
  if (!result[9])
  {
    v3 = *(_QWORD *)result;
    if (*(_QWORD *)result
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id)
    {
      v5 = **a2;
      v6 = *(_QWORD *)a2[1];
      v31 = *(_QWORD *)result;
      v30 = *(_QWORD *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30) + 8 * v5);
      isValidSymbol = 1;
      if (v7 != 0x8000000000000000)
      {
LABEL_24:
        v2[8] = isValidSymbol;
        v2[9] = 1;
        return v2;
      }
      Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
      if (v10 >= v5)
        v11 = v5;
      else
        v11 = v10;
      if (!v11)
      {
        v15 = 0;
LABEL_23:
        DynamicSizes = mlir::memref::AllocOp::getDynamicSizes((mlir::memref::AllocOp *)&v31);
        isValidSymbol = mlir::affine::isValidSymbol(*(_QWORD *)(DynamicSizes + 32 * v15 + 24), v6);
        goto LABEL_24;
      }
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 >= 7)
      {
        v16 = v12 + 1;
        v17 = (v12 + 1) & 0x3FFFFFFFFFFFFFF8;
        v14 = (uint64_t *)(Value + 8 * v17);
        v18 = (int64x2_t *)(Value + 32);
        v19 = 0uLL;
        v20 = vdupq_n_s64(0x8000000000000000);
        v21 = v17;
        v22 = 0uLL;
        do
        {
          v23 = v18[-2];
          v24 = v18[-1];
          v25 = *v18;
          v26 = v18[1];
          v18 += 4;
          v19 = vsubq_s32(v19, vuzp1q_s32((int32x4_t)vceqq_s64(v23, v20), (int32x4_t)vceqq_s64(v24, v20)));
          v22 = vsubq_s32(v22, vuzp1q_s32((int32x4_t)vceqq_s64(v25, v20), (int32x4_t)vceqq_s64(v26, v20)));
          v21 -= 8;
        }
        while (v21);
        v13 = vaddvq_s32(vaddq_s32(v22, v19));
        if (v16 == v17)
        {
LABEL_22:
          v15 = v13;
          goto LABEL_23;
        }
      }
      else
      {
        v13 = 0;
        v14 = (uint64_t *)Value;
      }
      v27 = (uint64_t *)(Value + 8 * v11);
      do
      {
        v28 = *v14++;
        if (v28 == 0x8000000000000000)
          ++v13;
      }
      while (v14 != v27);
      goto LABEL_22;
    }
  }
  return result;
}

void llvm::SmallVectorImpl<mlir::Value>::append<mlir::Value*,void>(uint64_t a1, _BYTE *__src, _BYTE *a3)
{
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = a3 - __src;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + ((a3 - __src) >> 3);
  if (v8 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  if (__src != a3)
  {
    memcpy((void *)(*(_QWORD *)a1 + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v7 + (v6 >> 3);
}

uint64_t mlir::AffineMap::shiftDims(mlir::AffineMap *this, int a2, unsigned int a3)
{
  int v6;
  int NumSymbols;
  unint64_t v8;
  mlir::MLIRContext ***Results;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  mlir::MLIRContext **v16;
  unsigned int NumDims;
  uint64_t v18;
  _QWORD *LHS;
  uint64_t v20;
  mlir::MLIRContext **v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v6 = mlir::AffineMap::getNumDims(this) + a2;
  NumSymbols = mlir::AffineMap::getNumSymbols(this);
  Results = (mlir::MLIRContext ***)mlir::AffineMap::getResults(this);
  v10 = v8;
  v23 = v25;
  v24 = 0x400000000;
  v11 = 8 * v8;
  if (8 * v8 < 0x21)
  {
    v12 = 0;
    v14 = 0;
    v13 = v25;
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v8, 8);
    v12 = v24;
    v13 = v23;
    v14 = v24;
    if (!v10)
      goto LABEL_8;
  }
  v15 = &v13[v12];
  do
  {
    v16 = *Results++;
    v22 = v16;
    NumDims = mlir::AffineMap::getNumDims(this);
    *v15++ = mlir::AffineExpr::shiftDims(&v22, NumDims, a2, a3);
    v11 -= 8;
  }
  while (v11);
  v14 = v24;
  v13 = v23;
LABEL_8:
  v18 = (v14 + v10);
  LODWORD(v24) = v14 + v10;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(this);
  v20 = mlir::AffineMap::get(v6, NumSymbols, (uint64_t)v13, v18, LHS);
  if (v23 != v25)
    free(v23);
  return v20;
}

uint64_t mlir::AffineMap::shiftSymbols(mlir::AffineMap *this, int a2, unsigned int a3)
{
  int NumDims;
  int v7;
  unint64_t v8;
  mlir::MLIRContext ***Results;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  mlir::MLIRContext **v16;
  unsigned int NumSymbols;
  uint64_t v18;
  _QWORD *LHS;
  uint64_t v20;
  mlir::MLIRContext **v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  NumDims = mlir::AffineMap::getNumDims(this);
  v7 = mlir::AffineMap::getNumSymbols(this) + a2;
  Results = (mlir::MLIRContext ***)mlir::AffineMap::getResults(this);
  v10 = v8;
  v23 = v25;
  v24 = 0x400000000;
  v11 = 8 * v8;
  if (8 * v8 < 0x21)
  {
    v12 = 0;
    v14 = 0;
    v13 = v25;
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v8, 8);
    v12 = v24;
    v13 = v23;
    v14 = v24;
    if (!v10)
      goto LABEL_8;
  }
  v15 = &v13[v12];
  do
  {
    v16 = *Results++;
    v22 = v16;
    NumSymbols = mlir::AffineMap::getNumSymbols(this);
    *v15++ = mlir::AffineExpr::shiftSymbols(&v22, NumSymbols, a2, a3);
    v11 -= 8;
  }
  while (v11);
  v14 = v24;
  v13 = v23;
LABEL_8:
  v18 = (v14 + v10);
  LODWORD(v24) = v14 + v10;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(this);
  v20 = mlir::AffineMap::get(NumDims, v7, (uint64_t)v13, v18, LHS);
  if (v23 != v25)
    free(v23);
  return v20;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::Attribute>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  v13 = v26;
  *a2 = v26;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = __p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = *--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

uint64_t foldLoopBounds(mlir::affine::AffineForOp)::$_0::operator()(uint64_t **a1, int a2)
{
  char v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t DefiningOp;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v23;
  unsigned int v24;
  int v25;
  const void **v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v34;
  unint64_t ConstantMap;
  mlir::MLIRContext *v36;
  mlir::MLIRContext *v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  int *Value;
  void *v44;
  uint64_t v45;
  _BYTE v46[32];
  void *v47;
  uint64_t v48;
  _BYTE v49[64];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = a2;
  v52 = *MEMORY[0x24BDAC8D0];
  v47 = v49;
  v48 = 0x800000000;
  v4 = **a1;
  v5 = *(unsigned int *)(v4 + 44);
  v6 = v4 + 16 * ((v5 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(v4 + 44)))
    v6 = 0;
  v7 = *(unsigned int *)(v6 + 24);
  if (a2)
  {
    if ((v5 & 0x800000) != 0)
    {
      v8 = *(_QWORD *)(v4 + 72);
      if (!*(_DWORD *)(v6 + 24))
        goto LABEL_23;
    }
    else
    {
      v8 = 0;
      if (!*(_DWORD *)(v6 + 24))
        goto LABEL_23;
    }
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 28);
    if ((v5 & 0x800000) != 0)
    {
      v8 = *(_QWORD *)(v4 + 72) + 32 * v7;
      v7 = (v9 + v7) - v7;
      if (!v7)
        goto LABEL_23;
    }
    else
    {
      v8 = 32 * v7;
      v7 = (v9 + v7) - v7;
      if (!v7)
        goto LABEL_23;
    }
  }
  v10 = (uint64_t *)(v8 + 24);
  do
  {
    v50 = *v10;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v50);
    v12 = DefiningOp;
    if (DefiningOp)
    {
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
      {
        v44 = v46;
        v45 = 0x100000000;
        mlir::Operation::fold(v12, 0, 0, (uint64_t)&v44);
        v13 = *(_QWORD *)v44;
        if (v44 != v46)
          free(v44);
        v12 = v13 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v12 = 0;
      }
    }
    v14 = v48;
    if (v48 >= (unint64_t)HIDWORD(v48))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v48 + 1, 8);
      v14 = v48;
    }
    *((_QWORD *)v47 + v14) = v12;
    LODWORD(v48) = v48 + 1;
    v10 += 4;
    --v7;
  }
  while (v7);
LABEL_23:
  v15 = *a1;
  if ((v2 & 1) != 0)
  {
    v16 = *(void **)(*v15 + 16 * (((unint64_t)*(unsigned int *)(*v15 + 44) >> 23) & 1) + 64);
  }
  else
  {
    v17 = *v15;
    v18 = *(unsigned int *)(v17 + 44);
    v19 = v17 + 16 * ((v18 >> 23) & 1) + 64;
    if (!BYTE3(v18))
      v19 = 0;
    v16 = *(void **)(v19 + 16);
  }
  v44 = v16;
  Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
  v44 = v46;
  v45 = 0x400000000;
  if (mlir::AffineMap::constantFold(&Value, (uint64_t)v47, v48, (uint64_t)&v44, 0))
  {
    v50 = *(_QWORD *)v44;
    mlir::IntegerAttr::getValue(&v50, (llvm::APInt *)&v41);
    if (v45 >= 2)
    {
      v20 = 8 * v45;
      v21 = 8;
      if ((v2 & 1) == 0)
      {
        while (1)
        {
          v40 = *(_QWORD *)((char *)v44 + v21);
          mlir::IntegerAttr::getValue(&v40, (llvm::APInt *)&v50);
          v25 = llvm::APInt::compareSigned((llvm::APInt *)&v41, (const llvm::APInt *)&v50);
          if (v25 >= 0)
            v26 = (const void **)&v50;
          else
            v26 = (const void **)&v41;
          v27 = v42;
          if (v42 > 0x40)
            goto LABEL_55;
          if (v25 >= 0)
            v27 = v51;
          if (v27 > 0x40)
          {
LABEL_55:
            llvm::APInt::assignSlowCase((unsigned int *)&v41, v26);
            if (v51 >= 0x41)
            {
LABEL_56:
              if (v50)
                MEMORY[0x20BD002D4](v50, 0x1000C8000313F17);
            }
          }
          else
          {
            v41 = (uint64_t *)*v26;
            v42 = v27;
            if (v51 >= 0x41)
              goto LABEL_56;
          }
          v21 += 8;
          if (v20 == v21)
            goto LABEL_58;
        }
      }
      do
      {
        v40 = *(_QWORD *)((char *)v44 + v21);
        mlir::IntegerAttr::getValue(&v40, (llvm::APInt *)&v50);
        v22 = llvm::APInt::compareSigned((llvm::APInt *)&v41, (const llvm::APInt *)&v50);
        if (v22 <= 0)
          v23 = (const void **)&v50;
        else
          v23 = (const void **)&v41;
        v24 = v42;
        if (v42 > 0x40)
          goto LABEL_42;
        if (v22 <= 0)
          v24 = v51;
        if (v24 >= 0x41)
        {
LABEL_42:
          llvm::APInt::assignSlowCase((unsigned int *)&v41, v23);
          if (v51 >= 0x41)
          {
LABEL_43:
            if (v50)
              MEMORY[0x20BD002D4](v50, 0x1000C8000313F17);
          }
        }
        else
        {
          v41 = (uint64_t *)*v23;
          v42 = v24;
          if (v51 >= 0x41)
            goto LABEL_43;
        }
        v21 += 8;
      }
      while (v20 != v21);
    }
LABEL_58:
    v28 = *a1;
    if ((v2 & 1) != 0)
    {
      if (v42 > 0x40)
        v29 = *v41;
      else
        v29 = (uint64_t)((_QWORD)v41 << -(uint64_t)v42) >> -(uint64_t)v42;
      mlir::ValueRange::ValueRange((unint64_t *)&v50, 0, 0);
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*v28 + 24));
      ConstantMap = mlir::AffineMap::getConstantMap((mlir::AffineMap *)v29, Context, v34);
      mlir::affine::AffineForOp::setLowerBound(v28, v50, v51, ConstantMap);
      if (v42 < 0x41)
        goto LABEL_72;
    }
    else
    {
      if (v42 > 0x40)
        v32 = *v41;
      else
        v32 = (uint64_t)((_QWORD)v41 << -(uint64_t)v42) >> -(uint64_t)v42;
      mlir::ValueRange::ValueRange((unint64_t *)&v50, 0, 0);
      v36 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(*v28 + 24));
      v38 = mlir::AffineMap::getConstantMap((mlir::AffineMap *)v32, v36, v37);
      mlir::affine::AffineForOp::setUpperBound(v28, v50, v51, v38);
      if (v42 < 0x41)
        goto LABEL_72;
    }
    if (v41)
      MEMORY[0x20BD002D4](v41, 0x1000C8000313F17);
LABEL_72:
    v30 = 1;
    v31 = v44;
    if (v44 == v46)
      goto LABEL_74;
    goto LABEL_73;
  }
  v30 = 0;
  v31 = v44;
  if (v44 != v46)
LABEL_73:
    free(v31);
LABEL_74:
  if (v47 != v49)
    free(v47);
  return v30;
}

void simplifyMinOrMaxExprWithOperands(mlir::AffineExpr *a1, uint64_t *a2, unint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t LowerBound;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t UpperBound;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unsigned int Kind;
  unsigned int v21;
  uint64_t Results;
  uint64_t v23;
  void **v24;
  uint64_t i;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t LHS;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t NumDims;
  uint64_t NumSymbols;
  unint64_t BoundForAffineExpr;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t AffineConstantExpr;
  char *v53;
  mlir **v54;
  mlir *v55;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v57;
  char *v58;
  unint64_t v59;
  _BYTE *v60;
  char *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  mlir **v66;
  mlir *v67;
  mlir::MLIRContext *v68;
  mlir::MLIRContext *v69;
  char *v70;
  unint64_t v71;
  _BYTE *v72;
  char *v73;
  _BYTE *v74;
  int v75;
  int v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[32];
  void *v84;
  uint64_t v85;
  _BYTE v86[64];
  void *v87;
  uint64_t v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _BYTE v92[48];
  char *v93;
  uint64_t v94;
  _QWORD v95[8];

  v95[6] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return;
  v93 = (char *)v95;
  v94 = 0x300000000;
  v90 = v92;
  v91 = 0x300000000;
  if (a3 >= 4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, a3, 16);
    if (a3 > HIDWORD(v91))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v92, a3, 16);
  }
  v8 = 8 * a3;
  do
  {
    v9 = *a2;
    LowerBound = getLowerBound(*a2);
    v12 = v11;
    v13 = v94;
    if (v94 >= (unint64_t)HIDWORD(v94))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v95, v94 + 1, 16);
      v13 = v94;
    }
    v14 = (uint64_t *)&v93[16 * v13];
    *v14 = LowerBound;
    v14[1] = v12;
    LODWORD(v94) = v94 + 1;
    UpperBound = getUpperBound(v9);
    v17 = v16;
    v18 = v91;
    if (v91 >= (unint64_t)HIDWORD(v91))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v92, v91 + 1, 16);
      v18 = v91;
    }
    v19 = (unint64_t *)((char *)v90 + 16 * v18);
    *v19 = UpperBound;
    v19[1] = v17;
    LODWORD(v91) = v91 + 1;
    ++a2;
    v8 -= 8;
  }
  while (v8);
  v87 = v89;
  v88 = 0x400000000;
  v84 = v86;
  v85 = 0x400000000;
  Kind = mlir::AffineExpr::getKind(a1);
  if (HIDWORD(v88) < Kind)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, Kind, 16);
    v21 = mlir::AffineExpr::getKind(a1);
    if (HIDWORD(v85) >= v21)
    {
LABEL_15:
      Results = mlir::AffineMap::getResults(a1);
      if (!v23)
        goto LABEL_34;
      goto LABEL_19;
    }
  }
  else
  {
    v21 = mlir::AffineExpr::getKind(a1);
    if (HIDWORD(v85) >= v21)
      goto LABEL_15;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v21, 16);
  Results = mlir::AffineMap::getResults(a1);
  if (v23)
  {
LABEL_19:
    v24 = (void **)Results;
    for (i = 8 * v23; i; i -= 8)
    {
      v28 = *v24;
      v81 = *v24;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v81) == 5)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v81, (uint64_t)v28);
        if (!v81)
          goto LABEL_29;
      }
      else
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v81, 0);
        if (!v81)
        {
LABEL_29:
          NumDims = mlir::AffineMap::getNumDims(a1);
          NumSymbols = mlir::AffineMap::getNumSymbols(a1);
          BoundForAffineExpr = mlir::getBoundForAffineExpr((uint64_t)v28, NumDims, NumSymbols, (uint64_t)v93, v94, (uint64_t)v90, v91, 0);
          v38 = v37;
          v39 = v88;
          if (v88 >= (unint64_t)HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 16);
            v39 = v88;
          }
          v40 = (unint64_t *)((char *)v87 + 16 * v39);
          *v40 = BoundForAffineExpr;
          v40[1] = v38;
          LODWORD(v88) = v88 + 1;
          v41 = mlir::AffineMap::getNumDims(a1);
          v42 = mlir::AffineMap::getNumSymbols(a1);
          v43 = mlir::getBoundForAffineExpr((uint64_t)v28, v41, v42, (uint64_t)v93, v94, (uint64_t)v90, v91, 1);
          v27 = v44;
          v45 = v85;
          if (v85 >= (unint64_t)HIDWORD(v85))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v85 + 1, 16);
            v45 = v85;
          }
          v26 = (char *)v84 + 16 * v45;
          *(_QWORD *)v26 = v43;
          goto LABEL_21;
        }
      }
      LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
      v30 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 16);
        v30 = v88;
      }
      v31 = (uint64_t *)((char *)v87 + 16 * v30);
      *v31 = LHS;
      v31[1] = 1;
      LODWORD(v88) = v88 + 1;
      v32 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v81);
      v33 = v85;
      if (v85 >= (unint64_t)HIDWORD(v85))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v85 + 1, 16);
        v33 = v85;
      }
      v26 = (char *)v84 + 16 * v33;
      *(_QWORD *)v26 = v32;
      v27 = 1;
LABEL_21:
      *((_QWORD *)v26 + 1) = v27;
      LODWORD(v85) = v85 + 1;
      ++v24;
    }
  }
LABEL_34:
  v81 = v83;
  v82 = 0x400000000;
  v46 = mlir::AffineMap::getResults(a1);
  if (v47)
  {
    v48 = (uint64_t *)v46;
    v49 = (uint64_t *)(v46 + 8 * v47);
    v50 = 0;
    if ((a4 & 1) != 0)
    {
      do
      {
        AffineConstantExpr = *v48;
        v80 = *v48;
        v53 = (char *)v84;
        if (*((_BYTE *)v87 + 16 * v50 + 8))
        {
          v54 = (mlir **)((char *)v84 + 16 * v50);
          if (*((_BYTE *)v54 + 8))
          {
            v55 = (mlir *)*((_QWORD *)v87 + 2 * v50);
            if (v55 == *v54)
            {
              Context = (mlir::MLIRContext *)mlir::AffineExpr::getContext((mlir::AffineExpr *)&v80);
              AffineConstantExpr = mlir::getAffineConstantExpr(v55, Context, v57);
              v80 = AffineConstantExpr;
              v53 = (char *)v84;
            }
          }
        }
        v58 = &v53[16 * v50];
        if (v58[8] && (_DWORD)v88)
        {
          v59 = 0;
          v60 = v87;
          v61 = (char *)v87 + 16 * v50;
          v62 = v53 + 8;
          while (v50 == v59
               || !v60[8]
               || *(_QWORD *)v60 <= *(_QWORD *)v58
               && (*(_QWORD *)v60 < *(_QWORD *)v58
                || *v62
                && v61[8]
                && *(_QWORD *)v61 == *(_QWORD *)v58
                && v59 > v50
                && *(_QWORD *)v60 == *((_QWORD *)v62 - 1)))
          {
            ++v59;
            v62 += 16;
            v60 += 16;
            if (v60 == (char *)v87 + 16 * v88)
              goto LABEL_37;
          }
        }
        else
        {
LABEL_37:
          v51 = v82;
          if (v82 >= (unint64_t)HIDWORD(v82))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
            v51 = v82;
          }
          *((_QWORD *)v81 + v51) = AffineConstantExpr;
          LODWORD(v82) = v82 + 1;
        }
        ++v50;
        ++v48;
      }
      while (v48 != v49);
    }
    else
    {
      do
      {
        v64 = *v48;
        v80 = *v48;
        v65 = (char *)v87;
        if (*((_BYTE *)v87 + 16 * v50 + 8))
        {
          v66 = (mlir **)((char *)v84 + 16 * v50);
          if (*((_BYTE *)v66 + 8))
          {
            v67 = (mlir *)*((_QWORD *)v87 + 2 * v50);
            if (v67 == *v66)
            {
              v68 = (mlir::MLIRContext *)mlir::AffineExpr::getContext((mlir::AffineExpr *)&v80);
              v64 = mlir::getAffineConstantExpr(v67, v68, v69);
              v80 = v64;
              v65 = (char *)v87;
            }
          }
        }
        v70 = &v65[16 * v50];
        if (v70[8] && (_DWORD)v85)
        {
          v71 = 0;
          v72 = v84;
          v73 = (char *)v84 + 16 * v50;
          v74 = v65 + 8;
          while (v50 == v71
               || !v72[8]
               || *(_QWORD *)v72 >= *(_QWORD *)v70
               && (*(_QWORD *)v72 > *(_QWORD *)v70
                || *v74
                && v73[8]
                && *(_QWORD *)v70 == *(_QWORD *)v73
                && v71 > v50
                && *(_QWORD *)v72 == *((_QWORD *)v74 - 1)))
          {
            ++v71;
            v74 += 16;
            v72 += 16;
            if (v72 == (char *)v84 + 16 * v85)
              goto LABEL_59;
          }
        }
        else
        {
LABEL_59:
          v63 = v82;
          if (v82 >= (unint64_t)HIDWORD(v82))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v82 + 1, 8);
            v63 = v82;
          }
          *((_QWORD *)v81 + v63) = v64;
          LODWORD(v82) = v82 + 1;
        }
        ++v50;
        ++v48;
      }
      while (v48 != v49);
    }
  }
  v75 = mlir::AffineMap::getNumDims(a1);
  v76 = mlir::AffineMap::getNumSymbols(a1);
  v77 = v81;
  v78 = v82;
  v79 = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(_QWORD *)a1 = mlir::AffineMap::get(v75, v76, (uint64_t)v77, v78, v79);
  if (v81 != v83)
    free(v81);
  if (v84 != v86)
    free(v84);
  if (v87 != v89)
    free(v87);
  if (v90 != v92)
    free(v90);
  if (v93 != (char *)v95)
    free(v93);
}

uint64_t getLowerBound(uint64_t a1)
{
  mlir::Block *v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;

  if (!a1)
    return 0;
  if ((*(_QWORD *)(a1 + 8) & 7) != 7)
    return 0;
  v2 = *(mlir::Block **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(mlir::Block::getParent(v2) + 16);
  v4 = v3
    && *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id;
  if (!v4)
    return 0;
  v6 = *(unsigned int *)(v3 + 44);
  v7 = (uint64_t *)(v3 + 64 + 16 * ((v6 >> 23) & 1));
  v8 = *(_QWORD *)((((unint64_t)v7 + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(v3 + 40)
                 + 8);
  v4 = v8 == 0;
  v9 = v8 - 8;
  if (v4)
    v9 = 0;
  if (**(_QWORD **)(v9 + 48) != a1)
    return 0;
  Value = *v7;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  if (!mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
    return 0;
  Value = *(_QWORD *)(v3 + 64 + 16 * (((unint64_t)*(unsigned int *)(v3 + 44) >> 23) & 1));
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
}

unint64_t getUpperBound(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  mlir::Block *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 isSingleConstant;
  uint64_t v14;
  uint64_t SingleConstantResult;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  unsigned int v23;
  uint64_t v24;

  LOBYTE(v1) = 0;
  if (!a1)
    return 0;
  v3 = 0;
  if ((*(_QWORD *)(a1 + 8) & 7) == 7)
  {
    v4 = *(mlir::Block **)(a1 + 16);
    if (v4
      && ((v5 = *(_QWORD *)(mlir::Block::getParent(v4) + 16)) != 0
        ? (v6 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
        : (v6 = 0),
          v6))
    {
      LOBYTE(v1) = 0;
      v3 = 0;
      v8 = v5 + 64;
      v9 = *(unsigned int *)(v5 + 44);
      v10 = *(_QWORD *)(((v5 + 64 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(v5 + 40)
                      + 8);
      v6 = v10 == 0;
      v11 = v10 - 8;
      if (v6)
        v11 = 0;
      if (**(_QWORD **)(v11 + 48) == a1)
      {
        v12 = BYTE3(v9) ? v5 + 64 + 16 * ((v9 >> 23) & 1) : 0;
        Value = *(_QWORD *)(v12 + 16);
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
        isSingleConstant = mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value);
        LOBYTE(v1) = 0;
        v3 = 0;
        if (isSingleConstant)
        {
          Value = *(_QWORD *)(v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1));
          Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
          if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
          {
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v14 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v14 = 0;
            Value = *(_QWORD *)(v14 + 16);
            Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
            SingleConstantResult = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v16 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v16 = 0;
            Value = *(_QWORD *)(v16 + 16);
            Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
            v17 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
            Value = *(_QWORD *)(v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1));
            Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
            v18 = v17 + ~mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value);
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v19 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v19 = 0;
            v24 = *(_QWORD *)(v19 + 8);
            mlir::IntegerAttr::getValue(&v24, (llvm::APInt *)&Value);
            if (v23 > 0x40)
            {
              v20 = *(_QWORD *)Value;
              MEMORY[0x20BD002D4]();
            }
            else
            {
              v20 = Value << -(uint64_t)v23 >> -(uint64_t)v23;
            }
            v1 = SingleConstantResult + ~(v18 % v20);
          }
          else
          {
            if (HIBYTE(*(_DWORD *)(v5 + 44)))
              v21 = v8 + 16 * (((unint64_t)*(unsigned int *)(v5 + 44) >> 23) & 1);
            else
              v21 = 0;
            Value = *(_QWORD *)(v21 + 16);
            Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
            v1 = mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value) - 1;
          }
          v3 = v1 & 0xFFFFFFFFFFFFFF00;
        }
      }
    }
    else
    {
      LOBYTE(v1) = 0;
      v3 = 0;
    }
  }
  return v3 | v1;
}

uint64_t deduplicateAndResolveOperands(mlir::AsmParser *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  mlir::IndexType **v12;
  mlir::MLIRContext *v13;
  uint64_t IndexType;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t AffineDimExpr;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  mlir *v29;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v31;
  int v32;
  void *v33;
  uint64_t *v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[7];

  v38[6] = *MEMORY[0x24BDAC8D0];
  v12 = (mlir::IndexType **)(*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 32))(a1);
  IndexType = mlir::Builder::getIndexType(v12, v13);
  if (!a3)
    return 1;
  v15 = IndexType;
  v16 = &a2[6 * a3];
  v35 = v16;
  while (2)
  {
    v36 = v38;
    v37 = 0x600000000;
    v17 = *((unsigned int *)a2 + 2);
    if (!(_DWORD)v17)
    {
LABEL_23:
      v32 = 0;
      v33 = v36;
      if (v36 == v38)
        goto LABEL_25;
      goto LABEL_24;
    }
    v18 = *a2;
    v19 = 32 * v17;
    do
    {
      if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 696))(a1, v18, v15, &v36))
      {
        v32 = 1;
        v33 = v36;
        if (v36 == v38)
          goto LABEL_25;
LABEL_24:
        free(v33);
        goto LABEL_25;
      }
      v18 += 32;
      v19 -= 32;
    }
    while (v19);
    if (!(_DWORD)v37)
      goto LABEL_23;
    v20 = (uint64_t *)v36;
    v21 = (char *)v36 + 8 * v37;
    while (2)
    {
      v24 = *v20;
      v25 = *(char **)a4;
      v26 = *(unsigned int *)(a4 + 8);
      v27 = *(char **)a4;
      if ((_DWORD)v26)
      {
        v28 = 8 * v26;
        v27 = *(char **)a4;
        while (*(_QWORD *)v27 != v24)
        {
          v27 += 8;
          v28 -= 8;
          if (!v28)
          {
            v27 = &v25[8 * v26];
            break;
          }
        }
      }
      v29 = (mlir *)((unint64_t)(v27 - v25) >> 3);
      if ((_DWORD)v26 == (_DWORD)v29)
      {
        if (v26 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v26 + 1, 8);
          v26 = *(unsigned int *)(a4 + 8);
          v25 = *(char **)a4;
        }
        *(_QWORD *)&v25[8 * v26] = v24;
        ++*(_DWORD *)(a4 + 8);
      }
      Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      if (a6 == 6)
      {
        AffineDimExpr = mlir::getAffineDimExpr(v29, Context, v31);
        v23 = *(unsigned int *)(a5 + 8);
        if (v23 >= *(unsigned int *)(a5 + 12))
        {
LABEL_22:
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v23 + 1, 8);
          v23 = *(unsigned int *)(a5 + 8);
        }
      }
      else
      {
        AffineDimExpr = mlir::getAffineSymbolExpr(v29, Context, v31);
        v23 = *(unsigned int *)(a5 + 8);
        if (v23 >= *(unsigned int *)(a5 + 12))
          goto LABEL_22;
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v23) = AffineDimExpr;
      ++*(_DWORD *)(a5 + 8);
      if (++v20 != (uint64_t *)v21)
        continue;
      break;
    }
    v32 = 0;
    v16 = v35;
    v33 = v36;
    if (v36 != v38)
      goto LABEL_24;
LABEL_25:
    if (!v32)
    {
      a2 += 6;
      if (a2 == v16)
        return 1;
      continue;
    }
    return 0;
  }
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseAffineMapWithMinMax(mlir::OpAsmParser &,mlir::OperationState &,`anonymous namespace'::MinMaxKind)::$_0>(_QWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  char *Results;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  unsigned int NumDims;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  size_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int Kind;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[32];
  void *Value;
  uint64_t v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (*(_DWORD *)a1[1])
    v3 = "max";
  else
    v3 = "min";
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v2 + 376))(v2, v3, 3))
  {
    *(_DWORD *)(a1[2] + 8) = 0;
    v44 = 0;
    if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*a1 + 704))(*a1))
    {
      mlir::NamedAttrList::erase(a1[4] + 112, *(const void **)a1[3], *(_QWORD *)(a1[3] + 8));
      v4 = a1[5];
      Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
      Results = (char *)mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
      llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(v4, *(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 8), Results, &Results[8 * v6]);
      v7 = (char **)a1[2];
      v8 = *v7;
      v9 = *((unsigned int *)v7 + 2);
      Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
      NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
      if (v9 >= NumDims)
        v11 = NumDims;
      else
        v11 = v9;
      Value = v50;
      v49 = 0x100000000;
      if (v11 < 2)
      {
        if (!(_DWORD)v11)
        {
          v30 = 0;
LABEL_23:
          LODWORD(v49) = v30 + v11;
          v45 = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
          v31 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&v45);
          v32 = v31;
          v33 = &v8[32 * v31];
          v45 = v47;
          v46 = 0x100000000;
          v34 = 32 * v9 - 32 * v31;
          if (v34 < 0x21)
          {
            v35 = 0;
            if (v31 == (_DWORD)v9)
            {
LABEL_28:
              LODWORD(v46) = v35 + (v34 >> 5);
              v36 = a1[6];
              v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(v36, Kind, (unint64_t)&Value);
              v38 = a1[7];
              v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              v39 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(v38, v39, (unint64_t)&v45);
              v40 = a1[8];
              v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
              v41 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v43);
              v42 = *(unsigned int *)(v40 + 8);
              if (v42 >= *(_DWORD *)(v40 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v40, (void *)(v40 + 16), v42 + 1, 4);
                LODWORD(v42) = *(_DWORD *)(v40 + 8);
              }
              *(_DWORD *)(*(_QWORD *)v40 + 4 * v42) = v41;
              ++*(_DWORD *)(v40 + 8);
              if (v45 != v47)
                free(v45);
              if (Value != v50)
                free(Value);
              return 1;
            }
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v47, (uint64_t)v34 >> 5, 32);
            v35 = v46;
            if (v32 == (_DWORD)v9)
              goto LABEL_28;
          }
          memcpy((char *)v45 + 32 * v35, v33, v34);
          v35 = v46;
          goto LABEL_28;
        }
        v12 = 0;
        v13 = v50;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Value, v50, v11, 32);
        v12 = v49;
        v13 = Value;
      }
      memcpy(&v13[4 * v12], v8, 32 * v11);
      v30 = v49;
      goto LABEL_23;
    }
    return 0;
  }
  v14 = *a1;
  v15 = a1[6];
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 < *(_DWORD *)(v15 + 12))
  {
    v17 = (_QWORD *)(*(_QWORD *)v15 + 48 * v16);
    *v17 = v17 + 2;
    v17[1] = 0x100000000;
    LODWORD(v17) = *(_DWORD *)(v15 + 8) + 1;
    *(_DWORD *)(v15 + 8) = (_DWORD)v17;
    v18 = *(_QWORD *)v15 + 48 * v17 - 48;
    v19 = a1[7];
    v20 = *(_DWORD *)(v19 + 8);
    if (v20 < *(_DWORD *)(v19 + 12))
      goto LABEL_13;
LABEL_37:
    v22 = llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(v19);
    v23 = a1[5];
    v24 = *(unsigned int *)(v23 + 8);
    if (v24 < *(_DWORD *)(v23 + 12))
      goto LABEL_14;
    goto LABEL_38;
  }
  v18 = llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(v15);
  v19 = a1[7];
  v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
    goto LABEL_37;
LABEL_13:
  v21 = (_QWORD *)(*(_QWORD *)v19 + 48 * v20);
  *v21 = v21 + 2;
  v21[1] = 0x100000000;
  LODWORD(v21) = *(_DWORD *)(v19 + 8) + 1;
  *(_DWORD *)(v19 + 8) = (_DWORD)v21;
  v22 = *(_QWORD *)v19 + 48 * v21 - 48;
  v23 = a1[5];
  v24 = *(unsigned int *)(v23 + 8);
  if (v24 < *(_DWORD *)(v23 + 12))
  {
LABEL_14:
    v25 = *(_QWORD *)v23;
    *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = 0;
    goto LABEL_15;
  }
LABEL_38:
  llvm::SmallVectorBase<unsigned int>::grow_pod(v23, (void *)(v23 + 16), v24 + 1, 8);
  *(_QWORD *)(*(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8)) = 0;
  LODWORD(v24) = *(_DWORD *)(v23 + 8);
  v25 = *(_QWORD *)v23;
LABEL_15:
  v26 = v24 + 1;
  *(_DWORD *)(v23 + 8) = v26;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 712))(v14, v18, v22, v25 + 8 * v26 - 8))return 0;
  v27 = a1[8];
  v28 = *(unsigned int *)(v27 + 8);
  if (v28 >= *(_DWORD *)(v27 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v27, (void *)(v27 + 16), v28 + 1, 4);
    LODWORD(v28) = *(_DWORD *)(v27 + 8);
  }
  result = 1;
  *(_DWORD *)(*(_QWORD *)v27 + 4 * v28) = 1;
  ++*(_DWORD *)(v27 + 8);
  return result;
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>>::append(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v6 + a2;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    v15 = *(_QWORD *)a1 + 48 * v6;
    if (*(_QWORD *)a1 <= a3 && v15 > a3)
    {
      v17 = a3 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(a1, v7);
      v3 = *(_QWORD *)a1 + v17;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(a1, v7);
    }
  }
  v8 = *(_DWORD *)(a1 + 8);
  if (a2)
  {
    v9 = (_QWORD *)(*(_QWORD *)a1 + 48 * v8);
    v10 = a2;
    while (1)
    {
      v12 = v9 + 2;
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v9 == (_QWORD *)v3)
        goto LABEL_7;
      v13 = *(_DWORD *)(v3 + 8);
      if (!v13)
        goto LABEL_7;
      if (v13 < 2)
      {
        v11 = 32;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v9 + 2, *(unsigned int *)(v3 + 8), 32);
        v14 = *(unsigned int *)(v3 + 8);
        if (!(_DWORD)v14)
          goto LABEL_6;
        v12 = (void *)*v9;
        v11 = 32 * v14;
      }
      memcpy(v12, *(const void **)v3, v11);
LABEL_6:
      *((_DWORD *)v9 + 2) = v13;
LABEL_7:
      v9 += 6;
      if (!--v10)
      {
        v8 = *(_DWORD *)(a1 + 8);
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v8 + a2;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 48, &v14);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    v9 = v4;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2])
        llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12)
          free(v12);
        v11 -= 12;
      }
      while (v11 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,1u>,false>::growAndEmplaceBack<>(uint64_t a1)
{
  _DWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  unint64_t v16;

  v16 = 0;
  v2 = (_DWORD *)(a1 + 16);
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 48, &v16);
  v4 = v3;
  v5 = &v3[6 * *(unsigned int *)(a1 + 8)];
  *v5 = v5 + 2;
  v5[1] = 0x100000000;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    v9 = v3;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2])
        llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12)
          free(v12);
        v11 -= 12;
      }
      while (v11 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v16;
  if (v6 != v2)
    free(v6);
  *(_QWORD *)a1 = v4;
  v14 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 12) = v13;
  return (uint64_t)&v4[6 * v14 - 6];
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::affine::__mlir_ods_local_attr_constraint_AffineOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>(_QWORD *a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AffineScope<Empty>]";
      v15 = 83;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v13;
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v2[53]);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffineDelinearizeIndexOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.delinearize_index", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineDelinearizeIndexOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_24C04B170;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffineIfOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.if", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_24C04A680;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::affine::AffinePrefetchOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"affine.prefetch", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffinePrefetchOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_24C04AF18;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::affine::AffinePrefetchOp::getAttributeNames(void)::attrNames, 4);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::Model(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineDmaStartOp]";
    v19 = 80;
    v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
    if (v19 >= v11)
      v12 = v11;
    else
      v12 = v19;
    v13 = &v18[v12];
    v14 = v19 - v12;
    if (v19 - v12 >= 0x12)
      v15 = 18;
    else
      v15 = v19 - v12;
    v16 = v14 - v15;
    if (v16 >= v16 - 1)
      v17 = v16 - 1;
    else
      v17 = v16;
    mlir::detail::TypeIDResolver<mlir::affine::AffineDmaStartOp,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::affine::AffineDmaStartOp,void>::resolveTypeID(void)::id;
  v20 = v22;
  v21 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>((uint64_t)&v20);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>((uint64_t)&v20);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.dma_start", 16, a2, v5, (uint64_t)&v20);
  v6 = v20;
  if ((_DWORD)v21)
  {
    v7 = 16 * v21;
    v8 = (void **)((char *)v20 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v20;
  }
  if (v6 != v22)
    free(v6);
  *a1 = &unk_24C04AD88;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::foldHook(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm **v7;
  llvm *v9[2];
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2);
  v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0)
        v7 = v9;
      else
        v7 = (llvm **)v9[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v2, v3, v4);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v9[0], v9[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDmaStartOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaStartOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getAffineMapAttrForMemRef;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[256], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::affine::AffineDmaStartOp::getAffineMapAttrForMemRef(&v4, a3);
}

uint64_t mlir::affine::AffineDmaStartOp::getAffineMapAttrForMemRef(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  mlir::StringAttr *Context;
  const char *v7;
  uint64_t v8;
  uint64_t InherentAttr;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;

  v3 = *a1;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 72) + 24) == a2)
  {
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v3 + 24));
    v12 = 261;
    v7 = "src_map";
  }
  else
  {
    v11[0] = mlir::Operation::getInherentAttr(v3, (uint64_t)"src_map", 7);
    v11[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11);
    v5 = *(_QWORD *)(*(_QWORD *)(*a1 + 72)
                   + 32 * (mlir::AffineMap::getNumInputs((mlir::AffineMap *)v11) + 1)
                   + 24);
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    v12 = 261;
    if (v5 == a2)
      v7 = "dst_map";
    else
      v7 = "tag_map";
  }
  v11[0] = v7;
  v11[1] = 7;
  v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v11);
  InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)v7, 7);
  ZinMirCacheTensors::ZinMirCacheTensors(&v13, v8, InherentAttr);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaStartOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::affine::AffineDmaStartOp::getEffects(&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::memref::foldMemRefCast(a2, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v93 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v25 = v24;
    a1 = v93;
    if (v25)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v100 = 91;
      v26 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v26)
        v27 = v26;
      else
        v27 = v100;
      v28 = &v99[v27];
      v29 = v100 - v27;
      if (v100 - v27 >= 0x12)
        v30 = 18;
      else
        v30 = v100 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v93;
    }
  }
  v3 = v2[45];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v88 = v3;
    v94 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v34 = v33;
    v3 = v88;
    a1 = v94;
    if (v34)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v100 = 88;
      v35 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v35)
        v36 = v35;
      else
        v36 = v100;
      v37 = &v99[v36];
      v38 = v100 - v36;
      if (v100 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v100 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v88;
      a1 = v94;
    }
  }
  v6 = v5[73];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v89 = v3;
    v95 = a1;
    v84 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v84;
    v3 = v89;
    v43 = v42;
    a1 = v95;
    if (v43)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v100 = 83;
      v44 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v44)
        v45 = v44;
      else
        v45 = v100;
      v46 = &v99[v45];
      v47 = v100 - v45;
      if (v100 - v45 >= 0x12)
        v48 = 18;
      else
        v48 = v100 - v45;
      v49 = v47 - v48;
      if (v49 >= v49 - 1)
        v50 = v49 - 1;
      else
        v50 = v49;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v84;
      v3 = v89;
      a1 = v95;
    }
  }
  v9 = v8[417];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v90 = v3;
    v96 = a1;
    v81 = v9;
    v85 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v81;
    v6 = v85;
    v52 = v51;
    v3 = v90;
    a1 = v96;
    if (v52)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v100 = 84;
      v53 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v53)
        v54 = v53;
      else
        v54 = v100;
      v55 = &v99[v54];
      v56 = v100 - v54;
      if (v100 - v54 >= 0x12)
        v57 = 18;
      else
        v57 = v100 - v54;
      v58 = v56 - v57;
      if (v58 >= v58 - 1)
        v59 = v58 - 1;
      else
        v59 = v58;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v81;
      v6 = v85;
      v3 = v90;
      a1 = v96;
    }
  }
  v12 = v11[423];
  v14 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v91 = v3;
    v97 = a1;
    v82 = v9;
    v86 = v6;
    v79 = v12;
    v14 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v12 = v79;
    v9 = v82;
    v6 = v86;
    v3 = v91;
    v61 = v60;
    a1 = v97;
    if (v61)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v100 = 102;
      v62 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v62)
        v63 = v62;
      else
        v63 = v100;
      v64 = &v99[v63];
      v65 = v100 - v63;
      if (v100 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v100 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v14 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v12 = v79;
      v9 = v82;
      v6 = v86;
      v3 = v91;
      a1 = v97;
    }
  }
  v15 = v14[258];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v92 = v3;
    v98 = a1;
    v83 = v9;
    v87 = v6;
    v78 = v15;
    v80 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v78;
    v12 = v80;
    v9 = v83;
    v6 = v87;
    v70 = v69;
    v3 = v92;
    a1 = v98;
    if (v70)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v100 = 93;
      v71 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v71)
        v72 = v71;
      else
        v72 = v100;
      v73 = &v99[v72];
      v74 = v100 - v72;
      if (v100 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v100 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v78;
      v12 = v80;
      v9 = v83;
      v6 = v87;
      v3 = v92;
      a1 = v98;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v17[21] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineDmaStartOp::print((mlir::affine::AffineDmaStartOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::OpTrait::impl::verifyZeroResults(a1, a2))
    return 0;
  v4 = a1;
  return mlir::affine::AffineDmaStartOp::verifyInvariantsImpl((mlir::affine::AffineDmaStartOp *)&v4) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDmaStartOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::Model(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineDmaWaitOp]";
    v19 = 79;
    v11 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
    if (v19 >= v11)
      v12 = v11;
    else
      v12 = v19;
    v13 = &v18[v12];
    v14 = v19 - v12;
    if (v19 - v12 >= 0x12)
      v15 = 18;
    else
      v15 = v19 - v12;
    v16 = v14 - v15;
    if (v16 >= v16 - 1)
      v17 = v16 - 1;
    else
      v17 = v16;
    mlir::detail::TypeIDResolver<mlir::affine::AffineDmaWaitOp,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
  }
  v5 = mlir::detail::TypeIDResolver<mlir::affine::AffineDmaWaitOp,void>::resolveTypeID(void)::id;
  v20 = v22;
  v21 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>>((uint64_t)&v20);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.dma_wait", 15, a2, v5, (uint64_t)&v20);
  v6 = v20;
  if ((_DWORD)v21)
  {
    v7 = 16 * v21;
    v8 = (void **)((char *)v20 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v20;
  }
  if (v6 != v22)
    free(v6);
  *a1 = &unk_24C04ACC0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::foldHook(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm **v7;
  llvm *v9[2];
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2);
  v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0)
        v7 = v9;
      else
        v7 = (llvm **)v9[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v2, v3, v4);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v9[0], v9[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDmaWaitOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDmaWaitOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>::getAffineMapAttrForMemRef;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[256], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineDmaWaitOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  uint64_t InherentAttr;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "tag_map";
  v7[1] = 7;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"tag_map", 7);
  ZinMirCacheTensors::ZinMirCacheTensors(&v9, v4, InherentAttr);
  return v9;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::memref::foldMemRefCast(a2, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &unk_25451B000;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = (_QWORD *)&unk_25451B000;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v81 = 91;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = (_QWORD *)&unk_25451B000;
      a1 = v75;
    }
  }
  v3 = v2[45];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v81 = 88;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[73];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[417];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[423];
  v14 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v81 = 102;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[258] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::affine::AffineDmaWaitOp::print((mlir::affine::AffineDmaWaitOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::OpTrait::impl::verifyZeroResults(a1, a2))
    return 0;
  v4 = a1;
  return mlir::affine::AffineDmaWaitOp::verifyInvariantsImpl((uint64_t **)&v4) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDmaWaitOp,mlir::OpTrait::MemRefsNormalizable,mlir::OpTrait::VariadicOperands,mlir::OpTrait::ZeroResults,mlir::OpTrait::OpInvariants,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.apply", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04AA68;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineApplyOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineApplyOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineApplyOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineApplyOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineApplyOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineApplyOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.apply", 12, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineApplyOp::fold((uint64_t)&v18, (uint64_t)&v19);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<Empty>]";
      v186 = 109;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[435];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v186 = 88;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[73];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineApplyOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineApplyOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineApplyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineDelinearizeIndexOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineDelinearizeIndexOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineDelinearizeIndexOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  unint64_t v141;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v132;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v5 = (_QWORD *)&unk_25451A000;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v141 = 87;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[427];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v141 = 86;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v141 = 97;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[423];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v141 = 95;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = v17[312];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v141 = 99;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = v20[314];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v141 = 93;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v21 == a1 || v23[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::affine::AffineDelinearizeIndexOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v5 = a1;
  if (!mlir::affine::AffineDelinearizeIndexOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::affine::AffineDelinearizeIndexOp::verify((uint64_t **)&v5) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineDelinearizeIndexOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.for", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A748;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                               + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineForOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineForOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t (**v9)(uint64_t, uint64_t);
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  v8 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v9 = (uint64_t (**)(uint64_t, uint64_t))v10;
      else
        v9 = (uint64_t (**)(uint64_t, uint64_t))v10[0];
      result = (*(uint64_t (**)(uint64_t (**)(uint64_t, uint64_t), uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))(v9, v6, v7);
    }
    if ((v8 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  uint64_t *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::affine::AffineForOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffineForOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  if (*v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"lowerBoundMap", 13, *v6);
  v7 = v6[1];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"step", 4, v7);
  v8 = v6[2];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"upperBoundMap", 13, v8);
  v9 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 3), 3);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffineForOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineForOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineForOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a3 + 24) == *(_QWORD *)(a2 + 24)
      && *(_DWORD *)(a3 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineForOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::CreateOperationOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::affine::AffineForOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineForOp>::getSpeculatability(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  v7 = *(_QWORD *)(v2 + 8);
  mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&v5);
  if (v6 > 0x40)
  {
    v3 = *v5;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    v3 = (uint64_t)((_QWORD)v5 << -(uint64_t)v6) >> -(uint64_t)v6;
  }
  return 2 * (v3 == 1);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x68uLL, 0x80040FDC59921uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[116], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleInductionVar(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return **(_QWORD **)(v3 + 48);
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleLowerBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::affine::AffineForOp::getSingleLowerBound((mlir::affine::AffineForOp *)&v3);
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleStep(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;

  v6[0] = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  memset(&v6[1], 0, 24);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v3 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v3 = 0;
  v9 = *(_QWORD *)(v3 + 8);
  mlir::IntegerAttr::getValue(&v9, (llvm::APInt *)&v7);
  if (v8 > 0x40)
  {
    v4 = *v7;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    v4 = (uint64_t)((_QWORD)v7 << -(uint64_t)v8) >> -(uint64_t)v8;
  }
  return mlir::Builder::getI64IntegerAttr((mlir::Builder *)v6, v4) & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSingleUpperBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::affine::AffineForOp::getSingleUpperBound((mlir::affine::AffineForOp *)&v3);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getInitsMutable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  int v14;
  __int128 v15;
  unsigned int v16[4];
  void *v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  v3 = a2 + 64;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_DWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  else
    v4 = 0;
  v5 = v4[7] + v4[6];
  v6 = v4[8];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8 * *(_QWORD *)(*(_QWORD *)(a2 + 48) + 104) - 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v9 = v3 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v9 = 0;
  v10 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v9 + 24, 3);
  ZinMirCacheTensors::ZinMirCacheTensors(&v13, v7, v10);
  v14 = 2;
  v15 = v13;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v16, a2, v5, v6, &v14, 1);
  v11 = mlir::MutableOperandRange::operator mlir::OperandRange(v16);
  if (v17 != v18)
    free(v17);
  return v11;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionIterArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  return *(_QWORD *)(v3 + 48) + 8;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getYieldedValuesMutable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  ZinIrHalH13g **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v8[4];
  void *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    v3 = (ZinIrHalH13g **)(v2 - 8);
  else
    v3 = 0;
  mlir::Block::getTerminator(v3);
  if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
    v5 = *(_DWORD *)(v4 + 68);
  else
    v5 = 0;
  mlir::MutableOperandRange::MutableOperandRange((uint64_t)v8, v4, 0, v5, 0, 0);
  v6 = mlir::MutableOperandRange::operator mlir::OperandRange(v8);
  if (v9 != v10)
    free(v9);
  return v6;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getLoopResults(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::replaceWithAdditionalYields(ZinIrHalH13g *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  ZinIrHalH13g *v7;

  v7 = a1;
  mlir::affine::AffineForOp::replaceWithAdditionalYields(&v7, a2, a3, a4, a5, a6, a7);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::areTypesCompatible;
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_254519000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[385], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v3 = a2 + 16 * ((v2 >> 23) & 1) + 64;
  else
    v3 = 0;
  v4 = (*(_DWORD *)(v3 + 28) + *(_DWORD *)(v3 + 24));
  if ((v2 & 0x800000) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * v4;
  else
    return 32 * v4;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = a2;
  mlir::affine::AffineForOp::getSuccessorRegions(&v5, 0, a5);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a2;
  mlir::affine::AffineForOp::getSuccessorRegions(&v4, a3, a4);
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineForOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::affine::AffineForOp>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::foldHook<mlir::affine::AffineForOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t Context;
  void *v16;
  uint64_t v17;
  _BYTE v18[8];
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v16 = (void *)a1;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v9 = a1 + 16 * ((v8 >> 23) & 1) + 64;
  else
    v9 = 0;
  v10 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    v11 = ((a1 + 16 * ((v8 >> 23) & 1) + 64 + ((v8 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v11, v10);
  v17 = v7;
  v18[0] = 0;
  v19 = 0;
  v13 = *(_OWORD *)(v9 + 16);
  v20 = *(_OWORD *)v9;
  v21 = v13;
  v22 = *(_QWORD *)(v9 + 32);
  v23 = *(_OWORD *)v26;
  if (v7)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v17);
    if (v19)
      v19 = 0;
    mlir::OperationName::OperationName(v18, "affine.for", 10, Context);
    v19 = 1;
  }
  v24 = a2;
  v25 = a3;
  return mlir::affine::AffineForOp::fold(&v16, v12, a4);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  unint64_t v288;

  v2 = &unk_254519000;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = (_QWORD *)&unk_254519000;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v288 = 81;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = (_QWORD *)&unk_254519000;
      a1 = v273;
    }
  }
  v3 = v2[415];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v288 = 87;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[427];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v288 = 88;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[73];
  v14 = &unk_25451B000;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = (_QWORD *)&unk_25451B000;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v288 = 96;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = (_QWORD *)&unk_25451B000;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[37];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v288 = 83;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[433];
  v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      v288 = 136;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[264];
  v23 = &unk_254519000;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = (_QWORD *)&unk_254519000;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = (_QWORD *)&unk_254519000;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[423];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[310];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v288 = 96;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[55];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[312];
  v35 = &unk_25451B000;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (_QWORD *)&unk_25451B000;
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v288 = 97;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (_QWORD *)&unk_25451B000;
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[219];
  v38 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[122];
  v41 = &unk_25451B000;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = (_QWORD *)&unk_25451B000;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v288 = 93;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = (_QWORD *)&unk_25451B000;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v41[217] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineForOp::print((mlir::affine::AffineForOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  v5 = a1;
  return mlir::affine::AffineForOp::verifyInvariantsImpl((uint64_t **)&v5);
}

BOOL mlir::Op<mlir::affine::AffineForOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  mlir::detail *v5;

  if (!mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
    || !mlir::detail::verifyLoopLikeOpInterface(a1, v2)
    || !mlir::detail::verifyTypesAlongControlFlowEdges(a1, v3))
  {
    return 0;
  }
  v5 = a1;
  return mlir::affine::AffineForOp::verifyRegions((uint64_t **)&v5) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AttrData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void ***v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  Layer2TDMapper::SourceLayer *v22;
  uint64_t IsGraphInitialization;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  BOOL v34;
  char *v35;
  const void **v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  _QWORD v40[4];
  __int16 v41;
  _QWORD v42[4];
  __int16 v43;
  _QWORD v44[4];
  __int16 v45;
  const void **v46[4];
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!(_DWORD)v1)
    return 1;
  v3 = 0;
  v4 = a1 + 64;
  v5 = 24 * v1;
  while (1)
  {
    v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0)
      break;
    v7 = (_QWORD *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (_QWORD *)*v7)
      goto LABEL_8;
LABEL_3:
    v3 += 3;
    if ((_QWORD *)v5 == v3)
      return 1;
  }
  v7 = v3;
  if (v3 == (_QWORD *)*v3)
    goto LABEL_3;
LABEL_8:
  v8 = v7[1];
  if (v8)
    v9 = v8 - 8;
  else
    v9 = 0;
  ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(v9 + 32));
  v11 = *(_QWORD *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineYieldOp,void>::id)
    goto LABEL_3;
  v41 = 1283;
  v40[0] = "expects regions to end with '";
  v40[2] = "affine.yield";
  v40[3] = 12;
  v42[0] = v40;
  v42[2] = "', found '";
  v43 = 770;
  v48 = *(_QWORD *)(v11 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v48);
  v44[0] = v42;
  v44[2] = AttrData;
  v44[3] = v13;
  v45 = 1282;
  v46[0] = (const void **)v44;
  v46[2] = (const void **)"'";
  v47 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v46, (uint64_t)&v48);
  v14 = mlir::Diagnostic::attachNote(&v49, 0, 0);
  v15 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v36) = 3;
  v37 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  v38 = 61;
  v17 = *(unsigned int *)(v14 + 24);
  v18 = &v36;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    v33 = v17 + 1;
    v34 = v16 + 24 * v17 > (unint64_t)&v36;
    if (v16 <= (unint64_t)&v36 && v34)
    {
      v35 = (char *)&v36 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v33, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = (const void ***)&v35[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v33, 24);
      v16 = *(_QWORD *)(v14 + 16);
      v18 = &v36;
    }
  }
  v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  v20 = *(_OWORD *)v18;
  *(_QWORD *)(v19 + 16) = v18[2];
  *(_OWORD *)v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  v39 = 262;
  v36 = (const void **)"affine.yield";
  v37 = 12;
  v21 = mlir::Diagnostic::operator<<(v14, &v36);
  v22 = (Layer2TDMapper::SourceLayer *)mlir::Diagnostic::operator<<(v21, 39);
  IsGraphInitialization = Layer2TDMapper::SourceLayer::IsGraphInitialization(v22);
  if (v48)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
  if (v56)
  {
    v24 = __p;
    if (__p)
    {
      v25 = v55;
      v26 = __p;
      if (v55 != __p)
      {
        do
          v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      v55 = v24;
      operator delete(v26);
    }
    v27 = v52;
    if (v52)
    {
      v28 = v53;
      v29 = v52;
      if (v53 != v52)
      {
        do
        {
          v31 = *--v28;
          v30 = v31;
          *v28 = 0;
          if (v31)
            MEMORY[0x20BD002D4](v30, 0x1000C8077774924);
        }
        while (v28 != v27);
        v29 = v52;
      }
      v53 = v27;
      operator delete(v29);
    }
    if (v50 != &v51)
      free(v50);
  }
  return IsGraphInitialization;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::foldHook(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineIfOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::affine::AffineIfOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineIfOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSpeculatability()
{
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  *v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorRegions;
  v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::areTypesCompatible;
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_254519000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[385], v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  else
    return 0;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;
  uint64_t v6;

  v6 = a2;
  *(_QWORD *)&result = mlir::affine::AffineIfOp::getSuccessorRegions(&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  uint64_t v5;

  v5 = a2;
  *(_QWORD *)&result = mlir::affine::AffineIfOp::getSuccessorRegions(&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!(_DWORD)v6)
      goto LABEL_6;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a5 + 12 * v7;
  v9 = v6;
  do
  {
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::affine::AffineIfOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  mlir::affine::detail::AffineIfOpGenericAdaptorBase::AffineIfOpGenericAdaptorBase((uint64_t)v8, a2);
  v9 = a3;
  v10 = a4;
  return mlir::affine::AffineIfOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  unint64_t v235;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NRegions<2>::Impl<Empty>]";
      v235 = 89;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NRegions<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NRegions<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v222;
    }
  }
  v3 = v2[439];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v235 = 87;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[427];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v235 = 88;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[73];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v235 = 83;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[433];
  v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      v235 = 136;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[264];
  v20 = &unk_25451B000;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = (_QWORD *)&unk_25451B000;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      v235 = 89;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = (_QWORD *)&unk_25451B000;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[149];
  v23 = &unk_254519000;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (_QWORD *)&unk_254519000;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (_QWORD *)&unk_254519000;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[423];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[312];
  v29 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::RecursivelySpeculatableImplTrait<Empty>]";
      v235 = 104;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::OpTrait::RecursivelySpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RecursivelySpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[274];
  v32 = &unk_25451B000;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = (_QWORD *)&unk_25451B000;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v235 = 97;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = (_QWORD *)&unk_25451B000;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[219];
  v35 = &unk_25451B000;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = (_QWORD *)&unk_25451B000;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      v235 = 93;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = (_QWORD *)&unk_25451B000;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v35[217] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineIfOp::print((mlir::affine::AffineIfOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyInvariants(unsigned int *a1)
{
  mlir::Operation *v2;
  mlir::Operation *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int *v8;

  if (!mlir::OpTrait::impl::verifyNRegions((mlir::OpTrait::impl *)a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v2)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments((mlir::OpTrait::impl *)a1, v3))
  {
    return 0;
  }
  v4 = a1[9];
  v5 = a1[9] ? (uint64_t)(a1 - 4) : 0;
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v5, i);
  }
  if (!mlir::scf::__mlir_ods_local_region_constraint_SCFOps1((uint64_t *)a1, (((unint64_t)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 17]+ (((unint64_t)a1[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * a1[10], (uint64_t)"thenRegion", 10, 0))return 0;
  v8 = a1;
  return mlir::affine::AffineIfOp::verify((mlir::affine::AffineIfOp *)&v8) != 0;
}

BOOL mlir::Op<mlir::affine::AffineIfOp,mlir::OpTrait::NRegions<2u>::Impl,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::RegionBranchOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.load", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineLoadOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A9A0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  char v9;
  llvm **v10;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v8 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v10 = v12;
      else
        v10 = (llvm **)v12[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineLoadOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineLoadOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineLoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  *v2 = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getValue;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[276], v2);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

unint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32;
  else
    return 32;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getValue(uint64_t a1, uint64_t a2)
{
  return a2 - 16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMapAttrForMemRef;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[256], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  ZinMirCacheTensors::ZinMirCacheTensors(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineLoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineLoadOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineLoadOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.load", 11, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineLoadOp::fold(&v18);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v198;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451A000;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = (_QWORD *)&unk_25451A000;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v210 = 104;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = (_QWORD *)&unk_25451A000;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[308];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v210 = 97;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[423];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[310];
  v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface::Trait<Empty>]";
      v210 = 99;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineReadOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[278];
  v26 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v210 = 102;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[258];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v210 = 91;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[45];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v32[21] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineLoadOp::print((mlir::affine::AffineLoadOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineLoadOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineLoadOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.max", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A810;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineMaxOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineMaxOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMaxOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMaxOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMaxOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMaxOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.max", 10, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineMaxOp::fold(&v18, (uint64_t)&v19);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineMinOp::print((mlir::affine::AffineMinOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineMinOp::verify((mlir::affine::AffineMinOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineMaxOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.min", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04A8D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  char v10;
  llvm **v11;
  llvm *v13[2];
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0)
        v11 = v13;
      else
        v11 = (llvm **)v13[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v13[0], v13[1]);
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineMinOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineMinOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  mlir::Operation *v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineMinOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineMinOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineMinOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMinOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::affine::AffineMinOp>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Context;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v18 = a1;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(a1 + 44);
  v10 = (uint64_t *)(a1 + 16 * ((v9 >> 23) & 1) + 64);
  v11 = v9 & 0x7FFFFF;
  if ((v9 & 0x7FFFFF) != 0)
  {
    v12 = (((unint64_t)v10 + ((v9 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  mlir::ValueRange::ValueRange(v26, v12, v11);
  v19 = v8;
  v20[0] = 0;
  v21 = 0;
  v22 = *v10;
  v23 = *(_OWORD *)v26;
  if (v8)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v19);
    if (v21)
      v21 = 0;
    mlir::OperationName::OperationName(v20, "affine.min", 10, Context);
    v21 = 1;
  }
  v24 = a2;
  v25 = a3;
  v14 = mlir::affine::AffineMinOp::fold(&v18, (uint64_t)&v19);
  v15 = v14;
  if (v14 < 8 || a1 - 16 == (v14 & ((uint64_t)(v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
    return v14 > 7;
  v16 = *(unsigned int *)(a4 + 8);
  if (v16 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v15;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineMinOp::print((mlir::affine::AffineMinOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineApplyOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineMinOp::verify((mlir::affine::AffineMinOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineMinOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::IndexType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.parallel", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04AE50;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::affine::AffineParallelOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::affine::AffineParallelOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffineParallelOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context;
  uint64_t *v6;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::affine::AffineParallelOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffineParallelOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getOpPropertyByteSize()
{
  return 48;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::initProperties(uint64_t a1, uint64_t a2, _OWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[2];
    a3[1] = a4[1];
    a3[2] = v5;
    *a3 = v4;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineParallelOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineParallelOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  if (a3[3] != a2[3])
    return 0;
  if (a3[4] == a2[4])
    return a3[5] == a2[5];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineParallelOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::GlobalOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[3]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[4]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[5]);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSpeculatability()
{
  return 2;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x68uLL, 0x80040FDC59921uLL);
  *v2 = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::isDefinedOutsideOfLoop;
  v2[1] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopRegions;
  v2[2] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::moveOutOfLoop;
  v2[3] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::promoteIfSingleIteration;
  v2[4] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleInductionVar;
  v2[5] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleLowerBound;
  v2[6] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleStep;
  v2[7] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleUpperBound;
  v2[8] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getInitsMutable;
  v2[9] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getRegionIterArgs;
  v2[10] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getYieldedValuesMutable;
  v2[11] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopResults;
  v2[12] = mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::replaceWithAdditionalYields;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[116], v2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::isDefinedOutsideOfLoop(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  Operation *v4;
  uint64_t v6;

  v6 = a3;
  v4 = (Operation *)*((_QWORD *)mlir::Value::getParentRegion((mlir::Value *)&v6) + 2);
  if (v4 == a2)
    return 0;
  else
    return mlir::Operation::isProperAncestor(a2, v4) ^ 1;
}

double mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopRegions@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *(unsigned int *)(a1 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = ((a1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  else
    v3 = 0;
  a2[2] = v3;
  *a2 = a2 + 2;
  *(_QWORD *)&result = 0x600000001;
  a2[1] = 0x600000001;
  return result;
}

mlir::Operation *mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::moveOutOfLoop(int a1, mlir::Operation *a2, mlir::Operation *this)
{
  return mlir::Operation::moveBefore(this, a2);
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::promoteIfSingleIteration()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleInductionVar()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleLowerBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleStep()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getSingleUpperBound()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getInitsMutable()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getRegionIterArgs()
{
  return 0;
}

uint64_t mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getYieldedValuesMutable()
{
  return 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::getLoopResults(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::detail::LoopLikeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineParallelOp>::replaceWithAdditionalYields(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::foldHook<mlir::affine::AffineParallelOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::foldHook<mlir::affine::AffineParallelOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t Context;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v13 = a1;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v7 = (__int128 *)(a1 + 16 * ((v6 >> 23) & 1) + 64);
  else
    v7 = 0;
  v8 = v6 & 0x7FFFFF;
  if ((v6 & 0x7FFFFF) != 0)
  {
    v9 = ((a1 + 16 * ((v6 >> 23) & 1) + 64 + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  mlir::ValueRange::ValueRange(v23, v9, v8);
  v14 = v5;
  v15[0] = 0;
  v16 = 0;
  v10 = v7[1];
  v17 = *v7;
  v18 = v10;
  v19 = v7[2];
  v20 = *(_OWORD *)v23;
  if (v5)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v14);
    if (v16)
      v16 = 0;
    mlir::OperationName::OperationName(v15, "affine.parallel", 15, Context);
    v16 = 1;
  }
  v21 = a2;
  v22 = a3;
  return mlir::affine::AffineParallelOp::fold(&v13);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD *v41;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  const char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  const char *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  const char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  const char *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  const char *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  const char *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  const char *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  const char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  unint64_t v288;

  v2 = &unk_254519000;
  if ((v1 & 1) == 0)
  {
    v273 = a1;
    v2 = (_QWORD *)&unk_254519000;
    v57 = v56;
    a1 = v273;
    if (v57)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v288 = 81;
      v58 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v58)
        v59 = v58;
      else
        v59 = v288;
      v60 = &v287[v59];
      v61 = v288 - v59;
      if (v288 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v288 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v2 = (_QWORD *)&unk_254519000;
      a1 = v273;
    }
  }
  v3 = v2[415];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v260 = v3;
    v274 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v66 = v65;
    v3 = v260;
    a1 = v274;
    if (v66)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v288 = 87;
      v67 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v67)
        v68 = v67;
      else
        v68 = v288;
      v69 = &v287[v68];
      v70 = v288 - v68;
      if (v288 - v68 >= 0x12)
        v71 = 18;
      else
        v71 = v288 - v68;
      v72 = v70 - v71;
      if (v72 >= v72 - 1)
        v73 = v72 - 1;
      else
        v73 = v72;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v69[v71], v73);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v260;
      a1 = v274;
    }
  }
  v6 = v5[427];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v261 = v3;
    v275 = a1;
    v248 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v248;
    v3 = v261;
    v75 = v74;
    a1 = v275;
    if (v75)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v288 = 86;
      v76 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v76)
        v77 = v76;
      else
        v77 = v288;
      v78 = &v287[v77];
      v79 = v288 - v77;
      if (v288 - v77 >= 0x12)
        v80 = 18;
      else
        v80 = v288 - v77;
      v81 = v79 - v80;
      if (v81 >= v81 - 1)
        v82 = v81 - 1;
      else
        v82 = v81;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v78[v80], v82);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v248;
      v3 = v261;
      a1 = v275;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v262 = v3;
    v276 = a1;
    v237 = v9;
    v249 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v237;
    v6 = v249;
    v84 = v83;
    v3 = v262;
    a1 = v276;
    if (v84)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v288 = 88;
      v85 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v85)
        v86 = v85;
      else
        v86 = v288;
      v87 = &v287[v86];
      v88 = v288 - v86;
      if (v288 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v288 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v237;
      v6 = v249;
      v3 = v262;
      a1 = v276;
    }
  }
  v12 = v11[73];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v263 = v3;
    v277 = a1;
    v238 = v9;
    v250 = v6;
    v227 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v227;
    v9 = v238;
    v6 = v250;
    v93 = v92;
    v3 = v263;
    a1 = v277;
    if (v93)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v288 = 83;
      v94 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v94)
        v95 = v94;
      else
        v95 = v288;
      v96 = &v287[v95];
      v97 = v288 - v95;
      if (v288 - v95 >= 0x12)
        v98 = 18;
      else
        v98 = v288 - v95;
      v99 = v97 - v98;
      if (v99 >= v99 - 1)
        v100 = v99 - 1;
      else
        v100 = v99;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v96[v98], v100);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v227;
      v9 = v238;
      v6 = v250;
      v3 = v263;
      a1 = v277;
    }
  }
  v15 = v14[433];
  v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v264 = v3;
    v278 = a1;
    v239 = v9;
    v251 = v6;
    v218 = v15;
    v228 = v12;
    v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v15 = v218;
    v12 = v228;
    v9 = v239;
    v6 = v251;
    v102 = v101;
    v3 = v264;
    a1 = v278;
    if (v102)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine:"
             ":AffineYieldOp>::Impl<Empty>]";
      v288 = 136;
      v103 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v103)
        v104 = v103;
      else
        v104 = v288;
      v105 = &v287[v104];
      v106 = v288 - v104;
      if (v288 - v104 >= 0x12)
        v107 = 18;
      else
        v107 = v288 - v104;
      v108 = v106 - v107;
      if (v108 >= v108 - 1)
        v109 = v108 - 1;
      else
        v109 = v108;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v105[v107], v109);
      v17 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v15 = v218;
      v12 = v228;
      v9 = v239;
      v6 = v251;
      v3 = v264;
      a1 = v278;
    }
  }
  v18 = v17[264];
  v20 = &unk_254519000;
  if ((v19 & 1) == 0)
  {
    v265 = v3;
    v279 = a1;
    v240 = v9;
    v252 = v6;
    v219 = v15;
    v229 = v12;
    v210 = v18;
    v20 = (_QWORD *)&unk_254519000;
    v18 = v210;
    v15 = v219;
    v12 = v229;
    v9 = v240;
    v6 = v252;
    v111 = v110;
    v3 = v265;
    a1 = v279;
    if (v111)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v288 = 84;
      v112 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v112)
        v113 = v112;
      else
        v113 = v288;
      v114 = &v287[v113];
      v115 = v288 - v113;
      if (v288 - v113 >= 0x12)
        v116 = 18;
      else
        v116 = v288 - v113;
      v117 = v115 - v116;
      if (v117 >= v117 - 1)
        v118 = v117 - 1;
      else
        v118 = v117;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v114[v116], v118);
      v20 = (_QWORD *)&unk_254519000;
      v18 = v210;
      v15 = v219;
      v12 = v229;
      v9 = v240;
      v6 = v252;
      v3 = v265;
      a1 = v279;
    }
  }
  v21 = v20[423];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v266 = v3;
    v280 = a1;
    v241 = v9;
    v253 = v6;
    v220 = v15;
    v230 = v12;
    v203 = v21;
    v211 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v203;
    v18 = v211;
    v15 = v220;
    v12 = v230;
    v9 = v241;
    v6 = v253;
    v120 = v119;
    v3 = v266;
    a1 = v280;
    if (v120)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v288 = 89;
      v121 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v121)
        v122 = v121;
      else
        v122 = v288;
      v123 = &v287[v122];
      v124 = v288 - v122;
      if (v288 - v122 >= 0x12)
        v125 = 18;
      else
        v125 = v288 - v122;
      v126 = v124 - v125;
      if (v126 >= v126 - 1)
        v127 = v126 - 1;
      else
        v127 = v126;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v123[v125], v127);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v203;
      v18 = v211;
      v15 = v220;
      v12 = v230;
      v9 = v241;
      v6 = v253;
      v3 = v266;
      a1 = v280;
    }
  }
  v24 = v23[310];
  v26 = &unk_25451B000;
  if ((v25 & 1) == 0)
  {
    v267 = v3;
    v281 = a1;
    v242 = v9;
    v254 = v6;
    v221 = v15;
    v231 = v12;
    v204 = v21;
    v212 = v18;
    v197 = v24;
    v26 = (_QWORD *)&unk_25451B000;
    v24 = v197;
    v21 = v204;
    v18 = v212;
    v15 = v221;
    v12 = v231;
    v9 = v242;
    v6 = v254;
    v129 = v128;
    v3 = v267;
    a1 = v281;
    if (v129)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      v288 = 96;
      v130 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v130)
        v131 = v130;
      else
        v131 = v288;
      v132 = &v287[v131];
      v133 = v288 - v131;
      if (v288 - v131 >= 0x12)
        v134 = 18;
      else
        v134 = v288 - v131;
      v135 = v133 - v134;
      if (v135 >= v135 - 1)
        v136 = v135 - 1;
      else
        v136 = v135;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v132[v134], v136);
      v26 = (_QWORD *)&unk_25451B000;
      v24 = v197;
      v21 = v204;
      v18 = v212;
      v15 = v221;
      v12 = v231;
      v9 = v242;
      v6 = v254;
      v3 = v267;
      a1 = v281;
    }
  }
  v27 = v26[55];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v268 = v3;
    v282 = a1;
    v243 = v9;
    v255 = v6;
    v222 = v15;
    v232 = v12;
    v205 = v21;
    v213 = v18;
    v192 = v27;
    v198 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v192;
    v24 = v198;
    v21 = v205;
    v18 = v213;
    v15 = v222;
    v12 = v232;
    v9 = v243;
    v6 = v255;
    v138 = v137;
    v3 = v268;
    a1 = v282;
    if (v138)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v288 = 95;
      v139 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v139)
        v140 = v139;
      else
        v140 = v288;
      v141 = &v287[v140];
      v142 = v288 - v140;
      if (v288 - v140 >= 0x12)
        v143 = 18;
      else
        v143 = v288 - v140;
      v144 = v142 - v143;
      if (v144 >= v144 - 1)
        v145 = v144 - 1;
      else
        v145 = v144;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v141[v143], v145);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v192;
      v24 = v198;
      v21 = v205;
      v18 = v213;
      v15 = v222;
      v12 = v232;
      v9 = v243;
      v6 = v255;
      v3 = v268;
      a1 = v282;
    }
  }
  v30 = v29[312];
  v32 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v31 & 1) == 0)
  {
    v269 = v3;
    v283 = a1;
    v244 = v9;
    v256 = v6;
    v223 = v15;
    v233 = v12;
    v206 = v21;
    v214 = v18;
    v193 = v27;
    v199 = v24;
    v188 = v30;
    v32 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v30 = v188;
    v27 = v193;
    v24 = v199;
    v21 = v206;
    v18 = v214;
    v15 = v223;
    v12 = v233;
    v9 = v244;
    v6 = v256;
    v147 = v146;
    v3 = v269;
    a1 = v283;
    if (v147)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::RecursivelySpeculatableImplTrait<Empty>]";
      v288 = 104;
      v148 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v148)
        v149 = v148;
      else
        v149 = v288;
      v150 = &v287[v149];
      v151 = v288 - v149;
      if (v288 - v149 >= 0x12)
        v152 = 18;
      else
        v152 = v288 - v149;
      v153 = v151 - v152;
      if (v153 >= v153 - 1)
        v154 = v153 - 1;
      else
        v154 = v153;
      mlir::detail::TypeIDResolver<mlir::OpTrait::RecursivelySpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RecursivelySpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v150[v152], v154);
      v32 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v30 = v188;
      v27 = v193;
      v24 = v199;
      v21 = v206;
      v18 = v214;
      v15 = v223;
      v12 = v233;
      v9 = v244;
      v6 = v256;
      v3 = v269;
      a1 = v283;
    }
  }
  v33 = v32[274];
  v35 = &unk_25451B000;
  if ((v34 & 1) == 0)
  {
    v270 = v3;
    v284 = a1;
    v245 = v9;
    v257 = v6;
    v224 = v15;
    v234 = v12;
    v207 = v21;
    v215 = v18;
    v194 = v27;
    v200 = v24;
    v185 = v33;
    v189 = v30;
    v35 = (_QWORD *)&unk_25451B000;
    v33 = v185;
    v30 = v189;
    v27 = v194;
    v24 = v200;
    v21 = v207;
    v18 = v215;
    v15 = v224;
    v12 = v234;
    v9 = v245;
    v6 = v257;
    v156 = v155;
    v3 = v270;
    a1 = v284;
    if (v156)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      v288 = 97;
      v157 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v157)
        v158 = v157;
      else
        v158 = v288;
      v159 = &v287[v158];
      v160 = v288 - v158;
      if (v288 - v158 >= 0x12)
        v161 = 18;
      else
        v161 = v288 - v158;
      v162 = v160 - v161;
      if (v162 >= v162 - 1)
        v163 = v162 - 1;
      else
        v163 = v162;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v159[v161], v163);
      v35 = (_QWORD *)&unk_25451B000;
      v33 = v185;
      v30 = v189;
      v27 = v194;
      v24 = v200;
      v21 = v207;
      v18 = v215;
      v15 = v224;
      v12 = v234;
      v9 = v245;
      v6 = v257;
      v3 = v270;
      a1 = v284;
    }
  }
  v36 = v35[219];
  v38 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v271 = v3;
    v285 = a1;
    v246 = v9;
    v258 = v6;
    v225 = v15;
    v235 = v12;
    v208 = v21;
    v216 = v18;
    v195 = v27;
    v201 = v24;
    v186 = v33;
    v190 = v30;
    v183 = v36;
    v38 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v36 = v183;
    v33 = v186;
    v30 = v190;
    v27 = v195;
    v24 = v201;
    v21 = v208;
    v18 = v216;
    v15 = v225;
    v12 = v235;
    v9 = v246;
    v6 = v258;
    v165 = v164;
    v3 = v271;
    a1 = v285;
    if (v165)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::LoopLikeOpInterface::Trait<Empty>]";
      v288 = 89;
      v166 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v166)
        v167 = v166;
      else
        v167 = v288;
      v168 = &v287[v167];
      v169 = v288 - v167;
      if (v288 - v167 >= 0x12)
        v170 = 18;
      else
        v170 = v288 - v167;
      v171 = v169 - v170;
      if (v171 >= v171 - 1)
        v172 = v171 - 1;
      else
        v172 = v171;
      mlir::detail::TypeIDResolver<mlir::LoopLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::LoopLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v168[v170], v172);
      v38 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v36 = v183;
      v33 = v186;
      v30 = v190;
      v27 = v195;
      v24 = v201;
      v21 = v208;
      v18 = v216;
      v15 = v225;
      v12 = v235;
      v9 = v246;
      v6 = v258;
      v3 = v271;
      a1 = v285;
    }
  }
  v39 = v38[122];
  v41 = &unk_25451B000;
  if ((v40 & 1) == 0)
  {
    v272 = v3;
    v286 = a1;
    v247 = v9;
    v259 = v6;
    v226 = v15;
    v236 = v12;
    v209 = v21;
    v217 = v18;
    v196 = v27;
    v202 = v24;
    v187 = v33;
    v191 = v30;
    v182 = v39;
    v184 = v36;
    v41 = (_QWORD *)&unk_25451B000;
    v39 = v182;
    v36 = v184;
    v33 = v187;
    v30 = v191;
    v27 = v196;
    v24 = v202;
    v21 = v209;
    v18 = v217;
    v15 = v226;
    v12 = v236;
    v9 = v247;
    v6 = v259;
    v174 = v173;
    v3 = v272;
    a1 = v286;
    if (v174)
    {
      v287 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v288 = 91;
      v175 = llvm::StringRef::find((uint64_t *)&v287, "DesiredTypeName = ", 0x12uLL, 0);
      if (v288 >= v175)
        v176 = v175;
      else
        v176 = v288;
      v177 = &v287[v176];
      v178 = v288 - v176;
      if (v288 - v176 >= 0x12)
        v179 = 18;
      else
        v179 = v288 - v176;
      v180 = v178 - v179;
      if (v180 >= v180 - 1)
        v181 = v180 - 1;
      else
        v181 = v180;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v177[v179], v181);
      v41 = (_QWORD *)&unk_25451B000;
      v39 = v182;
      v36 = v184;
      v33 = v187;
      v30 = v191;
      v27 = v196;
      v24 = v202;
      v21 = v209;
      v18 = v217;
      v15 = v226;
      v12 = v236;
      v9 = v247;
      v6 = v259;
      v3 = v272;
      a1 = v286;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v36 == a1
      || v39 == a1
      || v41[45] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::affine::AffineParallelOp::print((mlir::affine::AffineParallelOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
    return 0;
  v5 = a1;
  if (!mlir::affine::AffineParallelOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::affine::AffineParallelOp::verify((mlir::affine::AffineParallelOp *)&v5);
}

BOOL mlir::Op<mlir::affine::AffineParallelOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::AutomaticAllocationScope,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::RecursivelySpeculatableImplTrait,mlir::OpTrait::HasRecursiveMemoryEffects,mlir::LoopLikeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants(mlir::detail *a1)
{
  mlir::Operation *v2;

  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyLoopLikeOpInterface(a1, v2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffinePrefetchOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, mlir::Attribute *a2)@<X8>)
{
  *a1 = mlir::affine::AffinePrefetchOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, mlir::Attribute *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                       + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::affine::AffinePrefetchOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::affine::AffinePrefetchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if (*v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"isDataCache", 11, *v5);
  v6 = v5[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"isWrite", 7, v6);
  v7 = v5[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"localityHint", 12, v7);
  v8 = v5[3];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::affine::AffinePrefetchOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getOpPropertyByteSize()
{
  return 32;
}

double mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::initProperties(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *a3 = *a4;
    a3[1] = v5;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffinePrefetchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffinePrefetchOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::copyProperties(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] == a2[2])
    return a3[3] == a2[3];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffinePrefetchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::FuncOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::BoolAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3 + 3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[2]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[3]);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::getAffineMapAttrForMemRef;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[256], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffinePrefetchOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "map";
  v7[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  ZinMirCacheTensors::ZinMirCacheTensors(&v9, v4, *(_QWORD *)(v5 + 24));
  return v9;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::foldHook<mlir::affine::AffinePrefetchOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::foldHook<mlir::affine::AffinePrefetchOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t Context;
  uint64_t v14;
  _BYTE v15[8];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22[3];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44)))
    v8 = (__int128 *)(a1 + 16 * ((v7 >> 23) & 1) + 64);
  else
    v8 = 0;
  v9 = v7 & 0x7FFFFF;
  if ((v7 & 0x7FFFFF) != 0)
  {
    v10 = ((a1 + 16 * ((v7 >> 23) & 1) + 64 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  mlir::ValueRange::ValueRange(v22, v10, v9);
  v14 = v6;
  v15[0] = 0;
  v16 = 0;
  v11 = v8[1];
  v17 = *v8;
  v18 = v11;
  v19 = *(_OWORD *)v22;
  if (v6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v14);
    if (v16)
      v16 = 0;
    mlir::OperationName::OperationName(v15, "affine.prefetch", 15, Context);
    v16 = 1;
  }
  v20 = a2;
  v21 = a3;
  return mlir::memref::foldMemRefCast(a1, 0);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v112;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = (_QWORD *)&unk_254519000;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v120 = 83;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v120 = 97;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[423];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[310];
  v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v120 = 102;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v20[258] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffinePrefetchOp::print((mlir::affine::AffinePrefetchOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffinePrefetchOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffinePrefetchOp::verify((mlir::affine::AffinePrefetchOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::affine::AffinePrefetchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.store", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineStoreOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04AB30;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm **v7;
  llvm *v9[2];
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v9, a2, a3, a4);
  v6 = v10;
  if (v10 >= 8)
  {
    if ((v10 & 4) != 0)
    {
      if ((v10 & 2) != 0)
        v7 = v9;
      else
        v7 = (llvm **)v9[0];
      (*(void (**)(uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7, v4);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v9[0], v9[1]);
  }
  return v5;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineStoreOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineStoreOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineStoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  *v2 = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getValueToStore;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
}

unint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 64;
  else
    return 64;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getValueToStore(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMapAttrForMemRef;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[256], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  ZinMirCacheTensors::ZinMirCacheTensors(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineStoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldHook<mlir::affine::AffineStoreOp>(a2, a3, a4);
}

uint64_t mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::foldHook<mlir::affine::AffineStoreOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t Context;
  uint64_t v13;
  _BYTE v14[8];
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned int *)(a1 + 44);
  v8 = (uint64_t *)(a1 + 16 * ((v7 >> 23) & 1) + 64);
  v9 = v7 & 0x7FFFFF;
  if ((v7 & 0x7FFFFF) != 0)
  {
    v10 = (((unint64_t)v8 + ((v7 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  mlir::ValueRange::ValueRange(v20, v10, v9);
  v13 = v6;
  v14[0] = 0;
  v15 = 0;
  v16 = *v8;
  v17 = *(_OWORD *)v20;
  if (v6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v13);
    if (v15)
      v15 = 0;
    mlir::OperationName::OperationName(v14, "affine.store", 12, Context);
    v15 = 1;
  }
  v18 = a2;
  v19 = a3;
  return mlir::memref::foldMemRefCast(a1, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24));
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v186 = 97;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[431];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[310];
  v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface::Trait<Empty>]";
      v186 = 100;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineWriteOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[308];
  v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v186 = 102;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[258];
  v26 = &unk_25451B000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451B000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v186 = 91;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451B000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[45];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineStoreOp::print((mlir::affine::AffineStoreOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineStoreOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineStoreOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.vector_load", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineVectorLoadOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04AFE0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineVectorLoadOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineVectorLoadOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorLoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  *v2 = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getValue;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      v15 = 85;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[276], v2);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

unint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 32;
  else
    return 32;
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getValue(uint64_t a1, uint64_t a2)
{
  return a2 - 16;
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMapAttrForMemRef;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[256], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  ZinMirCacheTensors::ZinMirCacheTensors(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorLoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  const char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  const char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  const char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  const char *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  const char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  const char *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  const char *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  unint64_t v210;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v198 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v45 = v44;
    a1 = v198;
    if (v45)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v210 = 83;
      v46 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v46)
        v47 = v46;
      else
        v47 = v210;
      v48 = &v209[v47];
      v49 = v210 - v47;
      if (v210 - v47 >= 0x12)
        v50 = 18;
      else
        v50 = v210 - v47;
      v51 = v49 - v50;
      if (v51 >= v51 - 1)
        v52 = v51 - 1;
      else
        v52 = v51;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v48[v50], v52);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v198;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v188 = v3;
    v199 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v54 = v53;
    v3 = v188;
    a1 = v199;
    if (v54)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v210 = 81;
      v55 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v55)
        v56 = v55;
      else
        v56 = v210;
      v57 = &v209[v56];
      v58 = v210 - v56;
      if (v210 - v56 >= 0x12)
        v59 = 18;
      else
        v59 = v210 - v56;
      v60 = v58 - v59;
      if (v60 >= v60 - 1)
        v61 = v60 - 1;
      else
        v61 = v60;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v57[v59], v61);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v188;
      a1 = v199;
    }
  }
  v6 = v5[15];
  v8 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v189 = v3;
    v200 = a1;
    v179 = v6;
    v8 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v6 = v179;
    v3 = v189;
    v63 = v62;
    a1 = v200;
    if (v63)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl<Empty>]";
      v210 = 110;
      v64 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v64)
        v65 = v64;
      else
        v65 = v210;
      v66 = &v209[v65];
      v67 = v210 - v65;
      if (v210 - v65 >= 0x12)
        v68 = 18;
      else
        v68 = v210 - v65;
      v69 = v67 - v68;
      if (v69 >= v69 - 1)
        v70 = v69 - 1;
      else
        v70 = v69;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v66[v68], v70);
      v8 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v6 = v179;
      v3 = v189;
      a1 = v200;
    }
  }
  v9 = v8[312];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v190 = v3;
    v201 = a1;
    v180 = v6;
    v171 = v9;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v171;
    v6 = v180;
    v3 = v190;
    v72 = v71;
    a1 = v201;
    if (v72)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v210 = 86;
      v73 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v73)
        v74 = v73;
      else
        v74 = v210;
      v75 = &v209[v74];
      v76 = v210 - v74;
      if (v210 - v74 >= 0x12)
        v77 = 18;
      else
        v77 = v210 - v74;
      v78 = v76 - v77;
      if (v78 >= v78 - 1)
        v79 = v78 - 1;
      else
        v79 = v78;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v75[v77], v79);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v171;
      v6 = v180;
      v3 = v190;
      a1 = v201;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v191 = v3;
    v202 = a1;
    v181 = v6;
    v164 = v12;
    v172 = v9;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v164;
    v9 = v172;
    v6 = v181;
    v3 = v191;
    v81 = v80;
    a1 = v202;
    if (v81)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v210 = 97;
      v82 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v82)
        v83 = v82;
      else
        v83 = v210;
      v84 = &v209[v83];
      v85 = v210 - v83;
      if (v210 - v83 >= 0x12)
        v86 = 18;
      else
        v86 = v210 - v83;
      v87 = v85 - v86;
      if (v87 >= v87 - 1)
        v88 = v87 - 1;
      else
        v88 = v87;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v84[v86], v88);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v164;
      v9 = v172;
      v6 = v181;
      v3 = v191;
      a1 = v202;
    }
  }
  v15 = v14[423];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v192 = v3;
    v203 = a1;
    v182 = v6;
    v165 = v12;
    v173 = v9;
    v158 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v158;
    v12 = v165;
    v9 = v173;
    v6 = v182;
    v3 = v192;
    v90 = v89;
    a1 = v203;
    if (v90)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v210 = 84;
      v91 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v91)
        v92 = v91;
      else
        v92 = v210;
      v93 = &v209[v92];
      v94 = v210 - v92;
      if (v210 - v92 >= 0x12)
        v95 = 18;
      else
        v95 = v210 - v92;
      v96 = v94 - v95;
      if (v96 >= v96 - 1)
        v97 = v96 - 1;
      else
        v97 = v96;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v93[v95], v97);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v158;
      v12 = v165;
      v9 = v173;
      v6 = v182;
      v3 = v192;
      a1 = v203;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v193 = v3;
    v204 = a1;
    v183 = v6;
    v166 = v12;
    v174 = v9;
    v153 = v18;
    v159 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v153;
    v15 = v159;
    v12 = v166;
    v9 = v174;
    v6 = v183;
    v3 = v193;
    v99 = v98;
    a1 = v204;
    if (v99)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v210 = 89;
      v100 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v100)
        v101 = v100;
      else
        v101 = v210;
      v102 = &v209[v101];
      v103 = v210 - v101;
      if (v210 - v101 >= 0x12)
        v104 = 18;
      else
        v104 = v210 - v101;
      v105 = v103 - v104;
      if (v105 >= v105 - 1)
        v106 = v105 - 1;
      else
        v106 = v105;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v102[v104], v106);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v153;
      v15 = v159;
      v12 = v166;
      v9 = v174;
      v6 = v183;
      v3 = v193;
      a1 = v204;
    }
  }
  v21 = v20[310];
  v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v194 = v3;
    v205 = a1;
    v184 = v6;
    v167 = v12;
    v175 = v9;
    v154 = v18;
    v160 = v15;
    v149 = v21;
    v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v21 = v149;
    v18 = v154;
    v15 = v160;
    v12 = v167;
    v9 = v175;
    v6 = v184;
    v3 = v194;
    v108 = v107;
    a1 = v205;
    if (v108)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface::Trait<Empty>]";
      v210 = 99;
      v109 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v109)
        v110 = v109;
      else
        v110 = v210;
      v111 = &v209[v110];
      v112 = v210 - v110;
      if (v210 - v110 >= 0x12)
        v113 = 18;
      else
        v113 = v210 - v110;
      v114 = v112 - v113;
      if (v114 >= v114 - 1)
        v115 = v114 - 1;
      else
        v115 = v114;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineReadOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v111[v113], v115);
      v23 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v21 = v149;
      v18 = v154;
      v15 = v160;
      v12 = v167;
      v9 = v175;
      v6 = v184;
      v3 = v194;
      a1 = v205;
    }
  }
  v24 = v23[278];
  v26 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v195 = v3;
    v206 = a1;
    v185 = v6;
    v168 = v12;
    v176 = v9;
    v155 = v18;
    v161 = v15;
    v146 = v24;
    v150 = v21;
    v26 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v24 = v146;
    v21 = v150;
    v18 = v155;
    v15 = v161;
    v12 = v168;
    v9 = v176;
    v6 = v185;
    v3 = v195;
    v117 = v116;
    a1 = v206;
    if (v117)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface::Trait<Empty>]";
      v210 = 102;
      v118 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v118)
        v119 = v118;
      else
        v119 = v210;
      v120 = &v209[v119];
      v121 = v210 - v119;
      if (v210 - v119 >= 0x12)
        v122 = 18;
      else
        v122 = v210 - v119;
      v123 = v121 - v122;
      if (v123 >= v123 - 1)
        v124 = v123 - 1;
      else
        v124 = v123;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::affine::AffineMapAccessInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v120[v122], v124);
      v26 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v24 = v146;
      v21 = v150;
      v18 = v155;
      v15 = v161;
      v12 = v168;
      v9 = v176;
      v6 = v185;
      v3 = v195;
      a1 = v206;
    }
  }
  v27 = v26[258];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v196 = v3;
    v207 = a1;
    v186 = v6;
    v169 = v12;
    v177 = v9;
    v156 = v18;
    v162 = v15;
    v147 = v24;
    v151 = v21;
    v144 = v27;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v144;
    v24 = v147;
    v21 = v151;
    v18 = v156;
    v15 = v162;
    v12 = v169;
    v9 = v177;
    v6 = v186;
    v3 = v196;
    v126 = v125;
    a1 = v207;
    if (v126)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v210 = 91;
      v127 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v127)
        v128 = v127;
      else
        v128 = v210;
      v129 = &v209[v128];
      v130 = v210 - v128;
      if (v210 - v128 >= 0x12)
        v131 = 18;
      else
        v131 = v210 - v128;
      v132 = v130 - v131;
      if (v132 >= v132 - 1)
        v133 = v132 - 1;
      else
        v133 = v132;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v129[v131], v133);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v144;
      v24 = v147;
      v21 = v151;
      v18 = v156;
      v15 = v162;
      v12 = v169;
      v9 = v177;
      v6 = v186;
      v3 = v196;
      a1 = v207;
    }
  }
  v30 = v29[45];
  v32 = &unk_25451A000;
  if ((v31 & 1) == 0)
  {
    v197 = v3;
    v208 = a1;
    v187 = v6;
    v170 = v12;
    v178 = v9;
    v157 = v18;
    v163 = v15;
    v148 = v24;
    v152 = v21;
    v143 = v30;
    v145 = v27;
    v32 = (_QWORD *)&unk_25451A000;
    v30 = v143;
    v27 = v145;
    v24 = v148;
    v21 = v152;
    v18 = v157;
    v15 = v163;
    v12 = v170;
    v9 = v178;
    v6 = v187;
    v3 = v197;
    v135 = v134;
    a1 = v208;
    if (v135)
    {
      v209 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v210 = 93;
      v136 = llvm::StringRef::find((uint64_t *)&v209, "DesiredTypeName = ", 0x12uLL, 0);
      if (v210 >= v136)
        v137 = v136;
      else
        v137 = v210;
      v138 = &v209[v137];
      v139 = v210 - v137;
      if (v210 - v137 >= 0x12)
        v140 = 18;
      else
        v140 = v210 - v137;
      v141 = v139 - v140;
      if (v141 >= v141 - 1)
        v142 = v141 - 1;
      else
        v142 = v141;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v138[v140], v142);
      v32 = (_QWORD *)&unk_25451A000;
      v30 = v143;
      v27 = v145;
      v24 = v148;
      v21 = v152;
      v18 = v157;
      v15 = v163;
      v12 = v170;
      v9 = v178;
      v6 = v187;
      v3 = v197;
      a1 = v208;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v32[21] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineVectorLoadOp::print((mlir::affine::AffineVectorLoadOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineVectorLoadOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineVectorLoadOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineVectorLoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::VectorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineReadOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.vector_store", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineVectorStoreOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04B0A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::foldHook()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  llvm **v4;
  llvm *v6[2];
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0)
        v4 = v6;
      else
        v4 = (llvm **)v6[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getCanonicalizationPatterns(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  mlir::affine::AffineVectorStoreOp::getCanonicalizationPatterns(a2, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineVectorStoreOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  mlir::OpAsmPrinter *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 3 && (*(_WORD *)a3 == 24941 ? (v7 = *(_BYTE *)(a3 + 2) == 112) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 3 && *(_WORD *)result == 24941 && *(_BYTE *)(result + 2) == 112)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"map", 3, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps13(v7, (const void **)"map", (const char *)3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::affine::AffineApplyOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::affine::AffineApplyOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineVectorStoreOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::AffineMapAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x28uLL, 0x800402FCC0CB6uLL);
  *v2 = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRef;
  v2[1] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRefType;
  v2[2] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMapOperands;
  v2[3] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMap;
  v2[4] = mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getValueToStore;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      v15 = 86;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[306], v2);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRef(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
}

unint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMemRefType(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getMapOperands(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    return *(_QWORD *)(a2 + 72) + 64;
  else
    return 64;
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v3);
}

uint64_t mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getValueToStore(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
}

void mlir::detail::InterfaceMap::insertModel<mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMapAttrForMemRef;
  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineMapAccessInterface]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::affine::AffineMapAccessInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[256], v2);
}

uint64_t mlir::affine::detail::AffineMapAccessInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getAffineMapAttrForMemRef(uint64_t a1, uint64_t a2)
{
  mlir::StringAttr *Context;
  uint64_t v4;
  _QWORD v6[4];
  __int16 v7;
  uint64_t v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = 261;
  v6[0] = "map";
  v6[1] = 3;
  v4 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v6);
  ZinMirCacheTensors::ZinMirCacheTensors(&v8, v4, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
  return v8;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineVectorStoreOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2;
  mlir::memref::StoreOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::affine::AffineVectorStoreOp::print((mlir::affine::AffineVectorStoreOp *)&v8, a3);
}

BOOL mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::affine::AffineVectorStoreOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::affine::AffineVectorStoreOp::verify((uint64_t **)&v6);
}

uint64_t mlir::Op<mlir::affine::AffineVectorStoreOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::affine::AffineWriteOpInterface::Trait,mlir::affine::AffineMapAccessInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"affine.yield", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::affine::AffineYieldOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C04ABF8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  llvm **v2;
  llvm *v4[2];
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0)
        v2 = v4;
      else
        v2 = (llvm **)v4[0];
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::affine::AffineYieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::affine::AffineYieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSuccessorRegions;
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_254519000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[393], v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  return mlir::MutableOperandRange::MutableOperandRange(a2, a1);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::affine::AffineYieldOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Block *v6;
  uint64_t ParentOp;
  uint64_t v9;
  mlir::Block *v10;
  unint64_t Parent;
  uint64_t v13;
  uint64_t v14;

  v6 = *(mlir::Block **)(a2 + 16);
  if (v6)
  {
    ParentOp = mlir::Block::getParentOp(v6);
    v9 = ParentOp;
    if (ParentOp)
      ParentOp = mlir::OpInterface<mlir::RegionBranchOpInterface,mlir::detail::RegionBranchOpInterfaceInterfaceTraits>::getInterfaceFor(ParentOp);
    v10 = *(mlir::Block **)(a2 + 16);
    v13 = v9;
    v14 = ParentOp;
    if (v10)
      Parent = mlir::Block::getParent(v10);
    else
      Parent = 0;
  }
  else
  {
    Parent = 0;
    v13 = 0;
    v14 = 0;
  }
  return mlir::BranchOpInterface::getSuccessorForOperands(&v13, Parent, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  const char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  const char *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  const char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  const char *v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  const char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  const char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  unint64_t v235;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v222 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v49 = v48;
    a1 = v222;
    if (v49)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v235 = 83;
      v50 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v50)
        v51 = v50;
      else
        v51 = v235;
      v52 = &v234[v51];
      v53 = v235 - v51;
      if (v235 - v51 >= 0x12)
        v54 = 18;
      else
        v54 = v235 - v51;
      v55 = v53 - v54;
      if (v55 >= v55 - 1)
        v56 = v55 - 1;
      else
        v56 = v55;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v222;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v211 = v3;
    v223 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v58 = v57;
    v3 = v211;
    a1 = v223;
    if (v58)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v235 = 83;
      v59 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v59)
        v60 = v59;
      else
        v60 = v235;
      v61 = &v234[v60];
      v62 = v235 - v60;
      if (v235 - v60 >= 0x12)
        v63 = 18;
      else
        v63 = v235 - v60;
      v64 = v62 - v63;
      if (v64 >= v64 - 1)
        v65 = v64 - 1;
      else
        v65 = v64;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v211;
      a1 = v223;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v212 = v3;
    v224 = a1;
    v201 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v201;
    v3 = v212;
    v67 = v66;
    a1 = v224;
    if (v67)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v235 = 86;
      v68 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v68)
        v69 = v68;
      else
        v69 = v235;
      v70 = &v234[v69];
      v71 = v235 - v69;
      if (v235 - v69 >= 0x12)
        v72 = 18;
      else
        v72 = v235 - v69;
      v73 = v71 - v72;
      if (v73 >= v73 - 1)
        v74 = v73 - 1;
      else
        v74 = v73;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v201;
      v3 = v212;
      a1 = v224;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v213 = v3;
    v225 = a1;
    v202 = v6;
    v192 = v9;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v192;
    v6 = v202;
    v3 = v213;
    v76 = v75;
    a1 = v225;
    if (v76)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v235 = 88;
      v77 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v77)
        v78 = v77;
      else
        v78 = v235;
      v79 = &v234[v78];
      v80 = v235 - v78;
      if (v235 - v78 >= 0x12)
        v81 = 18;
      else
        v81 = v235 - v78;
      v82 = v80 - v81;
      if (v82 >= v82 - 1)
        v83 = v82 - 1;
      else
        v83 = v82;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v192;
      v6 = v202;
      v3 = v213;
      a1 = v225;
    }
  }
  v12 = v11[73];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v214 = v3;
    v226 = a1;
    v203 = v6;
    v184 = v12;
    v193 = v9;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v184;
    v9 = v193;
    v6 = v203;
    v3 = v214;
    v85 = v84;
    a1 = v226;
    if (v85)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v235 = 84;
      v86 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v86)
        v87 = v86;
      else
        v87 = v235;
      v88 = &v234[v87];
      v89 = v235 - v87;
      if (v235 - v87 >= 0x12)
        v90 = 18;
      else
        v90 = v235 - v87;
      v91 = v89 - v90;
      if (v91 >= v91 - 1)
        v92 = v91 - 1;
      else
        v92 = v91;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v184;
      v9 = v193;
      v6 = v203;
      v3 = v214;
      a1 = v226;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v215 = v3;
    v227 = a1;
    v204 = v6;
    v185 = v12;
    v194 = v9;
    v177 = v15;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v177;
    v12 = v185;
    v9 = v194;
    v6 = v204;
    v3 = v215;
    v94 = v93;
    a1 = v227;
    if (v94)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v235 = 95;
      v95 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v95)
        v96 = v95;
      else
        v96 = v235;
      v97 = &v234[v96];
      v98 = v235 - v96;
      if (v235 - v96 >= 0x12)
        v99 = 18;
      else
        v99 = v235 - v96;
      v100 = v98 - v99;
      if (v100 >= v100 - 1)
        v101 = v100 - 1;
      else
        v101 = v100;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v177;
      v12 = v185;
      v9 = v194;
      v6 = v204;
      v3 = v215;
      a1 = v227;
    }
  }
  v18 = v17[312];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v216 = v3;
    v228 = a1;
    v205 = v6;
    v186 = v12;
    v195 = v9;
    v171 = v18;
    v178 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v171;
    v15 = v178;
    v12 = v186;
    v9 = v195;
    v6 = v205;
    v3 = v216;
    v103 = v102;
    a1 = v228;
    if (v103)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v235 = 99;
      v104 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v104)
        v105 = v104;
      else
        v105 = v235;
      v106 = &v234[v105];
      v107 = v235 - v105;
      if (v235 - v105 >= 0x12)
        v108 = 18;
      else
        v108 = v235 - v105;
      v109 = v107 - v108;
      if (v109 >= v109 - 1)
        v110 = v109 - 1;
      else
        v110 = v109;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v171;
      v15 = v178;
      v12 = v186;
      v9 = v195;
      v6 = v205;
      v3 = v216;
      a1 = v228;
    }
  }
  v21 = v20[314];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v217 = v3;
    v229 = a1;
    v206 = v6;
    v187 = v12;
    v196 = v9;
    v172 = v18;
    v179 = v15;
    v166 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v166;
    v18 = v172;
    v15 = v179;
    v12 = v187;
    v9 = v196;
    v6 = v206;
    v3 = v217;
    v112 = v111;
    a1 = v229;
    if (v112)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v235 = 93;
      v113 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v113)
        v114 = v113;
      else
        v114 = v235;
      v115 = &v234[v114];
      v116 = v235 - v114;
      if (v235 - v114 >= 0x12)
        v117 = 18;
      else
        v117 = v235 - v114;
      v118 = v116 - v117;
      if (v118 >= v118 - 1)
        v119 = v118 - 1;
      else
        v119 = v118;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v166;
      v18 = v172;
      v15 = v179;
      v12 = v187;
      v9 = v196;
      v6 = v206;
      v3 = v217;
      a1 = v229;
    }
  }
  v24 = v23[21];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v218 = v3;
    v230 = a1;
    v207 = v6;
    v188 = v12;
    v197 = v9;
    v173 = v18;
    v180 = v15;
    v162 = v24;
    v167 = v21;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v162;
    v21 = v167;
    v18 = v173;
    v15 = v180;
    v12 = v188;
    v9 = v197;
    v6 = v207;
    v3 = v218;
    v121 = v120;
    a1 = v230;
    if (v121)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v235 = 84;
      v122 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v122)
        v123 = v122;
      else
        v123 = v235;
      v124 = &v234[v123];
      v125 = v235 - v123;
      if (v235 - v123 >= 0x12)
        v126 = 18;
      else
        v126 = v235 - v123;
      v127 = v125 - v126;
      if (v127 >= v127 - 1)
        v128 = v127 - 1;
      else
        v128 = v127;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v124[v126], v128);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v162;
      v21 = v167;
      v18 = v173;
      v15 = v180;
      v12 = v188;
      v9 = v197;
      v6 = v207;
      v3 = v218;
      a1 = v230;
    }
  }
  v27 = v26[223];
  v29 = &unk_25451B000;
  if ((v28 & 1) == 0)
  {
    v219 = v3;
    v231 = a1;
    v208 = v6;
    v189 = v12;
    v198 = v9;
    v174 = v18;
    v181 = v15;
    v163 = v24;
    v168 = v21;
    v159 = v27;
    v29 = (_QWORD *)&unk_25451B000;
    v27 = v159;
    v24 = v163;
    v21 = v168;
    v18 = v174;
    v15 = v181;
    v12 = v189;
    v9 = v198;
    v6 = v208;
    v3 = v219;
    v130 = v129;
    a1 = v231;
    if (v130)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      v235 = 103;
      v131 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v131)
        v132 = v131;
      else
        v132 = v235;
      v133 = &v234[v132];
      v134 = v235 - v132;
      if (v235 - v132 >= 0x12)
        v135 = 18;
      else
        v135 = v235 - v132;
      v136 = v134 - v135;
      if (v136 >= v136 - 1)
        v137 = v136 - 1;
      else
        v137 = v136;
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v133[v135], v137);
      v29 = (_QWORD *)&unk_25451B000;
      v27 = v159;
      v24 = v163;
      v21 = v168;
      v18 = v174;
      v15 = v181;
      v12 = v189;
      v9 = v198;
      v6 = v208;
      v3 = v219;
      a1 = v231;
    }
  }
  v30 = v29[69];
  v32 = &unk_254519000;
  if ((v31 & 1) == 0)
  {
    v220 = v3;
    v232 = a1;
    v209 = v6;
    v190 = v12;
    v199 = v9;
    v175 = v18;
    v182 = v15;
    v164 = v24;
    v169 = v21;
    v157 = v30;
    v160 = v27;
    v32 = (_QWORD *)&unk_254519000;
    v30 = v157;
    v27 = v160;
    v24 = v164;
    v21 = v169;
    v18 = v175;
    v15 = v182;
    v12 = v190;
    v9 = v199;
    v6 = v209;
    v3 = v220;
    v139 = v138;
    a1 = v232;
    if (v139)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      v235 = 82;
      v140 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v140)
        v141 = v140;
      else
        v141 = v235;
      v142 = &v234[v141];
      v143 = v235 - v141;
      if (v235 - v141 >= 0x12)
        v144 = 18;
      else
        v144 = v235 - v141;
      v145 = v143 - v144;
      if (v145 >= v145 - 1)
        v146 = v145 - 1;
      else
        v146 = v145;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v142[v144], v146);
      v32 = (_QWORD *)&unk_254519000;
      v30 = v157;
      v27 = v160;
      v24 = v164;
      v21 = v169;
      v18 = v175;
      v15 = v182;
      v12 = v190;
      v9 = v199;
      v6 = v209;
      v3 = v220;
      a1 = v232;
    }
  }
  v33 = v32[401];
  v35 = &unk_25451B000;
  if ((v34 & 1) == 0)
  {
    v221 = v3;
    v233 = a1;
    v210 = v6;
    v191 = v12;
    v200 = v9;
    v176 = v18;
    v183 = v15;
    v165 = v24;
    v170 = v21;
    v158 = v30;
    v161 = v27;
    v156 = v33;
    v35 = (_QWORD *)&unk_25451B000;
    v33 = v156;
    v30 = v158;
    v27 = v161;
    v24 = v165;
    v21 = v170;
    v18 = v176;
    v15 = v183;
    v12 = v191;
    v9 = v200;
    v6 = v210;
    v3 = v221;
    v148 = v147;
    a1 = v233;
    if (v148)
    {
      v234 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      v235 = 91;
      v149 = llvm::StringRef::find((uint64_t *)&v234, "DesiredTypeName = ", 0x12uLL, 0);
      if (v235 >= v149)
        v150 = v149;
      else
        v150 = v235;
      v151 = &v234[v150];
      v152 = v235 - v150;
      if (v235 - v150 >= 0x12)
        v153 = 18;
      else
        v153 = v235 - v150;
      v154 = v152 - v153;
      if (v154 >= v154 - 1)
        v155 = v154 - 1;
      else
        v155 = v154;
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v151[v153], v155);
      v35 = (_QWORD *)&unk_25451B000;
      v33 = v156;
      v30 = v158;
      v27 = v161;
      v24 = v165;
      v21 = v170;
      v18 = v176;
      v15 = v183;
      v12 = v191;
      v9 = v200;
      v6 = v210;
      v3 = v221;
      a1 = v233;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v30 == a1
      || v33 == a1
      || v35[45] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyIsTerminator(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::affine::AffineYieldOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::affine::AffineYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::MemRefsNormalizable>::verifyRegionInvariants()
{
  return 1;
}

void `anonymous namespace'::AffineInlinerInterface::~AffineInlinerInterface(_anonymous_namespace_::AffineInlinerInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AffineInlinerInterface::isLegalToInline(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Region *a2, mlir::Region **a3, BOOL a4, mlir::IRMapping *a5)
{
  void *v5;
  mlir::Region **v9;
  uint64_t result;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t InterfaceFor;
  int v22;
  int isValidDim;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ArgOperands;
  unint64_t v29;
  unint64_t v30;
  unsigned int NumDims;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int NumSymbols;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(_QWORD *, mlir::Block *);
  uint64_t Shape;
  void *v53;
  uint64_t v54;
  _BYTE v55[160];
  uint64_t (*v56)(_QWORD *, mlir::Block *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v5 = *(void **)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 48) + 16);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id)
  {
    return 0;
  }
  v9 = (mlir::Region **)a3[1];
  if (v9 == a3 || v9[1] != (mlir::Region *)a3)
    return 0;
  v11 = (ZinIrHalH13g *)(v9 + 3);
  v12 = v9[4];
  if (v12 != (ZinIrHalH13g *)(v9 + 3))
  {
    do
    {
      ZinIrHalH13g::~ZinIrHalH13g(v12);
      v20 = v19;
      if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v19))
      {
        InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v20);
        v58 = v20;
        v59 = InterfaceFor;
        if (v20)
        {
          v53 = v55;
          v54 = 0x400000000;
          mlir::RegionBranchOpInterface::getEntrySuccessorOperands((uint64_t)&v58, (uint64_t)&v53);
          v22 = v54;
          if (v53 != v55)
            free(v53);
          if (!v22)
            goto LABEL_18;
        }
      }
      else
      {
        v58 = 0;
        v59 = 0;
      }
      if (v20
        && *(_UNKNOWN **)(*(_QWORD *)(v20 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
      {
        isValidDim = mlir::affine::isValidDim((_QWORD *)(v20 - 16), (mlir::Block *)a3);
        v24 = *(_DWORD *)(v20 + 44);
        if (isValidDim)
        {
          if ((v24 & 0x800000) != 0)
          {
            v15 = *(unsigned int *)(v20 + 68);
            v16 = *(_QWORD *)(v20 + 72);
          }
          else
          {
            v16 = 0;
            v15 = 0;
          }
          mlir::ValueRange::ValueRange((unint64_t *)&v53, v16, v15);
          v56 = mlir::affine::isValidDim;
          v17 = (uint64_t)v53;
          v18 = v54;
        }
        else
        {
          if ((v24 & 0x800000) != 0)
          {
            v25 = *(unsigned int *)(v20 + 68);
            v26 = *(_QWORD *)(v20 + 72);
          }
          else
          {
            v26 = 0;
            v25 = 0;
          }
          mlir::ValueRange::ValueRange((unint64_t *)&v58, v26, v25);
          v56 = mlir::affine::isValidSymbol;
          v17 = v58;
          v18 = v59;
        }
        if ((remainsLegalAfterInline(v17, v18, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v56) & 1) == 0)return 0;
      }
      else if (mlir::OpInterface<mlir::affine::AffineReadOpInterface,mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits>::getInterfaceFor(v20)
             && (v27 = mlir::OpInterface<mlir::affine::AffineReadOpInterface,mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits>::getInterfaceFor(v20),
                 v20))
      {
        v53 = (void *)v20;
        v54 = v27;
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v53);
        ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v30 = v29;
        NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Shape);
        if (v30 >= NumDims)
          v32 = NumDims;
        else
          v32 = v30;
        mlir::ValueRange::ValueRange((unint64_t *)&v58, ArgOperands, v32);
        v33 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v35 = v34;
        NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Shape);
        if (v35 <= NumSymbols)
          v37 = v33;
        else
          v37 = v33 + 32 * (v35 - NumSymbols);
        if (v35 >= NumSymbols)
          v38 = NumSymbols;
        else
          v38 = v35;
        mlir::ValueRange::ValueRange((unint64_t *)&v56, v37, v38);
        v51 = mlir::affine::isValidDim;
        if ((remainsLegalAfterInline(v58, v59, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51) & 1) == 0)return 0;
        v51 = mlir::affine::isValidSymbol;
        result = remainsLegalAfterInline((uint64_t)v56, v57, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (!mlir::OpInterface<mlir::affine::AffineWriteOpInterface,mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits>::getInterfaceFor(v20))
          return 0;
        v39 = mlir::OpInterface<mlir::affine::AffineWriteOpInterface,mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits>::getInterfaceFor(v20);
        if (!v20)
          return 0;
        v53 = (void *)v20;
        v54 = v39;
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v53);
        v40 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v42 = v41;
        v43 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Shape);
        v44 = v42 >= v43 ? v43 : v42;
        mlir::ValueRange::ValueRange((unint64_t *)&v58, v40, v44);
        v45 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v53);
        v47 = v46;
        v48 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Shape);
        v49 = v47 <= v48 ? v45 : v45 + 32 * (v47 - v48);
        v50 = v47 >= v48 ? v48 : v47;
        mlir::ValueRange::ValueRange((unint64_t *)&v56, v49, v50);
        v51 = mlir::affine::isValidDim;
        if ((remainsLegalAfterInline(v58, v59, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51) & 1) == 0)return 0;
        v51 = mlir::affine::isValidSymbol;
        if ((remainsLegalAfterInline((uint64_t)v56, v57, (mlir::Block *)a3, (uint64_t)a2, (uint64_t)a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>, (uint64_t)&v51) & 1) == 0)return 0;
      }
LABEL_18:
      v12 = (ZinIrHalH13g *)*((_QWORD *)v12 + 1);
    }
    while (v12 != v11);
  }
  return 1;
}

BOOL `anonymous namespace'::AffineInlinerInterface::isLegalToInline(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Operation *a2, mlir::Region *a3, BOOL a4, mlir::IRMapping *a5)
{
  _QWORD *v5;
  void *v6;

  v5 = (_QWORD *)(*((_QWORD *)a3 + 2) + 48);
  if ((mlir::OperationName::hasTrait<mlir::OpTrait::AffineScope>(v5) & 1) != 0)
    return 1;
  v6 = *(void **)(*v5 + 16);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
    return 1;
  return v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineParallelOp,void>::id
      || v6 == &mlir::detail::TypeIDResolver<mlir::affine::AffineIfOp,void>::id;
}

uint64_t `anonymous namespace'::AffineInlinerInterface::shouldAnalyzeRecursively(_anonymous_namespace_::AffineInlinerInterface *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t remainsLegalAfterInline(uint64_t a1, uint64_t a2, mlir::Block *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  mlir::Block *ParentRegion;
  int v19;
  uint64_t v20;
  uint64_t DefiningOp;
  uint64_t InterfaceFor;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[2];
  _QWORD v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  v28 = a1;
  v29 = 0;
  if (!a2)
    return 1;
  v14 = 0;
  while (1)
  {
    v15 = (_DWORD *)mlir::ValueRange::dereference_iterator(&v28, v14);
    v16 = (unint64_t)v15;
    v30[0] = v15;
    if ((~v15[2] & 7) != 0)
      v17 = 0;
    else
      v17 = (unint64_t)v15;
    v26 = v15;
    v27 = v17;
    if (v17)
    {
      ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v27);
    }
    else
    {
      ParentRegion = *(mlir::Block **)(mlir::Value::getDefiningOp((mlir::Value *)v30) + 16);
      if (ParentRegion)
        ParentRegion = (mlir::Block *)mlir::Block::getParent(ParentRegion);
    }
    if (ParentRegion != a3)
      goto LABEL_22;
    if ((~*(_DWORD *)(v16 + 8) & 7) != 0)
      break;
    v27 = v16;
    v30[0] = 0;
    v19 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, &v27, v30);
    v20 = 0;
    if (v19 && v30[0] != (void *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16)))
      v20 = *((_QWORD *)v30[0] + 1);
    if ((a6(a7, v20, a4) & 1) == 0)
      return 0;
LABEL_22:
    v14 = ++v29;
    if (v28 == a1 && v14 == a2)
      return 1;
  }
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v26);
  InterfaceFor = mlir::OpInterface<mlir::ShapedDimOpInterface,mlir::detail::ShapedDimOpInterfaceInterfaceTraits>::getInterfaceFor(DefiningOp);
  v23 = mlir::Value::getDefiningOp((mlir::Value *)&v26);
  if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(v23 + 48)))
  {
    v30[0] = v31;
    v30[1] = (void *)0x100000000;
    mlir::Operation::fold(v23, 0, 0, (uint64_t)v30);
    v24 = *(_QWORD *)v30[0];
    if (v30[0] != v31)
      free(v30[0]);
    if (v24 > 7)
      goto LABEL_22;
  }
  if (InterfaceFor)
    goto LABEL_22;
  return 0;
}

uint64_t llvm::function_ref<BOOL ()(mlir::Value,mlir::Region *)>::callback_fn<BOOL (*)(mlir::Value,mlir::Region *)>(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

uint64_t mlir::OpInterface<mlir::affine::AffineReadOpInterface,mlir::affine::detail::AffineReadOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
          v31 = 85;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::affine::AffineReadOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
          v31 = 85;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::affine::AffineReadOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineReadOpInterface]";
      v23 = 85;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::affine::AffineReadOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[276];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::OpInterface<mlir::affine::AffineWriteOpInterface,mlir::affine::detail::AffineWriteOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
          v31 = 86;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::affine::AffineWriteOpInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
          v31 = 86;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::affine::AffineWriteOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::affine::AffineWriteOpInterface]";
      v23 = 86;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::affine::AffineWriteOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[306];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::AffineMapAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::AffineMapAttr,void>::id)
    v13 = v26;
  else
    v13 = 0;
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = __p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = *--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::AffineMap>(mlir::AffineMap *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) == 6)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, a2);
    v7 = v8;
    if (v8)
      goto LABEL_3;
  }
  else
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, 0);
    v7 = v8;
    if (v8)
    {
LABEL_3:
      v4 = *a1;
      result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v7);
      v6 = *v4;
      if ((*v4 & 1) == 0)
      {
LABEL_4:
        *(_QWORD *)(*(_QWORD *)v6 + 8 * (result >> 6)) |= 1 << result;
        return result;
      }
LABEL_12:
      *v4 = v6 & 0xFC00000000000000 | (2
                                       * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << result)) & ~(-1 << (v6 >> 58)))) | 1;
      return result;
    }
  }
  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) != 7)
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, 0);
    if (!v8)
      return result;
LABEL_11:
    v4 = a1[1];
    result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v8);
    v6 = *v4;
    if ((*v4 & 1) == 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, a2);
  if (v8)
    goto LABEL_11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      result = 0;
      *a3 = 0;
      return result;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v7 = &unk_254519000;
  if ((v6 & 1) == 0)
  {
    v24 = a3;
    v22 = a2;
    v25 = v3;
    v23 = v4;
    v26 = *a2;
    v7 = &unk_254519000;
    v3 = v25;
    v5 = v26;
    v4 = v23;
    a2 = v22;
    a3 = v24;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v7 = (_QWORD *)&unk_254519000;
      v3 = v25;
      v5 = v26;
      v4 = v23;
      a2 = v22;
      a3 = v24;
    }
  }
  v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
  v10 = -348639895 * ((v9 >> 47) ^ v9);
  v11 = v4 - 1;
  v12 = v10 & (v4 - 1);
  v13 = (_QWORD *)(v3 + 16 * v12);
  v14 = *v13;
  if (*a2 == *v13)
  {
    result = 1;
LABEL_8:
    *a3 = v13;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v14 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == -8192;
      if (v18)
        v16 = v13;
      v19 = v12 + v17++;
      v12 = v19 & v11;
      v13 = (_QWORD *)(v3 + 16 * (v19 & v11));
      v14 = *v13;
      if (*a2 == *v13)
        goto LABEL_8;
    }
    result = 0;
    if (v16)
      v13 = v16;
    *a3 = v13;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::InsertIntoBucketImpl<mlir::Value>(_DWORD *a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_10:
    llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::grow((uint64_t)a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>((uint64_t)a1, a3, &v9);
    a4 = v9;
    *a1 += 2;
    if (*a4 == -4096)
      return a4;
    goto LABEL_7;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
    goto LABEL_10;
  *a1 += 2;
  if (*a4 != -4096)
LABEL_7:
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::grow(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *buffer;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  _QWORD v45[2];
  _QWORD v46[15];

  v2 = result;
  v46[14] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v7 = (_QWORD *)(result + 8);
    v6 = *(llvm **)(result + 8);
    v8 = *(unsigned int *)(result + 16);
    if (a2 > 8)
    {
      v29 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(v2 + 8) = buffer;
      *(_QWORD *)(v2 + 16) = v29;
      v31 = *(_DWORD *)v2;
      v9 = (unint64_t *)((char *)v6 + 16 * v8);
      *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
      if ((v31 & 1) != 0)
      {
        v10 = (_QWORD *)(v2 + 136);
        v11 = 112;
      }
      else
      {
        v10 = &buffer[2 * v29];
        v7 = buffer;
        v11 = 16 * v29 - 16;
        if (v11 < 0x10)
        {
          v33 = buffer;
          goto LABEL_49;
        }
      }
    }
    else
    {
      v9 = (unint64_t *)((char *)v6 + 16 * v8);
      *(_QWORD *)result = 1;
      v10 = (_QWORD *)(result + 136);
      v11 = 112;
    }
    v32 = (v11 >> 4) + 1;
    v33 = &v7[2 * (v32 & 0x1FFFFFFFFFFFFFFELL)];
    v34 = v7 + 2;
    v35 = v32 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v34 - 2) = -4096;
      *v34 = -4096;
      v34 += 4;
      v35 -= 2;
    }
    while (v35);
    if (v32 == (v32 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_50:
      if ((_DWORD)v8)
      {
        v42 = (unint64_t *)v6;
        do
        {
          if ((*v42 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v45[0] = 0;
            llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(v2, v42, v45);
            v43 = v45[0];
            *(_QWORD *)v45[0] = *v42;
            *(_QWORD *)(v43 + 8) = v42[1];
            *(_DWORD *)v2 += 2;
          }
          v42 += 2;
        }
        while (v42 != v9);
      }
      llvm::deallocate_buffer(v6, (void *)(16 * v8));
    }
    do
    {
LABEL_49:
      *v33 = -4096;
      v33 += 2;
    }
    while (v33 != v10);
    goto LABEL_50;
  }
  v12 = result + 8;
  v13 = v45;
  if ((*(_QWORD *)(result + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v14 = *(_QWORD *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_10;
  }
  else
  {
    v36 = *(_QWORD *)(result + 16);
    v45[0] = *(_QWORD *)(result + 8);
    v45[1] = v36;
    v13 = v46;
    v14 = *(_QWORD *)(result + 24);
    if ((v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_10:
      v15 = *(_QWORD *)(result + 40);
      if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        goto LABEL_11;
      goto LABEL_32;
    }
  }
  v37 = *(_QWORD *)(result + 32);
  *v13 = v14;
  v13[1] = v37;
  v13 += 2;
  v15 = *(_QWORD *)(result + 40);
  if ((v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_11:
    v16 = *(_QWORD *)(result + 56);
    if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  *v13 = v15;
  v13[1] = *(_QWORD *)(result + 48);
  v13 += 2;
  v16 = *(_QWORD *)(result + 56);
  if ((v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_12:
    v17 = *(_QWORD *)(result + 72);
    if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  *v13 = v16;
  v13[1] = *(_QWORD *)(result + 64);
  v13 += 2;
  v17 = *(_QWORD *)(result + 72);
  if ((v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    v18 = *(_QWORD *)(result + 88);
    if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  *v13 = v17;
  v13[1] = *(_QWORD *)(result + 80);
  v13 += 2;
  v18 = *(_QWORD *)(result + 88);
  if ((v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_14:
    v19 = *(_QWORD *)(result + 104);
    if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  *v13 = v18;
  v13[1] = *(_QWORD *)(result + 96);
  v13 += 2;
  v19 = *(_QWORD *)(result + 104);
  if ((v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_15:
    v20 = *(_QWORD *)(result + 120);
    if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  *v13 = v19;
  v13[1] = *(_QWORD *)(result + 112);
  v13 += 2;
  v20 = *(_QWORD *)(result + 120);
  if ((v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_16:
    v21 = *(_DWORD *)result;
    if (a2 < 9)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  *v13 = v20;
  v13[1] = *(_QWORD *)(result + 128);
  v13 += 2;
  v21 = *(_DWORD *)result;
  if (a2 < 9)
  {
LABEL_17:
    *(_QWORD *)result = v21 & 1;
    if ((v21 & 1) == 0)
      goto LABEL_18;
LABEL_39:
    v23 = (_QWORD *)(v2 + 136);
    v24 = 112;
    goto LABEL_20;
  }
LABEL_38:
  *(_DWORD *)result = v21 & 0xFFFFFFFE;
  v38 = a2;
  result = (uint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *(_QWORD *)(v2 + 8) = result;
  *(_QWORD *)(v2 + 16) = v38;
  v39 = *(_DWORD *)v2;
  *(_QWORD *)v2 = *(_DWORD *)v2 & 1;
  if ((v39 & 1) != 0)
    goto LABEL_39;
LABEL_18:
  v22 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v22)
    goto LABEL_42;
  v12 = *(_QWORD *)(v2 + 8);
  v23 = (_QWORD *)(v12 + 16 * v22);
  v24 = (unint64_t)v23 - v12 - 16;
  if (v24 < 0x10)
  {
    v26 = *(_QWORD **)(v2 + 8);
    do
    {
LABEL_41:
      *v26 = -4096;
      v26 += 2;
    }
    while (v26 != v23);
    goto LABEL_42;
  }
LABEL_20:
  v25 = (v24 >> 4) + 1;
  v26 = (_QWORD *)(v12 + 16 * (v25 & 0x1FFFFFFFFFFFFFFELL));
  v27 = (_QWORD *)(v12 + 16);
  v28 = v25 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v27 - 2) = -4096;
    *v27 = -4096;
    v27 += 4;
    v28 -= 2;
  }
  while (v28);
  if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_41;
LABEL_42:
  if (v45 != v13)
  {
    v40 = v45;
    do
    {
      if ((*v40 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v44 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,mlir::AffineExpr,8u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>,mlir::Value,mlir::AffineExpr,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::AffineExpr>>::LookupBucketFor<mlir::Value>(v2, v40, &v44);
        v41 = v44;
        *v44 = *v40;
        v41[1] = v40[1];
        *(_DWORD *)v2 += 2;
      }
      v40 += 2;
    }
    while (v40 != v13);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::AffineExpr)>::callback_fn<void canonicalizeMapOrSetAndOperands<mlir::IntegerSet>(mlir::IntegerSet *,llvm::SmallVectorImpl<mlir::Value> *)::{lambda(mlir::AffineExpr)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) == 6)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, a2);
    v7 = v8;
    if (v8)
      goto LABEL_3;
  }
  else
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, 0);
    v7 = v8;
    if (v8)
    {
LABEL_3:
      v4 = *a1;
      result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v7);
      v6 = *v4;
      if ((*v4 & 1) == 0)
      {
LABEL_4:
        *(_QWORD *)(*(_QWORD *)v6 + 8 * (result >> 6)) |= 1 << result;
        return result;
      }
LABEL_12:
      *v4 = v6 & 0xFC00000000000000 | (2
                                       * (((v6 >> 1) & ~(-1 << (v6 >> 58)) | (1 << result)) & ~(-1 << (v6 >> 58)))) | 1;
      return result;
    }
  }
  v8 = a2;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v8) != 7)
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, 0);
    if (!v8)
      return result;
LABEL_11:
    v4 = a1[1];
    result = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v8);
    v6 = *v4;
    if ((*v4 & 1) == 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v8, a2);
  if (v8)
    goto LABEL_11;
  return result;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineApplyOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineApplyOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Value;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const double *v12;
  unsigned __int128 *v13;
  unint64_t v14;
  const double *v15;
  unsigned __int128 v16;
  unsigned __int128 v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  ZinIrHalH13g *v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x24BDAC8D0];
  v32 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  v29 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v7 = 0;
    v9 = 0;
    v20 = 0;
    v32 = v34;
    HIDWORD(v33) = 8;
    goto LABEL_17;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = *(_QWORD *)(a2 + 72);
  v32 = v34;
  v33 = 0x800000000;
  if (v6 < 9)
  {
    v9 = 0;
    if (!(_DWORD)v6)
    {
      v20 = 0;
      goto LABEL_17;
    }
    v8 = v34;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v6, 8);
    v8 = (char *)v32 + 8 * v33;
    if (v6 >= 0xD
      && ((unint64_t)v8 >= v7 + 32 * v6 || v7 + 24 >= (unint64_t)v32 + 8 * v33 + 8 * v6))
    {
      v11 = v6 & 3;
      if ((v6 & 3) == 0)
        v11 = 4;
      v10 = v6 - v11;
      v8 += v10;
      v12 = (const double *)(v7 + 88);
      v13 = (unsigned __int128 *)((char *)v32 + 8 * v33 + 16);
      v14 = v10;
      do
      {
        v15 = v12 - 8;
        v16 = (unsigned __int128)vld4q_f64(v15);
        v17 = (unsigned __int128)vld4q_f64(v12);
        *(v13 - 1) = v16;
        *v13 = v17;
        v12 += 16;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      goto LABEL_14;
    }
  }
  v10 = 0;
LABEL_14:
  v18 = v6 - v10;
  v19 = (32 * v10) | 0x18;
  do
  {
    *v8++ = *(_QWORD *)(v7 + v19);
    v19 += 32;
    --v18;
  }
  while (v18);
  v20 = v33;
  v9 = v6;
LABEL_17:
  LODWORD(v33) = v20 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v29, (uint64_t)&v32);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v29, (uint64_t)&v32);
  simplifyMapWithOperands((mlir::AffineExpr *)&v29, (uint64_t *)v32, v33);
  if (v29 != Value)
  {
    v21 = v32;
    goto LABEL_19;
  }
  v21 = v32;
  if (!v9)
  {
LABEL_29:
    v23 = 0;
    if (v32 == v34)
      return v23;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v7 + 24) == *(_QWORD *)v32)
  {
    v25 = (uint64_t *)(v7 + 56);
    v26 = 8;
    while (8 * v9 != v26)
    {
      v27 = *v25;
      v25 += 4;
      v28 = *(_QWORD *)((char *)v32 + v26);
      v26 += 8;
      if (v27 != v28)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v30[1] = v33;
  v31 = v29;
  v30[0] = v21;
  v22 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(_QWORD *)(a2 + 24), &v31, (uint64_t)v30);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v22);
  v23 = 1;
  v21 = v32;
  if (v32 != v34)
LABEL_20:
    free(v21);
  return v23;
}

void simplifyMapWithOperands(mlir::AffineExpr *a1, uint64_t *a2, unint64_t a3)
{
  unsigned int Kind;
  uint64_t Results;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t NumDims;
  uint64_t NumSymbols;
  void *v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD *LHS;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x24BDAC8D0];
  v21 = v23;
  v22 = 0x600000000;
  Kind = mlir::AffineExpr::getKind(a1);
  if (Kind > 6)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, Kind, 8);
  Results = mlir::AffineMap::getResults(a1);
  if (v8)
  {
    v9 = (void **)Results;
    v10 = 8 * v8;
    do
    {
      v20 = *v9;
      NumDims = mlir::AffineMap::getNumDims(a1);
      NumSymbols = mlir::AffineMap::getNumSymbols(a1);
      simplifyExprAndOperands(&v20, NumDims, NumSymbols, a2, a3);
      v13 = v20;
      v14 = v22;
      if (v22 >= (unint64_t)HIDWORD(v22))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 8);
        v14 = v22;
      }
      *((_QWORD *)v21 + v14) = v13;
      LODWORD(v22) = v22 + 1;
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v15 = mlir::AffineMap::getNumDims(a1);
  v16 = mlir::AffineMap::getNumSymbols(a1);
  v17 = v21;
  v18 = v22;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(_QWORD *)a1 = mlir::AffineMap::get(v15, v16, (uint64_t)v17, v18, LHS);
  if (v21 != v23)
    free(v21);
}

uint64_t simplifyExprAndOperands(void **a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  void *v10;
  uint64_t result;
  int Kind;
  void *AffineBinaryOpExpr;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t LowerBound;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t UpperBound;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t BoundForAffineExpr;
  void *v29;
  unsigned __int8 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  void *v47;
  mlir::MLIRContext *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  mlir::MLIRContext **v55;
  uint64_t v56;
  mlir::MLIRContext *v57;
  mlir::MLIRContext **v58;
  uint64_t v59;
  uint64_t LargestKnownDivisor;
  mlir::MLIRContext *Context;
  mlir::MLIRContext **v62;
  mlir::MLIRContext **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  void *v68;
  uint64_t RHS;
  mlir::MLIRContext **LHS;
  void *v71;
  mlir::MLIRContext **v72;
  mlir::MLIRContext **v73;
  void *v74;
  uint64_t v75;
  _BYTE v76[48];
  void *v77;
  uint64_t v78;
  _QWORD v79[8];

  v79[6] = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v77 = *a1;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, 0);
    v71 = v77;
    if (!v77)
      return result;
  }
  else
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, (uint64_t)v10);
    v71 = v77;
    if (!v77)
      return result;
  }
  LHS = (mlir::MLIRContext **)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71);
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  simplifyExprAndOperands(&LHS, a2, a3, a4, a5);
  simplifyExprAndOperands(&RHS, a2, a3, a4, a5);
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
  AffineBinaryOpExpr = (void *)mlir::getAffineBinaryOpExpr(Kind, LHS, RHS);
  *a1 = AffineBinaryOpExpr;
  v77 = AffineBinaryOpExpr;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, 0);
    v71 = v77;
    if (!v77)
      return result;
  }
  else
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, (uint64_t)AffineBinaryOpExpr);
    v71 = v77;
    if (!v77)
      return result;
  }
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)a1) != 3
    && mlir::AffineExpr::getKind((mlir::AffineExpr *)a1) != 4)
  {
    result = mlir::AffineExpr::getKind((mlir::AffineExpr *)a1);
    if ((_DWORD)result != 2)
      return result;
  }
  LHS = (mlir::MLIRContext **)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v71);
  v14 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v71);
  RHS = (uint64_t)v14;
  v77 = v14;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) == 5)
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, (uint64_t)v14);
    v68 = v77;
    if (!v77)
      return result;
  }
  else
  {
    result = (uint64_t)ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, 0);
    v68 = v77;
    if (!v77)
      return result;
  }
  result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v68);
  if (result < 1)
    return result;
  v65 = result;
  v67 = a4;
  Context = (mlir::MLIRContext *)mlir::AffineExpr::getContext((mlir::AffineExpr *)a1);
  v63 = LHS;
  v77 = v79;
  v78 = 0x300000000;
  v74 = v76;
  v75 = 0x300000000;
  v15 = 8 * a5;
  if (a5 < 4)
  {
    if (!a5)
      goto LABEL_27;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, a5, 16);
    if (a5 > HIDWORD(v75))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, a5, 16);
  }
  v16 = 8 * a5;
  do
  {
    v17 = *a4;
    LowerBound = getLowerBound(*a4);
    v20 = v19;
    v21 = v78;
    if (v78 >= (unint64_t)HIDWORD(v78))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v78 + 1, 16);
      v21 = v78;
    }
    v22 = (uint64_t *)((char *)v77 + 16 * v21);
    *v22 = LowerBound;
    v22[1] = v20;
    LODWORD(v78) = v78 + 1;
    UpperBound = getUpperBound(v17);
    v25 = v24;
    v26 = v75;
    if (v75 >= (unint64_t)HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v75 + 1, 16);
      v26 = v75;
    }
    v27 = (unint64_t *)((char *)v74 + 16 * v26);
    *v27 = UpperBound;
    v27[1] = v25;
    LODWORD(v75) = v75 + 1;
    ++a4;
    v16 -= 8;
  }
  while (v16);
LABEL_27:
  v73 = v63;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v73) == 5)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v73, (uint64_t)v63);
    if (v73)
      goto LABEL_29;
  }
  else
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v73, 0);
    if (v73)
    {
LABEL_29:
      BoundForAffineExpr = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v73);
      v64 = 1;
      v29 = v74;
      if (v74 == v76)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  BoundForAffineExpr = mlir::getBoundForAffineExpr((uint64_t)v63, a2, a3, (uint64_t)v77, v78, (uint64_t)v74, v75, 0);
  v64 = v30;
  v29 = v74;
  if (v74 != v76)
LABEL_30:
    free(v29);
LABEL_31:
  if (v77 != v79)
    free(v77);
  v62 = LHS;
  v77 = v79;
  v78 = 0x300000000;
  v66 = BoundForAffineExpr;
  v74 = v76;
  v75 = 0x300000000;
  if (a5 < 4)
  {
    if (!a5)
      goto LABEL_46;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, a5, 16);
    if (a5 > HIDWORD(v75))
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, a5, 16);
  }
  v31 = v67;
  do
  {
    v32 = *v31;
    v33 = getLowerBound(*v31);
    v35 = v34;
    v36 = v78;
    if (v78 >= (unint64_t)HIDWORD(v78))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v79, v78 + 1, 16);
      v36 = v78;
    }
    v37 = (uint64_t *)((char *)v77 + 16 * v36);
    *v37 = v33;
    v37[1] = v35;
    LODWORD(v78) = v78 + 1;
    v38 = getUpperBound(v32);
    v40 = v39;
    v41 = v75;
    if (v75 >= (unint64_t)HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v75 + 1, 16);
      v41 = v75;
    }
    v42 = (unint64_t *)((char *)v74 + 16 * v41);
    *v42 = v38;
    v42[1] = v40;
    LODWORD(v75) = v75 + 1;
    ++v31;
    v15 -= 8;
  }
  while (v15);
LABEL_46:
  v73 = v62;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v73) == 5)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v73, (uint64_t)v62);
    v44 = v65;
    v43 = v66;
    v72 = v73;
    if (v73)
      goto LABEL_48;
  }
  else
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v73, 0);
    v44 = v65;
    v43 = v66;
    v72 = v73;
    if (v73)
    {
LABEL_48:
      v45 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v72);
      v46 = 1;
      v47 = v74;
      if (v74 == v76)
        goto LABEL_50;
      goto LABEL_49;
    }
  }
  v45 = mlir::getBoundForAffineExpr((uint64_t)v62, a2, a3, (uint64_t)v77, v78, (uint64_t)v74, v75, 1);
  v46 = v51;
  v47 = v74;
  if (v74 != v76)
LABEL_49:
    free(v47);
LABEL_50:
  if (v77 != v79)
    free(v77);
  if (!v64 || !v46)
    goto LABEL_84;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 3)
  {
    v49 = (unint64_t)v44 >> 63;
    if (v43 && (unint64_t)v43 >> 63 != (_DWORD)v49)
    {
      v50 = ~(~v43 / v44);
      if (!v45)
        goto LABEL_64;
    }
    else
    {
      v50 = v43 / v44;
      if (!v45)
      {
LABEL_64:
        if (v50 == v45 / v44)
        {
LABEL_65:
          if (v43 && (unint64_t)v43 >> 63 != (_DWORD)v49)
          {
            v52 = ~(~v43 / v44);
LABEL_101:
            v57 = Context;
            goto LABEL_102;
          }
          goto LABEL_100;
        }
        goto LABEL_69;
      }
    }
    if ((unint64_t)v45 >> 63 == (_DWORD)v49)
      goto LABEL_64;
    if (v50 == ~(~v45 / v44))
      goto LABEL_65;
  }
LABEL_69:
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 4)
  {
    v53 = v43 < 1 ? v43 / v44 : (v43 - 1) / v44 + 1;
    v54 = v45 < 1 ? v45 / v44 : (v45 - 1) / v44 + 1;
    if (v53 == v54)
    {
      if (v43 >= 1)
      {
        v52 = (v43 - 1) / v44 + 1;
        goto LABEL_101;
      }
LABEL_100:
      v52 = v43 / v44;
      goto LABEL_101;
    }
  }
  result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
  if ((_DWORD)result == 2 && (v43 & 0x8000000000000000) == 0 && v43 < v44 && v45 < v44)
  {
    *a1 = LHS;
    return result;
  }
LABEL_84:
  v72 = 0;
  v73 = 0;
  v55 = LHS;
  v77 = LHS;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&v77) >= 5)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, 0);
    v56 = (uint64_t)v67;
    v74 = v77;
    if (!v77)
      goto LABEL_89;
LABEL_88:
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v74))
      goto LABEL_89;
    v58 = (mlir::MLIRContext **)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v74);
    v59 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v74);
    LargestKnownDivisor = getLargestKnownDivisor((uint64_t)v58, v56);
    result = isNonNegativeBoundedBy(v59, v56, a5, LargestKnownDivisor);
    if ((result & 1) == 0)
    {
      LargestKnownDivisor = getLargestKnownDivisor(v59, v56);
      if (!isNonNegativeBoundedBy((uint64_t)v58, v56, a5, LargestKnownDivisor))
        goto LABEL_89;
      result = (uint64_t)v58;
      v58 = (mlir::MLIRContext **)v59;
      v59 = result;
    }
    v72 = (mlir::MLIRContext **)v59;
    v73 = v58;
    if (!(v44 % LargestKnownDivisor))
    {
      result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
      if ((_DWORD)result == 3)
      {
        result = mlir::AffineExpr::floorDiv(&v73, (uint64_t)v68);
LABEL_103:
        *a1 = (void *)result;
        return result;
      }
    }
    if (!(LargestKnownDivisor % v44))
    {
      result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71);
      if ((_DWORD)result == 2)
      {
        result = mlir::AffineExpr::operator%((unint64_t *)&v72, (uint64_t)v68);
        goto LABEL_103;
      }
    }
    return result;
  }
  ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v77, (uint64_t)v55);
  v56 = (uint64_t)v67;
  v74 = v77;
  if (v77)
    goto LABEL_88;
LABEL_89:
  if (isNonNegativeBoundedBy((uint64_t)LHS, v56, a5, v44)
    && mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71) == 3
    || (result = getLargestKnownDivisor((uint64_t)LHS, v56), !(result % v44))
    && (result = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v71), (_DWORD)result == 2))
  {
    v57 = (mlir::MLIRContext *)mlir::AffineExpr::getContext((mlir::AffineExpr *)a1);
    v52 = 0;
LABEL_102:
    result = mlir::getAffineConstantExpr((mlir *)v52, v57, v48);
    goto LABEL_103;
  }
  return result;
}

BOOL isNonNegativeBoundedBy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t LHS;
  uint64_t v10;
  mlir::Block *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Value;

  Value = a1;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) != 5)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&Value, 0);
    v21 = Value;
    if (Value)
      goto LABEL_3;
LABEL_10:
    Value = a1;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) == 6)
    {
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&Value, a1);
      v21 = Value;
      if (!Value)
        return 0;
    }
    else
    {
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&Value, 0);
      v21 = Value;
      if (!Value)
        return 0;
    }
    v10 = *(_QWORD *)(a2 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v21));
    if (v10)
    {
      if ((*(_QWORD *)(v10 + 8) & 7) == 7)
      {
        v11 = *(mlir::Block **)(v10 + 16);
        if (v11)
        {
          v12 = *(_QWORD *)(mlir::Block::getParent(v11) + 16);
          if (v12
            && *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
          {
            v14 = v12 + 64;
            v15 = *(unsigned int *)(v12 + 44);
            v16 = (uint64_t *)(v12 + 64 + 16 * ((v15 >> 23) & 1));
            v17 = *(_QWORD *)((((unint64_t)v16 + ((v15 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *(unsigned int *)(v12 + 40)
                            + 8);
            v18 = v17 ? v17 - 8 : 0;
            if (**(_QWORD **)(v18 + 48) == v10)
            {
              Value = *v16;
              Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
              if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
              {
                Value = *(_QWORD *)(v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1));
                Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                if ((mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value) & 0x8000000000000000) == 0)
                {
                  v19 = HIBYTE(*(_DWORD *)(v12 + 44))
                      ? v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)
                      : 0;
                  Value = *(_QWORD *)(v19 + 16);
                  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                  if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value))
                  {
                    v20 = HIBYTE(*(_DWORD *)(v12 + 44))
                        ? v14 + 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)
                        : 0;
                    Value = *(_QWORD *)(v20 + 16);
                    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
                    if (mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value) <= a4)
                      return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  ZinMirValidateMirInfo::ZinMirValidateMirInfo(&Value, a1);
  v21 = Value;
  if (!Value)
    goto LABEL_10;
LABEL_3:
  LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v21);
  return LHS >= 0 && LHS < a4;
}

uint64_t getLargestKnownDivisor(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  mlir::Block *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t LargestKnownDivisorOfMapExprs;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Value;
  unsigned int v26;
  uint64_t v27;

  v24 = a1;
  mlir::AffineExpr::getLargestKnownDivisor((mlir::AffineExpr *)&v24);
  v4 = v3;
  v5 = v24;
  Value = v24;
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value) == 6)
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&Value, v5);
    v23 = Value;
    if (!Value)
      return v4;
  }
  else
  {
    ZinMirValidateMirInfo::ZinMirValidateMirInfo(&Value, 0);
    v23 = Value;
    if (!Value)
      return v4;
  }
  v6 = *(_QWORD *)(a2 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v23));
  if (v6)
    v7 = (*(_QWORD *)(v6 + 8) & 7) == 7;
  else
    v7 = 0;
  if (!v7)
    return 1;
  v8 = *(mlir::Block **)(v6 + 16);
  if (!v8)
    return 1;
  v9 = *(_QWORD *)(mlir::Block::getParent(v8) + 16);
  if (!v9
    || *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::affine::AffineForOp,void>::id)
  {
    return 1;
  }
  v11 = v9 + 64;
  v12 = *(unsigned int *)(v9 + 44);
  v13 = (uint64_t *)(v9 + 64 + 16 * ((v12 >> 23) & 1));
  v14 = *(_QWORD *)((((unint64_t)v13 + ((v12 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v9 + 40)
                  + 8);
  v15 = v14 ? v14 - 8 : 0;
  if (**(_QWORD **)(v15 + 48) != v6)
    return 1;
  Value = *v13;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  if (mlir::AffineMap::isSingleConstant((mlir::AffineMap *)&Value)
    && (Value = *(_QWORD *)(v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1)),
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value),
        !mlir::AffineMap::getSingleConstantResult((mlir::AffineMap *)&Value)))
  {
    if (HIBYTE(*(_DWORD *)(v9 + 44)))
      v21 = v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1);
    else
      v21 = 0;
    v27 = *(_QWORD *)(v21 + 8);
    mlir::IntegerAttr::getValue(&v27, (llvm::APInt *)&Value);
    if (v26 > 0x40)
    {
      v22 = *(_QWORD *)Value;
      MEMORY[0x20BD002D4]();
      return v22;
    }
    else
    {
      return Value << -(uint64_t)v26 >> -(uint64_t)v26;
    }
  }
  else
  {
    Value = *(_QWORD *)(v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1));
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
    LargestKnownDivisorOfMapExprs = mlir::AffineMap::getLargestKnownDivisorOfMapExprs((mlir::AffineMap *)&Value);
    if (HIBYTE(*(_DWORD *)(v9 + 44)))
      v18 = v11 + 16 * (((unint64_t)*(unsigned int *)(v9 + 44) >> 23) & 1);
    else
      v18 = 0;
    v27 = *(_QWORD *)(v18 + 8);
    mlir::IntegerAttr::getValue(&v27, (llvm::APInt *)&Value);
    if (v26 > 0x40)
    {
      v19 = *(_QWORD *)Value;
      MEMORY[0x20BD002D4]();
    }
    else
    {
      v19 = Value << -(uint64_t)v26 >> -(uint64_t)v26;
    }
    if (v19)
    {
      if (v19 >= 0)
        v20 = v19;
      else
        v20 = -v19;
      do
      {
        v4 = v20;
        v20 = LargestKnownDivisorOfMapExprs % v20;
        LargestKnownDivisorOfMapExprs = v4;
      }
      while (v20);
      return v4;
    }
    return LargestKnownDivisorOfMapExprs;
  }
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.apply";
    v24[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineForOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[38];
  unint64_t v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void `anonymous namespace'::AffineForEmptyLoopFolder::~AffineForEmptyLoopFolder(_anonymous_namespace_::AffineForEmptyLoopFolder *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineForOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::AffineForEmptyLoopFolder::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t TrivialConstantTripCount;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  ZinIrHalH13g **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54[2];
  void *v55;
  uint64_t v56;
  _BYTE v57[32];
  unint64_t v58[3];

  v58[2] = *MEMORY[0x24BDAC8D0];
  v3 = a2 + 64;
  v4 = *(_QWORD *)(((a2
                   + 64
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  v5 = v4 - 8;
  if (!v4)
    v5 = 0;
  v6 = v5 + 32;
  v7 = *(_QWORD *)(v5 + 40);
  if (v7 != v6 && *(_QWORD *)(v7 + 8) == v6)
  {
    if (!*(_DWORD *)(a2 + 36))
      return 1;
    v13 = TrivialConstantTripCount;
    v15 = v14;
    if (v14 && !TrivialConstantTripCount)
    {
      v16 = *(unsigned int *)(a2 + 44);
      if (HIBYTE(*(_DWORD *)(a2 + 44)))
        v17 = (_DWORD *)(v3 + 16 * ((v16 >> 23) & 1));
      else
        v17 = 0;
      v18 = v17[6];
      v19 = v17[7];
      v20 = v17[8];
      if ((v16 & 0x800000) != 0)
        v21 = *(_QWORD *)(a2 + 72);
      else
        v21 = 0;
      mlir::ValueRange::ValueRange(v58, v21 + 32 * (v19 + v18), (v20 + v19 + v18) - (unint64_t)(v19 + v18));
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v58[0], v58[1]);
      return 1;
    }
    v22 = *(unsigned int *)(a2 + 40);
    v23 = v3
        + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
        + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8);
    v55 = v57;
    v56 = 0x400000000;
    v24 = *(_QWORD *)(((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v22 + 8);
    if (v24)
      v25 = (ZinIrHalH13g **)(v24 - 8);
    else
      v25 = 0;
    mlir::Block::getTerminator(v25);
    v27 = *(_QWORD *)(((v3
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 7) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    if (v27)
      v28 = v27 - 8;
    else
      v28 = 0;
    v51 = a3;
    v52 = v13;
    v53 = v15;
    if ((*(_BYTE *)(v26 + 46) & 0x80) == 0 || (v29 = v26, v30 = *(unsigned int *)(v26 + 68), !(_DWORD)v30))
    {
      v33 = 0;
      v32 = 0;
LABEL_40:
      if (!v53 && ((v33 | v32) & 1) != 0
        || (v53 ? (v46 = v52 > 1) : (v46 = 0), !v46 ? (v47 = 0) : (v47 = 1), (v47 & v32 & 1) != 0))
      {
        v8 = 0;
        v48 = v55;
        if (v55 == v57)
          return v8;
      }
      else
      {
        mlir::ValueRange::ValueRange(v54, (uint64_t)v55, v56);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v51 + 24))(v51, a2, v54[0], v54[1]);
        v8 = 1;
        v48 = v55;
        if (v55 == v57)
          return v8;
      }
      free(v48);
      return v8;
    }
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = *(_QWORD *)(v28 + 48);
    v35 = *(_QWORD *)(v28 + 56) - v34;
    v36 = (char *)(v34 + 8);
    v37 = 8 * (v35 >> 3);
    v38 = (char *)(v34 + v37);
    v39 = v37 - 8;
    while (1)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v29 + 72) + 32 * v31 + 24);
      v42 = v36;
      if (v35 != 8)
      {
        v43 = v39;
        v42 = v36;
        while (*(_QWORD *)v42 != v41)
        {
          v42 += 8;
          v43 -= 8;
          if (!v43)
          {
            v42 = v38;
            break;
          }
        }
      }
      if (v42 != v38)
        break;
      v40 = v56;
      v33 = 1;
      if (v56 >= (unint64_t)HIDWORD(v56))
        goto LABEL_38;
LABEL_27:
      *((_QWORD *)v55 + v40) = v41;
      LODWORD(v56) = v56 + 1;
      if (++v31 == v30)
        goto LABEL_40;
    }
    v44 = ((unint64_t)(v42 - v36) >> 3);
    v32 |= v31 != v44;
    if (*(_BYTE *)(a2 + 47))
      v45 = a2 + 80;
    else
      v45 = 0;
    v41 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                    + 32 * (*(_DWORD *)(v45 + 28) + *(_DWORD *)(v45 + 24))
                    + 32 * v44
                    + 24);
    v40 = v56;
    if (v56 < (unint64_t)HIDWORD(v56))
      goto LABEL_27;
LABEL_38:
    v50 = v33;
    v49 = v39;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v40 + 1, 8);
    v39 = v49;
    v33 = v50;
    v40 = v56;
    goto LABEL_27;
  }
  return 0;
}

mlir::Block *llvm::function_ref<BOOL ()(mlir::OpOperand &)>::callback_fn<mlir::affine::AffineForOp::replaceWithAdditionalYields(mlir::RewriterBase &,mlir::ValueRange,BOOL,std::function<llvm::SmallVector<mlir::Value,6u> ()(mlir::OpBuilder &,mlir::Location,llvm::ArrayRef<mlir::BlockArgument>)> const&)::$_1>(mlir::Operation ***a1, uint64_t a2)
{
  return mlir::Operation::isProperAncestor(**a1, *(Operation **)(a2 + 16));
}

uint64_t mlir::AsmParser::parseAttribute<mlir::IntegerSetAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
    v13 = v26;
  else
    v13 = 0;
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = __p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = *--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineIfOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[38];
  unint64_t v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void `anonymous namespace'::SimplifyDeadElse::~SimplifyDeadElse(_anonymous_namespace_::SimplifyDeadElse *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineIfOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyDeadElse::matchAndRewrite(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v5 = a2[11];
  if ((v5 & 0x7FFFFF) != 0)
  {
    v6 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
    if (*(_QWORD *)(v6 + 24) == v6 + 24)
      return 0;
  }
  else if (MEMORY[0x18] == 24)
  {
    return 0;
  }
  v7 = *(_QWORD *)((((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17]
                   + ((v5 >> 21) & 0x7F8)
                   + 3) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * a2[10]
                 + 32);
  v8 = v7 - 8;
  if (!v7)
    v8 = 0;
  v9 = v8 + 32;
  v10 = *(_QWORD *)(v8 + 40);
  if (v10 == v9 || *(_QWORD *)(v10 + 8) != v9 || a2[9])
    return 0;
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a3 + 72))(a3, a2);
  v12 = *(_QWORD *)((((unint64_t)&a2[4 * (((unint64_t)a2[11] >> 23) & 1) + 17]
                    + (((unint64_t)a2[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a2[10]
                  + 32);
  if (v12)
    v13 = v12 - 8;
  else
    v13 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v13);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a3 + 80))(a3, a2);
  return 1;
}

void `anonymous namespace'::AlwaysTrueOrFalseIf::~AlwaysTrueOrFalseIf(_anonymous_namespace_::AlwaysTrueOrFalseIf *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::AlwaysTrueOrFalseIf::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InherentAttr;
  char v6;
  int *v7;
  int *Value;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  ZinIrHalH13g **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  _BOOL4 v19;
  mlir::MLIRContext **Constraint;
  int *v21;
  unint64_t v22[2];
  unint64_t v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"condition", 9);
    if (v6)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_8:
      v7 = 0;
      goto LABEL_9;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "condition", 9uLL);
  if (!InherentAttr)
    goto LABEL_8;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerSetAttr,void>::id)
    v7 = (int *)InherentAttr;
  else
    v7 = 0;
LABEL_9:
  v21 = v7;
  Value = (int *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v21);
  v21 = Value;
  if (mlir::IntegerSet::isEmptyIntegerSet(&v21))
  {
    v9 = *(unsigned int *)(a2 + 44);
    if (!*(_DWORD *)(a2 + 36))
    {
      if ((v9 & 0x7FFFFF) != 0)
      {
        v10 = ((a2 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *(unsigned int *)(a2 + 40);
        if (*(_QWORD *)(v10 + 24) != v10 + 24)
          goto LABEL_13;
      }
      else if (MEMORY[0x18] != 24)
      {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2);
      return 1;
    }
LABEL_13:
    v11 = (uint64_t *)(((a2 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 32);
LABEL_14:
    v12 = *v11;
    if (v12)
      v13 = (ZinIrHalH13g **)(v12 - 8);
    else
      v13 = 0;
    mlir::Block::getTerminator(v13);
    v15 = v14;
    mlir::ValueRange::ValueRange(v23, 0, 0);
    mlir::RewriterBase::inlineBlockBefore(a3, (uint64_t)v13, a2, v23[0], v23[1]);
    if ((*(_BYTE *)(v15 + 46) & 0x80) != 0)
    {
      v16 = *(_QWORD *)(v15 + 72);
      v17 = *(unsigned int *)(v15 + 68);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    mlir::ValueRange::ValueRange(v22, v16, v17);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2, v22[0], v22[1]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, v15);
    return 1;
  }
  v21 = Value;
  if (mlir::IntegerSet::getNumEqualities((mlir::IntegerSet *)&v21) != 1
    || mlir::IntegerSet::getNumInequalities((mlir::IntegerSet *)&v21))
  {
    return 0;
  }
  Constraint = (mlir::MLIRContext **)mlir::IntegerSet::getConstraint((mlir::IntegerSet *)&v21, 0);
  v19 = mlir::AffineExpr::operator==(&Constraint, 0);
  result = 0;
  if (v19)
  {
    v11 = (uint64_t *)(((a2
                      + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                      + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                      + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * *(unsigned int *)(a2 + 40)
                    + 8);
    goto LABEL_14;
  }
  return result;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineLoadOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineLoadOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  ZinIrHalH13g *v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  unint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x24BDAC8D0];
  v34 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v34);
  v30 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v34 = v36;
    v35 = 0x800000000;
    v7 = -1;
    v8 = 32;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v7, 8);
    v9 = v35;
    v10 = v34;
    v11 = (char *)v34 + 8 * v35;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 1;
  v8 = *(_QWORD *)(a2 + 72) + 32;
  v34 = v36;
  v35 = 0x800000000;
  if ((unint64_t)(v6 - 1) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 1)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v36;
  v11 = v36;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v35;
  v9 = v7;
LABEL_17:
  LODWORD(v35) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v30, (uint64_t)&v34);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v30, (uint64_t)&v34);
  simplifyMapWithOperands((mlir::AffineExpr *)&v30, (uint64_t *)v34, v35);
  if (v30 != Value)
  {
    v22 = v34;
    goto LABEL_19;
  }
  v22 = v34;
  if (!v9)
  {
LABEL_29:
    v24 = 0;
    if (v34 == v36)
      return v24;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v34)
  {
    v26 = (uint64_t *)(v8 + 56);
    v27 = 1;
    while (v9 != v27)
    {
      v28 = *v26;
      v26 += 4;
      v29 = *((_QWORD *)v34 + v27++);
      if (v28 != v29)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v32[1] = v35;
  v33 = v30;
  v31 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v32[0] = v22;
  v23 = mlir::OpBuilder::create<mlir::affine::AffineLoadOp,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v31, &v33, (uint64_t)v32);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v23);
  v24 = 1;
  v22 = v34;
  if (v34 != v36)
LABEL_20:
    free(v22);
  return v24;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineLoadOp,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  ZinIrHalH13g *v16;
  ZinIrHalH13g *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  unint64_t v24[2];
  _QWORD v25[39];

  v25[38] = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.load", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"affine.load";
    v22[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  v13 = *a3;
  v14 = *a4;
  v15 = mlir::ValueRange::ValueRange(v24, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  mlir::affine::AffineLoadOp::build((uint64_t)v15, (uint64_t)v25, v13, v14, v24[0], v24[1]);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineLoadOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineStoreOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineStoreOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  ZinIrHalH13g *v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v36 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  v31 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v36 = v38;
    v37 = 0x800000000;
    v7 = -2;
    v8 = 64;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v7, 8);
    v9 = v37;
    v10 = v36;
    v11 = (char *)v36 + 8 * v37;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(a2 + 72) + 64;
  v36 = v38;
  v37 = 0x800000000;
  if ((unint64_t)(v6 - 2) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 2)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v38;
  v11 = v38;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v37;
  v9 = v7;
LABEL_17:
  LODWORD(v37) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  simplifyMapWithOperands((mlir::AffineExpr *)&v31, (uint64_t *)v36, v37);
  if (v31 != Value)
  {
    v22 = v36;
    goto LABEL_19;
  }
  v22 = v36;
  if (!v9)
  {
LABEL_29:
    v25 = 0;
    if (v36 == v38)
      return v25;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v36)
  {
    v27 = (uint64_t *)(v8 + 56);
    v28 = 1;
    while (v9 != v28)
    {
      v29 = *v27;
      v27 += 4;
      v30 = *((_QWORD *)v36 + v28++);
      if (v29 != v30)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v34[1] = v37;
  v35 = v31;
  v23 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(v23 + 24);
  v34[0] = v22;
  v32 = *(_QWORD *)(v23 + 56);
  v24 = mlir::OpBuilder::create<mlir::affine::AffineStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v33, &v32, &v35, (uint64_t)v34);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v24);
  v25 = 1;
  v22 = v36;
  if (v36 != v38)
LABEL_20:
    free(v22);
  return v25;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *v22;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  unint64_t v29[2];
  _QWORD v30[39];

  v30[38] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.store", (const unsigned __int8 *)0xC, Context);
  if (!v14)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"affine.store";
    v27[3] = 12;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v26 = 259;
    llvm::operator+(v27, v25, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  mlir::ValueRange::ValueRange(v29, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v18 = v29[0];
  v19 = v29[1];
  v27[0] = v15;
  v25[0] = v16;
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v27, 1);
  mlir::OperationState::addOperands((uint64_t)v30, (uint64_t)v25, 1);
  mlir::OperationState::addOperands((uint64_t)v30, v18, v19);
  v20 = mlir::AffineMapAttr::get(v17);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineStoreOpGenericAdaptorBase::Properties>(v30) = v20;
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineStoreOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v22;
}

void mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C025F58;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>]";
    v25 = 115;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C025CC0;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>]";
    v25 = 111;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C01E898;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = MergeAffineMinMaxOp<mlir::affine::AffineMinOp>]";
    v25 = 96;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.min", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C0268B8;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>]";
    v25 = 119;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrHalH13g *v8;
  _QWORD v10[2];
  uint64_t Value;

  v5 = a2 + 64;
  v10[0] = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  v10[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v10) != 1)
    return 0;
  v10[0] = *(_QWORD *)(v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v10[0] = v7;
  v10[1] = v6;
  v8 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v8);
  return 1;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.apply", (const unsigned __int8 *)0xC, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.apply";
    v24[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineApplyOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Results;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int NumDims;
  int NumSymbols;
  unint64_t v19;
  uint64_t v20;
  ZinIrHalH13g *v21;
  uint64_t v23;
  uint64_t Value;
  void *v25;
  uint64_t v26;
  _BYTE v27[32];
  unint64_t v28[3];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v25 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25);
  v25 = v27;
  v26 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  v7 = v26;
  if (v6)
  {
    v8 = (uint64_t *)Results;
    v9 = (uint64_t *)(Results + 8 * v6);
    do
    {
      v10 = *v8;
      v11 = v25;
      v12 = v7;
      v13 = (char *)v25;
      if (v7)
      {
        v14 = 8 * v7;
        v13 = (char *)v25;
        while (*(_QWORD *)v13 != v10)
        {
          v13 += 8;
          v14 -= 8;
          if (!v14)
          {
            v13 = (char *)v25 + 8 * v7;
            break;
          }
        }
      }
      if (v7 == (v13 - (_BYTE *)v25) >> 3)
      {
        if (v7 >= HIDWORD(v26))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v7 + 1, 8);
          v12 = v26;
          v11 = v25;
        }
        v11[v12] = v10;
        v7 = v26 + 1;
        LODWORD(v26) = v26 + 1;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  if (v7 == mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
  {
    v15 = 0;
    v16 = v25;
    if (v25 == v27)
      return v15;
    goto LABEL_19;
  }
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  v23 = mlir::AffineMap::get(NumDims, NumSymbols, (uint64_t)v25, v26, a3[1]);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v19 = *(unsigned int *)(a2 + 68);
    v20 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  mlir::ValueRange::ValueRange(v28, v20, v19);
  v21 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&v23, (uint64_t *)v28);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v21);
  v15 = 1;
  v16 = v25;
  if (v25 != v27)
LABEL_19:
    free(v16);
  return v15;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  _QWORD v26[8];
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[29];

  v30[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.min";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  v11 = *a3;
  v12 = *a4;
  v13 = a4[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v26, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v26) = v16;
  v17 = v28;
  if (v28 >= v29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v28 + 1, 8);
    v17 = v28;
  }
  *(_QWORD *)(v27 + 8 * v17) = IndexType;
  ++v28;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v19;
}

_QWORD *MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::~MergeAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::~MergeAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t MergeAffineMinMaxOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t NumDims;
  unint64_t v10;
  uint64_t v11;
  unint64_t NumSymbols;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t *v19;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t *v25;
  int v27;
  uint64_t Results;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t DefiningOp;
  unsigned int Position;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrHalH13g *v69;
  uint64_t v70;
  void *v71;
  mlir::IndexType **v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t Value;
  mlir::MLIRContext **v78[4];
  _QWORD v79[2];
  mlir::MLIRContext **v80;
  mlir::MLIRContext **v81;
  void *v82;
  unint64_t v83;
  _BYTE v84[64];
  void *v85;
  uint64_t v86;
  _BYTE v87[32];
  void *v88;
  uint64_t v89;
  _BYTE v90[32];
  void *v91;
  uint64_t v92;
  _BYTE v93[64];
  char *v94;
  unint64_t v95;
  _BYTE v96[64];
  void *v97;
  unint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v94 = *(char **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v6, v5);
  v7 = v94;
  v8 = v95;
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (v8 < NumDims)
    NumDims = v8;
  v99 = v7;
  v100 = NumDims;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v10 = *(unsigned int *)(a2 + 68);
    v11 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v11, v10);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  if (v95 <= NumSymbols)
  {
    v13 = v94;
    NumSymbols = v95;
  }
  else
  {
    v13 = (void *)mlir::ValueRange::offset_base(&v94, v95 - NumSymbols);
  }
  v97 = v13;
  v98 = NumSymbols;
  v14 = v99;
  v15 = v100;
  v94 = v96;
  v95 = 0x800000000;
  if (v100 < 9)
  {
    v16 = 0;
    v91 = v99;
    v92 = 0;
    v17 = v96;
    if (!v100)
    {
      v21 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v100, 8);
    v16 = v95;
    v17 = v94;
    v91 = v14;
    v92 = 0;
  }
  v18 = 0;
  v19 = (uint64_t *)&v17[8 * v16];
  do
  {
    *v19++ = mlir::ValueRange::dereference_iterator(&v91, v18);
    v18 = ++v92;
  }
  while (v91 != v14 || v18 != v15);
  v21 = v95;
  v13 = v97;
  NumSymbols = v98;
LABEL_20:
  LODWORD(v95) = v21 + v15;
  v91 = v93;
  v92 = 0x800000000;
  if (NumSymbols < 9)
  {
    v22 = 0;
    v82 = v13;
    v83 = 0;
    v23 = v93;
    if (!NumSymbols)
    {
      v27 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, NumSymbols, 8);
    v22 = v92;
    v23 = v91;
    v82 = v13;
    v83 = 0;
  }
  v24 = 0;
  v25 = (uint64_t *)&v23[8 * v22];
  do
  {
    *v25++ = mlir::ValueRange::dereference_iterator(&v82, v24);
    v24 = ++v83;
  }
  while (v82 != v13 || v24 != NumSymbols);
  v27 = v92;
LABEL_30:
  LODWORD(v92) = v27 + NumSymbols;
  v88 = v90;
  v89 = 0x400000000;
  v85 = v87;
  v86 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  if (v29)
  {
    v30 = (void **)Results;
    v31 = 8 * v29;
    while (1)
    {
      v33 = *v30;
      v82 = *v30;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 7)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, (uint64_t)v33);
        v79[0] = v82;
        if (v82)
          goto LABEL_37;
LABEL_40:
        v82 = v33;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 6)
        {
          ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, (uint64_t)v33);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        else
        {
          ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, 0);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v78);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v99, Position);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (DefiningOp)
          goto LABEL_45;
LABEL_32:
        v32 = v89;
        if (v89 >= (unint64_t)HIDWORD(v89))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
          v32 = v89;
        }
        *((_QWORD *)v88 + v32) = v33;
        LODWORD(v89) = v89 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
      else
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, 0);
        v79[0] = v82;
        if (!v82)
          goto LABEL_40;
LABEL_37:
        v34 = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v79);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v97, v34);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (!DefiningOp)
          goto LABEL_32;
LABEL_45:
        v37 = DefiningOp;
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
          goto LABEL_32;
        v38 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v86 + 1, 8);
          v38 = v86;
        }
        *((_QWORD *)v85 + v38) = v37;
        LODWORD(v86) = v86 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
    }
  }
  if ((_DWORD)v86)
  {
    v74 = a2;
    v73 = a3;
    v39 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    v40 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
    if ((_DWORD)v86)
    {
      v41 = (char *)v85;
      v75 = (char *)v85 + 8 * v86;
      while (1)
      {
        v42 = *(_QWORD *)v41;
        v82 = *(void **)(*(_QWORD *)v41
                       + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)v41 + 44) >> 23) & 1)
                       + 64);
        v79[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v82);
        v43 = mlir::AffineMap::getNumDims((mlir::AffineMap *)v79);
        v44 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v79);
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v45 = *(unsigned int *)(v42 + 68);
          v46 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v46 = 0;
          v45 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v46, v45);
        v47 = v82;
        v48 = v83 >= v43 ? v43 : v83;
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v49 = *(unsigned int *)(v42 + 68);
          v50 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v50 = 0;
          v49 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v50, v49);
        v51 = v82;
        v52 = v44;
        if (v83 > v44)
          break;
        v52 = v83;
        v53 = v95;
        v54 = v48 + v95;
        if (v54 > HIDWORD(v95))
          goto LABEL_64;
LABEL_65:
        v82 = v47;
        v83 = 0;
        if (v48)
        {
          v55 = 0;
          v56 = (uint64_t *)&v94[8 * v53];
          do
          {
            *v56++ = mlir::ValueRange::dereference_iterator(&v82, v55);
            v55 = ++v83;
          }
          while (v82 != v47 || v55 != v48);
          LODWORD(v53) = v95;
        }
        LODWORD(v95) = v53 + v48;
        v58 = v92;
        v59 = v52 + v92;
        if (v59 > HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v59, 8);
          v58 = v92;
        }
        v82 = v51;
        v83 = 0;
        if (v52)
        {
          v60 = 0;
          v61 = (uint64_t *)((char *)v91 + 8 * v58);
          do
          {
            *v61++ = mlir::ValueRange::dereference_iterator(&v82, v60);
            v60 = ++v83;
          }
          while (v82 != v51 || v60 != v52);
          LODWORD(v58) = v92;
        }
        LODWORD(v92) = v58 + v52;
        v63 = mlir::AffineMap::getResults((mlir::AffineMap *)v79);
        if (v64)
        {
          v65 = (void **)v63;
          v66 = 8 * v64;
          do
          {
            v82 = *v65;
            v78[0] = (mlir::MLIRContext **)mlir::AffineExpr::shiftDims((mlir::MLIRContext ***)&v82, v43, v39, 0);
            v67 = mlir::AffineExpr::shiftSymbols(v78, v44, v40, 0);
            v68 = v89;
            if (v89 >= (unint64_t)HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
              v68 = v89;
            }
            *((_QWORD *)v88 + v68) = v67;
            LODWORD(v89) = v89 + 1;
            ++v65;
            v66 -= 8;
          }
          while (v66);
        }
        v39 += v43;
        v40 += v44;
        v41 += 8;
        if (v41 == v75)
          goto LABEL_91;
      }
      v51 = (void *)mlir::ValueRange::offset_base(&v82, v83 - v44);
      v53 = v95;
      v54 = v48 + v95;
      if (v54 <= HIDWORD(v95))
        goto LABEL_65;
LABEL_64:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v54, 8);
      v53 = v95;
      goto LABEL_65;
    }
LABEL_91:
    v76 = mlir::AffineMap::get(v39, v40, (uint64_t)v88, v89, v73[1]);
    v81 = (mlir::MLIRContext **)((char *)v91 + 8 * v92);
    v82 = v84;
    v83 = 0x800000000;
    v79[0] = v94;
    v79[1] = v91;
    v80 = (mlir::MLIRContext **)&v94[8 * v95];
    v78[0] = v80;
    v78[1] = v81;
    v78[2] = v80;
    v78[3] = v81;
    llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>((uint64_t)&v82, v79, v78);
    v69 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(v73 + 1, *(_QWORD *)(v74 + 24), (unint64_t *)&v76, (uint64_t)&v82);
    (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*v73 + 4))(v73, v74, v69);
    if (v82 != v84)
      free(v82);
    v70 = 1;
    v71 = v85;
    if (v85 != v87)
      goto LABEL_94;
  }
  else
  {
    v70 = 0;
    v71 = v85;
    if (v85 != v87)
LABEL_94:
      free(v71);
  }
  if (v88 != v90)
    free(v88);
  if (v91 != v93)
    free(v91);
  if (v94 != v96)
    free(v94);
  return v70;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.min";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Value;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  int v15;
  unint64_t v16;
  ZinIrHalH13g *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v26 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  v24 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v26, v7, v6);
  v9 = v26;
  v8 = v27;
  v26 = v28;
  v27 = 0x800000000;
  if (v8 < 9)
  {
    v10 = 0;
    v29 = v9;
    v30 = 0;
    v11 = v28;
    if (!v8)
    {
      v15 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v8, 8);
    v10 = v27;
    v11 = v26;
    v29 = v9;
    v30 = 0;
  }
  v12 = 0;
  v13 = (uint64_t *)&v11[8 * v10];
  do
  {
    *v13++ = mlir::ValueRange::dereference_iterator(&v29, v12);
    v12 = ++v30;
  }
  while (v29 != v9 || v12 != v8);
  v15 = v27;
LABEL_13:
  LODWORD(v27) = v15 + v8;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  simplifyMapWithOperands((mlir::AffineExpr *)&v24, (uint64_t *)v26, v27);
  v16 = v24;
  if (v24 == Value)
  {
    v21 = v26;
    v29 = v9;
    v30 = 0;
    if (!v8)
    {
LABEL_25:
      v18 = 0;
      v19 = v26;
      if (v26 == v28)
        return v18;
      goto LABEL_15;
    }
    v22 = 0;
    while (*v21 == mlir::ValueRange::dereference_iterator(&v29, v22))
    {
      v22 = ++v30;
      ++v21;
      if (v29 == v9 && v22 == v8)
        goto LABEL_25;
    }
    v16 = v24;
  }
  v25 = v16;
  v29 = v26;
  v30 = v27;
  v17 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(_QWORD *)(a2 + 24), &v25, (uint64_t)&v29);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v17);
  v18 = 1;
  v19 = v26;
  if (v26 != v28)
LABEL_15:
    free(v19);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.min", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.min";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMinOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  ZinIrHalH13g *v7;
  uint64_t Value;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (!canonicalizeMapExprAndTermOrder((mlir::AffineMap *)&Value))
    return 0;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v6, v5);
  v7 = mlir::OpBuilder::create<mlir::affine::AffineMinOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t *)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v7);
  return 1;
}

uint64_t canonicalizeMapExprAndTermOrder(mlir::AffineMap *a1)
{
  uint64_t Results;
  uint64_t v3;
  mlir::AffineExpr *v4;
  mlir::AffineExpr *v5;
  int v6;
  int NumDims;
  int NumSymbols;
  char v9;
  int v10;
  int v11;
  void *v12;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  unsigned int v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned int Kind;
  uint64_t v37;
  _QWORD *v38;
  int32x4_t *v39;
  uint64_t v40;
  char *v41;
  int32x4_t *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unsigned int *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  void *v58;
  uint64_t v59;
  _QWORD *LHS;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  const void *v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[48];
  void *v69;
  void *__p;
  _QWORD v71[4];
  void *v72;
  _BYTE v73[32];
  void *v74;
  uint64_t v75;
  _QWORD v76[10];

  v76[8] = *MEMORY[0x24BDAC8D0];
  v74 = v76;
  v75 = 0x100000000;
  Results = mlir::AffineMap::getResults(a1);
  if (v3)
  {
    v4 = (mlir::AffineExpr *)Results;
    v5 = (mlir::AffineExpr *)(Results + 8 * v3);
    while (1)
    {
      mlir::AffineExpr::isPureAffine(v4);
      if (!v6)
        goto LABEL_49;
      NumDims = mlir::AffineMap::getNumDims(a1);
      NumSymbols = mlir::AffineMap::getNumSymbols(a1);
      mlir::SimpleAffineExprFlattener::SimpleAffineExprFlattener((mlir::SimpleAffineExprFlattener *)&v69, NumDims, NumSymbols);
      mlir::AffineExprVisitor<mlir::SimpleAffineExprFlattener,mlir::LogicalResult>::walkPostOrder((uint64_t)&v69, *(_QWORD *)v4);
      if (!v9
        || (v10 = *(_DWORD *)(v71[0] - 72),
            v11 = mlir::AffineMap::getNumDims(a1),
            v10 != v11 + mlir::AffineMap::getNumSymbols(a1) + 1))
      {
        v17 = 0;
        v69 = &off_24C04FB38;
        v18 = v72;
        if (v72 == v73)
          goto LABEL_14;
LABEL_13:
        free(v18);
        goto LABEL_14;
      }
      v12 = *(void **)(v71[0] - 80);
      v66 = v12;
      v13 = (const void *)(*(_QWORD *)(v71[0] - 80) + 8 * *(unsigned int *)(v71[0] - 72));
      v65 = v13;
      if (v75 < HIDWORD(v75))
        break;
      llvm::SmallVectorTemplateBase<llvm::SmallVector<long long,6u>,false>::growAndEmplaceBack<long long const*,long long const*>((uint64_t)&v74, (const void **)&v66, &v65);
      v17 = 1;
      v69 = &off_24C04FB38;
      v18 = v72;
      if (v72 != v73)
        goto LABEL_13;
LABEL_14:
      v19 = (char *)__p;
      if (__p)
      {
        v20 = (char *)v71[0];
        if ((void *)v71[0] == __p)
        {
          v71[0] = __p;
          operator delete(__p);
          if ((v17 & 1) == 0)
            goto LABEL_49;
        }
        else
        {
          do
          {
            v22 = (char *)*((_QWORD *)v20 - 10);
            v20 -= 80;
            v21 = v22;
            if (v20 + 16 != v22)
              free(v21);
          }
          while (v20 != v19);
          v71[0] = v19;
          operator delete(__p);
          if ((v17 & 1) == 0)
            goto LABEL_49;
        }
      }
      else if (!v17)
      {
        v61 = 0;
LABEL_72:
        v24 = v75;
        v23 = v74;
        if (!(_DWORD)v75)
          goto LABEL_78;
        goto LABEL_73;
      }
      v4 = (mlir::AffineExpr *)((char *)v4 + 8);
      if (v4 == v5)
        goto LABEL_29;
    }
    v14 = (char *)v74 + 64 * (unint64_t)v75;
    *v14 = v14 + 2;
    v14[1] = 0x600000000;
    v15 = (_BYTE *)v13 - (_BYTE *)v12;
    if ((unint64_t)((_BYTE *)v13 - (_BYTE *)v12) < 0x31)
    {
      v16 = 0;
      if (v12 == v13)
        goto LABEL_25;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v14, v14 + 2, v15 >> 3, 8);
      v16 = *((_DWORD *)v14 + 2);
      if (v12 == v13)
      {
LABEL_25:
        *((_DWORD *)v14 + 2) = v16 + ((unint64_t)v15 >> 3);
        LODWORD(v75) = v75 + 1;
        v17 = 1;
        v69 = &off_24C04FB38;
        v18 = v72;
        if (v72 != v73)
          goto LABEL_13;
        goto LABEL_14;
      }
    }
    memcpy((void *)(*v14 + 8 * v16), v12, (_BYTE *)v13 - (_BYTE *)v12);
    v16 = *((_DWORD *)v14 + 2);
    goto LABEL_25;
  }
LABEL_29:
  v23 = v74;
  v24 = v75;
  v25 = (char *)v74 + 64 * (unint64_t)v75;
  if ((_DWORD)v75)
  {
    if ((_DWORD)v75 == 1)
    {
      v61 = 0;
LABEL_73:
      v62 = (unint64_t)v24 << 6;
      do
      {
        v63 = *(char **)((char *)v23 + v62 - 64);
        if ((char *)v23 + v62 - 48 != v63)
          free(v63);
        v62 -= 64;
      }
      while (v62);
      v23 = v74;
      goto LABEL_78;
    }
    v27 = (char *)v74 + 64;
    v26 = *(uint64_t **)v74;
    while (1)
    {
      v28 = v27;
      v29 = *((unsigned int *)v23 + 2);
      if ((_DWORD)v29)
        break;
LABEL_33:
      v61 = 0;
      v27 = v28 + 64;
      v26 = (uint64_t *)v23[8];
      v23 = v28;
      if (v28 + 64 == v25)
        goto LABEL_72;
    }
    v30 = 8 * *((unsigned int *)v23 + 18);
    v31 = 8 * v29 - 8;
    v32 = (uint64_t *)v23[8];
    while (v30)
    {
      v33 = *v32;
      v34 = *v26;
      if (*v32 < *v26)
        break;
      ++v32;
      ++v26;
      v30 -= 8;
      v35 = v34 < v33 || v31 == 0;
      v31 -= 8;
      if (v35)
        goto LABEL_33;
    }
    v23 = v28;
  }
  if (v23 == (_QWORD *)v25)
  {
LABEL_49:
    v61 = 0;
    v24 = v75;
    v23 = v74;
    if (!(_DWORD)v75)
      goto LABEL_78;
    goto LABEL_73;
  }
  Kind = mlir::AffineExpr::getKind(a1);
  v37 = Kind;
  v69 = v71;
  __p = (void *)0xC00000000;
  if (Kind >= 0xD)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, Kind, 4);
    v38 = v69;
    v39 = (int32x4_t *)((char *)v69 + 4 * __p);
    if (v37 < 8)
    {
LABEL_48:
      v40 = 0;
      v41 = (char *)v39;
      do
      {
LABEL_56:
        *(_DWORD *)v41 = v40;
        v41 += 4;
        ++v40;
      }
      while (v37 != v40);
LABEL_57:
      v47 = (int)__p;
      goto LABEL_58;
    }
LABEL_53:
    v40 = v37 & 0xFFFFFFF8;
    v41 = &v39->i8[4 * v40];
    v42 = v39 + 1;
    v43 = (int32x4_t)xmmword_207A8E9A0;
    v44.i64[0] = 0x400000004;
    v44.i64[1] = 0x400000004;
    v45.i64[0] = 0x800000008;
    v45.i64[1] = 0x800000008;
    v46 = v40;
    do
    {
      v42[-1] = v43;
      *v42 = vaddq_s32(v43, v44);
      v43 = vaddq_s32(v43, v45);
      v42 += 2;
      v46 -= 8;
    }
    while (v46);
    if (v40 == v37)
      goto LABEL_57;
    goto LABEL_56;
  }
  if (Kind)
  {
    v38 = v71;
    v39 = (int32x4_t *)v71;
    if (v37 < 8)
      goto LABEL_48;
    goto LABEL_53;
  }
  v47 = 0;
  v38 = v71;
LABEL_58:
  v48 = (v47 + v37);
  v35 = (_DWORD)v48 == 0;
  LODWORD(__p) = v48;
  v49 = (unsigned int *)v38 + v48;
  v66 = &v74;
  v50 = 126 - 2 * __clz(v48);
  if (v35)
    v51 = 0;
  else
    v51 = v50;
  std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>((int64_t)v38, v49, (uint64_t **)&v66, v51, 1);
  v66 = v68;
  v67 = 0x600000000;
  if ((_DWORD)__p)
  {
    v52 = (unsigned int *)v69;
    v53 = 4 * __p;
    do
    {
      v54 = mlir::AffineMap::getResult(a1, *v52);
      v55 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        v55 = v67;
      }
      *((_QWORD *)v66 + v55) = v54;
      LODWORD(v67) = v67 + 1;
      ++v52;
      v53 -= 4;
    }
    while (v53);
  }
  v56 = mlir::AffineMap::getNumDims(a1);
  v57 = mlir::AffineMap::getNumSymbols(a1);
  v58 = v66;
  v59 = v67;
  LHS = (_QWORD *)mlir::AffineBinaryOpExpr::getLHS(a1);
  *(_QWORD *)a1 = mlir::AffineMap::get(v56, v57, (uint64_t)v58, v59, LHS);
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
  v61 = 1;
  v24 = v75;
  v23 = v74;
  if ((_DWORD)v75)
    goto LABEL_73;
LABEL_78:
  if (v23 != v76)
    free(v23);
  return v61;
}

int64_t std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>(int64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;
  BOOL v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t *v37;
  int64_t v38;
  int64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  int64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  BOOL v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  int64_t *v88;
  int64_t v89;
  BOOL v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  int64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  int64_t v100;
  BOOL v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  unsigned int *v135;
  BOOL v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v139;
  int64_t *v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  int64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t *v159;
  unsigned int *v160;
  uint64_t v161;
  unsigned int *v162;
  char *v163;
  unsigned int *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  int64_t *v171;
  uint64_t v172;
  uint64_t v173;
  int64_t v174;
  int64_t v175;
  BOOL v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  int64_t v187;
  int64_t v188;
  int64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  unsigned int *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  BOOL v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  BOOL v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v240;
  unsigned int v241;
  uint64_t *v242;
  unsigned int *v243;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  int64_t *v249;
  uint64_t v250;
  uint64_t v251;
  int64_t v252;
  int64_t v253;
  BOOL v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unsigned int *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int64_t *v266;
  uint64_t v267;
  uint64_t v268;
  int64_t *v269;
  int64_t v270;
  int64_t v271;
  BOOL v272;
  uint64_t v273;
  unint64_t v274;
  unsigned int *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int64_t *v280;
  int64_t v281;
  int64_t v282;
  BOOL v283;
  unsigned int *v284;
  uint64_t v285;
  unsigned int *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int64_t *v292;
  int64_t *v293;
  uint64_t v294;
  uint64_t v295;
  int64_t *v296;
  int64_t v297;
  BOOL v298;
  uint64_t v299;
  unsigned int *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t v308;
  uint64_t v309;
  int64_t v310;
  int64_t v311;
  BOOL v312;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = (char *)v9;
  while (2)
  {
    v9 = (unsigned int *)v11;
    v12 = (char *)a2 - v11;
    v13 = ((char *)a2 - v11) >> 2;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v146 = *(unsigned int *)v11;
        v147 = **a3;
        v148 = v147 + (v146 << 6);
        v149 = *(unsigned int *)(v148 + 8);
        if (!(_DWORD)v149)
          return result;
        v150 = *(a2 - 1);
        v151 = v147 + (v150 << 6);
        v152 = *(uint64_t **)v151;
        v153 = *(uint64_t **)v148;
        v154 = 8 * *(unsigned int *)(v151 + 8);
        v155 = 8 * v149 - 8;
        while (v154)
        {
          v156 = *v152;
          v157 = *v153;
          if (*v152 < *v153)
            break;
          ++v152;
          ++v153;
          v154 -= 8;
          v158 = v157 < v156 || v155 == 0;
          v155 -= 8;
          if (v158)
            return result;
        }
        *(_DWORD *)v11 = v150;
        *(a2 - 1) = v146;
        return result;
      case 3:
        return (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11, (_DWORD *)v11 + 1, v10, **a3);
      case 4:
        return (int64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v11, (_DWORD *)v11 + 1, (_DWORD *)v11 + 2, v10, a3);
      case 5:
        return (int64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(v11, (_DWORD *)v11 + 1, (_DWORD *)v11 + 2, (_DWORD *)v11 + 3, v10, a3);
      default:
        if (v12 <= 95)
        {
          v159 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v11 == (char *)a2)
              return result;
            v160 = (unsigned int *)(v11 + 4);
            if (v11 + 4 == (char *)a2)
              return result;
            v161 = *v159;
            v162 = (unsigned int *)v11;
            while (1)
            {
              v164 = v162;
              v162 = v160;
              v165 = *v164;
              v166 = v161 + (v165 << 6);
              v167 = *(unsigned int *)(v166 + 8);
              if ((_DWORD)v167)
              {
                v168 = v164[1];
                v169 = v161 + (v168 << 6);
                v170 = *(uint64_t **)v169;
                v171 = *(int64_t **)v166;
                v172 = 8 * *(unsigned int *)(v169 + 8);
                v173 = 8 * v167 - 8;
                result = *(_QWORD *)v169;
                while (v172)
                {
                  v174 = *(_QWORD *)result;
                  v175 = *v171;
                  if (*(_QWORD *)result < *v171)
                    break;
                  result += 8;
                  ++v171;
                  v172 -= 8;
                  v176 = v175 < v174 || v173 == 0;
                  v173 -= 8;
                  if (v176)
                    goto LABEL_182;
                }
                v164[1] = v165;
                v163 = v11;
                if (v164 != (unsigned int *)v11)
                {
                  v177 = v164;
                  do
                  {
                    v179 = *--v177;
                    v178 = v179;
                    v180 = v161 + ((unint64_t)v179 << 6);
                    result = *(unsigned int *)(v180 + 8);
                    if (!(_DWORD)result)
                    {
LABEL_180:
                      v163 = (char *)v164;
                      goto LABEL_181;
                    }
                    v181 = *(uint64_t **)v180;
                    v182 = 8 * *(unsigned int *)(v169 + 8);
                    result = 8 * result - 8;
                    v183 = v170;
                    while (v182)
                    {
                      v184 = *v183;
                      v185 = *v181;
                      if (*v183 < *v181)
                        break;
                      ++v183;
                      ++v181;
                      v182 -= 8;
                      v186 = v185 < v184 || result == 0;
                      result -= 8;
                      if (v186)
                        goto LABEL_180;
                    }
                    *v164 = v178;
                    v164 = v177;
                  }
                  while (v177 != (unsigned int *)v11);
                  v163 = v11;
                }
LABEL_181:
                *(_DWORD *)v163 = v168;
              }
LABEL_182:
              v160 = v162 + 1;
              if (v162 + 1 == a2)
                return result;
            }
          }
          if (v11 == (char *)a2)
            return result;
          v284 = (unsigned int *)(v11 + 4);
          if (v11 + 4 == (char *)a2)
            return result;
          v285 = *v159;
LABEL_307:
          v286 = v9;
          v9 = v284;
          v287 = *v286;
          v288 = v285 + (v287 << 6);
          v289 = *(unsigned int *)(v288 + 8);
          if (!(_DWORD)v289)
            goto LABEL_306;
          v290 = v286[1];
          v291 = v285 + (v290 << 6);
          v292 = *(int64_t **)v291;
          v293 = *(int64_t **)v288;
          v294 = 8 * *(unsigned int *)(v291 + 8);
          v295 = 8 * v289 - 8;
          v296 = *(int64_t **)v291;
          while (v294)
          {
            result = *v296;
            v297 = *v293;
            if (*v296 < *v293)
              break;
            ++v296;
            ++v293;
            v294 -= 8;
            v298 = v297 < result || v295 == 0;
            v295 -= 8;
            if (v298)
              goto LABEL_306;
          }
          *v9 = v287;
          v300 = v286 - 1;
          v299 = *(v286 - 1);
          v301 = v285 + (v299 << 6);
          v302 = *(unsigned int *)(v301 + 8);
          if (!(_DWORD)v302)
            goto LABEL_305;
          v303 = *(_QWORD *)v301;
          v304 = *(_QWORD *)v301 + 8 * v302;
          while (1)
          {
            v307 = v286;
            v286 = v300;
            v308 = 8 * *(unsigned int *)(v291 + 8);
            v309 = v303 + 8;
            result = (int64_t)v292;
            while (v308)
            {
              v310 = *(_QWORD *)result;
              v311 = *(_QWORD *)(v309 - 8);
              if (*(_QWORD *)result < v311)
                break;
              result += 8;
              v308 -= 8;
              v312 = v311 < v310 || v309 == v304;
              v309 += 8;
              if (v312)
              {
                v286 = v307;
LABEL_305:
                *v286 = v290;
LABEL_306:
                v284 = v9 + 1;
                if (v9 + 1 == a2)
                  return result;
                goto LABEL_307;
              }
            }
            *v307 = v299;
            v300 = v286 - 1;
            v299 = *(v286 - 1);
            v305 = v285 + (v299 << 6);
            v303 = *(_QWORD *)v305;
            v306 = *(unsigned int *)(v305 + 8);
            v304 = *(_QWORD *)v305 + 8 * v306;
            if (!(_DWORD)v306)
              goto LABEL_305;
          }
        }
        if (a4)
        {
          v14 = (unint64_t)v13 >> 1;
          v15 = (unsigned int *)&v11[4 * ((unint64_t)v13 >> 1)];
          v16 = **a3;
          if ((unint64_t)v12 >= 0x201)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9, v15, v10, v16);
            v17 = &v9[v14];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9 + 1, v17 - 1, a2 - 2, **a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, **a3);
            result = (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v17 - 1, v15, &v9[v14 + 1], **a3);
            v18 = *v9;
            *v9 = *v17;
            *v17 = v18;
            v10 = a2 - 1;
            --a4;
            v19 = *v9;
            v20 = **a3;
            if ((a5 & 1) != 0)
              goto LABEL_44;
LABEL_8:
            v21 = v20 + (v19 << 6);
            v22 = *(uint64_t **)v21;
            v23 = *(unsigned int *)(v21 + 8);
            v24 = 8 * v23;
            if ((_DWORD)v23)
            {
              v25 = 0;
              v26 = v20 + ((unint64_t)*(v9 - 1) << 6);
              v27 = *(_QWORD *)v26;
              v28 = &v22[v23];
              v29 = 8 * *(unsigned int *)(v26 + 8);
              while (v29 != v25)
              {
                result = *(_QWORD *)(v27 + v25);
                v30 = v22[v25 / 8];
                if (result < v30)
                  break;
                v31 = v30 < result || v24 - 8 == v25;
                v25 += 8;
                if (v31)
                  goto LABEL_17;
              }
              v52 = (unsigned int *)(v20 + (v19 << 6) + 8);
              v55 = v9 + 1;
              v56 = v9[1];
LABEL_47:
              v57 = v9;
LABEL_49:
              v59 = 0;
              v60 = v20 + (v56 << 6);
              v61 = *(_QWORD *)v60;
              v62 = 8 * *(unsigned int *)(v60 + 8);
              do
              {
                if (v62 == v59 || (v63 = *(_QWORD *)(v61 + v59), v64 = v22[v59 / 8], v63 < v64))
                {
                  v57 = v55;
                  v58 = v55[1];
                  ++v55;
                  v56 = v58;
                  goto LABEL_49;
                }
                v59 += 8;
              }
              while (v64 >= v63 && &v22[v59 / 8] != v28);
              v66 = a2;
              if (v57 == v9)
              {
                v66 = a2;
                if (v55 >= a2)
                {
                  v66 = a2;
                }
                else
                {
LABEL_68:
                  v75 = 0;
                  v76 = *--v66;
                  v77 = v20 + ((unint64_t)v76 << 6);
                  v78 = *(_QWORD *)v77;
                  v79 = 8 * *(unsigned int *)(v77 + 8);
                  while (v79 != v75)
                  {
                    v80 = *(_QWORD *)(v78 + v75);
                    v81 = v22[v75 / 8];
                    if (v80 < v81)
                      break;
                    v75 += 8;
                    if (v81 < v80 || &v22[v75 / 8] == v28)
                    {
                      if (v55 < v66)
                        goto LABEL_68;
                      break;
                    }
                  }
                }
              }
              else
              {
LABEL_58:
                v67 = 0;
                v68 = *--v66;
                v69 = v20 + ((unint64_t)v68 << 6);
                v70 = *(_QWORD *)v69;
                v71 = 8 * *(unsigned int *)(v69 + 8);
                while (v71 != v67)
                {
                  v72 = *(_QWORD *)(v70 + v67);
                  v73 = v22[v67 / 8];
                  if (v72 < v73)
                    break;
                  v67 += 8;
                  if (v73 < v72 || &v22[v67 / 8] == v28)
                    goto LABEL_58;
                }
              }
              v11 = (char *)v55;
              if (v55 < v66)
                goto LABEL_121;
              goto LABEL_142;
            }
LABEL_17:
            v32 = v20 + ((unint64_t)*v10 << 6);
            v33 = *(_QWORD *)v32;
            v34 = *(unsigned int *)(v32 + 8);
            if ((_DWORD)v34)
            {
              v35 = 8 * v34 - 8;
              v36 = v24;
              v37 = *(int64_t **)v21;
              result = v33;
              while (v36)
              {
                v38 = *v37;
                v39 = *(_QWORD *)result;
                if (*v37 < *(_QWORD *)result)
                  break;
                ++v37;
                result += 8;
                v36 -= 8;
                v40 = v39 < v38 || v35 == 0;
                v35 -= 8;
                if (v40)
                  goto LABEL_26;
              }
              v11 = (char *)v9;
              do
              {
LABEL_149:
                v137 = *((_DWORD *)v11 + 1);
                v11 += 4;
                v138 = v20 + ((unint64_t)v137 << 6);
                v139 = *(unsigned int *)(v138 + 8);
              }
              while (!(_DWORD)v139);
              v140 = *(int64_t **)v138;
              v141 = 8 * v139 - 8;
              v142 = v24;
              result = *(_QWORD *)v21;
              while (v142)
              {
                v143 = *(_QWORD *)result;
                v144 = *v140;
                if (*(_QWORD *)result < *v140)
                  break;
                result += 8;
                ++v140;
                v142 -= 8;
                v145 = v144 < v143 || v141 == 0;
                v141 -= 8;
                if (v145)
                  goto LABEL_149;
              }
            }
            else
            {
LABEL_26:
              v11 = (char *)(v9 + 1);
              if (v9 + 1 < a2)
              {
                while (1)
                {
                  v41 = v20 + ((unint64_t)*(unsigned int *)v11 << 6);
                  v42 = *(unsigned int *)(v41 + 8);
                  if ((_DWORD)v42)
                    break;
LABEL_36:
                  v11 += 4;
                  if (v11 >= (char *)a2)
                    goto LABEL_37;
                }
                v43 = *(int64_t **)v41;
                v44 = 8 * v42 - 8;
                v45 = v24;
                result = *(_QWORD *)v21;
                while (v45)
                {
                  v46 = *(_QWORD *)result;
                  v47 = *v43;
                  if (*(_QWORD *)result < *v43)
                    break;
                  result += 8;
                  ++v43;
                  v45 -= 8;
                  v48 = v47 < v46 || v44 == 0;
                  v44 -= 8;
                  if (v48)
                    goto LABEL_36;
                }
              }
            }
LABEL_37:
            if (v11 < (char *)a2)
              v49 = v10;
            else
              v49 = a2;
            if ((_DWORD)v34 && v11 < (char *)a2)
            {
              v50 = v33 + 8 * v34;
              v49 = v10;
              do
              {
                v86 = v33 + 8;
                v87 = v24;
                v88 = *(int64_t **)v21;
                while (v87)
                {
                  result = *v88;
                  v89 = *(_QWORD *)(v86 - 8);
                  if (*v88 < v89)
                    break;
                  ++v88;
                  v87 -= 8;
                  v90 = v89 < result || v86 == v50;
                  v86 += 8;
                  if (v90)
                    goto LABEL_90;
                }
                v83 = *--v49;
                v84 = v20 + ((unint64_t)v83 << 6);
                v33 = *(_QWORD *)v84;
                v85 = *(unsigned int *)(v84 + 8);
                v50 = *(_QWORD *)v84 + 8 * v85;
              }
              while ((_DWORD)v85);
            }
LABEL_90:
            if (v11 < (char *)v49)
            {
              v91 = *(_DWORD *)v11;
              v92 = *v49;
              do
              {
                *(_DWORD *)v11 = v92;
                *v49 = v91;
                do
                {
LABEL_94:
                  v93 = *((_DWORD *)v11 + 1);
                  v11 += 4;
                  v91 = v93;
                  v94 = v20 + ((unint64_t)v93 << 6);
                  v95 = *(unsigned int *)(v94 + 8);
                }
                while (!(_DWORD)v95);
                v96 = *(int64_t **)v94;
                v97 = 8 * v95 - 8;
                v98 = 8 * *(unsigned int *)(v21 + 8);
                result = (int64_t)v22;
                while (v98)
                {
                  v99 = *(_QWORD *)result;
                  v100 = *v96;
                  if (*(_QWORD *)result < *v96)
                    break;
                  result += 8;
                  ++v96;
                  v98 -= 8;
                  v101 = v100 < v99 || v97 == 0;
                  v97 -= 8;
                  if (v101)
                    goto LABEL_94;
                }
                v102 = *--v49;
                v92 = v102;
                v103 = v20 + ((unint64_t)v102 << 6);
                v104 = *(unsigned int *)(v103 + 8);
                if ((_DWORD)v104)
                {
                  v105 = *(_QWORD *)v103;
                  v106 = v105 + 8 * v104;
                  do
                  {
                    v109 = v105 + 8;
                    result = 8 * *(unsigned int *)(v21 + 8);
                    v110 = v22;
                    while (result)
                    {
                      v111 = *v110;
                      v112 = *(_QWORD *)(v109 - 8);
                      if (*v110 < v112)
                        break;
                      ++v110;
                      result -= 8;
                      v113 = v112 < v111 || v109 == v106;
                      v109 += 8;
                      if (v113)
                        goto LABEL_92;
                    }
                    v107 = *--v49;
                    v92 = v107;
                    v108 = v20 + ((unint64_t)v107 << 6);
                    v105 = *(_QWORD *)v108;
                    result = *(unsigned int *)(v108 + 8);
                    v106 = *(_QWORD *)v108 + 8 * result;
                  }
                  while ((_DWORD)result);
                }
LABEL_92:
                ;
              }
              while (v11 < (char *)v49);
            }
            v114 = (unsigned int *)(v11 - 4);
            if (v11 - 4 != (char *)v9)
              *v9 = *v114;
            a5 = 0;
            *v114 = v19;
            continue;
          }
          result = (int64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v15, v9, v10, v16);
          --a4;
          v19 = *v9;
          v20 = **a3;
          if ((a5 & 1) == 0)
            goto LABEL_8;
LABEL_44:
          v22 = *(uint64_t **)(v20 + (v19 << 6));
          v51 = v20 + (v19 << 6);
          v54 = *(_DWORD *)(v51 + 8);
          v52 = (unsigned int *)(v51 + 8);
          v53 = v54;
          v55 = v9 + 1;
          v56 = v9[1];
          if (v54)
          {
            v28 = &v22[v53];
            goto LABEL_47;
          }
          if (v55 >= a2)
          {
            v66 = a2;
            v11 = (char *)(v9 + 1);
            goto LABEL_142;
          }
          v66 = (unsigned int *)((char *)a2 + (((char *)v55 - (char *)a2) & 0xFFFFFFFFFFFFFFFCLL));
          v11 = (char *)(v9 + 1);
          if (v55 < v66)
          {
LABEL_121:
            v115 = *v66;
            v11 = (char *)v55;
            v116 = v66;
            do
            {
              *(_DWORD *)v11 = v115;
              *v116 = v56;
LABEL_124:
              v117 = *((_DWORD *)v11 + 1);
              v11 += 4;
              LODWORD(v56) = v117;
              v118 = v20 + ((unint64_t)v117 << 6);
              v119 = *(uint64_t **)v118;
              v120 = 8 * *(unsigned int *)(v118 + 8);
              v121 = 8 * *v52 - 8;
              v122 = v22;
              do
              {
                if (!v120)
                  goto LABEL_124;
                v123 = *v119;
                v124 = *v122;
                if (*v119 < *v122)
                  goto LABEL_124;
                ++v119;
                ++v122;
                v120 -= 8;
                v125 = v124 < v123 || v121 == 0;
                v121 -= 8;
              }
              while (!v125);
LABEL_132:
              v126 = *--v116;
              v115 = v126;
              v127 = v20 + ((unint64_t)v126 << 6);
              v128 = *(uint64_t **)v127;
              v129 = 8 * *(unsigned int *)(v127 + 8);
              v130 = 8 * *v52 - 8;
              v131 = v22;
              while (v129)
              {
                v132 = *v128;
                v133 = *v131;
                if (*v128 < *v131)
                  break;
                ++v128;
                ++v131;
                v129 -= 8;
                v134 = v133 < v132 || v130 == 0;
                v130 -= 8;
                if (v134)
                  goto LABEL_132;
              }
            }
            while (v11 < (char *)v116);
          }
LABEL_142:
          v135 = (unsigned int *)(v11 - 4);
          if (v11 - 4 != (char *)v9)
            *v9 = *v135;
          *v135 = v19;
          if (v55 < v66)
            goto LABEL_147;
          v136 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(v9, (unsigned int *)v11 - 1, a3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>((unsigned int *)v11, a2, a3);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_147:
            result = std::__introsort<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,false>(v9, v11 - 4, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (unsigned int *)(v11 - 4);
          if (v136)
            return result;
          goto LABEL_2;
        }
        if (v11 == (char *)a2)
          return result;
        v187 = (unint64_t)(v13 - 2) >> 1;
        v188 = v187;
        while (2)
        {
          v189 = v188;
          if (v187 >= v188)
          {
            v190 = (2 * v188) | 1;
            v191 = (unsigned int *)&v11[4 * v190];
            v192 = **a3;
            if (2 * v189 + 2 < v13
              && (v193 = v191 + 1,
                  v194 = v192 + ((unint64_t)v191[1] << 6),
                  v195 = *(unsigned int *)(v194 + 8),
                  (_DWORD)v195))
            {
              v196 = v192 + ((unint64_t)*v191 << 6);
              v197 = *(uint64_t **)v196;
              v198 = *(uint64_t **)v194;
              v199 = 8 * *(unsigned int *)(v196 + 8);
              v200 = 8 * v195 - 8;
              while (v199)
              {
                v201 = *v197;
                v202 = *v198;
                if (*v197 < *v198)
                  break;
                ++v197;
                ++v198;
                v199 -= 8;
                v203 = v202 < v201 || v200 == 0;
                v200 -= 8;
                if (v203)
                  goto LABEL_223;
              }
              ++v191;
              v190 = 2 * v189 + 2;
              result = *v193;
              v204 = *(unsigned int *)&v11[4 * v189];
              v205 = v192 + (v204 << 6);
              v206 = *(uint64_t **)v205;
              v207 = *(unsigned int *)(v205 + 8);
              if (!(_DWORD)v207)
              {
LABEL_234:
                *(_DWORD *)&v11[4 * v189] = result;
                if (v187 >= v190)
                {
                  while (1)
                  {
                    v216 = 2 * v190;
                    v190 = (2 * v190) | 1;
                    result = (int64_t)&v11[4 * v190];
                    v217 = v216 + 2;
                    if (v217 < v13)
                    {
                      v218 = v192 + ((unint64_t)*(unsigned int *)(result + 4) << 6);
                      v219 = *(unsigned int *)(v218 + 8);
                      if ((_DWORD)v219)
                      {
                        v220 = v192 + ((unint64_t)*(unsigned int *)result << 6);
                        v221 = *(uint64_t **)v220;
                        v222 = *(uint64_t **)v218;
                        v223 = 8 * *(unsigned int *)(v220 + 8);
                        v224 = 8 * v219 - 8;
                        while (v223)
                        {
                          v225 = *v221;
                          v226 = *v222;
                          if (*v221 < *v222)
                            break;
                          ++v221;
                          ++v222;
                          v223 -= 8;
                          v227 = v226 < v225 || v224 == 0;
                          v224 -= 8;
                          if (v227)
                            goto LABEL_249;
                        }
                        result += 4;
                        v190 = v217;
                      }
                    }
LABEL_249:
                    v228 = *(unsigned int *)result;
                    v229 = *(unsigned int *)(v205 + 8);
                    if ((_DWORD)v229)
                      break;
LABEL_236:
                    *v191 = v228;
                    v191 = (unsigned int *)result;
                    if (v187 < v190)
                      goto LABEL_210;
                  }
                  v230 = v192 + (v228 << 6);
                  v231 = *(uint64_t **)v230;
                  v232 = 8 * *(unsigned int *)(v230 + 8);
                  v233 = 8 * v229 - 8;
                  v234 = v206;
                  while (v232)
                  {
                    v235 = *v231;
                    v236 = *v234;
                    if (*v231 < *v234)
                      break;
                    ++v231;
                    ++v234;
                    v232 -= 8;
                    v237 = v236 < v235 || v233 == 0;
                    v233 -= 8;
                    if (v237)
                      goto LABEL_236;
                  }
                }
                result = (int64_t)v191;
LABEL_210:
                *(_DWORD *)result = v204;
                goto LABEL_211;
              }
            }
            else
            {
LABEL_223:
              result = *v191;
              v204 = *(unsigned int *)&v11[4 * v189];
              v205 = v192 + (v204 << 6);
              v206 = *(uint64_t **)v205;
              v207 = *(unsigned int *)(v205 + 8);
              if (!(_DWORD)v207)
                goto LABEL_234;
            }
            v208 = v192 + (result << 6);
            v209 = *(uint64_t **)v208;
            v210 = 8 * *(unsigned int *)(v208 + 8);
            v211 = 8 * v207 - 8;
            v212 = v206;
            while (v210)
            {
              v213 = *v209;
              v214 = *v212;
              if (*v209 < *v212)
                break;
              ++v209;
              ++v212;
              v210 -= 8;
              v215 = v214 < v213 || v211 == 0;
              v211 -= 8;
              if (v215)
                goto LABEL_234;
            }
          }
LABEL_211:
          v188 = v189 - 1;
          if (v189)
            continue;
          break;
        }
        v238 = (unint64_t)v12 >> 2;
        do
        {
          v240 = 0;
          v241 = *(_DWORD *)v11;
          v242 = *a3;
          v243 = (unsigned int *)v11;
          do
          {
            v244 = v243;
            v243 += v240 + 1;
            v245 = 2 * v240;
            v240 = (2 * v240) | 1;
            v246 = v245 + 2;
            if (v246 < v238)
            {
              result = *v242 + ((unint64_t)v243[1] << 6);
              v247 = *(unsigned int *)(result + 8);
              if ((_DWORD)v247)
              {
                v248 = *v242 + ((unint64_t)*v243 << 6);
                v249 = *(int64_t **)v248;
                result = *(_QWORD *)result;
                v250 = 8 * *(unsigned int *)(v248 + 8);
                v251 = 8 * v247 - 8;
                while (v250)
                {
                  v252 = *v249;
                  v253 = *(_QWORD *)result;
                  if (*v249 < *(_QWORD *)result)
                    break;
                  ++v249;
                  result += 8;
                  v250 -= 8;
                  v254 = v253 < v252 || v251 == 0;
                  v251 -= 8;
                  if (v254)
                    goto LABEL_264;
                }
                ++v243;
                v240 = v246;
              }
            }
LABEL_264:
            *v244 = *v243;
          }
          while (v240 <= (uint64_t)((unint64_t)(v238 - 2) >> 1));
          if (v243 == --a2)
          {
            *v243 = v241;
          }
          else
          {
            *v243 = *a2;
            *a2 = v241;
            v255 = (char *)v243 - v11 + 4;
            if (v255 >= 5)
            {
              v256 = *v243;
              v257 = **a3;
              v258 = v257 + (v256 << 6);
              v259 = *(unsigned int *)(v258 + 8);
              if ((_DWORD)v259)
              {
                v260 = ((unint64_t)v255 >> 2) - 2;
                v261 = v260 >> 1;
                v262 = (unsigned int *)&v11[4 * (v260 >> 1)];
                v263 = *v262;
                v264 = v257 + (v263 << 6);
                result = *(_QWORD *)v264;
                v265 = *(unsigned int *)(v264 + 8);
                v266 = *(int64_t **)v258;
                v267 = 8 * v265;
                v268 = 8 * v259 - 8;
                v269 = *(int64_t **)v258;
                while (v267)
                {
                  v270 = *(_QWORD *)result;
                  v271 = *v269;
                  if (*(_QWORD *)result < *v269)
                    break;
                  result += 8;
                  ++v269;
                  v267 -= 8;
                  v272 = v271 < v270 || v268 == 0;
                  v268 -= 8;
                  if (v272)
                    goto LABEL_261;
                }
                *v243 = v263;
                if (v260 >= 2)
                {
                  while (1)
                  {
                    v273 = *(unsigned int *)(v258 + 8);
                    if (!(_DWORD)v273)
                      break;
                    v274 = v261 - 1;
                    v261 = (v261 - 1) >> 1;
                    v275 = (unsigned int *)&v11[4 * v261];
                    v276 = *v275;
                    v277 = v257 + (v276 << 6);
                    result = *(_QWORD *)v277;
                    v278 = 8 * *(unsigned int *)(v277 + 8);
                    v279 = 8 * v273 - 8;
                    v280 = v266;
                    while (v278)
                    {
                      v281 = *(_QWORD *)result;
                      v282 = *v280;
                      if (*(_QWORD *)result < *v280)
                        break;
                      result += 8;
                      ++v280;
                      v278 -= 8;
                      v283 = v282 < v281 || v279 == 0;
                      v279 -= 8;
                      if (v283)
                        goto LABEL_300;
                    }
                    *v262 = v276;
                    v262 = (unsigned int *)&v11[4 * v261];
                    if (v274 <= 1)
                      goto LABEL_301;
                  }
                }
LABEL_300:
                v275 = v262;
LABEL_301:
                *v275 = v256;
              }
            }
          }
LABEL_261:
          ;
        }
        while (v238-- > 2);
        return result;
    }
  }
}

_DWORD *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t **a6)
{
  _DWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **a6;
  v15 = v14 + (v13 << 6);
  v16 = *(unsigned int *)(v15 + 8);
  if ((_DWORD)v16)
  {
    v17 = *a5;
    v18 = v14 + (v17 << 6);
    v19 = *(uint64_t **)v18;
    v20 = *(uint64_t **)v15;
    v21 = 8 * *(unsigned int *)(v18 + 8);
    v22 = 8 * v16 - 8;
    while (v21)
    {
      v23 = *v19;
      v24 = *v20;
      if (*v19 < *v20)
        break;
      ++v19;
      ++v20;
      v21 -= 8;
      v25 = v24 < v23 || v22 == 0;
      v22 -= 8;
      if (v25)
        return result;
    }
    *a4 = v17;
    *a5 = v13;
    v26 = *a3;
    v27 = v14 + (v26 << 6);
    v28 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v28)
    {
      v29 = *a4;
      v30 = v14 + (v29 << 6);
      v31 = *(uint64_t **)v30;
      v32 = *(uint64_t **)v27;
      v33 = 8 * *(unsigned int *)(v30 + 8);
      v34 = 8 * v28 - 8;
      while (v33)
      {
        v35 = *v31;
        v36 = *v32;
        if (*v31 < *v32)
          break;
        ++v31;
        ++v32;
        v33 -= 8;
        v37 = v36 < v35 || v34 == 0;
        v34 -= 8;
        if (v37)
          return result;
      }
      *a3 = v29;
      *a4 = v26;
      v38 = *a2;
      v39 = v14 + (v38 << 6);
      v40 = *(unsigned int *)(v39 + 8);
      if ((_DWORD)v40)
      {
        v41 = *a3;
        v42 = v14 + (v41 << 6);
        v43 = *(uint64_t **)v42;
        v44 = *(uint64_t **)v39;
        v45 = 8 * *(unsigned int *)(v42 + 8);
        v46 = 8 * v40 - 8;
        while (v45)
        {
          v47 = *v43;
          v48 = *v44;
          if (*v43 < *v44)
            break;
          ++v43;
          ++v44;
          v45 -= 8;
          v49 = v48 < v47 || v46 == 0;
          v46 -= 8;
          if (v49)
            return result;
        }
        *a2 = v41;
        *a3 = v38;
        v50 = *a1;
        v51 = v14 + (v50 << 6);
        v52 = *(unsigned int *)(v51 + 8);
        if ((_DWORD)v52)
        {
          v53 = *a2;
          v54 = v14 + (v53 << 6);
          v55 = *(uint64_t **)v54;
          v56 = *(uint64_t **)v51;
          v57 = 8 * *(unsigned int *)(v54 + 8);
          v58 = 8 * v52 - 8;
          while (v57)
          {
            v59 = *v55;
            v60 = *v56;
            if (*v55 < *v56)
              break;
            ++v55;
            ++v56;
            v57 -= 8;
            v61 = v60 < v59 || v58 == 0;
            v58 -= 8;
            if (v61)
              return result;
          }
          *a1 = v53;
          *a2 = v50;
        }
      }
    }
  }
  return result;
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;

  v4 = *a2;
  v5 = *result;
  v6 = a4 + (v4 << 6);
  v7 = a4 + (v5 << 6);
  v8 = *(uint64_t **)v6;
  v9 = *(unsigned int *)(v6 + 8);
  v10 = *(unsigned int *)(v7 + 8);
  if ((_DWORD)v10)
  {
    v11 = 8 * v9;
    v12 = 8 * v10;
    v13 = *(uint64_t **)v7;
    v14 = v12 - 8;
    v15 = 8 * v9;
    v16 = v8;
    v17 = *(uint64_t **)v7;
    while (v15)
    {
      v18 = *v16;
      v19 = *v17;
      if (*v16 < *v17)
        break;
      ++v16;
      ++v17;
      v15 -= 8;
      v20 = v19 < v18 || v14 == 0;
      v14 -= 8;
      if (v20)
        goto LABEL_10;
    }
    if ((_DWORD)v9)
    {
      v29 = *a3;
      v30 = a4 + (v29 << 6);
      v31 = *(uint64_t **)v30;
      v32 = 8 * *(unsigned int *)(v30 + 8);
      v33 = v11 - 8;
      while (v32)
      {
        v34 = *v31;
        v35 = *v8;
        if (*v31 < *v8)
          break;
        ++v31;
        ++v8;
        v32 -= 8;
        v36 = v35 < v34 || v33 == 0;
        v33 -= 8;
        if (v36)
          goto LABEL_29;
      }
      *result = v29;
      *a3 = v5;
    }
    else
    {
LABEL_29:
      *result = v4;
      *a2 = v5;
      v37 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v37)
      {
        v38 = *a3;
        v39 = a4 + (v38 << 6);
        v40 = *(uint64_t **)v39;
        v41 = 8 * *(unsigned int *)(v39 + 8);
        v42 = 8 * v37 - 8;
        while (v41)
        {
          v43 = *v40;
          v44 = *v13;
          if (*v40 < *v13)
            break;
          ++v40;
          ++v13;
          v41 -= 8;
          v45 = v44 < v43 || v42 == 0;
          v42 -= 8;
          if (v45)
            return result;
        }
        *a2 = v38;
        *a3 = v5;
      }
    }
  }
  else
  {
LABEL_10:
    if ((_DWORD)v9)
    {
      v21 = *a3;
      v22 = a4 + (v21 << 6);
      v23 = *(uint64_t **)v22;
      v24 = 8 * *(unsigned int *)(v22 + 8);
      v25 = 8 * v9 - 8;
      while (v24)
      {
        v26 = *v23;
        v27 = *v8;
        if (*v23 < *v8)
          break;
        ++v23;
        ++v8;
        v24 -= 8;
        v28 = v27 < v26 || v25 == 0;
        v25 -= 8;
        if (v28)
          return result;
      }
      *a2 = v21;
      *a3 = v4;
      v46 = *result;
      v47 = a4 + (v46 << 6);
      v48 = *(unsigned int *)(v47 + 8);
      if ((_DWORD)v48)
      {
        v49 = *a2;
        v50 = a4 + (v49 << 6);
        v51 = *(uint64_t **)v50;
        v52 = *(uint64_t **)v47;
        v53 = 8 * *(unsigned int *)(v50 + 8);
        v54 = 8 * v48 - 8;
        while (v53)
        {
          v55 = *v51;
          v56 = *v52;
          if (*v51 < *v52)
            break;
          ++v51;
          ++v52;
          v53 -= 8;
          v57 = v56 < v55 || v54 == 0;
          v54 -= 8;
          if (v57)
            return result;
        }
        *result = v49;
        *a2 = v46;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v38 = *a1;
      v39 = **a3;
      v40 = v39 + (v38 << 6);
      v41 = *(unsigned int *)(v40 + 8);
      if ((_DWORD)v41)
      {
        v42 = *(a2 - 1);
        v43 = v39 + (v42 << 6);
        v44 = *(uint64_t **)v43;
        v45 = *(uint64_t **)v40;
        v46 = 8 * *(unsigned int *)(v43 + 8);
        v47 = 8 * v41 - 8;
        while (v46)
        {
          v48 = *v44;
          v49 = *v45;
          if (*v44 < *v45)
            break;
          ++v44;
          ++v45;
          v46 -= 8;
          v50 = v49 < v48 || v47 == 0;
          v47 -= 8;
          if (v50)
            return result;
        }
        *a1 = v42;
        *(a2 - 1) = v38;
        result = 1;
      }
      break;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a1 + 1, a2 - 1, **a3);
      result = 1;
      break;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      result = 1;
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      result = 1;
      break;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, **a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_45:
        result = 1;
      }
      else
      {
        v10 = 0;
        v11 = **a3;
        while (1)
        {
          v13 = *v8;
          v14 = v11 + (v13 << 6);
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = *v9;
            v17 = v11 + (v16 << 6);
            v18 = *(uint64_t **)v17;
            v19 = *(uint64_t **)v14;
            v20 = 8 * *(unsigned int *)(v17 + 8);
            v21 = 8 * v15 - 8;
            v22 = *(uint64_t **)v17;
            while (v20)
            {
              v23 = *v22;
              v24 = *v19;
              if (*v22 < *v19)
                break;
              ++v22;
              ++v19;
              v20 -= 8;
              v25 = v24 < v23 || v21 == 0;
              v21 -= 8;
              if (v25)
                goto LABEL_7;
            }
            *v9 = v13;
            v12 = a1;
            if (v8 != a1)
            {
              v26 = v8;
              do
              {
                v28 = *--v26;
                v27 = v28;
                v29 = v11 + ((unint64_t)v28 << 6);
                v30 = *(unsigned int *)(v29 + 8);
                if (!(_DWORD)v30)
                {
LABEL_5:
                  v12 = v8;
                  goto LABEL_6;
                }
                v31 = *(uint64_t **)v29;
                v32 = 8 * *(unsigned int *)(v17 + 8);
                v33 = 8 * v30 - 8;
                v34 = v18;
                while (v32)
                {
                  v35 = *v34;
                  v36 = *v31;
                  if (*v34 < *v31)
                    break;
                  ++v34;
                  ++v31;
                  v32 -= 8;
                  v37 = v36 < v35 || v33 == 0;
                  v33 -= 8;
                  if (v37)
                    goto LABEL_5;
                }
                *v8 = v27;
                v8 = v26;
              }
              while (v26 != a1);
              v12 = a1;
            }
LABEL_6:
            *v12 = v16;
            if (++v10 == 8)
              break;
          }
LABEL_7:
          v8 = v9++;
          if (v9 == a2)
            goto LABEL_45;
        }
        result = v9 + 1 == a2;
      }
      break;
  }
  return result;
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t **a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,canonicalizeMapExprAndTermOrder(mlir::AffineMap &)::$_0 &,unsigned int *>(a1, a2, a3, **a5);
  v11 = *a3;
  v12 = **a5;
  v13 = v12 + (v11 << 6);
  v14 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v14)
  {
    v15 = *a4;
    v16 = v12 + (v15 << 6);
    v17 = *(uint64_t **)v16;
    v18 = *(uint64_t **)v13;
    v19 = 8 * *(unsigned int *)(v16 + 8);
    v20 = 8 * v14 - 8;
    while (v19)
    {
      v21 = *v17;
      v22 = *v18;
      if (*v17 < *v18)
        break;
      ++v17;
      ++v18;
      v19 -= 8;
      v23 = v22 < v21 || v20 == 0;
      v20 -= 8;
      if (v23)
        return result;
    }
    *a3 = v15;
    *a4 = v11;
    v24 = *a2;
    v25 = v12 + (v24 << 6);
    v26 = *(unsigned int *)(v25 + 8);
    if ((_DWORD)v26)
    {
      v27 = *a3;
      v28 = v12 + (v27 << 6);
      v29 = *(uint64_t **)v28;
      v30 = *(uint64_t **)v25;
      v31 = 8 * *(unsigned int *)(v28 + 8);
      v32 = 8 * v26 - 8;
      while (v31)
      {
        v33 = *v29;
        v34 = *v30;
        if (*v29 < *v30)
          break;
        ++v29;
        ++v30;
        v31 -= 8;
        v35 = v34 < v33 || v32 == 0;
        v32 -= 8;
        if (v35)
          return result;
      }
      *a2 = v27;
      *a3 = v24;
      v36 = *a1;
      v37 = v12 + (v36 << 6);
      v38 = *(unsigned int *)(v37 + 8);
      if ((_DWORD)v38)
      {
        v39 = *a2;
        v40 = v12 + (v39 << 6);
        v41 = *(uint64_t **)v40;
        v42 = *(uint64_t **)v37;
        v43 = 8 * *(unsigned int *)(v40 + 8);
        v44 = 8 * v38 - 8;
        while (v43)
        {
          v45 = *v41;
          v46 = *v42;
          if (*v41 < *v42)
            break;
          ++v41;
          ++v42;
          v43 -= 8;
          v47 = v46 < v45 || v44 == 0;
          v44 -= 8;
          if (v47)
            return result;
        }
        *a1 = v39;
        *a2 = v36;
      }
    }
  }
  return result;
}

void mlir::RewritePatternSet::addImpl<CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C025F00;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>]";
    v25 = 115;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C025C68;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>]";
    v25 = 111;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C01E840;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>]";
    v25 = 96;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

void mlir::RewritePatternSet::addImpl<CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>,mlir::MLIRContext *&>(_QWORD *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v8 = operator new();
  v9 = *a4;
  mlir::PatternBenefit::PatternBenefit(&v24, 1);
  mlir::Pattern::Pattern(v8 + 8, (uint64_t)"affine.max", 10, (__int16)v24, v9, 0, 0);
  *(_QWORD *)v8 = &unk_24C026860;
  v23 = v8;
  if (*(_QWORD *)(v8 + 72))
  {
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
      goto LABEL_3;
  }
  else
  {
    v24 = "StringRef llvm::getTypeName() [DesiredTypeName = CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>]";
    v25 = 119;
    v16 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
    if (v25 >= v16)
      v17 = v16;
    else
      v17 = v25;
    v18 = &v24[v17];
    v19 = v25 - v17;
    if (v25 - v17 >= 0x12)
      v20 = 18;
    else
      v20 = v25 - v17;
    v21 = &v18[v20];
    v22 = v19 - v20;
    if (v22 >= v22 - 1)
      --v22;
    *(_QWORD *)(v8 + 64) = v21;
    *(_QWORD *)(v8 + 72) = v22;
    v10 = 16 * a3;
    v11 = *(unsigned int *)(v8 + 88);
    v12 = v11 + ((16 * a3) >> 4);
    if (v12 <= *(unsigned int *)(v8 + 92))
    {
LABEL_3:
      if (!a3)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 80, (void *)(v8 + 96), v12, 16);
  LODWORD(v11) = *(_DWORD *)(v8 + 88);
  if (a3)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(v8 + 80) + 16 * v11), a2, v10);
    LODWORD(v11) = *(_DWORD *)(v8 + 88);
  }
LABEL_5:
  *(_DWORD *)(v8 + 88) = v11 + (v10 >> 4);
  v13 = (uint64_t *)a1[2];
  if ((unint64_t)v13 >= a1[3])
  {
    v14 = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(a1 + 1, &v23);
    v15 = v23;
    a1[2] = v14;
    v23 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v8;
    a1[2] = v13 + 1;
  }
}

_QWORD *CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>::~CanonicalizeSingleResultAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMaxOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t CanonicalizeSingleResultAffineMinMaxOp<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ZinIrHalH13g *v8;
  _QWORD v10[2];
  uint64_t Value;

  v5 = a2 + 64;
  v10[0] = *(_QWORD *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  v10[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v10) != 1)
    return 0;
  v10[0] = *(_QWORD *)(v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v10[0] = v7;
  v10[1] = v6;
  v8 = mlir::OpBuilder::create<mlir::affine::AffineApplyOp,mlir::AffineMap,mlir::OperandRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v8);
  return 1;
}

_QWORD *DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>::~DeduplicateAffineMinMaxExpressions(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t DeduplicateAffineMinMaxExpressions<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Results;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int NumDims;
  int NumSymbols;
  unint64_t v19;
  uint64_t v20;
  ZinIrHalH13g *v21;
  uint64_t v23;
  uint64_t Value;
  void *v25;
  uint64_t v26;
  _BYTE v27[32];
  unint64_t v28[3];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v25 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25);
  v25 = v27;
  v26 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  v7 = v26;
  if (v6)
  {
    v8 = (uint64_t *)Results;
    v9 = (uint64_t *)(Results + 8 * v6);
    do
    {
      v10 = *v8;
      v11 = v25;
      v12 = v7;
      v13 = (char *)v25;
      if (v7)
      {
        v14 = 8 * v7;
        v13 = (char *)v25;
        while (*(_QWORD *)v13 != v10)
        {
          v13 += 8;
          v14 -= 8;
          if (!v14)
          {
            v13 = (char *)v25 + 8 * v7;
            break;
          }
        }
      }
      if (v7 == (v13 - (_BYTE *)v25) >> 3)
      {
        if (v7 >= HIDWORD(v26))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v7 + 1, 8);
          v12 = v26;
          v11 = v25;
        }
        v11[v12] = v10;
        v7 = v26 + 1;
        LODWORD(v26) = v26 + 1;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  if (v7 == mlir::AffineExpr::getKind((mlir::AffineExpr *)&Value))
  {
    v15 = 0;
    v16 = v25;
    if (v25 == v27)
      return v15;
    goto LABEL_19;
  }
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  v23 = mlir::AffineMap::get(NumDims, NumSymbols, (uint64_t)v25, v26, a3[1]);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v19 = *(unsigned int *)(a2 + 68);
    v20 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  mlir::ValueRange::ValueRange(v28, v20, v19);
  v21 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&v23, (uint64_t *)v28);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v21);
  v15 = 1;
  v16 = v25;
  if (v25 != v27)
LABEL_19:
    free(v16);
  return v15;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,mlir::ValueRange>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  _QWORD v26[8];
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD v30[29];

  v30[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.max", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.max";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v26);
    llvm::report_fatal_error((llvm::Twine *)v26, 1);
  }
  mlir::OperationState::OperationState(v26, a2, v9);
  v11 = *a3;
  v12 = *a4;
  v13 = a4[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v26, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(v26) = v16;
  v17 = v28;
  if (v28 >= v29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v28 + 1, 8);
    v17 = v28;
  }
  *(_QWORD *)(v27 + 8 * v17) = IndexType;
  ++v28;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v26);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v26);
  return v19;
}

_QWORD *MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>::~MergeAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>::~MergeAffineMinMaxOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t MergeAffineMinMaxOp<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t NumDims;
  unint64_t v10;
  uint64_t v11;
  unint64_t NumSymbols;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t *v19;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t *v25;
  int v27;
  uint64_t Results;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t DefiningOp;
  unsigned int Position;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrHalH13g *v69;
  uint64_t v70;
  void *v71;
  mlir::IndexType **v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t Value;
  mlir::MLIRContext **v78[4];
  _QWORD v79[2];
  mlir::MLIRContext **v80;
  mlir::MLIRContext **v81;
  void *v82;
  unint64_t v83;
  _BYTE v84[64];
  void *v85;
  uint64_t v86;
  _BYTE v87[32];
  void *v88;
  uint64_t v89;
  _BYTE v90[32];
  void *v91;
  uint64_t v92;
  _BYTE v93[64];
  char *v94;
  unint64_t v95;
  _BYTE v96[64];
  void *v97;
  unint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v94 = *(char **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v6, v5);
  v7 = v94;
  v8 = v95;
  NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
  if (v8 < NumDims)
    NumDims = v8;
  v99 = v7;
  v100 = NumDims;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v10 = *(unsigned int *)(a2 + 68);
    v11 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v94, v11, v10);
  NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
  if (v95 <= NumSymbols)
  {
    v13 = v94;
    NumSymbols = v95;
  }
  else
  {
    v13 = (void *)mlir::ValueRange::offset_base(&v94, v95 - NumSymbols);
  }
  v97 = v13;
  v98 = NumSymbols;
  v14 = v99;
  v15 = v100;
  v94 = v96;
  v95 = 0x800000000;
  if (v100 < 9)
  {
    v16 = 0;
    v91 = v99;
    v92 = 0;
    v17 = v96;
    if (!v100)
    {
      v21 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v100, 8);
    v16 = v95;
    v17 = v94;
    v91 = v14;
    v92 = 0;
  }
  v18 = 0;
  v19 = (uint64_t *)&v17[8 * v16];
  do
  {
    *v19++ = mlir::ValueRange::dereference_iterator(&v91, v18);
    v18 = ++v92;
  }
  while (v91 != v14 || v18 != v15);
  v21 = v95;
  v13 = v97;
  NumSymbols = v98;
LABEL_20:
  LODWORD(v95) = v21 + v15;
  v91 = v93;
  v92 = 0x800000000;
  if (NumSymbols < 9)
  {
    v22 = 0;
    v82 = v13;
    v83 = 0;
    v23 = v93;
    if (!NumSymbols)
    {
      v27 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, NumSymbols, 8);
    v22 = v92;
    v23 = v91;
    v82 = v13;
    v83 = 0;
  }
  v24 = 0;
  v25 = (uint64_t *)&v23[8 * v22];
  do
  {
    *v25++ = mlir::ValueRange::dereference_iterator(&v82, v24);
    v24 = ++v83;
  }
  while (v82 != v13 || v24 != NumSymbols);
  v27 = v92;
LABEL_30:
  LODWORD(v92) = v27 + NumSymbols;
  v88 = v90;
  v89 = 0x400000000;
  v85 = v87;
  v86 = 0x400000000;
  Results = mlir::AffineMap::getResults((mlir::AffineMap *)&Value);
  if (v29)
  {
    v30 = (void **)Results;
    v31 = 8 * v29;
    while (1)
    {
      v33 = *v30;
      v82 = *v30;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 7)
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, (uint64_t)v33);
        v79[0] = v82;
        if (v82)
          goto LABEL_37;
LABEL_40:
        v82 = v33;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v82) == 6)
        {
          ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, (uint64_t)v33);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        else
        {
          ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, 0);
          v78[0] = (mlir::MLIRContext **)v82;
          if (!v82)
            goto LABEL_32;
        }
        Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v78);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v99, Position);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (DefiningOp)
          goto LABEL_45;
LABEL_32:
        v32 = v89;
        if (v89 >= (unint64_t)HIDWORD(v89))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
          v32 = v89;
        }
        *((_QWORD *)v88 + v32) = v33;
        LODWORD(v89) = v89 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
      else
      {
        ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v82, 0);
        v79[0] = v82;
        if (!v82)
          goto LABEL_40;
LABEL_37:
        v34 = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v79);
        v82 = (void *)mlir::ValueRange::dereference_iterator(&v97, v34);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v82);
        if (!DefiningOp)
          goto LABEL_32;
LABEL_45:
        v37 = DefiningOp;
        if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
          goto LABEL_32;
        v38 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v87, v86 + 1, 8);
          v38 = v86;
        }
        *((_QWORD *)v85 + v38) = v37;
        LODWORD(v86) = v86 + 1;
        ++v30;
        v31 -= 8;
        if (!v31)
          break;
      }
    }
  }
  if ((_DWORD)v86)
  {
    v74 = a2;
    v73 = a3;
    v39 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&Value);
    v40 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&Value);
    if ((_DWORD)v86)
    {
      v41 = (char *)v85;
      v75 = (char *)v85 + 8 * v86;
      while (1)
      {
        v42 = *(_QWORD *)v41;
        v82 = *(void **)(*(_QWORD *)v41
                       + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)v41 + 44) >> 23) & 1)
                       + 64);
        v79[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v82);
        v43 = mlir::AffineMap::getNumDims((mlir::AffineMap *)v79);
        v44 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)v79);
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v45 = *(unsigned int *)(v42 + 68);
          v46 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v46 = 0;
          v45 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v46, v45);
        v47 = v82;
        v48 = v83 >= v43 ? v43 : v83;
        if ((*(_BYTE *)(v42 + 46) & 0x80) != 0)
        {
          v49 = *(unsigned int *)(v42 + 68);
          v50 = *(_QWORD *)(v42 + 72);
        }
        else
        {
          v50 = 0;
          v49 = 0;
        }
        mlir::ValueRange::ValueRange((unint64_t *)&v82, v50, v49);
        v51 = v82;
        v52 = v44;
        if (v83 > v44)
          break;
        v52 = v83;
        v53 = v95;
        v54 = v48 + v95;
        if (v54 > HIDWORD(v95))
          goto LABEL_64;
LABEL_65:
        v82 = v47;
        v83 = 0;
        if (v48)
        {
          v55 = 0;
          v56 = (uint64_t *)&v94[8 * v53];
          do
          {
            *v56++ = mlir::ValueRange::dereference_iterator(&v82, v55);
            v55 = ++v83;
          }
          while (v82 != v47 || v55 != v48);
          LODWORD(v53) = v95;
        }
        LODWORD(v95) = v53 + v48;
        v58 = v92;
        v59 = v52 + v92;
        if (v59 > HIDWORD(v92))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, v93, v59, 8);
          v58 = v92;
        }
        v82 = v51;
        v83 = 0;
        if (v52)
        {
          v60 = 0;
          v61 = (uint64_t *)((char *)v91 + 8 * v58);
          do
          {
            *v61++ = mlir::ValueRange::dereference_iterator(&v82, v60);
            v60 = ++v83;
          }
          while (v82 != v51 || v60 != v52);
          LODWORD(v58) = v92;
        }
        LODWORD(v92) = v58 + v52;
        v63 = mlir::AffineMap::getResults((mlir::AffineMap *)v79);
        if (v64)
        {
          v65 = (void **)v63;
          v66 = 8 * v64;
          do
          {
            v82 = *v65;
            v78[0] = (mlir::MLIRContext **)mlir::AffineExpr::shiftDims((mlir::MLIRContext ***)&v82, v43, v39, 0);
            v67 = mlir::AffineExpr::shiftSymbols(v78, v44, v40, 0);
            v68 = v89;
            if (v89 >= (unint64_t)HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v89 + 1, 8);
              v68 = v89;
            }
            *((_QWORD *)v88 + v68) = v67;
            LODWORD(v89) = v89 + 1;
            ++v65;
            v66 -= 8;
          }
          while (v66);
        }
        v39 += v43;
        v40 += v44;
        v41 += 8;
        if (v41 == v75)
          goto LABEL_91;
      }
      v51 = (void *)mlir::ValueRange::offset_base(&v82, v83 - v44);
      v53 = v95;
      v54 = v48 + v95;
      if (v54 <= HIDWORD(v95))
        goto LABEL_65;
LABEL_64:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v96, v54, 8);
      v53 = v95;
      goto LABEL_65;
    }
LABEL_91:
    v76 = mlir::AffineMap::get(v39, v40, (uint64_t)v88, v89, v73[1]);
    v81 = (mlir::MLIRContext **)((char *)v91 + 8 * v92);
    v82 = v84;
    v83 = 0x800000000;
    v79[0] = v94;
    v79[1] = v91;
    v80 = (mlir::MLIRContext **)&v94[8 * v95];
    v78[0] = v80;
    v78[1] = v81;
    v78[2] = v80;
    v78[3] = v81;
    llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>((uint64_t)&v82, v79, v78);
    v69 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(v73 + 1, *(_QWORD *)(v74 + 24), (unint64_t *)&v76, (uint64_t)&v82);
    (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*v73 + 4))(v73, v74, v69);
    if (v82 != v84)
      free(v82);
    v70 = 1;
    v71 = v85;
    if (v85 != v87)
      goto LABEL_94;
  }
  else
  {
    v70 = 0;
    v71 = v85;
    if (v85 != v87)
LABEL_94:
      free(v71);
  }
  if (v88 != v90)
    free(v88);
  if (v91 != v93)
    free(v91);
  if (v94 != v96)
    free(v94);
  return v70;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::SmallVector<mlir::Value,8u> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.max", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.max";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMaxOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMaxOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  uint64_t Value;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  int v15;
  unint64_t v16;
  ZinIrHalH13g *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v26 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  v24 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    v7 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v26, v7, v6);
  v9 = v26;
  v8 = v27;
  v26 = v28;
  v27 = 0x800000000;
  if (v8 < 9)
  {
    v10 = 0;
    v29 = v9;
    v30 = 0;
    v11 = v28;
    if (!v8)
    {
      v15 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v8, 8);
    v10 = v27;
    v11 = v26;
    v29 = v9;
    v30 = 0;
  }
  v12 = 0;
  v13 = (uint64_t *)&v11[8 * v10];
  do
  {
    *v13++ = mlir::ValueRange::dereference_iterator(&v29, v12);
    v12 = ++v30;
  }
  while (v29 != v9 || v12 != v8);
  v15 = v27;
LABEL_13:
  LODWORD(v27) = v15 + v8;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v24, (uint64_t)&v26);
  simplifyMapWithOperands((mlir::AffineExpr *)&v24, (uint64_t *)v26, v27);
  v16 = v24;
  if (v24 == Value)
  {
    v21 = v26;
    v29 = v9;
    v30 = 0;
    if (!v8)
    {
LABEL_25:
      v18 = 0;
      v19 = v26;
      if (v26 == v28)
        return v18;
      goto LABEL_15;
    }
    v22 = 0;
    while (*v21 == mlir::ValueRange::dereference_iterator(&v29, v22))
    {
      v22 = ++v30;
      ++v21;
      if (v29 == v9 && v22 == v8)
        goto LABEL_25;
    }
    v16 = v24;
  }
  v25 = v16;
  v29 = v26;
  v30 = v27;
  v17 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(a3 + 1, *(_QWORD *)(a2 + 24), &v25, (uint64_t)&v29);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v17);
  v18 = 1;
  v19 = v26;
  if (v26 != v28)
LABEL_15:
    free(v19);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::IndexType **a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t IndexType;
  uint64_t v16;
  unsigned int v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[4];
  __int16 v25;
  unint64_t v26[2];
  _QWORD v27[8];
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[29];

  v31[28] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v21);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.max", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v25 = 1283;
    v24[2] = (uint64_t)"affine.max";
    v24[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v23 = 259;
    llvm::operator+(v24, (uint64_t *)&v22, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  v12 = v26[0];
  v13 = v26[1];
  IndexType = mlir::Builder::getIndexType(a1, v14);
  mlir::OperationState::addOperands((uint64_t)v27, v12, v13);
  v16 = mlir::AffineMapAttr::get(v11);
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(v27) = v16;
  v17 = v29;
  if (v29 >= v30)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v29 + 1, 8);
    v17 = v29;
  }
  *(_QWORD *)(v28 + 8 * v17) = IndexType;
  ++v29;
  v18 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineMaxOp,void>::id)
    v19 = v18;
  else
    v19 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}

_QWORD *CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>::~CanonicalizeAffineMinMaxOpExprAndTermOrder(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t CanonicalizeAffineMinMaxOpExprAndTermOrder<mlir::affine::AffineMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::IndexType **a3)
{
  unint64_t v5;
  uint64_t v6;
  ZinIrHalH13g *v7;
  uint64_t Value;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v10);
  if (!canonicalizeMapExprAndTermOrder((mlir::AffineMap *)&Value))
    return 0;
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a2 + 68);
    v6 = *(_QWORD *)(a2 + 72);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v6, v5);
  v7 = mlir::OpBuilder::create<mlir::affine::AffineMaxOp,mlir::AffineMap &,mlir::ValueRange>(a3 + 1, *(_QWORD *)(a2 + 24), (unint64_t *)&Value, (uint64_t *)v10);
  (*((void (**)(mlir::IndexType **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, a2, v7);
  return 1;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffinePrefetchOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffinePrefetchOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffinePrefetchOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffinePrefetchOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t Value;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  const double *v16;
  unsigned __int128 *v17;
  unint64_t v18;
  const double *v19;
  unsigned __int128 v20;
  unsigned __int128 v21;
  uint64_t v22;
  int v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  ZinIrHalH13g *v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39[2];
  unint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[9];

  v46[8] = *MEMORY[0x24BDAC8D0];
  v5 = a2 + 64;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v6 = 0;
  v44 = *(void **)(v6 + 24);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v44);
  v36 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v44 = v46;
    v45 = 0x800000000;
    v9 = -1;
    v10 = 32;
LABEL_6:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v9, 8);
    v11 = v45;
    v12 = v44;
    v13 = (char *)v44 + 8 * v45;
    if (v9 < 0xD)
      goto LABEL_12;
    goto LABEL_10;
  }
  v8 = *(unsigned int *)(a2 + 68);
  v9 = v8 - 1;
  v10 = *(_QWORD *)(a2 + 72) + 32;
  v44 = v46;
  v45 = 0x800000000;
  if ((unint64_t)(v8 - 1) >= 9)
    goto LABEL_6;
  v11 = 0;
  if (v8 == 1)
  {
    v23 = 0;
    goto LABEL_20;
  }
  v12 = v46;
  v13 = v46;
  if (v9 < 0xD)
    goto LABEL_12;
LABEL_10:
  if ((unint64_t)v13 >= v10 + 32 * v9 || v10 + 24 >= (unint64_t)&v12[v9 + v11])
  {
    v15 = v9 & 3;
    if ((v9 & 3) == 0)
      v15 = 4;
    v14 = v9 - v15;
    v13 += v14;
    v16 = (const double *)(v10 + 88);
    v17 = (unsigned __int128 *)&v12[v11 + 2];
    v18 = v14;
    do
    {
      v19 = v16 - 8;
      v20 = (unsigned __int128)vld4q_f64(v19);
      v21 = (unsigned __int128)vld4q_f64(v16);
      *(v17 - 1) = v20;
      *v17 = v21;
      v16 += 16;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    goto LABEL_17;
  }
LABEL_12:
  v14 = 0;
LABEL_17:
  v22 = (32 * v14) | 0x18;
  do
  {
    *v13++ = *(_QWORD *)(v10 + v22);
    ++v14;
    v22 += 32;
  }
  while (v9 != v14);
  v23 = v45;
  v11 = v9;
LABEL_20:
  LODWORD(v45) = v23 + v11;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v36, (uint64_t)&v44);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v36, (uint64_t)&v44);
  simplifyMapWithOperands((mlir::AffineExpr *)&v36, (uint64_t *)v44, v45);
  if (v36 != Value)
  {
    v24 = v44;
    goto LABEL_22;
  }
  v24 = v44;
  if (!v11)
  {
LABEL_41:
    v30 = 0;
    if (v44 == v46)
      return v30;
    goto LABEL_32;
  }
  if (*(_QWORD *)(v10 + 24) == *(_QWORD *)v44)
  {
    v32 = (uint64_t *)(v10 + 56);
    v33 = 1;
    while (v11 != v33)
    {
      v34 = *v32;
      v32 += 4;
      v35 = *((_QWORD *)v44 + v33++);
      if (v34 != v35)
        goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_22:
  v39[1] = v45;
  v40 = v36;
  v25 = *(unsigned __int8 *)(a2 + 47);
  v38 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v39[0] = (uint64_t)v24;
  if (v25)
    v26 = a2 + 80;
  else
    v26 = 0;
  v43 = *(_QWORD *)(v26 + 16);
  mlir::IntegerAttr::getValue(&v43, (llvm::APInt *)&v41);
  if (v42 > 0x40)
  {
    v27 = *v41;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    LODWORD(v27) = (_DWORD)v41;
  }
  LODWORD(v43) = v27;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v28 = v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1);
  else
    v28 = 0;
  v41 = *(uint64_t **)(v28 + 8);
  v37 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41);
  v41 = *(uint64_t **)(v5 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  LOBYTE(v41) = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41);
  v29 = mlir::OpBuilder::create<mlir::affine::AffinePrefetchOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &,unsigned int,BOOL,BOOL>((mlir::Builder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v38, &v40, v39, &v43, (unsigned __int8 *)&v37, (unsigned __int8 *)&v41);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v29);
  v30 = 1;
  v24 = v44;
  if (v44 != v46)
LABEL_32:
    free(v24);
  return v30;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffinePrefetchOp,mlir::detail::TypedValue<mlir::MemRefType>,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &,unsigned int,BOOL,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, _DWORD *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t *Context;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  unsigned int v24;
  mlir::MLIRContext *v25;
  uint64_t I32IntegerAttr;
  uint64_t BoolAttr;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  ZinIrHalH13g *v31;
  ZinIrHalH13g *v32;
  uint64_t v34;
  uint64_t v35[4];
  __int16 v36;
  _QWORD v37[38];
  uint64_t v38[4];
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v34 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v34);
  v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.prefetch", (const unsigned __int8 *)0xF, Context);
  if (!v18)
  {
    v39 = 1283;
    v38[2] = (uint64_t)"affine.prefetch";
    v38[3] = 15;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v36 = 259;
    llvm::operator+(v38, v35, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v17);
  v19 = *a3;
  v20 = *a4;
  v22 = *a5;
  v21 = a5[1];
  v23 = *a6 != 0;
  v24 = *a7;
  v25 = (mlir::MLIRContext *)*a8;
  v35[0] = v19;
  I32IntegerAttr = mlir::Builder::getI32IntegerAttr(a1, v24);
  BoolAttr = mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, (mlir::MLIRContext *)v23);
  v28 = mlir::Builder::getBoolAttr((mlir::BoolAttr **)a1, v25);
  mlir::OperationState::addOperands((uint64_t)v37, (uint64_t)v35, 1);
  mlir::ValueRange::ValueRange((unint64_t *)v38, v22, v21);
  mlir::OperationState::addOperands((uint64_t)v37, v38[0], v38[1]);
  v29 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(v37);
  v30 = mlir::AffineMapAttr::get(v20);
  v29[2] = I32IntegerAttr;
  v29[3] = v30;
  *v29 = v28;
  v29[1] = BoolAttr;
  v31 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((_QWORD *)v31 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffinePrefetchOp,void>::id)
    v32 = v31;
  else
    v32 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v32;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::affine::AffineYieldOp>::Impl<mlir::affine::AffineParallelOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[38];
  unint64_t v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"affine.yield", 12);
  mlir::ValueRange::ValueRange(v6, 0, 0);
  mlir::OperationState::addOperands((uint64_t)v5, v6[0], v6[1]);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

llvm::raw_ostream *mlir::affine::AffineParallelOp::print(mlir::OpAsmPrinter &)::$_1::operator()<mlir::Attribute const>(uint64_t *a1, uint64_t a2)
{
  unint64_t Int;
  unint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  char *v8;
  size_t v9;
  size_t v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm::raw_ostream *result;
  _BYTE *v14;
  uint64_t v15;

  v15 = a2;
  Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15);
  v4 = mlir::arith::symbolizeAtomicRMWKind(Int);
  v5 = *a1;
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "\"", 1uLL);
  }
  else
  {
    *v7 = 34;
    ++*((_QWORD *)v6 + 4);
  }
  v8 = mlir::arith::stringifyAtomicRMWKind(v4);
  v10 = v9;
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v12 = (void *)*((_QWORD *)v11 + 4);
  if (v10 <= *((_QWORD *)v11 + 3) - (_QWORD)v12)
  {
    if (v10)
    {
      memcpy(v12, v8, v10);
      *((_QWORD *)v11 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v11, v8, v10);
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v14 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v14)
    return llvm::raw_ostream::write(result, "\"", 1uLL);
  *v14 = 34;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<mlir::affine::AffineParallelOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  mlir::MLIRContext *v4;
  uint64_t NoneType;
  uint64_t AttrData;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t I64IntegerAttr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD *v34;
  char v35;
  void *v36[2];
  _QWORD v37[10];

  v37[9] = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v36[0] = v37;
  v36[1] = (void *)0x400000000;
  v37[8] = 4;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
  v3 = *a1;
  NoneType = mlir::Builder::getNoneType((mlir::NoneType **)a1[1], v4);
  if (mlir::AsmParser::parseAttribute<mlir::StringAttr>(v3, &v26, NoneType, (uint64_t)"reduce", 6, (uint64_t)v36))
  {
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
    v8 = mlir::arith::symbolizeAtomicRMWKind(AttrData, v7);
    if (v9)
    {
      v10 = a1[2];
      I64IntegerAttr = mlir::Builder::getI64IntegerAttr((mlir::Builder *)a1[1], v8);
      v12 = *(unsigned int *)(v10 + 8);
      if (v12 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v10 + 16), v12 + 1, 8);
        LODWORD(v12) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v12) = I64IntegerAttr;
      ++*(_DWORD *)(v10 + 8);
      v13 = 1;
    }
    else
    {
      v15 = *a1;
      v24 = "invalid reduction value: ";
      v25 = 259;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)v15 + 24))(&v27, v15, v2, &v24);
      if (v27)
        mlir::Diagnostic::operator<<((uint64_t)&v28, v26);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
      if (v27)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
      if (v35)
      {
        v16 = __p;
        if (__p)
        {
          v17 = v34;
          v18 = __p;
          if (v34 != __p)
          {
            do
              v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
            while (v17 != v16);
            v18 = __p;
          }
          v34 = v16;
          operator delete(v18);
        }
        v19 = v31;
        if (v31)
        {
          v20 = v32;
          v21 = v31;
          if (v32 != v31)
          {
            do
            {
              v23 = *--v20;
              v22 = v23;
              *v20 = 0;
              if (v23)
                MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
            }
            while (v20 != v19);
            v21 = v31;
          }
          v32 = v19;
          operator delete(v21);
        }
        if (v29 != &v30)
          free(v29);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  if (v36[0] != v37)
    free(v36[0]);
  return v13;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::StringAttr>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  _QWORD v27[3];
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v26 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v26, a3))
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v13 = v26;
  else
    v13 = 0;
  *a2 = v13;
  if (v13)
  {
    mlir::NamedAttrList::append(a6, a4, a5, v13);
    return 1;
  }
  else
  {
    v24 = "invalid kind of attribute specified";
    v25 = 259;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v27, a1, v12, &v24);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    if (v34)
    {
      v16 = __p;
      if (__p)
      {
        v17 = v33;
        v18 = __p;
        if (v33 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v33 = v16;
        operator delete(v18);
      }
      v19 = v30;
      if (v30)
      {
        v20 = v31;
        v21 = v30;
        if (v31 != v30)
        {
          do
          {
            v23 = *--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              MEMORY[0x20BD002D4](v22, 0x1000C8077774924);
          }
          while (v20 != v19);
          v21 = v30;
        }
        v31 = v19;
        operator delete(v21);
      }
      if (v28 != &v29)
        free(v28);
    }
  }
  return v14;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorLoadOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorLoadOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorLoadOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorLoadOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  ZinIrHalH13g *v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x24BDAC8D0];
  v37 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37);
  v32 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v37 = v39;
    v38 = 0x800000000;
    v7 = -1;
    v8 = 32;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v7, 8);
    v9 = v38;
    v10 = v37;
    v11 = (char *)v37 + 8 * v38;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 1;
  v8 = *(_QWORD *)(a2 + 72) + 32;
  v37 = v39;
  v38 = 0x800000000;
  if ((unint64_t)(v6 - 1) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 1)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v39;
  v11 = v39;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v38;
  v9 = v7;
LABEL_17:
  LODWORD(v38) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v32, (uint64_t)&v37);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v32, (uint64_t)&v37);
  simplifyMapWithOperands((mlir::AffineExpr *)&v32, (uint64_t *)v37, v38);
  if (v32 != Value)
  {
    v22 = v37;
    goto LABEL_19;
  }
  v22 = v37;
  if (!v9)
  {
LABEL_32:
    v26 = 0;
    if (v37 == v39)
      return v26;
    goto LABEL_23;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v37)
  {
    v28 = (uint64_t *)(v8 + 56);
    v29 = 1;
    while (v9 != v29)
    {
      v30 = *v28;
      v28 += 4;
      v31 = *((_QWORD *)v37 + v29++);
      if (v30 != v31)
        goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_19:
  v35[1] = v38;
  v36 = v32;
  v35[0] = v22;
  if (*(_DWORD *)(a2 + 36))
    v23 = a2 - 16;
  else
    v23 = 0;
  v24 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v34 = v24;
  v25 = mlir::OpBuilder::create<mlir::affine::AffineVectorLoadOp,mlir::VectorType,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v34, &v33, &v36, (uint64_t)v35);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v25);
  v26 = 1;
  v22 = v37;
  if (v37 != v39)
LABEL_23:
    free(v22);
  return v26;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineVectorLoadOp,mlir::VectorType,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  unint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.vector_load", (const unsigned __int8 *)0x12, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"affine.vector_load";
    v25[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  v18 = mlir::ValueRange::ValueRange(v27, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  mlir::affine::AffineVectorLoadOp::build((uint64_t)v18, (uint64_t)v28, v15, v16, v17, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineVectorLoadOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

_QWORD *`anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::~SimplifyAffineOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::affine::AffineVectorStoreOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t `anonymous namespace'::SimplifyAffineOp<mlir::affine::AffineVectorStoreOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  const double *v14;
  unsigned __int128 *v15;
  unint64_t v16;
  const double *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  ZinIrHalH13g *v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[9];

  v38[8] = *MEMORY[0x24BDAC8D0];
  v36 = *(void **)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  v31 = Value;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
  {
    v36 = v38;
    v37 = 0x800000000;
    v7 = -2;
    v8 = 64;
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v7, 8);
    v9 = v37;
    v10 = v36;
    v11 = (char *)v36 + 8 * v37;
    if (v7 < 0xD)
      goto LABEL_9;
    goto LABEL_7;
  }
  v6 = *(unsigned int *)(a2 + 68);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(a2 + 72) + 64;
  v36 = v38;
  v37 = 0x800000000;
  if ((unint64_t)(v6 - 2) >= 9)
    goto LABEL_3;
  v9 = 0;
  if (v6 == 2)
  {
    v21 = 0;
    goto LABEL_17;
  }
  v10 = v38;
  v11 = v38;
  if (v7 < 0xD)
    goto LABEL_9;
LABEL_7:
  if ((unint64_t)v11 >= v8 + 32 * v7 || v8 + 24 >= (unint64_t)&v10[v7 + v9])
  {
    v13 = v7 & 3;
    if ((v7 & 3) == 0)
      v13 = 4;
    v12 = v7 - v13;
    v11 += v12;
    v14 = (const double *)(v8 + 88);
    v15 = (unsigned __int128 *)&v10[v9 + 2];
    v16 = v12;
    do
    {
      v17 = v14 - 8;
      v18 = (unsigned __int128)vld4q_f64(v17);
      v19 = (unsigned __int128)vld4q_f64(v14);
      *(v15 - 1) = v18;
      *v15 = v19;
      v14 += 16;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    goto LABEL_14;
  }
LABEL_9:
  v12 = 0;
LABEL_14:
  v20 = (32 * v12) | 0x18;
  do
  {
    *v11++ = *(_QWORD *)(v8 + v20);
    ++v12;
    v20 += 32;
  }
  while (v7 != v12);
  v21 = v37;
  v9 = v7;
LABEL_17:
  LODWORD(v37) = v21 + v9;
  composeAffineMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  mlir::affine::canonicalizeMapAndOperands((mlir::AffineBinaryOpExpr *)&v31, (uint64_t)&v36);
  simplifyMapWithOperands((mlir::AffineExpr *)&v31, (uint64_t *)v36, v37);
  if (v31 != Value)
  {
    v22 = v36;
    goto LABEL_19;
  }
  v22 = v36;
  if (!v9)
  {
LABEL_29:
    v25 = 0;
    if (v36 == v38)
      return v25;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v8 + 24) == *(_QWORD *)v36)
  {
    v27 = (uint64_t *)(v8 + 56);
    v28 = 1;
    while (v9 != v28)
    {
      v29 = *v27;
      v27 += 4;
      v30 = *((_QWORD *)v36 + v28++);
      if (v29 != v30)
        goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_19:
  v34[1] = v37;
  v35 = v31;
  v23 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(v23 + 24);
  v34[0] = v22;
  v32 = *(_QWORD *)(v23 + 56);
  v24 = mlir::OpBuilder::create<mlir::affine::AffineVectorStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(a2 + 24), &v33, &v32, &v35, (uint64_t)v34);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(_QWORD *)a3 + 32))(a3, a2, v24);
  v25 = 1;
  v22 = v36;
  if (v36 != v38)
LABEL_20:
    free(v22);
  return v25;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::affine::AffineVectorStoreOp,mlir::Value,mlir::Value,mlir::AffineMap &,llvm::ArrayRef<mlir::Value> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::StringAttr *v21;
  uint64_t v22;
  ZinIrHalH13g *v23;
  ZinIrHalH13g *v24;
  uint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  __int16 v32;
  unint64_t v33[2];
  _QWORD v34[14];
  _QWORD v35[25];

  v35[24] = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"affine.vector_store", (const unsigned __int8 *)0x13, Context);
  if (!v14)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"affine.vector_store";
    v31[3] = 19;
                      "een added by the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-de"
                      "pendent-whats-up-with-dialects-management";
    v28 = 259;
    llvm::operator+(v31, v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  mlir::ValueRange::ValueRange(v33, *(_QWORD *)a6, *(_QWORD *)(a6 + 8));
  v18 = v33[0];
  v19 = v33[1];
  v29 = v16;
  v30 = v15;
  mlir::OperationState::addOperands((uint64_t)v34, (uint64_t)&v30, 1);
  mlir::OperationState::addOperands((uint64_t)v34, (uint64_t)&v29, 1);
  mlir::OperationState::addOperands((uint64_t)v34, v18, v19);
  v20 = mlir::AffineMapAttr::get(v17);
  v21 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)v34);
  v32 = 261;
  v31[0] = (uint64_t)"map";
  v31[1] = 3;
  v22 = mlir::StringAttr::get(v21, (mlir::MLIRContext *)v31);
  ZinMirCacheTensors::ZinMirCacheTensors(v27, v22, v20);
  mlir::NamedAttrList::push_back((uint64_t)v35, v27[0], v27[1]);
  v23 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((_QWORD *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::affine::AffineVectorStoreOp,void>::id)
    v24 = v23;
  else
    v24 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineApplyOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineForOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineParallelOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffinePrefetchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorLoadOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::affine::detail::AffineVectorStoreOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t mlir::affine::AffineValueMap::AffineValueMap(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v11 = mlir::MutableAffineMap::MutableAffineMap((_QWORD *)a1, a2);
  v12 = (char *)(v11 + 14);
  v11[12] = v11 + 14;
  v13 = (uint64_t)(v11 + 12);
  *(_QWORD *)(v13 + 8) = 0x400000000;
  if (a4 < 5)
  {
    v14 = 0;
    v26 = a3;
    v27 = 0;
    if (!a4)
    {
      v18 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, a4, 8);
    v14 = *(unsigned int *)(a1 + 104);
    v12 = *(char **)(a1 + 96);
    v26 = a3;
    v27 = 0;
  }
  v15 = 0;
  v16 = (uint64_t *)&v12[8 * v14];
  do
  {
    *v16++ = mlir::ValueRange::dereference_iterator(&v26, v15);
    v15 = ++v27;
  }
  while (v26 != a3 || v15 != a4);
  v18 = *(_DWORD *)(a1 + 104);
LABEL_11:
  v19 = (char *)(a1 + 160);
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_DWORD *)(a1 + 104) = v18 + a4;
  *(_QWORD *)(a1 + 152) = 0x400000000;
  if (a6 < 5)
  {
    v20 = 0;
    v26 = a5;
    v27 = 0;
    if (!a6)
    {
      v24 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 144, v19, a6, 8);
    v20 = *(unsigned int *)(a1 + 152);
    v19 = *(char **)(a1 + 144);
    v26 = a5;
    v27 = 0;
  }
  v21 = 0;
  v22 = (uint64_t *)&v19[8 * v20];
  do
  {
    *v22++ = mlir::ValueRange::dereference_iterator(&v26, v21);
    v21 = ++v27;
  }
  while (v26 != a5 || v21 != a6);
  v24 = *(_DWORD *)(a1 + 152);
LABEL_21:
  *(_DWORD *)(a1 + 152) = v24 + a6;
  return a1;
}

uint64_t *mlir::affine::AffineValueMap::reset(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v17;
  uint64_t *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  mlir::MutableAffineMap::reset(a1, a2);
  v11 = (uint64_t *)(a1 + 96);
  *(_DWORD *)(a1 + 104) = 0;
  if (a4 <= *(unsigned int *)(a1 + 108))
  {
    v13 = *v11;
    v25 = a3;
    v26 = 0;
    if (!a4)
    {
      v17 = 0;
      goto LABEL_12;
    }
    v12 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (void *)(a1 + 112), a4, 8);
    v12 = *(unsigned int *)(a1 + 104);
    v13 = *(_QWORD *)(a1 + 96);
    v25 = a3;
    v26 = 0;
  }
  v14 = 0;
  v15 = (uint64_t *)(v13 + 8 * v12);
  do
  {
    *v15++ = mlir::ValueRange::dereference_iterator(&v25, v14);
    v14 = ++v26;
  }
  while (v25 != a3 || v14 != a4);
  v17 = *(_DWORD *)(a1 + 104);
LABEL_12:
  *(_DWORD *)(a1 + 104) = v17 + a4;
  result = (uint64_t *)(a1 + 144);
  *(_DWORD *)(a1 + 152) = 0;
  if (a6 <= *(unsigned int *)(a1 + 156))
  {
    v20 = *result;
    v25 = a5;
    v26 = 0;
    if (!a6)
    {
      v24 = 0;
      goto LABEL_23;
    }
    v19 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (void *)(a1 + 160), a6, 8);
    v19 = *(unsigned int *)(a1 + 152);
    v20 = *(_QWORD *)(a1 + 144);
    v25 = a5;
    v26 = 0;
  }
  v21 = 0;
  v22 = (uint64_t **)(v20 + 8 * v19);
  do
  {
    result = (uint64_t *)mlir::ValueRange::dereference_iterator(&v25, v21);
    *v22++ = result;
    v21 = ++v26;
  }
  while (v25 != a5 || v21 != a6);
  v24 = *(_DWORD *)(a1 + 152);
LABEL_23:
  *(_DWORD *)(a1 + 152) = v24 + a6;
  return result;
}

uint64_t mlir::affine::AffineValueMap::getOperands(mlir::affine::AffineValueMap *this)
{
  return *((_QWORD *)this + 12);
}

void mlir::affine::AffineValueMap::~AffineValueMap(mlir::affine::AffineValueMap *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 18);
  if (v2 != (char *)this + 160)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 12);
  if (v3 != (char *)this + 112)
    free(v3);
  if (*(mlir::affine::AffineValueMap **)this != (mlir::affine::AffineValueMap *)((char *)this + 16))
    free(*(void **)this);
}

uint64_t mlir::detail::verifyShapedDimOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 9) == 1)
  {
    v21[0] = *((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::Type::isIndex((mlir::Type *)v21))
      return 1;
    v19[0] = "expect index result type";
    v20 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v12 = __p;
      if (__p)
      {
        v13 = v27;
        v14 = __p;
        if (v27 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v27 = v12;
        operator delete(v14);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v15 = v25;
      v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23)
          free(v22);
        return v3;
      }
      do
      {
        v17 = *--v15;
        v16 = v17;
        *v15 = 0;
        if (v17)
          MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
      }
      while (v15 != v7);
LABEL_32:
      v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "expected single op result";
    v20 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v19, (uint64_t)v21);
    v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    if (v28)
    {
      v4 = __p;
      if (__p)
      {
        v5 = v27;
        v6 = __p;
        if (v27 != __p)
        {
          do
            v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          v6 = __p;
        }
        v27 = v4;
        operator delete(v6);
      }
      v7 = v24;
      if (!v24)
        goto LABEL_34;
      v8 = v25;
      v9 = v24;
      if (v25 == v24)
        goto LABEL_33;
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          MEMORY[0x20BD002D4](v10, 0x1000C8077774924);
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::DestinationStyleOpInterface::getDpsInitsMutable(mlir::DestinationStyleOpInterface *this)
{
  return (**((uint64_t (***)(_QWORD, _QWORD))this + 1))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

unint64_t mlir::detail::verifyDestinationStyleOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  unint64_t v2;
  void (**InterfaceFor)(const void ***__return_ptr, _QWORD, mlir::detail *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  const void **v12;
  const void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int OperandNumber;
  uint64_t *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  int v44;
  unsigned int v45;
  mlir::detail *v46;
  const char *v47;
  char *v48;
  const void **v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  unsigned int v53;
  const void ***v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  const void ***v59;
  char *v60;
  char *v61;
  __int128 v62;
  const void ***v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  const void ***v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  const void ***v73;
  char *v74;
  char *v75;
  __int128 v76;
  const void ***v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  const void ***v82;
  char *v83;
  char *v84;
  __int128 v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const void ***v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  const void ***v101;
  char *v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  const void ***v106;
  char *v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  const void ***v111;
  char *v112;
  char *v113;
  __int128 v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  _QWORD *v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  unint64_t v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v133;
  unint64_t v134;
  BOOL v135;
  unint64_t v136;
  BOOL v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  unint64_t v141;
  BOOL v142;
  unint64_t v143;
  unint64_t v144;
  BOOL v145;
  int64_t v146;
  int64_t v147;
  int64_t v148;
  int64_t v149;
  int64_t v150;
  int64_t v151;
  int64_t v152;
  int64_t v153;
  int64_t v154;
  int64_t v155;
  int64_t v156;
  int64_t v157;
  int64_t v158;
  const void **v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  __int16 v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  unsigned int v171;
  unsigned int v172;
  _BYTE v173[96];
  void *v174;
  _QWORD *v175;
  void *__p;
  _QWORD *v177;
  char v178;
  const void **v179[2];
  _WORD *v180;
  _WORD v181[12];
  unint64_t *v182;
  uint64_t v183;
  _QWORD v184[8];

  v184[6] = *MEMORY[0x24BDAC8D0];
  if (this)
    InterfaceFor = (void (**)(const void ***__return_ptr, _QWORD, mlir::detail *))mlir::OpInterface<mlir::DestinationStyleOpInterface,mlir::detail::DestinationStyleOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
  else
    InterfaceFor = 0;
  v182 = v184;
  v183 = 0x600000000;
  (*InterfaceFor)(v179, InterfaceFor, this);
  v5 = mlir::MutableOperandRange::begin((mlir::MutableOperandRange *)v179);
  v6 = mlir::MutableOperandRange::end((mlir::MutableOperandRange *)v179);
  if (v5 == v6)
  {
LABEL_12:
    v10 = 1;
    v11 = v180;
    if (v180 == v181)
      goto LABEL_14;
    goto LABEL_13;
  }
  v7 = v6;
  v2 = v5;
  while (1)
  {
    while (1)
    {
      v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      if (v8 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        break;
      v9 = v183;
      if (v183 >= (unint64_t)HIDWORD(v183))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, v184, v183 + 1, 8);
        v9 = v183;
      }
      v182[v9] = v5;
      LODWORD(v183) = v183 + 1;
      v2 += 32;
      v5 += 32;
      if (v2 == v7)
        goto LABEL_12;
    }
    if (v8 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      break;
    v2 += 32;
    v5 += 32;
    if (v2 == v7)
      goto LABEL_12;
  }
  v159 = (const void **)"expected that operand #";
  v163 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v159, (uint64_t)&v167);
  OperandNumber = mlir::OpOperand::getOperandNumber(v2);
  if (v167)
  {
    LODWORD(v164) = 5;
    v165 = OperandNumber;
    v19 = (uint64_t *)&v164;
    v20 = (char *)v170;
    if (v171 >= v172)
    {
      v125 = v171 + 1;
      if (v170 <= &v164 && (char *)v170 + 24 * v171 > (char *)&v164)
      {
        v146 = (char *)&v164 - (_BYTE *)v170;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v125, 24);
        v20 = (char *)v170;
        v19 = (uint64_t *)((char *)v170 + v146);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v125, 24);
        v19 = (uint64_t *)&v164;
        v20 = (char *)v170;
      }
    }
    v21 = &v20[24 * v171];
    v22 = *(_OWORD *)v19;
    *((_QWORD *)v21 + 2) = v19[2];
    *(_OWORD *)v21 = v22;
    v23 = ++v171;
    if (v167)
    {
      LODWORD(v164) = 3;
      v165 = (unint64_t)" is a ranked tensor or a ranked memref";
      v166 = 38;
      v24 = (uint64_t *)&v164;
      v25 = (char *)v170;
      if (v23 >= v172)
      {
        v126 = v23 + 1;
        v127 = (char *)v170 + 24 * v23 > (char *)&v164;
        if (v170 <= &v164 && v127)
        {
          v147 = (char *)&v164 - (_BYTE *)v170;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v126, 24);
          v25 = (char *)v170;
          v24 = (uint64_t *)((char *)v170 + v147);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v126, 24);
          v24 = (uint64_t *)&v164;
          v25 = (char *)v170;
        }
      }
      v26 = &v25[24 * v171];
      v27 = *(_OWORD *)v24;
      *((_QWORD *)v26 + 2) = v24[2];
      *(_OWORD *)v26 = v27;
      ++v171;
    }
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
  if (v167)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
  if (v178)
  {
    v28 = __p;
    if (__p)
    {
      v29 = v177;
      v30 = __p;
      if (v177 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v177 = v28;
      operator delete(v30);
    }
    v31 = v174;
    if (v174)
    {
      v32 = v175;
      v33 = v174;
      if (v175 != v174)
      {
        do
        {
          v35 = *--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            MEMORY[0x20BD002D4](v34, 0x1000C8077774924);
        }
        while (v32 != v31);
        v33 = v174;
      }
      v175 = v31;
      operator delete(v33);
    }
    if (v170 != v173)
      free(v170);
  }
  v10 = 0;
  v11 = v180;
  if (v180 != v181)
LABEL_13:
    free(v11);
LABEL_14:
  if (!v10)
    goto LABEL_136;
  v12 = (const void **)*((unsigned int *)this + 9);
  if ((_DWORD)v12)
    v13 = (const void **)((char *)this - 16);
  else
    v13 = 0;
  v179[0] = v13;
  v179[1] = v12;
  mlir::OperandRange::getTypes((uint64_t *)v179, (uint64_t *)&v167);
  v14 = (uint64_t)v167;
  v15 = (uint64_t)v168;
  v16 = v170;
  if (v167 != v169 || (v17 = 0, v168 != v170))
  {
    if (v167 != v169)
    {
      while (1)
        mlir::detail::OpResultImpl::getNextResultAtOffset(v14, v15++);
    }
    v17 = 0;
    do
    {
      v36 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, v15) + 8) & 0xFFFFFFFFFFFFFFF8)
                     + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v36 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        ++v17;
      }
      ++v15;
    }
    while (v16 != (void *)v15);
  }
  if (v17 != v183)
  {
    v179[0] = (const void **)"expected the number of tensor results (";
    v181[0] = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v179, (uint64_t)&v167);
    v47 = (const char *)*((unsigned int *)this + 9);
    if ((_DWORD)v47)
      v48 = (char *)this - 16;
    else
      v48 = 0;
    v164 = v48;
    v165 = (unint64_t)v47;
    mlir::OperandRange::getTypes((uint64_t *)&v164, (uint64_t *)&v159);
    v49 = v159;
    v50 = (uint64_t)v160;
    v51 = v162;
    if (v159 != (const void **)v161 || (v52 = 0, v160 != v162))
    {
      if (v159 != (const void **)v161)
      {
        while (1)
          mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v49, v50++);
      }
      v52 = 0;
      do
      {
        v94 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v49, v50) + 8) & 0xFFFFFFFFFFFFFFF8)
                       + 136);
        if (v94 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v94 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          ++v52;
        }
        ++v50;
      }
      while (v51 != (const char *)v50);
    }
    if (v167)
    {
      LODWORD(v159) = 5;
      v160 = v52;
      v96 = &v159;
      v97 = (char *)v170;
      if (v171 >= v172)
      {
        v128 = v171 + 1;
        if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
        {
          v148 = (char *)&v159 - (_BYTE *)v170;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v128, 24);
          v97 = (char *)v170;
          v96 = (const void ***)((char *)v170 + v148);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v128, 24);
          v96 = &v159;
          v97 = (char *)v170;
        }
      }
      v98 = &v97[24 * v171];
      v99 = *(_OWORD *)v96;
      *((_QWORD *)v98 + 2) = v96[2];
      *(_OWORD *)v98 = v99;
      v100 = ++v171;
      if (v167)
      {
        LODWORD(v159) = 3;
        v160 = ") to be equal to the number of output tensors (";
        v161 = 47;
        v101 = &v159;
        v102 = (char *)v170;
        if (v100 >= v172)
        {
          v129 = v100 + 1;
          v130 = (char *)v170 + 24 * v100 > (char *)&v159;
          if (v170 <= &v159 && v130)
          {
            v149 = (char *)&v159 - (_BYTE *)v170;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v129, 24);
            v102 = (char *)v170;
            v101 = (const void ***)((char *)v170 + v149);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v129, 24);
            v101 = &v159;
            v102 = (char *)v170;
          }
        }
        v103 = &v102[24 * v171];
        v104 = *(_OWORD *)v101;
        *((_QWORD *)v103 + 2) = v101[2];
        *(_OWORD *)v103 = v104;
        v105 = ++v171;
        if (v167)
        {
          LODWORD(v159) = 5;
          v160 = (const char *)v183;
          v106 = &v159;
          v107 = (char *)v170;
          if (v105 >= v172)
          {
            v132 = v105 + 1;
            v133 = (char *)v170 + 24 * v105 > (char *)&v159;
            if (v170 <= &v159 && v133)
            {
              v151 = (char *)&v159 - (_BYTE *)v170;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v132, 24);
              v107 = (char *)v170;
              v106 = (const void ***)((char *)v170 + v151);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v132, 24);
              v106 = &v159;
              v107 = (char *)v170;
            }
          }
          v108 = &v107[24 * v171];
          v109 = *(_OWORD *)v106;
          *((_QWORD *)v108 + 2) = v106[2];
          *(_OWORD *)v108 = v109;
          v110 = ++v171;
          if (v167)
          {
            LODWORD(v159) = 3;
            v160 = ")";
            v161 = 1;
            v111 = &v159;
            v112 = (char *)v170;
            if (v110 >= v172)
            {
              v136 = v110 + 1;
              v137 = (char *)v170 + 24 * v110 > (char *)&v159;
              if (v170 <= &v159 && v137)
              {
                v153 = (char *)&v159 - (_BYTE *)v170;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v136, 24);
                v112 = (char *)v170;
                v111 = (const void ***)((char *)v170 + v153);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v136, 24);
                v111 = &v159;
                v112 = (char *)v170;
              }
            }
            v113 = &v112[24 * v171];
            v114 = *(_OWORD *)v111;
            *((_QWORD *)v113 + 2) = v111[2];
            *(_OWORD *)v113 = v114;
            ++v171;
          }
        }
      }
    }
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
    if (v167)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
    if (!v178)
      goto LABEL_136;
    v115 = __p;
    if (__p)
    {
      v116 = v177;
      v117 = __p;
      if (v177 != __p)
      {
        do
          v116 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v116 - 1);
        while (v116 != v115);
        v117 = __p;
      }
      v177 = v115;
      operator delete(v117);
    }
    v118 = v174;
    if (v174)
    {
      v119 = v175;
      v120 = v174;
      if (v175 != v174)
      {
        do
        {
          v122 = *--v119;
          v121 = v122;
          *v119 = 0;
          if (v122)
            MEMORY[0x20BD002D4](v121, 0x1000C8077774924);
        }
        while (v119 != v118);
        v120 = v174;
      }
      v175 = v118;
      operator delete(v120);
    }
    v123 = v170;
    if (v170 == v173)
      goto LABEL_136;
LABEL_135:
    free(v123);
    goto LABEL_136;
  }
  if (!(_DWORD)v183)
  {
    v2 = 1;
    goto LABEL_136;
  }
  v38 = v182;
  v39 = 8 * v17;
  while (1)
  {
    v40 = *v38;
    (*InterfaceFor)((const void ***)&v167, InterfaceFor, this);
    v41 = (void *)mlir::MutableOperandRange::operator mlir::OperandRange((unsigned int *)&v167);
    v43 = v42;
    if (v169 != &v171)
      free(v169);
    v167 = v41;
    v168 = v43;
    v44 = mlir::OpOperand::getOperandNumber(v40);
    v45 = v44 - mlir::OperandRange::getBeginOperandIndex((mlir::OperandRange *)&v167);
    v46 = v45 <= 5 ? (mlir::detail *)((char *)this - 16 * v45 - 16) : (mlir::detail *)((char *)this - 24 * v45 + 24);
    if ((*((_QWORD *)v46 + 1) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      break;
    ++v38;
    v39 -= 8;
    if (!v39)
    {
      v2 = 1;
      goto LABEL_136;
    }
  }
  v179[0] = (const void **)"expected type of operand #";
  v181[0] = 259;
  mlir::Operation::emitOpError((uint64_t *)this, v179, (uint64_t)&v167);
  v53 = mlir::OpOperand::getOperandNumber(v40);
  if (v167)
  {
    LODWORD(v159) = 5;
    v160 = (const char *)v53;
    v54 = &v159;
    v55 = (char *)v170;
    if (v171 >= v172)
    {
      v131 = v171 + 1;
      if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
      {
        v150 = (char *)&v159 - (_BYTE *)v170;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v131, 24);
        v55 = (char *)v170;
        v54 = (const void ***)((char *)v170 + v150);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v131, 24);
        v54 = &v159;
        v55 = (char *)v170;
      }
    }
    v56 = &v55[24 * v171];
    v57 = *(_OWORD *)v54;
    *((_QWORD *)v56 + 2) = v54[2];
    *(_OWORD *)v56 = v57;
    v58 = ++v171;
    if (v167)
    {
      LODWORD(v159) = 3;
      v160 = " (";
      v161 = 2;
      v59 = &v159;
      v60 = (char *)v170;
      if (v58 >= v172)
      {
        v134 = v58 + 1;
        v135 = (char *)v170 + 24 * v58 > (char *)&v159;
        if (v170 <= &v159 && v135)
        {
          v152 = (char *)&v159 - (_BYTE *)v170;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v134, 24);
          v60 = (char *)v170;
          v59 = (const void ***)((char *)v170 + v152);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v134, 24);
          v59 = &v159;
          v60 = (char *)v170;
        }
      }
      v61 = &v60[24 * v171];
      v62 = *(_OWORD *)v59;
      *((_QWORD *)v61 + 2) = v59[2];
      *(_OWORD *)v61 = v62;
      ++v171;
      if (v167)
      {
        v63 = &v159;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v159, *(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        v64 = (char *)v170;
        if (v171 >= v172)
        {
          v138 = v171 + 1;
          if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
          {
            v154 = (char *)&v159 - (_BYTE *)v170;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v138, 24);
            v64 = (char *)v170;
            v63 = (const void ***)((char *)v170 + v154);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v138, 24);
            v63 = &v159;
            v64 = (char *)v170;
          }
        }
        v65 = &v64[24 * v171];
        v66 = *(_OWORD *)v63;
        *((_QWORD *)v65 + 2) = v63[2];
        *(_OWORD *)v65 = v66;
        v67 = ++v171;
        if (v167)
        {
          LODWORD(v159) = 3;
          v160 = ")";
          v161 = 1;
          v68 = &v159;
          v69 = (char *)v170;
          if (v67 >= v172)
          {
            v139 = v67 + 1;
            v140 = (char *)v170 + 24 * v67 > (char *)&v159;
            if (v170 <= &v159 && v140)
            {
              v155 = (char *)&v159 - (_BYTE *)v170;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v139, 24);
              v69 = (char *)v170;
              v68 = (const void ***)((char *)v170 + v155);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v139, 24);
              v68 = &v159;
              v69 = (char *)v170;
            }
          }
          v70 = &v69[24 * v171];
          v71 = *(_OWORD *)v68;
          *((_QWORD *)v70 + 2) = v68[2];
          *(_OWORD *)v70 = v71;
          v72 = ++v171;
          if (v167)
          {
            LODWORD(v159) = 3;
            v160 = " to match type of corresponding result (";
            v161 = 40;
            v73 = &v159;
            v74 = (char *)v170;
            if (v72 >= v172)
            {
              v141 = v72 + 1;
              v142 = (char *)v170 + 24 * v72 > (char *)&v159;
              if (v170 <= &v159 && v142)
              {
                v156 = (char *)&v159 - (_BYTE *)v170;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v141, 24);
                v74 = (char *)v170;
                v73 = (const void ***)((char *)v170 + v156);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v141, 24);
                v73 = &v159;
                v74 = (char *)v170;
              }
            }
            v75 = &v74[24 * v171];
            v76 = *(_OWORD *)v73;
            *((_QWORD *)v75 + 2) = v73[2];
            *(_OWORD *)v75 = v76;
            ++v171;
            if (v167)
            {
              v77 = &v159;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v159, *((_QWORD *)v46 + 1) & 0xFFFFFFFFFFFFFFF8);
              v78 = (char *)v170;
              if (v171 >= v172)
              {
                v143 = v171 + 1;
                if (v170 <= &v159 && (char *)v170 + 24 * v171 > (char *)&v159)
                {
                  v157 = (char *)&v159 - (_BYTE *)v170;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v143, 24);
                  v78 = (char *)v170;
                  v77 = (const void ***)((char *)v170 + v157);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v143, 24);
                  v77 = &v159;
                  v78 = (char *)v170;
                }
              }
              v79 = &v78[24 * v171];
              v80 = *(_OWORD *)v77;
              *((_QWORD *)v79 + 2) = v77[2];
              *(_OWORD *)v79 = v80;
              v81 = ++v171;
              if (v167)
              {
                LODWORD(v159) = 3;
                v160 = ")";
                v161 = 1;
                v82 = &v159;
                v83 = (char *)v170;
                if (v81 >= v172)
                {
                  v144 = v81 + 1;
                  v145 = (char *)v170 + 24 * v81 > (char *)&v159;
                  if (v170 <= &v159 && v145)
                  {
                    v158 = (char *)&v159 - (_BYTE *)v170;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v144, 24);
                    v83 = (char *)v170;
                    v82 = (const void ***)((char *)v170 + v158);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, v173, v144, 24);
                    v82 = &v159;
                    v83 = (char *)v170;
                  }
                }
                v84 = &v83[24 * v171];
                v85 = *(_OWORD *)v82;
                *((_QWORD *)v84 + 2) = v82[2];
                *(_OWORD *)v84 = v85;
                ++v171;
              }
            }
          }
        }
      }
    }
  }
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v167);
  if (v167)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v167);
  if (v178)
  {
    v86 = __p;
    if (__p)
    {
      v87 = v177;
      v88 = __p;
      if (v177 != __p)
      {
        do
          v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
        while (v87 != v86);
        v88 = __p;
      }
      v177 = v86;
      operator delete(v88);
    }
    v89 = v174;
    if (v174)
    {
      v90 = v175;
      v91 = v174;
      if (v175 != v174)
      {
        do
        {
          v93 = *--v90;
          v92 = v93;
          *v90 = 0;
          if (v93)
            MEMORY[0x20BD002D4](v92, 0x1000C8077774924);
        }
        while (v90 != v89);
        v91 = v174;
      }
      v175 = v89;
      operator delete(v91);
    }
    v123 = v170;
    if (v170 != v173)
      goto LABEL_135;
  }
LABEL_136:
  if (v182 != v184)
    free(v182);
  return v2;
}

llvm::APInt *mlir::intrange::truncRange@<X0>(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t AneIndex;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  char *v12;
  char *v13;
  unint64_t v14;
  llvm::APInt **PaddingInfo;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  llvm::APInt **v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  llvm::APInt *v30;
  unsigned int v31;
  char *v32;
  char *v33;
  unsigned int v34;
  llvm::APInt *v35;
  unsigned int v36;
  llvm::APInt *v37;
  unsigned int v38;
  llvm::APInt *result;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  llvm::APInt *v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  llvm::APInt *v50;
  unsigned int v51;
  llvm::APInt *v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;

  v3 = a2;
  ZinIrHalH13g::~ZinIrHalH13g(this);
  v7 = *(_DWORD *)(v6 + 8);
  v57 = v7;
  if (v7 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v56, (const void **)v6);
    v7 = v57;
    if (v57 > 0x40)
    {
      llvm::APInt::lshrSlowCase((void **)&v56, v3);
      goto LABEL_8;
    }
  }
  else
  {
    v56 = *(_QWORD *)v6;
  }
  if (v7 == v3)
    v56 = 0;
  else
    v56 >>= v3;
LABEL_8:
  AneIndex = ZinBondedInfo::GetAneIndex(this);
  v9 = *(_DWORD *)(AneIndex + 8);
  v55 = v9;
  if (v9 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)AneIndex);
    v9 = v55;
    if (v55 > 0x40)
    {
      llvm::APInt::lshrSlowCase((void **)&v54, v3);
      v10 = v57;
      if (v57 > 0x40)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    v54 = *(_QWORD *)AneIndex;
  }
  if (v9 == v3)
  {
    v54 = 0;
    v10 = v57;
    if (v57 > 0x40)
    {
LABEL_18:
      v11 = llvm::APInt::equalSlowCase((const void **)&v56, (const void **)&v54);
      if (v55 < 0x41)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v54 >>= v3;
    v10 = v57;
    if (v57 > 0x40)
      goto LABEL_18;
  }
LABEL_15:
  v11 = v56 == v54;
  if (v55 < 0x41)
    goto LABEL_21;
LABEL_19:
  if (v54)
  {
    MEMORY[0x20BD002D4](v54, 0x1000C8000313F17);
    v10 = v57;
  }
LABEL_21:
  if (v10 >= 0x41 && v56)
    MEMORY[0x20BD002D4](v56, 0x1000C8000313F17);
  if (v11)
  {
    ZinIrHalH13g::~ZinIrHalH13g(this);
    llvm::APInt::trunc(v12, v3, (uint64_t)&v56);
    v13 = (char *)ZinBondedInfo::GetAneIndex(this);
    llvm::APInt::trunc(v13, v3, (uint64_t)&v54);
  }
  else
  {
    v57 = v3;
    if (v3 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v56, 0, 0);
      v55 = v3;
      llvm::APInt::initSlowCase((llvm::APInt *)&v54, -1, 1);
    }
    else
    {
      v56 = 0;
      v55 = v3;
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
      if (!v3)
        v14 = 0;
      v54 = v14;
    }
  }
  PaddingInfo = (llvm::APInt **)ZinSpatialSplitTransform::GetPaddingInfo(this);
  v16 = v3 - 1;
  v17 = *((_DWORD *)PaddingInfo + 2);
  v53 = v17;
  if (v17 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v52, (const void **)PaddingInfo);
    v17 = v53;
    if (v53 > 0x40)
    {
      llvm::APInt::ashrSlowCase((unsigned int *)&v52, v3 - 1);
      goto LABEL_42;
    }
    PaddingInfo = &v52;
  }
  if (v17 == v16)
    v18 = 63;
  else
    v18 = v3 - 1;
  v19 = (uint64_t)((_QWORD)*PaddingInfo << -(char)v17) >> -(char)v17 >> v18;
  if (v17)
    v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
  else
    v20 = 0;
  v52 = (llvm::APInt *)(v20 & v19);
LABEL_42:
  v21 = (llvm::APInt **)mlir::ConstantIntRanges::smax(this);
  v22 = *((_DWORD *)v21 + 2);
  v51 = v22;
  if (v22 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v50, (const void **)v21);
    v22 = v51;
    if (v51 > 0x40)
    {
      llvm::APInt::ashrSlowCase((unsigned int *)&v50, v3 - 1);
      v26 = v53;
      if (v53 <= 0x40)
        goto LABEL_52;
LABEL_58:
      if (llvm::APInt::equalSlowCase((const void **)&v52, (const void **)&v50))
        goto LABEL_80;
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v52) != v26)
        goto LABEL_70;
      goto LABEL_60;
    }
    v21 = &v50;
  }
  if (v22 == v16)
    v23 = 63;
  else
    v23 = v3 - 1;
  v24 = (uint64_t)((_QWORD)*v21 << -(char)v22) >> -(char)v22 >> v23;
  if (v22)
    v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
  else
    v25 = 0;
  v50 = (llvm::APInt *)(v25 & v24);
  v26 = v53;
  if (v53 > 0x40)
    goto LABEL_58;
LABEL_52:
  if (v52 == v50)
    goto LABEL_80;
  if (v26 && v52 != (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v26))
  {
    if (v52)
      goto LABEL_73;
    goto LABEL_71;
  }
LABEL_60:
  v27 = v51;
  if (!v51)
    goto LABEL_80;
  if (v51 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v50) == v27
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v50) == v27)
    {
      goto LABEL_80;
    }
  }
  else if (v50 == (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v51) || !v50)
  {
    goto LABEL_80;
  }
  if (v26 <= 0x40)
  {
    if (v52)
      goto LABEL_73;
    goto LABEL_71;
  }
LABEL_70:
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v52) != v26)
    goto LABEL_73;
LABEL_71:
  v28 = v51;
  if (v51 <= 0x40)
  {
    if (v50)
      goto LABEL_73;
LABEL_80:
    v32 = (char *)ZinSpatialSplitTransform::GetPaddingInfo(this);
    llvm::APInt::trunc(v32, v3, (uint64_t)&v48);
    v33 = (char *)mlir::ConstantIntRanges::smax(this);
    llvm::APInt::trunc(v33, v3, (uint64_t)&v46);
    v34 = v57;
    a3[2] = v57;
    if (v34 > 0x40)
      goto LABEL_92;
LABEL_81:
    *(_QWORD *)a3 = v56;
    v35 = (llvm::APInt *)(a3 + 4);
    v36 = v55;
    a3[6] = v55;
    if (v36 <= 0x40)
      goto LABEL_93;
LABEL_82:
    llvm::APInt::initSlowCase(v35, (const void **)&v54);
    v37 = (llvm::APInt *)(a3 + 8);
    v38 = v49;
    a3[10] = v49;
    if (v38 <= 0x40)
      goto LABEL_94;
    goto LABEL_83;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v50) == v28)
    goto LABEL_80;
LABEL_73:
  v49 = v3;
  if (v3 < 0x41)
  {
    v29 = 1 << v16;
    v48 = 1 << v16;
    v47 = v3;
    v30 = (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v3);
    if (!v3)
      v30 = 0;
    v46 = v30;
    goto LABEL_89;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v48, 0, 0);
  v29 = 1 << v16;
  v31 = v16 >> 6;
  if (v49 >= 0x41)
    *(_QWORD *)(v48 + 8 * v31) |= v29;
  else
    v48 |= v29;
  v47 = v3;
  llvm::APInt::initSlowCase((llvm::APInt *)&v46, -1, 1);
  if (v47 <= 0x40)
  {
LABEL_89:
    v41 = (char *)&v46;
    goto LABEL_91;
  }
  v41 = (char *)v46 + 8 * v31;
LABEL_91:
  *(_QWORD *)v41 &= ~v29;
  v42 = v57;
  a3[2] = v57;
  if (v42 <= 0x40)
    goto LABEL_81;
LABEL_92:
  llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&v56);
  v35 = (llvm::APInt *)(a3 + 4);
  v43 = v55;
  a3[6] = v55;
  if (v43 > 0x40)
    goto LABEL_82;
LABEL_93:
  *(_QWORD *)v35 = v54;
  v37 = (llvm::APInt *)(a3 + 8);
  v44 = v49;
  a3[10] = v49;
  if (v44 <= 0x40)
  {
LABEL_94:
    *(_QWORD *)v37 = v48;
    result = (llvm::APInt *)(a3 + 12);
    v45 = v47;
    a3[14] = v47;
    if (v45 <= 0x40)
      goto LABEL_95;
    goto LABEL_84;
  }
LABEL_83:
  llvm::APInt::initSlowCase(v37, (const void **)&v48);
  result = (llvm::APInt *)(a3 + 12);
  v40 = v47;
  a3[14] = v47;
  if (v40 <= 0x40)
  {
LABEL_95:
    *(_QWORD *)result = v46;
    goto LABEL_96;
  }
LABEL_84:
  result = (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)&v46);
  if (v47 >= 0x41)
  {
    result = v46;
    if (v46)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v46, 0x1000C8000313F17);
  }
LABEL_96:
  if (v49 >= 0x41)
  {
    result = (llvm::APInt *)v48;
    if (v48)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v48, 0x1000C8000313F17);
  }
  if (v51 >= 0x41)
  {
    result = v50;
    if (v50)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v50, 0x1000C8000313F17);
  }
  if (v53 >= 0x41)
  {
    result = v52;
    if (v52)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v52, 0x1000C8000313F17);
  }
  if (v55 >= 0x41)
  {
    result = (llvm::APInt *)v54;
    if (v54)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v54, 0x1000C8000313F17);
  }
  if (v57 >= 0x41)
  {
    result = (llvm::APInt *)v56;
    if (v56)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v56, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::extUIRange@<X0>(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3;
  llvm::APInt *v6;
  llvm::APInt *AneIndex;
  const llvm::APInt *v8;
  llvm::APInt *result;
  llvm::APInt *v10;
  unsigned int v11;
  llvm::APInt *v12;
  unsigned int v13;

  v3 = a2;
  ZinIrHalH13g::~ZinIrHalH13g(this);
  llvm::APInt::zext(v6, v3, (uint64_t)&v12);
  AneIndex = (llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
  llvm::APInt::zext(AneIndex, v3, (uint64_t)&v10);
  result = mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v12, (const llvm::APInt *)&v10, v8, a3);
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::extSIRange@<X0>(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3;
  _DWORD *PaddingInfo;
  _DWORD *v7;
  llvm::APInt *result;
  llvm::APInt *v9;
  unsigned int v10;
  llvm::APInt *v11;
  unsigned int v12;

  v3 = a2;
  PaddingInfo = (_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(this);
  llvm::APInt::sext(PaddingInfo, v3, (uint64_t)&v11);
  v7 = (_DWORD *)mlir::ConstantIntRanges::smax(this);
  llvm::APInt::sext(v7, v3, (uint64_t)&v9);
  result = mlir::ConstantIntRanges::fromSigned((mlir::ConstantIntRanges *)&v11, (const llvm::APInt *)&v9, a3);
  if (v10 >= 0x41)
  {
    result = v9;
    if (v9)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v9, 0x1000C8000313F17);
  }
  if (v12 >= 0x41)
  {
    result = v11;
    if (v11)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferAdd@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinIrHalH13g *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AneIndex;
  uint64_t v10;
  uint64_t PaddingInfo;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::APInt *result;
  llvm::APInt *v16;
  unsigned int v17;
  llvm::APInt *v18;
  unsigned int v19;
  llvm::APInt *v20;
  unsigned int v21;
  llvm::APInt *v22;
  unsigned int v23;
  llvm::APInt *v24;
  unsigned int v25;
  llvm::APInt *v26;
  unsigned int v27;
  llvm::APInt *v28;
  unsigned int v29;
  llvm::APInt *v30;
  unsigned int v31;

  v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v6 = v5;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  v8 = v7;
  AneIndex = ZinBondedInfo::GetAneIndex(a1);
  v10 = ZinBondedInfo::GetAneIndex(v4);
  computeBoundsBy(&v24, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v24, v6, v8, AneIndex, v10, 0);
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v12 = ZinSpatialSplitTransform::GetPaddingInfo(v4);
  v13 = mlir::ConstantIntRanges::smax(a1);
  v14 = mlir::ConstantIntRanges::smax(v4);
  computeBoundsBy(&v16, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v24, PaddingInfo, v12, v13, v14, (const llvm::APInt *)1);
  result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v24, (const mlir::ConstantIntRanges *)&v16, a2);
  if (v23 >= 0x41)
  {
    result = v22;
    if (v22)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v22, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v31 >= 0x41)
  {
    result = v30;
    if (v30)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
  }
  if (v29 >= 0x41)
  {
    result = v28;
    if (v28)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
  }
  if (v27 >= 0x41)
  {
    result = v26;
    if (v26)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
  }
  if (v25 >= 0x41)
  {
    result = v24;
    if (v24)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v24, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *computeBoundsBy(_DWORD *a1, void (*a2)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const llvm::APInt *a8)
{
  const llvm::APInt *v15;
  BOOL v16;
  llvm::APInt *result;
  llvm::APInt *v18;
  unsigned int v19;
  char v20;
  llvm::APInt *v21;
  unsigned int v22;
  char v23;

  a2(&v21, a3, a4, a5);
  a2(&v18, a3, a6, a7);
  if (v23)
    v16 = v20 == 0;
  else
    v16 = 1;
  if (v16)
  {
    result = mlir::ConstantIntRanges::maxRange((mlir::ConstantIntRanges *)*(unsigned int *)(a4 + 8), v15, a1);
    if (!v20)
      goto LABEL_12;
  }
  else
  {
    result = mlir::ConstantIntRanges::range((mlir::ConstantIntRanges *)&v21, (const llvm::APInt *)&v18, a8, a1);
    if (!v20)
      goto LABEL_12;
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
LABEL_12:
  if (v23 && v22 >= 0x41)
  {
    result = v21;
    if (v21)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferSub@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinBondedInfo *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AneIndex;
  uint64_t v8;
  uint64_t v9;
  uint64_t PaddingInfo;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::APInt *result;
  llvm::APInt *v15;
  unsigned int v16;
  llvm::APInt *v17;
  unsigned int v18;
  llvm::APInt *v19;
  unsigned int v20;
  llvm::APInt *v21;
  unsigned int v22;
  llvm::APInt *v23;
  unsigned int v24;
  llvm::APInt *v25;
  unsigned int v26;
  llvm::APInt *v27;
  unsigned int v28;
  llvm::APInt *v29;
  unsigned int v30;

  v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v6 = v5;
  AneIndex = ZinBondedInfo::GetAneIndex(v4);
  v8 = ZinBondedInfo::GetAneIndex(a1);
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  computeBoundsBy(&v23, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v23, v6, AneIndex, v8, v9, 0);
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v11 = mlir::ConstantIntRanges::smax(v4);
  v12 = mlir::ConstantIntRanges::smax(a1);
  v13 = ZinSpatialSplitTransform::GetPaddingInfo(v4);
  computeBoundsBy(&v15, (void (*)(llvm::APInt **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v23, PaddingInfo, v11, v12, v13, (const llvm::APInt *)1);
  result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v23, (const mlir::ConstantIntRanges *)&v15, a2);
  if (v22 >= 0x41)
  {
    result = v21;
    if (v21)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
  }
  if (v18 >= 0x41)
  {
    result = v17;
    if (v17)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v17, 0x1000C8000313F17);
  }
  if (v16 >= 0x41)
  {
    result = v15;
    if (v15)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v15, 0x1000C8000313F17);
  }
  if (v30 >= 0x41)
  {
    result = v29;
    if (v29)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v29, 0x1000C8000313F17);
  }
  if (v28 >= 0x41)
  {
    result = v27;
    if (v27)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v27, 0x1000C8000313F17);
  }
  if (v26 >= 0x41)
  {
    result = v25;
    if (v25)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
  }
  if (v24 >= 0x41)
  {
    result = v23;
    if (v23)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferMul@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinIrHalH13g *v4;
  uint64_t v5;
  uint64_t AneIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t PaddingInfo;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::APInt *result;
  llvm::APInt *v14;
  unsigned int v15;
  llvm::APInt *v16;
  unsigned int v17;
  llvm::APInt *v18;
  unsigned int v19;
  llvm::APInt *v20;
  unsigned int v21;
  const void *v22;
  unsigned int v23;
  const void *v24;
  unsigned int v25;
  llvm::APInt *v26;
  unsigned int v27;
  llvm::APInt *v28;
  unsigned int v29;
  llvm::APInt *v30;
  unsigned int v31;
  llvm::APInt *v32;
  unsigned int v33;
  const void *v34;
  unsigned int v35;
  const void *v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v27 = *(_DWORD *)(v5 + 8);
  if (v27 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, (const void **)v5);
  else
    v26 = *(llvm::APInt **)v5;
  AneIndex = ZinBondedInfo::GetAneIndex(a1);
  v29 = *(_DWORD *)(AneIndex + 8);
  if (v29 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v28, (const void **)AneIndex);
  else
    v28 = *(llvm::APInt **)AneIndex;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  v35 = *(_DWORD *)(v7 + 8);
  if (v35 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)v7);
  else
    v34 = *(const void **)v7;
  v8 = ZinBondedInfo::GetAneIndex(v4);
  v37 = *(_DWORD *)(v8 + 8);
  if (v37 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, (const void **)v8);
  else
    v36 = *(const void **)v8;
  minMaxBy(&v14, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v26, 2, (uint64_t)&v34, 2, 0);
  if (v37 >= 0x41 && v36)
    MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
  if (v35 >= 0x41 && v34)
    MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
  if (v29 >= 0x41 && v28)
    MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
  if (v27 >= 0x41 && v26)
    MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v35 = *(_DWORD *)(PaddingInfo + 8);
  if (v35 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)PaddingInfo);
  else
    v34 = *(const void **)PaddingInfo;
  v10 = mlir::ConstantIntRanges::smax(a1);
  v37 = *(_DWORD *)(v10 + 8);
  if (v37 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, (const void **)v10);
  else
    v36 = *(const void **)v10;
  v11 = ZinSpatialSplitTransform::GetPaddingInfo(v4);
  v23 = *(_DWORD *)(v11 + 8);
  if (v23 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, (const void **)v11);
  else
    v22 = *(const void **)v11;
  v12 = mlir::ConstantIntRanges::smax(v4);
  v25 = *(_DWORD *)(v12 + 8);
  if (v25 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, (const void **)v12);
  else
    v24 = *(const void **)v12;
  minMaxBy(&v26, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v14, (uint64_t)&v34, 2, (uint64_t)&v22, 2, (llvm::APInt *)1);
  if (v25 >= 0x41 && v24)
    MEMORY[0x20BD002D4](v24, 0x1000C8000313F17);
  if (v23 >= 0x41 && v22)
    MEMORY[0x20BD002D4](v22, 0x1000C8000313F17);
  if (v37 >= 0x41 && v36)
    MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
  if (v35 >= 0x41 && v34)
    MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
  result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v14, (const mlir::ConstantIntRanges *)&v26, a2);
  if (v33 >= 0x41)
  {
    result = v32;
    if (v32)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v32, 0x1000C8000313F17);
  }
  if (v31 >= 0x41)
  {
    result = v30;
    if (v30)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
  }
  if (v29 >= 0x41)
  {
    result = v28;
    if (v28)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
  }
  if (v27 >= 0x41)
  {
    result = v26;
    if (v26)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

void *minMaxBy(_DWORD *a1, void (*a2)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, llvm::APInt *a8)
{
  uint64_t v12;
  mlir::ConstantIntRanges *v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  unsigned int v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  const llvm::APInt *v24;
  int v25;
  void **v26;
  void *result;
  unsigned int v28;
  void **v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  void *v36;
  unsigned int v37;
  unsigned __int8 v38;
  char *v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;

  v12 = a4;
  v16 = (mlir::ConstantIntRanges *)*(unsigned int *)(a4 + 8);
  v42 = *(_DWORD *)(a4 + 8);
  if ((_DWORD)a8)
  {
    if (v16 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v41, -1, 1);
      LODWORD(v17) = (_DWORD)v16 - 1;
      if (v42 > 0x40)
      {
        v19 = (void **)&v41[8 * (v17 >> 6)];
LABEL_16:
        *v19 = (void *)((unint64_t)*v19 & ~(1 << v17));
        v40 = v16;
        if (v16 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v39, 0, 0);
          v20 = (_DWORD)v16 - 1;
          if (v40 > 0x40)
          {
            v21 = (void **)&v39[8 * (v20 >> 6)];
LABEL_21:
            *v21 = (void *)((1 << v20) | (unint64_t)*v21);
            if (!a5)
              goto LABEL_55;
            goto LABEL_22;
          }
        }
        else
        {
          v39 = 0;
          LOBYTE(v20) = (_BYTE)v16 - 1;
        }
        v21 = (void **)&v39;
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
      if (!(_DWORD)v16)
        v17 = 0;
      v41 = (char *)v17;
      LOBYTE(v17) = (_BYTE)v16 - 1;
    }
    v19 = (void **)&v41;
    goto LABEL_16;
  }
  if (v16 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v41, -1, 1);
    v40 = v16;
    llvm::APInt::initSlowCase((llvm::APInt *)&v39, 0, 0);
    if (!a5)
      goto LABEL_55;
  }
  else
  {
    v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    if (!(_DWORD)v16)
      v18 = 0;
    v41 = (char *)v18;
    v40 = v16;
    v39 = 0;
    if (!a5)
      goto LABEL_55;
  }
LABEL_22:
  if (a7)
  {
    v22 = 16 * a7;
    v31 = v12 + 16 * a5;
    v32 = 16 * a7;
    v33 = a6;
    do
    {
      v23 = a6;
      do
      {
        a2(&v36, a3, v12, v23);
        v25 = v38;
        if (!v38)
        {
          result = mlir::ConstantIntRanges::maxRange(v16, v24, a1);
          goto LABEL_48;
        }
        v35 = v37;
        v34 = v36;
        v37 = 0;
        v26 = &v34;
        if ((_DWORD)a8)
        {
          if ((llvm::APInt::compareSigned((llvm::APInt *)&v34, (const llvm::APInt *)&v41) & 0x80000000) != 0)
            goto LABEL_32;
LABEL_31:
          v26 = (void **)&v41;
          goto LABEL_32;
        }
        if ((llvm::APInt::compare((llvm::APInt *)&v34, (const llvm::APInt *)&v41) & 0x80000000) == 0)
          goto LABEL_31;
LABEL_32:
        if (v42 > 0x40 || (v28 = *((_DWORD *)v26 + 2), v28 > 0x40))
        {
          llvm::APInt::assignSlowCase((unsigned int *)&v41, (const void **)v26);
          v29 = &v34;
          if (!(_DWORD)a8)
          {
LABEL_35:
            result = (void *)llvm::APInt::compare((llvm::APInt *)&v34, (const llvm::APInt *)&v39);
            if ((int)result > 0)
              goto LABEL_39;
            goto LABEL_41;
          }
        }
        else
        {
          v41 = (char *)*v26;
          v42 = v28;
          v29 = &v34;
          if (!(_DWORD)a8)
            goto LABEL_35;
        }
        result = (void *)llvm::APInt::compareSigned((llvm::APInt *)&v34, (const llvm::APInt *)&v39);
        if ((int)result > 0)
        {
LABEL_39:
          if (v40 > 0x40)
            goto LABEL_45;
          goto LABEL_42;
        }
LABEL_41:
        v29 = (void **)&v39;
        if (v40 > 0x40)
          goto LABEL_45;
LABEL_42:
        v30 = *((_DWORD *)v29 + 2);
        if (v30 > 0x40)
        {
LABEL_45:
          result = llvm::APInt::assignSlowCase((unsigned int *)&v39, (const void **)v29);
          if (v35 < 0x41)
            goto LABEL_48;
          goto LABEL_46;
        }
        v39 = (char *)*v29;
        v40 = v30;
        if (v35 < 0x41)
          goto LABEL_48;
LABEL_46:
        result = v34;
        if (v34)
          result = (void *)MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
LABEL_48:
        if (v38)
        {
          if (v37 >= 0x41)
          {
            result = v36;
            if (v36)
              result = (void *)MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
          }
        }
        if (!v25)
          goto LABEL_56;
        v23 += 16;
        v22 -= 16;
      }
      while (v22);
      v12 += 16;
      v22 = v32;
      a6 = v33;
    }
    while (v12 != v31);
  }
LABEL_55:
  result = mlir::ConstantIntRanges::range((mlir::ConstantIntRanges *)&v41, (const llvm::APInt *)&v39, a8, a1);
LABEL_56:
  if (v40 >= 0x41)
  {
    result = v39;
    if (v39)
      result = (void *)MEMORY[0x20BD002D4](v39, 0x1000C8000313F17);
  }
  if (v42 >= 0x41)
  {
    result = v41;
    if (v41)
      return (void *)MEMORY[0x20BD002D4](v41, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferDivU@<X0>(ZinIrHalH13g *this@<X0>, _DWORD *a2@<X8>)
{
  char v3;

  return inferDivURange(a2, this, (ZinIrHalH13g *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *inferDivURange(_DWORD *a1, ZinIrHalH13g *this, ZinIrHalH13g *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AneIndex;
  unsigned int *v11;
  unsigned int *v12;
  const llvm::APInt *v13;
  uint64_t v14;
  mlir::ConstantIntRanges *v15;
  llvm::APInt *result;
  _QWORD *v17;
  _QWORD v18[2];
  llvm::APInt *v19;
  unsigned int v20;
  llvm::APInt *v21;
  unsigned int v22;
  llvm::APInt *v23;
  unsigned int v24;
  llvm::APInt *v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v18[0] = a4;
  v18[1] = a5;
  ZinIrHalH13g::~ZinIrHalH13g(this);
  v9 = v8;
  AneIndex = ZinBondedInfo::GetAneIndex(this);
  ZinIrHalH13g::~ZinIrHalH13g(a3);
  v12 = v11;
  v14 = ZinBondedInfo::GetAneIndex(a3);
  v15 = (mlir::ConstantIntRanges *)v12[2];
  if (v15 <= 0x40)
  {
    if (*(_QWORD *)v12)
      goto LABEL_3;
    return mlir::ConstantIntRanges::maxRange(v15, v13, a1);
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v12) == (_DWORD)v15)
    return mlir::ConstantIntRanges::maxRange(v15, v13, a1);
LABEL_3:
  v17 = v18;
  v24 = *(_DWORD *)(v9 + 8);
  if (v24 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const void **)v9);
    v26 = *(_DWORD *)(AneIndex + 8);
    if (v26 > 0x40)
    {
LABEL_5:
      llvm::APInt::initSlowCase((llvm::APInt *)&v25, (const void **)AneIndex);
      v20 = v12[2];
      if (v20 > 0x40)
        goto LABEL_6;
LABEL_12:
      v19 = *(llvm::APInt **)v12;
      v22 = *(_DWORD *)(v14 + 8);
      if (v22 > 0x40)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
    v23 = *(llvm::APInt **)v9;
    v26 = *(_DWORD *)(AneIndex + 8);
    if (v26 > 0x40)
      goto LABEL_5;
  }
  v25 = *(llvm::APInt **)AneIndex;
  v20 = v12[2];
  if (v20 <= 0x40)
    goto LABEL_12;
LABEL_6:
  llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)v12);
  v22 = *(_DWORD *)(v14 + 8);
  if (v22 > 0x40)
  {
LABEL_7:
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, (const void **)v14);
    goto LABEL_14;
  }
LABEL_13:
  v21 = *(llvm::APInt **)v14;
LABEL_14:
  result = (llvm::APInt *)minMaxBy(a1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivURange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>, (uint64_t)&v17, (uint64_t)&v23, 2, (uint64_t)&v19, 2, 0);
  if (v22 >= 0x41)
  {
    result = v21;
    if (v21)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
  }
  if (v26 >= 0x41)
  {
    result = v25;
    if (v25)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
  }
  if (v24 >= 0x41)
  {
    result = v23;
    if (v23)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferCeilDivU@<X0>(ZinIrHalH13g *this@<X0>, _DWORD *a2@<X8>)
{
  char v3;

  return inferDivURange(a2, this, (ZinIrHalH13g *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *mlir::intrange::inferDivS@<X0>(ZinSpatialSplitTransform *this@<X0>, _DWORD *a2@<X8>)
{
  char v3;

  return inferDivSRange(a2, this, (ZinSpatialSplitTransform *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *inferDivSRange(_DWORD *a1, ZinSpatialSplitTransform *this, ZinSpatialSplitTransform *a3, uint64_t a4, uint64_t a5)
{
  uint64_t PaddingInfo;
  uint64_t v9;
  unsigned int *v10;
  const llvm::APInt *v11;
  uint64_t v12;
  mlir::ConstantIntRanges *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  _QWORD *v17;
  llvm::APInt *result;
  _QWORD *v19;
  _QWORD v20[2];
  llvm::APInt *v21;
  unsigned int v22;
  llvm::APInt *v23;
  unsigned int v24;
  llvm::APInt *v25;
  unsigned int v26;
  llvm::APInt *v27;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v20[0] = a4;
  v20[1] = a5;
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(this);
  v9 = mlir::ConstantIntRanges::smax(this);
  v10 = (unsigned int *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
  v12 = mlir::ConstantIntRanges::smax(a3);
  v13 = (mlir::ConstantIntRanges *)v10[2];
  v14 = (_DWORD)v13 - 1;
  if (v13 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)v10 + 8 * (v14 >> 6)) >> v14) & 1) == 0
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v10) != (_DWORD)v13)
    {
      goto LABEL_11;
    }
  }
  else if (((*(_QWORD *)v10 >> v14) & 1) == 0 && *(_QWORD *)v10)
  {
    goto LABEL_11;
  }
  v15 = *(_DWORD *)(v12 + 8);
  v16 = v15 - 1;
  if (v15 >= 0x41)
    v17 = (_QWORD *)(*(_QWORD *)v12 + 8 * ((v15 - 1) >> 6));
  else
    v17 = (_QWORD *)v12;
  if (((*v17 >> v16) & 1) == 0)
    return mlir::ConstantIntRanges::maxRange(v13, v11, a1);
LABEL_11:
  v19 = v20;
  v26 = *(_DWORD *)(PaddingInfo + 8);
  if (v26 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, (const void **)PaddingInfo);
    v28 = *(_DWORD *)(v9 + 8);
    if (v28 > 0x40)
    {
LABEL_13:
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, (const void **)v9);
      v22 = v10[2];
      if (v22 > 0x40)
        goto LABEL_14;
LABEL_18:
      v21 = *(llvm::APInt **)v10;
      v24 = *(_DWORD *)(v12 + 8);
      if (v24 > 0x40)
        goto LABEL_15;
      goto LABEL_19;
    }
  }
  else
  {
    v25 = *(llvm::APInt **)PaddingInfo;
    v28 = *(_DWORD *)(v9 + 8);
    if (v28 > 0x40)
      goto LABEL_13;
  }
  v27 = *(llvm::APInt **)v9;
  v22 = v10[2];
  if (v22 <= 0x40)
    goto LABEL_18;
LABEL_14:
  llvm::APInt::initSlowCase((llvm::APInt *)&v21, (const void **)v10);
  v24 = *(_DWORD *)(v12 + 8);
  if (v24 > 0x40)
  {
LABEL_15:
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const void **)v12);
    goto LABEL_20;
  }
LABEL_19:
  v23 = *(llvm::APInt **)v12;
LABEL_20:
  result = (llvm::APInt *)minMaxBy(a1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivSRange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>, (uint64_t)&v19, (uint64_t)&v25, 2, (uint64_t)&v21, 2, (llvm::APInt *)1);
  if (v24 >= 0x41)
  {
    result = v23;
    if (v23)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
  }
  if (v22 >= 0x41)
  {
    result = v21;
    if (v21)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
  }
  if (v28 >= 0x41)
  {
    result = v27;
    if (v27)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v27, 0x1000C8000313F17);
  }
  if (v26 >= 0x41)
  {
    result = v25;
    if (v25)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v25, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferCeilDivS@<X0>(ZinSpatialSplitTransform *this@<X0>, _DWORD *a2@<X8>)
{
  char v3;

  return inferDivSRange(a2, this, (ZinSpatialSplitTransform *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *mlir::intrange::inferFloorDivS@<X0>(ZinSpatialSplitTransform *this@<X0>, _DWORD *a2@<X8>)
{
  char v3;

  return inferDivSRange(a2, this, (ZinSpatialSplitTransform *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferFloorDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v3);
}

llvm::APInt *mlir::intrange::inferRemS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinSpatialSplitTransform *v4;
  uint64_t PaddingInfo;
  llvm::APInt *v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const void **v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  _QWORD *v20;
  unsigned int v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  const void **v37;
  const void **v38;
  const void **v39;
  unsigned int v40;
  unsigned int v41;
  const void *v42;
  int v43;
  llvm::APInt *result;
  llvm::APInt *v45;
  unsigned int v46;
  const void *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  unint64_t *v55;
  unsigned int v56;
  const void *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t *v61;
  unsigned int v62;
  llvm::APInt *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;

  v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v6 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  v7 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(v4);
  v8 = mlir::ConstantIntRanges::smax(v4);
  v9 = *(_DWORD *)(v8 + 8);
  v66 = v9;
  if (v9 < 0x41)
  {
    v65 = 1 << (v9 - 1);
    v64 = v9;
    v10 = 0xFFFFFFFFFFFFFFFFLL >> ((v9 - 1) & 0x3F ^ 0x3F);
    if (!v9)
      v10 = 0;
    v63 = (llvm::APInt *)v10;
    LOBYTE(v11) = v9 - 1;
    goto LABEL_9;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v65, 0, 0);
  v11 = v9 - 1;
  if (v66 >= 0x41)
  {
    v12 = v11 >> 6;
    *(_QWORD *)(v65 + 8 * v12) |= 1 << v11;
    v64 = v9;
  }
  else
  {
    v65 |= 1 << v11;
    v64 = v9;
    v12 = v11 >> 6;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v63, -1, 1);
  if (v64 <= 0x40)
  {
LABEL_9:
    v13 = (const void **)&v63;
    goto LABEL_11;
  }
  v13 = (const void **)((char *)v63 + 8 * v12);
LABEL_11:
  *v13 = (const void *)((unint64_t)*v13 & ~(1 << v11));
  v14 = *((_DWORD *)v7 + 2);
  v15 = v14 - 1;
  if (v14 > 0x40)
  {
    v17 = *(_QWORD *)v7;
    if (((*(_QWORD *)(*(_QWORD *)v7 + 8 * (v15 >> 6)) >> v15) & 1) == 0
      && llvm::APInt::countLeadingZerosSlowCase(v7) != v14)
    {
      goto LABEL_22;
    }
    v16 = v17;
  }
  else
  {
    v16 = *(_QWORD *)v7;
    if (((*(_QWORD *)v7 >> v15) & 1) == 0 && v16)
      goto LABEL_26;
    v17 = *(_QWORD *)v7;
  }
  v18 = *(_DWORD *)(v8 + 8);
  v19 = v18 - 1;
  if (v18 >= 0x41)
    v20 = (_QWORD *)(*(_QWORD *)v8 + 8 * ((v18 - 1) >> 6));
  else
    v20 = (_QWORD *)v8;
  if (((*v20 >> v19) & 1) == 0)
    goto LABEL_114;
  if (v14 <= 0x40)
  {
LABEL_26:
    if (((v16 >> v15) & 1) == 0 && v16)
      goto LABEL_28;
    goto LABEL_30;
  }
LABEL_22:
  if (((*(_QWORD *)(v17 + 8 * (v15 >> 6)) >> v15) & 1) == 0
    && llvm::APInt::countLeadingZerosSlowCase(v7) != v14)
  {
LABEL_28:
    v62 = *(_DWORD *)(v8 + 8);
    if (v62 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v61, (const void **)v8);
    else
      v61 = *(unint64_t **)v8;
    goto LABEL_32;
  }
LABEL_30:
  llvm::APInt::abs((uint64_t **)v7, (llvm::APInt *)&v61);
LABEL_32:
  v21 = *(_DWORD *)(PaddingInfo + 8);
  v22 = v21 - 1;
  if (v21 >= 0x41)
    v23 = (uint64_t *)(*(_QWORD *)PaddingInfo + 8 * ((v21 - 1) >> 6));
  else
    v23 = (uint64_t *)PaddingInfo;
  v24 = *v23;
  v25 = *((_DWORD *)v6 + 2);
  v26 = v25 - 1;
  if (v25 <= 0x40)
  {
    if (((*(_QWORD *)v6 >> v26) & 1) == 0)
    {
      v27 = *(_QWORD *)v6 == 0;
      goto LABEL_42;
    }
LABEL_39:
    v28 = 0;
    v29 = 1 << v22;
    v30 = v62;
    v60 = v62;
    if (v62 > 0x40)
      goto LABEL_46;
LABEL_40:
    v59 = 0;
    v56 = v30;
LABEL_47:
    v55 = v61;
    goto LABEL_49;
  }
  if (((*(_QWORD *)(*(_QWORD *)v6 + 8 * (v26 >> 6)) >> v26) & 1) != 0)
    goto LABEL_39;
  v27 = llvm::APInt::countLeadingZerosSlowCase(v6) == v25;
LABEL_42:
  v31 = v27;
  v28 = v31 ^ 1;
  v29 = 1 << v22;
  v30 = v62;
  v60 = v62;
  if (v62 <= 0x40)
    goto LABEL_40;
LABEL_46:
  llvm::APInt::initSlowCase((llvm::APInt *)&v59, 0, 0);
  v56 = v62;
  if (v62 <= 0x40)
    goto LABEL_47;
  llvm::APInt::initSlowCase((llvm::APInt *)&v55, (const void **)&v61);
LABEL_49:
  v32 = v29 & v24;
  llvm::APInt::operator-=(&v55, 1uLL);
  v33 = v56;
  v58 = v56;
  v34 = (unint64_t)v55;
  v57 = v55;
  v56 = 0;
  v52 = v58;
  if (v58 < 0x41)
  {
LABEL_52:
    if (v33)
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
    else
      v35 = 0;
    v51 = (uint64_t *)(v35 & ~v34);
    goto LABEL_57;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v51, &v57);
  v33 = v52;
  if (v52 <= 0x40)
  {
    v34 = (unint64_t)v51;
    goto LABEL_52;
  }
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v51);
LABEL_57:
  llvm::APInt::operator++(&v51);
  v36 = v52;
  v54 = v52;
  v53 = v51;
  v52 = 0;
  if (v32)
    v37 = (const void **)&v53;
  else
    v37 = (const void **)&v59;
  if (v66 > 0x40)
    goto LABEL_65;
  if (!v32)
    v36 = v60;
  if (v36 > 0x40)
  {
LABEL_65:
    llvm::APInt::assignSlowCase((unsigned int *)&v65, v37);
  }
  else
  {
    v65 = (uint64_t)*v37;
    v66 = v36;
  }
  v38 = (const void **)&v59;
  if (v28)
    v39 = &v57;
  else
    v39 = (const void **)&v59;
  if (v64 <= 0x40)
  {
    if (v28)
      v38 = &v57;
    v40 = *((_DWORD *)v38 + 2);
    if (v40 <= 0x40)
    {
      v63 = (llvm::APInt *)*v39;
      v64 = v40;
      if (*((_DWORD *)v7 + 2) > 0x40u)
        goto LABEL_74;
LABEL_77:
      if (*(_QWORD *)v7 != *(_QWORD *)v8)
        goto LABEL_102;
LABEL_78:
      v48 = *((_DWORD *)v6 + 2);
      if (v48 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v47, (const void **)v6);
      else
        v47 = *(const void **)v6;
      llvm::APInt::operator-=((uint64_t)&v47, (_QWORD **)PaddingInfo);
      v41 = v48;
      v50 = v48;
      v42 = v47;
      v49 = (uint64_t)v47;
      v48 = 0;
      v43 = llvm::APInt::compare((llvm::APInt *)&v49, (const llvm::APInt *)&v61);
      if (v41 >= 0x41)
      {
        if (v42)
        {
          MEMORY[0x20BD002D4](v42, 0x1000C8000313F17);
          if (v48 >= 0x41)
          {
            if (v47)
              MEMORY[0x20BD002D4](v47, 0x1000C8000313F17);
          }
        }
      }
      if (v43 < 0)
      {
        llvm::APInt::srem((const void **)PaddingInfo, (const llvm::APInt *)&v61, (uint64_t)&v49);
        llvm::APInt::srem((const void **)v6, (const llvm::APInt *)&v61, (uint64_t)&v45);
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v49, (const llvm::APInt *)&v45) <= 0)
        {
          if (v66 > 0x40 || v50 > 0x40)
          {
            llvm::APInt::assignSlowCase((unsigned int *)&v65, (const void **)&v49);
          }
          else
          {
            v65 = v49;
            v66 = v50;
          }
          if (v64 > 0x40 || v46 > 0x40)
          {
            llvm::APInt::assignSlowCase((unsigned int *)&v63, (const void **)&v45);
          }
          else
          {
            v63 = v45;
            v64 = v46;
          }
        }
        if (v46 >= 0x41 && v45)
          MEMORY[0x20BD002D4](v45, 0x1000C8000313F17);
        if (v50 >= 0x41 && v49)
          MEMORY[0x20BD002D4](v49, 0x1000C8000313F17);
      }
      goto LABEL_102;
    }
  }
  llvm::APInt::assignSlowCase((unsigned int *)&v63, v39);
  if (*((_DWORD *)v7 + 2) <= 0x40u)
    goto LABEL_77;
LABEL_74:
  if (llvm::APInt::equalSlowCase((const void **)v7, (const void **)v8))
    goto LABEL_78;
LABEL_102:
  if (v54 >= 0x41 && v53)
    MEMORY[0x20BD002D4](v53, 0x1000C8000313F17);
  if (v58 >= 0x41 && v57)
    MEMORY[0x20BD002D4](v57, 0x1000C8000313F17);
  if (v60 >= 0x41 && v59)
    MEMORY[0x20BD002D4](v59, 0x1000C8000313F17);
  if (v62 >= 0x41 && v61)
    MEMORY[0x20BD002D4](v61, 0x1000C8000313F17);
LABEL_114:
  result = mlir::ConstantIntRanges::fromSigned((mlir::ConstantIntRanges *)&v65, (const llvm::APInt *)&v63, a2);
  if (v64 >= 0x41)
  {
    result = v63;
    if (v63)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v63, 0x1000C8000313F17);
  }
  if (v66 >= 0x41)
  {
    result = (llvm::APInt *)v65;
    if (v65)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v65, 0x1000C8000313F17);
  }
  return result;
}

uint64_t **llvm::APInt::abs@<X0>(uint64_t **this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v3 = *((_DWORD *)this + 2);
  v4 = v3 - 1;
  if (v3 <= 0x40)
  {
    v5 = *this;
    if ((((unint64_t)*this >> v4) & 1) == 0)
    {
      *((_DWORD *)a2 + 2) = v3;
      *(_QWORD *)a2 = v5;
      return this;
    }
    v8 = *((_DWORD *)this + 2);
    v7 = (unint64_t)v5;
LABEL_6:
    if (v3)
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    else
      v6 = 0;
    v7 = v6 & ~v7;
    goto LABEL_13;
  }
  if ((((unint64_t)(*this)[v4 >> 6] >> v4) & 1) == 0)
  {
    *((_DWORD *)a2 + 2) = v3;
    return (uint64_t **)llvm::APInt::initSlowCase(a2, (const void **)this);
  }
  v8 = *((_DWORD *)this + 2);
  llvm::APInt::initSlowCase((llvm::APInt *)&v7, (const void **)this);
  v3 = v8;
  if (v8 <= 0x40)
    goto LABEL_6;
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v7);
LABEL_13:
  this = llvm::APInt::operator++((uint64_t **)&v7);
  *((_DWORD *)a2 + 2) = v8;
  *(_QWORD *)a2 = v7;
  return this;
}

llvm::APInt *mlir::intrange::inferRemU@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  ZinBondedInfo *v4;
  llvm::APInt *v5;
  llvm::APInt *v6;
  const llvm::APInt *v7;
  uint64_t AneIndex;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t *v13;
  const void **v14;
  const void **v15;
  uint64_t v16;
  const void **v17;
  unsigned int v18;
  const void *v19;
  int v20;
  llvm::APInt *result;
  unint64_t *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  llvm::APInt *v26;
  unsigned int v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unsigned int v31;
  llvm::APInt *v32;
  unsigned int v33;

  v4 = (ZinBondedInfo *)(a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)(a1 + 64));
  v6 = v5;
  AneIndex = ZinBondedInfo::GetAneIndex(v4);
  v9 = *((_DWORD *)v6 + 2);
  v33 = v9;
  if (v9 <= 0x40)
  {
    v32 = 0;
    v31 = v9;
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (!v9)
      v10 = 0;
    v30 = (unint64_t *)v10;
LABEL_6:
    if (!*(_QWORD *)v6)
      goto LABEL_46;
    goto LABEL_9;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v32, 0, 0);
  v31 = v9;
  llvm::APInt::initSlowCase((llvm::APInt *)&v30, -1, 1);
  v11 = *((_DWORD *)v6 + 2);
  if (v11 <= 0x40)
    goto LABEL_6;
  if (llvm::APInt::countLeadingZerosSlowCase(v6) == v11)
    goto LABEL_46;
LABEL_9:
  v29 = *(_DWORD *)(AneIndex + 8);
  if (v29 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v28, (const void **)AneIndex);
  else
    v28 = *(unint64_t **)AneIndex;
  llvm::APInt::operator-=(&v28, 1uLL);
  v12 = v29;
  v13 = v28;
  v29 = 0;
  if (v31 <= 0x40 || !v30)
  {
    v30 = v28;
    v31 = v12;
    if (*((_DWORD *)v6 + 2) <= 0x40u)
      goto LABEL_18;
LABEL_21:
    if (!llvm::APInt::equalSlowCase((const void **)v6, (const void **)AneIndex))
      goto LABEL_46;
    goto LABEL_22;
  }
  MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
  v30 = v13;
  v31 = v12;
  if (v29 >= 0x41 && v28)
    MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
  if (*((_DWORD *)v6 + 2) > 0x40u)
    goto LABEL_21;
LABEL_18:
  if (*(_QWORD *)v6 != *(_QWORD *)AneIndex)
    goto LABEL_46;
LABEL_22:
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  v15 = v14;
  v16 = ZinBondedInfo::GetAneIndex((ZinBondedInfo *)a1);
  v17 = (const void **)v16;
  v25 = *(_DWORD *)(v16 + 8);
  if (v25 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, (const void **)v16);
  else
    v24 = *(void **)v16;
  llvm::APInt::operator-=((uint64_t)&v24, (_QWORD **)v15);
  v18 = v25;
  v27 = v25;
  v19 = v24;
  v26 = (llvm::APInt *)v24;
  v25 = 0;
  v20 = llvm::APInt::compare((llvm::APInt *)&v26, (const llvm::APInt *)AneIndex);
  if (v18 >= 0x41)
  {
    if (v19)
    {
      MEMORY[0x20BD002D4](v19, 0x1000C8000313F17);
      if (v25 >= 0x41)
      {
        if (v24)
          MEMORY[0x20BD002D4](v24, 0x1000C8000313F17);
      }
    }
  }
  if (v20 < 0)
  {
    llvm::APInt::urem(v15, (const llvm::APInt *)AneIndex, (uint64_t)&v26);
    llvm::APInt::urem(v17, (const llvm::APInt *)AneIndex, (uint64_t)&v22);
    if ((int)llvm::APInt::compare((llvm::APInt *)&v26, (const llvm::APInt *)&v22) <= 0)
    {
      if (v33 > 0x40 || v27 > 0x40)
      {
        llvm::APInt::assignSlowCase((unsigned int *)&v32, (const void **)&v26);
      }
      else
      {
        v32 = v26;
        v33 = v27;
      }
      if (v31 > 0x40 || v23 > 0x40)
      {
        llvm::APInt::assignSlowCase((unsigned int *)&v30, (const void **)&v22);
      }
      else
      {
        v30 = v22;
        v31 = v23;
      }
    }
    if (v23 >= 0x41 && v22)
      MEMORY[0x20BD002D4](v22, 0x1000C8000313F17);
    if (v27 >= 0x41 && v26)
      MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
  }
LABEL_46:
  result = mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v32, (const llvm::APInt *)&v30, v7, a2);
  if (v31 >= 0x41)
  {
    result = (llvm::APInt *)v30;
    if (v30)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
  }
  if (v33 >= 0x41)
  {
    result = v32;
    if (v32)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v32, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferMaxS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinSpatialSplitTransform *v4;
  llvm::APInt *PaddingInfo;
  const llvm::APInt *v6;
  ZinSpatialSplitTransform *v7;
  mlir::ConstantIntRanges *v8;
  llvm::APInt *v9;
  const llvm::APInt *v10;
  mlir::ConstantIntRanges *v11;
  const llvm::APInt *v12;

  v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  PaddingInfo = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v6 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(v4);
  if ((int)llvm::APInt::compareSigned(PaddingInfo, v6) <= 0)
    v7 = v4;
  else
    v7 = a1;
  v8 = (mlir::ConstantIntRanges *)ZinSpatialSplitTransform::GetPaddingInfo(v7);
  v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v4);
  if ((int)llvm::APInt::compareSigned(v9, v10) <= 0)
    v11 = v4;
  else
    v11 = a1;
  v12 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v11);
  return mlir::ConstantIntRanges::fromSigned(v8, v12, a2);
}

llvm::APInt *mlir::intrange::inferMaxU@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinIrHalH13g *v4;
  llvm::APInt *v5;
  llvm::APInt *v6;
  const llvm::APInt *v7;
  ZinIrHalH13g *v8;
  mlir::ConstantIntRanges *v9;
  mlir::ConstantIntRanges *v10;
  llvm::APInt *AneIndex;
  const llvm::APInt *v12;
  ZinBondedInfo *v13;
  const llvm::APInt *v14;
  const llvm::APInt *v15;

  v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v6 = v5;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  if ((int)llvm::APInt::compare(v6, v7) <= 0)
    v8 = v4;
  else
    v8 = a1;
  ZinIrHalH13g::~ZinIrHalH13g(v8);
  v10 = v9;
  AneIndex = (llvm::APInt *)ZinBondedInfo::GetAneIndex(a1);
  v12 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  if ((int)llvm::APInt::compare(AneIndex, v12) <= 0)
    v13 = v4;
  else
    v13 = a1;
  v14 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v13);
  return mlir::ConstantIntRanges::fromUnsigned(v10, v14, v15, a2);
}

llvm::APInt *mlir::intrange::inferMinS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinSpatialSplitTransform *v4;
  llvm::APInt *PaddingInfo;
  const llvm::APInt *v6;
  ZinSpatialSplitTransform *v7;
  mlir::ConstantIntRanges *v8;
  llvm::APInt *v9;
  const llvm::APInt *v10;
  mlir::ConstantIntRanges *v11;
  const llvm::APInt *v12;

  v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  PaddingInfo = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v6 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(v4);
  if ((int)llvm::APInt::compareSigned(PaddingInfo, v6) >= 0)
    v7 = v4;
  else
    v7 = a1;
  v8 = (mlir::ConstantIntRanges *)ZinSpatialSplitTransform::GetPaddingInfo(v7);
  v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v4);
  if ((int)llvm::APInt::compareSigned(v9, v10) >= 0)
    v11 = v4;
  else
    v11 = a1;
  v12 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v11);
  return mlir::ConstantIntRanges::fromSigned(v8, v12, a2);
}

llvm::APInt *mlir::intrange::inferMinU@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinIrHalH13g *v4;
  llvm::APInt *v5;
  llvm::APInt *v6;
  const llvm::APInt *v7;
  ZinIrHalH13g *v8;
  mlir::ConstantIntRanges *v9;
  mlir::ConstantIntRanges *v10;
  llvm::APInt *AneIndex;
  const llvm::APInt *v12;
  ZinBondedInfo *v13;
  const llvm::APInt *v14;
  const llvm::APInt *v15;

  v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v6 = v5;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  if ((int)llvm::APInt::compare(v6, v7) >= 0)
    v8 = v4;
  else
    v8 = a1;
  ZinIrHalH13g::~ZinIrHalH13g(v8);
  v10 = v9;
  AneIndex = (llvm::APInt *)ZinBondedInfo::GetAneIndex(a1);
  v12 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v4);
  if ((int)llvm::APInt::compare(AneIndex, v12) >= 0)
    v13 = v4;
  else
    v13 = a1;
  v14 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(v13);
  return mlir::ConstantIntRanges::fromUnsigned(v10, v14, v15, a2);
}

void *mlir::intrange::inferAnd@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  void *result;
  char v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v10, (ZinIrHalH13g *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v6, (ZinIrHalH13g *)(a1 + 64));
  v19 = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, (const void **)&v10);
    v21 = v13;
    if (v13 > 0x40)
    {
LABEL_3:
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, (const void **)&v12);
      v15 = v7;
      if (v7 > 0x40)
        goto LABEL_4;
LABEL_8:
      v14 = v6;
      v17 = v9;
      if (v9 > 0x40)
        goto LABEL_5;
LABEL_9:
      v16 = v8;
      goto LABEL_10;
    }
  }
  else
  {
    v18 = v10;
    v21 = v13;
    if (v13 > 0x40)
      goto LABEL_3;
  }
  v20 = v12;
  v15 = v7;
  if (v7 <= 0x40)
    goto LABEL_8;
LABEL_4:
  llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)&v6);
  v17 = v9;
  if (v9 <= 0x40)
    goto LABEL_9;
LABEL_5:
  llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)&v8);
LABEL_10:
  result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAnd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v5, (uint64_t)&v18, 2, (uint64_t)&v14, 2, 0);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (void *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = (void *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = (void *)MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (void *)MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v9 >= 0x41)
  {
    result = v8;
    if (v8)
      result = (void *)MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
  }
  if (v7 >= 0x41)
  {
    result = v6;
    if (v6)
      result = (void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = (void *)MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return (void *)MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

void widenBitwiseBounds(const mlir::ConstantIntRanges *a1, ZinIrHalH13g *a2)
{
  uint64_t v4;
  uint64_t AneIndex;
  unsigned int v6;
  const void **v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  const void *v19;
  unsigned int v20;

  ZinIrHalH13g::~ZinIrHalH13g(a2);
  v20 = *(_DWORD *)(v4 + 8);
  if (v20 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)v4);
  else
    v19 = *(const void **)v4;
  AneIndex = ZinBondedInfo::GetAneIndex(a2);
  v18 = *(_DWORD *)(AneIndex + 8);
  if (v18 <= 0x40)
  {
    v17 = *(_QWORD *)AneIndex;
    v6 = v20;
    v14 = v20;
    if (v20 >= 0x41)
      goto LABEL_6;
LABEL_13:
    v7 = &v19;
    v8 = v6;
    goto LABEL_14;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v17, (const void **)AneIndex);
  v6 = v20;
  v14 = v20;
  if (v20 < 0x41)
    goto LABEL_13;
LABEL_6:
  v7 = (const void **)&v13;
  llvm::APInt::initSlowCase((llvm::APInt *)&v13, &v19);
  v8 = v14;
  if (v14 <= 0x40)
  {
LABEL_14:
    v9 = (unint64_t)*v7 ^ v17;
    v13 = v9;
    v14 = 0;
    goto LABEL_15;
  }
  llvm::APInt::xorAssignSlowCase((uint64_t)&v13, (const llvm::APInt *)&v17);
  v8 = v14;
  v9 = v13;
  v16 = v14;
  v15 = v13;
  v14 = 0;
  if (v16 <= 0x40)
  {
LABEL_15:
    v10 = v8 + __clz(v9) - 64;
    goto LABEL_16;
  }
  v10 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v15);
  if (v9)
  {
    MEMORY[0x20BD002D4](v9, 0x1000C8000313F17);
    if (v14 >= 0x41)
    {
      if (v13)
        MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
    }
  }
LABEL_16:
  llvm::APInt::clearLowBits((llvm::APInt *)&v19, v6 - v10);
  v11 = v6 - v10;
  if (v6 != v10)
  {
    if (v11 > 0x40)
    {
      llvm::APInt::setBitsSlowCase(&v17, 0, v11);
    }
    else
    {
      v12 = 0xFFFFFFFFFFFFFFFFLL >> (v10 - v6);
      if (v18 > 0x40)
        *(_QWORD *)v17 |= v12;
      else
        v17 |= v12;
    }
  }
  *((_DWORD *)a1 + 2) = v20;
  *(_QWORD *)a1 = v19;
  *((_DWORD *)a1 + 6) = v18;
  *((_QWORD *)a1 + 2) = v17;
}

void *mlir::intrange::inferOr@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  void *result;
  char v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v10, (ZinIrHalH13g *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v6, (ZinIrHalH13g *)(a1 + 64));
  v19 = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, (const void **)&v10);
    v21 = v13;
    if (v13 > 0x40)
    {
LABEL_3:
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, (const void **)&v12);
      v15 = v7;
      if (v7 > 0x40)
        goto LABEL_4;
LABEL_8:
      v14 = v6;
      v17 = v9;
      if (v9 > 0x40)
        goto LABEL_5;
LABEL_9:
      v16 = v8;
      goto LABEL_10;
    }
  }
  else
  {
    v18 = v10;
    v21 = v13;
    if (v13 > 0x40)
      goto LABEL_3;
  }
  v20 = v12;
  v15 = v7;
  if (v7 <= 0x40)
    goto LABEL_8;
LABEL_4:
  llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)&v6);
  v17 = v9;
  if (v9 <= 0x40)
    goto LABEL_9;
LABEL_5:
  llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)&v8);
LABEL_10:
  result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferOr(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v5, (uint64_t)&v18, 2, (uint64_t)&v14, 2, 0);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (void *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = (void *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = (void *)MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (void *)MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v9 >= 0x41)
  {
    result = v8;
    if (v8)
      result = (void *)MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
  }
  if (v7 >= 0x41)
  {
    result = v6;
    if (v6)
      result = (void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = (void *)MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return (void *)MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

void *mlir::intrange::inferXor@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  void *result;
  char v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v10, (ZinIrHalH13g *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v6, (ZinIrHalH13g *)(a1 + 64));
  v19 = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, (const void **)&v10);
    v21 = v13;
    if (v13 > 0x40)
    {
LABEL_3:
      llvm::APInt::initSlowCase((llvm::APInt *)&v20, (const void **)&v12);
      v15 = v7;
      if (v7 > 0x40)
        goto LABEL_4;
LABEL_8:
      v14 = v6;
      v17 = v9;
      if (v9 > 0x40)
        goto LABEL_5;
LABEL_9:
      v16 = v8;
      goto LABEL_10;
    }
  }
  else
  {
    v18 = v10;
    v21 = v13;
    if (v13 > 0x40)
      goto LABEL_3;
  }
  v20 = v12;
  v15 = v7;
  if (v7 <= 0x40)
    goto LABEL_8;
LABEL_4:
  llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)&v6);
  v17 = v9;
  if (v9 <= 0x40)
    goto LABEL_9;
LABEL_5:
  llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)&v8);
LABEL_10:
  result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferXor(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v5, (uint64_t)&v18, 2, (uint64_t)&v14, 2, 0);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (void *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = (void *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = (void *)MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (void *)MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v9 >= 0x41)
  {
    result = v8;
    if (v8)
      result = (void *)MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
  }
  if (v7 >= 0x41)
  {
    result = v6;
    if (v6)
      result = (void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = (void *)MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return (void *)MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  return result;
}

llvm::APInt *mlir::intrange::inferShl@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinIrHalH13g *v4;
  uint64_t v5;
  uint64_t AneIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t PaddingInfo;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::APInt *result;
  llvm::APInt *v14;
  unsigned int v15;
  llvm::APInt *v16;
  unsigned int v17;
  llvm::APInt *v18;
  unsigned int v19;
  llvm::APInt *v20;
  unsigned int v21;
  const void *v22;
  unsigned int v23;
  const void *v24;
  unsigned int v25;
  llvm::APInt *v26;
  unsigned int v27;
  llvm::APInt *v28;
  unsigned int v29;
  llvm::APInt *v30;
  unsigned int v31;
  llvm::APInt *v32;
  unsigned int v33;
  const void *v34;
  unsigned int v35;
  const void *v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v27 = *(_DWORD *)(v5 + 8);
  if (v27 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, (const void **)v5);
  else
    v26 = *(llvm::APInt **)v5;
  AneIndex = ZinBondedInfo::GetAneIndex(a1);
  v29 = *(_DWORD *)(AneIndex + 8);
  if (v29 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v28, (const void **)AneIndex);
  else
    v28 = *(llvm::APInt **)AneIndex;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  v35 = *(_DWORD *)(v7 + 8);
  if (v35 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)v7);
  else
    v34 = *(const void **)v7;
  v8 = ZinBondedInfo::GetAneIndex(v4);
  v37 = *(_DWORD *)(v8 + 8);
  if (v37 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, (const void **)v8);
  else
    v36 = *(const void **)v8;
  minMaxBy(&v14, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v26, 2, (uint64_t)&v34, 2, 0);
  if (v37 >= 0x41 && v36)
    MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
  if (v35 >= 0x41 && v34)
    MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
  if (v29 >= 0x41 && v28)
    MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
  if (v27 >= 0x41 && v26)
    MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v35 = *(_DWORD *)(PaddingInfo + 8);
  if (v35 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, (const void **)PaddingInfo);
  else
    v34 = *(const void **)PaddingInfo;
  v10 = mlir::ConstantIntRanges::smax(a1);
  v37 = *(_DWORD *)(v10 + 8);
  if (v37 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, (const void **)v10);
  else
    v36 = *(const void **)v10;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  v23 = *(_DWORD *)(v11 + 8);
  if (v23 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, (const void **)v11);
  else
    v22 = *(const void **)v11;
  v12 = ZinBondedInfo::GetAneIndex(v4);
  v25 = *(_DWORD *)(v12 + 8);
  if (v25 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, (const void **)v12);
  else
    v24 = *(const void **)v12;
  minMaxBy(&v26, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v34, 2, (uint64_t)&v22, 2, (llvm::APInt *)1);
  if (v25 >= 0x41 && v24)
    MEMORY[0x20BD002D4](v24, 0x1000C8000313F17);
  if (v23 >= 0x41 && v22)
    MEMORY[0x20BD002D4](v22, 0x1000C8000313F17);
  if (v37 >= 0x41 && v36)
    MEMORY[0x20BD002D4](v36, 0x1000C8000313F17);
  if (v35 >= 0x41 && v34)
    MEMORY[0x20BD002D4](v34, 0x1000C8000313F17);
  result = mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v14, (const mlir::ConstantIntRanges *)&v26, a2);
  if (v33 >= 0x41)
  {
    result = v32;
    if (v32)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v32, 0x1000C8000313F17);
  }
  if (v31 >= 0x41)
  {
    result = v30;
    if (v30)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v30, 0x1000C8000313F17);
  }
  if (v29 >= 0x41)
  {
    result = v28;
    if (v28)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v28, 0x1000C8000313F17);
  }
  if (v27 >= 0x41)
  {
    result = v26;
    if (v26)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v26, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (llvm::APInt *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      return (llvm::APInt *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

void *mlir::intrange::inferShrS@<X0>(ZinSpatialSplitTransform *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinIrHalH13g *v4;
  uint64_t PaddingInfo;
  uint64_t v6;
  uint64_t v7;
  uint64_t AneIndex;
  void *result;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (ZinSpatialSplitTransform *)((char *)a1 + 64);
  PaddingInfo = ZinSpatialSplitTransform::GetPaddingInfo(a1);
  v15 = *(_DWORD *)(PaddingInfo + 8);
  if (v15 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)PaddingInfo);
  else
    v14 = *(void **)PaddingInfo;
  v6 = mlir::ConstantIntRanges::smax(a1);
  v17 = *(_DWORD *)(v6 + 8);
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)v6);
  else
    v16 = *(void **)v6;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  v11 = *(_DWORD *)(v7 + 8);
  if (v11 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, (const void **)v7);
  else
    v10 = *(void **)v7;
  AneIndex = ZinBondedInfo::GetAneIndex(v4);
  v13 = *(_DWORD *)(AneIndex + 8);
  if (v13 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, (const void **)AneIndex);
  else
    v12 = *(void **)AneIndex;
  result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v14, 2, (uint64_t)&v10, 2, (llvm::APInt *)1);
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = (void *)MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      result = (void *)MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (void *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      return (void *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

void *mlir::intrange::inferShrU@<X0>(ZinIrHalH13g *a1@<X0>, _DWORD *a2@<X8>)
{
  ZinIrHalH13g *v4;
  uint64_t v5;
  uint64_t AneIndex;
  uint64_t v7;
  uint64_t v8;
  void *result;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (ZinIrHalH13g *)((char *)a1 + 64);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v15 = *(_DWORD *)(v5 + 8);
  if (v15 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, (const void **)v5);
  else
    v14 = *(void **)v5;
  AneIndex = ZinBondedInfo::GetAneIndex(a1);
  v17 = *(_DWORD *)(AneIndex + 8);
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)AneIndex);
  else
    v16 = *(void **)AneIndex;
  ZinIrHalH13g::~ZinIrHalH13g(v4);
  v11 = *(_DWORD *)(v7 + 8);
  if (v11 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, (const void **)v7);
  else
    v10 = *(void **)v7;
  v8 = ZinBondedInfo::GetAneIndex(v4);
  v13 = *(_DWORD *)(v8 + 8);
  if (v13 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, (const void **)v8);
  else
    v12 = *(void **)v8;
  result = minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v14, (uint64_t)&v14, 2, (uint64_t)&v10, 2, 0);
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = (void *)MEMORY[0x20BD002D4](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      result = (void *)MEMORY[0x20BD002D4](v10, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = (void *)MEMORY[0x20BD002D4](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      return (void *)MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
  }
  return result;
}

uint64_t mlir::intrange::evaluatePred(uint64_t a1, mlir::ConstantIntRanges *a2, ZinSpatialSplitTransform *a3)
{
  if (isStaticallyTrue(a1, a2, a3))
    return 257;
  else
    return isStaticallyTrue(qword_207AC79B0[a1], a2, a3) << 8;
}

BOOL isStaticallyTrue(uint64_t a1, mlir::ConstantIntRanges *this, ZinSpatialSplitTransform *a3)
{
  int v5;
  int v6;
  BOOL v7;
  _BOOL8 v8;
  llvm::APInt *v9;
  const llvm::APInt *v10;
  _BOOL8 result;
  llvm::APInt *v12;
  const llvm::APInt *v13;
  int v14;
  llvm::APInt *v15;
  const llvm::APInt *v16;
  int v17;
  llvm::APInt *v18;
  const llvm::APInt *v19;
  llvm::APInt *v20;
  llvm::APInt *v21;
  const llvm::APInt *v22;
  int v23;
  llvm::APInt *v24;
  const llvm::APInt *PaddingInfo;
  llvm::APInt *v26;
  const llvm::APInt *v27;
  _BOOL4 v28;
  llvm::APInt *v29;
  const llvm::APInt *v30;
  llvm::APInt *v31;
  const llvm::APInt *v32;
  llvm::APInt *v33;
  llvm::APInt *v34;
  const llvm::APInt *v35;
  llvm::APInt *AneIndex;
  const llvm::APInt *v37;
  llvm::APInt *v38;
  llvm::APInt *v39;
  const llvm::APInt *v40;
  _BOOL4 v41;
  const void *v42;
  unsigned int v43;
  unsigned __int8 v44;
  const void *v45;
  unsigned int v46;
  unsigned __int8 v47;

  switch(a1)
  {
    case 0:
      mlir::ConstantIntRanges::getConstantValue((uint64_t)this, (uint64_t)&v45);
      mlir::ConstantIntRanges::getConstantValue((uint64_t)a3, (uint64_t)&v42);
      v5 = v47;
      v6 = v44;
      if (v47)
        v7 = v44 == 0;
      else
        v7 = 1;
      if (v7)
      {
        v8 = 0;
      }
      else if (v46 > 0x40)
      {
        v8 = llvm::APInt::equalSlowCase(&v45, &v42);
      }
      else
      {
        v8 = v45 == v42;
      }
      if (v6 && v43 >= 0x41 && v42)
      {
        MEMORY[0x20BD002D4](v42, 0x1000C8000313F17);
        v5 = v47;
      }
      if (!v5 || v46 < 0x41 || !v45)
        return v8;
      MEMORY[0x20BD002D4](v45, 0x1000C8000313F17);
      return v8;
    case 1:
      v24 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      PaddingInfo = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
      if ((llvm::APInt::compareSigned(v24, PaddingInfo) & 0x80000000) != 0)
      {
        v28 = 1;
      }
      else
      {
        v26 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
        v27 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
        v28 = (int)llvm::APInt::compareSigned(v26, v27) > 0;
      }
      AneIndex = (llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
      ZinIrHalH13g::~ZinIrHalH13g(a3);
      if ((llvm::APInt::compare(AneIndex, v37) & 0x80000000) != 0)
      {
        v41 = 1;
      }
      else
      {
        ZinIrHalH13g::~ZinIrHalH13g(this);
        v39 = v38;
        v40 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a3);
        v41 = (int)llvm::APInt::compare(v39, v40) > 0;
      }
      return v28 & v41;
    case 2:
      v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      v10 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
      return llvm::APInt::compareSigned(v9, v10) >> 31;
    case 3:
      v12 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      v13 = (const llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(a3);
      v14 = llvm::APInt::compareSigned(v12, v13);
      return v14 < 1;
    case 4:
      v15 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
      v16 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
      v17 = llvm::APInt::compareSigned(v15, v16);
      goto LABEL_22;
    case 5:
      v29 = (llvm::APInt *)ZinSpatialSplitTransform::GetPaddingInfo(this);
      v30 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
      v23 = llvm::APInt::compareSigned(v29, v30);
      goto LABEL_19;
    case 6:
      v31 = (llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
      ZinIrHalH13g::~ZinIrHalH13g(a3);
      return llvm::APInt::compare(v31, v32) >> 31;
    case 7:
      v18 = (llvm::APInt *)ZinBondedInfo::GetAneIndex(this);
      ZinIrHalH13g::~ZinIrHalH13g(a3);
      v14 = llvm::APInt::compare(v18, v19);
      return v14 < 1;
    case 8:
      ZinIrHalH13g::~ZinIrHalH13g(this);
      v34 = v33;
      v35 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a3);
      v17 = llvm::APInt::compare(v34, v35);
LABEL_22:
      result = v17 > 0;
      break;
    case 9:
      ZinIrHalH13g::~ZinIrHalH13g(this);
      v21 = v20;
      v22 = (const llvm::APInt *)ZinBondedInfo::GetAneIndex(a3);
      v23 = llvm::APInt::compare(v21, v22);
LABEL_19:
      result = v23 >= 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivURange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>(uint64_t *a1, const void **this, llvm::APInt *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  v5 = *a1;
  llvm::APInt::udiv(this, a3, (uint64_t)&v7);
  result = (*(uint64_t (**)(_QWORD, const void **, llvm::APInt *, uint64_t *))v5)(*(_QWORD *)(v5 + 8), this, a3, &v7);
  if (v8 >= 0x41)
  {
    result = v7;
    if (v7)
      return MEMORY[0x20BD002D4](v7, 0x1000C8000313F17);
  }
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivSRange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X0>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  v10 = 0;
  llvm::APInt::sdiv_ov(this, a2, &v10, (uint64_t)&v8);
  if (v10)
  {
    *a4 = 0;
    a4[16] = 0;
    if (v9 < 0x41)
      return;
  }
  else
  {
    (**(void (***)(_QWORD, const void **, llvm::APInt *, uint64_t *))a3)(*(_QWORD *)(*(_QWORD *)a3 + 8), this, a2, &v8);
    if (v9 < 0x41)
      return;
  }
  if (v8)
    MEMORY[0x20BD002D4](v8, 0x1000C8000313F17);
}

void llvm::APInt::clearLowBits(llvm::APInt *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  v4 = *((unsigned int *)this + 2);
  v8 = v4;
  if (v4 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v7, 0, 0);
    v5 = v8;
    if ((_DWORD)v4 == a2)
      goto LABEL_8;
  }
  else
  {
    v7 = 0;
    v5 = v4;
    if ((_DWORD)v4 == a2)
    {
LABEL_8:
      if (*((_DWORD *)this + 2) <= 0x40u)
        goto LABEL_9;
LABEL_12:
      llvm::APInt::andAssignSlowCase((uint64_t)this, (const llvm::APInt *)&v7);
      if (v8 < 0x41)
        return;
      goto LABEL_13;
    }
  }
  v6 = v5 - (v4 - a2);
  if (v5 <= 0x40 && v6 <= 0x3F)
  {
    v7 |= 0xFFFFFFFFFFFFFFFFLL >> (a2 - v4) << v6;
    goto LABEL_8;
  }
  llvm::APInt::setBitsSlowCase(&v7, v6, v5);
  if (*((_DWORD *)this + 2) > 0x40u)
    goto LABEL_12;
LABEL_9:
  *(_QWORD *)this &= v7;
  if (v8 < 0x41)
    return;
LABEL_13:
  if (v7)
    MEMORY[0x20BD002D4](v7, 0x1000C8000313F17, v5);
}

const void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(const void **this@<X1>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  const void *result;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  BOOL v8;

  v8 = 0;
  result = llvm::APInt::uadd_ov(this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v7 < 0x41)
      return result;
  }
  else
  {
    v5 = v7;
    *(_DWORD *)(a3 + 8) = v7;
    if (v5 > 0x40)
    {
      result = llvm::APInt::initSlowCase((llvm::APInt *)a3, &v6);
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
    else
    {
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
  }
  result = v6;
  if (v6)
    return (const void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return result;
}

const void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>@<X0>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  const void *result;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  BOOL v8;

  v8 = 0;
  result = llvm::APInt::sadd_ov(this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v7 < 0x41)
      return result;
  }
  else
  {
    v5 = v7;
    *(_DWORD *)(a3 + 8) = v7;
    if (v5 > 0x40)
    {
      result = llvm::APInt::initSlowCase((llvm::APInt *)a3, &v6);
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
    else
    {
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
  }
  result = v6;
  if (v6)
    return (const void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return result;
}

const void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(const void **this@<X1>, unint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  const void *result;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  BOOL v8;

  v8 = 0;
  result = llvm::APInt::usub_ov(this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v7 < 0x41)
      return result;
  }
  else
  {
    v5 = v7;
    *(_DWORD *)(a3 + 8) = v7;
    if (v5 > 0x40)
    {
      result = llvm::APInt::initSlowCase((llvm::APInt *)a3, &v6);
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
    else
    {
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
  }
  result = v6;
  if (v6)
    return (const void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return result;
}

const void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>@<X0>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  const void *result;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  BOOL v8;

  v8 = 0;
  result = llvm::APInt::ssub_ov(this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v7 < 0x41)
      return result;
  }
  else
  {
    v5 = v7;
    *(_DWORD *)(a3 + 8) = v7;
    if (v5 > 0x40)
    {
      result = llvm::APInt::initSlowCase((llvm::APInt *)a3, &v6);
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
    else
    {
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
  }
  result = v6;
  if (v6)
    return (const void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return result;
}

const void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  const void *result;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  BOOL v8;

  v8 = 0;
  result = (const void *)llvm::APInt::umul_ov((uint64_t)this, a2, &v8, (uint64_t)&v6);
  if (v8)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v7 < 0x41)
      return result;
  }
  else
  {
    v5 = v7;
    *(_DWORD *)(a3 + 8) = v7;
    if (v5 > 0x40)
    {
      result = llvm::APInt::initSlowCase((llvm::APInt *)a3, &v6);
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
    else
    {
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 16) = 1;
      if (v7 < 0x41)
        return result;
    }
  }
  result = v6;
  if (v6)
    return (const void *)MEMORY[0x20BD002D4](v6, 0x1000C8000313F17);
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>(llvm::APInt *this@<X1>, const unint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  const void *v5;
  unsigned int v6;
  BOOL v7;

  v7 = 0;
  llvm::APInt::smul_ov(this, a2, &v7, (uint64_t)&v5);
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v6 < 0x41)
      return;
  }
  else
  {
    v4 = v6;
    *(_DWORD *)(a3 + 8) = v6;
    if (v4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, &v5);
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a3 = v5;
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
  }
  if (v5)
    MEMORY[0x20BD002D4](v5, 0x1000C8000313F17);
}

void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *((_DWORD *)a1 + 2);
  v7 = v3;
  if (v3 >= 0x41)
  {
    result = llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
    v3 = v7;
    a1 = (llvm::APInt *)&v6;
  }
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  const void *v14;
  unsigned int v15;

  llvm::APInt::urem(this, a2, (uint64_t)&v14);
  v6 = v15;
  if (v15 > 0x40)
  {
    v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v14);
    if (v14)
      MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
    if (v8 != v6)
      goto LABEL_3;
LABEL_8:
    v9 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a4 + 8) = v9;
    if (v9 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a3);
    else
      *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  if (!v14)
    goto LABEL_8;
LABEL_3:
  v13 = 0;
  v7 = *(_DWORD *)(a3 + 8);
  v12 = v7;
  if (v7 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v11, 1, 0);
  else
    v11 = v7 != 0;
  llvm::APInt::uadd_ov((const void **)a3, (uint64_t **)&v11, &v13, (uint64_t)&v14);
  if (v12 >= 0x41 && v11)
    MEMORY[0x20BD002D4](v11, 0x1000C8000313F17);
  if (v13)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v15 < 0x41)
      return;
  }
  else
  {
    v10 = v15;
    *(_DWORD *)(a4 + 8) = v15;
    if (v10 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, &v14);
      *(_BYTE *)(a4 + 16) = 1;
      if (v15 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a4 = v14;
      *(_BYTE *)(a4 + 16) = 1;
      if (v15 < 0x41)
        return;
    }
  }
  if (v14)
    MEMORY[0x20BD002D4](v14, 0x1000C8000313F17);
}

void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *((_DWORD *)a1 + 2);
  v7 = v3;
  if (v3 >= 0x41)
  {
    result = llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
    v3 = v7;
    a1 = (llvm::APInt *)&v6;
  }
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void **v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  llvm::APInt *v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL8 v20;
  unsigned int v21;
  BOOL v22;
  const void *v23;
  unsigned int v24;

  llvm::APInt::srem(this, a2, (uint64_t)&v23);
  v8 = v24;
  if (v24 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v23) == v8)
    {
      if (v23)
        MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
      goto LABEL_17;
    }
  }
  else if (!v23)
  {
LABEL_17:
    v17 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a4 + 8) = v17;
    if (v17 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a3);
    else
      *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v9 = *((_DWORD *)this + 2);
  v10 = v9 - 1;
  if (v9 >= 0x41)
    v11 = (const void **)((char *)*this + 8 * ((v9 - 1) >> 6));
  else
    v11 = this;
  v12 = (((unint64_t)*v11 >> v10) & 1) == 0;
  v13 = *((_DWORD *)a2 + 2);
  v14 = v13 - 1;
  if (v13 >= 0x41)
    v15 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v13 - 1) >> 6));
  else
    v15 = a2;
  v16 = v12 ^ (((*(_QWORD *)v15 >> v14) & 1) == 0);
  if (v8 >= 0x41 && v23)
    MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
  if ((v16 & 1) != 0)
    goto LABEL_17;
  v22 = 0;
  v18 = *(_DWORD *)(a3 + 8);
  v21 = v18;
  if (v18 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, 1, 0);
  else
    v20 = v18 != 0;
  llvm::APInt::sadd_ov((const void **)a3, (const llvm::APInt *)&v20, &v22, (uint64_t)&v23);
  if (v21 >= 0x41 && v20)
    MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  if (v22)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v24 < 0x41)
      return;
  }
  else
  {
    v19 = v24;
    *(_DWORD *)(a4 + 8) = v24;
    if (v19 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, &v23);
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a4 = v23;
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
  }
  if (v23)
    MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferFloorDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void **v11;
  _BOOL4 v12;
  unsigned int v13;
  char v14;
  llvm::APInt *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL8 v20;
  unsigned int v21;
  BOOL v22;
  const void *v23;
  unsigned int v24;

  llvm::APInt::srem(this, a2, (uint64_t)&v23);
  v8 = v24;
  if (v24 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v23) == v8)
    {
      if (v23)
        MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
      goto LABEL_19;
    }
  }
  else if (!v23)
  {
LABEL_19:
    v18 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a4 + 8) = v18;
    if (v18 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a3);
    else
      *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v9 = *((_DWORD *)this + 2);
  v10 = v9 - 1;
  if (v9 >= 0x41)
    v11 = (const void **)((char *)*this + 8 * ((v9 - 1) >> 6));
  else
    v11 = this;
  v12 = (((unint64_t)*v11 >> v10) & 1) == 0;
  v13 = *((_DWORD *)a2 + 2);
  v14 = v13 - 1;
  if (v13 >= 0x41)
    v15 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v13 - 1) >> 6));
  else
    v15 = a2;
  v16 = v12 ^ (((*(_QWORD *)v15 >> v14) & 1) == 0);
  if (v8 >= 0x41 && v23)
    MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
  if (!v16)
    goto LABEL_19;
  v22 = 0;
  v17 = *(_DWORD *)(a3 + 8);
  v21 = v17;
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, 1, 0);
  else
    v20 = v17 != 0;
  llvm::APInt::ssub_ov((const void **)a3, (const llvm::APInt *)&v20, &v22, (uint64_t)&v23);
  if (v21 >= 0x41 && v20)
    MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
  if (v22)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v24 < 0x41)
      return;
  }
  else
  {
    v19 = v24;
    *(_DWORD *)(a4 + 8) = v24;
    if (v19 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, &v23);
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a4 = v23;
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
  }
  if (v23)
    MEMORY[0x20BD002D4](v23, 0x1000C8000313F17);
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAnd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(uint64_t *a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v5 = *((_DWORD *)a1 + 2);
  v9 = v5;
  if (v5 >= 0x41)
  {
    result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
    v5 = v9;
    if (v9 > 0x40)
    {
      result = llvm::APInt::andAssignSlowCase((uint64_t)&v8, a2);
      v5 = v9;
      v7 = v8;
      goto LABEL_6;
    }
    a1 = &v8;
  }
  v7 = *(_QWORD *)a2 & *a1;
LABEL_6:
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferOr(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(uint64_t *a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v5 = *((_DWORD *)a1 + 2);
  v9 = v5;
  if (v5 >= 0x41)
  {
    result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
    v5 = v9;
    if (v9 > 0x40)
    {
      result = llvm::APInt::orAssignSlowCase((uint64_t)&v8, a2);
      v5 = v9;
      v7 = v8;
      goto LABEL_6;
    }
    a1 = &v8;
  }
  v7 = *(_QWORD *)a2 | *a1;
LABEL_6:
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferXor(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(uint64_t *a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v5 = *((_DWORD *)a1 + 2);
  v9 = v5;
  if (v5 >= 0x41)
  {
    result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
    v5 = v9;
    if (v9 > 0x40)
    {
      result = llvm::APInt::xorAssignSlowCase((uint64_t)&v8, a2);
      v5 = v9;
      v7 = v8;
      goto LABEL_6;
    }
    a1 = &v8;
  }
  v7 = *(_QWORD *)a2 ^ *a1;
LABEL_6:
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *this@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;

  v6 = *((unsigned int *)this + 2);
  v7 = this;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return;
    }
    v7 = *(llvm::APInt **)this;
  }
  if (*(_QWORD *)v7 >= v6)
    goto LABEL_7;
  v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
  else
    v8 = *(_QWORD *)a1;
  llvm::APInt::operator<<=((uint64_t)&v8, (uint64_t)this);
  *(_DWORD *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;

  v6 = *((unsigned int *)a2 + 2);
  v7 = a2;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(a2) > 0x40)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return;
    }
    v7 = *(llvm::APInt **)a2;
  }
  if (*(_QWORD *)v7 >= v6)
    goto LABEL_7;
  v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
  else
    v8 = *(_QWORD *)a1;
  llvm::APInt::ashrInPlace((unsigned int *)&v8, (unint64_t **)a2);
  *(_DWORD *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;

  v6 = *((unsigned int *)a2 + 2);
  v7 = a2;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(a2) > 0x40)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return;
    }
    v7 = *(llvm::APInt **)a2;
  }
  if (*(_QWORD *)v7 >= v6)
    goto LABEL_7;
  v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
  else
    v8 = *(_QWORD *)a1;
  llvm::APInt::lshrInPlace((llvm::APInt *)&v8, a2);
  *(_DWORD *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 16) = 1;
}

mlir::mpsx::MPSXDialect *mlir::mpsx::MPSXDialect::MPSXDialect(mlir::mpsx::MPSXDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"mpsx", 4, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id);
  *v3 = off_24C0519F0;
  mlir::Dialect::addOperations<mlir::mpsx::ANEOp,mlir::mpsx::CPUOp,mlir::mpsx::DeinterleaveOp,mlir::mpsx::FPToIntClampedOp,mlir::mpsx::FileBackedConstantOp,mlir::mpsx::GPUOp,mlir::mpsx::InterleaveOp,mlir::mpsx::ListPopBackOp,mlir::mpsx::ListPushBackOp,mlir::mpsx::MakeListOp,mlir::mpsx::QuantizedGatherOp,mlir::mpsx::QuantizedMatMulOp,mlir::mpsx::RMSNormOp,mlir::mpsx::RegionReturnOp,mlir::mpsx::ReturnStitchedOp,mlir::mpsx::ScaledDotProductAttentionOp,mlir::mpsx::SparseDenseMatMulOp,mlir::mpsx::StitchedOp,mlir::mpsx::VarHandleOp>((uint64_t)v3);
  v4 = (_QWORD *)operator new();
  v5 = mlir::TypeID::get<mlir::DialectFoldInterface>();
  v4[1] = this;
  v4[2] = v5;
  *v4 = &off_24C051A70;
  v8 = v4;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  mlir::Dialect::addType<mlir::mpsx::ListType>((uint64_t)this);
  return this;
}

void mlir::mpsx::MPSXDialect::~MPSXDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_207670F24()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::Dialect::addOperations<mlir::mpsx::ANEOp,mlir::mpsx::CPUOp,mlir::mpsx::DeinterleaveOp,mlir::mpsx::FPToIntClampedOp,mlir::mpsx::FileBackedConstantOp,mlir::mpsx::GPUOp,mlir::mpsx::InterleaveOp,mlir::mpsx::ListPopBackOp,mlir::mpsx::ListPushBackOp,mlir::mpsx::MakeListOp,mlir::mpsx::QuantizedGatherOp,mlir::mpsx::QuantizedMatMulOp,mlir::mpsx::RMSNormOp,mlir::mpsx::RegionReturnOp,mlir::mpsx::ReturnStitchedOp,mlir::mpsx::ScaledDotProductAttentionOp,mlir::mpsx::SparseDenseMatMulOp,mlir::mpsx::StitchedOp,mlir::mpsx::VarHandleOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  mlir::RegisteredOperationName::insert<mlir::mpsx::ANEOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::CPUOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::DeinterleaveOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::FPToIntClampedOp>(a1);
  v2 = (_QWORD *)operator new();
  v5 = mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v5, (uint64_t)&mlir::mpsx::FileBackedConstantOp::getAttributeNames(void)::attrNames, 3);
  v3 = (uint64_t)v5;
  v5 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::mpsx::GPUOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::InterleaveOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::ListPopBackOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::ListPushBackOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::MakeListOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::QuantizedGatherOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::QuantizedMatMulOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::RMSNormOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::RegionReturnOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::ReturnStitchedOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::ScaledDotProductAttentionOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::SparseDenseMatMulOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::StitchedOp>(a1);
  return mlir::RegisteredOperationName::insert<mlir::mpsx::VarHandleOp>(a1);
}

uint64_t *mlir::mpsx::MPSXDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  _QWORD *v8;
  _QWORD *v9[2];
  uint64_t v10;

  v10 = a4;
  result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3);
  v9[0] = result;
  v9[1] = v8;
  if (result)
    return (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(a2, a5, &v10, v9);
  return result;
}

uint64_t *mlir::mpsx::QuantizedMatMulOp::getInputDequantizedType(mlir::Operation **this)
{
  mlir::Operation *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Value;
  uint64_t v15[2];
  mlir::Operation *v16;
  __int128 v17;
  char v18;

  v16 = *this;
  v1 = v16;
  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 9)
                                         + 32
                                         * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v16, 0)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v15[0] = (uint64_t)v2;
  v15[1] = v12;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v2) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    *(_QWORD *)&v17 = mlir::mpsx::QuantizedMatMulOp::getOutputTypeAttr(&v16);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
    LOBYTE(v17) = 0;
    v18 = 0;
    return (uint64_t *)mlir::ShapedType::cloneWith(v15, &v17, Value);
  }
  return v2;
}

_QWORD *mlir::mpsx::QuantizedMatMulOp::getWeightsDequantizedType(mlir::Operation **this)
{
  mlir::Operation *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *Shape;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t Value;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  size_t v55;
  int v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t OperandRange;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD *v73;
  uint64_t v74;
  mlir::Operation *v75;
  uint64_t WeightsQuantParamsAxisAttr;
  __int128 v77;
  _BYTE v78[40];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v75 = *this;
  v1 = v75;
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 9)
                                        + 32
                                        * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v75, 4)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v73 = v2;
  v74 = v12;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v2) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    *(_QWORD *)&v77 = v1;
    ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v77, 8);
    if ((*((_BYTE *)v1 + 46) & 0x80) != 0)
      v14 = *((_QWORD *)v1 + 9);
    else
      v14 = 0;
    if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
      && *(_QWORD *)(v14 + 32 * ODSOperandIndexAndLength + 24))
    {
      v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 9)
                                              + 32
                                              * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v75, 8)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v15)
        goto LABEL_25;
      v16 = *v15;
      v17 = mlir::TypeID::get<mlir::ShapedType>();
      v18 = *(unsigned int *)(v16 + 16);
      if (!(_DWORD)v18)
        goto LABEL_25;
      v19 = *(_QWORD **)(v16 + 8);
      v20 = &v19[2 * v18];
      do
      {
        v21 = v18 >> 1;
        v22 = &v19[2 * (v18 >> 1)];
        v24 = *v22;
        v23 = v22 + 2;
        v18 += ~(v18 >> 1);
        if (v24 < v17)
          v19 = v23;
        else
          v18 = v21;
      }
      while (v18);
      if (v19 != v20 && *v19 == v17)
        v25 = v19[1];
      else
LABEL_25:
        v25 = 0;
      v72[0] = v15;
      v72[1] = v25;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v72))
      {
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v72);
        if (v27)
        {
          v28 = 8 * v27;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v28 -= 8;
            if (!v28)
              goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73))
          {
            v29 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v73);
            if (!v30)
            {
LABEL_36:
              WeightsQuantParamsAxisAttr = mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v75);
              if (WeightsQuantParamsAxisAttr)
              {
                mlir::IntegerAttr::getValue(&WeightsQuantParamsAxisAttr, (llvm::APInt *)&v77);
                if (DWORD2(v77) > 0x40)
                {
                  LODWORD(v32) = *(_DWORD *)v77;
                  MEMORY[0x20BD002D4]();
                }
                else
                {
                  v32 = (uint64_t)((_QWORD)v77 << -(uint64_t)DWORD2(v77)) >> -(uint64_t)DWORD2(v77);
                }
                v48 = v32 | 0x100000000;
              }
              else
              {
                v48 = 0;
              }
              mlir::ShapedType::getShape((mlir::ShapedType *)v72);
              if (v49 != 1 && (v48 & 0x100000000) != 0)
              {
                v50 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v72) + 8 * (v49 - 1));
                if (v50 >= 2)
                {
                  if ((int)v48 <= 0)
                  {
                    mlir::ShapedType::getShape((mlir::ShapedType *)&v73);
                    LODWORD(v48) = v51 + v48;
                  }
                  v53 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v73);
                  v54 = v52;
                  *(_QWORD *)&v77 = v78;
                  *((_QWORD *)&v77 + 1) = 0x500000000;
                  v55 = 8 * v52;
                  if ((unint64_t)(8 * v52) < 0x29)
                  {
                    v56 = 0;
                    v57 = v78;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v78, (8 * v52) >> 3, 8);
                    v56 = DWORD2(v77);
                    v57 = (_BYTE *)v77;
                  }
                  if (v54)
                  {
                    memcpy(&v57[8 * v56], v53, v55);
                    v56 = DWORD2(v77);
                    v57 = (_BYTE *)v77;
                  }
                  v58 = v56 + (v55 >> 3);
                  DWORD2(v77) = v58;
                  *(_QWORD *)&v57[8 * (int)v48] *= v50;
                  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
                  v60 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v57, v58, OperandRange, 0);
                  v61 = (uint64_t)v60;
                  if (!v60)
                    goto LABEL_77;
                  v62 = *v60;
                  v63 = mlir::TypeID::get<mlir::ShapedType>();
                  v64 = *(unsigned int *)(v62 + 16);
                  if (!(_DWORD)v64)
                    goto LABEL_77;
                  v65 = *(_QWORD **)(v62 + 8);
                  v66 = &v65[2 * v64];
                  do
                  {
                    v67 = v64 >> 1;
                    v68 = &v65[2 * (v64 >> 1)];
                    v70 = *v68;
                    v69 = v68 + 2;
                    v64 += ~(v64 >> 1);
                    if (v70 < v63)
                      v65 = v69;
                    else
                      v64 = v67;
                  }
                  while (v64);
                  if (v65 != v66 && *v65 == v63)
                    v71 = v65[1];
                  else
LABEL_77:
                    v71 = 0;
                  v73 = (_QWORD *)v61;
                  v74 = v71;
                  if ((_BYTE *)v77 != v78)
                    free((void *)v77);
                }
              }
              goto LABEL_50;
            }
            v31 = 8 * v30;
            while (*v29 != 0x8000000000000000)
            {
              ++v29;
              v31 -= 8;
              if (!v31)
                goto LABEL_36;
            }
          }
        }
      }
      v33 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
      v34 = (uint64_t *)mlir::UnrankedTensorType::get(v33);
      v35 = (uint64_t)v34;
      if (!v34)
        goto LABEL_48;
      v36 = *v34;
      v37 = mlir::TypeID::get<mlir::ShapedType>();
      v38 = *(unsigned int *)(v36 + 16);
      if (!(_DWORD)v38)
        goto LABEL_48;
      v39 = *(_QWORD **)(v36 + 8);
      v40 = &v39[2 * v38];
      do
      {
        v41 = v38 >> 1;
        v42 = &v39[2 * (v38 >> 1)];
        v44 = *v42;
        v43 = v42 + 2;
        v38 += ~(v38 >> 1);
        if (v44 < v37)
          v39 = v43;
        else
          v38 = v41;
      }
      while (v38);
      if (v39 != v40 && *v39 == v37)
        v45 = v39[1];
      else
LABEL_48:
        v45 = 0;
      v73 = (_QWORD *)v35;
      v74 = v45;
    }
LABEL_50:
    *(_QWORD *)&v77 = mlir::mpsx::QuantizedMatMulOp::getOutputTypeAttr(&v75);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v77);
    LOBYTE(v77) = 0;
    v78[0] = 0;
    return (_QWORD *)mlir::ShapedType::cloneWith((uint64_t *)&v73, &v77, Value);
  }
  return v2;
}

BOOL mlir::mpsx::QuantizedMatMulOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t *InputDequantizedType;
  uint64_t v77;
  _QWORD *WeightsDequantizedType;
  uint64_t v79;
  uint64_t *Shape;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _BOOL4 Value;
  uint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t **v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  char v99;
  unsigned int v101;
  void *v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  void *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t *v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  const void **v178[4];
  __int16 v179;
  _QWORD v180[2];
  _QWORD v181[2];
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t TransposeLhsAttr;
  _DWORD v186[4];
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  _QWORD v190[20];

  v190[19] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v183 = v2;
  TransposeLhsAttr = (uint64_t)v2;
  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 1);
  if ((*((_BYTE *)v2 + 46) & 0x80) != 0)
    v4 = v2[9];
  else
    v4 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength
    || !*(_QWORD *)(v4 + 32 * ODSOperandIndexAndLength + 24))
  {
    v12 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 1);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v13 = v183[9];
    else
      v13 = 0;
    if (HIDWORD(v12) + (_DWORD)v12 != (unint64_t)v12
      && *(_QWORD *)(v13 + 32 * v12 + 24)
      || ((v14 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 2),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v15 = 0)
        : (v15 = v183[9]),
          HIDWORD(v14) + (_DWORD)v14 != (unint64_t)v14
       && *(_QWORD *)(v15 + 32 * v14 + 24)))
    {
      v11 = "no input quantization parameters must be set when input isn't quantized";
      goto LABEL_155;
    }
    v16 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 0);
    v17 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9] + 32 * v16 + 24)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF8))
                   + 136);
    if (v17 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v11 = "unquantized input must be float type";
      goto LABEL_155;
    }
  }
  else
  {
    TransposeLhsAttr = (uint64_t)v2;
    mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 1);
    v5 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 1);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v6 = v183[9];
    else
      v6 = 0;
    if (HIDWORD(v5) + (_DWORD)v5 == (unint64_t)v5
      || !*(_QWORD *)(v6 + 32 * v5 + 24)
      || ((v7 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 2),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v8 = 0)
        : (v8 = v183[9]),
          HIDWORD(v7) + (_DWORD)v7 == (unint64_t)v7
       || !*(_QWORD *)(v8 + 32 * v7 + 24)))
    {
      v11 = "quantization parameters missing for affine quantized input";
      goto LABEL_155;
    }
    v9 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 0);
    v10 = v183;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9] + 32 * v9 + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v11 = "quantized input must be quantized type";
      goto LABEL_155;
    }
    v103 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 0);
    v104 = *(_QWORD *)(v183[9] + 32 * v103 + 24);
    v105 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 1);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v106 = v183[9];
    else
      v106 = 0;
    if (HIDWORD(v105) + (_DWORD)v105 == (unint64_t)v105)
      v107 = 0;
    else
      v107 = *(_QWORD *)(v106 + 32 * v105 + 24);
    v109 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 2);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v110 = v183[9];
    else
      v110 = 0;
    if (HIDWORD(v109) + (_DWORD)v109 == (unint64_t)v109)
      v111 = 0;
    else
      v111 = *(_QWORD *)(v110 + 32 * v109 + 24);
    v112 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 3);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v113 = v183[9];
    else
      v113 = 0;
    if (HIDWORD(v112) + (_DWORD)v112 == (unint64_t)v112)
      v114 = 0;
    else
      v114 = *(_QWORD *)(v113 + 32 * v112 + 24);
    v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr((mlir::Operation **)&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&TransposeLhsAttr);
      if (v186[0] > 0x40u)
      {
        LODWORD(v115) = *(_DWORD *)TransposeLhsAttr;
        MEMORY[0x20BD002D4](TransposeLhsAttr);
      }
      else
      {
        v115 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
      }
      v116 = v115 | 0x100000000;
    }
    else
    {
      v116 = 0;
    }
      return 0;
  }
  if (!mlir::mpsx::QuantizedMatMulOp::isWeightsQuantized((mlir::Operation **)&v183))
  {
    v45 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v46 = v183[9];
    else
      v46 = 0;
    if (HIDWORD(v45) + (_DWORD)v45 != (unint64_t)v45
      && *(_QWORD *)(v46 + 32 * v45 + 24))
    {
      goto LABEL_110;
    }
    v47 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6);
    v48 = (*((_BYTE *)v183 + 46) & 0x80) != 0 ? v183[9] : 0;
    if ((HIDWORD(v47) + (_DWORD)v47 == (unint64_t)v47
       || !*(_QWORD *)(v48 + 32 * v47 + 24))
      && ((v49 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v50 = 0)
        : (v50 = v183[9]),
          (HIDWORD(v49) + (_DWORD)v49 == (unint64_t)v49
        || !*(_QWORD *)(v50 + 32 * v49 + 24))
       && ((v51 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
            (*((_BYTE *)v183 + 46) & 0x80) == 0)
         ? (v52 = 0)
         : (v52 = v183[9]),
           (HIDWORD(v51) + (_DWORD)v51 == (unint64_t)v51
         || !*(_QWORD *)(v52 + 32 * v51 + 24))
        && ((v53 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v54 = 0)
          : (v54 = v183[9]),
            HIDWORD(v53) + (_DWORD)v53 == (unint64_t)v53
         || !*(_QWORD *)(v54 + 32 * v53 + 24)))))
    {
      v101 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
      v102 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v101
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136);
      if (v102 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        goto LABEL_158;
      }
      v11 = "unquantized weights must be float type";
    }
    else
    {
LABEL_110:
      v11 = "no weight quantization parameters must be set when weight isn't quantized";
    }
    goto LABEL_155;
  }
  v29 = v183;
  TransposeLhsAttr = (uint64_t)v183;
  v30 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 5);
  if ((*((_BYTE *)v29 + 46) & 0x80) != 0)
    v31 = v29[9];
  else
    v31 = 0;
  if (HIDWORD(v30) + (_DWORD)v30 != (unint64_t)v30
    && *(_QWORD *)(v31 + 32 * v30 + 24))
  {
    v32 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 9);
    v33 = (*((_BYTE *)v29 + 46) & 0x80) != 0 ? v29[9] : 0;
    if (HIDWORD(v32) + (_DWORD)v32 == (unint64_t)v32
      || !*(_QWORD *)(v33 + 32 * v32 + 24))
    {
      v65 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v66 = v183[9];
      else
        v66 = 0;
      if (HIDWORD(v65) + (_DWORD)v65 == (unint64_t)v65
        || !*(_QWORD *)(v66 + 32 * v65 + 24)
        || ((v67 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v68 = 0)
          : (v68 = v183[9]),
            HIDWORD(v67) + (_DWORD)v67 == (unint64_t)v67
         || !*(_QWORD *)(v68 + 32 * v67 + 24)))
      {
        v11 = "quantization parameters missing for affine quantized weights";
        goto LABEL_155;
      }
      v69 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v70 = v183[9];
      else
        v70 = 0;
      if (HIDWORD(v69) + (_DWORD)v69 != (unint64_t)v69
        && *(_QWORD *)(v70 + 32 * v69 + 24)
        || ((v71 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v72 = 0)
          : (v72 = v183[9]),
            HIDWORD(v71) + (_DWORD)v71 != (unint64_t)v71
         && *(_QWORD *)(v72 + 32 * v71 + 24)
         || ((v73 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
              (*((_BYTE *)v183 + 46) & 0x80) == 0)
           ? (v74 = 0)
           : (v74 = v183[9]),
             HIDWORD(v73) + (_DWORD)v73 != (unint64_t)v73
          && *(_QWORD *)(v74 + 32 * v73 + 24))))
      {
        v11 = "extra quantization parameters set when weight is affine quantized";
        goto LABEL_155;
      }
      v125 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                                 + 32 * v125
                                                                                                 + 24)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF8))
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        goto LABEL_202;
      v126 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
      v127 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v126
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136);
      if (v127 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        v11 = "weights affine quantization scale must be float";
        goto LABEL_155;
      }
      v130 = v183;
      v131 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
      v132 = *(_QWORD *)(v183[9] + 32 * v131 + 24);
      v133 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v134 = v183[9];
      else
        v134 = 0;
      if (HIDWORD(v133) + (_DWORD)v133 == (unint64_t)v133)
        v135 = 0;
      else
        v135 = *(_QWORD *)(v134 + 32 * v133 + 24);
      v136 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v137 = v183[9];
      else
        v137 = 0;
      if (HIDWORD(v136) + (_DWORD)v136 == (unint64_t)v136)
        v138 = 0;
      else
        v138 = *(_QWORD *)(v137 + 32 * v136 + 24);
      v139 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 7);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v140 = v183[9];
      else
        v140 = 0;
      if (HIDWORD(v139) + (_DWORD)v139 == (unint64_t)v139)
        v141 = 0;
      else
        v141 = *(_QWORD *)(v140 + 32 * v139 + 24);
      v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
      if (v178[0])
      {
        mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&TransposeLhsAttr);
        if (v186[0] > 0x40u)
        {
          LODWORD(v142) = *(_DWORD *)TransposeLhsAttr;
          MEMORY[0x20BD002D4](TransposeLhsAttr);
        }
        else
        {
          v142 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
        }
        v143 = v142 | 0x100000000;
      }
      else
      {
        v143 = 0;
      }
      v144 = v130;
      v145 = v132;
      v146 = v135;
      v147 = v138;
      v148 = v141;
LABEL_278:
        return 0;
      goto LABEL_158;
    }
  }
  v34 = v183;
  TransposeLhsAttr = (uint64_t)v183;
  v35 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 8);
  if ((*((_BYTE *)v34 + 46) & 0x80) != 0)
    v36 = v34[9];
  else
    v36 = 0;
  if (HIDWORD(v35) + (_DWORD)v35 == (unint64_t)v35
    || !*(_QWORD *)(v36 + 32 * v35 + 24))
  {
    TransposeLhsAttr = (uint64_t)v183;
    mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&TransposeLhsAttr, 9);
    v55 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v56 = v183[9];
    else
      v56 = 0;
    if (HIDWORD(v55) + (_DWORD)v55 == (unint64_t)v55
      || !*(_QWORD *)(v56 + 32 * v55 + 24)
      || ((v57 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v58 = 0)
        : (v58 = v183[9]),
          HIDWORD(v57) + (_DWORD)v57 == (unint64_t)v57
       || !*(_QWORD *)(v58 + 32 * v57 + 24)
       || ((v59 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
            (*((_BYTE *)v183 + 46) & 0x80) == 0)
         ? (v60 = 0)
         : (v60 = v183[9]),
           HIDWORD(v59) + (_DWORD)v59 == (unint64_t)v59
        || !*(_QWORD *)(v60 + 32 * v59 + 24)
        || ((v61 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v62 = 0)
          : (v62 = v183[9]),
            HIDWORD(v61) + (_DWORD)v61 == (unint64_t)v61
         || !*(_QWORD *)(v62 + 32 * v61 + 24)))))
    {
      v11 = "quantization parameters missing for double affine quantized weights";
      goto LABEL_155;
    }
    v63 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v64 = v183[9];
    else
      v64 = 0;
    if (HIDWORD(v63) + (_DWORD)v63 != (unint64_t)v63
      && *(_QWORD *)(v64 + 32 * v63 + 24))
    {
      v11 = "extra quantization parameters set when weight is double affine quantized";
      goto LABEL_155;
    }
    v128 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v128
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_202;
    v129 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v129
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v11 = "weights double affine quantization scale must be quantized";
LABEL_155:
      v178[0] = (const void **)v11;
      v179 = 259;
      mlir::OpState::emitOpError(&v183, v178, (uint64_t)&TransposeLhsAttr);
      v75 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&TransposeLhsAttr);
      if (TransposeLhsAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&TransposeLhsAttr);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v186);
      if (!v75)
        return 0;
      goto LABEL_158;
    }
    v149 = v183;
    v150 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
    v151 = *(_QWORD *)(v183[9] + 32 * v150 + 24);
    v152 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v153 = v183[9];
    else
      v153 = 0;
    if (HIDWORD(v152) + (_DWORD)v152 == (unint64_t)v152)
      v154 = 0;
    else
      v154 = *(_QWORD *)(v153 + 32 * v152 + 24);
    v155 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v156 = v183[9];
    else
      v156 = 0;
    if (HIDWORD(v155) + (_DWORD)v155 == (unint64_t)v155)
      v157 = 0;
    else
      v157 = *(_QWORD *)(v156 + 32 * v155 + 24);
    v158 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 7);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v159 = v183[9];
    else
      v159 = 0;
    if (HIDWORD(v158) + (_DWORD)v158 == (unint64_t)v158)
      v160 = 0;
    else
      v160 = *(_QWORD *)(v159 + 32 * v158 + 24);
    v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&TransposeLhsAttr);
      if (v186[0] > 0x40u)
      {
        LODWORD(v161) = *(_DWORD *)TransposeLhsAttr;
        MEMORY[0x20BD002D4](TransposeLhsAttr);
      }
      else
      {
        v161 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
      }
      v163 = v161 | 0x100000000;
    }
    else
    {
      v163 = 0;
    }
      return 0;
    v164 = v183;
    v165 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v166 = v183[9];
    else
      v166 = 0;
    if (HIDWORD(v165) + (_DWORD)v165 == (unint64_t)v165)
      v167 = 0;
    else
      v167 = *(_QWORD *)(v166 + 32 * v165 + 24);
    v168 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v169 = v183[9];
    else
      v169 = 0;
    if (HIDWORD(v168) + (_DWORD)v168 == (unint64_t)v168)
      v170 = 0;
    else
      v170 = *(_QWORD *)(v169 + 32 * v168 + 24);
    v171 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v172 = v183[9];
    else
      v172 = 0;
    if (HIDWORD(v171) + (_DWORD)v171 == (unint64_t)v171)
      v173 = 0;
    else
      v173 = *(_QWORD *)(v172 + 32 * v171 + 24);
    v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&TransposeLhsAttr);
      if (v186[0] > 0x40u)
      {
        LODWORD(v174) = *(_DWORD *)TransposeLhsAttr;
        MEMORY[0x20BD002D4](TransposeLhsAttr);
      }
      else
      {
        v174 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
      }
      v143 = v174 | 0x100000000;
    }
    else
    {
      v143 = 0;
    }
    v144 = v164;
    v145 = v167;
    v146 = v170;
    v147 = v173;
    v148 = 0;
    goto LABEL_278;
  }
  v37 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
  if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
    v38 = v183[9];
  else
    v38 = 0;
  if (HIDWORD(v37) + (_DWORD)v37 != (unint64_t)v37
    && *(_QWORD *)(v38 + 32 * v37 + 24)
    || ((v39 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6),
         (*((_BYTE *)v183 + 46) & 0x80) == 0)
      ? (v40 = 0)
      : (v40 = v183[9]),
        HIDWORD(v39) + (_DWORD)v39 != (unint64_t)v39
     && *(_QWORD *)(v40 + 32 * v39 + 24)
     || ((v41 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
          (*((_BYTE *)v183 + 46) & 0x80) == 0)
       ? (v42 = 0)
       : (v42 = v183[9]),
         HIDWORD(v41) + (_DWORD)v41 != (unint64_t)v41
      && *(_QWORD *)(v42 + 32 * v41 + 24)
      || ((v43 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v44 = 0)
        : (v44 = v183[9]),
          HIDWORD(v43) + (_DWORD)v43 != (unint64_t)v43
       && *(_QWORD *)(v44 + 32 * v43 + 24)))))
  {
    v11 = "extra quantization parameters set when weight is LUT quantized";
    goto LABEL_155;
  }
  v108 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9] + 32 * v108 + 24)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF8))
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
LABEL_202:
    v11 = "quantized weights must be quantized type";
    goto LABEL_155;
  }
  v117 = v183;
  v118 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
  v119 = *(_QWORD *)(v183[9] + 32 * v118 + 24);
  v120 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8);
  if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
    v121 = v183[9];
  else
    v121 = 0;
  if (HIDWORD(v120) + (_DWORD)v120 == (unint64_t)v120)
    v122 = 0;
  else
    v122 = *(_QWORD *)(v121 + 32 * v120 + 24);
  v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
  if (v178[0])
  {
    mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&TransposeLhsAttr);
    if (v186[0] > 0x40u)
    {
      LODWORD(v123) = *(_DWORD *)TransposeLhsAttr;
      MEMORY[0x20BD002D4](TransposeLhsAttr);
    }
    else
    {
      v123 = TransposeLhsAttr << -(uint64_t)v186[0] >> -(uint64_t)v186[0];
    }
    v124 = v123 | 0x100000000;
  }
  else
  {
    v124 = 0;
  }
  if (!mlir::mps::verifyDequantLUT(v117, v119, v122, v124))
    return 0;
LABEL_158:
  v182 = *this;
  InputDequantizedType = mlir::mpsx::QuantizedMatMulOp::getInputDequantizedType((mlir::Operation **)&v182);
  v181[0] = InputDequantizedType;
  v181[1] = v77;
  WeightsDequantizedType = mlir::mpsx::QuantizedMatMulOp::getWeightsDequantizedType((mlir::Operation **)&v182);
  v180[0] = WeightsDequantizedType;
  v180[1] = v79;
  if (*(_UNKNOWN **)(*InputDequantizedType + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*WeightsDequantizedType + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return 1;
  }
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v181);
  v82 = v81;
  v84 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v180);
  v85 = v83;
  if (v82)
  {
    if (v82 != 1)
    {
      TransposeLhsAttr = mlir::mpsx::QuantizedMatMulOp::getTransposeLhsAttr((mlir::Operation **)&v182);
      Shape = &Shape[v82 - 1 + ((uint64_t)mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeLhsAttr) << 63 >> 63)];
    }
    v86 = *Shape;
    if (v85)
      goto LABEL_164;
LABEL_170:
    v90 = 1;
    goto LABEL_171;
  }
  v86 = 1;
  if (!v83)
    goto LABEL_170;
LABEL_164:
  if (v85 != 1)
  {
    v87 = &v84[v85];
    TransposeLhsAttr = mlir::mpsx::QuantizedMatMulOp::getTransposeRhsAttr((mlir::Operation **)&v182);
    Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeLhsAttr);
    v89 = 0x1FFFFFFFFFFFFFFELL;
    if (Value)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    v84 = &v87[v89];
  }
  v90 = *v84;
LABEL_171:
  if (v86 == 0x8000000000000000 || v90 == 0x8000000000000000 || v86 == v90)
    return 1;
  v178[0] = (const void **)"contracting dimensions differ ";
  v179 = 259;
  mlir::OpState::emitOpError(&v182, v178, (uint64_t)&TransposeLhsAttr);
  if (TransposeLhsAttr)
  {
    LODWORD(v183) = 2;
    v184 = v86;
    v91 = &v183;
    v92 = v187;
    if (v188 >= v189)
    {
      v162 = v188 + 1;
      if (v187 <= (unint64_t)&v183 && v187 + 24 * v188 > (unint64_t)&v183)
      {
        v176 = (char *)&v183 - v187;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v162, 24);
        v92 = v187;
        v91 = (uint64_t **)&v176[v187];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v162, 24);
        v91 = &v183;
        v92 = v187;
      }
    }
    v93 = v92 + 24 * v188;
    v94 = *(_OWORD *)v91;
    *(_QWORD *)(v93 + 16) = v91[2];
    *(_OWORD *)v93 = v94;
    ++v188;
    if (TransposeLhsAttr)
    {
      mlir::Diagnostic::operator<<((uint64_t)v186, " & ");
      if (TransposeLhsAttr)
      {
        LODWORD(v183) = 2;
        v184 = v90;
        v95 = &v183;
        v96 = v187;
        if (v188 >= v189)
        {
          v175 = v188 + 1;
          if (v187 <= (unint64_t)&v183 && v187 + 24 * v188 > (unint64_t)&v183)
          {
            v177 = (char *)&v183 - v187;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v175, 24);
            v96 = v187;
            v95 = (uint64_t **)&v177[v187];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v175, 24);
            v95 = &v183;
            v96 = v187;
          }
        }
        v97 = v96 + 24 * v188;
        v98 = *(_OWORD *)v95;
        *(_QWORD *)(v97 + 16) = v95[2];
        *(_OWORD *)v97 = v98;
        ++v188;
      }
    }
  }
  v99 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&TransposeLhsAttr);
  if (TransposeLhsAttr)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&TransposeLhsAttr);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v186);
  return v99 != 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  mlir::MLIRContext *v18;
  MirInfoChannelAssignment *Value;
  uint64_t v20;
  MirInfoChannelAssignment *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  MirInfoChannelAssignment *v36;
  MirInfoChannelAssignment *v37;
  MirInfoChannelAssignment *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *Shape;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t WeightsQuantParamsAxis;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  _BYTE *v87;
  size_t v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  MirInfoChannelAssignment *v103;
  MirInfoChannelAssignment *v104;
  MirInfoChannelAssignment *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  MirInfoChannelAssignment *v109;
  MirInfoChannelAssignment *v110;
  MirInfoChannelAssignment *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  MirInfoChannelAssignment *v115;
  MirInfoChannelAssignment *v116;
  MirInfoChannelAssignment *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL4 v121;
  MirInfoChannelAssignment *v122;
  MirInfoChannelAssignment *v123;
  MirInfoChannelAssignment *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  int v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  char v137;
  uint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t OperandRange;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _OWORD v165[2];
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  _BYTE v173[40];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v168 = a6;
  BYTE8(v168) = 0;
  LOBYTE(v169) = 0;
  *((_QWORD *)&v169 + 1) = a9;
  *(_QWORD *)&v170 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v168);
    if ((_BYTE)v169)
      LOBYTE(v169) = 0;
    mlir::OperationName::OperationName((char *)&v168 + 8, "mpsx.quantized_matmul", 21, Context);
    LOBYTE(v169) = 1;
  }
  *((_QWORD *)&v170 + 1) = a4;
  v171 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mpsx::QuantizedMatMulOpAdaptor::verify((uint64_t *)&v168, v17))
  {
    v24 = mlir::Float32Type::get(this, v18);
LABEL_113:
    v134 = mlir::UnrankedTensorType::get(v24);
    goto LABEL_114;
  }
  v165[0] = v168;
  v165[1] = v169;
  v166 = v170;
  v167 = v171;
  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v165);
  v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)v165);
  v21 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v20 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v165[0] + 1) + 96) + 8));
  if ((v22 & 1) != 0)
    v23 = *((_QWORD *)v21 + 1);
  else
    v23 = 0;
  *(_QWORD *)&v174 = v23;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v174);
  v174 = *((unint64_t *)&v166 + 1);
  v25 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v174, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25)
    goto LABEL_19;
  v26 = *v25;
  v27 = mlir::TypeID::get<mlir::ShapedType>();
  v28 = *(unsigned int *)(v26 + 16);
  if (!(_DWORD)v28)
    goto LABEL_19;
  v29 = *(_QWORD **)(v26 + 8);
  v30 = &v29[2 * v28];
  do
  {
    v31 = v28 >> 1;
    v32 = &v29[2 * (v28 >> 1)];
    v34 = *v32;
    v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27)
      v29 = v33;
    else
      v28 = v31;
  }
  while (v28);
  if (v29 != v30 && *v29 == v27)
    v35 = v29[1];
  else
LABEL_19:
    v35 = 0;
  *(_QWORD *)&v172 = v25;
  *((_QWORD *)&v172 + 1) = v35;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v25) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v36 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v165) + 16);
    v37 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)v165);
    v38 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v36, v37, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v165[0] + 1) + 96) + 16));
    if ((v39 & 1) != 0)
      v40 = *((_QWORD *)v38 + 1);
    else
      v40 = 0;
    *(_QWORD *)&v174 = v40;
    v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v174);
    LOBYTE(v174) = 0;
    LOBYTE(v175) = 0;
    v25 = (uint64_t *)mlir::ShapedType::cloneWith((uint64_t *)&v172, &v174, v41);
  }
  v161 = v168;
  v162 = v169;
  v163 = v170;
  v164 = v171;
  ODSOperandIndexAndLength = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161, 4);
  v43 = *((_QWORD *)&v163 + 1);
  *(_QWORD *)&v174 = *((_QWORD *)&v163 + 1);
  *((_QWORD *)&v174 + 1) = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v43 = mlir::ValueRange::offset_base(&v174, ODSOperandIndexAndLength);
  v174 = v43;
  v44 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v174, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v44)
    goto LABEL_36;
  v45 = *v44;
  v46 = mlir::TypeID::get<mlir::ShapedType>();
  v47 = *(unsigned int *)(v45 + 16);
  if (!(_DWORD)v47)
    goto LABEL_36;
  v48 = *(_QWORD **)(v45 + 8);
  v49 = &v48[2 * v47];
  do
  {
    v50 = v47 >> 1;
    v51 = &v48[2 * (v47 >> 1)];
    v53 = *v51;
    v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46)
      v48 = v52;
    else
      v47 = v50;
  }
  while (v47);
  if (v48 != v49 && *v48 == v46)
    v54 = v48[1];
  else
LABEL_36:
    v54 = 0;
  v159 = v44;
  v160 = v54;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v44) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v55 = v159;
    goto LABEL_94;
  }
  v174 = v161;
  v175 = v162;
  v176 = v163;
  v177 = v164;
  v56 = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v174, 8);
  v57 = *((_QWORD *)&v176 + 1);
  *(_QWORD *)&v172 = *((_QWORD *)&v176 + 1);
  *((_QWORD *)&v172 + 1) = v56;
  if ((_DWORD)v56)
  {
    v57 = mlir::ValueRange::offset_base(&v172, v56);
    v58 = *((_QWORD *)&v172 + 1);
  }
  else
  {
    v58 = 0;
  }
  if (HIDWORD(v56) + (_DWORD)v56 != v58)
  {
    v172 = v57;
    if (mlir::ValueRange::dereference_iterator(&v172, 0))
    {
      v59 = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161, 8);
      v60 = *((_QWORD *)&v163 + 1);
      *(_QWORD *)&v172 = *((_QWORD *)&v163 + 1);
      *((_QWORD *)&v172 + 1) = v59;
      if ((_DWORD)v59)
      {
        v60 = mlir::ValueRange::offset_base(&v172, v59);
        v61 = *((_QWORD *)&v172 + 1);
      }
      else
      {
        v61 = 0;
      }
      if (HIDWORD(v59) + (_DWORD)v59 == v61)
      {
        v62 = 0;
      }
      else
      {
        v172 = v60;
        v62 = mlir::ValueRange::dereference_iterator(&v172, 0);
      }
      v63 = (_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v63)
        goto LABEL_61;
      v64 = *v63;
      v65 = mlir::TypeID::get<mlir::ShapedType>();
      v66 = *(unsigned int *)(v64 + 16);
      if (!(_DWORD)v66)
        goto LABEL_61;
      v67 = *(_QWORD **)(v64 + 8);
      v68 = &v67[2 * v66];
      do
      {
        v69 = v66 >> 1;
        v70 = &v67[2 * (v66 >> 1)];
        v72 = *v70;
        v71 = v70 + 2;
        v66 += ~(v66 >> 1);
        if (v72 < v65)
          v67 = v71;
        else
          v66 = v69;
      }
      while (v66);
      if (v67 != v68 && *v67 == v65)
        v73 = v67[1];
      else
LABEL_61:
        v73 = 0;
      v157 = v63;
      v158 = v73;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v157))
      {
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v157);
        if (v75)
        {
          v76 = 8 * v75;
          while (*Shape != 0x8000000000000000)
          {
            ++Shape;
            v76 -= 8;
            if (!v76)
              goto LABEL_67;
          }
        }
        else
        {
LABEL_67:
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v159))
          {
            v77 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
            if (!v78)
            {
LABEL_72:
              WeightsQuantParamsAxis = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getWeightsQuantParamsAxis((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161);
              mlir::ShapedType::getShape((mlir::ShapedType *)&v157);
              if (v81 != 1 && (WeightsQuantParamsAxis & 0xFF00000000) != 0)
              {
                v82 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v157) + 8 * (v81 - 1));
                if (v82 >= 2)
                {
                  if ((int)WeightsQuantParamsAxis <= 0)
                  {
                    mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
                    LODWORD(WeightsQuantParamsAxis) = v83 + WeightsQuantParamsAxis;
                  }
                  v85 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
                  v86 = v84;
                  v87 = v173;
                  *(_QWORD *)&v172 = v173;
                  *((_QWORD *)&v172 + 1) = 0x500000000;
                  v88 = 8 * v84;
                  if ((unint64_t)(8 * v84) < 0x29)
                  {
                    v89 = 0;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v173, (8 * v84) >> 3, 8);
                    v89 = DWORD2(v172);
                    v87 = (_BYTE *)v172;
                  }
                  if (v86)
                  {
                    memcpy(&v87[8 * v89], v85, v88);
                    v89 = DWORD2(v172);
                    v87 = (_BYTE *)v172;
                  }
                  v143 = v89 + (v88 >> 3);
                  DWORD2(v172) = v143;
                  *(_QWORD *)&v87[8 * (int)WeightsQuantParamsAxis] *= v82;
                  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v159);
                  v145 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v87, v143, OperandRange, 0);
                  v146 = (uint64_t)v145;
                  if (!v145)
                    goto LABEL_147;
                  v147 = *v145;
                  v148 = mlir::TypeID::get<mlir::ShapedType>();
                  v149 = *(unsigned int *)(v147 + 16);
                  if (!(_DWORD)v149)
                    goto LABEL_147;
                  v150 = *(_QWORD **)(v147 + 8);
                  v151 = &v150[2 * v149];
                  do
                  {
                    v152 = v149 >> 1;
                    v153 = &v150[2 * (v149 >> 1)];
                    v155 = *v153;
                    v154 = v153 + 2;
                    v149 += ~(v149 >> 1);
                    if (v155 < v148)
                      v150 = v154;
                    else
                      v149 = v152;
                  }
                  while (v149);
                  if (v150 != v151 && *v150 == v148)
                    v156 = v150[1];
                  else
LABEL_147:
                    v156 = 0;
                  v159 = (uint64_t *)v146;
                  v160 = v156;
                  if ((_BYTE *)v172 != v173)
                    free((void *)v172);
                }
              }
              goto LABEL_90;
            }
            v79 = 8 * v78;
            while (*v77 != 0x8000000000000000)
            {
              ++v77;
              v79 -= 8;
              if (!v79)
                goto LABEL_72;
            }
          }
        }
      }
      v90 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v159);
      v91 = (uint64_t *)mlir::UnrankedTensorType::get(v90);
      v92 = (uint64_t)v91;
      if (!v91)
        goto LABEL_88;
      v93 = *v91;
      v94 = mlir::TypeID::get<mlir::ShapedType>();
      v95 = *(unsigned int *)(v93 + 16);
      if (!(_DWORD)v95)
        goto LABEL_88;
      v96 = *(_QWORD **)(v93 + 8);
      v97 = &v96[2 * v95];
      do
      {
        v98 = v95 >> 1;
        v99 = &v96[2 * (v95 >> 1)];
        v101 = *v99;
        v100 = v99 + 2;
        v95 += ~(v95 >> 1);
        if (v101 < v94)
          v96 = v100;
        else
          v95 = v98;
      }
      while (v95);
      if (v96 != v97 && *v96 == v94)
        v102 = v96[1];
      else
LABEL_88:
        v102 = 0;
      v159 = (uint64_t *)v92;
      v160 = v102;
    }
  }
LABEL_90:
  v103 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v161) + 16);
  v104 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v161);
  v105 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v103, v104, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v161 + 1) + 96) + 16));
  if ((v106 & 1) != 0)
    v107 = *((_QWORD *)v105 + 1);
  else
    v107 = 0;
  *(_QWORD *)&v172 = v107;
  v108 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v172);
  LOBYTE(v172) = 0;
  v173[0] = 0;
  v55 = (uint64_t *)mlir::ShapedType::cloneWith((uint64_t *)&v159, &v172, v108);
LABEL_94:
  v109 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 16);
  v110 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  v111 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v109, v110, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v168 + 1) + 96) + 16));
  if ((v112 & 1) != 0)
    v113 = *((_QWORD *)v111 + 1);
  else
    v113 = 0;
  *(_QWORD *)&v174 = v113;
  v114 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v174);
  v115 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 32);
  v116 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  v117 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v115, v116, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v168 + 1) + 96) + 24));
  if ((v118 & 1) != 0 && (v119 = *((_QWORD *)v117 + 1)) != 0)
  {
    if (mlir::BoolAttr::classof(*((_QWORD **)v117 + 1)))
      v120 = v119;
    else
      v120 = 0;
  }
  else
  {
    v120 = 0;
  }
  *(_QWORD *)&v174 = v120;
  v121 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v174);
  v122 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 32);
  v123 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  v124 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v122, v123, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v168 + 1) + 96) + 32));
  if ((v125 & 1) != 0 && (v126 = *((_QWORD *)v124 + 1)) != 0)
  {
    if (mlir::BoolAttr::classof(*((_QWORD **)v124 + 1)))
      v127 = v126;
    else
      v127 = 0;
  }
  else
  {
    v127 = 0;
  }
  *(_QWORD *)&v174 = v127;
  v128 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v174);
  if (*(_UNKNOWN **)(*v25 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*v55 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || (v129 = v128,
        v130 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v25),
        v159 = v130,
        v160 = v131,
        v132 = (unint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v55),
        v157 = (_QWORD *)v132,
        v158 = v133,
        !((unint64_t)v130 | v132)))
  {
    v24 = v114;
    goto LABEL_113;
  }
  if (*(_UNKNOWN **)(*v130 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && *(_UNKNOWN **)(*(_QWORD *)v132 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    *(_QWORD *)&v172 = v173;
    *((_QWORD *)&v172 + 1) = 0x400000000;
    v138 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v159);
    v140 = v139;
    v141 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v157);
    {
      v134 = mlir::RankedTensorType::get(v172, DWORD2(v172), v114, 0);
      v137 = 1;
    }
    else if ((_BYTE)a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v174);
      if ((_QWORD)v174)
        mlir::Diagnostic::operator<<((uint64_t)&v174 + 8, "invalid shape");
      v137 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if ((_QWORD)v174)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v174 + 8);
      v134 = 0;
    }
    else
    {
      v134 = 0;
      v137 = 0;
    }
    if ((_BYTE *)v172 != v173)
      free((void *)v172);
  }
  else
  {
    v137 = mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)a2, a3, "invalid input types: ", (uint64_t *)&v159, ", ", (uint64_t *)&v157);
    v134 = 0;
  }
  if (!v137)
    return 0;
LABEL_114:
  v135 = *(_DWORD *)(a11 + 8);
  if (v135 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v135 + 1, 8);
    v135 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v135) = v134;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::QuantizedMatMulOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *Value;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[20];

  v34[19] = *MEMORY[0x24BDAC8D0];
  v26 = *a1;
  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
  {
LABEL_7:
    v6 = "'mpsx.quantized_matmul' op requires attribute 'operandSegmentSizes'";
LABEL_13:
    v24[0] = v6;
    v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
LABEL_14:
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
    if (v29)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v29);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v30);
    return v8;
  }
  v5 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      v5 = *((_QWORD *)Value + 1);
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
      goto LABEL_7;
  }
  v7 = *((_QWORD *)Value + 1);
  while (1)
  {
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
    {
      v6 = "'mpsx.quantized_matmul' op requires attribute 'output_type'";
      goto LABEL_13;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      break;
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
  }
  v10 = *((_QWORD *)Value + 1);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v13 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 32) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v12 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 40) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v11 = *((_QWORD *)Value + 1);
      }
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    while (Value != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26));
  }
  v23 = v7;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v23);
  if (v14 != 11)
  {
    v16 = v14;
    v24[0] = "'mpsx.quantized_matmul' op 'operandSegmentSizes' attribute for specifying operand segments must have 11 elements, but got ";
    v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
    if (v29)
    {
      v27 = 5;
      v28 = v16;
      v17 = &v27;
      v18 = v31;
      if (v32 >= v33)
      {
        v21 = v32 + 1;
        if (v31 <= (unint64_t)&v27 && v31 + 24 * v32 > (unint64_t)&v27)
        {
          v22 = (char *)&v27 - v31;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v21, 24);
          v18 = v31;
          v17 = (int *)&v22[v31];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v21, 24);
          v17 = &v27;
          v18 = v31;
        }
      }
      v19 = v18 + 24 * v32;
      v20 = *(_OWORD *)v17;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v19 = v20;
      ++v32;
    }
    goto LABEL_14;
  }
  if (v5)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v24[0] = v5,
          v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24),
          !mlir::Type::isSignedInteger((mlir::Type *)&v29, 32)))
    {
      v6 = "'mpsx.quantized_matmul' op attribute 'input_quant_params_axis' failed to satisfy constraint: 32-bit signed integer attribute";
      goto LABEL_13;
    }
  }
  if (v11)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v24[0] = v11,
          v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24),
          !mlir::Type::isSignedInteger((mlir::Type *)&v29, 32)))
    {
      v6 = "'mpsx.quantized_matmul' op attribute 'weights_quant_params_axis' failed to satisfy constraint: 32-bit signed "
           "integer attribute";
      goto LABEL_13;
    }
  }
  if (v10)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v15 = "'mpsx.quantized_matmul' op attribute 'output_type' failed to satisfy constraint: any type attribute";
LABEL_52:
      v24[0] = v15;
      v25 = 259;
      mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v29);
      return v8;
    }
    v29 = v10;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v29);
  }
  if (v13 && !mlir::BoolAttr::classof(v13))
  {
    v15 = "'mpsx.quantized_matmul' op attribute 'transpose_lhs' failed to satisfy constraint: BOOL attribute";
    goto LABEL_52;
  }
  if (v12 && !mlir::BoolAttr::classof(v12))
  {
    v15 = "'mpsx.quantized_matmul' op attribute 'transpose_rhs' failed to satisfy constraint: BOOL attribute";
    goto LABEL_52;
  }
  return 1;
}

uint64_t mlir::mpsx::inferMatMulResultType(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, int a7)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v15;
  uint64_t v16;
  uint64_t *Shape;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  _QWORD v26[2];
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a3);
  v26[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(a3);
  v26[1] = v15;
  v25[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(a4);
  v25[1] = v16;
  if (v26[0] | v25[0]
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v26)
    && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v25) & 1) != 0)
  {
    v27 = v29;
    v28 = 0x400000000;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
    v19 = v18;
    v20 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
    {
      v22 = mlir::RankedTensorType::get((uint64_t)v27, v28, ElementTypeOrSelf, 0);
      v23 = 1;
    }
    else
    {
      v22 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      v23 = 0;
    }
    *a5 = v22;
    if (v27 != v29)
      free(v27);
  }
  else
  {
    *a5 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    return 1;
  }
  return v23;
}

uint64_t mlir::mpsx::`anonymous namespace'::inferMatMulShape(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, _QWORD *a5, unint64_t a6, int a7, int a8, uint64_t a9)
{
  int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  char *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  uint64_t v66;
  int64x2_t *v67;
  void *v68;
  unint64_t v69;
  _BYTE v70[32];
  void *__dst;
  unint64_t v72;
  int64x2_t v73;
  void *v74;
  uint64_t v75;
  _QWORD v76[24];

  v9 = a8;
  v76[22] = *MEMORY[0x24BDAC8D0];
  v67 = &v73;
  __dst = &v73;
  v72 = 0x400000000;
  v68 = v70;
  v69 = 0x400000000;
  v66 = a2;
  if (a4 == 1)
  {
    v14 = *a3;
    v73.i64[0] = 1;
    v73.i64[1] = v14;
    goto LABEL_5;
  }
  if (!a4)
  {
    v73 = vdupq_n_s64(1uLL);
LABEL_5:
    LODWORD(v72) = 2;
    goto LABEL_6;
  }
  v17 = a4;
  v74 = v76;
  v75 = 0x400000000;
  if (8 * a4 < 0x21)
  {
    v18 = 0;
    v19 = v76;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, (uint64_t)(8 * a4) >> 3, 8);
    v18 = v75;
    v19 = v74;
  }
  memcpy(&v19[v18], a3, 8 * a4);
  v27 = v74;
  v28 = (v75 + a4);
  LODWORD(v75) = v75 + a4;
  if (v74 == v76)
  {
    v63 = a5;
    v59 = v72;
    if (v72 >= v28)
    {
      a5 = v63;
      if ((_DWORD)v28)
        memmove(__dst, v76, 8 * v28);
      LODWORD(v72) = v28;
      goto LABEL_94;
    }
    if (HIDWORD(v72) >= v28)
    {
      if ((_DWORD)v72)
      {
        memmove(__dst, v76, 8 * v72);
LABEL_91:
        if (v59 != v75)
          memcpy((char *)__dst + 8 * v59, (char *)v74 + 8 * v59, 8 * v75 - 8 * v59);
        LODWORD(v72) = v28;
        a5 = v63;
        goto LABEL_94;
      }
    }
    else
    {
      LODWORD(v72) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v67, v28, 8);
    }
    v59 = 0;
    goto LABEL_91;
  }
  if (__dst != v67)
  {
    free(__dst);
    v27 = v74;
    LODWORD(v28) = v75;
  }
  __dst = v27;
  v72 = __PAIR64__(HIDWORD(v75), v28);
  v74 = v76;
  HIDWORD(v75) = 0;
LABEL_94:
  LODWORD(v75) = 0;
  v9 = a8;
  if (v74 != v76)
    free(v74);
  if (a7)
  {
    v61 = (char *)__dst + 8 * v72;
    *((_QWORD *)v61 - 1) = a3[v17 - 2];
    *((_QWORD *)v61 - 2) = a3[v17 - 1];
  }
LABEL_6:
  if (a6 == 1)
  {
    v20 = *a5;
    LODWORD(v69) = 0;
    if (HIDWORD(v69) > 1)
    {
      v21 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, 2uLL, 8);
      v21 = v69;
    }
    v26 = (char *)v68 + 8 * v21;
    *(_QWORD *)v26 = v20;
    goto LABEL_25;
  }
  if (a6)
  {
    v22 = a6;
    v74 = v76;
    v75 = 0x400000000;
    v23 = v9;
    if (8 * a6 < 0x21)
    {
      v24 = 0;
      v25 = v76;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, (uint64_t)(8 * a6) >> 3, 8);
      v24 = v75;
      v25 = v74;
    }
    memcpy(&v25[v24], a5, 8 * a6);
    v58 = v74;
    v29 = (v75 + a6);
    LODWORD(v75) = v75 + a6;
    if (v74 != v76)
    {
      if (v68 != v70)
      {
        free(v68);
        v58 = v74;
        LODWORD(v29) = v75;
      }
      v68 = v58;
      v69 = __PAIR64__(HIDWORD(v75), v29);
      v74 = v76;
      HIDWORD(v75) = 0;
      goto LABEL_104;
    }
    v60 = v69;
    if (v69 >= v29)
    {
      if ((_DWORD)v29)
        memmove(v68, v76, 8 * v29);
      goto LABEL_103;
    }
    if (HIDWORD(v69) >= v29)
    {
      if ((_DWORD)v69)
      {
        memmove(v68, v76, 8 * v69);
        goto LABEL_101;
      }
    }
    else
    {
      LODWORD(v69) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v29, 8);
    }
    v60 = 0;
LABEL_101:
    if (v60 != v75)
      memcpy((char *)v68 + 8 * v60, (char *)v74 + 8 * v60, 8 * v75 - 8 * v60);
LABEL_103:
    LODWORD(v69) = v29;
LABEL_104:
    LODWORD(v75) = 0;
    if (v74 != v76)
    {
      free(v74);
      LODWORD(v29) = v69;
    }
    if (v23)
    {
      v62 = (char *)v68 + 8 * v29;
      *((_QWORD *)v62 - 1) = a5[v22 - 2];
      *((_QWORD *)v62 - 2) = a5[v22 - 1];
    }
    goto LABEL_26;
  }
  LODWORD(v69) = 0;
  if (HIDWORD(v69) > 1)
  {
    v15 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, 2uLL, 8);
    v15 = v69;
  }
  v26 = (char *)v68 + 8 * v15;
  *(_QWORD *)v26 = 1;
LABEL_25:
  *((_QWORD *)v26 + 1) = 1;
  LODWORD(v29) = v69 + 2;
  LODWORD(v69) = v69 + 2;
LABEL_26:
  *(_DWORD *)(a9 + 8) = 0;
  if (v72 <= v29)
  {
    v30 = 0;
    if ((_DWORD)v29)
    {
      v34 = (uint64_t *)v68;
      v35 = 8 * v29;
      do
      {
        v36 = *v34;
        if (v30 >= *(_DWORD *)(a9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v30 + 1, 8);
          v30 = *(_DWORD *)(a9 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v30) = v36;
        v30 = *(_DWORD *)(a9 + 8) + 1;
        *(_DWORD *)(a9 + 8) = v30;
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  else
  {
    v30 = 0;
    v31 = (uint64_t *)__dst;
    v32 = 8 * v72;
    do
    {
      v33 = *v31;
      if (v30 >= *(_DWORD *)(a9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v30 + 1, 8);
        v30 = *(_DWORD *)(a9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a9 + 8 * v30) = v33;
      v30 = *(_DWORD *)(a9 + 8) + 1;
      *(_DWORD *)(a9 + 8) = v30;
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v37 = (char *)__dst;
  v38 = v72;
  v39 = (char *)__dst + 8 * v72;
  v40 = (char *)v68;
  v41 = v69;
  v42 = (char *)v68 + 8 * v69;
  v43 = *(_QWORD *)a9;
  v44 = *(_QWORD *)a9 + 8 * v30;
  *(_QWORD *)(v44 - 8) = *((_QWORD *)v42 - 1);
  v45 = v42 - 16;
  *(_QWORD *)(v44 - 16) = *((_QWORD *)v39 - 2);
  if (v39 - 16 == v37 || v45 == v40)
  {
LABEL_56:
    if (a4 <= 1)
    {
      v55 = *(_QWORD *)(v44 - 8);
      *(_DWORD *)(a9 + 8) = --v30;
      *(_QWORD *)(v43 + 8 * v30 - 8) = v55;
    }
    if (a6 <= 1)
      *(_DWORD *)(a9 + 8) = v30 - 1;
    v56 = 1;
    goto LABEL_61;
  }
  v47 = 8 * v38 - 24;
  v48 = (unint64_t *)(v43 + 8 * v30 - 24);
  v49 = 8 * v41 - 24;
  while (1)
  {
    v50 = *(_QWORD *)&v37[v47];
    v51 = *(_QWORD *)&v40[v49];
    if (v50 != 0x8000000000000000)
      break;
    v52 = *(_QWORD *)&v40[v49];
    if (v51 > 1)
      goto LABEL_54;
    v52 = *(_QWORD *)&v37[v47];
    if (v51 == 1)
      goto LABEL_54;
LABEL_48:
    v52 = 0x8000000000000000;
LABEL_54:
    *v48-- = v52;
    if (v47)
    {
      v47 -= 8;
      v54 = v49;
      v49 -= 8;
      if (v54)
        continue;
    }
    goto LABEL_56;
  }
  if (v51 == 0x8000000000000000)
  {
    v52 = *(_QWORD *)&v37[v47];
    if (v50 > 1)
      goto LABEL_54;
    goto LABEL_48;
  }
  v53 = v50 == v51 || v51 == 1;
  v52 = *(_QWORD *)&v37[v47];
  if (v53)
    goto LABEL_54;
  v52 = *(_QWORD *)&v40[v49];
  if (v50 == 1)
    goto LABEL_54;
  *(_DWORD *)(a9 + 8) = 0;
  if ((_BYTE)v66)
  {
    mlir::emitError(a1, (uint64_t)&v74);
    if (v74)
      mlir::Diagnostic::operator<<((uint64_t)&v75, "incompatible dimensions");
    v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
    if (v74)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v75);
    v40 = (char *)v68;
  }
  else
  {
    v56 = 0;
  }
LABEL_61:
  if (v40 != v70)
    free(v40);
  if (__dst != v67)
    free(__dst);
  return v56;
}

uint64_t mlir::mpsx::`anonymous namespace'::isCompatibleReturnTypesDefaultImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD *v20;
  _BYTE v21[24];
  _BYTE *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v9 = (_QWORD *)a5[3];
  if (!v9)
  {
    v20 = 0;
    v24 = 0;
    goto LABEL_10;
  }
  if (v9 != a5)
  {
    v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    v20 = v10;
    if (v10)
      goto LABEL_4;
LABEL_8:
    v24 = 0;
    goto LABEL_10;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v19);
  v10 = v20;
  if (!v20)
    goto LABEL_8;
LABEL_4:
  if (v10 == v19)
  {
    v24 = v23;
    (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v23);
  }
  else
  {
    v24 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
  }
LABEL_10:
  {
    v11 = 1;
    goto LABEL_22;
  }
  if (v20)
  {
    if (v20 == v19)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v21);
    }
    else
    {
      v22 = (_BYTE *)(*(uint64_t (**)(void))(*v20 + 16))();
    }
  }
  else
  {
    v22 = 0;
  }
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_27;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_27:
  v16 = v20;
  if (v20 == v19)
  {
    v17 = 4;
    v16 = v19;
    goto LABEL_31;
  }
  if (v20)
  {
    v17 = 5;
LABEL_31:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return v11;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  mlir::MLIRContext *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *Shape;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  MirInfoChannelAssignment *v25;
  MirInfoChannelAssignment *v26;
  MirInfoChannelAssignment *v27;
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::MLIRContext *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t ElementTypeOrSelf;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  MirInfoChannelAssignment *v51;
  MirInfoChannelAssignment *v52;
  MirInfoChannelAssignment *v53;
  char v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v68[2];
  _QWORD __src[2];
  void *__b;
  uint64_t v71;
  _BYTE v72[48];
  void *v73[2];
  _BYTE v74[32];
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v75 = a6;
  LOBYTE(v76) = 0;
  v77 = 0;
  v78 = a9;
  v79 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v75);
    if (v77)
      v77 = 0;
    mlir::OperationName::OperationName(&v76, "mpsx.sparse_dense_matmul", 24, Context);
    v77 = 1;
  }
  v80 = a4;
  v81 = a5;
  if (a5 >= 4)
  {
    v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mpsx::SparseDenseMatMulOpAdaptor::verify(&v75, v15))
    {
      v73[0] = v74;
      v73[1] = (void *)0x400000000;
      __b = v80;
      v71 = 3;
      __b = (void *)mlir::ValueRange::offset_base(&__b, 3);
      v71 = 0;
      v16 = mlir::ValueRange::dereference_iterator(&__b, 0);
      if (mlir::matchConstantWithIntVector<long long>(v16, (uint64_t)v73))
      {
        __b = v80;
        v71 = 4;
        __b = (void *)mlir::ValueRange::offset_base(&__b, 4);
        v71 = 0;
        v18 = mlir::ValueRange::dereference_iterator(&__b, 0);
        v68[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
        v68[1] = v19;
        if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68) & 1) != 0)
        {
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68))
          {
            Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v68);
            if (!v21)
            {
LABEL_14:
              v23 = *(_QWORD *)v73[0];
              v24 = *((_QWORD *)v73[0] + 1);
              v25 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75) + 16);
              v26 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v75);
              v27 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v25, v26, *(_QWORD *)(*(_QWORD *)(v76 + 96) + 8));
              if ((v28 & 1) != 0 && (v29 = (void *)*((_QWORD *)v27 + 1)) != 0)
              {
                if (mlir::BoolAttr::classof(*((_QWORD **)v27 + 1)))
                  v30 = v29;
                else
                  v30 = 0;
              }
              else
              {
                v30 = 0;
              }
              __b = v30;
              if (!mlir::BoolAttr::getValue((mlir::BoolAttr *)&__b))
                v24 = v23;
              mlir::ShapedType::getShape((mlir::ShapedType *)v68);
              v48 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v68) + 8 * (v47 - 2));
              mlir::ShapedType::getShape((mlir::ShapedType *)v68);
              v50 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v68) + 8 * (v49 - 1));
              v51 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75) + 16);
              v52 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v75);
              v53 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v51, v52, *(_QWORD *)(*(_QWORD *)(v76 + 96) + 16));
              if ((v54 & 1) != 0 && (v55 = (void *)*((_QWORD *)v53 + 1)) != 0)
              {
                if (mlir::BoolAttr::classof(*((_QWORD **)v53 + 1)))
                  v56 = v55;
                else
                  v56 = 0;
              }
              else
              {
                v56 = 0;
              }
              __b = v56;
              if (mlir::BoolAttr::getValue((mlir::BoolAttr *)&__b))
                v50 = v48;
              __b = v72;
              v71 = 0x400000000;
              v57 = mlir::ShapedType::getShape((mlir::ShapedType *)v68);
              v59 = v71;
              if (v57 + 8 * v58 - 16 != v57)
              {
                v60 = (uint64_t *)v57;
                v61 = 8 * v58 - 16;
                do
                {
                  v62 = *v60;
                  if (v59 >= HIDWORD(v71))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v72, v59 + 1, 8);
                    v59 = v71;
                  }
                  *((_QWORD *)__b + v59) = v62;
                  v59 = v71 + 1;
                  LODWORD(v71) = v71 + 1;
                  ++v60;
                  v61 -= 8;
                }
                while (v61);
              }
              __src[0] = v24;
              __src[1] = v50;
              llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&__b, (uint64_t)__b + 8 * v59, (char *)__src, (char *)&__b);
              v63 = __b;
              v64 = v71;
              ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68[0]);
              v45 = (uint64_t)v63;
              v46 = v64;
LABEL_54:
              v65 = mlir::RankedTensorType::get(v45, v46, ElementTypeOrSelf, 0);
              v66 = *(unsigned int *)(a11 + 8);
              if (v66 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v66 + 1, 8);
                LODWORD(v66) = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v66) = v65;
              ++*(_DWORD *)(a11 + 8);
              if (__b != v72)
                free(__b);
              goto LABEL_58;
            }
            v22 = 8 * v21;
            while (*Shape != 0x8000000000000000)
            {
              ++Shape;
              v22 -= 8;
              if (!v22)
                goto LABEL_14;
            }
          }
          mlir::ShapedType::getShape((mlir::ShapedType *)v68);
          v42 = v41;
          __b = v72;
          HIDWORD(v71) = 6;
          if (v41 < 7)
          {
            if (v41)
              memset_pattern16(v72, &unk_207AB7410, 8 * v41);
            v43 = v72;
          }
          else
          {
            LODWORD(v71) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v72, v41, 8);
            v43 = __b;
            memset_pattern16(__b, &unk_207AB7410, 8 * v42);
          }
          LODWORD(v71) = v42;
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68[0]);
          v45 = (uint64_t)v43;
          v46 = v42;
          goto LABEL_54;
        }
        v37 = mlir::getElementTypeOrSelf(v68[0]);
        if (!v37)
          v37 = mlir::Float32Type::get(this, v38);
        v39 = mlir::UnrankedTensorType::get(v37);
        v40 = *(_DWORD *)(a11 + 8);
        if (v40 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v40 + 1, 8);
          v40 = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v40) = v39;
      }
      else
      {
        v34 = mlir::Float32Type::get(this, v17);
        v35 = mlir::UnrankedTensorType::get(v34);
        v36 = *(unsigned int *)(a11 + 8);
        if (v36 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
          LODWORD(v36) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
      }
      ++*(_DWORD *)(a11 + 8);
LABEL_58:
      if (v73[0] != v74)
        free(v73[0]);
      return 1;
    }
  }
  v31 = mlir::Float32Type::get(this, a2);
  v32 = mlir::UnrankedTensorType::get(v31);
  v33 = *(unsigned int *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    LODWORD(v33) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::SparseDenseMatMulOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
        ;
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
    {
      v5 = "'mpsx.sparse_dense_matmul' op requires attribute 'storage_type'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      {
        v10 = (_QWORD *)*((_QWORD *)i + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      {
        v9 = (_QWORD *)*((_QWORD *)i + 1);
      }
      i = (MirInfoChannelAssignment *)((char *)i + 16);
    }
    while (i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13));
    if (v10 && !mlir::BoolAttr::classof(v10))
    {
      v5 = "'mpsx.sparse_dense_matmul' op attribute 'transpose_lhs' failed to satisfy constraint: BOOL attribute";
      goto LABEL_6;
    }
    if (v9 && !mlir::BoolAttr::classof(v9))
    {
      v5 = "'mpsx.sparse_dense_matmul' op attribute 'transpose_rhs' failed to satisfy constraint: BOOL attribute";
      goto LABEL_6;
    }
  }
  if (!v8
    || *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
  {
    return 1;
  }
  v5 = "'mpsx.sparse_dense_matmul' op attribute 'storage_type' failed to satisfy constraint: valid SparseTensorStorage";
LABEL_6:
  v11 = v5;
  v12 = 259;
  mlir::emitError(a2, (uint64_t)&v11, (uint64_t)&v14);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v6;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::verify(mlir::Operation **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int Kind;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  const void **v15;
  __int16 v16;
  uint64_t v17;
  uint64_t ElementTypeOrSelf;
  void *v19;
  uint64_t v20;
  _QWORD v21[23];

  v21[22] = *MEMORY[0x24BDAC8D0];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v17 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 152) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (ElementTypeOrSelf == v17)
  {
    v19 = v21;
    v20 = 0x600000000;
    if (mlir::matchConstantWithIntVector<long long>(*(_QWORD *)(*((_QWORD *)*this + 9) + 120), (uint64_t)&v19))
    {
      v3 = (_QWORD *)*((_QWORD *)*this + 9);
      v4 = v3[3];
      v5 = v3[7];
      v6 = v3[11];
      v11[0] = mlir::anec::BatchToSpace::getFactorsAttr(this);
      Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)v11);
      v8 = *(_QWORD *)v19;
      v9 = *((_QWORD *)v19 + 1);
      v11[0] = this;
      v2 = mlir::mps::verifySparseTensorHelper(v4, v5, v6, Kind, v8, v9, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mpsx::SparseDenseMatMulOp::verify(void)::$_0>, (uint64_t)v11) != 0;
    }
    else
    {
      v2 = 1;
    }
    if (v19 != v21)
      free(v19);
  }
  else
  {
    v11[0] = "failed: expected same element type between the sparse and the dense matrix, but got {0} and {1}";
    v11[1] = 95;
    v11[2] = v14;
    v11[3] = 2;
    v12[0] = &off_24C02E5E8;
    v12[1] = &ElementTypeOrSelf;
    v13[0] = &off_24C02E5E8;
    v13[1] = &v17;
    v14[0] = v12;
    v14[1] = v13;
    v16 = 263;
    v15 = (const void **)v11;
    mlir::OpState::emitOpError((uint64_t **)this, &v15, (uint64_t)&v19);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v19);
    if (v19)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v20);
  }
  return v2;
}

uint64_t mlir::mpsx::getAxis(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t matched;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14;

  v14 = a4;
  matched = mlir::matchConstantWithIntValue<long long>(a3);
  v13[0] = matched;
  v13[1] = v10;
  v11 = 1;
  if ((_BYTE)v10)
  {
    *(_QWORD *)a5 = matched;
    *(_BYTE *)(a5 + 8) = 1;
    if (matched < 0)
    {
      matched += a4;
      *(_QWORD *)a5 = matched;
      if (matched < 0)
        return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", v13, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
    }
    if (matched >= a4)
      return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", v13, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
  }
  return v11;
}

unint64_t mlir::matchConstantWithIntValue<long long>(uint64_t a1)
{
  uint64_t DefiningOp;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t SingleInt;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12[2];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp)
    goto LABEL_10;
  v2 = DefiningOp;
  v3 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v3))
    goto LABEL_10;
  v12[0] = v13;
  v12[1] = (void *)0x100000000;
  mlir::Operation::fold(v2, 0, 0, (uint64_t)v12);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v12[0] & 0xFFFFFFFFFFFFFFF8));
  v6 = v5 ? v4 : 0;
  if (v12[0] != v13)
    free(v12[0]);
  if (v5)
  {
    SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v5, v6);
    v8 = SingleInt & 0xFFFFFFFFFFFFFF00;
    v9 = SingleInt;
  }
  else
  {
LABEL_10:
    v9 = 0;
    v8 = 0;
  }
  return v8 | v9;
}

uint64_t mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, char *a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v14);
  if (v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, a3);
    mlir::Diagnostic::append<long long &,char const(&)[47],char const(&)[9],long long &>((uint64_t)v15, a4, a5, a6, a7);
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v12;
}

uint64_t mlir::mpsx::QuantizedGatherOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  MirInfoChannelAssignment *v23;
  uint64_t v24;
  MirInfoChannelAssignment *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *Value;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int BatchDims;
  unint64_t *Shape;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];
  void *v56;
  uint64_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD v66[4];

  v66[2] = *MEMORY[0x24BDAC8D0];
  v66[0] = a4;
  v66[1] = a5;
  v59 = a6;
  LOBYTE(v60) = 0;
  v61 = 0;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61)
      v61 = 0;
    mlir::OperationName::OperationName(&v60, "mpsx.quantized_gather", 21, Context);
    v61 = 1;
  }
  v64 = a4;
  v65 = a5;
  if (a5 < 4
    || (v17 = mlir::UnknownLoc::get(this, a2), !mlir::mpsx::QuantizedGatherOpAdaptor::verify(&v59, v17)))
  {
    v28 = mlir::Float32Type::get(this, a2);
    v29 = mlir::UnrankedTensorType::get(v28);
    v30 = *(unsigned int *)(a11 + 8);
    if (v30 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v30 + 1, 8);
      LODWORD(v30) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v30) = v29;
    goto LABEL_14;
  }
  v18 = mlir::ValueRange::dereference_iterator(v66, 0);
  v55[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
  v55[1] = v19;
  v20 = mlir::ValueRange::dereference_iterator(v66, 1);
  v21 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  v54[0] = v21;
  v54[1] = v22;
  if (!v55[0] || !v21)
  {
    v32 = mlir::ValueRange::dereference_iterator(v66, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v32);
    if (!ElementTypeOrSelf)
      ElementTypeOrSelf = mlir::Float32Type::get(this, v34);
    v35 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v36 = *(_DWORD *)(a11 + 8);
    if (v36 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
      v36 = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
    goto LABEL_14;
  }
  v23 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59) + 16);
  v24 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v59);
  v25 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v23, (MirInfoChannelAssignment *)(v24 - 16), *(_QWORD *)(*(_QWORD *)(v60 + 96) + 16));
  if ((v26 & 1) != 0)
    v27 = *((_QWORD *)v25 + 1);
  else
    v27 = 0;
  v53 = v27;
  Value = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v53);
  v38 = mlir::getElementTypeOrSelf(Value);
  v39 = mlir::UnrankedTensorType::get(v38);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v55)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v54))
  {
    goto LABEL_30;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v55);
  v41 = v40;
  LOBYTE(v51) = 0;
  v52 = 0;
  v42 = mlir::ValueRange::dereference_iterator(v66, 2);
  if (mlir::mpsx::getAxis((uint64_t)a2, a3, v42, v41, (uint64_t)&v51))
  {
    if (!v52)
      goto LABEL_30;
    BatchDims = mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase::getBatchDims((mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase *)&v59);
    v56 = v58;
    v57 = 0x400000000;
    Shape = (unint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v55);
    v46 = v45;
    v47 = (unint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v54);
    if (v49)
      v39 = mlir::RankedTensorType::get((uint64_t)v56, v57, v38, 0);
    if (v56 != v58)
      free(v56);
    if (v49)
    {
LABEL_30:
      v50 = *(unsigned int *)(a11 + 8);
      if (v50 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
        LODWORD(v50) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v39;
LABEL_14:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::mpsx::QuantizedGatherOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *Value;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  const char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[20];

  v31[19] = *MEMORY[0x24BDAC8D0];
  v23 = *a1;
  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v23);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
  {
LABEL_7:
    v6 = "'mpsx.quantized_gather' op requires attribute 'batch_dims'";
LABEL_18:
    v21[0] = v6;
    v22 = 259;
    mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
LABEL_19:
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
    if (v26)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v27);
    return v9;
  }
  v5 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      v5 = *((_QWORD *)Value + 1);
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
      goto LABEL_7;
  }
  v7 = *((_QWORD *)Value + 1);
  while (1)
  {
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
    {
      v6 = "'mpsx.quantized_gather' op requires attribute 'dtype'";
      goto LABEL_18;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      break;
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
  }
  v8 = *((_QWORD *)Value + 1);
  while (1)
  {
    if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
    {
      v6 = "'mpsx.quantized_gather' op requires attribute 'operandSegmentSizes'";
      goto LABEL_18;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      break;
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
  }
  v20 = *((_QWORD *)Value + 1);
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v20);
  if (v11 != 6)
  {
    v12 = v11;
    v21[0] = "'mpsx.quantized_gather' op 'operandSegmentSizes' attribute for specifying operand segments must have 6 elements, but got ";
    v22 = 259;
    mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
    if (v26)
    {
      v24 = 5;
      v25 = v12;
      v13 = &v24;
      v14 = v28;
      if (v29 >= v30)
      {
        v18 = v29 + 1;
        if (v28 <= (unint64_t)&v24 && v28 + 24 * v29 > (unint64_t)&v24)
        {
          v19 = (char *)&v24 - v28;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v18, 24);
          v14 = v28;
          v13 = (int *)&v19[v28];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v18, 24);
          v13 = &v24;
          v14 = v28;
        }
      }
      v15 = v14 + 24 * v29;
      v16 = *(_OWORD *)v13;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      ++v29;
    }
    goto LABEL_19;
  }
  if (v8)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v6 = "'mpsx.quantized_gather' op attribute 'dtype' failed to satisfy constraint: any type attribute";
      goto LABEL_18;
    }
    v26 = v8;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  }
  if (!v7
    || *(_UNKNOWN **)(*(_QWORD *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v21[0] = v7,
        v26 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v21),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v26, 32)))
  {
    if (!v5 || *(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 1;
    v17 = "'mpsx.quantized_gather' op attribute 'allow_negative_indices' failed to satisfy constraint: unit attribute";
  }
  else
  {
    v17 = "'mpsx.quantized_gather' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
  }
  v21[0] = v17;
  v22 = 259;
  mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v26);
  return v9;
}

uint64_t *mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase::getBatchDims(mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase *this)
{
  MirInfoChannelAssignment *Value;
  uint64_t v3;
  MirInfoChannelAssignment *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;

  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue(this);
  v3 = mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v3 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 8));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&v9);
  if (v10 <= 0x40)
    return v9;
  v7 = *v9;
  MEMORY[0x20BD002D4]();
  return (uint64_t *)v7;
}

uint64_t mlir::mpsx::`anonymous namespace'::inferQuantizedGatherShape(uint64_t a1, char a2, unint64_t *a3, unint64_t a4, unint64_t *a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v16;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  unint64_t *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t *v62;
  uint64_t v63;
  __int128 v64;
  unint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76[3];

  v76[2] = *MEMORY[0x24BDAC8D0];
  v75 = a7;
  v74 = a8;
  v10 = a8;
  v11 = a4 - a8;
  if (a4 <= a8 || a6 < a8)
    return mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(a1, a2, "invalid batch dimensions: ", &v74, ", must be less than ranks of all input tensors");
  v16 = a7 - a8;
  if (a7 < a8)
    return mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(a1, a2, "Axis must be greater than or equal to ", "batch dimensions, ", &v75, " < ", &v74);
  v19 = a6 - a8;
  v20 = v11 - 1;
  if ((uint64_t)(v11 - 1 + v19) < 0)
    return mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(a1, a2, "Rank of destination array must be greater than or equal ", "to 0");
  v22 = v20 + a6;
  v23 = *(unsigned int *)(a9 + 8);
  if (v20 + a6 != v23)
  {
    if (v20 + a6 >= v23)
    {
      v72 = a7 - a8;
      v73 = v11;
      v71 = a6 - a8;
      if (v22 > *(unsigned int *)(a9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v20 + a6, 8);
        v19 = v71;
        v16 = v72;
        v11 = v73;
        v23 = *(unsigned int *)(a9 + 8);
      }
      if (v22 != v23)
      {
        bzero((void *)(*(_QWORD *)a9 + 8 * v23), 8 * (v22 - v23));
        v19 = v71;
        v16 = v72;
        v11 = v73;
      }
    }
    *(_DWORD *)(a9 + 8) = v22;
    v23 = v22;
  }
  v24 = &a3[a4];
  v25 = *(unint64_t **)a9;
  v26 = *(_QWORD *)a9 + 8 * v23;
  v27 = v16 - v20;
  if (v16 != v20)
  {
    v28 = 8 * a4 - 16;
    v29 = v28 - 8 * a7;
    if (v29 < 0x78)
    {
      v30 = (char *)&a3[a4];
      v31 = &v25[v23];
LABEL_24:
      v38 = v31 - 1;
      do
      {
        v39 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *v38-- = v39;
      }
      while (v30 != (char *)&v24[v27]);
      goto LABEL_26;
    }
    v30 = (char *)&a3[a4];
    v31 = &v25[v23];
    if (v30 - (char *)v25 - 8 * v23 < 0x20)
      goto LABEL_24;
    v32 = (v29 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = (char *)&v24[v33 / 0xFFFFFFFFFFFFFFF8];
    v31 = (unint64_t *)(v26 - v33);
    v34 = &v25[v23 - 2];
    v35 = (__int128 *)((char *)a3 + v28);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 4;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_24;
  }
LABEL_26:
  if (a6 != v10)
  {
    v40 = &a5[a6];
    v41 = v26 + 8 * v27;
    v42 = 8 * a6 - 8 * v10 - 8;
    if (v42 >= 0x98)
    {
      v44 = v23 + a7;
      v43 = &a5[a6];
      if ((unint64_t)v43 + 8 * a4 - (_QWORD)&v25[v44] - 8 >= 0x20)
      {
        v45 = (v42 >> 3) + 1;
        v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
        v43 = &v40[v46 / 0xFFFFFFFFFFFFFFF8];
        v41 -= v46;
        v47 = (_OWORD *)((char *)v25 + v44 * 8 - 8 * a4 - 8);
        v48 = &a5[a6 - 2];
        v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v50 = *(_OWORD *)v48;
          *(v47 - 1) = *((_OWORD *)v48 - 1);
          *v47 = v50;
          v47 -= 2;
          v48 -= 4;
          v49 -= 4;
        }
        while (v49);
        if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_35;
      }
    }
    else
    {
      v43 = &a5[a6];
    }
    v51 = &v40[-v19];
    v52 = (_QWORD *)(v41 - 8);
    do
    {
      v53 = *--v43;
      *v52-- = v53;
    }
    while (v43 != v51);
  }
LABEL_35:
  if (a7 != v10)
  {
    v54 = v26 + 8 * (v16 - (v11 + v19)) + 8;
    v55 = &v24[v16 - v11];
    v56 = 8 * a7 - 8 * v10 - 8;
    if (v56 < 0xB8)
      goto LABEL_41;
    v57 = v23 + a7 + v10;
    v58 = 8 * (a6 + a4);
    if ((unint64_t)&a3[a7 - 1] + v58 - (_QWORD)&v25[v57] < 0x20)
      goto LABEL_41;
    v59 = (v56 >> 3) + 1;
    v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    v55 = (unint64_t *)((char *)v55 - v60);
    v54 -= v60;
    v61 = (_OWORD *)((char *)v25 + v57 * 8 - v58 - 8);
    v62 = &a3[a7 - 2];
    v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 4;
      v63 -= 4;
    }
    while (v63);
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      v65 = &v24[-v11];
      v66 = (_QWORD *)(v54 - 8);
      do
      {
        v67 = *--v55;
        *v66-- = v67;
      }
      while (v55 != v65);
    }
  }
  if (a8)
  {
    v68 = 8 * v10;
    do
    {
      v69 = *a5++;
      v76[0] = v69;
      v70 = *a3++;
      v76[1] = v70;
      *v25++ = mlir::mps::mergeDynamicDims(v76, 2);
      v68 -= 8;
    }
    while (v68);
  }
  return 1;
}

BOOL mlir::mpsx::QuantizedGatherOp::verify(mlir::Operation **this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *Shape;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int ODSOperandIndexAndLength;
  _QWORD *v39;
  uint64_t v40;
  unsigned int **v41;
  unsigned int v42;
  uint64_t ZeroPoint;
  uint64_t Min;
  unint64_t v45;
  char *v46;
  const void **v47[4];
  __int16 v48;
  unint64_t v49;
  _QWORD v50[2];
  _QWORD v51[2];
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  _QWORD v55[2];
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  _QWORD v59[20];

  v59[19] = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9)
                                         + 32
                                         * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 0)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v51[0] = v2;
  v51[1] = v12;
  v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9)
                                          + 32
                                          * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 1)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13)
    goto LABEL_20;
  v14 = *v13;
  v15 = mlir::TypeID::get<mlir::ShapedType>();
  v16 = *(unsigned int *)(v14 + 16);
  if (!(_DWORD)v16)
    goto LABEL_20;
  v17 = *(_QWORD **)(v14 + 8);
  v18 = &v17[2 * v16];
  do
  {
    v19 = v16 >> 1;
    v20 = &v17[2 * (v16 >> 1)];
    v22 = *v20;
    v21 = v20 + 2;
    v16 += ~(v16 >> 1);
    if (v22 < v15)
      v17 = v21;
    else
      v16 = v19;
  }
  while (v16);
  if (v17 != v18 && *v17 == v15)
    v23 = v17[1];
  else
LABEL_20:
    v23 = 0;
  v50[0] = v13;
  v50[1] = v23;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51))
  {
    Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v51);
    v26 = v25;
  }
  else
  {
    Shape = 0;
    v26 = 0x8000000000000000;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50))
  {
    v27 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v50);
    v29 = v28;
  }
  else
  {
    v27 = 0;
    v29 = 0x8000000000000000;
  }
  v47[0] = (const void **)mlir::anec::AveragePool::getKsizeAttr(this);
  mlir::IntegerAttr::getValue(v47, (llvm::APInt *)&v54);
  if (LODWORD(v55[0]) > 0x40)
  {
    v30 = *v54;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    v30 = v54;
  }
  v49 = v30;
  if ((v26 == 0x8000000000000000 || v30 < v26) && (v29 == 0x8000000000000000 || v30 <= v29))
  {
    v35 = 1;
    if (v26 == 0x8000000000000000 || v29 == 0x8000000000000000)
      return v35;
    if (mlir::verifyCompatibleShape(Shape, v30, v27, v30))
    {
      LOBYTE(v52) = 0;
      LOBYTE(v53) = 0;
      v37 = *((_QWORD *)*this + 3);
      ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 2);
      if (!mlir::mpsx::getAxis(v37, 1, *(_QWORD *)(*((_QWORD *)*this + 9) + 32 * ODSOperandIndexAndLength + 24), v26, (uint64_t)&v52))return 0;
      if (!(_BYTE)v53)
        return v35;
      if (v52 < v30)
      {
        v47[0] = (const void **)"Axis must be greater than or equal to batch ";
        v48 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&v54);
        if (v54)
          mlir::Diagnostic::operator<<((uint64_t)v55, "dimensions, ");
        v39 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v54, (uint64_t *)&v52);
        v40 = (uint64_t)v39;
        if (*v39)
          mlir::Diagnostic::operator<<((uint64_t)(v39 + 1), " < ");
        v41 = (unsigned int **)mlir::InFlightDiagnostic::operator<<<unsigned long>(v40, (uint64_t *)&v49);
        goto LABEL_58;
      }
      if ((uint64_t)(v26 + v29 - 1) >= 0)
      {
        v54 = (unsigned int *)v51;
        v55[0] = this;
        if (!v51[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51))
          return v35;
        v42 = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 3);
        if (mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&v54, "scale", *(_QWORD *)(*((_QWORD *)*this + 9) + 32 * v42 + 24)))
        {
          ZeroPoint = mlir::mpsx::QuantizedGatherOp::getZeroPoint(this);
          if (mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&v54, "zeroPoint", ZeroPoint))
          {
            Min = mlir::mpsx::QuantizedGatherOp::getMin(this);
            return mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&v54, "min", Min) != 0;
          }
        }
        return 0;
      }
      v47[0] = (const void **)"Rank of destination array must be greater than or equal to 0";
      v48 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&v54);
    }
    else
    {
      v47[0] = (const void **)"invalid input tensor shapes: input tensor shapes ";
      v48 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&v54);
      if (v54)
        mlir::Diagnostic::operator<<((uint64_t)v55, "must match along batch dimensions");
    }
    v41 = &v54;
LABEL_58:
    v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v54);
    return v35;
  }
  v47[0] = (const void **)"invalid batch dimensions: ";
  v48 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&v54);
  if (v54)
  {
    LODWORD(v52) = 5;
    v53 = v30;
    v31 = &v52;
    v32 = v56;
    if (v57 >= v58)
    {
      v45 = v57 + 1;
      if (v56 <= (unint64_t)&v52 && v56 + 24 * v57 > (unint64_t)&v52)
      {
        v46 = (char *)&v52 - v56;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
        v32 = v56;
        v31 = (unint64_t *)&v46[v56];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
        v31 = &v52;
        v32 = v56;
      }
    }
    v33 = v32 + 24 * v57;
    v34 = *(_OWORD *)v31;
    *(_QWORD *)(v33 + 16) = v31[2];
    *(_OWORD *)v33 = v34;
    ++v57;
    if (v54)
      mlir::Diagnostic::operator<<((uint64_t)v55, ", must be less than ranks of all input tensors");
  }
  v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
  if (v54)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v55);
  return v35;
}

uint64_t mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  int *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  const void **v38[4];
  __int16 v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[20];

  v48[19] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 1;
  v5 = *(uint64_t ***)(a1 + 8);
  v40[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v40[1] = v6;
  if (!v40[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v40))
    return 1;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v40)
    || (mlir::ShapedType::getShape((mlir::ShapedType *)v40),
        v8 = v7,
        mlir::ShapedType::getShape(*(mlir::ShapedType **)a1),
        v8 == v9))
  {
    mlir::ShapedType::getShape(*(mlir::ShapedType **)a1);
    if (v10 >= 1)
    {
      v11 = 0;
      while (1)
      {
        v13 = 8 * v11;
        v14 = *(_QWORD *)(mlir::ShapedType::getShape(*(mlir::ShapedType **)a1) + v13);
        v15 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v40) + v13);
        v16 = v14 == 0x8000000000000000 || v15 == 0x8000000000000000;
        if (!v16 && v14 % v15)
          break;
        ++v11;
        mlir::ShapedType::getShape(*(mlir::ShapedType **)a1);
        if (v11 >= v12)
          return 1;
      }
      v39 = 257;
      mlir::OpState::emitOpError(v5, v38, (uint64_t)&v43);
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, a2);
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, " shape not compatible with updates for axis ");
      if (!v43)
        goto LABEL_32;
      v41 = 2;
      v42 = v11;
      v17 = &v41;
      v18 = v45;
      if (v46 >= v47)
      {
        v32 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          v35 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v32, 24);
          v18 = v45;
          v17 = (int *)&v35[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v32, 24);
          v17 = &v41;
          v18 = v45;
        }
      }
      v19 = v18 + 24 * v46;
      v20 = *(_OWORD *)v17;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v19 = v20;
      ++v46;
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, ": ");
      if (!v43)
        goto LABEL_32;
      v41 = 2;
      v42 = v14;
      v21 = &v41;
      v22 = v45;
      if (v46 >= v47)
      {
        v33 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          v36 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
          v22 = v45;
          v21 = (int *)&v36[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
          v21 = &v41;
          v22 = v45;
        }
      }
      v23 = v22 + 24 * v46;
      v24 = *(_OWORD *)v21;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      ++v46;
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, " % ");
      if (!v43)
        goto LABEL_32;
      v41 = 2;
      v42 = v15;
      v25 = &v41;
      v26 = v45;
      if (v46 >= v47)
      {
        v34 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          v37 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
          v26 = v45;
          v25 = (int *)&v37[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
          v25 = &v41;
          v26 = v45;
        }
      }
      v27 = v26 + 24 * v46;
      v28 = *(_OWORD *)v25;
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v27 = v28;
      ++v46;
      if (!v43)
        goto LABEL_32;
      v29 = " != 0";
      goto LABEL_31;
    }
    return 1;
  }
  v39 = 257;
  mlir::OpState::emitOpError(v5, v38, (uint64_t)&v43);
  if (!v43)
    goto LABEL_32;
  mlir::Diagnostic::operator<<((uint64_t)v44, a2);
  if (!v43)
    goto LABEL_32;
  v29 = " rank doesn't match the rank of updates";
LABEL_31:
  mlir::Diagnostic::operator<<((uint64_t)v44, v29);
LABEL_32:
  v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
  if (v43)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
  return v30;
}

uint64_t mlir::mpsx::QuantizedGatherOp::getZeroPoint(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 4);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedGatherOp::getMin(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 5);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::MakeListOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  MirInfoChannelAssignment *Value;
  MirInfoChannelAssignment *v17;
  MirInfoChannelAssignment *v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  unsigned __int8 **TypeUniquer;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  mlir::UnknownLoc *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v29 = a6;
  LOBYTE(v30) = 0;
  v31 = 0;
  v32 = a9;
  v33 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31)
      v31 = 0;
    mlir::OperationName::OperationName(&v30, "mpsx.make_list", 14, Context);
    v31 = 1;
  }
  v34 = a4;
  v35 = a5;
  v15 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mpsx::MakeListOpAdaptor::verify(&v29, v15))
    return 0;
  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v29);
  v17 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v29);
  v18 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v17, **(_QWORD **)(v30 + 96));
  if ((v19 & 1) != 0)
    v20 = *((_QWORD *)v18 + 1);
  else
    v20 = 0;
  v27[0] = v20;
  v26 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27);
  v22 = mlir::TypeID::get<mlir::mpsx::ListType>();
  v28 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v27[0] = v22;
  v27[1] = &v28;
  v24 = mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_, (uint64_t)v27, v22, &v26);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::MakeListOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  uint64_t Value;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
        ;
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
    {
      v5 = "'mpsx.make_list' op requires attribute 'element_type'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(i))
        v9 = *((_QWORD *)i + 1);
      i = (MirInfoChannelAssignment *)((char *)i + 16);
    }
    while (i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13));
  }
  if (!v8
    || *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
    && (Value = v8,
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value),
        v11[0] = v8,
        v10 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11),
        mlir::mpsx::isMPSXListElementType(v10)))
  {
    if (!v9)
      return 1;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v11[0] = v9;
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
        return 1;
    }
    v5 = "'mpsx.make_list' op attribute 'max_size' failed to satisfy constraint: 32-bit unsigned integer attribute";
  }
  else
  {
    v5 = "'mpsx.make_list' op attribute 'element_type' failed to satisfy constraint: any type attribute MPSX list element type attribute";
  }
LABEL_6:
  v11[0] = v5;
  v12 = 259;
  mlir::emitError(a2, (uint64_t)v11, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v6;
}

uint64_t mlir::mpsx::ListPushBackOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  unint64_t v15[2];
  unint64_t v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v16, (uint64_t)&v11, 1uLL);
  v9[0] = *(const void ***)(v3 + 8);
  mlir::ValueRange::ValueRange(v15, (uint64_t)v9, 1uLL);
  v13[0] = &off_24BFFA2E0;
  v14 = v13;
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if ((v4 & 1) != 0)
    return 1;
  v9[0] = (const void **)"list's element_type and element's type are not compatible";
  v10 = 259;
  mlir::OpState::emitOpError(this, v9, (uint64_t)&v11);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v12);
  return v7;
}

uint64_t mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2 != a4)
    return 0;
  v6 = v18;
  v18[0] = &off_24C05A368;
  v18[1] = v18;
  v18[2] = a5;
  v19 = v18;
  if (!a2)
  {
    v13 = 1;
    v14 = 4;
    goto LABEL_16;
  }
  v8 = 0;
  v9 = a2 - 1;
  do
  {
    v10 = mlir::TypeRange::dereference_iterator(a1, v8);
    v16 = mlir::TypeRange::dereference_iterator(a3, v8);
    v17 = v10;
    if (!v19)
      std::__throw_bad_function_call[abi:nn180100]();
    v11 = (*(uint64_t (**)(_QWORD *, unint64_t *, unint64_t *))(*v19 + 48))(v19, &v17, &v16);
    if ((_DWORD)v11)
      v12 = v9 == v8;
    else
      v12 = 1;
    ++v8;
  }
  while (!v12);
  v13 = v11;
  v6 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v6 = v18;
    goto LABEL_16;
  }
  if (v19)
  {
    v14 = 5;
LABEL_16:
    (*(void (**)(void))(*v6 + 8 * v14))();
  }
  return v13;
}

uint64_t mlir::mpsx::ANEOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::ANEOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::GPUOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::GPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::CPUOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::CPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::InterleaveOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  uint64_t v18;
  const void *Shape;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t Axis;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD v36[2];
  void *v37;
  uint64_t v38;
  _BYTE v39[40];
  uint64_t v40;
  _BYTE v41[8];
  char v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v40 = a6;
  v41[0] = 0;
  v42 = 0;
  v43 = a9;
  v44 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v40);
    if (v42)
      v42 = 0;
    mlir::OperationName::OperationName(v41, "mpsx.interleave", 15, Context);
    v42 = 1;
  }
  v45 = a4;
  v46 = a5;
  if (a5
    && (v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::InterleaveOpAdaptor::verify(&v40, v15))
    && (v37 = v45,
        v38 = 0,
        v16 = mlir::ValueRange::dereference_iterator(&v37, 0),
        v36[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v36[1] = a2,
        v36[0]))
  {
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36) & 1) != 0)
    {
      Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
      v20 = v18;
      v37 = v39;
      v38 = 0x500000000;
      v21 = 8 * v18;
      if ((unint64_t)(8 * v18) < 0x29)
      {
        v22 = 0;
        if (!v18)
        {
LABEL_20:
          v27 = v22 + (v21 >> 3);
          LODWORD(v38) = v27;
          if ((unint64_t)(v27 - 6) > 0xFFFFFFFFFFFFFFFDLL)
          {
            Axis = mlir::anec::detail::ConcatGenericAdaptorBase::getAxis((mlir::anec::detail::ConcatGenericAdaptorBase *)&v40);
            v30 = 1;
            if ((_DWORD)v27 != 4)
              v30 = 2;
            v31 = v37;
            v32 = *((_QWORD *)v37 + v30);
            if (v32 != 0x8000000000000000)
              *((_QWORD *)v37 + v30) = v32 / Axis;
            v33 = v31[v27 - 1];
            if (v33 != 0x8000000000000000)
              v31[v27 - 1] = v33 * Axis;
            v28 = mlir::RankedTensorType::get((uint64_t)v31, v38, OperandRange, 0);
          }
          else
          {
            v28 = mlir::UnrankedTensorType::get(OperandRange);
          }
          v34 = v28;
          v35 = *(_DWORD *)(a11 + 8);
          if (v35 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
            v35 = *(_DWORD *)(a11 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v34;
          ++*(_DWORD *)(a11 + 8);
          if (v37 != v39)
            free(v37);
          return 1;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, (8 * v18) >> 3, 8);
        v22 = v38;
        if (!v20)
          goto LABEL_20;
      }
      memcpy((char *)v37 + 8 * v22, Shape, v21);
      v22 = v38;
      goto LABEL_20;
    }
    v23 = OperandRange;
  }
  else
  {
    v23 = mlir::Float32Type::get(this, a2);
  }
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::InterleaveOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t Shape;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  int *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  _QWORD v39[2];
  const void **v40[4];
  __int16 v41;
  mlir::Operation *v42;
  int v43;
  uint64_t v44;
  mlir *v45;
  _DWORD v46[4];
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v50[20];

  v50[19] = *MEMORY[0x24BDAC8D0];
  v1 = *this;
  v42 = (mlir::Operation *)*this;
  v40[0] = (const void **)mlir::anec::BatchToSpace::getFactorsAttr(&v42);
  mlir::IntegerAttr::getValue(v40, (llvm::APInt *)&v45);
  if (v46[0] > 0x40u)
  {
    v2 = *(unsigned int *)v45;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    v2 = v45;
  }
  mlir::getANENextSupportedInterleaveValue(v2);
  if (v3)
  {
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4)
      goto LABEL_14;
    v5 = *v4;
    v6 = mlir::TypeID::get<mlir::ShapedType>();
    v7 = *(unsigned int *)(v5 + 16);
    if (!(_DWORD)v7)
      goto LABEL_14;
    v8 = *(_QWORD **)(v5 + 8);
    v9 = &v8[2 * v7];
    do
    {
      v10 = v7 >> 1;
      v11 = &v8[2 * (v7 >> 1)];
      v13 = *v11;
      v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6)
        v8 = v12;
      else
        v7 = v10;
    }
    while (v7);
    if (v8 != v9 && *v8 == v6)
      v14 = v8[1];
    else
LABEL_14:
      v14 = 0;
    v39[0] = v4;
    v39[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39))
    {
      Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v39);
      if ((unint64_t)(v16 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v41 = 257;
        mlir::Operation::emitOpError(v1, v40, (uint64_t)&v45);
        if (v45)
        {
          v17 = "Interleave can only be applied on 4D or 5D tensor";
LABEL_21:
          mlir::Diagnostic::operator<<((uint64_t)v46, v17);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      v19 = Shape;
      v20 = v16;
      v40[0] = (const void **)mlir::anec::BatchToSpace::getFactorsAttr(&v42);
      mlir::IntegerAttr::getValue(v40, (llvm::APInt *)&v45);
      if (v46[0] > 0x40u)
      {
        v21 = *(unsigned int *)v45;
        MEMORY[0x20BD002D4]();
      }
      else
      {
        v21 = v45;
      }
      v22 = v20 == 4;
      v18 = 1;
      if (v22)
        v23 = 1;
      else
        v23 = 2;
      v24 = *(_QWORD *)(v19 + 8 * v23);
      if (v24 == 0x8000000000000000)
        return v18;
      if (v24 % v21)
      {
        v41 = 257;
        mlir::Operation::emitOpError(v1, v40, (uint64_t)&v45);
        if (v45)
        {
          mlir::Diagnostic::operator<<((uint64_t)v46, "channel ");
          if (v45)
          {
            v25 = *(_QWORD *)(v19 + 8 * v23);
            v43 = 2;
            v44 = v25;
            v26 = &v43;
            v27 = v47;
            if (v48 >= v49)
            {
              v35 = v48 + 1;
              if (v47 <= (unint64_t)&v43 && v47 + 24 * v48 > (unint64_t)&v43)
              {
                v37 = (char *)&v43 - v47;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
                v27 = v47;
                v26 = (int *)&v37[v47];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
                v26 = &v43;
                v27 = v47;
              }
            }
            v28 = v27 + 24 * v48;
            v29 = *(_OWORD *)v26;
            *(_QWORD *)(v28 + 16) = *((_QWORD *)v26 + 2);
            *(_OWORD *)v28 = v29;
            ++v48;
            if (v45)
            {
              mlir::Diagnostic::operator<<((uint64_t)v46, " must be a multiple of interleave ");
              if (v45)
              {
                v43 = 2;
                v44 = v21;
                v30 = &v43;
                v31 = v47;
                if (v48 >= v49)
                {
                  v36 = v48 + 1;
                  if (v47 <= (unint64_t)&v43 && v47 + 24 * v48 > (unint64_t)&v43)
                  {
                    v38 = (char *)&v43 - v47;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
                    v31 = v47;
                    v30 = (int *)&v38[v47];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
                    v30 = &v43;
                    v31 = v47;
                  }
                }
                v32 = v31 + 24 * v48;
                v33 = *(_OWORD *)v30;
                *(_QWORD *)(v32 + 16) = *((_QWORD *)v30 + 2);
                *(_OWORD *)v32 = v33;
                ++v48;
              }
            }
          }
        }
        goto LABEL_22;
      }
    }
    return 1;
  }
  v41 = 257;
  mlir::Operation::emitOpError(v1, v40, (uint64_t)&v45);
  if (v45)
  {
    v17 = "interleave factor not supported";
    goto LABEL_21;
  }
LABEL_22:
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v45);
  if (v45)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v45);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v46);
  return v18;
}

uint64_t mlir::mpsx::DeinterleaveOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  uint64_t v18;
  const void *Shape;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t Axis;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD v36[2];
  void *v37;
  uint64_t v38;
  _BYTE v39[40];
  uint64_t v40;
  _BYTE v41[8];
  char v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v40 = a6;
  v41[0] = 0;
  v42 = 0;
  v43 = a9;
  v44 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v40);
    if (v42)
      v42 = 0;
    mlir::OperationName::OperationName(v41, "mpsx.deinterleave", 17, Context);
    v42 = 1;
  }
  v45 = a4;
  v46 = a5;
  if (a5
    && (v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::DeinterleaveOpAdaptor::verify(&v40, v15))
    && (v37 = v45,
        v38 = 0,
        v16 = mlir::ValueRange::dereference_iterator(&v37, 0),
        v36[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v36[1] = a2,
        v36[0]))
  {
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36) & 1) != 0)
    {
      Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
      v20 = v18;
      v37 = v39;
      v38 = 0x500000000;
      v21 = 8 * v18;
      if ((unint64_t)(8 * v18) < 0x29)
      {
        v22 = 0;
        if (!v18)
        {
LABEL_20:
          v27 = v22 + (v21 >> 3);
          LODWORD(v38) = v27;
          if ((unint64_t)(v27 - 6) > 0xFFFFFFFFFFFFFFFDLL)
          {
            Axis = mlir::anec::detail::ConcatGenericAdaptorBase::getAxis((mlir::anec::detail::ConcatGenericAdaptorBase *)&v40);
            v30 = 1;
            if ((_DWORD)v27 != 4)
              v30 = 2;
            v31 = v37;
            v32 = *((_QWORD *)v37 + v30);
            if (v32 != 0x8000000000000000)
              *((_QWORD *)v37 + v30) = v32 * Axis;
            v33 = v31[v27 - 1];
            if (v33 != 0x8000000000000000)
              v31[v27 - 1] = v33 / Axis;
            v28 = mlir::RankedTensorType::get((uint64_t)v31, v38, OperandRange, 0);
          }
          else
          {
            v28 = mlir::UnrankedTensorType::get(OperandRange);
          }
          v34 = v28;
          v35 = *(_DWORD *)(a11 + 8);
          if (v35 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
            v35 = *(_DWORD *)(a11 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v34;
          ++*(_DWORD *)(a11 + 8);
          if (v37 != v39)
            free(v37);
          return 1;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, (8 * v18) >> 3, 8);
        v22 = v38;
        if (!v20)
          goto LABEL_20;
      }
      memcpy((char *)v37 + 8 * v22, Shape, v21);
      v22 = v38;
      goto LABEL_20;
    }
    v23 = OperandRange;
  }
  else
  {
    v23 = mlir::Float32Type::get(this, a2);
  }
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::DeinterleaveOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t Shape;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  int *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  const void **v38[4];
  __int16 v39;
  mlir::Operation *v40;
  int v41;
  uint64_t v42;
  mlir *v43;
  _DWORD v44[4];
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[20];

  v48[19] = *MEMORY[0x24BDAC8D0];
  v1 = *this;
  v40 = (mlir::Operation *)*this;
  v38[0] = (const void **)mlir::anec::BatchToSpace::getFactorsAttr(&v40);
  mlir::IntegerAttr::getValue(v38, (llvm::APInt *)&v43);
  if (v44[0] > 0x40u)
  {
    v2 = *(unsigned int *)v43;
    MEMORY[0x20BD002D4]();
  }
  else
  {
    v2 = v43;
  }
  mlir::getANENextSupportedInterleaveValue(v2);
  if (v3)
  {
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4)
      goto LABEL_14;
    v5 = *v4;
    v6 = mlir::TypeID::get<mlir::ShapedType>();
    v7 = *(unsigned int *)(v5 + 16);
    if (!(_DWORD)v7)
      goto LABEL_14;
    v8 = *(_QWORD **)(v5 + 8);
    v9 = &v8[2 * v7];
    do
    {
      v10 = v7 >> 1;
      v11 = &v8[2 * (v7 >> 1)];
      v13 = *v11;
      v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6)
        v8 = v12;
      else
        v7 = v10;
    }
    while (v7);
    if (v8 != v9 && *v8 == v6)
      v14 = v8[1];
    else
LABEL_14:
      v14 = 0;
    v37[0] = v4;
    v37[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v37))
    {
      Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v37);
      if ((unint64_t)(v16 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = 257;
        mlir::Operation::emitOpError(v1, v38, (uint64_t)&v43);
        if (v43)
        {
          v17 = "Interleave can only be applied on 4D or 5D tensor";
LABEL_21:
          mlir::Diagnostic::operator<<((uint64_t)v44, v17);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      v19 = Shape;
      v20 = v16;
      v38[0] = (const void **)mlir::anec::BatchToSpace::getFactorsAttr(&v40);
      mlir::IntegerAttr::getValue(v38, (llvm::APInt *)&v43);
      if (v44[0] > 0x40u)
      {
        v21 = *(unsigned int *)v43;
        MEMORY[0x20BD002D4]();
      }
      else
      {
        v21 = v43;
      }
      v22 = *(_QWORD *)(v19 + 8 * (v20 - 1));
      if (v22 != 0x8000000000000000 && v22 % v21)
      {
        v39 = 257;
        mlir::Operation::emitOpError(v1, v38, (uint64_t)&v43);
        if (v43)
        {
          mlir::Diagnostic::operator<<((uint64_t)v44, "width ");
          if (v43)
          {
            v23 = *(_QWORD *)(v19 + 8 * (v20 - 1));
            v41 = 2;
            v42 = v23;
            v24 = &v41;
            v25 = v45;
            if (v46 >= v47)
            {
              v33 = v46 + 1;
              if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
              {
                v35 = (char *)&v41 - v45;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
                v25 = v45;
                v24 = (int *)&v35[v45];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
                v24 = &v41;
                v25 = v45;
              }
            }
            v26 = v25 + 24 * v46;
            v27 = *(_OWORD *)v24;
            *(_QWORD *)(v26 + 16) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v26 = v27;
            ++v46;
            if (v43)
            {
              mlir::Diagnostic::operator<<((uint64_t)v44, " must be a multiple of interleave ");
              if (v43)
              {
                v41 = 2;
                v42 = v21;
                v28 = &v41;
                v29 = v45;
                if (v46 >= v47)
                {
                  v34 = v46 + 1;
                  if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
                  {
                    v36 = (char *)&v41 - v45;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
                    v29 = v45;
                    v28 = (int *)&v36[v45];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
                    v28 = &v41;
                    v29 = v45;
                  }
                }
                v30 = v29 + 24 * v46;
                v31 = *(_OWORD *)v28;
                *(_QWORD *)(v30 + 16) = *((_QWORD *)v28 + 2);
                *(_OWORD *)v30 = v31;
                ++v46;
              }
            }
          }
        }
        goto LABEL_22;
      }
    }
    return 1;
  }
  v39 = 257;
  mlir::Operation::emitOpError(v1, v38, (uint64_t)&v43);
  if (v43)
  {
    v17 = "interleave factor not supported";
    goto LABEL_21;
  }
LABEL_22:
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
  if (v43)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
  return v18;
}

uint64_t mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *Shape;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t OperandRange;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD *v39[2];
  __int128 v40;
  char v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45 = a4;
  v46 = a5;
  if (!a5)
  {
    v27 = mlir::Float32Type::get(this, a2);
    v28 = mlir::UnrankedTensorType::get(v27);
    v29 = *(unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
      LODWORD(v29) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v29) = v28;
    goto LABEL_20;
  }
  v12 = mlir::ValueRange::dereference_iterator(&v45, 0);
  v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v39[0] = v13;
  v39[1] = v14;
  if (v13)
    v15 = v46 > 2;
  else
    v15 = 0;
  if (!v15
    || (v16 = mlir::ValueRange::dereference_iterator(&v45, 2),
        v38[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v38[1] = v17,
        !v38[0]))
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v13);
    if (ElementTypeOrSelf)
    {
LABEL_14:
      v25 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      v26 = *(_DWORD *)(a11 + 8);
      if (v26 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
        v26 = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v25;
LABEL_20:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
LABEL_13:
    ElementTypeOrSelf = mlir::Float32Type::get(this, v24);
    goto LABEL_14;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v38) & 1) == 0)
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v39[0]);
    if (ElementTypeOrSelf)
      goto LABEL_14;
    goto LABEL_13;
  }
  Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v39);
  v20 = v18;
  v42 = v44;
  v43 = 0x400000000;
  v21 = 8 * v18;
  if ((unint64_t)(8 * v18) < 0x21)
  {
    v22 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, (8 * v18) >> 3, 8);
    v22 = v43;
  }
  if (v20)
  {
    memcpy((char *)v42 + 8 * v22, Shape, v21);
    v22 = v43;
  }
  LODWORD(v43) = v22 + (v21 >> 3);
  v31 = mlir::ShapedType::getShape((mlir::ShapedType *)v38);
  v33 = v42;
  v34 = v43;
  *((_QWORD *)v42 + v43 - 1) = *(_QWORD *)(v31 + 8 * v32 - 8);
  *(_QWORD *)&v40 = v33;
  *((_QWORD *)&v40 + 1) = v34;
  v41 = 1;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
  v36 = mlir::ShapedType::cloneWith((uint64_t *)v39, &v40, OperandRange);
  v37 = *(unsigned int *)(a11 + 8);
  if (v37 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
    LODWORD(v37) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v37) = v36;
  ++*(_DWORD *)(a11 + 8);
  if (v42 != v44)
    free(v42);
  return 1;
}

uint64_t mlir::mpsx::ScaledDotProductAttentionOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int ArgOperands;
  int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t Shape;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t (**v72)(llvm::detail::format_adapter *__hidden);
  uint64_t **v73;
  unsigned __int8 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t **v103;
  const void ***v104;
  uint64_t v105;
  uint64_t *v106;
  const char *v107;
  uint64_t v108;
  uint64_t (****v109)(llvm::detail::format_adapter *__hidden);
  uint64_t v110;
  uint64_t (**v111)(llvm::detail::format_adapter *__hidden);
  uint64_t **v112;
  uint64_t (***v113)(llvm::detail::format_adapter *__hidden);
  uint64_t **v114;
  uint64_t (***v115)(llvm::detail::format_adapter *__hidden);
  uint64_t (****v116)(llvm::detail::format_adapter *__hidden);
  const void **v117[4];
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[2];
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  uint64_t v134;
  _QWORD v135[23];

  v135[22] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(*this)[9];
  v3 = *(_QWORD *)(v2[3] + 8);
  v4 = (uint64_t *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  v5 = (uint64_t *)(*(_QWORD *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
  v130 = v5;
  v131 = v4;
  v6 = (_QWORD *)(*(_QWORD *)(v2[15] + 8) & 0xFFFFFFFFFFFFFFF8);
  v129 = v6;
  v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  v132 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_10;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
  {
    v68 = v11[1];
    v127 = v7;
    v128 = v68;
    if (!v4)
      goto LABEL_19;
  }
  else
  {
LABEL_10:
    v127 = v7;
    v128 = 0;
    if (!v4)
      goto LABEL_19;
  }
  v17 = *v4;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD **)(v17 + 8);
    v21 = &v20[2 * v19];
    do
    {
      v22 = v19 >> 1;
      v23 = &v20[2 * (v19 >> 1)];
      v25 = *v23;
      v24 = v23 + 2;
      v19 += ~(v19 >> 1);
      if (v25 < v18)
        v20 = v24;
      else
        v19 = v22;
    }
    while (v19);
    if (v20 != v21 && *v20 == v18)
    {
      v69 = v20[1];
      v125 = v4;
      v126 = v69;
      if (v5)
        goto LABEL_20;
LABEL_28:
      v35 = 0;
      goto LABEL_29;
    }
  }
LABEL_19:
  v125 = v4;
  v126 = 0;
  if (!v5)
    goto LABEL_28;
LABEL_20:
  v26 = *v5;
  v27 = mlir::TypeID::get<mlir::ShapedType>();
  v28 = *(unsigned int *)(v26 + 16);
  if (!(_DWORD)v28)
    goto LABEL_28;
  v29 = *(_QWORD **)(v26 + 8);
  v30 = &v29[2 * v28];
  do
  {
    v31 = v28 >> 1;
    v32 = &v29[2 * (v28 >> 1)];
    v34 = *v32;
    v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27)
      v29 = v33;
    else
      v28 = v31;
  }
  while (v28);
  if (v29 == v30 || *v29 != v27)
    goto LABEL_28;
  v35 = v29[1];
LABEL_29:
  v124[0] = v5;
  v124[1] = v35;
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127);
  v37 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v125);
  v38 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v124);
  v122 = 0;
  v123 = 0;
  v120 = 0;
  v121 = 0;
  v119 = 0;
  v39 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v39)
    goto LABEL_38;
  v40 = *v39;
  v41 = mlir::TypeID::get<mlir::ShapedType>();
  v42 = *(unsigned int *)(v40 + 16);
  if (!(_DWORD)v42)
    goto LABEL_38;
  v43 = *(_QWORD **)(v40 + 8);
  v44 = &v43[2 * v42];
  do
  {
    v45 = v42 >> 1;
    v46 = &v43[2 * (v42 >> 1)];
    v48 = *v46;
    v47 = v46 + 2;
    v42 += ~(v42 >> 1);
    if (v48 < v41)
      v43 = v47;
    else
      v42 = v45;
  }
  while (v42);
  if (v43 != v44 && *v43 == v41)
    v49 = v43[1];
  else
LABEL_38:
    v49 = 0;
  v133 = v39;
  v134 = v49;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v133) & 1) != 0)
  {
    if (ArgOperands)
    {
      Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
      v52 = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
      if (v53 <= 1)
      {
        v107 = "failed: expected query to have at least two dimensions but got {0}";
        v108 = 66;
        v109 = &v113;
        v110 = 1;
        v54 = &v132;
LABEL_51:
        v111 = &off_24C02E5E8;
        v112 = v54;
        v113 = &v111;
LABEL_102:
        v118 = 263;
        goto LABEL_103;
      }
      v123 = *(_QWORD *)(Shape + 8 * v52 - 8);
    }
    if (v37)
    {
      v55 = mlir::ShapedType::getShape((mlir::ShapedType *)&v125);
      v57 = v56;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v125);
      if (v58 <= 1)
      {
        v107 = "failed: expected key to have at least two dimensions but got {0}";
        v108 = 64;
        v109 = &v113;
        v110 = 1;
        v54 = &v131;
        goto LABEL_51;
      }
      v65 = v55 + 8 * v57;
      v60 = *(_QWORD *)(v65 - 8);
      v122 = v60;
      v59 = *(_QWORD *)(v65 - 16);
      v121 = v59;
      if (!v38)
        goto LABEL_53;
    }
    else
    {
      v59 = 0;
      v60 = 0;
      if (!v38)
      {
LABEL_53:
        v66 = 0;
        v67 = 0;
        goto LABEL_61;
      }
    }
    v61 = mlir::ShapedType::getShape((mlir::ShapedType *)v124);
    v63 = v62;
    mlir::ShapedType::getShape((mlir::ShapedType *)v124);
    if (v64 <= 1)
    {
      v107 = "failed: expected value to have at least two dimensions but got {0}";
      v108 = 66;
      v109 = &v113;
      v110 = 1;
      v54 = &v130;
      goto LABEL_51;
    }
    v70 = v61 + 8 * v63;
    v66 = *(_QWORD *)(v70 - 8);
    v120 = v66;
    v67 = *(_QWORD *)(v70 - 16);
    v119 = v67;
LABEL_61:
    v71 = ArgOperands ^ 1;
    if (((ArgOperands ^ 1 | v37 ^ 1) & 1) == 0
      && v123 != 0x8000000000000000
      && v60 != 0x8000000000000000
      && v123 != v60)
    {
      v107 = "failed: query and key must have matching inner dimension but have {0} and {1}";
      v108 = 77;
      v109 = &v115;
      v110 = 2;
      v72 = &off_24C02E3D8;
      v111 = &off_24C02E3D8;
      v112 = (uint64_t **)&v123;
      v73 = (uint64_t **)&v122;
LABEL_101:
      v113 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))v72;
      v114 = v73;
      v115 = &v111;
      v116 = &v113;
      goto LABEL_102;
    }
    v74 = v38 ^ 1;
    if (((v37 ^ 1 | v38 ^ 1) & 1) == 0 && v59 != 0x8000000000000000 && v67 != 0x8000000000000000 && v59 != v67)
    {
      v107 = "failed: key and value must have matching outer dimension but have {0} and {1}";
      v108 = 77;
      v109 = &v115;
      v110 = 2;
      v72 = &off_24C02E3D8;
      v111 = &off_24C02E3D8;
      v112 = (uint64_t **)&v121;
      v73 = (uint64_t **)&v119;
      goto LABEL_101;
    }
    v75 = v71 | v74;
    if (((v71 | v74) & 1) == 0 && v123 != 0x8000000000000000 && v66 != 0x8000000000000000 && v123 != v66)
    {
      v107 = "failed: query and value must have matching inner dimension but have {0} and {1}";
      v108 = 79;
      v109 = &v115;
      v110 = 2;
      v72 = &off_24C02E3D8;
      v111 = &off_24C02E3D8;
      v112 = (uint64_t **)&v123;
      v73 = (uint64_t **)&v120;
      goto LABEL_101;
    }
    if (((ArgOperands ^ 1 | v37 ^ 1) & 1) != 0
      || (mlir::ShapedType::getShape((mlir::ShapedType *)&v127), v76 < 3)
      || (mlir::ShapedType::getShape((mlir::ShapedType *)&v125), v77 < 3))
    {
      v82 = 0;
      v84 = 1;
      if ((v75 & 1) != 0)
        goto LABEL_96;
    }
    else
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
      v79 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v127) + 8 * (v78 - 3));
      mlir::ShapedType::getShape((mlir::ShapedType *)&v125);
      v81 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v125) + 8 * (v80 - 3));
      v82 = v79 / v81;
      if (v79 % v81)
      {
        v83 = "failed: key heads dimensions do not represent a valid group for the head dimensions available in the query tensor";
LABEL_111:
        v107 = v83;
        LOWORD(v111) = 259;
        v104 = (const void ***)&v107;
        goto LABEL_112;
      }
      v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v131);
      v108 = v91;
      v92 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
      llvm::SmallVector<long long,6u>::SmallVector(&v133, v92, v93);
      *((_QWORD *)v133 + v134 - 3) *= v82;
      v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v131);
      v108 = v94;
      v131 = (uint64_t *)mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v107, (uint64_t)v133, v134);
      if (v133 != v135)
        free(v133);
      v84 = 0;
      if ((v75 & 1) != 0)
      {
LABEL_96:
        v106 = 0;
        if (!mlir::mpsx::inferMatMulResultType(0, 0, v132, v131, (uint64_t *)&v106, 0, 1))
        {
          v107 = "failed: query with type {0} cannot be multiplied with the key (transposed) of type {1}";
          v108 = 86;
          v109 = &v115;
          v110 = 2;
          v72 = &off_24C02E5E8;
          v111 = &off_24C02E5E8;
          v112 = &v132;
          v73 = &v131;
          goto LABEL_101;
        }
        v100 = v106;
        if (mlir::mpsx::inferMatMulResultType(0, 0, v106, v130, &v105, 0, 0))
        {
          if (mlir::OpTrait::util::getBroadcastedType(v100, v6, 0))
            return 1;
          v107 = "failed: mask with type {0} is not broadcastable with the product of query and key transpose of type {1}";
          v108 = 103;
          v109 = &v115;
          v110 = 2;
          v111 = &off_24C02E5E8;
          v112 = &v129;
          v103 = &v106;
        }
        else
        {
          v107 = "failed: product of query and key transpose of type {0} cannot be multiplied with value of type {1}";
          v108 = 98;
          v109 = &v115;
          v110 = 2;
          v111 = &off_24C02E5E8;
          v112 = &v106;
          v103 = &v130;
        }
        v113 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_24C02E5E8;
        v114 = v103;
        v115 = &v111;
        v116 = &v113;
        v118 = 263;
        v117[0] = (const void **)&v107;
        v104 = v117;
LABEL_112:
        mlir::OpState::emitOpError(this, v104, (uint64_t)&v133);
        v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v133);
        return v101;
      }
    }
    mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
    if (v85 >= 3)
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)v124);
      if (v86 >= 3)
      {
        mlir::ShapedType::getShape((mlir::ShapedType *)&v127);
        v88 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v127) + 8 * (v87 - 3));
        mlir::ShapedType::getShape((mlir::ShapedType *)v124);
        v90 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v124) + 8 * (v89 - 3));
        if (v88 % v90)
        {
          v83 = "failed: value heads dimensions do not represent a valid group for the head dimensions available in the query tensor";
          goto LABEL_111;
        }
        if (v82 == v88 / v90)
          v95 = 1;
        else
          v95 = v84;
        if ((v95 & 1) == 0)
        {
          v83 = "failed: grouping for the value tensor does not match the one available on the key tensor";
          goto LABEL_111;
        }
        v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v130);
        v108 = v96;
        v97 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
        llvm::SmallVector<long long,6u>::SmallVector(&v133, v97, v98);
        *((_QWORD *)v133 + v134 - 3) = v88;
        v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v130);
        v108 = v99;
        v130 = (uint64_t *)mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v107, (uint64_t)v133, v134);
        if (v133 != v135)
          free(v133);
      }
    }
    goto LABEL_96;
  }
  v107 = "failed: expected scale to be scalar but it is unranked";
  v108 = 54;
  v109 = 0;
  v110 = 0;
  v118 = 263;
LABEL_103:
  v117[0] = (const void **)&v107;
  mlir::OpState::emitOpError(this, v117, (uint64_t)&v133);
  v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
  if (v133)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v133);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v134);
  return v101;
}

uint64_t mlir::mpsx::RMSNormOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *Shape;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t DefiningOp;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD v45[2];
  const void **v46[4];
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  const void ***v50;
  __int16 v51;
  uint64_t v52;
  _QWORD v53[2];
  void *v54;
  uint64_t v55;
  _BYTE v56[176];
  uint64_t *v57;
  uint64_t v58;
  _QWORD v59[7];

  v59[6] = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v45[0] = v2;
  v45[1] = v12;
  v43 = 0;
  v44 = 0;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v45);
  if (mlir::ShapedType::getNumElements(Shape, v14) == 1)
    goto LABEL_12;
  v46[0] = *(const void ***)((*this)[9] + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v46);
  if (!DefiningOp)
    goto LABEL_39;
  v36 = DefiningOp;
  v37 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v36 + 48) + 32))(*(_QWORD *)(v36 + 48), v37))
    goto LABEL_39;
  v54 = v56;
  v55 = 0x100000000;
  mlir::Operation::fold(v36, 0, 0, (uint64_t)&v54);
  v38 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v54 & 0xFFFFFFFFFFFFFFF8));
  v40 = v38;
  if (v38)
  {
    v43 = v38;
    v44 = v39;
  }
  if (v54 != v56)
    free(v54);
  if (v40 && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v43) & 1) != 0)
  {
LABEL_12:
    v15 = *this;
    v16 = v15[9];
    v17 = *(_QWORD *)(v16 + 88);
    v18 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v18)
      goto LABEL_21;
    v19 = *v18;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_21;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_21:
      v28 = 0;
    v53[0] = v18;
    v53[1] = v28;
    v57 = v59;
    v58 = 0x600000000;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v53)
      && mlir::matchConstantWithIntVector<long long>(v17, (uint64_t)&v57)
      && (_DWORD)v58)
    {
      v29 = v57;
      v30 = 8 * v58;
      while (1)
      {
        v52 = *v29;
        v31 = v52;
        mlir::ShapedType::getShape((mlir::ShapedType *)v53);
        mlir::tryGetPositiveAxis(v31, v32, 0, 0, 0);
        if (!v33)
          break;
        ++v29;
        v30 -= 8;
        if (!v30)
          goto LABEL_28;
      }
      mlir::ShapedType::getShape((mlir::ShapedType *)v53);
      v46[0] = (const void **)"failed: constant axis ({0}) is not within range for the input tensor rank ({1})";
      v46[1] = (const void **)79;
      v46[2] = (const void **)v49;
      v46[3] = (const void **)2;
      v47[0] = &off_24C02E3D8;
      v47[1] = &v52;
      v48[0] = &off_24C02E498;
      v48[1] = v42;
      v49[0] = v47;
      v49[1] = v48;
      v51 = 263;
      v50 = v46;
      mlir::Operation::emitOpError(v15, (const void ***)&v50, (uint64_t)&v54);
      v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
      if (v54)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v55);
    }
    else
    {
LABEL_28:
      v34 = 1;
    }
    if (v57 != v59)
      free(v57);
  }
  else
  {
LABEL_39:
    v46[0] = (const void **)"requires epsilon to be a scalar";
    LOWORD(v47[0]) = 259;
    mlir::OpState::emitOpError(this, v46, (uint64_t)&v54);
    v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
    if (v54)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v55);
  }
  return v34;
}

uint64_t mlir::mpsx::FPToIntClampedOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  MirInfoChannelAssignment *Value;
  MirInfoChannelAssignment *v19;
  MirInfoChannelAssignment *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v38[0] = a4;
  v38[1] = a5;
  v31 = a6;
  LOBYTE(v32) = 0;
  v33 = 0;
  v34 = a9;
  v35 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v31);
    if (v33)
      v33 = 0;
    mlir::OperationName::OperationName(&v32, "mpsx.fp_to_int_clamped", 22, Context);
    v33 = 1;
  }
  v36 = a4;
  v37 = a5;
  if (a5
    && (v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::FPToIntClampedOpAdaptor::verify(&v31, v15)))
  {
    v39 = v36;
    v16 = mlir::ValueRange::dereference_iterator(&v39, 0);
    v30[0] = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v17;
    if (v30[0])
    {
      Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
      v19 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v31);
      v20 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v19, **(_QWORD **)(v32 + 96));
      if ((v21 & 1) != 0)
        v22 = *((_QWORD *)v20 + 1);
      else
        v22 = 0;
      *(_QWORD *)&v39 = v22;
      v27 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39);
      LOBYTE(v39) = 0;
      v40 = 0;
      v26 = mlir::ShapedType::cloneWith(v30, &v39, v27);
    }
    else
    {
      v26 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v38, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    v28 = *(_DWORD *)(a11 + 8);
    if (v28 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
      v28 = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v28) = v26;
  }
  else
  {
    v23 = mlir::Float32Type::get(this, a2);
    v24 = mlir::UnrankedTensorType::get(v23);
    v25 = *(unsigned int *)(a11 + 8);
    if (v25 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  }
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::FPToIntClampedOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        i != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11);
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i))
    {
      v8 = *((_QWORD *)i + 1);
      if (v8)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
        {
          v5 = "'mpsx.fp_to_int_clamped' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
          goto LABEL_6;
        }
        v12 = *((_QWORD *)i + 1);
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
      }
      return 1;
    }
  }
  v5 = "'mpsx.fp_to_int_clamped' op requires attribute 'resultElementType'";
LABEL_6:
  v9 = v5;
  v10 = 259;
  mlir::emitError(a2, (uint64_t)&v9, (uint64_t)&v12);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v12);
  if (v12)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v12);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

uint64_t mlir::mpsx::ANEOp::getFunctionTypeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::mpsx::ANEOp::getArgAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8 - 16), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::mpsx::ANEOp::getResAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

void mlir::mpsx::ANEOp::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t StringAttr;
  mlir::StringAttr *Context;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Loc;
  uint64_t v37;
  uint64_t v38;
  _WORD *v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v55;
  mlir::Operation *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v61;
  uint64_t *v62;
  BOOL v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[2];
  __int16 v70;
  void *v71;
  uint64_t v72;
  _WORD v73[16];
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v25 = a2 + 112;
  *(_QWORD *)(a2 + 192) = 0;
  v26 = *(unsigned int *)(a2 + 120);
  if (a18 + v26 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v25, (void *)(a2 + 128), a18 + v26, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
  }
  if (a18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v26), __src, 16 * a18);
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v26 + a18;
  v73[8] = 261;
  v71 = a3;
  v72 = a4;
  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)a1, (mlir::MLIRContext *)&v71);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v70 = 261;
  v67 = "sym_name";
  v68 = 8;
  v29 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v67);
  ZinMirCacheTensors::ZinMirCacheTensors(&v74, v29, StringAttr);
  mlir::NamedAttrList::push_back(v25, (uint64_t)v74, v75);
  v30 = mlir::FunctionType::get(*(mlir::MLIRContext **)a1, a9, a10, a13, a14);
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  v32 = mlir::TypeAttr::get(v30);
  ZinMirCacheTensors::ZinMirCacheTensors(&v67, v31, v32);
  mlir::NamedAttrList::push_back(v25, (uint64_t)v67, v68);
  v33 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v34 = operator new();
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  *(_QWORD *)(v34 + 32) = v34 + 32;
  *(_QWORD *)(v34 + 40) = v34 + 32;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 64) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  v71 = v73;
  v72 = 0x400000000;
  v67 = a6;
  v68 = 0;
  if (a7)
  {
    v35 = 0;
    do
    {
      v74 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v67, v35);
      Loc = mlir::Value::getLoc((mlir::Value *)&v74);
      v37 = v72;
      if (v72 >= (unint64_t)HIDWORD(v72))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v72 + 1, 8);
        v37 = v72;
      }
      *((_QWORD *)v71 + v37) = Loc;
      v38 = (v72 + 1);
      LODWORD(v72) = v72 + 1;
      v35 = ++v68;
    }
    while (v67 != a6 || v35 != a7);
    v40 = v71;
  }
  else
  {
    v38 = 0;
    v40 = v73;
  }
  mlir::Block::addArguments((_QWORD *)v34, a9, a10, (uint64_t)v40, v38);
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v33, v34);
  v41 = *v33;
  *(_QWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 8) = v41;
  *(_QWORD *)(v41 + 8) = v34 + 8;
  *v33 = v34 + 8;
  v42 = (_OWORD *)(a1 + 16);
  v64 = *(_OWORD *)(a1 + 16);
  v44 = *(_QWORD *)(v34 + 40);
  v43 = *(_QWORD *)(v34 + 48);
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = v44;
  v45 = *(_QWORD *)(v34 + 56);
  v67 = a6;
  v68 = 0;
  v69[0] = v43;
  if (a7 && v45 != v43)
  {
    v46 = 0;
    do
    {
      v50 = mlir::ValueRange::dereference_iterator(&v67, v46);
      v51 = *(_QWORD *)v69[0];
      v66 = v50;
      v74 = 0;
      v52 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a5, (unint64_t *)&v66, &v74);
      v53 = v74;
      if ((v52 & 1) == 0)
      {
        v53 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a5, (uint64_t)&v66, (unint64_t *)&v66, v74);
        *v53 = v66;
        v53[1] = 0;
      }
      v53[1] = v51;
      v46 = v68 + 1;
      v47 = v69[0] + 8;
      v68 = v46;
      v69[0] += 8;
    }
    while ((v46 != a7 || v67 != a6) && v47 != v45);
  }
  if (a16)
  {
    v55 = 8 * a16;
    do
    {
      v56 = *a15++;
      mlir::OpBuilder::clone((uint64_t **)a1, v56, (mlir::IRMapping *)a5);
      v55 -= 8;
    }
    while (v55);
  }
  v67 = v69;
  v68 = 0x600000000;
  if (a12 < 7)
  {
    v57 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, a12, 8);
    v57 = v68;
  }
  v74 = a11;
  v75 = 0;
  v76 = a5;
  v77 = 1;
  if (a12)
  {
    v58 = 0;
    v59 = (uint64_t *)((char *)v67 + 8 * v57);
    do
    {
      v61 = mlir::ValueRange::dereference_iterator(&v74, v58);
      v62 = v76;
      v65 = v61;
      v66 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v76, (unint64_t *)&v65, &v66))v63 = v66 == *v62 + 16 * *((unsigned int *)v62 + 4);
      else
        v63 = 1;
      if (!v63)
        v61 = *(_QWORD *)(v66 + 8);
      *v59++ = v61;
      v58 = ++v75;
    }
    while (v74 != a11 || v58 != a12);
    v57 = v68;
  }
  LODWORD(v68) = v57 + a12;
  mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)a1, *(_QWORD *)a2, (uint64_t)&v67);
  if (v67 != v69)
    free(v67);
  if ((_QWORD)v64)
  {
    *v42 = v64;
  }
  else
  {
    *(_QWORD *)v42 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (v71 != v73)
    free(v71);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.region_return", (const unsigned __int8 *)0x12, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mpsx.region_return";
    v15[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::RegionReturnOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::mpsx::ANEOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t NumNeededNEs;
  uint64_t *v9;
  uint64_t v10;
  const void **v11;
  uint64_t i;
  uint64_t v13;
  const void **v15;
  __int16 v16;
  unint64_t AttrDictionary;
  _QWORD v18[24];

  v18[23] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 0;
    v7 = 16 * v4;
    while (1)
    {
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      v9 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == NumNeededNEs)
        break;
      if (**(_QWORD **)((*this)[6] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
        v6 = *((_QWORD *)Value + 1);
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v7 -= 16;
      if (!v7)
        goto LABEL_10;
    }
    v11 = (const void **)*((_QWORD *)Value + 1);
    for (i = 0; v7; v7 -= 16)
    {
      v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      v9 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v13)
        i = *((_QWORD *)Value + 1);
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    return mlir::anec::__mlir_ods_local_attr_constraint_ANECOps1(v9, v11, (const void **)"function_type", (const void **)0xD)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v6, (const void **)"arg_attrs", (const void **)9)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, i, (const void **)"res_attrs", (const void **)9)&& mlir::anec::__mlir_ods_local_region_constraint_ANECOps0(*this, (((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]
                              + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                              + 7) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *((unsigned int *)*this + 10),
                              (uint64_t)"body",
                              4,
                              0) != 0;
  }
  else
  {
LABEL_10:
    v15 = (const void **)"requires attribute 'function_type'";
    v16 = 259;
    mlir::OpState::emitOpError(this, &v15, (uint64_t)&AttrDictionary);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  }
  return v10;
}

uint64_t mlir::mpsx::DeinterleaveOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t Value;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        ;
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11))
    {
      v5 = "'mpsx.deinterleave' op requires attribute 'interleave_factor'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (!v8)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = *((_QWORD *)i + 1);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  v5 = "'mpsx.deinterleave' op attribute 'interleave_factor' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_6:
  v9[0] = v5;
  v10 = 259;
  mlir::emitError(a2, (uint64_t)v9, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

BOOL mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, Value[1], (const void **)"interleave_factor", (const void **)0x11)&& mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'interleave_factor'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_28;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isSignlessInteger((mlir::Type *)v31, 1)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 64)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 64)
    || mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    return 1;
  }
LABEL_28:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v22 = &v34;
      v23 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = v38;
          v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v22 = &v34;
          v23 = v38;
        }
      }
      v24 = v23 + 24 * v39;
      v25 = *(_OWORD *)v22;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v22 + 2);
      *(_OWORD *)v24 = v25;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of mps native type values, but got ");
    }
  }
  v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

uint64_t mlir::mpsx::FPToIntClampedOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t *v10;
  const void **v11;
  _QWORD *v12;
  void *v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v40;
  char *v41;
  const void **v42;
  uint64_t v43;
  __int16 v44;
  const void **v45;
  _QWORD v46[3];
  unint64_t AttrDictionary;
  _QWORD v48[2];
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD v52[20];

  v52[19] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, Value[1], (const void **)"resultElementType", (const void **)0x11)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    if (*((_DWORD *)*this + 9))
      v8 = (uint64_t)(*this - 2);
    else
      v8 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    v10 = *this;
    v11 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    v45 = v11;
    v12 = *v11;
    v13 = (void *)*((_QWORD *)*v11 + 17);
    if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v15 = mlir::TypeID::get<mlir::ShapedType>();
      v16 = *((unsigned int *)v12 + 4);
      if (!(_DWORD)v16)
        goto LABEL_29;
      v17 = (_QWORD *)v12[1];
      v18 = &v17[2 * v16];
      do
      {
        v19 = v16 >> 1;
        v20 = &v17[2 * (v16 >> 1)];
        v22 = *v20;
        v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15)
          v17 = v21;
        else
          v16 = v19;
      }
      while (v16);
      if (v17 != v18 && *v17 == v15)
        v23 = v17[1];
      else
LABEL_29:
        v23 = 0;
      AttrDictionary = (unint64_t)v11;
      v48[0] = v23;
      v46[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (mlir::Type::isSignedInteger((mlir::Type *)v46, 8) || mlir::Type::isUnsignedInteger((mlir::Type *)v46, 8))
        return 1;
      v12 = *v11;
      v13 = (void *)*((_QWORD *)*v11 + 17);
    }
    if (v13 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      goto LABEL_64;
    v30 = mlir::TypeID::get<mlir::ShapedType>();
    v31 = *((unsigned int *)v12 + 4);
    if (!(_DWORD)v31)
      goto LABEL_51;
    v32 = (_QWORD *)v12[1];
    v33 = &v32[2 * v31];
    do
    {
      v34 = v31 >> 1;
      v35 = &v32[2 * (v31 >> 1)];
      v37 = *v35;
      v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30)
        v32 = v36;
      else
        v31 = v34;
    }
    while (v31);
    if (v32 != v33 && *v32 == v30)
      v38 = v32[1];
    else
LABEL_51:
      v38 = 0;
    v42 = v11;
    v43 = v38;
    v46[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v42);
    if (!mlir::Type::isSignedInteger((mlir::Type *)v46, 8) && !mlir::Type::isUnsignedInteger((mlir::Type *)v46, 8))
    {
LABEL_64:
      v44 = 261;
      v42 = (const void **)"result";
      v43 = 6;
      mlir::Operation::emitOpError(v10, &v42, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v48, " #");
        if (AttrDictionary)
        {
          LODWORD(v46[0]) = 5;
          v46[1] = 0;
          v24 = (char *)v46;
          v25 = v49;
          if (v50 >= v51)
          {
            v40 = v50 + 1;
            if (v49 <= (unint64_t)v46 && v49 + 24 * v50 > (unint64_t)v46)
            {
              v41 = (char *)v46 - v49;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v40, 24);
              v25 = v49;
              v24 = &v41[v49];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v40, 24);
              v24 = (char *)v46;
              v25 = v49;
            }
          }
          v26 = v25 + 24 * v50;
          v27 = *(_OWORD *)v24;
          *(_QWORD *)(v26 + 16) = *((_QWORD *)v24 + 2);
          *(_OWORD *)v26 = v27;
          ++v50;
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v48, " must be tensor of int8 values or memref of int8 values, but got ");
        }
      }
      v28 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v45);
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v28);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
      if (!v29)
        return 0;
    }
    return 1;
  }
LABEL_8:
  v42 = (const void **)"requires attribute 'resultElementType'";
  v44 = 259;
  mlir::OpState::emitOpError(this, &v42, (uint64_t)&AttrDictionary);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_19;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31))
  {
    return 1;
  }
LABEL_19:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v23 = &v34;
      v24 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v24 = v38;
          v23 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = &v34;
          v24 = v38;
        }
      }
      v25 = v24 + 24 * v39;
      v26 = *(_OWORD *)v23;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of floating point values, but got ");
    }
  }
  v27 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v27);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v22;
}

BOOL mlir::mpsx::FileBackedConstantOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  MirInfoChannelAssignment *v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  uint64_t NextResultAtOffset;
  const void **v20[4];
  __int16 v21;
  unint64_t AttrDictionary;
  _QWORD v23[24];

  v23[23] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'archive'";
LABEL_19:
    v20[0] = (const void **)v7;
    v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)&AttrDictionary);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
    return v13;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'data_size'";
    goto LABEL_19;
  }
  v8 = 0;
  v9 = *((_QWORD *)Value + 1);
  while (1)
  {
    v10 = (MirInfoChannelAssignment *)((char *)Value + v8);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)Value + v8)))
      break;
    v8 += 16;
    if (v6 == v8)
      goto LABEL_13;
  }
  v11 = v6 - v8;
  if (v6 == v8)
  {
LABEL_18:
    v7 = "requires attribute 'identifier'";
    goto LABEL_19;
  }
  v12 = (const void **)*((_QWORD *)v10 + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) != MirInfoChannelAssignment::GetNumNeededNEs(v10))
  {
    v10 = (MirInfoChannelAssignment *)((char *)v10 + 16);
    v11 -= 16;
    if (!v11)
      goto LABEL_18;
  }
  v15 = *((_QWORD *)v10 + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(*this, v9, (const void **)"archive", (const void **)7)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(*this, v15, (const void **)"identifier", (const void **)0xA))
  {
    return 0;
  }
  if (!v12)
    goto LABEL_42;
  v16 = *this;
  if (*((_UNKNOWN **)*v12 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v20[0] = v12;
    AttrDictionary = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&AttrDictionary, 64))
      goto LABEL_42;
  }
  v21 = 257;
  mlir::Operation::emitOpError(v16, v20, (uint64_t)&AttrDictionary);
  if (AttrDictionary)
  {
    mlir::Diagnostic::operator<<((uint64_t)v23, "attribute '");
    if (AttrDictionary)
    {
      v21 = 261;
      v20[0] = (const void **)"data_size";
      v20[1] = (const void **)9;
      mlir::Diagnostic::operator<<((uint64_t)v23, v20);
      if (AttrDictionary)
        mlir::Diagnostic::operator<<((uint64_t)v23, "' failed to satisfy constraint: 64-bit unsigned integer attribute");
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  if (!v17)
    return 0;
LABEL_42:
  if (*((_DWORD *)*this + 9))
    v18 = (uint64_t)(*this - 2);
  else
    v18 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mpsx::InterleaveOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t Value;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  for (i = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        ;
        i = (MirInfoChannelAssignment *)((char *)i + 16))
  {
    if (i == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11))
    {
      v5 = "'mpsx.interleave' op requires attribute 'interleave_factor'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (!v8)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = *((_QWORD *)i + 1);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  v5 = "'mpsx.interleave' op attribute 'interleave_factor' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_6:
  v9[0] = v5;
  v10 = 259;
  mlir::emitError(a2, (uint64_t)v9, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

BOOL mlir::mpsx::ListPopBackOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(*this, *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 1u) != 0;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  char *v18;
  const void **v19[4];
  __int16 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[20];

  v29[19] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 136);
  if (v9 == mlir::TypeID::get<mlir::mpsx::ListType>())
    return 1;
  v20 = 261;
  v19[0] = a3;
  v19[1] = a4;
  mlir::Operation::emitOpError(a1, v19, (uint64_t)&v24);
  if (v24)
  {
    mlir::Diagnostic::operator<<((uint64_t)v25, " #");
    if (v24)
    {
      v22 = 5;
      v23 = a5;
      v10 = &v22;
      v11 = v26;
      if (v27 >= v28)
      {
        v17 = v27 + 1;
        if (v26 <= (unint64_t)&v22 && v26 + 24 * v27 > (unint64_t)&v22)
        {
          v18 = (char *)&v22 - v26;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v17, 24);
          v11 = v26;
          v10 = (int *)&v18[v26];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v17, 24);
          v10 = &v22;
          v11 = v26;
        }
      }
      v12 = v11 + 24 * v27;
      v13 = *(_OWORD *)v10;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v27;
      if (v24)
        mlir::Diagnostic::operator<<((uint64_t)v25, " must be MPSX list type, but got ");
    }
  }
  v14 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v24, &v21);
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v24)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v25);
  return v15;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v16;
  char *v17;
  const void **v18[4];
  __int16 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[20];

  v28[19] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  if (mlir::mpsx::isMPSXListElementType(a2))
    return 1;
  v19 = 261;
  v18[0] = a3;
  v18[1] = a4;
  mlir::Operation::emitOpError(a1, v18, (uint64_t)&v23);
  if (v23)
  {
    mlir::Diagnostic::operator<<((uint64_t)v24, " #");
    if (v23)
    {
      v21 = 5;
      v22 = a5;
      v10 = &v21;
      v11 = v25;
      if (v26 >= v27)
      {
        v16 = v26 + 1;
        if (v25 <= (unint64_t)&v21 && v25 + 24 * v26 > (unint64_t)&v21)
        {
          v17 = (char *)&v21 - v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v16, 24);
          v11 = v25;
          v10 = (int *)&v17[v25];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v16, 24);
          v10 = &v21;
          v11 = v25;
        }
      }
      v12 = v11 + 24 * v26;
      v13 = *(_OWORD *)v10;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v26;
      if (v23)
        mlir::Diagnostic::operator<<((uint64_t)v24, " must be MPSX list element type, but got ");
    }
  }
  v14 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v23, &v20);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v23)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
  return v9;
}

BOOL mlir::mpsx::ListPushBackOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::mpsx::MakeListOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  uint64_t v6;
  uint64_t NumNeededNEs;
  uint64_t *v8;
  uint64_t v9;
  const void **v11;
  const void **i;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  const void **v18[4];
  __int16 v19;
  unint64_t AttrDictionary;
  _QWORD v21[24];

  v21[23] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == NumNeededNEs)
        break;
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v11 = (const void **)*((_QWORD *)Value + 1);
    for (i = 0; v6; v6 -= 16)
    {
      v17 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      v8 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v17)
        i = (const void **)*((_QWORD *)Value + 1);
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    if (v11)
    {
      if (*((_UNKNOWN **)*v11 + 17) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
        || (AttrDictionary = (unint64_t)v11,
            mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&AttrDictionary),
            v18[0] = v11,
            v13 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v18),
            !mlir::mpsx::isMPSXListElementType(v13)))
      {
        v19 = 257;
        mlir::Operation::emitOpError(v8, v18, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v21, "attribute '");
          if (AttrDictionary)
          {
            v19 = 261;
            v18[0] = (const void **)"element_type";
            v18[1] = (const void **)12;
            mlir::Diagnostic::operator<<((uint64_t)v21, v18);
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v21, "' failed to satisfy constraint: any type attribute MPSX list element type attribute");
          }
        }
        v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
        if (!v14)
          return 0;
      }
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, i, (const void **)"max_size", (const void **)8))
    {
      if (*((_DWORD *)*this + 9))
        v15 = (uint64_t)(*this - 2);
      else
        v15 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v18[0] = (const void **)"requires attribute 'element_type'";
    v19 = 259;
    mlir::OpState::emitOpError(this, v18, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
  }
  return v9;
}

unint64_t mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(mlir::Operation **this, int a2)
{
  uint64_t v2;
  mlir::Operation *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *v6;
  mlir::Operation *v7;
  mlir::ArrayAttr *v8;
  uint64_t Value;
  uint64_t v10;
  MirInfoChannelAssignment *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AttrDictionary;

  LODWORD(v2) = a2;
  v4 = *this;
  if (*((_BYTE *)v4 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v4 + 56);
  }
  v6 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v7 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v7);
    v8 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v8 = (mlir::Operation *)((char *)v7 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v8);
  v11 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v6, (MirInfoChannelAssignment *)(Value + 16 * v10), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v12 & 1) == 0)
  {
    AttrDictionary = 0;
    if ((_DWORD)v2)
      goto LABEL_9;
LABEL_13:
    v2 = 0;
    v14 = 0;
    return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                    + 4 * v2) << 32);
  }
  AttrDictionary = *((_QWORD *)v11 + 1);
  if (!(_DWORD)v2)
    goto LABEL_13;
LABEL_9:
  v13 = 0;
  LODWORD(v14) = 0;
  v2 = v2;
  do
  {
    v14 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                   + v13)
                       + v14);
    v13 += 4;
  }
  while (4 * v2 != v13);
  return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                  + 4 * v2) << 32);
}

uint64_t mlir::mpsx::QuantizedGatherOp::getODSOperands(mlir::Operation **this, int a2)
{
  unsigned int ODSOperandIndexAndLength;
  uint64_t v4;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, a2);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v4 = *((_QWORD *)*this + 9);
  else
    v4 = 0;
  return v4 + 32 * ODSOperandIndexAndLength;
}

BOOL mlir::mpsx::QuantizedGatherOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  MirInfoChannelAssignment *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t ODSOperands;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t *v27;
  const void **v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *p_OperandRange;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  const void **v93;
  unsigned int v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t *v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  int ArgOperands;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *Shape;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t *v151;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  unint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  unint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t NextResultAtOffset;
  unint64_t v190;
  char *v191;
  int v192[2];
  unsigned int v193;
  const void **v194;
  uint64_t v195;
  __int16 v196;
  _QWORD v197[2];
  _QWORD v198[2];
  uint64_t v199[2];
  const void **v200;
  uint64_t v201;
  uint64_t OperandRange;
  uint64_t v203;
  unint64_t AttrDictionary;
  _QWORD v205[2];
  unint64_t v206;
  unsigned int v207;
  unsigned int v208;
  _BYTE v209[152];
  uint64_t v210;
  uint64_t v211;

  v211 = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'batch_dims'";
LABEL_21:
    v194 = (const void **)v8;
    v196 = 259;
    mlir::OpState::emitOpError(this, &v194, (uint64_t)&AttrDictionary);
LABEL_22:
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
    return v14;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      v6 = *((_QWORD *)Value + 1);
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_15:
    v8 = "requires attribute 'dtype'";
    goto LABEL_21;
  }
  v9 = 0;
  v10 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (MirInfoChannelAssignment *)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)Value + v9)))
      break;
    v9 += 16;
    if (v7 == v9)
      goto LABEL_15;
  }
  v12 = v7 - v9;
  if (!v12)
  {
LABEL_20:
    v8 = "requires attribute 'operandSegmentSizes'";
    goto LABEL_21;
  }
  v13 = *((_QWORD *)v11 + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) != MirInfoChannelAssignment::GetNumNeededNEs(v11))
  {
    v11 = (MirInfoChannelAssignment *)((char *)v11 + 16);
    v12 -= 16;
    if (!v12)
      goto LABEL_20;
  }
  v199[0] = *((_QWORD *)v11 + 1);
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)v199);
  if (v16 != 6)
  {
    v22 = v16;
    v194 = (const void **)"'operandSegmentSizes' attribute for specifying operand segments must have 6 elements, but got ";
    v196 = 259;
    mlir::OpState::emitOpError(this, &v194, (uint64_t)&AttrDictionary);
    if (AttrDictionary)
    {
      LODWORD(OperandRange) = 5;
      v203 = v22;
      v23 = &OperandRange;
      v24 = v206;
      if (v207 >= v208)
      {
        v190 = v207 + 1;
        if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
        {
          v191 = (char *)&OperandRange - v206;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v190, 24);
          v24 = v206;
          v23 = (uint64_t *)&v191[v206];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v190, 24);
          v23 = &OperandRange;
          v24 = v206;
        }
      }
      v25 = v24 + 24 * v207;
      v26 = *(_OWORD *)v23;
      *(_QWORD *)(v25 + 16) = v23[2];
      *(_OWORD *)v25 = v26;
      ++v207;
    }
    goto LABEL_22;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v13, (const void **)"dtype", (const void **)5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v10, (const void **)"batch_dims", (const void **)0xA)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(*this, v6, (const void **)"allow_negative_indices", (const void **)0x16))
  {
    return 0;
  }
  v193 = 0;
  ODSOperands = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 0);
  if (v18)
  {
    v19 = ODSOperands;
    v20 = v18;
    v21 = 0;
    while (1)
    {
      v27 = *this;
      v28 = (const void **)(*(_QWORD *)(*(_QWORD *)(v19 + 32 * v21 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      v29 = v21 + 1;
      v193 = v21 + 1;
      v199[0] = (uint64_t)v28;
      v30 = *v28;
      v31 = (void *)*((_QWORD *)*v28 + 17);
      if (v31 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v31 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        v33 = mlir::TypeID::get<mlir::ShapedType>();
        v34 = *((unsigned int *)v30 + 4);
        if (!(_DWORD)v34)
          goto LABEL_51;
        v35 = (_QWORD *)v30[1];
        v36 = &v35[2 * v34];
        do
        {
          v37 = v34 >> 1;
          v38 = &v35[2 * (v34 >> 1)];
          v40 = *v38;
          v39 = v38 + 2;
          v34 += ~(v34 >> 1);
          if (v40 < v33)
            v35 = v39;
          else
            v34 = v37;
        }
        while (v34);
        if (v35 != v36 && *v35 == v33)
          v41 = v35[1];
        else
LABEL_51:
          v41 = 0;
        AttrDictionary = (unint64_t)v28;
        v205[0] = v41;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
          || mlir::Type::isF16((mlir::Type *)&OperandRange)
          || mlir::Type::isF32((mlir::Type *)&OperandRange)
          || mlir::Type::isBF16((mlir::Type *)&OperandRange)
          || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          goto LABEL_37;
        }
        v30 = *v28;
        v31 = (void *)*((_QWORD *)*v28 + 17);
      }
      if (v31 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v31 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_267;
      }
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v30 + 4);
      if (!(_DWORD)v44)
        goto LABEL_79;
      v45 = (_QWORD *)v30[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_79:
        v51 = 0;
      v194 = v28;
      v195 = v51;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v194);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
        && *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) != &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
      {
LABEL_267:
        v196 = 261;
        v194 = (const void **)"operand";
        v195 = 7;
        mlir::Operation::emitOpError(v27, &v194, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v205, " #");
          if (AttrDictionary)
          {
            LODWORD(OperandRange) = 5;
            v203 = v21;
            v52 = v206;
            if (v207 >= v208)
            {
              v58 = v207 + 1;
              if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
              {
                v59 = (char *)&OperandRange - v206;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v58, 24);
                v52 = v206;
                p_OperandRange = (uint64_t *)&v59[v206];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v58, 24);
                p_OperandRange = &OperandRange;
                v52 = v206;
              }
            }
            else
            {
              p_OperandRange = &OperandRange;
            }
            v54 = v52 + 24 * v207;
            v55 = *(_OWORD *)p_OperandRange;
            *(_QWORD *)(v54 + 16) = p_OperandRange[2];
            *(_OWORD *)v54 = v55;
            ++v207;
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v205, " must be tensor of mps native type values or tensor of quantized values, but got ");
          }
        }
        v56 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, v199);
        v57 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v56);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
        if (!v57)
          return 0;
      }
LABEL_37:
      ++v21;
      if (v29 == v20)
        goto LABEL_107;
    }
  }
  LODWORD(v29) = 0;
LABEL_107:
  v60 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 1);
  if (v61)
  {
    v62 = v60;
    v63 = v61;
    v64 = 0;
    while (1)
    {
      v65 = *this;
      v66 = *(_QWORD *)(*(_QWORD *)(v62 + 32 * v64 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v67 = v29 + 1;
      v193 = v29 + 1;
      v199[0] = v66;
      v68 = *(_QWORD *)v66;
      v69 = *(void **)(*(_QWORD *)v66 + 136);
      if (v69 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v69 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_268;
      }
      v71 = mlir::TypeID::get<mlir::ShapedType>();
      v72 = *(unsigned int *)(v68 + 16);
      if (!(_DWORD)v72)
        goto LABEL_124;
      v73 = *(_QWORD **)(v68 + 8);
      v74 = &v73[2 * v72];
      do
      {
        v75 = v72 >> 1;
        v76 = &v73[2 * (v72 >> 1)];
        v78 = *v76;
        v77 = v76 + 2;
        v72 += ~(v72 >> 1);
        if (v78 < v71)
          v73 = v77;
        else
          v72 = v75;
      }
      while (v72);
      if (v73 != v74 && *v73 == v71)
        v79 = v73[1];
      else
LABEL_124:
        v79 = 0;
      AttrDictionary = v66;
      v205[0] = v79;
      v194 = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&v194, 8)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 16)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 32)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 64)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 8)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 16)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 32)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 64))
      {
LABEL_268:
        v196 = 261;
        v194 = (const void **)"operand";
        v195 = 7;
        mlir::Operation::emitOpError(v65, &v194, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v205, " #");
          if (AttrDictionary)
          {
            LODWORD(OperandRange) = 5;
            v203 = v29;
            v80 = v206;
            if (v207 >= v208)
            {
              v86 = v207 + 1;
              if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
              {
                v87 = (char *)&OperandRange - v206;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v86, 24);
                v80 = v206;
                v81 = (uint64_t *)&v87[v206];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v86, 24);
                v81 = &OperandRange;
                v80 = v206;
              }
            }
            else
            {
              v81 = &OperandRange;
            }
            v82 = v80 + 24 * v207;
            v83 = *(_OWORD *)v81;
            *(_QWORD *)(v82 + 16) = v81[2];
            *(_OWORD *)v82 = v83;
            ++v207;
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v205, " must be tensor of int values, but got ");
          }
        }
        v84 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, v199);
        v85 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v84);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
        if (!v85)
          return 0;
      }
      ++v64;
      LODWORD(v29) = v29 + 1;
      if (v64 == v63)
        goto LABEL_147;
    }
  }
  v67 = v29;
LABEL_147:
  v88 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 2);
  *(_QWORD *)v192 = v89;
  if (v89)
  {
    v90 = v88;
    v91 = 0;
    while (1)
    {
      v92 = *this;
      v93 = (const void **)(*(_QWORD *)(*(_QWORD *)(v90 + 32 * v91 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      v94 = v67 + 1;
      v193 = v67 + 1;
      v200 = v93;
      v95 = *v93;
      if (*((_UNKNOWN **)*v93 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
        v96 = mlir::TypeID::get<mlir::ShapedType>();
        v97 = *((unsigned int *)v95 + 4);
        if (!(_DWORD)v97)
          goto LABEL_160;
        v98 = (_QWORD *)v95[1];
        v99 = &v98[2 * v97];
        do
        {
          v100 = v97 >> 1;
          v101 = &v98[2 * (v97 >> 1)];
          v103 = *v101;
          v102 = v101 + 2;
          v97 += ~(v97 >> 1);
          if (v103 < v96)
            v98 = v102;
          else
            v97 = v100;
        }
        while (v97);
        if (v98 != v99 && *v98 == v96)
          v104 = v98[1];
        else
LABEL_160:
          v104 = 0;
        AttrDictionary = (unint64_t)v93;
        v205[0] = v104;
        ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&AttrDictionary);
        v95 = *v93;
        if (ArgOperands)
        {
          v106 = mlir::TypeID::get<mlir::ShapedType>();
          v107 = *((unsigned int *)v95 + 4);
          if (!(_DWORD)v107)
            goto LABEL_170;
          v108 = (_QWORD *)v95[1];
          v109 = &v108[2 * v107];
          do
          {
            v110 = v107 >> 1;
            v111 = &v108[2 * (v107 >> 1)];
            v113 = *v111;
            v112 = v111 + 2;
            v107 += ~(v107 >> 1);
            if (v113 < v106)
              v108 = v112;
            else
              v107 = v110;
          }
          while (v107);
          if (v108 != v109 && *v108 == v106)
            v114 = v108[1];
          else
LABEL_170:
            v114 = 0;
          v194 = v93;
          v195 = v114;
          mlir::ShapedType::getShape((mlir::ShapedType *)&v194);
          v95 = *v93;
          if (!v115)
          {
            v155 = mlir::TypeID::get<mlir::ShapedType>();
            v156 = *((unsigned int *)v95 + 4);
            if (!(_DWORD)v156)
              goto LABEL_228;
            v157 = (_QWORD *)v95[1];
            v158 = &v157[2 * v156];
            do
            {
              v159 = v156 >> 1;
              v160 = &v157[2 * (v156 >> 1)];
              v162 = *v160;
              v161 = v160 + 2;
              v156 += ~(v156 >> 1);
              if (v162 < v155)
                v157 = v161;
              else
                v156 = v159;
            }
            while (v156);
            if (v157 != v158 && *v157 == v155)
              v163 = v157[1];
            else
LABEL_228:
              v163 = 0;
            OperandRange = (uint64_t)v93;
            v203 = v163;
            v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange);
            if (mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
              || mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
            {
              goto LABEL_150;
            }
            v95 = *v93;
          }
        }
      }
      v116 = (void *)v95[17];
      if (v116 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v116 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_218;
      }
      v118 = mlir::TypeID::get<mlir::ShapedType>();
      v119 = *((unsigned int *)v95 + 4);
      if (!(_DWORD)v119)
        goto LABEL_185;
      v120 = (_QWORD *)v95[1];
      v121 = &v120[2 * v119];
      do
      {
        v122 = v119 >> 1;
        v123 = &v120[2 * (v119 >> 1)];
        v125 = *v123;
        v124 = v123 + 2;
        v119 += ~(v119 >> 1);
        if (v125 < v118)
          v120 = v124;
        else
          v119 = v122;
      }
      while (v119);
      if (v120 != v121 && *v120 == v118)
        v126 = v120[1];
      else
LABEL_185:
        v126 = 0;
      v199[0] = (uint64_t)v93;
      v199[1] = v126;
      v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v199);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
      {
        goto LABEL_218;
      }
      v127 = *v93;
      v128 = mlir::TypeID::get<mlir::ShapedType>();
      v129 = *((unsigned int *)v127 + 4);
      if (!(_DWORD)v129)
        goto LABEL_196;
      v130 = (_QWORD *)v127[1];
      v131 = &v130[2 * v129];
      do
      {
        v132 = v129 >> 1;
        v133 = &v130[2 * (v129 >> 1)];
        v135 = *v133;
        v134 = v133 + 2;
        v129 += ~(v129 >> 1);
        if (v135 < v128)
          v130 = v134;
        else
          v129 = v132;
      }
      while (v129);
      if (v130 != v131 && *v130 == v128)
        v136 = v130[1];
      else
LABEL_196:
        v136 = 0;
      v198[0] = v93;
      v198[1] = v136;
      Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v198);
      v210 = 1;
      if (v138 != 1 || *Shape != v210)
      {
LABEL_218:
        v139 = *v93;
        if (*((_UNKNOWN **)*v93 + 17) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          goto LABEL_200;
        v146 = mlir::TypeID::get<mlir::ShapedType>();
        v147 = *((unsigned int *)v139 + 4);
        if (!(_DWORD)v147)
          goto LABEL_216;
        v148 = (_QWORD *)v139[1];
        v149 = &v148[2 * v147];
        do
        {
          v150 = v147 >> 1;
          v151 = &v148[2 * (v147 >> 1)];
          v153 = *v151;
          v152 = v151 + 2;
          v147 += ~(v147 >> 1);
          if (v153 < v146)
            v148 = v152;
          else
            v147 = v150;
        }
        while (v147);
        if (v148 != v149 && *v148 == v146)
          v154 = v148[1];
        else
LABEL_216:
          v154 = 0;
        v197[0] = v93;
        v197[1] = v154;
        v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v197);
        if (!mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
          && !mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
        {
LABEL_200:
          v196 = 261;
          v194 = (const void **)"operand";
          v195 = 7;
          mlir::Operation::emitOpError(v92, &v194, (uint64_t)&AttrDictionary);
          if (AttrDictionary)
          {
            mlir::Diagnostic::operator<<((uint64_t)v205, " #");
            if (AttrDictionary)
            {
              LODWORD(OperandRange) = 5;
              v203 = v67;
              v140 = v206;
              if (v207 >= v208)
              {
                v164 = v207 + 1;
                if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
                {
                  v165 = (char *)&OperandRange - v206;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v164, 24);
                  v140 = v206;
                  v141 = (uint64_t *)&v165[v206];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v164, 24);
                  v141 = &OperandRange;
                  v140 = v206;
                }
              }
              else
              {
                v141 = &OperandRange;
              }
              v142 = v140 + 24 * v207;
              v143 = *(_OWORD *)v141;
              *(_QWORD *)(v142 + 16) = v141[2];
              *(_OWORD *)v142 = v143;
              ++v207;
              if (AttrDictionary)
                mlir::Diagnostic::operator<<((uint64_t)v205, " must be 0D tensor of mps index type values or static-shape defined tensor with shape equal to [1] or unranked tensor of mps index type values, but got ");
            }
          }
          v144 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v200);
          v145 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v144);
          if (AttrDictionary)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
          if (!v145)
            return 0;
        }
      }
LABEL_150:
      ++v91;
      ++v67;
      if (v91 == *(_QWORD *)v192)
        goto LABEL_243;
    }
  }
  v94 = v67;
LABEL_243:
  v166 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 3);
  if (v167)
  {
    v168 = v167;
    v169 = v166 + 24;
    do
    {
      v170 = *this;
      v171 = *(_QWORD *)(*(_QWORD *)v169 + 8) & 0xFFFFFFFFFFFFFFF8;
      v193 = v94 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v170, v171, (const void **)"operand", (const void **)7, v94))return 0;
      v169 += 32;
      ++v94;
    }
    while (--v168);
  }
  v172 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 4);
  v174 = v173;
  if (v173 >= 2)
    goto LABEL_251;
  if (v173)
  {
    v175 = *(_QWORD *)(v172 + 24);
    v176 = *this;
    v177 = *(_QWORD *)(v175 + 8) & 0xFFFFFFFFFFFFFFF8;
    v178 = v193++;
    if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps8(v176, v177, (const void **)"operand", (const void **)7, v178))return 0;
  }
  v179 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 5);
  v174 = v180;
  if (v180 < 2)
  {
    if (!v180
      || (v184 = *(_QWORD *)(v179 + 24),
          v185 = *this,
          v186 = *(_QWORD *)(v184 + 8) & 0xFFFFFFFFFFFFFFF8,
          v187 = v193,
          ++v193,
          mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v185, v186, (const void **)"operand", (const void **)7, v187)))
    {
      if (*((_DWORD *)*this + 9))
        v188 = (uint64_t)(*this - 2);
      else
        v188 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v188, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    return 0;
  }
LABEL_251:
  v194 = (const void **)"operand group starting at #";
  v196 = 259;
  mlir::OpState::emitOpError(this, &v194, (uint64_t)&AttrDictionary);
  v181 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&AttrDictionary, &v193);
  v182 = (uint64_t)v181;
  if (*v181)
    mlir::Diagnostic::operator<<((uint64_t)(v181 + 1), " requires 0 or 1 element, but found ");
  OperandRange = v174;
  v183 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v182, &OperandRange);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v183);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&AttrDictionary);
  return v14;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps8(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_27;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isSignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_27:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v22 = &v34;
      v23 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = v38;
          v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v22 = &v34;
          v23 = v38;
        }
      }
      v24 = v23 + 24 * v39;
      v25 = *(_OWORD *)v22;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v22 + 2);
      *(_OWORD *)v24 = v25;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of quantized values, but got ");
    }
  }
  v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

unint64_t mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *this, int a2)
{
  uint64_t v2;
  MirInfoChannelAssignment *Value;
  uint64_t v5;
  MirInfoChannelAssignment *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  LODWORD(v2) = a2;
  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue(this);
  v5 = mlir::DictionaryAttr::end(this);
  v6 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v5 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 8));
  if ((v7 & 1) == 0)
  {
    v11 = 0;
    if ((_DWORD)v2)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    v9 = 0;
    return v9 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                                   + 4 * v2) << 32);
  }
  v11 = *((_QWORD *)v6 + 1);
  if (!(_DWORD)v2)
    goto LABEL_7;
LABEL_3:
  v8 = 0;
  LODWORD(v9) = 0;
  v2 = v2;
  do
  {
    v9 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                  + v8)
                      + v9);
    v8 += 4;
  }
  while (4 * v2 != v8);
  return v9 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                                 + 4 * v2) << 32);
}

uint64_t mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getWeightsQuantParamsAxis(mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *this)
{
  MirInfoChannelAssignment *v2;
  MirInfoChannelAssignment *v3;
  MirInfoChannelAssignment *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;

  v2 = (MirInfoChannelAssignment *)(mlir::AffineMapAttr::getValue(this) + 32);
  v3 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, v3, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 40));
  if ((v5 & 1) != 0 && (v6 = *((_QWORD *)v4 + 1)) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(void **)(*(_QWORD *)v6 + 136);
    if (v10 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v6 = 0;
    v15 = v6;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      mlir::IntegerAttr::getValue(&v15, (llvm::APInt *)&v13);
      if (v14 > 0x40)
      {
        v11 = *v13;
        MEMORY[0x20BD002D4]();
      }
      else
      {
        v11 = (uint64_t)((_QWORD)v13 << -(uint64_t)v14) >> -(uint64_t)v14;
      }
      v7 = v11 & 0xFFFFFF00;
      v9 = v11;
      v8 = 0x100000000;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  return v8 | v7 | v9;
}

unint64_t mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(mlir::Operation **this, int a2)
{
  uint64_t v2;
  mlir::Operation *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *Value;
  mlir::Operation *v7;
  mlir::ArrayAttr *v8;
  uint64_t v9;
  uint64_t v10;
  MirInfoChannelAssignment *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AttrDictionary;

  LODWORD(v2) = a2;
  v4 = *this;
  if (*((_BYTE *)v4 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v4 + 56);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v7 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v7);
    v8 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v8 = (mlir::Operation *)((char *)v7 + 56);
  }
  v9 = mlir::ArrayAttr::getValue(v8);
  v11 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v9 + 16 * v10 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v12 & 1) == 0)
  {
    AttrDictionary = 0;
    if ((_DWORD)v2)
      goto LABEL_9;
LABEL_13:
    v2 = 0;
    v14 = 0;
    return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                    + 4 * v2) << 32);
  }
  AttrDictionary = *((_QWORD *)v11 + 1);
  if (!(_DWORD)v2)
    goto LABEL_13;
LABEL_9:
  v13 = 0;
  LODWORD(v14) = 0;
  v2 = v2;
  do
  {
    v14 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                   + v13)
                       + v14);
    v13 += 4;
  }
  while (4 * v2 != v13);
  return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                  + 4 * v2) << 32);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getODSOperands(mlir::Operation **this, int a2)
{
  unsigned int ODSOperandIndexAndLength;
  uint64_t v4;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, a2);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v4 = *((_QWORD *)*this + 9);
  else
    v4 = 0;
  return v4 + 32 * ODSOperandIndexAndLength;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8 - 32), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 40));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getOutputTypeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getTransposeLhsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::BoolAttr::classof(*((_QWORD **)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getTransposeRhsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 32));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::BoolAttr::classof(*((_QWORD **)v9 + 1)))
    return v11;
  return 0;
}

void mlir::mpsx::QuantizedMatMulOp::populateDefaultAttrs(mlir::mpsx::QuantizedMatMulOp *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t BoolAttr;
  uint64_t v7;
  uint64_t v8;
  mlir::BoolAttr *Context;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)this + 96);
  Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[3]))
  {
    v5 = v4[3];
    BoolAttr = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v5, BoolAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[4]))
  {
    v7 = v4[4];
    v8 = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v7, v8);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
}

BOOL mlir::mpsx::QuantizedMatMulOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  const void **v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  MirInfoChannelAssignment *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const void **v18;
  uint64_t v19;
  uint64_t ODSOperands;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  const void **v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  const void **v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  const void **v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  const void **v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  const void **v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  const void **v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  const void **v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  const void **v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t NextResultAtOffset;
  char *v100;
  uint64_t v101;
  const void **v102[4];
  __int16 v103;
  uint64_t v104[3];
  unint64_t AttrDictionary;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  _QWORD v110[20];

  v110[19] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'operandSegmentSizes'";
LABEL_16:
    v102[0] = (const void **)v8;
    v103 = 259;
    mlir::OpState::emitOpError(this, v102, (uint64_t)&AttrDictionary);
LABEL_17:
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v106);
    return v12;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      v6 = (const void **)*((_QWORD *)Value + 1);
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_15:
    v8 = "requires attribute 'output_type'";
    goto LABEL_16;
  }
  v9 = 0;
  v10 = *((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (MirInfoChannelAssignment *)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)Value + v9)))
      break;
    v9 += 16;
    if (v7 == v9)
      goto LABEL_15;
  }
  v14 = *((_QWORD *)v11 + 1);
  v15 = v7 - v9;
  if (v7 == v9)
  {
    v18 = 0;
    v17 = 0;
    v16 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == MirInfoChannelAssignment::GetNumNeededNEs(v11))
      {
        v16 = (_QWORD *)*((_QWORD *)v11 + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 32) == MirInfoChannelAssignment::GetNumNeededNEs(v11))
      {
        v17 = (_QWORD *)*((_QWORD *)v11 + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 40) == MirInfoChannelAssignment::GetNumNeededNEs(v11))
      {
        v18 = (const void **)*((_QWORD *)v11 + 1);
      }
      v11 = (MirInfoChannelAssignment *)((char *)v11 + 16);
      v15 -= 16;
    }
    while (v15);
  }
  v101 = v10;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v101);
  if (v19 != 11)
  {
    v88 = v19;
    v102[0] = (const void **)"'operandSegmentSizes' attribute for specifying operand segments must have 11 elements, but got ";
    v103 = 259;
    mlir::OpState::emitOpError(this, v102, (uint64_t)&AttrDictionary);
    if (AttrDictionary)
    {
      LODWORD(v104[0]) = 5;
      v104[1] = v88;
      v89 = v104;
      v90 = v107;
      if (v108 >= v109)
      {
        v93 = v108 + 1;
        if (v107 <= (unint64_t)v104 && v107 + 24 * v108 > (unint64_t)v104)
        {
          v100 = (char *)v104 - v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
          v90 = v107;
          v89 = (uint64_t *)&v100[v107];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
          v89 = v104;
          v90 = v107;
        }
      }
      v91 = v90 + 24 * v108;
      v92 = *(_OWORD *)v89;
      *(_QWORD *)(v91 + 16) = v89[2];
      *(_OWORD *)v91 = v92;
      ++v108;
    }
    goto LABEL_17;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(*this, v6, (const void **)"input_quant_params_axis", (const void **)0x17)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(*this, v18, (const void **)"weights_quant_params_axis", (const void **)0x19)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v14, (const void **)"output_type", (const void **)0xB)|| !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(*this, v16, (const void **)"transpose_lhs", (const void **)0xD)
    || !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(*this, v17, (const void **)"transpose_rhs", (const void **)0xD))
  {
    return 0;
  }
  LODWORD(v101) = 0;
  ODSOperands = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 0);
  if (v21)
  {
    v22 = v21;
    v23 = ODSOperands + 24;
    do
    {
      v24 = *this;
      v25 = *(_QWORD *)(*(_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFFFF8;
      v26 = v101;
      LODWORD(v101) = v101 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(v24, v25, (const void **)"operand", (const void **)7, v26))return 0;
      v23 += 32;
    }
    while (--v22);
  }
  v27 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 1);
  v29 = v28;
  if (v28 >= 2)
    goto LABEL_70;
  if (v28)
  {
    v30 = *(_QWORD *)(v27 + 24);
    v31 = *this;
    v32 = (const void **)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8);
    v33 = v101;
    LODWORD(v101) = v101 + 1;
    if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v31, v32, (const void **)"operand", 7, v33))return 0;
  }
  v34 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 2);
  v29 = v35;
  if (v35 < 2)
  {
    if (v35)
    {
      v36 = *(_QWORD *)(v34 + 24);
      v37 = *this;
      v38 = (const void **)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8);
      v39 = v101;
      LODWORD(v101) = v101 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v37, v38, (const void **)"operand", 7, v39))return 0;
    }
    v40 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 3);
    v29 = v41;
    if (v41 < 2)
    {
      if (v41)
      {
        v42 = *(_QWORD *)(v40 + 24);
        v43 = *this;
        v44 = (const void **)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8);
        v45 = v101;
        LODWORD(v101) = v101 + 1;
        if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v43, v44, (const void **)"operand", 7, v45))return 0;
      }
      v46 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 4);
      if (v47)
      {
        v48 = v47;
        v49 = v46 + 24;
        do
        {
          v50 = *this;
          v51 = *(_QWORD *)(*(_QWORD *)v49 + 8) & 0xFFFFFFFFFFFFFFF8;
          v52 = v101;
          LODWORD(v101) = v101 + 1;
          if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(v50, v51, (const void **)"operand", (const void **)7, v52))return 0;
          v49 += 32;
        }
        while (--v48);
      }
      v53 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 5);
      v29 = v54;
      if (v54 >= 2)
        goto LABEL_70;
      if (v54)
      {
        v55 = *(_QWORD *)(v53 + 24);
        v56 = *this;
        v57 = (const void **)(*(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF8);
        v58 = v101;
        LODWORD(v101) = v101 + 1;
        if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps13(v56, v57, (const void **)"operand", 7, v58))return 0;
      }
      v59 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 6);
      v29 = v60;
      if (v60 < 2)
      {
        if (v60)
        {
          v61 = *(_QWORD *)(v59 + 24);
          v62 = *this;
          v63 = (const void **)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF8);
          v64 = v101;
          LODWORD(v101) = v101 + 1;
          if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v62, v63, (const void **)"operand", 7, v64))return 0;
        }
        v65 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 7);
        v29 = v66;
        if (v66 < 2)
        {
          if (v66)
          {
            v67 = *(_QWORD *)(v65 + 24);
            v68 = *this;
            v69 = (const void **)(*(_QWORD *)(v67 + 8) & 0xFFFFFFFFFFFFFFF8);
            v70 = v101;
            LODWORD(v101) = v101 + 1;
            if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v68, v69, (const void **)"operand", 7, v70))return 0;
          }
          v71 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 8);
          v29 = v72;
          if (v72 < 2)
          {
            if (v72)
            {
              v73 = *(_QWORD *)(v71 + 24);
              v74 = *this;
              v75 = *(_QWORD *)(v73 + 8) & 0xFFFFFFFFFFFFFFF8;
              v76 = v101;
              LODWORD(v101) = v101 + 1;
              if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v74, v75, (const void **)"operand", (const void **)7, v76))return 0;
            }
            v77 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 9);
            v29 = v78;
            if (v78 < 2)
            {
              if (!v78
                || (v79 = *(_QWORD *)(v77 + 24),
                    v80 = *this,
                    v81 = (const void **)(*(_QWORD *)(v79 + 8) & 0xFFFFFFFFFFFFFFF8),
                    v82 = v101,
                    LODWORD(v101) = v101 + 1,
                    mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v80, v81, (const void **)"operand", 7, v82)))
              {
                v83 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 10);
                v29 = v84;
                if (v84 >= 2)
                  goto LABEL_70;
                if (!v84
                  || (v94 = *(_QWORD *)(v83 + 24),
                      v95 = *this,
                      v96 = (const void **)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF8),
                      v97 = v101,
                      LODWORD(v101) = v101 + 1,
                      mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v95, v96, (const void **)"operand", 7, v97)))
                {
                  if (*((_DWORD *)*this + 9))
                    v98 = (uint64_t)(*this - 2);
                  else
                    v98 = 0;
                  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v98, 0);
                  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
                }
              }
              return 0;
            }
          }
        }
      }
    }
  }
LABEL_70:
  v102[0] = (const void **)"operand group starting at #";
  v103 = 259;
  mlir::OpState::emitOpError(this, v102, (uint64_t)&AttrDictionary);
  v85 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&AttrDictionary, (unsigned int *)&v101);
  v86 = (uint64_t)v85;
  if (*v85)
    mlir::Diagnostic::operator<<((uint64_t)(v85 + 1), " requires 0 or 1 element, but found ");
  v104[0] = v29;
  v87 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v86, v104);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v87);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&AttrDictionary);
  return v12;
}

uint64_t mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(uint64_t *a1, _QWORD *a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x24BDAC8D0];
  if (!a2 || mlir::BoolAttr::classof(a2))
    return 1;
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (v11)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (v11)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: BOOL attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_30;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_30:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v22 = &v34;
      v23 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = v38;
          v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v22 = &v34;
          v23 = v38;
        }
      }
      v24 = v23 + 24 * v39;
      v25 = *(_OWORD *)v22;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v22 + 2);
      *(_OWORD *)v24 = v25;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of floating point or quantized values, but got ");
    }
  }
  v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v81;
  char *v82;
  const void **v83;
  uint64_t v84;
  __int16 v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  const void **v89;
  uint64_t OperandRange;
  const void **v91;
  uint64_t v92;
  const void **v93;
  _QWORD v94[2];
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD v98[20];

  v98[19] = *MEMORY[0x24BDAC8D0];
  v89 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    goto LABEL_65;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93))
    goto LABEL_65;
  v20 = *a2;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *((unsigned int *)v20 + 4);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = (_QWORD *)v20[1];
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v83 = a2;
  v84 = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v83);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ShapedType>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_30:
      v40 = 0;
    v91 = a2;
    v92 = v40;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
    if (v41 != 1)
    {
      v42 = *a2;
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v42 + 4);
      if (!(_DWORD)v44)
        goto LABEL_40;
      v45 = (_QWORD *)v42[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_40:
        v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)v88);
      if (v52 != 2)
      {
        v53 = *a2;
        v54 = mlir::TypeID::get<mlir::ShapedType>();
        v55 = *((unsigned int *)v53 + 4);
        if (!(_DWORD)v55)
          goto LABEL_50;
        v56 = (_QWORD *)v53[1];
        v57 = &v56[2 * v55];
        do
        {
          v58 = v55 >> 1;
          v59 = &v56[2 * (v55 >> 1)];
          v61 = *v59;
          v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54)
            v56 = v60;
          else
            v55 = v58;
        }
        while (v55);
        if (v56 != v57 && *v56 == v54)
          v62 = v56[1];
        else
LABEL_50:
          v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::ShapedType::getShape((mlir::ShapedType *)v87);
        if (v63 != 3)
          goto LABEL_65;
      }
    }
  }
  v64 = *a2;
  v65 = mlir::TypeID::get<mlir::ShapedType>();
  v66 = *((unsigned int *)v64 + 4);
  if (!(_DWORD)v66)
    goto LABEL_60;
  v67 = (_QWORD *)v64[1];
  v68 = &v67[2 * v66];
  do
  {
    v69 = v66 >> 1;
    v70 = &v67[2 * (v66 >> 1)];
    v72 = *v70;
    v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65)
      v67 = v71;
    else
      v66 = v69;
  }
  while (v66);
  if (v67 != v68 && *v67 == v65)
    v73 = v67[1];
  else
LABEL_60:
    v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    return 1;
  }
LABEL_65:
  v85 = 261;
  v83 = a3;
  v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      v92 = a5;
      v75 = (char *)&v91;
      v76 = v95;
      if (v96 >= v97)
      {
        v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v76 = v95;
          v75 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v75 = (char *)&v91;
          v76 = v95;
        }
      }
      v77 = v76 + 24 * v96;
      v78 = *(_OWORD *)v75;
      *(_QWORD *)(v77 + 16) = *((_QWORD *)v75 + 2);
      *(_OWORD *)v77 = v78;
      ++v96;
      if (v93)
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of floating point values, but got ");
    }
  }
  v79 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v79);
  if (v93)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v74;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  char *v82;
  const void **v83;
  uint64_t v84;
  __int16 v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  const void **v89;
  uint64_t OperandRange;
  const void **v91;
  uint64_t v92;
  const void **v93;
  _QWORD v94[2];
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD v98[20];

  v98[19] = *MEMORY[0x24BDAC8D0];
  v89 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    goto LABEL_73;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93))
    goto LABEL_73;
  v20 = *a2;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *((unsigned int *)v20 + 4);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = (_QWORD *)v20[1];
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v83 = a2;
  v84 = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v83);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ShapedType>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_30:
      v40 = 0;
    v91 = a2;
    v92 = v40;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
    if (v41 != 1)
    {
      v42 = *a2;
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v42 + 4);
      if (!(_DWORD)v44)
        goto LABEL_40;
      v45 = (_QWORD *)v42[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_40:
        v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)v88);
      if (v52 != 2)
      {
        v53 = *a2;
        v54 = mlir::TypeID::get<mlir::ShapedType>();
        v55 = *((unsigned int *)v53 + 4);
        if (!(_DWORD)v55)
          goto LABEL_50;
        v56 = (_QWORD *)v53[1];
        v57 = &v56[2 * v55];
        do
        {
          v58 = v55 >> 1;
          v59 = &v56[2 * (v55 >> 1)];
          v61 = *v59;
          v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54)
            v56 = v60;
          else
            v55 = v58;
        }
        while (v55);
        if (v56 != v57 && *v56 == v54)
          v62 = v56[1];
        else
LABEL_50:
          v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::ShapedType::getShape((mlir::ShapedType *)v87);
        if (v63 != 3)
          goto LABEL_73;
      }
    }
  }
  v64 = *a2;
  v65 = mlir::TypeID::get<mlir::ShapedType>();
  v66 = *((unsigned int *)v64 + 4);
  if (!(_DWORD)v66)
    goto LABEL_60;
  v67 = (_QWORD *)v64[1];
  v68 = &v67[2 * v66];
  do
  {
    v69 = v66 >> 1;
    v70 = &v67[2 * (v66 >> 1)];
    v72 = *v70;
    v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65)
      v67 = v71;
    else
      v66 = v69;
  }
  while (v66);
  if (v67 != v68 && *v67 == v65)
    v73 = v67[1];
  else
LABEL_60:
    v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
    || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_73:
  v85 = 261;
  v83 = a3;
  v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      v92 = a5;
      v74 = (char *)&v91;
      v75 = v95;
      if (v96 >= v97)
      {
        v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v75 = v95;
          v74 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v74 = (char *)&v91;
          v75 = v95;
        }
      }
      v76 = v75 + 24 * v96;
      v77 = *(_OWORD *)v74;
      *(_QWORD *)(v76 + 16) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      ++v96;
      if (v93)
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of quantized values, but got ");
    }
  }
  v78 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v78);
  if (v93)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v79;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps13(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  char *v82;
  const void **v83;
  uint64_t v84;
  __int16 v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  const void **v89;
  uint64_t OperandRange;
  const void **v91;
  uint64_t v92;
  const void **v93;
  _QWORD v94[2];
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD v98[20];

  v98[19] = *MEMORY[0x24BDAC8D0];
  v89 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    goto LABEL_76;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93))
    goto LABEL_76;
  v20 = *a2;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *((unsigned int *)v20 + 4);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = (_QWORD *)v20[1];
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v83 = a2;
  v84 = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v83);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ShapedType>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_30:
      v40 = 0;
    v91 = a2;
    v92 = v40;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v91);
    if (v41 != 1)
    {
      v42 = *a2;
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v42 + 4);
      if (!(_DWORD)v44)
        goto LABEL_40;
      v45 = (_QWORD *)v42[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_40:
        v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::ShapedType::getShape((mlir::ShapedType *)v88);
      if (v52 != 2)
      {
        v53 = *a2;
        v54 = mlir::TypeID::get<mlir::ShapedType>();
        v55 = *((unsigned int *)v53 + 4);
        if (!(_DWORD)v55)
          goto LABEL_50;
        v56 = (_QWORD *)v53[1];
        v57 = &v56[2 * v55];
        do
        {
          v58 = v55 >> 1;
          v59 = &v56[2 * (v55 >> 1)];
          v61 = *v59;
          v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54)
            v56 = v60;
          else
            v55 = v58;
        }
        while (v55);
        if (v56 != v57 && *v56 == v54)
          v62 = v56[1];
        else
LABEL_50:
          v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::ShapedType::getShape((mlir::ShapedType *)v87);
        if (v63 != 3)
          goto LABEL_76;
      }
    }
  }
  v64 = *a2;
  v65 = mlir::TypeID::get<mlir::ShapedType>();
  v66 = *((unsigned int *)v64 + 4);
  if (!(_DWORD)v66)
    goto LABEL_60;
  v67 = (_QWORD *)v64[1];
  v68 = &v67[2 * v66];
  do
  {
    v69 = v66 >> 1;
    v70 = &v67[2 * (v66 >> 1)];
    v72 = *v70;
    v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65)
      v67 = v71;
    else
      v66 = v69;
  }
  while (v66);
  if (v67 != v68 && *v67 == v65)
    v73 = v67[1];
  else
LABEL_60:
    v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
    || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_76:
  v85 = 261;
  v83 = a3;
  v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      v92 = a5;
      v74 = (char *)&v91;
      v75 = v95;
      if (v96 >= v97)
      {
        v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v75 = v95;
          v74 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v74 = (char *)&v91;
          v75 = v95;
        }
      }
      v76 = v75 + 24 * v96;
      v77 = *(_OWORD *)v74;
      *(_QWORD *)(v76 + 16) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      ++v96;
      if (v93)
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of floating point or quantized values, but got ");
    }
  }
  v78 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v78);
  if (v93)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v79;
}

uint64_t mlir::mpsx::RMSNormOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int ArgOperands;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t NextResultAtOffset;
  uint64_t *v80;
  const void **v81;
  _QWORD *v82;
  void *v83;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *p_Value;
  unint64_t v106;
  unint64_t v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  uint64_t ElementTypeOrSelf;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120[2];
  _QWORD v121[2];
  _QWORD v122[2];
  _QWORD v123[2];
  const void **v124;
  uint64_t OperandRange;
  const void **v126;
  uint64_t v127;
  __int16 v128;
  uint64_t Value;
  uint64_t v130;
  const void **v131;
  _QWORD v132[2];
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  _QWORD v136[20];

  v136[19] = *MEMORY[0x24BDAC8D0];
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  v124 = v3;
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *((unsigned int *)v4 + 4);
    if (!(_DWORD)v6)
      goto LABEL_12;
    v7 = (_QWORD *)v4[1];
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_12:
      v13 = 0;
    v131 = v3;
    v132[0] = v13;
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v131);
    v4 = *v3;
    if (ArgOperands)
    {
      v15 = mlir::TypeID::get<mlir::ShapedType>();
      v16 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v16)
        goto LABEL_22;
      v17 = (_QWORD *)v4[1];
      v18 = &v17[2 * v16];
      do
      {
        v19 = v16 >> 1;
        v20 = &v17[2 * (v16 >> 1)];
        v22 = *v20;
        v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15)
          v17 = v21;
        else
          v16 = v19;
      }
      while (v16);
      if (v17 != v18 && *v17 == v15)
        v23 = v17[1];
      else
LABEL_22:
        v23 = 0;
      v126 = v3;
      v127 = v23;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v126);
      v4 = *v3;
      if (!v24)
      {
        v69 = mlir::TypeID::get<mlir::ShapedType>();
        v70 = *((unsigned int *)v4 + 4);
        if (!(_DWORD)v70)
          goto LABEL_87;
        v71 = (_QWORD *)v4[1];
        v72 = &v71[2 * v70];
        do
        {
          v73 = v70 >> 1;
          v74 = &v71[2 * (v70 >> 1)];
          v76 = *v74;
          v75 = v74 + 2;
          v70 += ~(v70 >> 1);
          if (v76 < v69)
            v71 = v75;
          else
            v70 = v73;
        }
        while (v70);
        if (v71 != v72 && *v71 == v69)
          v77 = v71[1];
        else
LABEL_87:
          v77 = 0;
        Value = (uint64_t)v3;
        v130 = v77;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          goto LABEL_90;
        }
        v4 = *v3;
      }
    }
  }
  if ((_UNKNOWN *)v4[17] == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *((unsigned int *)v4 + 4);
    if (!(_DWORD)v26)
      goto LABEL_33;
    v27 = (_QWORD *)v4[1];
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
      v33 = v27[1];
    else
LABEL_33:
      v33 = 0;
    v123[0] = v3;
    v123[1] = v33;
    v34 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v123);
    v4 = *v3;
    if (v34)
    {
      v35 = mlir::TypeID::get<mlir::ShapedType>();
      v36 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v36)
        goto LABEL_43;
      v37 = (_QWORD *)v4[1];
      v38 = &v37[2 * v36];
      do
      {
        v39 = v36 >> 1;
        v40 = &v37[2 * (v36 >> 1)];
        v42 = *v40;
        v41 = v40 + 2;
        v36 += ~(v36 >> 1);
        if (v42 < v35)
          v37 = v41;
        else
          v36 = v39;
      }
      while (v36);
      if (v37 != v38 && *v37 == v35)
        v43 = v37[1];
      else
LABEL_43:
        v43 = 0;
      v122[0] = v3;
      v122[1] = v43;
      mlir::ShapedType::getShape((mlir::ShapedType *)v122);
      v4 = *v3;
      if (v44 == 1)
      {
        v45 = mlir::TypeID::get<mlir::ShapedType>();
        v46 = *((unsigned int *)v4 + 4);
        if (!(_DWORD)v46)
          goto LABEL_53;
        v47 = (_QWORD *)v4[1];
        v48 = &v47[2 * v46];
        do
        {
          v49 = v46 >> 1;
          v50 = &v47[2 * (v46 >> 1)];
          v52 = *v50;
          v51 = v50 + 2;
          v46 += ~(v46 >> 1);
          if (v52 < v45)
            v47 = v51;
          else
            v46 = v49;
        }
        while (v46);
        if (v47 != v48 && *v47 == v45)
          v53 = v47[1];
        else
LABEL_53:
          v53 = 0;
        v121[0] = v3;
        v121[1] = v53;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          goto LABEL_90;
        }
        v4 = *v3;
      }
    }
  }
  if ((_UNKNOWN *)v4[17] != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_175;
  v60 = mlir::TypeID::get<mlir::ShapedType>();
  v61 = *((unsigned int *)v4 + 4);
  if (!(_DWORD)v61)
    goto LABEL_75;
  v62 = (_QWORD *)v4[1];
  v63 = &v62[2 * v61];
  do
  {
    v64 = v61 >> 1;
    v65 = &v62[2 * (v61 >> 1)];
    v67 = *v65;
    v66 = v65 + 2;
    v61 += ~(v61 >> 1);
    if (v67 < v60)
      v62 = v66;
    else
      v61 = v64;
  }
  while (v61);
  if (v62 != v63 && *v62 == v60)
    v68 = v62[1];
  else
LABEL_75:
    v68 = 0;
  v120[0] = (uint64_t)v3;
  v120[1] = v68;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v120);
  if (!mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
  {
LABEL_175:
    v128 = 261;
    v126 = (const void **)"operand";
    v127 = 7;
    mlir::Operation::emitOpError(v2, &v126, (uint64_t)&v131);
    if (v131)
    {
      mlir::Diagnostic::operator<<((uint64_t)v132, " #");
      if (v131)
      {
        LODWORD(Value) = 5;
        v130 = 2;
        v54 = &Value;
        v55 = v133;
        if (v134 >= v135)
        {
          v116 = v134 + 1;
          if (v133 <= (unint64_t)&Value && v133 + 24 * v134 > (unint64_t)&Value)
          {
            v118 = (char *)&Value - v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v116, 24);
            v55 = v133;
            v54 = (uint64_t *)&v118[v133];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v116, 24);
            v54 = &Value;
            v55 = v133;
          }
        }
        v56 = v55 + 24 * v134;
        v57 = *(_OWORD *)v54;
        *(_QWORD *)(v56 + 16) = v54[2];
        *(_OWORD *)v56 = v57;
        ++v134;
        if (v131)
          mlir::Diagnostic::operator<<((uint64_t)v132, " must be 0D tensor of mps index type values or 1D tensor of mps index type values or unranked tensor of mps index type values, but got ");
      }
    }
    v58 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v131, (uint64_t *)&v124);
    v59 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v58);
    if (v131)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
    if (!v59)
      return 0;
  }
LABEL_90:
  if (*((_DWORD *)*this + 9))
    v78 = (uint64_t)(*this - 2);
  else
    v78 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v78, 0);
  v80 = *this;
  v81 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  v120[0] = (uint64_t)v81;
  v82 = *v81;
  v83 = (void *)*((_QWORD *)*v81 + 17);
  if (v83 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v83 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_121:
    if (v83 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v83 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v95 = mlir::TypeID::get<mlir::ShapedType>();
      v96 = *((unsigned int *)v82 + 4);
      if (!(_DWORD)v96)
        goto LABEL_134;
      v97 = (_QWORD *)v82[1];
      v98 = &v97[2 * v96];
      do
      {
        v99 = v96 >> 1;
        v100 = &v97[2 * (v96 >> 1)];
        v102 = *v100;
        v101 = v100 + 2;
        v96 += ~(v96 >> 1);
        if (v102 < v95)
          v97 = v101;
        else
          v96 = v99;
      }
      while (v96);
      if (v97 != v98 && *v97 == v95)
        v103 = v97[1];
      else
LABEL_134:
        v103 = 0;
      v126 = v81;
      v127 = v103;
      v104 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v126);
      if (*(_UNKNOWN **)(*(_QWORD *)v104 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v115 = v104;
        v123[0] = v104;
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v123);
        if (mlir::Type::isF16((mlir::Type *)&Value))
          goto LABEL_144;
        v121[0] = v115;
        v122[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v121);
        if (mlir::Type::isF32((mlir::Type *)v122))
          goto LABEL_144;
      }
    }
    v128 = 261;
    v126 = (const void **)"result";
    v127 = 6;
    mlir::Operation::emitOpError(v80, &v126, (uint64_t)&v131);
    if (v131)
    {
      mlir::Diagnostic::operator<<((uint64_t)v132, " #");
      if (v131)
      {
        LODWORD(Value) = 5;
        v130 = 0;
        p_Value = &Value;
        v106 = v133;
        if (v134 >= v135)
        {
          v117 = v134 + 1;
          if (v133 <= (unint64_t)&Value && v133 + 24 * v134 > (unint64_t)&Value)
          {
            v119 = (char *)&Value - v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v117, 24);
            v106 = v133;
            p_Value = (uint64_t *)&v119[v133];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v117, 24);
            p_Value = &Value;
            v106 = v133;
          }
        }
        v107 = v106 + 24 * v134;
        v108 = *(_OWORD *)p_Value;
        *(_QWORD *)(v107 + 16) = p_Value[2];
        *(_OWORD *)v107 = v108;
        ++v134;
        if (v131)
          mlir::Diagnostic::operator<<((uint64_t)v132, " must be tensor of mps native type values or tensor of complex values, but got ");
      }
    }
    v109 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v131, v120);
    v110 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v109);
    if (v131)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
    if (v110)
      goto LABEL_144;
    return 0;
  }
  v85 = mlir::TypeID::get<mlir::ShapedType>();
  v86 = *((unsigned int *)v82 + 4);
  if (!(_DWORD)v86)
    goto LABEL_106;
  v87 = (_QWORD *)v82[1];
  v88 = &v87[2 * v86];
  do
  {
    v89 = v86 >> 1;
    v90 = &v87[2 * (v86 >> 1)];
    v92 = *v90;
    v91 = v90 + 2;
    v86 += ~(v86 >> 1);
    if (v92 < v85)
      v87 = v91;
    else
      v86 = v89;
  }
  while (v86);
  if (v87 != v88 && *v87 == v85)
    v93 = v87[1];
  else
LABEL_106:
    v93 = 0;
  v131 = v81;
  v132[0] = v93;
  Value = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v131);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 1)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 8)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 16)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 32)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 64)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 8)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 16)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)
    && !mlir::Type::isF16((mlir::Type *)&Value)
    && !mlir::Type::isF32((mlir::Type *)&Value)
    && !mlir::Type::isBF16((mlir::Type *)&Value)
    && *(_UNKNOWN **)(*(_QWORD *)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v82 = *v81;
    v83 = (void *)*((_QWORD *)*v81 + 17);
    goto LABEL_121;
  }
LABEL_144:
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 24));
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 56)))
  {
    v112 = mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 56));
    if (v112 == mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 24)))
      return 1;
  }
  v126 = (const void **)"failed to verify that all of {input, epsilon} have same element type";
  v128 = 259;
  mlir::OpState::emitOpError(this, &v126, (uint64_t)&v131);
  v113 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
  if (v131)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
  return v113;
}

uint64_t mlir::mpsx::RegionReturnOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  const void ***v7;
  uint64_t *v8;
  const void **v9;
  _QWORD *v10;
  void *v11;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  const void **v38[4];
  __int16 v39;
  const void **v40;
  int v41;
  uint64_t v42;
  const void **v43;
  _BYTE v44[16];
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[21];

  v48[19] = *MEMORY[0x24BDAC8D0];
  v1 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v2 = *((unsigned int *)v1 + 17);
    if ((_DWORD)v2)
    {
      v4 = 0;
      v5 = v1[9];
      while (1)
      {
        v8 = *this;
        v9 = (const void **)(*(_QWORD *)(*(_QWORD *)(v5 + 32 * v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        v40 = v9;
        v10 = *v9;
        v11 = (void *)*((_QWORD *)*v9 + 17);
        if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        if (v11 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        {
          v27 = mlir::TypeID::get<mlir::ShapedType>();
          v28 = *((unsigned int *)v10 + 4);
          if (!(_DWORD)v28)
            goto LABEL_42;
          v29 = (_QWORD *)v10[1];
          v30 = &v29[2 * v28];
          do
          {
            v31 = v28 >> 1;
            v32 = &v29[2 * (v28 >> 1)];
            v34 = *v32;
            v33 = v32 + 2;
            v28 += ~(v28 >> 1);
            if (v34 < v27)
              v29 = v33;
            else
              v28 = v31;
          }
          while (v28);
          if (v29 != v30 && *v29 == v27)
            v6 = (const void **)v29[1];
          else
LABEL_42:
            v6 = 0;
          v38[0] = v9;
          v7 = v38;
LABEL_6:
          v7[1] = v6;
          mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7);
          goto LABEL_7;
        }
        if (v11 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          v39 = 261;
          v38[0] = (const void **)"operand";
          v38[1] = (const void **)7;
          mlir::Operation::emitOpError(v8, v38, (uint64_t)&v43);
          if (v43)
          {
            mlir::Diagnostic::operator<<((uint64_t)v44, " #");
            if (v43)
            {
              v41 = 5;
              v42 = v4;
              v21 = v45;
              if (v46 >= v47)
              {
                v35 = v46 + 1;
                if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
                {
                  v36 = (char *)&v41 - v45;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v35, 24);
                  v21 = v45;
                  v22 = (int *)&v36[v45];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v35, 24);
                  v22 = &v41;
                  v21 = v45;
                }
              }
              else
              {
                v22 = &v41;
              }
              v23 = v21 + 24 * v46;
              v24 = *(_OWORD *)v22;
              *(_QWORD *)(v23 + 16) = *((_QWORD *)v22 + 2);
              *(_OWORD *)v23 = v24;
              ++v46;
              if (v43)
                mlir::Diagnostic::operator<<((uint64_t)v44, " must be variadic of tensor of any type values or memref of any type values or index, but got ");
            }
          }
          v25 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v43, (uint64_t *)&v40);
          v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
          if (v43)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
          if (!v26)
            return 0;
        }
LABEL_7:
        if (++v4 == v2)
          return 1;
      }
      v13 = mlir::TypeID::get<mlir::ShapedType>();
      v14 = *((unsigned int *)v10 + 4);
      if (!(_DWORD)v14)
        goto LABEL_4;
      v15 = (_QWORD *)v10[1];
      v16 = &v15[2 * v14];
      do
      {
        v17 = v14 >> 1;
        v18 = &v15[2 * (v14 >> 1)];
        v20 = *v18;
        v19 = v18 + 2;
        v14 += ~(v14 >> 1);
        if (v20 < v13)
          v15 = v19;
        else
          v14 = v17;
      }
      while (v14);
      if (v15 != v16 && *v15 == v13)
        v6 = (const void **)v15[1];
      else
LABEL_4:
        v6 = 0;
      v43 = v9;
      v7 = &v43;
      goto LABEL_6;
    }
  }
  return 1;
}

BOOL mlir::mpsx::ScaledDotProductAttentionOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int ArgOperands;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *Shape;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t NextResultAtOffset;
  unint64_t v76;
  char *v77;
  const void **v78;
  uint64_t v79;
  __int16 v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  const void **v84;
  uint64_t OperandRange;
  const void **v86;
  uint64_t v87;
  const void **v88;
  _QWORD v89[2];
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  _BYTE v93[152];
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this,
                           *(_QWORD *)(*(_QWORD *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8,
                           (const void **)"operand",
                           (const void **)7,
                           3u))
  {
    return 0;
  }
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
  v84 = v3;
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *((unsigned int *)v4 + 4);
    if (!(_DWORD)v6)
      goto LABEL_14;
    v7 = (_QWORD *)v4[1];
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_14:
      v13 = 0;
    v88 = v3;
    v89[0] = v13;
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v88);
    v4 = *v3;
    if (ArgOperands)
    {
      v15 = mlir::TypeID::get<mlir::ShapedType>();
      v16 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v16)
        goto LABEL_24;
      v17 = (_QWORD *)v4[1];
      v18 = &v17[2 * v16];
      do
      {
        v19 = v16 >> 1;
        v20 = &v17[2 * (v16 >> 1)];
        v22 = *v20;
        v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15)
          v17 = v21;
        else
          v16 = v19;
      }
      while (v16);
      if (v17 != v18 && *v17 == v15)
        v23 = v17[1];
      else
LABEL_24:
        v23 = 0;
      v78 = v3;
      v79 = v23;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v78);
      v4 = *v3;
      if (!v24)
      {
        v65 = mlir::TypeID::get<mlir::ShapedType>();
        v66 = *((unsigned int *)v4 + 4);
        if (!(_DWORD)v66)
          goto LABEL_86;
        v67 = (_QWORD *)v4[1];
        v68 = &v67[2 * v66];
        do
        {
          v69 = v66 >> 1;
          v70 = &v67[2 * (v66 >> 1)];
          v72 = *v70;
          v71 = v70 + 2;
          v66 += ~(v66 >> 1);
          if (v72 < v65)
            v67 = v71;
          else
            v66 = v69;
        }
        while (v66);
        if (v67 != v68 && *v67 == v65)
          v73 = v67[1];
        else
LABEL_86:
          v73 = 0;
        v86 = v3;
        v87 = v73;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v86);
        if (mlir::Type::isF16((mlir::Type *)&OperandRange)
          || mlir::Type::isF32((mlir::Type *)&OperandRange)
          || mlir::Type::isBF16((mlir::Type *)&OperandRange))
        {
          goto LABEL_90;
        }
        v4 = *v3;
      }
    }
  }
  v25 = (void *)v4[17];
  if (v25 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v25 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_76;
  }
  v27 = mlir::TypeID::get<mlir::ShapedType>();
  v28 = *((unsigned int *)v4 + 4);
  if (!(_DWORD)v28)
    goto LABEL_39;
  v29 = (_QWORD *)v4[1];
  v30 = &v29[2 * v28];
  do
  {
    v31 = v28 >> 1;
    v32 = &v29[2 * (v28 >> 1)];
    v34 = *v32;
    v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27)
      v29 = v33;
    else
      v28 = v31;
  }
  while (v28);
  if (v29 != v30 && *v29 == v27)
    v35 = v29[1];
  else
LABEL_39:
    v35 = 0;
  v83[0] = v3;
  v83[1] = v35;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v83);
  if (!mlir::Type::isF16((mlir::Type *)&OperandRange)
    && !mlir::Type::isF32((mlir::Type *)&OperandRange)
    && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    goto LABEL_76;
  }
  v36 = *v3;
  v37 = mlir::TypeID::get<mlir::ShapedType>();
  v38 = *((unsigned int *)v36 + 4);
  if (!(_DWORD)v38)
    goto LABEL_51;
  v39 = (_QWORD *)v36[1];
  v40 = &v39[2 * v38];
  do
  {
    v41 = v38 >> 1;
    v42 = &v39[2 * (v38 >> 1)];
    v44 = *v42;
    v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37)
      v39 = v43;
    else
      v38 = v41;
  }
  while (v38);
  if (v39 != v40 && *v39 == v37)
    v45 = v39[1];
  else
LABEL_51:
    v45 = 0;
  v82[0] = v3;
  v82[1] = v45;
  Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v82);
  v94 = 1;
  if (v47 != 1 || *Shape != v94)
  {
LABEL_76:
    v48 = *v3;
    if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      goto LABEL_55;
    v56 = mlir::TypeID::get<mlir::ShapedType>();
    v57 = *((unsigned int *)v48 + 4);
    if (!(_DWORD)v57)
      goto LABEL_73;
    v58 = (_QWORD *)v48[1];
    v59 = &v58[2 * v57];
    do
    {
      v60 = v57 >> 1;
      v61 = &v58[2 * (v57 >> 1)];
      v63 = *v61;
      v62 = v61 + 2;
      v57 += ~(v57 >> 1);
      if (v63 < v56)
        v58 = v62;
      else
        v57 = v60;
    }
    while (v57);
    if (v58 != v59 && *v58 == v56)
      v64 = v58[1];
    else
LABEL_73:
      v64 = 0;
    v81[0] = v3;
    v81[1] = v64;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v81);
    if (!mlir::Type::isF16((mlir::Type *)&OperandRange)
      && !mlir::Type::isF32((mlir::Type *)&OperandRange)
      && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
LABEL_55:
      v80 = 261;
      v78 = (const void **)"operand";
      v79 = 7;
      mlir::Operation::emitOpError(v2, &v78, (uint64_t)&v88);
      if (v88)
      {
        mlir::Diagnostic::operator<<((uint64_t)v89, " #");
        if (v88)
        {
          LODWORD(v86) = 5;
          v87 = 4;
          v49 = (char *)&v86;
          v50 = v90;
          if (v91 >= v92)
          {
            v76 = v91 + 1;
            if (v90 <= (unint64_t)&v86 && v90 + 24 * v91 > (unint64_t)&v86)
            {
              v77 = (char *)&v86 - v90;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v93, v76, 24);
              v50 = v90;
              v49 = &v77[v90];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v93, v76, 24);
              v49 = (char *)&v86;
              v50 = v90;
            }
          }
          v51 = v50 + 24 * v91;
          v52 = *(_OWORD *)v49;
          *(_QWORD *)(v51 + 16) = *((_QWORD *)v49 + 2);
          *(_OWORD *)v51 = v52;
          ++v91;
          if (v88)
            mlir::Diagnostic::operator<<((uint64_t)v89, " must be 0D tensor of floating point values or static-shape defined tensor with shape equal to [1] or unranked tensor of floating point values, but got ");
        }
      }
      v53 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v88, (uint64_t *)&v84);
      v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v53);
      if (v88)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v88);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v89);
      if (!v54)
        return 0;
    }
  }
LABEL_90:
  if (*((_DWORD *)*this + 9))
    v74 = (uint64_t)(*this - 2);
  else
    v74 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v74, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

void mlir::mpsx::SparseDenseMatMulOp::populateDefaultAttrs(mlir::mpsx::SparseDenseMatMulOp *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t BoolAttr;
  uint64_t v7;
  uint64_t v8;
  mlir::BoolAttr *Context;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)this + 96);
  Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[1]))
  {
    v5 = v4[1];
    BoolAttr = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v5, BoolAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[2]))
  {
    v7 = v4[2];
    v8 = mlir::Builder::getBoolAttr(&Context, 0);
    ZinMirCacheTensors::ZinMirCacheTensors(&v10, v7, v8);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
}

BOOL mlir::mpsx::SparseDenseMatMulOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  uint64_t v6;
  uint64_t NumNeededNEs;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  const void **v17;
  _QWORD *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  uint64_t *v85;
  const void **v86;
  _QWORD *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t NextResultAtOffset;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  const void **v143;
  uint64_t v144;
  __int16 v145;
  unint64_t v146;
  uint64_t v147;
  const void **v148;
  uint64_t OperandRange;
  const void **v150;
  uint64_t v151;
  unint64_t AttrDictionary;
  _QWORD v153[2];
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  _QWORD v157[20];

  v157[19] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == NumNeededNEs)
        break;
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v10 = *((_QWORD *)Value + 1);
    if (v6)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
        v8 = *this;
        if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v13)
        {
          v11 = (_QWORD *)*((_QWORD *)Value + 1);
        }
        else
        {
          v14 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
          v8 = *this;
          if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v14)
            v12 = (_QWORD *)*((_QWORD *)Value + 1);
        }
        Value = (MirInfoChannelAssignment *)((char *)Value + 16);
        v6 -= 16;
      }
      while (v6);
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    if (!mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(v8, v11, (const void **)"transpose_lhs", (const void **)0xD)|| !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(*this, v12, (const void **)"transpose_rhs", (const void **)0xD))
    {
      return 0;
    }
    v15 = *this;
    if (v10
      && *(_UNKNOWN **)(*(_QWORD *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
    {
      v145 = 257;
      mlir::Operation::emitOpError(v15, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, "attribute '");
        if (AttrDictionary)
        {
          v145 = 261;
          v143 = (const void **)"storage_type";
          v144 = 12;
          mlir::Diagnostic::operator<<((uint64_t)v153, &v143);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v153, "' failed to satisfy constraint: valid SparseTensorStorage");
        }
      }
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (!v16)
        return 0;
      v15 = *this;
    }
    v17 = (const void **)(*(_QWORD *)(*(_QWORD *)(v15[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v148 = v17;
    v18 = *v17;
    v19 = (void *)*((_QWORD *)*v17 + 17);
    if (v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v50 = mlir::TypeID::get<mlir::ShapedType>();
      v51 = *((unsigned int *)v18 + 4);
      if (!(_DWORD)v51)
        goto LABEL_72;
      v52 = (_QWORD *)v18[1];
      v53 = &v52[2 * v51];
      do
      {
        v54 = v51 >> 1;
        v55 = &v52[2 * (v51 >> 1)];
        v57 = *v55;
        v56 = v55 + 2;
        v51 += ~(v51 >> 1);
        if (v57 < v50)
          v52 = v56;
        else
          v51 = v54;
      }
      while (v51);
      if (v52 != v53 && *v52 == v50)
        v58 = v52[1];
      else
LABEL_72:
        v58 = 0;
      AttrDictionary = (unint64_t)v17;
      v153[0] = v58;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
        goto LABEL_83;
      v18 = *v17;
      if (*((_UNKNOWN **)*v17 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        goto LABEL_75;
    }
    else if (v19 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      goto LABEL_75;
    }
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *((unsigned int *)v18 + 4);
    if (!(_DWORD)v21)
      goto LABEL_41;
    v22 = (_QWORD *)v18[1];
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_41:
      v28 = 0;
    v143 = v17;
    v144 = v28;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v143))
      goto LABEL_75;
    v29 = *v17;
    v30 = mlir::TypeID::get<mlir::ShapedType>();
    v31 = *((unsigned int *)v29 + 4);
    if (!(_DWORD)v31)
      goto LABEL_51;
    v32 = (_QWORD *)v29[1];
    v33 = &v32[2 * v31];
    do
    {
      v34 = v31 >> 1;
      v35 = &v32[2 * (v31 >> 1)];
      v37 = *v35;
      v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30)
        v32 = v36;
      else
        v31 = v34;
    }
    while (v31);
    if (v32 != v33 && *v32 == v30)
      v38 = v32[1];
    else
LABEL_51:
      v38 = 0;
    v150 = v17;
    v151 = v38;
    mlir::ShapedType::getShape((mlir::ShapedType *)&v150);
    if (v39 != 1)
      goto LABEL_75;
    v40 = *v17;
    v41 = mlir::TypeID::get<mlir::ShapedType>();
    v42 = *((unsigned int *)v40 + 4);
    if (!(_DWORD)v42)
      goto LABEL_61;
    v43 = (_QWORD *)v40[1];
    v44 = &v43[2 * v42];
    do
    {
      v45 = v42 >> 1;
      v46 = &v43[2 * (v42 >> 1)];
      v48 = *v46;
      v47 = v46 + 2;
      v42 += ~(v42 >> 1);
      if (v48 < v41)
        v43 = v47;
      else
        v42 = v45;
    }
    while (v42);
    if (v43 != v44 && *v43 == v41)
      v49 = v43[1];
    else
LABEL_61:
      v49 = 0;
    v146 = (unint64_t)v17;
    v147 = v49;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v146);
    if (!mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
LABEL_75:
      v145 = 261;
      v143 = (const void **)"operand";
      v144 = 7;
      mlir::Operation::emitOpError(v15, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, " #");
        if (AttrDictionary)
        {
          LODWORD(v150) = 5;
          v151 = 0;
          v59 = (char *)&v150;
          v60 = v154;
          if (v155 >= v156)
          {
            v137 = v155 + 1;
            if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
            {
              v140 = (char *)&v150 - v154;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v137, 24);
              v60 = v154;
              v59 = &v140[v154];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v137, 24);
              v59 = (char *)&v150;
              v60 = v154;
            }
          }
          v61 = v60 + 24 * v155;
          v62 = *(_OWORD *)v59;
          *(_QWORD *)(v61 + 16) = *((_QWORD *)v59 + 2);
          *(_OWORD *)v61 = v62;
          ++v155;
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v153, " must be unranked tensor of 32-bit float values or 1D tensor of 32-bit float values, but got ");
        }
      }
      v63 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v148);
      v64 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v63);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (!v64)
        return 0;
    }
LABEL_83:
    if (mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)&& mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u))
    {
      v65 = *this;
      v66 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8;
      v146 = v66;
      v67 = *(_QWORD *)v66;
      v68 = *(void **)(*(_QWORD *)v66 + 136);
      if (v68 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v68 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        v70 = mlir::TypeID::get<mlir::ShapedType>();
        v71 = *(unsigned int *)(v67 + 16);
        if (!(_DWORD)v71)
          goto LABEL_98;
        v72 = *(_QWORD **)(v67 + 8);
        v73 = &v72[2 * v71];
        do
        {
          v74 = v71 >> 1;
          v75 = &v72[2 * (v71 >> 1)];
          v77 = *v75;
          v76 = v75 + 2;
          v71 += ~(v71 >> 1);
          if (v77 < v70)
            v72 = v76;
          else
            v71 = v74;
        }
        while (v71);
        if (v72 != v73 && *v72 == v70)
          v78 = v72[1];
        else
LABEL_98:
          v78 = 0;
        AttrDictionary = v66;
        v153[0] = v78;
        v143 = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
        if (mlir::Type::isSignedInteger((mlir::Type *)&v143, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&v143, 64))
        {
          goto LABEL_109;
        }
      }
      v145 = 261;
      v143 = (const void **)"operand";
      v144 = 7;
      mlir::Operation::emitOpError(v65, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, " #");
        if (AttrDictionary)
        {
          LODWORD(v150) = 5;
          v151 = 3;
          v79 = (char *)&v150;
          v80 = v154;
          if (v155 >= v156)
          {
            v138 = v155 + 1;
            if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
            {
              v141 = (char *)&v150 - v154;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v138, 24);
              v80 = v154;
              v79 = &v141[v154];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v138, 24);
              v79 = (char *)&v150;
              v80 = v154;
            }
          }
          v81 = v80 + 24 * v155;
          v82 = *(_OWORD *)v79;
          *(_QWORD *)(v81 + 16) = *((_QWORD *)v79 + 2);
          *(_OWORD *)v81 = v82;
          ++v155;
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v153, " must be tensor of mps index type values, but got ");
        }
      }
      v83 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v146);
      v84 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v83);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (v84)
      {
LABEL_109:
        v85 = *this;
        v86 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
        v148 = v86;
        v87 = *v86;
        v88 = (void *)*((_QWORD *)*v86 + 17);
        if (v88 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          v89 = mlir::TypeID::get<mlir::ShapedType>();
          v90 = *((unsigned int *)v87 + 4);
          if (!(_DWORD)v90)
            goto LABEL_118;
          v91 = (_QWORD *)v87[1];
          v92 = &v91[2 * v90];
          do
          {
            v93 = v90 >> 1;
            v94 = &v91[2 * (v90 >> 1)];
            v96 = *v94;
            v95 = v94 + 2;
            v90 += ~(v90 >> 1);
            if (v96 < v89)
              v91 = v95;
            else
              v90 = v93;
          }
          while (v90);
          if (v91 != v92 && *v91 == v89)
            v97 = v91[1];
          else
LABEL_118:
            v97 = 0;
          AttrDictionary = (unint64_t)v86;
          v153[0] = v97;
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
          if (mlir::Type::isF32((mlir::Type *)&OperandRange))
          {
LABEL_160:
            if (*((_DWORD *)*this + 9))
              v134 = (uint64_t)(*this - 2);
            else
              v134 = 0;
            NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v134, 0);
            return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
          }
          v87 = *v86;
          v88 = (void *)*((_QWORD *)*v86 + 17);
        }
        if (v88 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v98 = mlir::TypeID::get<mlir::ShapedType>();
          v99 = *((unsigned int *)v87 + 4);
          if (!(_DWORD)v99)
            goto LABEL_130;
          v100 = (_QWORD *)v87[1];
          v101 = &v100[2 * v99];
          do
          {
            v102 = v99 >> 1;
            v103 = &v100[2 * (v99 >> 1)];
            v105 = *v103;
            v104 = v103 + 2;
            v99 += ~(v99 >> 1);
            if (v105 < v98)
              v100 = v104;
            else
              v99 = v102;
          }
          while (v99);
          if (v100 != v101 && *v100 == v98)
            v106 = v100[1];
          else
LABEL_130:
            v106 = 0;
          v143 = v86;
          v144 = v106;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v143))
          {
            v107 = *v86;
            v108 = mlir::TypeID::get<mlir::ShapedType>();
            v109 = *((unsigned int *)v107 + 4);
            if (!(_DWORD)v109)
              goto LABEL_140;
            v110 = (_QWORD *)v107[1];
            v111 = &v110[2 * v109];
            do
            {
              v112 = v109 >> 1;
              v113 = &v110[2 * (v109 >> 1)];
              v115 = *v113;
              v114 = v113 + 2;
              v109 += ~(v109 >> 1);
              if (v115 < v108)
                v110 = v114;
              else
                v109 = v112;
            }
            while (v109);
            if (v110 != v111 && *v110 == v108)
              v116 = v110[1];
            else
LABEL_140:
              v116 = 0;
            v150 = v86;
            v151 = v116;
            mlir::ShapedType::getShape((mlir::ShapedType *)&v150);
            if (v117 == 2)
            {
              v118 = *v86;
              v119 = mlir::TypeID::get<mlir::ShapedType>();
              v120 = *((unsigned int *)v118 + 4);
              if (!(_DWORD)v120)
                goto LABEL_150;
              v121 = (_QWORD *)v118[1];
              v122 = &v121[2 * v120];
              do
              {
                v123 = v120 >> 1;
                v124 = &v121[2 * (v120 >> 1)];
                v126 = *v124;
                v125 = v124 + 2;
                v120 += ~(v120 >> 1);
                if (v126 < v119)
                  v121 = v125;
                else
                  v120 = v123;
              }
              while (v120);
              if (v121 != v122 && *v121 == v119)
                v127 = v121[1];
              else
LABEL_150:
                v127 = 0;
              v146 = (unint64_t)v86;
              v147 = v127;
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v146);
              if (mlir::Type::isF32((mlir::Type *)&OperandRange))
                goto LABEL_160;
            }
          }
        }
        v145 = 261;
        v143 = (const void **)"operand";
        v144 = 7;
        mlir::Operation::emitOpError(v85, &v143, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v153, " #");
          if (AttrDictionary)
          {
            LODWORD(v150) = 5;
            v151 = 4;
            v128 = (char *)&v150;
            v129 = v154;
            if (v155 >= v156)
            {
              v139 = v155 + 1;
              if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
              {
                v142 = (char *)&v150 - v154;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v139, 24);
                v129 = v154;
                v128 = &v142[v154];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v139, 24);
                v128 = (char *)&v150;
                v129 = v154;
              }
            }
            v130 = v129 + 24 * v155;
            v131 = *(_OWORD *)v128;
            *(_QWORD *)(v130 + 16) = *((_QWORD *)v128 + 2);
            *(_OWORD *)v130 = v131;
            ++v155;
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v153, " must be unranked tensor of 32-bit float values or 2D tensor of 32-bit float values, but got ");
          }
        }
        v132 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v148);
        v133 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v132);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
        if (v133)
          goto LABEL_160;
      }
    }
    return 0;
  }
LABEL_8:
  v143 = (const void **)"requires attribute 'storage_type'";
  v145 = 259;
  mlir::OpState::emitOpError(this, &v143, (uint64_t)&AttrDictionary);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
  return v9;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v58;
  char *v59;
  const void **v60;
  uint64_t v61;
  __int16 v62;
  _QWORD v63[2];
  const void **v64;
  uint64_t OperandRange;
  const void **v66;
  uint64_t v67;
  const void **v68;
  _QWORD v69[2];
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _QWORD v73[20];

  v73[19] = *MEMORY[0x24BDAC8D0];
  v64 = a2;
  v10 = *a2;
  v11 = (void *)*((_QWORD *)*a2 + 17);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v48 = mlir::TypeID::get<mlir::ShapedType>();
    v49 = *((unsigned int *)v10 + 4);
    if (!(_DWORD)v49)
      goto LABEL_50;
    v50 = (_QWORD *)v10[1];
    v51 = &v50[2 * v49];
    do
    {
      v52 = v49 >> 1;
      v53 = &v50[2 * (v49 >> 1)];
      v55 = *v53;
      v54 = v53 + 2;
      v49 += ~(v49 >> 1);
      if (v55 < v48)
        v50 = v54;
      else
        v49 = v52;
    }
    while (v49);
    if (v50 != v51 && *v50 == v48)
      v56 = v50[1];
    else
LABEL_50:
      v56 = 0;
    v68 = a2;
    v69[0] = v56;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68);
    if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
    {
      return 1;
    }
    v10 = *a2;
    v11 = (void *)*((_QWORD *)*a2 + 17);
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *((unsigned int *)v10 + 4);
    if (!(_DWORD)v13)
      goto LABEL_11;
    v14 = (_QWORD *)v10[1];
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_11:
      v20 = 0;
    v60 = a2;
    v61 = v20;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v60))
    {
      v21 = *a2;
      v22 = mlir::TypeID::get<mlir::ShapedType>();
      v23 = *((unsigned int *)v21 + 4);
      if (!(_DWORD)v23)
        goto LABEL_21;
      v24 = (_QWORD *)v21[1];
      v25 = &v24[2 * v23];
      do
      {
        v26 = v23 >> 1;
        v27 = &v24[2 * (v23 >> 1)];
        v29 = *v27;
        v28 = v27 + 2;
        v23 += ~(v23 >> 1);
        if (v29 < v22)
          v24 = v28;
        else
          v23 = v26;
      }
      while (v23);
      if (v24 != v25 && *v24 == v22)
        v30 = v24[1];
      else
LABEL_21:
        v30 = 0;
      v66 = a2;
      v67 = v30;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v66);
      if (v31 == 1)
      {
        v32 = *a2;
        v33 = mlir::TypeID::get<mlir::ShapedType>();
        v34 = *((unsigned int *)v32 + 4);
        if (!(_DWORD)v34)
          goto LABEL_31;
        v35 = (_QWORD *)v32[1];
        v36 = &v35[2 * v34];
        do
        {
          v37 = v34 >> 1;
          v38 = &v35[2 * (v34 >> 1)];
          v40 = *v38;
          v39 = v38 + 2;
          v34 += ~(v34 >> 1);
          if (v40 < v33)
            v35 = v39;
          else
            v34 = v37;
        }
        while (v34);
        if (v35 != v36 && *v35 == v33)
          v41 = v35[1];
        else
LABEL_31:
          v41 = 0;
        v63[0] = a2;
        v63[1] = v41;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          return 1;
        }
      }
    }
  }
  v62 = 261;
  v60 = a3;
  v61 = a4;
  mlir::Operation::emitOpError(a1, &v60, (uint64_t)&v68);
  if (v68)
  {
    mlir::Diagnostic::operator<<((uint64_t)v69, " #");
    if (v68)
    {
      LODWORD(v66) = 5;
      v67 = a5;
      v42 = (char *)&v66;
      v43 = v70;
      if (v71 >= v72)
      {
        v58 = v71 + 1;
        if (v70 <= (unint64_t)&v66 && v70 + 24 * v71 > (unint64_t)&v66)
        {
          v59 = (char *)&v66 - v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
          v43 = v70;
          v42 = &v59[v70];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
          v42 = (char *)&v66;
          v43 = v70;
        }
      }
      v44 = v43 + 24 * v71;
      v45 = *(_OWORD *)v42;
      *(_QWORD *)(v44 + 16) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      ++v71;
      if (v68)
        mlir::Diagnostic::operator<<((uint64_t)v69, " must be unranked tensor of 32/64-bit signed integer values or 1D tensor of 32/64-bit signed integer values, but got ");
    }
  }
  v46 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v68, (uint64_t *)&v64);
  v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v46);
  if (v68)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v68);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v69);
  return v47;
}

BOOL mlir::mpsx::VarHandleOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(*this, Value[1], (const void **)"identifier", (const void **)0xA))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'identifier'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v12);
  if (v12)
  {
    mlir::Diagnostic::operator<<((uint64_t)v13, a3);
    mlir::Diagnostic::append<mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)v13, a4, a5, a6);
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v12);
  if (v12)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v12);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v10;
}

uint64_t mlir::Diagnostic::append<mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  _BYTE *v16;
  _BYTE v17[24];

  v7 = v17;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v17, *a2);
  v8 = a1 + 16;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v10 + 1;
    v15 = v9 + 24 * v10 > (unint64_t)v17;
    if (v9 <= (unint64_t)v17 && v15)
    {
      v16 = &v17[-v9];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = &v16[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = v17;
    }
  }
  v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v7;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[3],mlir::ShapedType &>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[3],mlir::ShapedType &>(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  _BYTE *v15;
  _BYTE v16[24];

  mlir::Diagnostic::operator<<(a1, a2);
  v5 = *a3;
  v6 = v16;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v16, v5);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 24);
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v9 + 1;
    v14 = v8 + 24 * v9 > (unint64_t)v16;
    if (v8 <= (unint64_t)v16 && v14)
    {
      v15 = &v16[-v8];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v13, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v6 = &v15[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v13, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v6 = v16;
    }
  }
  v10 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v6;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(uint64_t a1, char a2, char *a3, unsigned int *a4, char *a5)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, a3);
    mlir::Diagnostic::append<unsigned int &,char const(&)[47]>((uint64_t)v11, a4, a5);
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v8;
}

uint64_t mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(uint64_t a1, char a2, char *a3, char *a4, uint64_t *a5, char *a6, unsigned int *a7)
{
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v14);
  if (v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, a3);
    mlir::Diagnostic::operator<<((uint64_t)v15, a4);
    mlir::Diagnostic::append<long long &,char const(&)[4],unsigned int &>((uint64_t)v15, a5, a6, a7);
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v12;
}

uint64_t mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(uint64_t a1, char a2, char *a3, char *a4)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[24];

  v9[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v8);
  if (v8)
  {
    mlir::Diagnostic::operator<<((uint64_t)v9, a3);
    mlir::Diagnostic::operator<<((uint64_t)v9, a4);
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v8);
  if (v8)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v8);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v9);
  return v6;
}

uint64_t mlir::Diagnostic::append<unsigned int &,char const(&)[47]>(uint64_t a1, unsigned int *a2, char *__s)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 16;
  v6 = v7;
  v8 = *a2;
  v17 = 5;
  v18 = v8;
  v9 = *(unsigned int *)(v5 + 8);
  v10 = &v17;
  if (v9 >= *(_DWORD *)(v5 + 12))
  {
    v14 = v9 + 1;
    v15 = v6 + 24 * v9 > (unint64_t)&v17;
    if (v6 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v10 = (int *)&v16[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v10 = &v17;
    }
  }
  v11 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return a1;
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[4],unsigned int &>(uint64_t a1, uint64_t *a2, char *a3, unsigned int *a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  uint64_t v20;

  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  v10 = *a2;
  v19 = 2;
  v20 = v10;
  v11 = *(unsigned int *)(v7 + 8);
  v12 = &v19;
  if (v11 >= *(_DWORD *)(v7 + 12))
  {
    v16 = v11 + 1;
    v17 = v8 + 24 * v11 > (unint64_t)&v19;
    if (v8 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v16, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v12 = (int *)&v18[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v16, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v12 = &v19;
    }
  }
  v13 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
  *(_OWORD *)v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[4],unsigned int &>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[4],unsigned int &>(uint64_t a1, char *a2, unsigned int *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  int v16;
  uint64_t v17;

  mlir::Diagnostic::operator<<(a1, a2);
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v16 = 5;
  v17 = v7;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v8 + 1;
    v14 = v6 + 24 * v8 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v14)
    {
      v15 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = &v16;
    }
  }
  v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

void std::__function::__func<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C05A368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C05A368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;
  uint64_t v13;
  uint64_t OperandRange;
  uint64_t v15;
  _QWORD *Shape;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(**a2 + 136);
  if (v6 == mlir::TypeID::get<mlir::mpsx::ListType>())
  {
    v7 = *(_QWORD *)(*v5 + 136);
    if (v7 == mlir::TypeID::get<mlir::mpsx::ListType>())
    {
      v21 = *(_QWORD *)(a1 + 8);
      v22 = *(_QWORD *)(*v4 + 136);
      if (v22 == mlir::TypeID::get<mlir::mpsx::ListType>())
        v23 = v4;
      else
        v23 = 0;
      v24 = v23[1];
      v25 = *(_QWORD *)(*v5 + 136);
      if (v25 == mlir::TypeID::get<mlir::mpsx::ListType>())
        v26 = v5;
      else
        v26 = 0;
      v27 = v26[1];
      v30[0] = v24;
      v29[0] = v27;
      v28 = *(_QWORD *)(v21 + 24);
      if (v28)
        return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v30, v29);
      goto LABEL_24;
    }
  }
  v30[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v4);
  v30[1] = v8;
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v5);
  v29[0] = v9;
  v29[1] = v10;
  if (v30[0])
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
    return 0;
  v13 = *(_QWORD *)(a1 + 16);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v30);
  v31 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v29);
  v32 = OperandRange;
  v15 = *(_QWORD *)(v13 + 24);
  if (!v15)
  {
LABEL_24:
    std::__throw_bad_function_call[abi:nn180100]();
    return mlir::TypeID::get<mlir::mpsx::ListType>();
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v32, &v31);
  if ((_DWORD)result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29))
    {
      result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30);
      if ((_DWORD)result)
      {
        Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
        v18 = v17;
        v19 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v29);
        return mlir::mps::isMoreSpecializedShape(Shape, v18, v19, v20);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::TypeID::get<mlir::mpsx::ListType>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mpsx::ListType]";
      v12 = 70;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::mpsx::ListType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[338];
}

void llvm::detail::provider_format_adapter<long long>::~provider_format_adapter()
{
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<long long>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<long long,void>::format((unint64_t *)(a1 + 8), a2, a3, a4);
}

void mlir::copyElementsAttrData<long long>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *Type;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *ElementsAttrRawData;
  uint64_t v20;
  uint64_t v21;
  int64_t NumElements;
  uint64_t i;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t k;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t m;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v67;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  int64x2_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned int IntOrFloatBitWidth;
  uint64_t v86;
  int64x2_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t OperandRange;
  _QWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  void *v111[3];
  _QWORD v112[6];

  v112[5] = *MEMORY[0x24BDAC8D0];
  v109 = a1;
  v110 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v109);
  v7 = Type;
  if (!Type)
    goto LABEL_10;
  v8 = *Type;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  v108[0] = v7;
  v108[1] = v17;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v108);
  v18 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v109);
  ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v109);
  v21 = v20;
  if (!v18 || a4)
  {
    NumElements = mlir::ElementsAttr::getNumElements(v109, v110);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_28;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      if ((unint64_t)NumElements >= 2)
      {
        v28 = 0;
        v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v29 = 0;
          else
            v29 = v28;
          if (v18)
            v30 = 0;
          else
            v30 = v28 + 1;
          v31 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v30];
          v32 = (_QWORD *)(a3 + 8 * v28);
          *v32 = *(unsigned __int16 *)&ElementsAttrRawData[2 * v29];
          v32[1] = v31;
          v28 += 2;
        }
        while (v28 != v27);
        goto LABEL_204;
      }
      goto LABEL_37;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      goto LABEL_55;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_62;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_78;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_94;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_114;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_125;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_132;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_148;
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
LABEL_163:
      if ((unint64_t)NumElements >= 2)
      {
        v86 = 0;
        v77 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        v87 = (int64x2_t *)a3;
        do
        {
          if (v18)
            v88 = 0;
          else
            v88 = v86;
          if (v18)
            v89 = 0;
          else
            v89 = v86 + 1;
          v76.i16[0] = *(_WORD *)&ElementsAttrRawData[2 * v88];
          v76.i16[2] = *(_WORD *)&ElementsAttrRawData[2 * v89];
          v76 = vcvtq_s64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)v76.i8, 0x10uLL)));
          *v87++ = v76;
          v86 += 2;
        }
        while (v86 != v77);
        goto LABEL_246;
      }
      v77 = 0;
      do
      {
        if (v18)
          v105 = 0;
        else
          v105 = v77;
        *(_QWORD *)(a3 + 8 * v77++) = (uint64_t)COERCE_FLOAT(*(unsigned __int16 *)&ElementsAttrRawData[2 * v105] << 16);
LABEL_246:
        ;
      }
      while (NumElements != v77);
      return;
    }
  }
  else
  {
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      NumElements = 1;
LABEL_17:
      for (i = 0; i != NumElements; ++i)
      {
        if (v18)
          v24 = 0;
        else
          v24 = i;
        *(_QWORD *)(a3 + 8 * i) = ElementsAttrRawData[v24];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      NumElements = 1;
LABEL_28:
      for (j = 0; j != NumElements; ++j)
      {
        if (v18)
          v26 = 0;
        else
          v26 = j;
        *(_QWORD *)(a3 + 8 * j) = (char)ElementsAttrRawData[v26];
      }
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      NumElements = 1;
LABEL_37:
      v27 = 0;
      do
      {
        if (v18)
          v96 = 0;
        else
          v96 = v27;
        *(_QWORD *)(a3 + 8 * v27++) = *(unsigned __int16 *)&ElementsAttrRawData[2 * v96];
LABEL_204:
        ;
      }
      while (NumElements != v27);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      NumElements = 1;
LABEL_55:
      if ((unint64_t)NumElements >= 2)
      {
        v35 = 0;
        v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v36 = 0;
          else
            v36 = v35;
          if (v18)
            v37 = 0;
          else
            v37 = v35 + 1;
          v38 = *(__int16 *)&ElementsAttrRawData[2 * v37];
          v39 = (_QWORD *)(a3 + 8 * v35);
          *v39 = *(__int16 *)&ElementsAttrRawData[2 * v36];
          v39[1] = v38;
          v35 += 2;
        }
        while (v35 != v33);
        goto LABEL_210;
      }
      v33 = 0;
      do
      {
        if (v18)
          v97 = 0;
        else
          v97 = v33;
        *(_QWORD *)(a3 + 8 * v33++) = *(__int16 *)&ElementsAttrRawData[2 * v97];
LABEL_210:
        ;
      }
      while (NumElements != v33);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      NumElements = 1;
LABEL_62:
      if ((unint64_t)NumElements >= 2)
      {
        v41 = 0;
        v34 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v42 = 0;
          else
            v42 = v41;
          if (v18)
            v43 = 0;
          else
            v43 = v41 + 1;
          v44 = *(unsigned int *)&ElementsAttrRawData[4 * v43];
          v45 = (_QWORD *)(a3 + 8 * v41);
          *v45 = *(unsigned int *)&ElementsAttrRawData[4 * v42];
          v45[1] = v44;
          v41 += 2;
        }
        while (v41 != v34);
        goto LABEL_216;
      }
      v34 = 0;
      do
      {
        if (v18)
          v98 = 0;
        else
          v98 = v34;
        *(_QWORD *)(a3 + 8 * v34++) = *(unsigned int *)&ElementsAttrRawData[4 * v98];
LABEL_216:
        ;
      }
      while (NumElements != v34);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      NumElements = 1;
LABEL_78:
      if ((unint64_t)NumElements >= 2)
      {
        v48 = 0;
        v40 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v49 = 0;
          else
            v49 = v48;
          if (v18)
            v50 = 0;
          else
            v50 = v48 + 1;
          v51 = *(int *)&ElementsAttrRawData[4 * v50];
          v52 = (_QWORD *)(a3 + 8 * v48);
          *v52 = *(int *)&ElementsAttrRawData[4 * v49];
          v52[1] = v51;
          v48 += 2;
        }
        while (v48 != v40);
        goto LABEL_222;
      }
      v40 = 0;
      do
      {
        if (v18)
          v99 = 0;
        else
          v99 = v40;
        *(_QWORD *)(a3 + 8 * v40++) = *(int *)&ElementsAttrRawData[4 * v99];
LABEL_222:
        ;
      }
      while (NumElements != v40);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      NumElements = 1;
LABEL_94:
      for (k = 0; k != NumElements; ++k)
      {
        if (v18)
          v47 = 0;
        else
          v47 = k;
        *(_QWORD *)(a3 + 8 * k) = *(_QWORD *)&ElementsAttrRawData[8 * v47];
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      NumElements = 1;
LABEL_114:
      for (m = 0; m != NumElements; ++m)
      {
        if (v18)
          v54 = 0;
        else
          v54 = m;
        *(_QWORD *)(a3 + 8 * m) = *(_QWORD *)&ElementsAttrRawData[8 * v54];
      }
      return;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_125:
      if ((unint64_t)NumElements >= 2)
      {
        v57 = 0;
        v55 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v58 = 0;
          else
            v58 = v57;
          if (v18)
            v59 = 0;
          else
            v59 = v57 + 1;
          _H0 = *(_WORD *)&ElementsAttrRawData[2 * v58];
          _H1 = *(_WORD *)&ElementsAttrRawData[2 * v59];
          __asm { FCVT            S0, H0 }
          v67 = (uint64_t)_S0;
          __asm { FCVT            S0, H1 }
          v69 = (uint64_t *)(a3 + 8 * v57);
          *v69 = v67;
          v69[1] = (uint64_t)_S0;
          v57 += 2;
        }
        while (v57 != v55);
        goto LABEL_228;
      }
      v55 = 0;
      do
      {
        if (v18)
          v100 = 0;
        else
          v100 = v55;
        _H0 = *(_WORD *)&ElementsAttrRawData[2 * v100];
        __asm { FCVT            S0, H0 }
        *(_QWORD *)(a3 + 8 * v55++) = (uint64_t)_S0;
LABEL_228:
        ;
      }
      while (NumElements != v55);
      return;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_132:
      if ((unint64_t)NumElements >= 2)
      {
        v71 = 0;
        v56 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v72 = 0;
          else
            v72 = v71;
          if (v18)
            v73 = 0;
          else
            v73 = v71 + 1;
          v74 = (uint64_t)*(float *)&ElementsAttrRawData[4 * v73];
          v75 = (_QWORD *)(a3 + 8 * v71);
          *v75 = (uint64_t)*(float *)&ElementsAttrRawData[4 * v72];
          v75[1] = v74;
          v71 += 2;
        }
        while (v71 != v56);
        goto LABEL_234;
      }
      v56 = 0;
      do
      {
        if (v18)
          v103 = 0;
        else
          v103 = v56;
        *(_QWORD *)(a3 + 8 * v56++) = (uint64_t)*(float *)&ElementsAttrRawData[4 * v103];
LABEL_234:
        ;
      }
      while (NumElements != v56);
      return;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_148:
      if ((unint64_t)NumElements >= 2)
      {
        v80 = 0;
        v70 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v18)
            v81 = 0;
          else
            v81 = v80;
          if (v18)
            v82 = 0;
          else
            v82 = v80 + 1;
          v83 = (uint64_t)*(double *)&ElementsAttrRawData[8 * v82];
          v84 = (_QWORD *)(a3 + 8 * v80);
          *v84 = (uint64_t)*(double *)&ElementsAttrRawData[8 * v81];
          v84[1] = v83;
          v80 += 2;
        }
        while (v80 != v70);
        goto LABEL_240;
      }
      v70 = 0;
      do
      {
        if (v18)
          v104 = 0;
        else
          v104 = v70;
        *(_QWORD *)(a3 + 8 * v70++) = (uint64_t)*(double *)&ElementsAttrRawData[8 * v104];
LABEL_240:
        ;
      }
      while (NumElements != v70);
      return;
    }
    NumElements = 1;
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      goto LABEL_163;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    if (v18)
      v78 = 1;
    else
      v78 = NumElements;
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v111, v78);
    mlir::detail::unpackBooleanData(ElementsAttrRawData, v21, (uint64_t)v111[0], (unint64_t)v111[1]);
    v79 = (unsigned __int8 *)v111[0];
    if (NumElements >= 1)
    {
      if (NumElements == 1)
      {
        v91 = 0;
        goto LABEL_248;
      }
      v90 = 0;
      v91 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v18)
          v92 = 0;
        else
          v92 = v90;
        if (v18)
          v93 = 0;
        else
          v93 = v90 + 1;
        v94 = v79[v93];
        v95 = (_QWORD *)(a3 + 8 * v90);
        *v95 = v79[v92];
        v95[1] = v94;
        v90 += 2;
      }
      while (v90 != v91);
      while (NumElements != v91)
      {
LABEL_248:
        if (v18)
          v106 = 0;
        else
          v106 = v91;
        *(_QWORD *)(a3 + 8 * v91++) = v79[v106];
      }
    }
    if (v79 != (unsigned __int8 *)v112)
      free(v79);
  }
  else
  {
    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
    mlir::detail::unpackQuantizedData<long long>(ElementsAttrRawData, v21, a3, NumElements, IntOrFloatBitWidth);
  }
}

unsigned __int8 *mlir::detail::unpackQuantizedData<long long>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_207A80930));
      if ((v14.i8[0] & 1) != 0)
        *(_QWORD *)(a3 + 8 * v9) = v6 & v11;
      if ((v14.i8[4] & 1) != 0)
        *(_QWORD *)(a3 + 8 * v9 + 8) = (v11 >> a5) & v6;
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_207A7F3C0));
      if ((v16.i8[0] & 1) != 0)
      {
        *(_QWORD *)(a3 + 8 * v9 + 16) = (v11 >> (2 * a5)) & v6;
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_20:
          *(_QWORD *)(a3 + 8 * v9 + 24) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_21;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_20;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_21:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_207AB5460));
      if ((v17.i8[0] & 1) != 0)
      {
        *(_QWORD *)(a3 + 8 * v9 + 32) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_23:
          if (v15 != 6)
            goto LABEL_27;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_23;
      }
      *(_QWORD *)(a3 + 8 * v9 + 40) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_27:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_207AB5470));
        if ((v18.i8[0] & 1) != 0)
          *(_QWORD *)(a3 + 8 * v9 + 48) = (v11 >> (6 * a5)) & v6;
        if ((v18.i8[4] & 1) != 0)
          *(_QWORD *)(a3 + 8 * v9 + 56) = (v11 >> (7 * a5)) & v6;
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ANEOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.ane", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24BFF41B0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::ANEOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::CPUOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::CPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::CPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::CPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::CPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::CPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::CPUOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.cpu", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::CPUOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047DE0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::CPUOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::DeinterleaveOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneResult<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneOperand<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::DeinterleaveOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::DeinterleaveOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::DeinterleaveOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::DeinterleaveOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.deinterleave", 17, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::DeinterleaveOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C0477A0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::DeinterleaveOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::FPToIntClampedOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.fp_to_int_clamped", 22, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::FPToIntClampedOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24BFFEB40;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::FPToIntClampedOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::GPUOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::GPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::GPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::GPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::GPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::GPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::GPUOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.gpu", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047EA8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::GPUOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::InterleaveOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneResult<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::InterleaveOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneOperand<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::InterleaveOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::InterleaveOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::InterleaveOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::InterleaveOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.interleave", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::InterleaveOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047610;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::InterleaveOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ListPopBackOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPopBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::OpAsmOpInterface::Trait<mlir::mpsx::ListPopBackOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.list_pop_back", 18, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ListPopBackOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C0476D8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ListPushBackOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OneResult<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPushBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPushBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPushBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPushBackOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.list_push_back", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ListPushBackOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047868;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::MakeListOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::MakeListOp>,mlir::OpTrait::OneResult<mlir::mpsx::MakeListOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::MakeListOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::MakeListOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::MakeListOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::MakeListOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::MakeListOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::MakeListOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::MakeListOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.make_list", 14, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::MakeListOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C0473B8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::MakeListOp::getAttributeNames(void)::attrNames, 2);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::QuantizedGatherOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.quantized_gather", 21, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::QuantizedGatherOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24BFF40E8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::QuantizedGatherOp::getAttributeNames(void)::attrNames, 4);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::QuantizedMatMulOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.quantized_matmul", 21, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::QuantizedMatMulOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047AC0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::QuantizedMatMulOp::getAttributeNames(void)::attrNames, 6);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::RMSNormOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OneResult<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::RMSNormOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::RMSNormOp>,mlir::OpTrait::NOperands<3u>::Impl<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::RMSNormOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::RMSNormOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::RMSNormOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::RMSNormOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.rms_norm", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::RMSNormOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047F70;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::RegionReturnOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.region_return", 18, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::RegionReturnOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047930;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ReturnStitchedOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.stitched_return", 20, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C0479F8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ScaledDotProductAttentionOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.sdpa", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ScaledDotProductAttentionOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047D18;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::SparseDenseMatMulOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::SparseDenseMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.sparse_dense_matmul", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::SparseDenseMatMulOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047B88;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::SparseDenseMatMulOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::StitchedOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.stitched", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047480;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::VarHandleOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.var_handle", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::VarHandleOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C047548;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::VarHandleOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  llvm **v2;
  llvm *v4[2];
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v1 = (*(uint64_t (__cdecl **)())(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0)
        v2 = v4;
      else
        v2 = (llvm **)v4[0];
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  uint64_t **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = (uint64_t **)v7;
      else
        v5 = (uint64_t **)v7[0];
      (*(void (**)(uint64_t **, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))(v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::ANEOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>>((uint64_t)a1);
  v6 = malloc_type_malloc(0x30uLL, 0x800407D3415B1uLL);
  *v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBodyBlock;
  v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::build;
  v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(mlir::Operation **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t Inputs;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  const void **v32[4];
  __int16 v33;
  int v34;
  uint64_t v35;
  uint64_t FunctionTypeAttr;
  _BYTE v37[16];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned int *)*this + 11);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = (_QWORD *)((((unint64_t)*this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10));
  else
    v3 = 0;
  if ((_QWORD *)*v3 != v3)
  {
    FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(this);
    FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    v6 = v5;
    v7 = *(_QWORD *)((((unint64_t)*this
                     + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)*this + 10)
                   + 8);
    if (v7)
      v8 = v7 - 8;
    else
      v8 = 0;
    v10 = v8 + 48;
    v9 = *(_QWORD *)(v8 + 48);
    if (((unint64_t)(*(_QWORD *)(v10 + 8) - v9) >> 3) != v5)
    {
      v32[0] = (const void **)"entry block must have ";
      v33 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v32, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
      {
        v34 = 5;
        v35 = v6;
        v14 = &v34;
        v15 = v38;
        if (v39 >= v40)
        {
          v27 = v39 + 1;
          if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
          {
            v29 = (char *)&v34 - v38;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
            v15 = v38;
            v14 = (int *)&v29[v38];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
            v14 = &v34;
            v15 = v38;
          }
        }
        v16 = v15 + 24 * v39;
        v17 = *(_OWORD *)v14;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v39;
        if (FunctionTypeAttr)
          mlir::Diagnostic::operator<<((uint64_t)v37, " arguments to match function signature");
      }
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
LABEL_32:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
      return v13;
    }
    if (v5)
    {
      v11 = (uint64_t *)Inputs;
      v12 = 0;
      while (1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v12) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (*v11 != v31)
          break;
        ++v12;
        ++v11;
        if (v5 == (_DWORD)v12)
          return 1;
      }
      v32[0] = (const void **)"type of entry block argument #";
      v33 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v32, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
      {
        v34 = 5;
        v35 = v12;
        v18 = &v34;
        v19 = v38;
        if (v39 >= v40)
        {
          v28 = v39 + 1;
          if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
          {
            v30 = (char *)&v34 - v38;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v28, 24);
            v19 = v38;
            v18 = (int *)&v30[v38];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v28, 24);
            v18 = &v34;
            v19 = v38;
          }
        }
        v20 = v19 + 24 * v39;
        v21 = *(_OWORD *)v18;
        *(_QWORD *)(v20 + 16) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v20 = v21;
        ++v39;
        if (FunctionTypeAttr)
          mlir::Diagnostic::operator<<((uint64_t)v37, 40);
      }
      v22 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v31);
      v23 = v22;
      if (*v22)
      {
        mlir::Diagnostic::operator<<((uint64_t)(v22 + 1), ") must match the type of the corresponding argument in ");
        if (*v23)
          mlir::Diagnostic::operator<<((uint64_t)(v23 + 1), "function signature(");
      }
      v24 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)v23, v11);
      v25 = (uint64_t)v24;
      if (*v24)
        mlir::Diagnostic::operator<<((uint64_t)(v24 + 1), 41);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
      goto LABEL_32;
    }
  }
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeBody(uint64_t a1, mlir::SymbolRefAttr *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  return mlir::legalizeA12(a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeRegionBody(uint64_t a1, mlir::SymbolRefAttr *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return mlir::legalizeA12(a2, a3, a4, a5, a6, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  v5 = mlir::TypeAttr::get(a3);
  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    return v2 - 8;
  else
    return 0;
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isRegionProfitable()
{
  return 1;
}

__n128 mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  __n128 result;

  mlir::mpsx::ANEOp::build(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, __src, a18);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v25;
  uint64_t v26;

  v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return v26 == a2
      || v25 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  uint64_t v10;

  mlir::OpState::printOpName(a2, a3, a4, a5);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  uint64_t *v8;

  if (mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands((mlir::OpTrait::impl *)a1, v5)
    && (v8 = a1, mlir::mpsx::ANEOp::verifyInvariantsImpl(&v8))
    && mlir::detail::verifySymbol((mlir::detail *)a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::mpsx::ANEOp>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::function_interface_impl::verifyTrait<mlir::mpsx::ANEOp>(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *Value;
  uint64_t v8;
  __int128 *v9;
  _BYTE *AttrData;
  size_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t NameDialect;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  _BYTE *v22;
  size_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  const char *v39;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  const void **v48[4];
  __int16 v49;
  uint64_t ArgAttrsAttr;
  uint64_t *v51;
  __int128 v52;
  uint64_t FunctionTypeAttr;
  _BYTE v54[16];
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[20];

  v58[19] = *MEMORY[0x24BDAC8D0];
  v51 = a1;
  ArgAttrsAttr = mlir::mpsx::ANEOp::getArgAttrsAttr((mlir::Operation **)&v51);
  if (ArgAttrsAttr)
  {
    FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr((mlir::Operation **)&v51);
    FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    v2 = v1;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    v3 = v2;
    if (v4 != v2)
    {
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::Diagnostic::operator<<((uint64_t)v54, "expects argument attribute array to have the same number of elements as the number of function arguments, got ");
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
      if (!FunctionTypeAttr)
        goto LABEL_59;
      LODWORD(v52) = 5;
      *((_QWORD *)&v52 + 1) = v28;
      v29 = (char *)&v52;
      v30 = v55;
      if (v56 < v57)
        goto LABEL_50;
      v31 = v56 + 1;
      if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
        goto LABEL_81;
      goto LABEL_82;
    }
    if (v2)
    {
      LODWORD(v5) = 0;
      while (1)
      {
        v6 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
        v5 = v5;
        if (!v6)
          break;
        if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
          v6 = 0;
        v47 = v6;
        if (!v6)
          goto LABEL_65;
        Value = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
        v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
        if (Value != (__int128 *)v8)
        {
          v9 = (__int128 *)v8;
          do
          {
            v52 = *Value;
            FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
            AttrData = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
            if (!v11 || (v12 = AttrData, (v13 = (char *)memchr(AttrData, 46, v11)) == 0) || v13 - v12 == -1)
            {
              v39 = "arguments may only have dialect attributes";
              goto LABEL_58;
            }
            NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
            if (NameDialect)
            {
              if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)NameDialect + 80))(NameDialect, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))return 0;
            }
            ++Value;
          }
          while (Value != v9);
        }
        LODWORD(v5) = v5 + 1;
        if ((_DWORD)v5 == v2)
          goto LABEL_19;
      }
      v47 = 0;
LABEL_65:
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (!FunctionTypeAttr)
        goto LABEL_71;
      goto LABEL_70;
    }
  }
LABEL_19:
  ArgAttrsAttr = mlir::mpsx::ANEOp::getResAttrsAttr((mlir::Operation **)&v51);
  if (!ArgAttrsAttr)
    goto LABEL_37;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr((mlir::Operation **)&v51);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
  v16 = v15;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
  v3 = v16;
  if (v17 != v16)
  {
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (FunctionTypeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v54, "expects result attribute array to have the same number of elements as the number of function results, got ");
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    if (!FunctionTypeAttr)
      goto LABEL_59;
    LODWORD(v52) = 5;
    *((_QWORD *)&v52 + 1) = v32;
    v29 = (char *)&v52;
    v30 = v55;
    if (v56 < v57)
    {
LABEL_50:
      v33 = v30 + 24 * v56;
      v34 = *(_OWORD *)v29;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v33 = v34;
      ++v56;
      if (FunctionTypeAttr)
      {
        mlir::Diagnostic::operator<<((uint64_t)v54, ", but expected ");
        if (FunctionTypeAttr)
        {
          LODWORD(v52) = 5;
          *((_QWORD *)&v52 + 1) = v3;
          v35 = (char *)&v52;
          v36 = v55;
          if (v56 >= v57)
          {
            v44 = v56 + 1;
            if (v55 <= (unint64_t)&v52 && v55 + 24 * v56 > (unint64_t)&v52)
            {
              v46 = (char *)&v52 - v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v36 = v55;
              v35 = &v46[v55];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v35 = (char *)&v52;
              v36 = v55;
            }
          }
          v37 = v36 + 24 * v56;
          v38 = *(_OWORD *)v35;
          *(_QWORD *)(v37 + 16) = *((_QWORD *)v35 + 2);
          *(_OWORD *)v37 = v38;
          ++v56;
        }
      }
LABEL_59:
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
LABEL_61:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v27;
    }
    v31 = v56 + 1;
    if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
    {
LABEL_81:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
      v29 = (char *)&v52;
      v30 = v55;
      goto LABEL_50;
    }
LABEL_82:
    v45 = (char *)&v52 - v30;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
    v30 = v55;
    v29 = &v45[v55];
    goto LABEL_50;
  }
  if (v16)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      v18 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
      v5 = v5;
      if (!v18)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
        v18 = 0;
      v47 = v18;
      if (!v18)
        goto LABEL_68;
      v19 = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
      v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
      if (v19 != (__int128 *)v20)
      {
        v21 = (__int128 *)v20;
        while (1)
        {
          v52 = *v19;
          FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
          v22 = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
          if (!v23)
            break;
          v24 = v22;
          v25 = (char *)memchr(v22, 46, v23);
          if (!v25 || v25 - v24 == -1)
            break;
          v26 = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
          if (v26
            && !(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v26 + 88))(v26, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))
          {
            return 0;
          }
          if (++v19 == v21)
            goto LABEL_36;
        }
        v39 = "results may only have dialect attributes";
        goto LABEL_58;
      }
LABEL_36:
      LODWORD(v5) = v5 + 1;
      if ((_DWORD)v5 == v16)
        goto LABEL_37;
    }
    v47 = 0;
LABEL_68:
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (!FunctionTypeAttr)
      goto LABEL_71;
LABEL_70:
    mlir::Diagnostic::operator<<((uint64_t)v54, v41);
LABEL_71:
    *(_QWORD *)&v52 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
    v42 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v52);
    v43 = (uint64_t)v42;
    if (*v42)
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
    if (FunctionTypeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
    goto LABEL_61;
  }
LABEL_37:
  if ((*((_DWORD *)v51 + 11) & 0x7FFFFF) != 1)
  {
    v39 = "expects one region";
LABEL_58:
    v48[0] = (const void **)v39;
    v49 = 259;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    goto LABEL_59;
  }
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody((mlir::Operation **)&v51);
}

BOOL mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::CPUOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::CPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::CPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::CPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::CPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::CPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::CPUOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>>((uint64_t)a1);
  v6 = malloc_type_malloc(0x30uLL, 0x800407D3415B1uLL);
  *v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBodyBlock;
  v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::build;
  v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return mlir::minimalLegalize(a2, a3, a4, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeRegionBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return mlir::minimalLegalize(a2, a4, a5, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  v5 = mlir::TypeAttr::get(a3);
  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    return v2 - 8;
  else
    return 0;
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isRegionProfitable()
{
  return 1;
}

__n128 mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  __n128 result;

  mlir::mpsx::ANEOp::build(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, __src, a18);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v25;
  uint64_t v26;

  v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return v26 == a2
      || v25 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  uint64_t v10;

  mlir::OpState::printOpName(a2, a3, a4, a5);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneResult<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OneOperand<mlir::mpsx::DeinterleaveOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::DeinterleaveOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::DeinterleaveOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::DeinterleaveOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::DeinterleaveOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v4 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::DeinterleaveOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::DeinterleaveOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.deinterleave";
  v19[1] = (char *)17;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::mpsx::DeinterleaveOp::verify((uint64_t **)&v7) != 0;
}

BOOL mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  llvm **v2;
  llvm *v4[2];
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0)
        v2 = v4;
      else
        v2 = (llvm **)v4[0];
      (*(void (**)(uint64_t, uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v6;
  llvm **v7;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0)
        v7 = v8;
      else
        v7 = (llvm **)v8[0];
      result = (*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v7);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::FPToIntClampedOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::FPToIntClampedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.fp_to_int_clamped";
  v19[1] = (char *)22;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v24;

  v24 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v24 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Stitchable<Empty>]";
      v12 = 82;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[354];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v8 = a1, mlir::mpsx::FPToIntClampedOp::verifyInvariantsImpl((uint64_t **)&v8)))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  v4 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::FileBackedConstantOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v11, v5, v4);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.file_backed_constant", 25, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::FileBackedConstantOp,void>::id, (uint64_t)&v11);
  v6 = v11;
  if ((_DWORD)v12)
  {
    v7 = 16 * v12;
    v8 = (void **)((char *)v11 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v11;
  }
  if (v6 != v13)
    free(v6);
  *a1 = &off_24C047C50;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::mpsx::FileBackedConstantOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::GPUOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::GPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::GPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::GPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::GPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::GPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::GPUOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>>((uint64_t)a1);
  v6 = malloc_type_malloc(0x30uLL, 0x800407D3415B1uLL);
  *v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBodyBlock;
  v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::build;
  v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return mlir::minimalLegalize(a2, a3, a4, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeRegionBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return mlir::minimalLegalize(a2, a4, a5, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  v5 = mlir::TypeAttr::get(a3);
  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    return v2 - 8;
  else
    return 0;
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isRegionProfitable()
{
  return 1;
}

__n128 mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  __n128 result;

  mlir::mpsx::ANEOp::build(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, __src, a18);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v25;
  uint64_t v26;

  v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return v26 == a2
      || v25 == a2
      || v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  uint64_t v10;

  mlir::OpState::printOpName(a2, a3, a4, a5);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneResult<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::InterleaveOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OneOperand<mlir::mpsx::InterleaveOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::InterleaveOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::InterleaveOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::InterleaveOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::InterleaveOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v4 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::InterleaveOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::InterleaveOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::InterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::InterleaveOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.interleave";
  v19[1] = (char *)15;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::mpsx::InterleaveOp::verify((uint64_t **)&v7) != 0;
}

BOOL mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPopBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::OpAsmOpInterface::Trait<mlir::mpsx::ListPopBackOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc_type_malloc(0x20uLL, 0x8004018A671A6uLL);
  *v8 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmResultNames;
  v8[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmBlockArgumentNames;
  v8[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmBlockNames;
  v8[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getDefaultDialect;
  v9 = mlir::TypeID::get<mlir::OpAsmOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v17[0] = a4;
  v17[1] = a5;
  v11 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned int *)(a11 + 8);
  if (v12 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v12) = v11;
  v13 = *(_DWORD *)(a11 + 12);
  v14 = (*(_DWORD *)(a11 + 8) + 1);
  *(_DWORD *)(a11 + 8) = v14;
  v15 = *(_QWORD *)(v11 + 8);
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v14) = v15;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPopBackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPopBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  v25 = a4;
  v26 = a5;
  v24[0] = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v23) = 1;
  v24[1] = *(_QWORD *)(v24[0] + 8);
  LODWORD(v23) = 2;
  mlir::ValueRange::ValueRange(v21, (uint64_t)v24, 2uLL);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_6:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v19[0] = "mpsx.list_pop_back";
    v19[1] = (char *)18;
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v25);
      v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
      if (v25)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
    }
    else
    {
      v16 = 0;
    }
  }
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t NextResultAtOffset;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2 - 16;
  if (*(_DWORD *)(a2 + 36))
    v7 = a2 - 16;
  else
    v7 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  a3(a4, NextResultAtOffset, "output_list", 11);
  if (*(_DWORD *)(a2 + 36))
    v9 = v6;
  else
    v9 = 0;
  v10 = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 1);
  v11 = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a3)(a4, v11, "element", 7);
}

char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getDefaultDialect()
{
  return &byte_207AF6795;
}

uint64_t mlir::TypeID::get<mlir::OpAsmOpInterface>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v12 = 72;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[336];
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NResults<2>::Impl<Empty>]";
      v12 = 89;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[338];
}

uint64_t mlir::TypeID::get<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v12 = 86;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[340];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyNResults(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v4))
  {
    return 0;
  }
  v6 = a1;
  return mlir::mpsx::ListPopBackOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OneResult<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::mpsx::ListPushBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPushBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPushBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPushBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPushBackOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::inferReturnTypesEqualToFirstArgumentType(a1, a2, a3, a4, a5, a6, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPushBackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPushBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::inferReturnTypesEqualToFirstArgumentType(a1, a2, a3, a4, a5, a6, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.list_push_back";
  v19[1] = (char *)19;
  if (!a3)
    goto LABEL_13;
  mlir::emitError(a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::mpsx::ListPushBackOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::mpsx::ListPushBackOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::MakeListOp>,mlir::OpTrait::OneResult<mlir::mpsx::MakeListOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::MakeListOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::MakeListOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::MakeListOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::MakeListOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::MakeListOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::MakeListOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::MakeListOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::MakeListOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::MakeListOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::MakeListOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::MakeListOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.make_list";
  v19[1] = (char *)14;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::mpsx::MakeListOp::verifyInvariantsImpl((uint64_t **)&v7);
}

BOOL mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::QuantizedGatherOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::QuantizedGatherOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.quantized_gather";
  v19[1] = (char *)21;
  if (!a3)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<4>::Impl<Empty>]";
      v12 = 97;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[376];
}

uint64_t mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451B000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451B000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v12 = 96;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451B000;
    }
  }
  return v1[37];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::mpsx::QuantizedGatherOp::verify(&v4);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)4)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
  {
    return 0;
  }
  v6 = a1;
  return mlir::mpsx::QuantizedGatherOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::populateDefaultAttrs(int a1, mlir::mpsx::QuantizedMatMulOp *this, mlir::OperationName *a3)
{
  mlir::mpsx::QuantizedMatMulOp::populateDefaultAttrs(this, a3, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.quantized_matmul";
  v19[1] = (char *)21;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v12 = 97;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[431];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::mpsx::QuantizedMatMulOp::verify((uint64_t **)&v4);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
  {
    return 0;
  }
  v6 = a1;
  return mlir::mpsx::QuantizedMatMulOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OneResult<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::RMSNormOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::RMSNormOp>,mlir::OpTrait::NOperands<3u>::Impl<mlir::mpsx::RMSNormOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::RMSNormOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::RMSNormOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::RMSNormOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::RMSNormOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v15[0] = a4;
  v15[1] = a5;
  if (a5)
  {
    v11 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v12 = mlir::Float32Type::get(a1, a2);
    v11 = mlir::UnrankedTensorType::get(v12);
  }
  v13 = *(unsigned int *)(a11 + 8);
  if (v13 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v13) = v11;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::RMSNormOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::RMSNormOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v14;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v21[2];
  unint64_t v22[2];
  unint64_t v23[2];
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = v26;
  v25 = 0x400000000;
  v27 = a4;
  v28 = a5;
  if (a5)
  {
    v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v14 = mlir::Float32Type::get(a1, a2);
    v13 = mlir::UnrankedTensorType::get(v14);
  }
  *((_QWORD *)v24 + v25) = v13;
  LODWORD(v25) = v25 + 1;
  mlir::ValueRange::ValueRange(v23, (uint64_t)v24, v25);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v27 = &off_24C053790;
  v29 = &v27;
  v16 = v29;
  if (v29 == &v27)
  {
    v17 = 4;
    v16 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_9;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_9:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v21[0] = "mpsx.rms_norm";
    v21[1] = (char *)13;
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v27);
      v19 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v27, "'", v21, "' op inferred type(s) ", (uint64_t)&v24, " are incompatible with return type(s) of operation ", a11);
      v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
      if (v27)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v28);
    }
    else
    {
      v18 = 0;
    }
  }
  if (v24 != v26)
    free(v24);
  return v18;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)3))
    return 0;
  v6 = a1;
  if (!mlir::mpsx::RMSNormOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::mpsx::RMSNormOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && (v7 = a1, mlir::mpsx::RegionReturnOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<Empty>]";
      v12 = 111;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[398];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::IsTerminator<mlir::mpsx::ReturnStitchedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::IsTerminator<mlir::mpsx::ReturnStitchedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>::verifyTrait((uint64_t *)a1)
      && mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  uint64_t v4;
  const void **v6;
  __int16 v7;
  const void **v8[4];
  __int16 v9;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x24BDAC8D0];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
        return 1;
    }
  }
  v7 = 257;
  mlir::Operation::emitOpError(a1, &v6, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "expects parent op ");
    if (v10)
    {
      mlir::Diagnostic::operator<<((uint64_t)v11, "'");
      if (v10)
      {
        v9 = 262;
        v8[0] = (const void **)"mpsx.stitched";
        v8[1] = (const void **)13;
        mlir::Diagnostic::operator<<((uint64_t)v11, v8);
        if (v10)
          mlir::Diagnostic::operator<<((uint64_t)v11, "'");
      }
    }
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v4;
}

uint64_t mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  char *v21[2];
  unint64_t v22[2];
  unint64_t v23[2];
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;

  v11 = a3;
  v30 = *MEMORY[0x24BDAC8D0];
  v24 = v26;
  v25 = 0x400000000;
  if (!mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, v19, v20, (uint64_t)&v24))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v23, (uint64_t)v24, v25);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v27 = &off_24C053790;
  v29 = &v27;
  v14 = v29;
  if (v29 == &v27)
  {
    v15 = 4;
    v14 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v21[0] = "mpsx.sdpa";
  v21[1] = (char *)9;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v27);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v27, "'", v21, "' op inferred type(s) ", (uint64_t)&v24, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v27)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v28);
LABEL_14:
  if (v24 != v26)
    free(v24);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<5>::Impl<Empty>]";
      v12 = 90;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[400];
}

uint64_t mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451B000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451B000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsElementType<Empty>]";
      v12 = 95;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451B000;
    }
  }
  return v1[183];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::mpsx::ScaledDotProductAttentionOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)5)
    && (v7 = a1, mlir::mpsx::ScaledDotProductAttentionOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifySameOperandsElementType(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::populateDefaultAttrs(int a1, mlir::mpsx::SparseDenseMatMulOp *this, mlir::OperationName *a3)
{
  mlir::mpsx::SparseDenseMatMulOp::populateDefaultAttrs(this, a3, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::SparseDenseMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::SparseDenseMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::SparseDenseMatMulOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = &off_24C053790;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.sparse_dense_matmul";
  v19[1] = (char *)24;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)5))
    return 0;
  v6 = a1;
  if (!mlir::mpsx::SparseDenseMatMulOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::mpsx::SparseDenseMatMulOp::verify(&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  ZinIrHalH13g *v17;
  mlir::ForwardIterator *v18;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v20[0] = a9;
  v20[1] = 0;
  v11 = mlir::RegionRange::dereference_iterator(v20, 0);
  v20[0] = a11;
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 != v11)
  {
    v13 = v11;
    do
    {
      v14 = v12 - 8;
      if (!v12)
        v14 = 0;
      v15 = (ZinIrHalH13g *)(v14 + 32);
      v16 = *(ZinIrHalH13g **)(v14 + 40);
      if (v16 != (ZinIrHalH13g *)(v14 + 32))
      {
        do
        {
          v17 = (ZinIrHalH13g *)*((_QWORD *)v16 + 1);
          ZinIrHalH13g::~ZinIrHalH13g(v16);
          mlir::detail::walk<mlir::ForwardIterator>(v18, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v20, 1);
          v16 = v17;
        }
        while (v17 != v15);
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12 != v13);
  }
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::StitchedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::StitchedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  ZinIrHalH13g *v19;
  mlir::ForwardIterator *v20;
  char isCompatibleReturnTypesDefaultImpl;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v27[2];
  unint64_t v28[2];
  unint64_t v29[2];
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  void **v33;
  uint64_t v34;
  void ***v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x400000000;
  v33 = a9;
  v34 = 0;
  v13 = mlir::RegionRange::dereference_iterator(&v33, 0);
  v33 = &v30;
  v14 = *(_QWORD *)(v13 + 8);
  if (v14 != v13)
  {
    v15 = v13;
    do
    {
      v16 = v14 - 8;
      if (!v14)
        v16 = 0;
      v17 = (ZinIrHalH13g *)(v16 + 32);
      v18 = *(ZinIrHalH13g **)(v16 + 40);
      if (v18 != (ZinIrHalH13g *)(v16 + 32))
      {
        do
        {
          v19 = (ZinIrHalH13g *)*((_QWORD *)v18 + 1);
          ZinIrHalH13g::~ZinIrHalH13g(v18);
          mlir::detail::walk<mlir::ForwardIterator>(v20, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)&v33, 1);
          v18 = v19;
        }
        while (v19 != v17);
      }
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14 != v15);
  }
  mlir::ValueRange::ValueRange(v29, (uint64_t)v30, v31);
  mlir::ValueRange::ValueRange(v28, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v33 = (void **)&off_24C053790;
  v35 = &v33;
  v22 = v35;
  if (v35 == &v33)
  {
    v23 = 4;
    v22 = &v33;
  }
  else
  {
    if (!v35)
      goto LABEL_14;
    v23 = 5;
  }
  ((void (*)(void))(*v22)[v23])();
LABEL_14:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v24 = 1;
  }
  else
  {
    v27[0] = "mpsx.stitched";
    v27[1] = (char *)13;
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      v25 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v33, "'", v27, "' op inferred type(s) ", (uint64_t)&v30, " are incompatible with return type(s) of operation ", a11);
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v34);
    }
    else
    {
      v24 = 0;
    }
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_24C053790;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 9))
    v6 = (uint64_t)a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3((uint64_t *)a1, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::mpsx::VarHandleOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

void mlir::mpsx::MPSXOpFolderDialectInterface::~MPSXOpFolderDialectInterface(mlir::mpsx::MPSXOpFolderDialectInterface *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::DialectFoldInterface::fold()
{
  return 0;
}

BOOL mlir::mpsx::MPSXOpFolderDialectInterface::shouldMaterializeInto(mlir::mpsx::MPSXOpFolderDialectInterface *this, mlir::Region *a2)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id;
}

uint64_t mlir::TypeID::get<mlir::DialectFoldInterface>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451B000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451B000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
      v12 = 76;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451B000;
    }
  }
  return v1[169];
}

uint64_t *mlir::Dialect::addType<mlir::mpsx::ListType>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  mlir::MLIRContext *v9;
  uint64_t v10;
  uint64_t *TypeUniquer;
  uint64_t v12;
  _BYTE v14[8];
  void *v15;
  unsigned int v16;
  uint64_t v17;
  llvm *v18[2];
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = mlir::TypeID::get<mlir::mpsx::ListType>();
  mlir::AbstractType::get<mlir::mpsx::ListType>(a1, (uint64_t)v14);
  mlir::Dialect::addType(a1, v2, (uint64_t)v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(llvm **))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = (uint64_t *)v15;
  if (v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = (uint64_t *)v15;
  }
  if (v5 != &v17)
    free(v5);
  v9 = *(mlir::MLIRContext **)(a1 + 32);
  v10 = mlir::TypeID::get<mlir::mpsx::ListType>();
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v9);
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, v10, 0, v12);
}

void mlir::AbstractType::get<mlir::mpsx::ListType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  char v9;
  char v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  _OWORD v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(v14, 0, sizeof(v14));
  v12 = v14;
  v13 = 0x300000000;
  v4 = mlir::TypeID::get<mlir::mpsx::ListType>();
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v13)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v12);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::mpsx::ListType,mlir::Type,mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v11;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSD_6detail29TypeWithStaticSubtypesStorageILj1EEENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(_QWORD *)(a2 + 112) = &v10;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSC_6detail29TypeWithStaticSubtypesStorageILj1EEENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(_QWORD *)(a2 + 128) = &v9;
  *(_QWORD *)(a2 + 136) = v4;
  v5 = v12;
  if ((_DWORD)v13)
  {
    v6 = 16 * v13;
    v7 = (void **)((char *)v12 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v12;
  }
  if (v5 != v14)
    free(v5);
}

uint64_t mlir::detail::StorageUserBase<mlir::mpsx::ListType,mlir::Type,mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSC_6detail29TypeWithStaticSubtypesStorageILj1EEENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  const double *v24;
  double *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  const double *v30;
  double *v31;
  uint64_t v32;
  const double *v33;
  double *v34;
  _QWORD *v35;
  float64x2x2_t v37;
  float64x2x2_t v38;
  float64x2x2_t v39;
  float64x2x2_t v40;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_QWORD *)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_38;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v11 = *(_QWORD **)a1;
        v12 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
        if (v12 >= 9)
        {
          v17 = (unint64_t)v11 >= v4 + 16 * v8 || v4 >= (unint64_t)&v11[2 * v8];
          v13 = *(_QWORD **)a2;
          if (v17)
          {
            v18 = v12 + 1;
            v19 = 2 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
            v20 = &v11[v19];
            v13 = (_QWORD *)(v4 + v19 * 8);
            v21 = (const double *)(v4 + 32);
            v22 = (double *)(v11 + 4);
            v23 = v18 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v24 = v21 - 4;
              v37 = vld2q_f64(v24);
              v39 = vld2q_f64(v21);
              v25 = v22 - 4;
              vst2q_f64(v25, v37);
              vst2q_f64(v22, v39);
              v21 += 8;
              v22 += 8;
              v23 -= 4;
            }
            while (v23);
            v11 = v20;
            if (v18 == (v18 & 0x1FFFFFFFFFFFFFFCLL))
              goto LABEL_37;
          }
        }
        else
        {
          v13 = *(_QWORD **)a2;
        }
        v26 = (_QWORD *)(v4 + 16 * v8);
        do
        {
          *v11 = *v13;
          v11[1] = v13[1];
          v13 += 2;
          v11 += 2;
        }
        while (v13 != v26);
      }
      goto LABEL_37;
    }
    if (*(_DWORD *)(a1 + 12) < v8)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 16);
      v9 = 0;
      v10 = *v7;
      if (!*v7)
        goto LABEL_37;
      goto LABEL_36;
    }
    if (!(_DWORD)v9)
    {
      v9 = 0;
      goto LABEL_35;
    }
    v14 = *(_QWORD **)a1;
    v15 = (v9 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v15 >= 9)
    {
      if ((unint64_t)v14 >= v4 + 16 * v9 || (v16 = *(_QWORD **)a2, v4 >= (unint64_t)&v14[2 * v9]))
      {
        v27 = v15 + 1;
        v28 = 2 * (v27 & 0x1FFFFFFFFFFFFFFCLL);
        v29 = &v14[v28];
        v16 = (_QWORD *)(v4 + v28 * 8);
        v30 = (const double *)(v4 + 32);
        v31 = (double *)(v14 + 4);
        v32 = v27 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = v30 - 4;
          v38 = vld2q_f64(v33);
          v40 = vld2q_f64(v30);
          v34 = v31 - 4;
          vst2q_f64(v34, v38);
          vst2q_f64(v31, v40);
          v30 += 8;
          v31 += 8;
          v32 -= 4;
        }
        while (v32);
        v14 = v29;
        if (v27 == (v27 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          v10 = v8;
          if (v9 != v8)
LABEL_36:
            memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
LABEL_37:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_38:
          *v7 = 0;
          return a1;
        }
      }
    }
    else
    {
      v16 = *(_QWORD **)a2;
    }
    v35 = (_QWORD *)(v4 + 16 * v9);
    do
    {
      *v14 = *v16;
      v14[1] = v16[1];
      v16 += 2;
      v14 += 2;
    }
    while (v16 != v35);
    goto LABEL_35;
  }
  return a1;
}

BOOL mlir::mpsx::`anonymous namespace'::qimpl::verifyAffineQuant(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t ElementTypeOrSelf;
  const char *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const void **v22;
  __int16 v23;
  _QWORD *v24[2];
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD v28[24];

  v28[23] = *MEMORY[0x24BDAC8D0];
  v25 = a1;
  v26 = a6;
  v24[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8));
  v24[1] = v11;
  if (!v24[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v24))
    return 1;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v24[0]);
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    v21 = 0;
    if ((a6 & 0xFF00000000) != 0)
    {
      mlir::ShapedType::getShape((mlir::ShapedType *)v24);
      if ((int)a6 < 0)
        v15 = v14;
      else
        v15 = 0;
      v16 = v15 + a6;
      if ((v16 & 0x80000000) != 0 || (v17 = v16, mlir::ShapedType::getShape((mlir::ShapedType *)v24), v17 > v18))
      {
        goto LABEL_12;
      }
      v21 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v24) + 8 * v17);
    }
    v27 = &v26;
    v28[0] = &v25;
    v28[1] = &v21;
    v28[2] = v24;
  }
  v13 = "input and zeroPoint types must match";
LABEL_12:
  v22 = (const void **)v13;
  v23 = 259;
  mlir::Operation::emitOpError(a1, &v22, (uint64_t)&v27);
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
  if (v27)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v28);
  return v19;
}

BOOL mlir::mpsx::QuantizedMatMulOp::isWeightsQuantized(mlir::Operation **this)
{
  mlir::Operation *v2;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  mlir::Operation *v7;
  unint64_t v8;
  uint64_t v9;
  mlir::Operation *v11;
  unint64_t v12;
  uint64_t v13;
  mlir::Operation *v14;

  v14 = *this;
  v2 = v14;
  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 5);
  if ((*((_BYTE *)v2 + 46) & 0x80) != 0)
    v4 = *((_QWORD *)v2 + 9);
  else
    v4 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
    && *(_QWORD *)(v4 + 32 * ODSOperandIndexAndLength + 24))
  {
    v5 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 9);
    v6 = (*((_BYTE *)v2 + 46) & 0x80) != 0 ? *((_QWORD *)v2 + 9) : 0;
    if (HIDWORD(v5) + (_DWORD)v5 == (unint64_t)v5
      || !*(_QWORD *)(v6 + 32 * v5 + 24))
    {
      return 1;
    }
  }
  v14 = *this;
  v7 = v14;
  v8 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 8);
  v9 = (*((_BYTE *)v7 + 46) & 0x80) != 0 ? *((_QWORD *)v7 + 9) : 0;
  if (HIDWORD(v8) + (_DWORD)v8 != (unint64_t)v8 && *(_QWORD *)(v9 + 32 * v8 + 24))
    return 1;
  v11 = *this;
  v14 = v11;
  v12 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 9);
  if ((*((_BYTE *)v11 + 46) & 0x80) != 0)
    v13 = *((_QWORD *)v11 + 9);
  else
    v13 = 0;
  return HIDWORD(v12) + (_DWORD)v12 != (unint64_t)v12
      && *(_QWORD *)(v13 + 32 * v12 + 24) != 0;
}

uint64_t mlir::mpsx::`anonymous namespace'::qimpl::verifyAffineQuant(mlir::Operation *,mlir::Value,mlir::Value,mlir::Value,mlir::Value,std::optional<int>)::$_0::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  _QWORD *Shape;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  int *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  int *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  int *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58[4];
  __int16 v59;
  _QWORD v60[2];
  int v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[16];
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD v68[20];

  v68[19] = *MEMORY[0x24BDAC8D0];
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v60[0] = v5;
  v60[1] = v6;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 4))
  {
    if (v5 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
    {
      Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (v21)
      {
        v22 = 8 * v21;
        while (*Shape != 0x8000000000000000)
        {
          ++Shape;
          v22 -= 8;
          if (!v22)
            goto LABEL_30;
        }
        return 1;
      }
LABEL_30:
      mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (v23 > 1)
      {
        if (mlir::CallOpInterface::getArgOperands(*(mlir::CallOpInterface **)(a1 + 24)))
        {
          mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24));
          v28 = v27;
          mlir::ShapedType::getShape((mlir::ShapedType *)v60);
          if (v28 != v29)
          {
            v51 = **(uint64_t ***)(a1 + 8);
            v59 = 257;
            mlir::Operation::emitOpError(v51, v58, (uint64_t)&v63);
            if (!v63)
              goto LABEL_65;
            mlir::Diagnostic::operator<<((uint64_t)v64, "ND ");
            if (!v63)
              goto LABEL_65;
            mlir::Diagnostic::operator<<((uint64_t)v64, a2);
            if (!v63)
              goto LABEL_65;
            v19 = " rank differs from input rank";
            goto LABEL_64;
          }
        }
        mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24));
        if (v30)
        {
          v31 = 0;
          while (1)
          {
            v34 = 8 * v31;
            v35 = *(_QWORD *)(mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24)) + v34);
            v36 = *(_QWORD *)(mlir::ShapedType::getShape((mlir::ShapedType *)v60) + v34);
            v37 = v35 == 0x8000000000000000 || v36 == 0x8000000000000000;
            if (!v37 && v35 % v36)
              break;
            ++v31;
            mlir::ShapedType::getShape(*(mlir::ShapedType **)(a1 + 24));
            v10 = 1;
            if (v31 >= v33)
              return v10;
          }
          v38 = **(uint64_t ***)(a1 + 8);
          v59 = 257;
          mlir::Operation::emitOpError(v38, v58, (uint64_t)&v63);
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, " shape not compatible with input for axis ");
          if (!v63)
            goto LABEL_8;
          v61 = 5;
          v62 = v31;
          v39 = &v61;
          v40 = v65;
          if (v66 >= v67)
          {
            v52 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              v55 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
              v40 = v65;
              v39 = (int *)&v55[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
              v39 = &v61;
              v40 = v65;
            }
          }
          v41 = v40 + 24 * v66;
          v42 = *(_OWORD *)v39;
          *(_QWORD *)(v41 + 16) = *((_QWORD *)v39 + 2);
          *(_OWORD *)v41 = v42;
          ++v66;
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, ": ");
          if (!v63)
            goto LABEL_8;
          v61 = 2;
          v62 = v35;
          v43 = &v61;
          v44 = v65;
          if (v66 >= v67)
          {
            v53 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              v56 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v53, 24);
              v44 = v65;
              v43 = (int *)&v56[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v53, 24);
              v43 = &v61;
              v44 = v65;
            }
          }
          v45 = v44 + 24 * v66;
          v46 = *(_OWORD *)v43;
          *(_QWORD *)(v45 + 16) = *((_QWORD *)v43 + 2);
          *(_OWORD *)v45 = v46;
          ++v66;
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, " % ");
          if (!v63)
            goto LABEL_8;
          v61 = 2;
          v62 = v36;
          v47 = &v61;
          v48 = v65;
          if (v66 >= v67)
          {
            v54 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              v57 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              v48 = v65;
              v47 = (int *)&v57[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              v47 = &v61;
              v48 = v65;
            }
          }
          v49 = v48 + 24 * v66;
          v50 = *(_OWORD *)v47;
          *(_QWORD *)(v49 + 16) = *((_QWORD *)v47 + 2);
          *(_OWORD *)v49 = v50;
          ++v66;
          if (!v63)
            goto LABEL_8;
          v9 = " != 0";
          goto LABEL_7;
        }
      }
      else
      {
        v24 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
        if (mlir::ShapedType::getNumElements(v24, v25) != 1)
        {
          v26 = **(uint64_t ***)(a1 + 8);
          v59 = 257;
          mlir::Operation::emitOpError(v26, v58, (uint64_t)&v63);
          if (!v63)
            goto LABEL_8;
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63)
            goto LABEL_8;
          goto LABEL_7;
        }
      }
    }
    return 1;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60)
    || (mlir::ShapedType::getShape((mlir::ShapedType *)v60), v7 < 2))
  {
    if (v60[0]
      && **(_QWORD **)(a1 + 16) != 0x8000000000000000
      && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
    {
      v11 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (v12)
      {
        v13 = 8 * v12;
        while (*v11 != 0x8000000000000000)
        {
          ++v11;
          v13 -= 8;
          if (!v13)
            goto LABEL_18;
        }
        return 1;
      }
LABEL_18:
      v14 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
      if (mlir::ShapedType::getNumElements(v14, v15) != **(_QWORD **)(a1 + 16))
      {
        v16 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v60);
        if (mlir::ShapedType::getNumElements(v16, v17) != 1)
        {
          v18 = **(uint64_t ***)(a1 + 8);
          v59 = 257;
          mlir::Operation::emitOpError(v18, v58, (uint64_t)&v63);
          if (!v63)
            goto LABEL_65;
          mlir::Diagnostic::operator<<((uint64_t)v64, "input and ");
          if (!v63)
            goto LABEL_65;
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63)
            goto LABEL_65;
LABEL_64:
          mlir::Diagnostic::operator<<((uint64_t)v64, v19);
LABEL_65:
          v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v63);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v63);
          return v10;
        }
      }
    }
    return 1;
  }
  v8 = **(uint64_t ***)(a1 + 8);
  v59 = 257;
  mlir::Operation::emitOpError(v8, v58, (uint64_t)&v63);
  if (!v63)
    goto LABEL_8;
  mlir::Diagnostic::operator<<((uint64_t)v64, a2);
  if (!v63)
    goto LABEL_8;
  v9 = " rank must be 0 or 1";
LABEL_7:
  mlir::Diagnostic::operator<<((uint64_t)v64, v9);
LABEL_8:
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v63);
  if (v63)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v63);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v64);
  return v10;
}

void std::__function::__func<mlir::mpsx::`anonymous namespace'::$_1,std::allocator<mlir::mpsx::`anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<mlir::mpsx::`anonymous namespace'::$_1,std::allocator<mlir::mpsx::`anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C053790;
  return result;
}

void std::__function::__func<mlir::mpsx::`anonymous namespace'::$_1,std::allocator<mlir::mpsx::`anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C053790;
}

BOOL std::__function::__func<mlir::mpsx::`anonymous namespace'::$_1,std::allocator<mlir::mpsx::`anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

void llvm::detail::stream_operator_format_adapter<mlir::Type &>::~stream_operator_format_adapter()
{
  JUMPOUT(0x20BD002F8);
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<mlir::Type &>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3;

  v3 = **(_QWORD **)(a1 + 8);
  return mlir::Type::print((llvm::raw_ostream *)&v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mpsx::SparseDenseMatMulOp::verify(void)::$_0>(uint64_t ***a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  mlir::OpState::emitOpError(*a1, a2, a3);
}

unint64_t mlir::getSingleIntValue<long long>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *Shape;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  v10[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v11);
  v10[1] = v2;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v10);
  if (mlir::ShapedType::getNumElements(Shape, v4) == 1
    && (v9[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v11),
        v9[1] = v5,
        *(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v9) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
  {
    v9[0] = 0;
    mlir::copyElementsAttrData<long long>(v11, v12, (uint64_t)v9, 1);
    v7 = v9[0] & 0xFFFFFFFFFFFFFF00;
    v6 = LOBYTE(v9[0]);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  return v7 | v6;
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[47],char const(&)[9],long long &>(uint64_t a1, uint64_t *a2, char *__s, char *a4, uint64_t *a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v18;
  BOOL v19;
  char *v20;
  int v21;
  uint64_t v22;

  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *a2;
  v21 = 2;
  v22 = v12;
  v13 = *(unsigned int *)(v9 + 8);
  v14 = &v21;
  if (v13 >= *(_DWORD *)(v9 + 12))
  {
    v18 = v13 + 1;
    v19 = v10 + 24 * v13 > (unint64_t)&v21;
    if (v10 <= (unint64_t)&v21 && v19)
    {
      v20 = (char *)&v21 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v14 = (int *)&v20[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v14 = &v21;
    }
  }
  v15 = v10 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<char const(&)[9],long long &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[9],long long &>(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  int v16;
  uint64_t v17;

  mlir::Diagnostic::operator<<(a1, a2);
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v16 = 2;
  v17 = v7;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v8 + 1;
    v14 = v6 + 24 * v8 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v14)
    {
      v15 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = &v16;
    }
  }
  v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &unk_254519000;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &unk_254519000;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = (_QWORD *)&unk_254519000;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[373];
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * ((v18 >> 4) ^ (v18 >> 9)) + 8));
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return **a1 == *(_QWORD *)(a2 + 8);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>::construct(a2, *(_QWORD **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>::construct(uint64_t a1, _QWORD *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *result;

  *(_QWORD *)(a1 + 80) += 16;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 16 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a1 = result + 2;
  *result = 0;
  result[1] = *a2;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

void std::__function::__func<mlir::mpsx::`anonymous namespace'::$_4,std::allocator<mlir::mpsx::`anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<mlir::mpsx::`anonymous namespace'::$_4,std::allocator<mlir::mpsx::`anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFFA2E0;
  return result;
}

void std::__function::__func<mlir::mpsx::`anonymous namespace'::$_4,std::allocator<mlir::mpsx::`anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFFA2E0;
}

BOOL std::__function::__func<mlir::mpsx::`anonymous namespace'::$_4,std::allocator<mlir::mpsx::`anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::ANEOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::GPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::CPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2
    && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v3 = *a1;
    v4 = *(unsigned int *)(*a1 + 8);
    if (v4 >= *(_DWORD *)(*a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v3 + 16), v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
    ++*(_DWORD *)(v3 + 8);
  }
}

BOOL mlir::mpsx::isMPSXListElementType(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t ElementType;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 136);
  if (v2 == mlir::TypeID::get<mlir::mpsx::ListType>())
    return 1;
  if (!a1)
    return 0;
  v3 = *(void **)(*(_QWORD *)a1 + 136);
  v4 = v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v5 = v4 ? a1 : 0;
  v8 = v5;
  if (!v4)
    return 0;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v8);
  return mlir::Type::isIntOrFloat((mlir::Type *)&ElementType);
}

uint64_t mlir::mpsx::MPSXDialect::parseType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  mlir::MLIRContext *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 **TypeUniquer;
  _DWORD *v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD v31[3];
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if (!(*(unsigned __int8 (**)(uint64_t, _DWORD **))(*(_QWORD *)a2 + 384))(a2, &v20))
  {
    v22[0] = "expected valid keyword";
    v23 = 259;
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(&v30, a2, v4, v22);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
    if (v30)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v31);
    if (!v5)
      return 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6);
  if (v21 != 4)
  {
    v8 = v20;
    goto LABEL_19;
  }
  v8 = v20;
  if (*v20 != 1953720684)
  {
LABEL_19:
    v32 = 1283;
    v30 = "unknown MPS type: ";
    v31[1] = v8;
    v31[2] = v21;
    mlir::emitError(v7, (uint64_t)&v30, (uint64_t)&v25);
    if (v25)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
    return 0;
  }
  v9 = *(mlir::MLIRContext **)(a1 + 32);
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2))
    return 0;
  v27 = &v29;
  v28 = 0x100000000;
  do
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v24 = 0;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 504))(a2, &v24))
      goto LABEL_28;
    v11 = v24;
    if (!v24)
    {
      v22[0] = "invalid kind of type specified";
      v23 = 259;
      (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(&v30, a2, v10, v22);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
      if (v30)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v31);
      if (!v12)
        goto LABEL_28;
    }
    v13 = v28;
    if (v28 >= (unint64_t)HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, &v29, v28 + 1, 8);
      v13 = v28;
    }
    *((_QWORD *)v27 + v13) = v11;
    LODWORD(v28) = v28 + 1;
  }
  while ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2));
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2))
    v17 = (_DWORD)v28 == 1;
  else
    v17 = 0;
  if (!v17)
  {
LABEL_28:
    v14 = 0;
    goto LABEL_30;
  }
  v24 = *(_QWORD *)v27;
  v18 = mlir::TypeID::get<mlir::mpsx::ListType>();
  v22[0] = v9;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v9);
  v30 = (const char *)v18;
  v31[0] = v22;
  v14 = mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_, (uint64_t)&v30, v18, &v24);
LABEL_30:
  if (v27 != &v29)
    free(v27);
  return v14;
}

llvm::raw_ostream *mlir::mpsx::MPSXDialect::printType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *result;
  _BYTE *v11;

  v4 = a2;
  if (a2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a2 + 136);
    if (v5 != mlir::TypeID::get<mlir::mpsx::ListType>())
      v4 = 0;
  }
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v7 = (_DWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 3uLL)
  {
    *v7 = 1953720684;
    *((_QWORD *)v6 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v6, "list", 4uLL);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "<", 1uLL);
  }
  else
  {
    *v9 = 60;
    ++*((_QWORD *)v8 + 4);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, *(_QWORD *)(v4 + 8));
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v11 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v11)
    return llvm::raw_ostream::write(result, ">", 1uLL);
  *v11 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

BOOL mlir::impl::foldCastInterfaceOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const double *v17;
  int8x16_t *v18;
  unint64_t v19;
  const double *v20;
  unsigned __int128 v21;
  unsigned __int128 v22;
  int8x16_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27[4];
  uint64_t v28[4];
  uint64_t v29[2];
  uint64_t v30;
  unint64_t v31;

  if ((*(_BYTE *)(a1 + 46) & 0x80) == 0)
    return 0;
  v4 = *(unsigned int *)(a1 + 68);
  v30 = *(_QWORD *)(a1 + 72);
  v31 = v4;
  if (!(_DWORD)v4)
    return 0;
  v6 = *(unsigned int *)(a1 + 36);
  v7 = a1 - 16;
  if (!(_DWORD)v6)
    v7 = 0;
  v29[0] = v7;
  v29[1] = v6;
  mlir::OperandRange::getTypes(&v30, v28);
  mlir::OperandRange::getTypes(v29, v27);
  result = mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v28, v27);
  if (result)
  {
    v10 = v30;
    v9 = v31;
    v11 = *(unsigned int *)(a4 + 8);
    if (v31 + v11 > *(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v31 + v11, 8);
      LODWORD(v11) = *(_DWORD *)(a4 + 8);
    }
    if (v9)
    {
      v12 = *(_QWORD *)a4;
      v13 = (uint64_t *)(*(_QWORD *)a4 + 8 * v11);
      if (v9 >= 0xB
        && ((v14 = v11, (unint64_t)v13 >= v10 + 32 * v9)
         || v10 + 24 >= v12 + 8 * (v9 + v11)))
      {
        v16 = v9 & 3;
        if ((v9 & 3) == 0)
          v16 = 4;
        v15 = v9 - v16;
        v13 += v15;
        v17 = (const double *)(v10 + 88);
        v18 = (int8x16_t *)(v12 + 8 * v14 + 16);
        v19 = v15;
        do
        {
          v20 = v17 - 8;
          v21 = (unsigned __int128)vld4q_f64(v20);
          v22 = (unsigned __int128)vld4q_f64(v17);
          v23 = (int8x16_t)vdupq_n_s64(4uLL);
          v18[-1] = vorrq_s8((int8x16_t)v21, v23);
          *v18 = vorrq_s8((int8x16_t)v22, v23);
          v17 += 16;
          v18 += 2;
          v19 -= 4;
        }
        while (v19);
      }
      else
      {
        v15 = 0;
      }
      v24 = v9 - v15;
      v25 = (uint64_t *)(v10 + 32 * v15 + 24);
      do
      {
        v26 = *v25;
        v25 += 4;
        *v13++ = v26 | 4;
        --v24;
      }
      while (v24);
      LODWORD(v11) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(a4 + 8) = v11 + v9;
    return 1;
  }
  return result;
}

uint64_t mlir::impl::verifyCastInterfaceOp(mlir::impl *this, mlir::Operation *a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t (**InterfaceFor)(unint64_t, unint64_t, unint64_t, unint64_t);
  mlir::detail::OpResultImpl *NextResultAtOffset;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  const void **v29;
  const void ***v30;
  char *v31;
  char *v32;
  __int128 v33;
  const void ***v34;
  char *v35;
  const void ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  const void ***v40;
  char *v41;
  char *v42;
  __int128 v43;
  const char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  const void ***v50;
  uint64_t v51;
  __int128 v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  char *v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const void **v80;
  const char *v81;
  uint64_t v82;
  __int16 v83;
  mlir::detail::OpResultImpl *v84;
  uint64_t v85;
  mlir::detail::OpResultImpl *v86;
  uint64_t v87;
  unint64_t v88[2];
  unint64_t v89[2];
  char *v90;
  unint64_t v91[2];
  void *v92;
  unsigned int v93;
  unsigned int v94;
  _BYTE v95[96];
  void *v96;
  _QWORD *v97;
  void *__p;
  _QWORD *v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned int *)this + 9);
  v4 = (char *)this - 16;
  if (!(_DWORD)v3)
    v4 = 0;
  v90 = v4;
  v91[0] = v3;
  mlir::OperandRange::getTypes((uint64_t *)&v90, (uint64_t *)&v84);
  if (v84 != v86 || v85 != v87)
  {
    if ((*((_BYTE *)this + 46) & 0x80) != 0)
    {
      v6 = *((_QWORD *)this + 9);
      v7 = *((unsigned int *)this + 17);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v90 = (char *)v6;
    v91[0] = v7;
    mlir::OperandRange::getTypes((uint64_t *)&v90, &v76);
    InterfaceFor = (uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t))mlir::OpInterface<mlir::CastOpInterface,mlir::detail::CastOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
    mlir::ValueRange::ValueRange((unint64_t *)&v90, v76 + 32 * v77, v79 - v77);
    mlir::TypeRange::TypeRange(v89, (uint64_t)v90, v91[0]);
    NextResultAtOffset = v84;
    v10 = v85;
    v11 = v87;
    if (v85)
      NextResultAtOffset = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v84, v85);
    mlir::ValueRange::ValueRange((unint64_t *)&v90, (uint64_t)NextResultAtOffset, v11 - v10);
    mlir::TypeRange::TypeRange(v88, (uint64_t)v90, v91[0]);
    if (((*InterfaceFor)(v89[0], v89[1], v88[0], v88[1]) & 1) != 0)
      return 1;
    v80 = (const void **)"operand type";
    v83 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, &v80, (uint64_t)&v90);
    if (v76 == v78 && v79 == v77)
    {
      if (!v90)
        goto LABEL_48;
      LODWORD(v80) = 3;
      v81 = "s []";
      v82 = 4;
      v25 = &v80;
      v26 = (char *)v92;
      if (v93 >= v94)
      {
        v64 = v93 + 1;
        if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
        {
          v71 = (char *)&v80 - (_BYTE *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v64, 24);
          v26 = (char *)v92;
          v25 = (const void ***)((char *)v92 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v64, 24);
          v25 = &v80;
          v26 = (char *)v92;
        }
      }
      v27 = &v26[24 * v93];
      v28 = *(_OWORD *)v25;
      v29 = v25[2];
LABEL_41:
      *((_QWORD *)v27 + 2) = v29;
      *(_OWORD *)v27 = v28;
      ++v93;
      if (!v90)
        goto LABEL_48;
      goto LABEL_42;
    }
    if (v79 - v77 == 1)
    {
      if (v90)
      {
        LODWORD(v80) = 3;
        v81 = " ";
        v82 = 1;
        v30 = &v80;
        v31 = (char *)v92;
        if (v93 >= v94)
        {
          v65 = v93 + 1;
          if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
          {
            v72 = (char *)&v80 - (_BYTE *)v92;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v65, 24);
            v31 = (char *)v92;
            v30 = (const void ***)((char *)v92 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v65, 24);
            v30 = &v80;
            v31 = (char *)v92;
          }
        }
        v32 = &v31[24 * v93];
        v33 = *(_OWORD *)v30;
        *((_QWORD *)v32 + 2) = v30[2];
        *(_OWORD *)v32 = v33;
        ++v93;
        if (v90)
        {
          v34 = &v80;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v80, *(_QWORD *)(*(_QWORD *)(v76 + 32 * v77 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
          v35 = (char *)v92;
          if (v93 >= v94)
          {
            v67 = v93 + 1;
            if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
            {
              v74 = (char *)&v80 - (_BYTE *)v92;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v67, 24);
              v35 = (char *)v92;
              v34 = (const void ***)((char *)v92 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v67, 24);
              v34 = &v80;
              v35 = (char *)v92;
            }
          }
          v27 = &v35[24 * v93];
          v28 = *(_OWORD *)v34;
          v29 = v34[2];
          goto LABEL_41;
        }
      }
    }
    else if (v90)
    {
      LODWORD(v80) = 3;
      v81 = "s ";
      v82 = 2;
      v40 = &v80;
      v41 = (char *)v92;
      if (v93 >= v94)
      {
        v66 = v93 + 1;
        if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
        {
          v73 = (char *)&v80 - (_BYTE *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v66, 24);
          v41 = (char *)v92;
          v40 = (const void ***)((char *)v92 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v66, 24);
          v40 = &v80;
          v41 = (char *)v92;
        }
      }
      v42 = &v41[24 * v93];
      v43 = *(_OWORD *)v40;
      *((_QWORD *)v42 + 2) = v40[2];
      *(_OWORD *)v42 = v43;
      ++v93;
      if (v90)
      {
        v80 = (const void **)", ";
        llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::OperandRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(void)#1},void>(v76, v77, v78, v79, (uint64_t)v91, (uint64_t)v91, (const char **)&v80);
        if (v90)
        {
LABEL_42:
          LODWORD(v80) = 3;
          v81 = " and result type";
          v82 = 16;
          v36 = &v80;
          v37 = (char *)v92;
          if (v93 >= v94)
          {
            v63 = v93 + 1;
            if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
            {
              v70 = (char *)&v80 - (_BYTE *)v92;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v63, 24);
              v37 = (char *)v92;
              v36 = (const void ***)((char *)v92 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v63, 24);
              v36 = &v80;
              v37 = (char *)v92;
            }
          }
          v38 = &v37[24 * v93];
          v39 = *(_OWORD *)v36;
          *((_QWORD *)v38 + 2) = v36[2];
          *(_OWORD *)v38 = v39;
          ++v93;
        }
      }
    }
LABEL_48:
    if (v87 - v85 == 1)
      v44 = " ";
    else
      v44 = "s ";
    v75 = v44;
    v45 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v90, &v75);
    v46 = (uint64_t)v45;
    if (*v45)
    {
      v80 = (const void **)", ";
      llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::ResultRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(void)#1},void>(v84, v85, v86, v87, (uint64_t)(v45 + 1), (uint64_t)(v45 + 1), (const char **)&v80);
      if (*(_QWORD *)v46)
      {
        v47 = v46 + 24;
        v48 = *(_QWORD *)(v46 + 24);
        LODWORD(v80) = 3;
        v81 = " are cast incompatible";
        v82 = 22;
        v49 = *(unsigned int *)(v46 + 32);
        v50 = &v80;
        if (v49 >= *(_DWORD *)(v46 + 36))
        {
          v61 = v49 + 1;
          v62 = v48 + 24 * v49 > (unint64_t)&v80;
          if (v48 <= (unint64_t)&v80 && v62)
          {
            v69 = (char *)&v80 - v48;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v47, (void *)(v46 + 40), v61, 24);
            v48 = *(_QWORD *)(v46 + 24);
            v50 = (const void ***)&v69[v48];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v47, (void *)(v46 + 40), v61, 24);
            v48 = *(_QWORD *)(v46 + 24);
            v50 = &v80;
          }
        }
        v51 = v48 + 24 * *(unsigned int *)(v46 + 32);
        v52 = *(_OWORD *)v50;
        *(_QWORD *)(v51 + 16) = v50[2];
        *(_OWORD *)v51 = v52;
        ++*(_DWORD *)(v46 + 32);
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v46);
    if (v90)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    if (v100)
    {
      v53 = __p;
      if (__p)
      {
        v54 = v99;
        v55 = __p;
        if (v99 != __p)
        {
          do
            v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
          while (v54 != v53);
          v55 = __p;
        }
        v99 = v53;
        operator delete(v55);
      }
      v20 = v96;
      if (!v96)
        goto LABEL_71;
      v56 = v97;
      v22 = v96;
      if (v97 == v96)
      {
LABEL_70:
        v97 = v20;
        operator delete(v22);
LABEL_71:
        if (v92 != v95)
          free(v92);
        return v12;
      }
      do
      {
        v58 = *--v56;
        v57 = v58;
        *v56 = 0;
        if (v58)
          MEMORY[0x20BD002D4](v57, 0x1000C8077774924);
      }
      while (v56 != v20);
LABEL_69:
      v22 = v96;
      goto LABEL_70;
    }
    return v12;
  }
  v83 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v80, (uint64_t)&v90);
  if (v90)
  {
    LODWORD(v76) = 3;
    v77 = (uint64_t)"expected at least one result for cast operation";
    v78 = 47;
    v13 = &v76;
    v14 = (char *)v92;
    if (v93 >= v94)
    {
      v60 = v93 + 1;
      if (v92 <= &v76 && (char *)v92 + 24 * v93 > (char *)&v76)
      {
        v68 = (char *)&v76 - (_BYTE *)v92;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v60, 24);
        v14 = (char *)v92;
        v13 = (uint64_t *)((char *)v92 + v68);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v60, 24);
        v13 = &v76;
        v14 = (char *)v92;
      }
    }
    v15 = &v14[24 * v93];
    v16 = *(_OWORD *)v13;
    *((_QWORD *)v15 + 2) = v13[2];
    *(_OWORD *)v15 = v16;
    ++v93;
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
  if (v90)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
  if (v100)
  {
    v17 = __p;
    if (__p)
    {
      v18 = v99;
      v19 = __p;
      if (v99 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v99 = v17;
      operator delete(v19);
    }
    v20 = v96;
    if (!v96)
      goto LABEL_71;
    v21 = v97;
    v22 = v96;
    if (v97 == v96)
      goto LABEL_70;
    do
    {
      v24 = *--v21;
      v23 = v24;
      *v21 = 0;
      if (v24)
        MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
    }
    while (v21 != v20);
    goto LABEL_69;
  }
  return v12;
}

float mlir::mps::detail::MPSAbstractCostModel::computeCost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unint64_t v7;
  int8x16_t *AttrData;
  const unsigned __int8 *v9;
  int Key;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  float result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char **v25;
  char *v26;

  if ((v6 & 1) == 0
  {
    mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap = 0;
    *(_QWORD *)&dword_2545298A0 = 0;
    qword_2545298A8 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap, &mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, &dword_2069AB000);
  }
  v7 = atomic_load(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap);
  if (v7 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>);
  }
  v26 = *(char **)(*(_QWORD *)(a2 + 48) + 8);
  AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
  Key = llvm::StringMapImpl::FindKey(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, AttrData, v9);
  v11 = mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap;
  v12 = Key;
  if (Key == -1)
    v12 = dword_2545298A0;
  if ((v13 & 1) == 0)
  {
    v23 = mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap;
    v21 = v12;
    v12 = v21;
    v11 = v23;
    if (v22)
    {
      mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap = 0;
      *(_QWORD *)&dword_2545298A0 = 0;
      qword_2545298A8 = 0x1800000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap, &mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, &dword_2069AB000);
      v12 = v21;
      v11 = v23;
    }
  }
  v14 = v11 + 8 * v12;
  v15 = atomic_load(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap);
  if (v15 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>);
  }
  if (v14 == mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap
            + 8 * dword_2545298A0)
  {
    v20 = *(_QWORD *)(a2 + 48);
    if (*(_UNKNOWN **)(v20 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v26 = *(char **)(v20 + 8);
      mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v26);
    }
    return 0.0;
  }
  else
  {
    v16 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)v14 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    v18 = (_QWORD *)(a1 + (v17 >> 1));
    if ((v17 & 1) != 0)
      v16 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v18 + v16);
    v16(v18, a2, a3);
  }
  return result;
}

uint64_t llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v4 != (llvm *)-8 && v4 != 0)
          llvm::deallocate_buffer(v4, (void *)(*(_QWORD *)v4 + 25));
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

BOOL mlir::mps::executionCost(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ElementBitWidth;
  uint64_t *Shape;
  uint64_t v13;
  uint64_t NumElements;
  uint64_t v15;
  uint64_t DefiningOp;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t i;
  uint64_t NextResultAtOffset;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  mlir::Block *v59;
  uint64_t ParentOp;
  _BOOL8 result;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;

  v4 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v6)
    {
      v7 = v5;
      v8 = 0;
      v9 = (uint64_t *)(*(_QWORD *)(a2 + 72) + 24);
      do
      {
        v63 = *v9;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
        if (DefiningOp)
          v17 = v7;
        else
          v17 = 0;
        if (v17 != 1)
          goto LABEL_4;
        v18 = DefiningOp;
        v19 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 48) + 32))(*(_QWORD *)(v18 + 48), v19) & 1) == 0)
        {
          v20 = *(void **)(*(_QWORD *)(v18 + 48) + 16);
          v21 = v20 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
             || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id;
          v22 = v21 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id;
          v23 = v22 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id;
          v24 = v23 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id;
          v25 = v24 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id;
          v26 = v25 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id;
          v27 = v26 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id;
          v28 = v27 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id;
          v29 = v28 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id;
          if (!v29 && v20 != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
          {
LABEL_4:
            v64 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFF8));
            v65 = v10;
            ElementBitWidth = mlir::getElementBitWidth(v64);
            Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v64);
            NumElements = mlir::ShapedType::getNumElements(Shape, v13);
            if (ElementBitWidth)
              v15 = NumElements;
            else
              v15 = 0;
            v8 += v15;
          }
        }
        v9 += 4;
        --v6;
      }
      while (v6);
    }
  }
  v31 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v31);
  v33 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v33)
    v34 = a2 - 16;
  else
    v34 = 0;
  if ((_DWORD)v33)
  {
    v35 = v32;
    v36 = 0;
    for (i = 0; i != v33; ++i)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, i);
      v39 = *(_QWORD **)NextResultAtOffset;
      if (!*(_QWORD *)NextResultAtOffset)
        goto LABEL_87;
      if (*v39)
        goto LABEL_87;
      v40 = v39[2];
      v41 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
      if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v40 + 48) + 32))(*(_QWORD *)(v40 + 48), v41))goto LABEL_87;
      if ((v35 & 1) == 0)
      {
        v42 = *(void **)(*(_QWORD *)(a2 + 48) + 16);
        v43 = v42 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
           || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id;
        v44 = v43 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id;
        v45 = v44 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id;
        v46 = v45 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id;
        v47 = v46 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id;
        v48 = v47 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id;
        v49 = v48 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id;
        v50 = v49 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id;
        v51 = v50 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id;
        if (!v51 && v42 != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
        {
LABEL_87:
          v64 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
          v65 = v53;
          v54 = mlir::getElementBitWidth(v64);
          v55 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v64);
          v57 = mlir::ShapedType::getNumElements(v55, v56);
          if (v54)
            v58 = v57;
          else
            v58 = 0;
          v36 += v58;
        }
      }
    }
  }
  v64 = a3;
  do
  {
    v59 = *(mlir::Block **)(a2 + 16);
    if (!v59)
      break;
    ParentOp = mlir::Block::getParentOp(v59);
    if (!ParentOp)
      break;
    a2 = ParentOp;
  }
  while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
  result = mlir::Type::isF16((mlir::Type *)&v64);
  if (!result)
    return mlir::Type::isF32((mlir::Type *)&v64);
  return result;
}

uint64_t *mlir::mps::getMathOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t *Shape;
  uint64_t v7;
  uint64_t *OperandRange;
  _QWORD v9[2];

  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    if (*(_UNKNOWN **)(*result + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v9);
      mlir::ShapedType::getNumElements(Shape, v7);
      OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v9);
      return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
    }
  }
  return result;
}

uint64_t mlir::mps::getCopyOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *Shape;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  mlir::Block *v17;
  uint64_t ParentOp;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t OperandRange;
  uint64_t v22;

  v2 = a2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = v4;
  v20[0] = v3;
  v20[1] = v4;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v19[0] = result;
  v19[1] = v7;
  OperandRange = result;
  v22 = v7;
  if (result)
  {
    v8 = (_QWORD *)result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v9)
      {
        v10 = 8 * v9;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v3;
        v22 = v5;
        if (v3)
        {
          result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v11)
            {
              v12 = 8 * v11;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              mlir::getElementBitWidth(v3);
              Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v20);
              mlir::ShapedType::getNumElements(Shape, v14);
              mlir::getElementBitWidth(v8);
              v15 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v19);
              mlir::ShapedType::getNumElements(v15, v16);
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
              do
              {
                v17 = *(mlir::Block **)(v2 + 16);
                if (!v17)
                  break;
                ParentOp = mlir::Block::getParentOp(v17);
                if (!ParentOp)
                  break;
                v2 = ParentOp;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!(_DWORD)result)
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostAbsoluteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAbsoluteSquareOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostACoshOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostACosOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostASinhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostASinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATanhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCeilOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentBase10Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentBase2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmBase10Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmBase2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSquareOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSquareRootOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReverseSquareRootOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReciprocalOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNegativeOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSignbitOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSignOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostFloorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRintOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRoundOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCoshOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCosOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSinhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTanhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNotOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsInfiniteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsFiniteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsNaNOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostErfOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostEluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRelu6Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReluGradOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLeakyReluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGeluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSigmoidOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSwishOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftplusOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftsignOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTruncateOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseNotOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwisePopcountOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIdentityOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAddOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSubtractOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMultiplyOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostDivideOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMinimumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMaximumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostModuloOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostPowerOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATan2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostFloorDivideOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNandOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostXnorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostXorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseXorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseLeftShiftOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseRightShiftOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNotEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGreaterThanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGreaterThanOrEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLessThanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLessThanOrEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSelectOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostClampOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftplusParametricOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostConjugateOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMatMulOp(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t Input;
  uint64_t Filter;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Shape;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ParentOp;
  float v38;
  float v39;
  float v40;
  mlir::Block *v41;
  uint64_t *OperandRange;
  _QWORD v43[2];
  _QWORD v44[2];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v45 = a2;
  mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v45);
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v45);
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v45);
  v6 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v8 = v7;
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v11 = v10;
  v44[0] = v9;
  v44[1] = v10;
  v12 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v45);
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v43[0] = result;
  v43[1] = v14;
  v46 = v6;
  v47 = v8;
  if (!v6)
    return result;
  v15 = result;
  v16 = v14;
  result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
  if (!(_DWORD)result)
    return result;
  result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (!v17)
  {
LABEL_7:
    v46 = v9;
    v47 = v11;
    if (!v9)
      return result;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
    if (!(_DWORD)result)
      return result;
    result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
    if (v19)
    {
      v20 = 8 * v19;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v20 -= 8;
        if (!v20)
          goto LABEL_13;
      }
      return result;
    }
LABEL_13:
    v46 = v15;
    v47 = v16;
    if (!v15)
      return result;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
    if (!(_DWORD)result)
      return result;
    result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
    if (v21)
    {
      v22 = 8 * v21;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v22 -= 8;
        if (!v22)
          goto LABEL_19;
      }
      return result;
    }
LABEL_19:
    mlir::ShapedType::getShape((mlir::ShapedType *)v44);
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v43);
    v25 = v24 - 2;
    if (v24 < 2)
    {
      v28 = 1;
      v26 = 1;
      goto LABEL_31;
    }
    v26 = *(_QWORD *)(Shape + 8 * v25);
    if (v24 == 2)
    {
      v28 = 1;
      goto LABEL_31;
    }
    if (v24 == 3)
    {
      v27 = 0;
      v28 = 1;
    }
    else
    {
      v27 = v25 & 0xFFFFFFFFFFFFFFFELL;
      v29 = (_QWORD *)(Shape + 8);
      v30 = 1;
      v31 = v25 & 0xFFFFFFFFFFFFFFFELL;
      v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      v28 = v32 * v30;
      if (v25 == v27)
      {
LABEL_31:
        v36 = *(_QWORD *)(Shape + 8 * v24 - 8);
        ParentOp = v45;
        v38 = (float)v28;
        v39 = (float)v26;
        v40 = (float)v36;
        while (1)
        {
          v41 = *(mlir::Block **)(ParentOp + 16);
          if (!v41)
            break;
          ParentOp = mlir::Block::getParentOp(v41);
          if (!ParentOp)
            break;
          if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
            goto LABEL_37;
        }
        if (!*a3)
          goto LABEL_38;
LABEL_37:
        pow((double)(float)((float)(v40 + 2.0) * (float)((float)(v39 + 2.0) * v38)), 0.25);
LABEL_38:
        OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v43);
        return (uint64_t *)mlir::mps::executionCost((uint64_t)a3, v45, OperandRange);
      }
    }
    v33 = v24 - v27 - 2;
    v34 = (uint64_t *)(Shape + 8 * v27);
    do
    {
      v35 = *v34++;
      v28 *= v35;
      --v33;
    }
    while (v33);
    goto LABEL_31;
  }
  v18 = 8 * v17;
  while (*result != 0x8000000000000000)
  {
    ++result;
    v18 -= 8;
    if (!v18)
      goto LABEL_7;
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostGatherNDOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostGatherOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostResizeOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *Shape;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int InterpolationMode;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ParentOp;
  mlir::Block *v24;
  _QWORD *v25[2];
  _QWORD *v26[2];
  uint64_t v27;
  uint64_t OperandRange;
  _QWORD *v29;

  v27 = a2;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v27);
  v3 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v27);
  v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v6 = v5;
  v26[0] = v4;
  v26[1] = v5;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v25[0] = (_QWORD *)result;
  v25[1] = v8;
  OperandRange = result;
  v29 = v8;
  if (result)
  {
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v9)
      {
        v10 = 8 * v9;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v4;
        v29 = v6;
        if (v4)
        {
          result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v11)
            {
              v12 = 8 * v11;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
              Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(Shape, v14);
              mlir::getElementBitWidth(v25[0]);
              v15 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v15, v16);
              InterpolationMode = mlir::mps::CropResizeOp::getInterpolationMode((mlir::mps::CropResizeOp *)&v27);
              v18 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v18, v19);
              if (InterpolationMode == 1)
              {
                mlir::getElementBitWidth(v26[0]);
                v20 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
                mlir::ShapedType::getNumElements(v20, v21);
              }
              v22 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v25);
              ParentOp = v27;
              OperandRange = v22;
              do
              {
                v24 = *(mlir::Block **)(ParentOp + 16);
                if (!v24)
                  break;
                ParentOp = mlir::Block::getParentOp(v24);
                if (!ParentOp)
                  break;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!(_DWORD)result)
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::getUnaryOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *Shape;
  uint64_t v24;
  uint64_t *OperandRange;
  _QWORD v26[2];
  uint64_t *v27;
  uint64_t v28;

  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v4 = 0;
  if (!v4)
    goto LABEL_13;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_13:
    v14 = 0;
  v26[0] = v4;
  v26[1] = v14;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v27 = v4;
  v28 = v14;
  if (v4)
  {
    v17 = result;
    v18 = v16;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
      if (v19)
      {
        v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        v27 = v17;
        v28 = v18;
        if (v17)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
            if (v21)
            {
              v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22)
                  goto LABEL_26;
              }
            }
            else
            {
LABEL_26:
              Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
              mlir::ShapedType::getNumElements(Shape, v24);
              OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostStridedSliceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLSTMOp(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t Input;
  uint64_t Mask;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Shape;
  uint64_t v11;
  uint64_t v12;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v15;
  uint64_t v16;
  mlir::Block *v17;
  uint64_t v18;
  mlir::Block *v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[2];

  v21 = a2;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v21);
  Mask = mlir::mps::LSTMOp::getMask((mlir::mps::LSTMOp *)&v21);
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v20[0] = result;
  v20[1] = v7;
  v22[0] = result;
  v22[1] = v7;
  if (result)
  {
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v22);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
      if (v8)
      {
        v9 = 8 * v8;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v9 -= 8;
          if (!v9)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v20);
        v11 = *(_QWORD *)(Shape + 8);
        v12 = *(_QWORD *)(Shape + 16) / 4;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20);
        v22[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20);
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v22);
        if (Mask)
        {
          ParentOp = v21;
          v22[0] = OperandRange;
          do
          {
            v15 = *(mlir::Block **)(ParentOp + 16);
            if (!v15)
              break;
            ParentOp = mlir::Block::getParentOp(v15);
            if (!ParentOp)
              break;
          }
          while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
          if (!mlir::Type::isF16((mlir::Type *)v22))
            mlir::Type::isF32((mlir::Type *)v22);
        }
        mlir::mps::LSTMOp::getTraining((mlir::mps::LSTMOp *)&v21);
        v16 = v21;
        while (1)
        {
          v17 = *(mlir::Block **)(v16 + 16);
          if (!v17)
            break;
          v16 = mlir::Block::getParentOp(v17);
          if (!v16)
            break;
          if (*(_UNKNOWN **)(*(_QWORD *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
            goto LABEL_24;
        }
        if (!*a3)
          goto LABEL_25;
LABEL_24:
        pow((double)(float)((float)((float)((float)(4 * v12) + 2.0) * (float)v11) * 3.0), 0.25);
LABEL_25:
        v18 = v21;
        v22[0] = OperandRange;
        do
        {
          v19 = *(mlir::Block **)(v18 + 16);
          if (!v19)
            break;
          v18 = mlir::Block::getParentOp(v19);
          if (!v18)
            break;
        }
        while (*(_UNKNOWN **)(*(_QWORD *)(v18 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
        result = (uint64_t *)mlir::Type::isF16((mlir::Type *)v22);
        if (!(_DWORD)result)
          return (uint64_t *)mlir::Type::isF32((mlir::Type *)v22);
      }
    }
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostConcatOp(uint64_t a1, uint64_t a2)
{
  uint64_t Values;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ElementBitWidth;
  uint64_t *Shape;
  uint64_t v20;
  uint64_t NumElements;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v29;
  _QWORD *v30[2];
  _QWORD v31[2];
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v32 = a2;
  Values = mlir::mps::ConcatOp::getValues((mlir::mps::ConcatOp *)&v32);
  mlir::ValueRange::ValueRange(&v37, Values, v3);
  v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v32);
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v31[0] = result;
  v31[1] = v6;
  v33 = (uint64_t *)result;
  v34 = v6;
  if (result)
  {
    v7 = (_QWORD *)result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33);
    if ((_DWORD)result)
    {
      result = mlir::ShapedType::getShape((mlir::ShapedType *)&v33);
      if (v8)
      {
        v9 = 8 * v8;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v9 -= 8;
          if (!v9)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v10 = v37;
        v11 = v38;
        v35 = v37;
        v36 = 0;
        if (v38)
        {
          v12 = 0;
          v13 = 0;
          while (1)
          {
            v14 = mlir::ValueRange::dereference_iterator(&v35, v12);
            result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8));
            v30[0] = (_QWORD *)result;
            v30[1] = v15;
            v33 = (uint64_t *)result;
            v34 = v15;
            if (!result)
              break;
            result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33);
            if (!(_DWORD)result)
              break;
            result = mlir::ShapedType::getShape((mlir::ShapedType *)&v33);
            if (v16)
            {
              v17 = 8 * v16;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v17 -= 8;
                if (!v17)
                  goto LABEL_15;
              }
              return result;
            }
LABEL_15:
            ElementBitWidth = mlir::getElementBitWidth(v30[0]);
            Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v30);
            NumElements = mlir::ShapedType::getNumElements(Shape, v20);
            if (ElementBitWidth)
              v22 = NumElements;
            else
              v22 = 0;
            v13 += v22;
            v12 = ++v36;
            if (v35 == v10 && v12 == v11)
              goto LABEL_22;
          }
        }
        else
        {
LABEL_22:
          mlir::getElementBitWidth(v7);
          v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v31);
          mlir::ShapedType::getNumElements(v23, v24);
          v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v31);
          mlir::ShapedType::getNumElements(v25, v26);
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v31);
          ParentOp = v32;
          v33 = (uint64_t *)OperandRange;
          do
          {
            v29 = *(mlir::Block **)(ParentOp + 16);
            if (!v29)
              break;
            ParentOp = mlir::Block::getParentOp(v29);
            if (!ParentOp)
              break;
          }
          while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
          result = mlir::Type::isF16((mlir::Type *)&v33);
          if (!(_DWORD)result)
            return mlir::Type::isF32((mlir::Type *)&v33);
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostDepthToSpace2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostSpaceToDepth2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostBatchToSpaceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostSpaceToBatchOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostPadOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSampleGridOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t Filter;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *Shape;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int WeightsLayout;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ParentOp;
  mlir::Block *v34;
  _QWORD v35[2];
  _QWORD *v36[2];
  _QWORD *v37[2];
  uint64_t v38;
  uint64_t OperandRange;
  _QWORD *v40;

  v38 = a2;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v38);
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v38);
  v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v38);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v7 = v6;
  v37[0] = v5;
  v37[1] = v6;
  v8 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v10 = v9;
  v36[0] = v8;
  v36[1] = v9;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v35[0] = result;
  v35[1] = v12;
  OperandRange = (uint64_t)v8;
  v40 = v10;
  if (v8)
  {
    v13 = result;
    v14 = v12;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v15)
      {
        v16 = 8 * v15;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v16 -= 8;
          if (!v16)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v5;
        v40 = v7;
        if (v5)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v17)
            {
              v18 = 8 * v17;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v18 -= 8;
                if (!v18)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              OperandRange = (uint64_t)v13;
              v40 = v14;
              if (v13)
              {
                result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
                if ((_DWORD)result)
                {
                  result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
                  if (v19)
                  {
                    v20 = 8 * v19;
                    while (*result != 0x8000000000000000)
                    {
                      ++result;
                      v20 -= 8;
                      if (!v20)
                        goto LABEL_19;
                    }
                  }
                  else
                  {
LABEL_19:
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v37);
                    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
                    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
                    mlir::ShapedType::getNumElements(Shape, v22);
                    mlir::getElementBitWidth(v36[0]);
                    v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
                    mlir::ShapedType::getNumElements(v23, v24);
                    WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v38);
                    v26 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v36);
                    mlir::ShapedType::getNumElements(v26, v27);
                    if (WeightsLayout == 1)
                    {
                      mlir::getElementBitWidth(v37[0]);
                      v28 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v37);
                      mlir::ShapedType::getNumElements(v28, v29);
                    }
                    mlir::getElementBitWidth(v13);
                    v30 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v35);
                    mlir::ShapedType::getNumElements(v30, v31);
                    v32 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
                    ParentOp = v38;
                    OperandRange = v32;
                    do
                    {
                      v34 = *(mlir::Block **)(ParentOp + 16);
                      if (!v34)
                        break;
                      ParentOp = mlir::Block::getParentOp(v34);
                      if (!ParentOp)
                        break;
                    }
                    while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
                    result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&OperandRange);
                    if (!(_DWORD)result)
                      return (uint64_t *)mlir::Type::isF32((mlir::Type *)&OperandRange);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::getReductionOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *Shape;
  uint64_t v24;
  uint64_t *OperandRange;
  _QWORD v26[2];
  uint64_t *v27;
  uint64_t v28;

  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v4 = 0;
  if (!v4)
    goto LABEL_13;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_13:
    v14 = 0;
  v26[0] = v4;
  v26[1] = v14;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v27 = v4;
  v28 = v14;
  if (v4)
  {
    v17 = result;
    v18 = v16;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
      if (v19)
      {
        v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        v27 = v17;
        v28 = v18;
        if (v17)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v27);
            if (v21)
            {
              v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22)
                  goto LABEL_26;
              }
            }
            else
            {
LABEL_26:
              Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
              mlir::ShapedType::getNumElements(Shape, v24);
              OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionArgMaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionArgMinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionLogSumExpOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMeanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionSumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionVarianceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionProdOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeSumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeProductOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeMaximumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeMinimumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSortOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftmaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNormalizationOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostInstanceNormOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *result;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *Shape;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v39;
  _QWORD *v40[2];
  _QWORD *v41[2];
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;

  v42 = a2;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v42);
  v3 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v42);
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = (_QWORD *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v4 = 0;
  if (!v4)
    goto LABEL_13;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = (_QWORD *)v8[1];
  else
LABEL_13:
    v14 = 0;
  v41[0] = v4;
  v41[1] = v14;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = result;
  v40[1] = v16;
  v43 = v4;
  v44 = v14;
  if (v4)
  {
    v17 = result;
    v18 = v16;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v43);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v43);
      if (v19)
      {
        v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        v43 = v17;
        v44 = v18;
        if (v17)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v43);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v43);
            if (v21)
            {
              v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22)
                  goto LABEL_26;
              }
            }
            else
            {
LABEL_26:
              Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(Shape, v24);
              mlir::getElementBitWidth(v4);
              v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v41);
              mlir::ShapedType::getNumElements(v25, v26);
              v27 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(v27, v28);
              mlir::getElementBitWidth(v41[0]);
              v29 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v41);
              mlir::ShapedType::getNumElements(v29, v30);
              v31 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(v31, v32);
              mlir::getElementBitWidth(v41[0]);
              v33 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v41);
              mlir::ShapedType::getNumElements(v33, v34);
              mlir::getElementBitWidth(v40[0]);
              v35 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v40);
              mlir::ShapedType::getNumElements(v35, v36);
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v41);
              ParentOp = v42;
              v43 = (_QWORD *)OperandRange;
              do
              {
                v39 = *(mlir::Block **)(ParentOp + 16);
                if (!v39)
                  break;
                ParentOp = mlir::Block::getParentOp(v39);
                if (!ParentOp)
                  break;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&v43);
              if (!(_DWORD)result)
                return (uint64_t *)mlir::Type::isF32((mlir::Type *)&v43);
            }
          }
        }
      }
    }
  }
  return result;
}

float mlir::mps::MPSCostModel::computeCostConv2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Input;
  uint64_t *v7;
  void *v8;
  void *v9;
  uint64_t Filter;
  uint64_t v11;
  _QWORD *Shape;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t *Strides;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *InputAttributeNames;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t *OperandRange;
  __int128 v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54[2];
  _BYTE v55[32];
  void *v56[2];
  _QWORD v57[6];

  v57[4] = *MEMORY[0x24BDAC8D0];
  v52 = a2;
  mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v52);
  mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v52);
  v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v52);
  *(_QWORD *)&v51 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  *((_QWORD *)&v51 + 1) = v5;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v52);
  v7 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v9 = v8;
  v50[0] = v7;
  v50[1] = v8;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v52);
  *(_QWORD *)&v49 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  *((_QWORD *)&v49 + 1) = v11;
  v56[0] = v7;
  v56[1] = v9;
  if (!v7 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56))
    return 0.0;
  Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v56);
  if (v13)
  {
    v14 = 8 * v13;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v14 -= 8;
      if (!v14)
        goto LABEL_7;
    }
    return 0.0;
  }
LABEL_7:
  *(_OWORD *)v56 = v49;
  if (!(_QWORD)v49 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56))
    return 0.0;
  v15 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v56);
  if (v16)
  {
    v17 = 8 * v16;
    while (*v15 != 0x8000000000000000)
    {
      ++v15;
      v17 -= 8;
      if (!v17)
        goto LABEL_13;
    }
    return 0.0;
  }
LABEL_13:
  *(_OWORD *)v56 = v51;
  if (!(_QWORD)v51 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56))
    return 0.0;
  v18 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v56);
  if (v19)
  {
    v20 = 8 * v19;
    while (*v18 != 0x8000000000000000)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        goto LABEL_19;
    }
    return 0.0;
  }
LABEL_19:
  mlir::ShapedType::getShape((mlir::ShapedType *)v50);
  mlir::ShapedType::getShape((mlir::ShapedType *)&v49);
  mlir::ShapedType::getShape((mlir::ShapedType *)&v51);
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  v54[0] = v55;
  v54[1] = (void *)0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v52);
  v24 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_31;
  v25 = *Strides;
  v26 = mlir::TypeID::get<mlir::ElementsAttr>();
  v27 = *(unsigned int *)(v25 + 16);
  if (!(_DWORD)v27)
    goto LABEL_31;
  v28 = *(_QWORD **)(v25 + 8);
  v29 = &v28[2 * v27];
  do
  {
    v30 = v27 >> 1;
    v31 = &v28[2 * (v27 >> 1)];
    v33 = *v31;
    v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26)
      v28 = v32;
    else
      v27 = v30;
  }
  while (v27);
  if (v28 != v29 && *v28 == v26)
    v34 = v28[1];
  else
LABEL_31:
    v34 = 0;
  mlir::getIntValues<long long>(v24, v34, (uint64_t)v56, 1);
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v52);
  v36 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_41;
  v37 = *InputAttributeNames;
  v38 = mlir::TypeID::get<mlir::ElementsAttr>();
  v39 = *(unsigned int *)(v37 + 16);
  if (!(_DWORD)v39)
    goto LABEL_41;
  v40 = *(_QWORD **)(v37 + 8);
  v41 = &v40[2 * v39];
  do
  {
    v42 = v39 >> 1;
    v43 = &v40[2 * (v39 >> 1)];
    v45 = *v43;
    v44 = v43 + 2;
    v39 += ~(v39 >> 1);
    if (v45 < v38)
      v40 = v44;
    else
      v39 = v42;
  }
  while (v39);
  if (v40 != v41 && *v40 == v38)
    v46 = v40[1];
  else
LABEL_41:
    v46 = 0;
  mlir::getIntValues<long long>(v36, v46, (uint64_t)v54, 1);
  OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
  v53 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v53);
  mlir::mps::executionCost(a3, v52, OperandRange);
  v21 = v47;
  if (v54[0] != v55)
    free(v54[0]);
  if (v56[0] != v57)
    free(v56[0]);
  return v21;
}

float mlir::mps::MPSCostModel::computeCostConv2DDataGradientOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Input;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Filter;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *Shape;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *Strides;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t *OperandRange;
  float v41;
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x24BDAC8D0];
  v45 = a2;
  mlir::mps::PadOp::getPaddingMode((mlir::mps::PadOp *)&v45);
  mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v45);
  v4 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v45);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v7 = v6;
  v44[0] = v5;
  v44[1] = v6;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v45);
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v11 = v10;
  v43[0] = v9;
  v43[1] = v10;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v45);
  v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v42[0] = v13;
  v42[1] = v14;
  v46 = v9;
  v47 = v11;
  if (!v9)
    return 0.0;
  v15 = v13;
  v16 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
    return 0.0;
  Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (v18)
  {
    v19 = 8 * v18;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v19 -= 8;
      if (!v19)
        goto LABEL_7;
    }
    return 0.0;
  }
LABEL_7:
  v46 = v15;
  v47 = v16;
  if (!v15 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
    return 0.0;
  v20 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_13;
    }
    return 0.0;
  }
LABEL_13:
  v46 = v5;
  v47 = v7;
  if (!v5 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
    return 0.0;
  v23 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v46);
  if (v24)
  {
    v25 = 8 * v24;
    while (*v23 != 0x8000000000000000)
    {
      ++v23;
      v25 -= 8;
      if (!v25)
        goto LABEL_19;
    }
    return 0.0;
  }
LABEL_19:
  v46 = v48;
  v47 = 0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v45);
  v27 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_28;
  v28 = *Strides;
  v29 = mlir::TypeID::get<mlir::ElementsAttr>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_28;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_28:
    v37 = 0;
  mlir::getIntValues<long long>(v27, v37, (uint64_t)&v46, 1);
  mlir::ShapedType::getShape((mlir::ShapedType *)v43);
  mlir::ShapedType::getShape((mlir::ShapedType *)v42);
  mlir::ShapedType::getShape((mlir::ShapedType *)v44);
  OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v44);
  mlir::mps::executionCost(a3, v45, OperandRange);
  v38 = v41;
  if (v46 != v48)
    free(v46);
  return v38;
}

float mlir::mps::MPSCostModel::computeCostDepthwiseConv3DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Input;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t Filter;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *Shape;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int ChannelAxis;
  uint64_t PositiveAxis;
  uint64_t *v36;
  unsigned int v37;
  float v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t OperandRange;
  float v56;
  float v57;
  BOOL v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t ElementBitWidth;
  uint64_t *v69;
  uint64_t v70;
  uint64_t NumElements;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ParentOp;
  float v85;
  mlir::Block *v86;
  int v87;
  int v88;
  uint64_t v89;
  float *v90;
  _BOOL4 isF32;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  float v95;
  uint64_t v96;
  float v97;
  _QWORD *v98[2];
  _QWORD *v99[2];
  _QWORD *v100[2];
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  uint64_t v108;
  _OWORD v109[2];
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  v101 = a2;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v101);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v7 = v6;
  v100[0] = v5;
  v100[1] = v6;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v101);
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v11 = v10;
  v99[0] = v9;
  v99[1] = v10;
  v12 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v101);
  v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v98[0] = v13;
  v98[1] = v14;
  v107 = v5;
  v108 = (uint64_t)v7;
  if (!v5)
    return 0.0;
  v15 = v13;
  v16 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107))
    return 0.0;
  Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
  if (v18)
  {
    v19 = 8 * v18;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v19 -= 8;
      if (!v19)
        goto LABEL_7;
    }
    return 0.0;
  }
LABEL_7:
  v107 = v9;
  v108 = (uint64_t)v11;
  if (!v9 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107))
    return 0.0;
  v20 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_13;
    }
    return 0.0;
  }
LABEL_13:
  v107 = v15;
  v108 = (uint64_t)v16;
  if (!v15 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107))
    return 0.0;
  v23 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)&v107);
  if (v24)
  {
    v25 = 8 * v24;
    while (*v23 != 0x8000000000000000)
    {
      ++v23;
      v25 -= 8;
      if (!v25)
        goto LABEL_19;
    }
    return 0.0;
  }
LABEL_19:
  mlir::ShapedType::getShape((mlir::ShapedType *)v100);
  v27 = v26;
  v28 = mlir::ShapedType::getShape((mlir::ShapedType *)v99);
  v30 = v29;
  v31 = mlir::ShapedType::getShape((mlir::ShapedType *)v98);
  v33 = v32;
  v107 = v109;
  memset(v109, 0, sizeof(v109));
  v110 = 0;
  v108 = 0x500000005;
  ChannelAxis = mlir::mps::DepthwiseConv3DOp::getChannelAxis((mlir::mps::DepthwiseConv3DOp *)&v101);
  PositiveAxis = mlir::getPositiveAxis(ChannelAxis, v33);
  v36 = (uint64_t *)v107;
  if (v33 > 4)
  {
    v37 = 0;
  }
  else
  {
    *(_QWORD *)v107 = 1;
    v36[1] = *(_QWORD *)(v31 + 8 * PositiveAxis);
    v36 = (uint64_t *)v107;
    if (v33 < 1)
      goto LABEL_32;
    v37 = 2;
  }
  v40 = 0;
  do
  {
    if (PositiveAxis != v40)
    {
      v36[v37] = *(_QWORD *)(v31 + 8 * v40);
      if (v37)
        ++v37;
      else
        v37 = 2;
    }
    ++v40;
  }
  while (v33 > v40);
  v36 = (uint64_t *)v107;
LABEL_32:
  v41 = 0;
  v42 = *v36;
  v43 = v36[2];
  v44 = v36[3];
  v45 = v36[4];
  v46 = v30 - v27 + PositiveAxis;
  v103 = &v105;
  v105 = 0u;
  v106 = 0u;
  v104 = 0x400000004;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  if (v46 <= 3 && v30 == 4)
  {
    v49 = *(_QWORD *)(v28 + 8 * v46);
    *(_QWORD *)&v105 = v49;
    v48 = *(_QWORD *)(v28 + 8 * (v46 == 0));
    *((_QWORD *)&v105 + 1) = v48;
    v50 = 8;
    if (v46 <= 1)
      v50 = 16;
    v47 = *(_QWORD *)(v28 + v50);
    *(_QWORD *)&v106 = v47;
    v60 = v46 > 2;
    v51 = 24;
    if (v60)
      v51 = 16;
    v41 = *(_QWORD *)(v28 + v51);
    *((_QWORD *)&v106 + 1) = v41;
  }
  v52 = v43 * v42 * v44 * v45 * v49;
  v53 = v47 * v48 * v41;
  v54 = v53 * v52;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v98);
  v56 = sqrtf((float)v52) + (float)(sqrtf((float)v49) * -0.75);
  v57 = 2.0 - (float)(1.0 / (float)((float)((float)(v53 - 1) * 0.15) + 1.0));
  v60 = v41 == 3 && v47 == 3 && v48 == 1 && v45 < 33;
  if (v60)
    v57 = v57 + v57;
  v61 = (float)*(int *)(a3 + 36);
  v62 = v61 * 150.0;
  v63 = (float)(v61 * 150.0) * 0.4;
  v64 = (float)((float)((float)(v56 / v61) + -60.0) / 300.0) + (float)(v57 * 0.4);
  if (v64 >= 1.0)
    v65 = 0.1;
  else
    v65 = v64 * 0.1;
  v66 = (float)((float)(v56 * v57) * 0.1) / v62;
  if (v56 < v63)
    v67 = v66;
  else
    v67 = v65;
  ElementBitWidth = mlir::getElementBitWidth(v100[0]);
  v69 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v100);
  NumElements = mlir::ShapedType::getNumElements(v69, v70);
  if (ElementBitWidth)
    v72 = NumElements;
  else
    v72 = 0;
  v73 = mlir::getElementBitWidth(v99[0]);
  v74 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v99);
  v76 = mlir::ShapedType::getNumElements(v74, v75);
  if (v73)
    v77 = v76;
  else
    v77 = 0;
  v78 = v77 + v72;
  v79 = mlir::getElementBitWidth(v98[0]);
  v80 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v98);
  v82 = mlir::ShapedType::getNumElements(v80, v81);
  if (v79)
    v83 = v82;
  else
    v83 = 0;
  ParentOp = v101;
  v85 = (float)(2 * (v78 + v83));
  v102 = OperandRange;
  while (1)
  {
    v86 = *(mlir::Block **)(ParentOp + 16);
    if (!v86)
      break;
    ParentOp = mlir::Block::getParentOp(v86);
    if (!ParentOp)
      break;
    if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
    {
      v87 = 1;
      goto LABEL_71;
    }
  }
  v87 = 0;
LABEL_71:
  if (*(_BYTE *)a3)
    v88 = 1;
  else
    v88 = v87;
  if (mlir::Type::isF16((mlir::Type *)&v102))
  {
    v89 = 8;
    if (v88)
      v89 = 24;
    v90 = (float *)(a3 + v89);
  }
  else
  {
    isF32 = mlir::Type::isF32((mlir::Type *)&v102);
    v92 = 12;
    if (v88)
      v92 = 28;
    v90 = (float *)(a3 + v92);
    v93 = 4;
    if (v88)
      v93 = 20;
    v94 = (float *)(a3 + v93);
    if (isF32)
      v90 = v94;
  }
  v95 = (float)(*v90 * 1.0e12) * 0.5;
  v96 = 16;
  if (v88)
    v96 = 32;
  v97 = (float)v54 / (float)(v67 * v95);
  if ((float)(v85 / (float)(*(float *)(a3 + v96) * 1000000000.0)) >= v97)
    v38 = v85 / (float)(*(float *)(a3 + v96) * 1000000000.0);
  else
    v38 = v97;
  if (v103 != &v105)
    free(v103);
  if (v107 != v109)
    free(v107);
  return v38;
}

uint64_t mlir::mps::MPSCostModel::computeCostPoolAvgOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(a3, a2);
}

uint64_t mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WindowSizes;
  uint64_t v15;
  uint64_t NumElements;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t Shape;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48[2];
  _QWORD v49[2];
  mlir::Operation *v50;

  v50 = a2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = v4;
  v49[0] = v3;
  v49[1] = v4;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8));
  v48[0] = (_QWORD *)result;
  v48[1] = v7;
  v44 = (uint64_t)v3;
  v45 = v5;
  if (!v3)
    return result;
  v8 = result;
  v9 = v7;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  if (!(_DWORD)result)
    return result;
  result = mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
  if (!v10)
  {
LABEL_7:
    v44 = v8;
    v45 = v9;
    if (!v8)
      return result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
    if (!(_DWORD)result)
      return result;
    result = mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
    if (v12)
    {
      v13 = 8 * v12;
      while (*(_QWORD *)result != 0x8000000000000000)
      {
        result += 8;
        v13 -= 8;
        if (!v13)
          goto LABEL_13;
      }
      return result;
    }
LABEL_13:
    mlir::Operation::getAttrDictionary(a2);
    WindowSizes = mlir::mps::PoolAvgOp::getWindowSizes((mlir::mps::PoolAvgOp *)&v50);
    v15 = WindowSizes;
    if (WindowSizes && !mlir::DenseIntElementsAttr::classof(WindowSizes))
      v15 = 0;
    v47 = v15;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v44, v15, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v47);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v41, v15, NumElements);
    v17 = 1;
    while (1)
    {
      v19 = v44 == v41 && v45 == v42;
      if (v19 && v46 == v43)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v44, (llvm::APInt *)&v39);
      if (v40 > 0x40)
      {
        v18 = *v39;
        MEMORY[0x20BD002D4]();
      }
      else
      {
        v18 = (uint64_t)((_QWORD)v39 << -(uint64_t)v40) >> -(uint64_t)v40;
      }
      v17 *= v18;
      ++v46;
    }
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    v22 = v21;
    mlir::getElementBitWidth(v3);
    v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v49);
    mlir::ShapedType::getNumElements(v23, v24);
    mlir::getElementBitWidth(v48[0]);
    v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    mlir::ShapedType::getNumElements(v25, v26);
    v27 = v22 != 0;
    if (v22)
    {
      v28 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v28)
      {
        v29 = v28 + 1;
        v30 = (v28 + 1) & 0x3FFFFFFFFFFFFFFELL;
        v31 = (uint64_t *)(Shape + 8 * v30);
        v32 = (_QWORD *)(Shape + 8);
        v33 = 1;
        v34 = v30;
        do
        {
          v27 *= *(v32 - 1);
          v33 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v27 *= v33;
        if (v29 == v30)
          goto LABEL_36;
      }
      else
      {
        v31 = (uint64_t *)Shape;
      }
      do
      {
        v35 = *v31++;
        v27 *= v35;
      }
      while (v31 != (uint64_t *)(Shape + 8 * v22));
    }
LABEL_36:
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v48);
    ParentOp = (uint64_t)v50;
    v44 = OperandRange;
    do
    {
      v38 = *(mlir::Block **)(ParentOp + 16);
      if (!v38)
        break;
      ParentOp = mlir::Block::getParentOp(v38);
      if (!ParentOp)
        break;
    }
    while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
    result = mlir::Type::isF16((mlir::Type *)&v44);
    if (!(_DWORD)result)
      return mlir::Type::isF32((mlir::Type *)&v44);
    return result;
  }
  v11 = 8 * v10;
  while (*(_QWORD *)result != 0x8000000000000000)
  {
    result += 8;
    v11 -= 8;
    if (!v11)
      goto LABEL_7;
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostPoolL2NormOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostPoolMaxOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolMaxOp>(a3, a2);
}

uint64_t mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolMaxOp>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WindowSizes;
  uint64_t v15;
  uint64_t NumElements;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t Shape;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48[2];
  _QWORD v49[2];
  mlir::Operation *v50;

  v50 = a2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = v4;
  v49[0] = v3;
  v49[1] = v4;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8));
  v48[0] = (_QWORD *)result;
  v48[1] = v7;
  v44 = (uint64_t)v3;
  v45 = v5;
  if (!v3)
    return result;
  v8 = result;
  v9 = v7;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  if (!(_DWORD)result)
    return result;
  result = mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
  if (!v10)
  {
LABEL_7:
    v44 = v8;
    v45 = v9;
    if (!v8)
      return result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
    if (!(_DWORD)result)
      return result;
    result = mlir::ShapedType::getShape((mlir::ShapedType *)&v44);
    if (v12)
    {
      v13 = 8 * v12;
      while (*(_QWORD *)result != 0x8000000000000000)
      {
        result += 8;
        v13 -= 8;
        if (!v13)
          goto LABEL_13;
      }
      return result;
    }
LABEL_13:
    mlir::Operation::getAttrDictionary(a2);
    WindowSizes = mlir::mps::PoolMaxOp::getWindowSizes((mlir::mps::PoolMaxOp *)&v50);
    v15 = WindowSizes;
    if (WindowSizes && !mlir::DenseIntElementsAttr::classof(WindowSizes))
      v15 = 0;
    v47 = v15;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v44, v15, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v47);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v41, v15, NumElements);
    v17 = 1;
    while (1)
    {
      v19 = v44 == v41 && v45 == v42;
      if (v19 && v46 == v43)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v44, (llvm::APInt *)&v39);
      if (v40 > 0x40)
      {
        v18 = *v39;
        MEMORY[0x20BD002D4]();
      }
      else
      {
        v18 = (uint64_t)((_QWORD)v39 << -(uint64_t)v40) >> -(uint64_t)v40;
      }
      v17 *= v18;
      ++v46;
    }
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    v22 = v21;
    mlir::getElementBitWidth(v3);
    v23 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v49);
    mlir::ShapedType::getNumElements(v23, v24);
    mlir::getElementBitWidth(v48[0]);
    v25 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
    mlir::ShapedType::getNumElements(v25, v26);
    v27 = v22 != 0;
    if (v22)
    {
      v28 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v28)
      {
        v29 = v28 + 1;
        v30 = (v28 + 1) & 0x3FFFFFFFFFFFFFFELL;
        v31 = (uint64_t *)(Shape + 8 * v30);
        v32 = (_QWORD *)(Shape + 8);
        v33 = 1;
        v34 = v30;
        do
        {
          v27 *= *(v32 - 1);
          v33 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v27 *= v33;
        if (v29 == v30)
          goto LABEL_36;
      }
      else
      {
        v31 = (uint64_t *)Shape;
      }
      do
      {
        v35 = *v31++;
        v27 *= v35;
      }
      while (v31 != (uint64_t *)(Shape + 8 * v22));
    }
LABEL_36:
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v48);
    ParentOp = (uint64_t)v50;
    v44 = OperandRange;
    do
    {
      v38 = *(mlir::Block **)(ParentOp + 16);
      if (!v38)
        break;
      ParentOp = mlir::Block::getParentOp(v38);
      if (!ParentOp)
        break;
    }
    while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
    result = mlir::Type::isF16((mlir::Type *)&v44);
    if (!(_DWORD)result)
      return mlir::Type::isF32((mlir::Type *)&v44);
    return result;
  }
  v11 = 8 * v10;
  while (*(_QWORD *)result != 0x8000000000000000)
  {
    result += 8;
    v11 -= 8;
    if (!v11)
      goto LABEL_7;
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostBiasAddOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCropResizeOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *Shape;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int InterpolationMode;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ParentOp;
  mlir::Block *v24;
  _QWORD *v25[2];
  _QWORD *v26[2];
  uint64_t v27;
  uint64_t OperandRange;
  _QWORD *v29;

  v27 = a2;
  Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v27);
  v3 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v27);
  v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v6 = v5;
  v26[0] = v4;
  v26[1] = v5;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v25[0] = (_QWORD *)result;
  v25[1] = v8;
  OperandRange = result;
  v29 = v8;
  if (result)
  {
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
      if (v9)
      {
        v10 = 8 * v9;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v4;
        v29 = v6;
        if (v4)
        {
          result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = mlir::ShapedType::getShape((mlir::ShapedType *)&OperandRange);
            if (v11)
            {
              v12 = 8 * v11;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
              Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(Shape, v14);
              mlir::getElementBitWidth(v25[0]);
              v15 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v15, v16);
              InterpolationMode = mlir::mps::CropResizeOp::getInterpolationMode((mlir::mps::CropResizeOp *)&v27);
              v18 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v25);
              mlir::ShapedType::getNumElements(v18, v19);
              if (InterpolationMode == 1)
              {
                mlir::getElementBitWidth(v26[0]);
                v20 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v26);
                mlir::ShapedType::getNumElements(v20, v21);
              }
              v22 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v25);
              ParentOp = v27;
              OperandRange = v22;
              do
              {
                v24 = *(mlir::Block **)(ParentOp + 16);
                if (!v24)
                  break;
                ParentOp = mlir::Block::getParentOp(v24);
                if (!ParentOp)
                  break;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!(_DWORD)result)
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

void mlir::mps::MPSCostModel::~MPSCostModel(mlir::mps::MPSCostModel *this)
{
  JUMPOUT(0x20BD002F8);
}

float mlir::mps::detail::MPSCostModelWithDefault::defaultComputeCost()
{
  return 0.0;
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostAssignVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBandPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBiasAddGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBroadcastGradientArgsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBroadcastToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCallOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostColToImOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConstantOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCostVolumeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCreateComplexOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCreateTextureTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCropOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDegammaOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDequantizeLUTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDequantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDimensionSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDiracOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDynamicShapeCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostExpandDimsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostFastFourierTransformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostFlatten2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGRUGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGRUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGatherAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGetCoordOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostHammingDistanceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostHermiteanToRealFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostImToColOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostImaginaryPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostInitRandomPhiloxStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLPNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLSTMGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionWeightGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMaterializeSparseTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixDecompositionLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixInverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixSolverLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNonMaximumSuppressionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNonZeroOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostOneHotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPadGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPermuteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPlaceholderOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolAvgGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolL2NormGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolMaxGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPruningGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPruningOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostQuantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomTruncatedNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomUniformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRankOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReadVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRealPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRealToHermiteanFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReinterpretCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReshapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostResizeGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSampleGridDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostShapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidGradientWithSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidHardOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSingleGateRNNGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSingleGateRNNOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSplitOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSqueezeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStencilOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStridedSliceGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStridedSliceUpdateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTileGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTileOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTopKGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTopKOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTransposeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTypeConstraintOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostUnrealizedFoldOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostUpdateRandomStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostVariableFromTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

const unsigned __int8 ***std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>()
{
  const unsigned __int8 **v0;
  const unsigned __int8 **v1;
  const unsigned __int8 **v2;
  const unsigned __int8 **v3;
  const unsigned __int8 **v4;
  const unsigned __int8 **v5;
  const unsigned __int8 **v6;
  const unsigned __int8 **v7;
  const unsigned __int8 **v8;
  const unsigned __int8 **v9;
  const unsigned __int8 **v10;
  const unsigned __int8 **v11;
  const unsigned __int8 **v12;
  const unsigned __int8 **v13;
  const unsigned __int8 **v14;
  const unsigned __int8 **v15;
  const unsigned __int8 **v16;
  const unsigned __int8 **v17;
  const unsigned __int8 **v18;
  const unsigned __int8 **v19;
  const unsigned __int8 **v20;
  const unsigned __int8 **v21;
  const unsigned __int8 **v22;
  const unsigned __int8 **v23;
  const unsigned __int8 **v24;
  const unsigned __int8 **v25;
  const unsigned __int8 **v26;
  const unsigned __int8 **v27;
  const unsigned __int8 **v28;
  const unsigned __int8 **v29;
  const unsigned __int8 **v30;
  const unsigned __int8 **v31;
  const unsigned __int8 **v32;
  const unsigned __int8 **v33;
  const unsigned __int8 **v34;
  const unsigned __int8 **v35;
  const unsigned __int8 **v36;
  const unsigned __int8 **v37;
  const unsigned __int8 **v38;
  const unsigned __int8 **v39;
  const unsigned __int8 **v40;
  const unsigned __int8 **v41;
  const unsigned __int8 **v42;
  const unsigned __int8 **v43;
  const unsigned __int8 **v44;
  const unsigned __int8 **v45;
  const unsigned __int8 **v46;
  const unsigned __int8 **v47;
  const unsigned __int8 **v48;
  const unsigned __int8 **v49;
  const unsigned __int8 **v50;
  const unsigned __int8 **v51;
  const unsigned __int8 **v52;
  const unsigned __int8 **v53;
  const unsigned __int8 **v54;
  const unsigned __int8 **v55;
  const unsigned __int8 **v56;
  const unsigned __int8 **v57;
  const unsigned __int8 **v58;
  const unsigned __int8 **v59;
  const unsigned __int8 **v60;
  const unsigned __int8 **v61;
  const unsigned __int8 **v62;
  const unsigned __int8 **v63;
  const unsigned __int8 **v64;
  const unsigned __int8 **v65;
  const unsigned __int8 **v66;
  const unsigned __int8 **v67;
  const unsigned __int8 **v68;
  const unsigned __int8 **v69;
  const unsigned __int8 **v70;
  const unsigned __int8 **v71;
  const unsigned __int8 **v72;
  const unsigned __int8 **v73;
  const unsigned __int8 **v74;
  const unsigned __int8 **v75;
  const unsigned __int8 **v76;
  const unsigned __int8 **v77;
  const unsigned __int8 **v78;
  const unsigned __int8 **v79;
  const unsigned __int8 **v80;
  const unsigned __int8 **v81;
  const unsigned __int8 **v82;
  const unsigned __int8 **v83;
  const unsigned __int8 **v84;
  const unsigned __int8 **v85;
  const unsigned __int8 **v86;
  const unsigned __int8 **v87;
  const unsigned __int8 **v88;
  const unsigned __int8 **v89;
  const unsigned __int8 **v90;
  const unsigned __int8 **v91;
  const unsigned __int8 **v92;
  const unsigned __int8 **v93;
  const unsigned __int8 **v94;
  const unsigned __int8 **v95;
  const unsigned __int8 **v96;
  const unsigned __int8 **v97;
  const unsigned __int8 **v98;
  const unsigned __int8 **v99;
  const unsigned __int8 **v100;
  const unsigned __int8 **v101;
  const unsigned __int8 **v102;
  const unsigned __int8 **v103;
  const unsigned __int8 **v104;
  const unsigned __int8 **v105;
  const unsigned __int8 **v106;
  const unsigned __int8 **v107;
  const unsigned __int8 **v108;
  const unsigned __int8 **v109;
  const unsigned __int8 **v110;
  const unsigned __int8 **v111;
  const unsigned __int8 **v112;
  const unsigned __int8 **v113;
  const unsigned __int8 **v114;
  const unsigned __int8 **v115;
  const unsigned __int8 **v116;
  const unsigned __int8 **v117;
  const unsigned __int8 **v118;
  const unsigned __int8 **v119;
  const unsigned __int8 **v120;
  const unsigned __int8 **v121;
  const unsigned __int8 **v122;
  const unsigned __int8 **v123;
  const unsigned __int8 **v124;
  const unsigned __int8 **v125;
  const unsigned __int8 **v126;
  const unsigned __int8 **v127;
  const unsigned __int8 **v128;
  const unsigned __int8 **v129;
  const unsigned __int8 **v130;
  const unsigned __int8 **v131;
  const unsigned __int8 **v132;
  const unsigned __int8 **v133;
  const unsigned __int8 **v134;
  const unsigned __int8 **v135;
  const unsigned __int8 **v136;
  const unsigned __int8 **v137;
  const unsigned __int8 **v138;
  const unsigned __int8 **v139;
  const unsigned __int8 **v140;
  const unsigned __int8 **v141;
  const unsigned __int8 **v142;
  const unsigned __int8 **v143;
  const unsigned __int8 **v144;
  const unsigned __int8 **v145;
  const unsigned __int8 **v146;
  const unsigned __int8 **v147;
  const unsigned __int8 **v148;
  const unsigned __int8 **v149;
  const unsigned __int8 **v150;
  const unsigned __int8 **v151;
  const unsigned __int8 **v152;
  const unsigned __int8 **v153;
  const unsigned __int8 **v154;
  const unsigned __int8 **v155;
  const unsigned __int8 **v156;
  const unsigned __int8 **v157;
  const unsigned __int8 **v158;
  const unsigned __int8 **v159;
  const unsigned __int8 **v160;
  const unsigned __int8 **v161;
  const unsigned __int8 **v162;
  const unsigned __int8 **v163;
  const unsigned __int8 **v164;
  const unsigned __int8 **v165;
  const unsigned __int8 **v166;
  const unsigned __int8 **v167;
  const unsigned __int8 **v168;
  const unsigned __int8 **v169;
  const unsigned __int8 **v170;
  const unsigned __int8 **v171;
  const unsigned __int8 **v172;
  const unsigned __int8 **v173;
  const unsigned __int8 **v174;
  const unsigned __int8 **v175;
  const unsigned __int8 **v176;
  const unsigned __int8 **v177;
  const unsigned __int8 **v178;
  const unsigned __int8 **v179;
  const unsigned __int8 **v180;
  const unsigned __int8 **v181;
  const unsigned __int8 **v182;
  const unsigned __int8 **v183;
  const unsigned __int8 **v184;
  const unsigned __int8 **v185;
  const unsigned __int8 **v186;
  const unsigned __int8 **v187;
  const unsigned __int8 **v188;
  const unsigned __int8 **v189;
  const unsigned __int8 **v190;
  const unsigned __int8 **v191;
  const unsigned __int8 **v192;
  const unsigned __int8 **v193;
  const unsigned __int8 **v194;
  const unsigned __int8 **v195;
  const unsigned __int8 **v196;
  const unsigned __int8 **v197;
  const unsigned __int8 **v198;
  const unsigned __int8 **v199;
  const unsigned __int8 **v200;
  const unsigned __int8 **v201;
  const unsigned __int8 **v202;
  const unsigned __int8 **v203;
  const unsigned __int8 **v204;
  const unsigned __int8 **v205;
  const unsigned __int8 **v206;
  const unsigned __int8 **v207;
  const unsigned __int8 **v208;
  const unsigned __int8 **v209;
  const unsigned __int8 **v210;
  const unsigned __int8 **v211;
  const unsigned __int8 **v212;
  const unsigned __int8 **v213;
  const unsigned __int8 **v214;
  const unsigned __int8 **v215;
  const unsigned __int8 **v216;
  const unsigned __int8 **v217;
  const unsigned __int8 **v218;
  const unsigned __int8 **v219;
  const unsigned __int8 ***result;
  const unsigned __int8 **v221;

  v0 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.acos", (const unsigned __int8 *)8);
  v0[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostACosOp;
  v0[2] = 0;
  v1 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.acosh", (const unsigned __int8 *)9);
  v1[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostACoshOp;
  v1[2] = 0;
  v2 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.asin", (const unsigned __int8 *)8);
  v2[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostASinOp;
  v2[2] = 0;
  v3 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.asinh", (const unsigned __int8 *)9);
  v3[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostASinhOp;
  v3[2] = 0;
  v4 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atan2", (const unsigned __int8 *)9);
  v4[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATan2Op;
  v4[2] = 0;
  v5 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atan", (const unsigned __int8 *)8);
  v5[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATanOp;
  v5[2] = 0;
  v6 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atanh", (const unsigned __int8 *)9);
  v6[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATanhOp;
  v6[2] = 0;
  v7 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.absolute", (const unsigned __int8 *)0xC);
  v7[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteOp;
  v7[2] = 0;
  v8 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.absolute_square", (const unsigned __int8 *)0x13);
  v8[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteSquareOp;
  v8[2] = 0;
  v9 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.add", (const unsigned __int8 *)7);
  v9[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAddOp;
  v9[2] = 0;
  v10 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.and", (const unsigned __int8 *)7);
  v10[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAndOp;
  v10[2] = 0;
  v11 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.assign_variable", (const unsigned __int8 *)0x13);
  v11[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAssignVariableOp;
  v11[2] = 0;
  v12 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.band_part", (const unsigned __int8 *)0xD);
  v12[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBandPartOp;
  v12[2] = 0;
  v13 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.batch_to_space", (const unsigned __int8 *)0x12);
  v13[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBatchToSpaceOp;
  v13[2] = 0;
  v14 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bias_add_grad", (const unsigned __int8 *)0x11);
  v14[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddGradOp;
  v14[2] = 0;
  v15 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bias_add", (const unsigned __int8 *)0xC);
  v15[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddOp;
  v15[2] = 0;
  v16 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_and", (const unsigned __int8 *)0xF);
  v16[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseAndOp;
  v16[2] = 0;
  v17 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_left_shift", (const unsigned __int8 *)0x16);
  v17[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseLeftShiftOp;
  v17[2] = 0;
  v18 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_not", (const unsigned __int8 *)0xF);
  v18[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseNotOp;
  v18[2] = 0;
  v19 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_or", (const unsigned __int8 *)0xE);
  v19[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseOrOp;
  v19[2] = 0;
  v20 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_popcount", (const unsigned __int8 *)0x14);
  v20[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwisePopcountOp;
  v20[2] = 0;
  v21 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_right_shift", (const unsigned __int8 *)0x17);
  v21[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseRightShiftOp;
  v21[2] = 0;
  v22 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_xor", (const unsigned __int8 *)0xF);
  v22[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseXorOp;
  v22[2] = 0;
  v23 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.broadcast_gradient_args", (const unsigned __int8 *)0x1B);
  v23[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastGradientArgsOp;
  v23[2] = 0;
  v24 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.broadcast_to", (const unsigned __int8 *)0x10);
  v24[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastToOp;
  v24[2] = 0;
  v25 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.call", (const unsigned __int8 *)8);
  v25[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCallOp;
  v25[2] = 0;
  v26 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cast", (const unsigned __int8 *)8);
  v26[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCastOp;
  v26[2] = 0;
  v27 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.ceil", (const unsigned __int8 *)8);
  v27[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCeilOp;
  v27[2] = 0;
  v28 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.clamp", (const unsigned __int8 *)9);
  v28[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostClampOp;
  v28[2] = 0;
  v29 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.col_to_im", (const unsigned __int8 *)0xD);
  v29[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostColToImOp;
  v29[2] = 0;
  v30 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.concat", (const unsigned __int8 *)0xA);
  v30[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConcatOp;
  v30[2] = 0;
  v31 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conjugate", (const unsigned __int8 *)0xD);
  v31[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConjugateOp;
  v31[2] = 0;
  v32 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.constant", (const unsigned __int8 *)0xC);
  v32[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConstantOp;
  v32[2] = 0;
  v33 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d_data_gradient", (const unsigned __int8 *)0x19);
  v33[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DDataGradientOp;
  v33[2] = 0;
  v34 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB);
  v34[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DOp;
  v34[2] = 0;
  v35 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d_weights_gradient", (const unsigned __int8 *)0x1C);
  v35[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DWeightsGradientOp;
  v35[2] = 0;
  v36 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d_data_gradient", (const unsigned __int8 *)0x19);
  v36[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DDataGradientOp;
  v36[2] = 0;
  v37 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d", (const unsigned __int8 *)0xB);
  v37[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DOp;
  v37[2] = 0;
  v38 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d_weights_gradient", (const unsigned __int8 *)0x1C);
  v38[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DWeightsGradientOp;
  v38[2] = 0;
  v39 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cos", (const unsigned __int8 *)7);
  v39[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCosOp;
  v39[2] = 0;
  v40 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cosh", (const unsigned __int8 *)8);
  v40[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCoshOp;
  v40[2] = 0;
  v41 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cost_volume", (const unsigned __int8 *)0xF);
  v41[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCostVolumeOp;
  v41[2] = 0;
  v42 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.create_complex", (const unsigned __int8 *)0x12);
  v42[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCreateComplexOp;
  v42[2] = 0;
  v43 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.create_texture_tensor", (const unsigned __int8 *)0x19);
  v43[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCreateTextureTensorOp;
  v43[2] = 0;
  v44 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.crop", (const unsigned __int8 *)8);
  v44[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCropOp;
  v44[2] = 0;
  v45 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.crop_resize", (const unsigned __int8 *)0xF);
  v45[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCropResizeOp;
  v45[2] = 0;
  v46 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_maximum", (const unsigned __int8 *)0x16);
  v46[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMaximumOp;
  v46[2] = 0;
  v47 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_minimum", (const unsigned __int8 *)0x16);
  v47[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMinimumOp;
  v47[2] = 0;
  v48 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_product", (const unsigned __int8 *)0x16);
  v48[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeProductOp;
  v48[2] = 0;
  v49 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_sum", (const unsigned __int8 *)0x12);
  v49[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeSumOp;
  v49[2] = 0;
  v50 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.degamma", (const unsigned __int8 *)0xB);
  v50[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDegammaOp;
  v50[2] = 0;
  v51 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depth_to_space_2d", (const unsigned __int8 *)0x15);
  v51[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthToSpace2DOp;
  v51[2] = 0;
  v52 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d_data_gradient", (const unsigned __int8 *)0x23);
  v52[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DDataGradientOp;
  v52[2] = 0;
  v53 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d", (const unsigned __int8 *)0x15);
  v53[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DOp;
  v53[2] = 0;
  v54 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d_weights_gradient", (const unsigned __int8 *)0x26);
  v54[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DWeightsGradientOp;
  v54[2] = 0;
  v55 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d_data_gradient", (const unsigned __int8 *)0x23);
  v55[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DDataGradientOp;
  v55[2] = 0;
  v56 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d", (const unsigned __int8 *)0x15);
  v56[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DOp;
  v56[2] = 0;
  v57 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d_weights_gradient", (const unsigned __int8 *)0x26);
  v57[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DWeightsGradientOp;
  v57[2] = 0;
  v58 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dequantize_lut", (const unsigned __int8 *)0x12);
  v58[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeLUTOp;
  v58[2] = 0;
  v59 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE);
  v59[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeOp;
  v59[2] = 0;
  v60 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dimension_size", (const unsigned __int8 *)0x12);
  v60[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDimensionSizeOp;
  v60[2] = 0;
  v61 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dirac", (const unsigned __int8 *)9);
  v61[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDiracOp;
  v61[2] = 0;
  v62 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.divide", (const unsigned __int8 *)0xA);
  v62[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDivideOp;
  v62[2] = 0;
  v63 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dynamic_shape_cast", (const unsigned __int8 *)0x16);
  v63[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDynamicShapeCastOp;
  v63[2] = 0;
  v64 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.elu", (const unsigned __int8 *)7);
  v64[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostEluOp;
  v64[2] = 0;
  v65 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.equal", (const unsigned __int8 *)9);
  v65[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostEqualToOp;
  v65[2] = 0;
  v66 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.erf", (const unsigned __int8 *)7);
  v66[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostErfOp;
  v66[2] = 0;
  v67 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.expand_dims", (const unsigned __int8 *)0xF);
  v67[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExpandDimsOp;
  v67[2] = 0;
  v68 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent_base_10", (const unsigned __int8 *)0x14);
  v68[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase10Op;
  v68[2] = 0;
  v69 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent_base_2", (const unsigned __int8 *)0x13);
  v69[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase2Op;
  v69[2] = 0;
  v70 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent", (const unsigned __int8 *)0xC);
  v70[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentOp;
  v70[2] = 0;
  v71 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.fast_fourier_transform", (const unsigned __int8 *)0x1A);
  v71[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFastFourierTransformOp;
  v71[2] = 0;
  v72 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.flatten_2d", (const unsigned __int8 *)0xE);
  v72[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFlatten2DOp;
  v72[2] = 0;
  v73 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.floor_divide", (const unsigned __int8 *)0x10);
  v73[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFloorDivideOp;
  v73[2] = 0;
  v74 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.floor", (const unsigned __int8 *)9);
  v74[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFloorOp;
  v74[2] = 0;
  v75 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gru_gradient", (const unsigned __int8 *)0x10);
  v75[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGRUGradientOp;
  v75[2] = 0;
  v76 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gru", (const unsigned __int8 *)7);
  v76[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGRUOp;
  v76[2] = 0;
  v77 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather_along_axis", (const unsigned __int8 *)0x15);
  v77[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherAlongAxisOp;
  v77[2] = 0;
  v78 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather_nd", (const unsigned __int8 *)0xD);
  v78[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherNDOp;
  v78[2] = 0;
  v79 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather", (const unsigned __int8 *)0xA);
  v79[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherOp;
  v79[2] = 0;
  v80 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gelu", (const unsigned __int8 *)8);
  v80[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGeluOp;
  v80[2] = 0;
  v81 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.get_coordinates", (const unsigned __int8 *)0x13);
  v81[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGetCoordOp;
  v81[2] = 0;
  v82 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.greater", (const unsigned __int8 *)0xB);
  v82[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOp;
  v82[2] = 0;
  v83 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.greater_equal", (const unsigned __int8 *)0x11);
  v83[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOrEqualToOp;
  v83[2] = 0;
  v84 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.hamming_distance", (const unsigned __int8 *)0x14);
  v84[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostHammingDistanceOp;
  v84[2] = 0;
  v85 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.hermitean_to_real_fft", (const unsigned __int8 *)0x19);
  v85[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostHermiteanToRealFFTOp;
  v85[2] = 0;
  v86 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.identity", (const unsigned __int8 *)0xC);
  v86[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIdentityOp;
  v86[2] = 0;
  v87 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.im_to_col", (const unsigned __int8 *)0xD);
  v87[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostImToColOp;
  v87[2] = 0;
  v88 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.imaginary_part", (const unsigned __int8 *)0x12);
  v88[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostImaginaryPartOp;
  v88[2] = 0;
  v89 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.init_random_philox_state", (const unsigned __int8 *)0x1C);
  v89[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostInitRandomPhiloxStateOp;
  v89[2] = 0;
  v90 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.instance_norm", (const unsigned __int8 *)0x11);
  v90[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostInstanceNormOp;
  v90[2] = 0;
  v91 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_finite", (const unsigned __int8 *)0xD);
  v91[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsFiniteOp;
  v91[2] = 0;
  v92 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_infinite", (const unsigned __int8 *)0xF);
  v92[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsInfiniteOp;
  v92[2] = 0;
  v93 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_nan", (const unsigned __int8 *)0xA);
  v93[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsNaNOp;
  v93[2] = 0;
  v94 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lp_norm", (const unsigned __int8 *)0xB);
  v94[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLPNormOp;
  v94[2] = 0;
  v95 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lstm_gradient", (const unsigned __int8 *)0x11);
  v95[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMGradientOp;
  v95[2] = 0;
  v96 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lstm", (const unsigned __int8 *)8);
  v96[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMOp;
  v96[2] = 0;
  v97 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.leaky_relu", (const unsigned __int8 *)0xE);
  v97[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLeakyReluOp;
  v97[2] = 0;
  v98 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.less", (const unsigned __int8 *)8);
  v98[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOp;
  v98[2] = 0;
  v99 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.less_equal", (const unsigned __int8 *)0xE);
  v99[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOrEqualToOp;
  v99[2] = 0;
  v100 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution_data_gradient", (const unsigned __int8 *)0x23);
  v100[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionDataGradientOp;
  v100[2] = 0;
  v101 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution", (const unsigned __int8 *)0x15);
  v101[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionOp;
  v101[2] = 0;
  v102 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution_weight_gradient", (const unsigned __int8 *)0x25);
  v102[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionWeightGradientOp;
  v102[2] = 0;
  v103 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm_base_10", (const unsigned __int8 *)0x15);
  v103[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase10Op;
  v103[2] = 0;
  v104 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm_base_2", (const unsigned __int8 *)0x14);
  v104[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase2Op;
  v104[2] = 0;
  v105 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm", (const unsigned __int8 *)0xD);
  v105[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmOp;
  v105[2] = 0;
  v106 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA);
  v106[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatMulOp;
  v106[2] = 0;
  v107 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.materialize_sparse_tensor", (const unsigned __int8 *)0x1D);
  v107[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMaterializeSparseTensorOp;
  v107[2] = 0;
  v108 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_decomposition_lu", (const unsigned __int8 *)0x1B);
  v108[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixDecompositionLUOp;
  v108[2] = 0;
  v109 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_inverse", (const unsigned __int8 *)0x12);
  v109[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixInverseOp;
  v109[2] = 0;
  v110 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_solver_lu", (const unsigned __int8 *)0x14);
  v110[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixSolverLUOp;
  v110[2] = 0;
  v111 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.maximum", (const unsigned __int8 *)0xB);
  v111[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMaximumOp;
  v111[2] = 0;
  v112 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.minimum", (const unsigned __int8 *)0xB);
  v112[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMinimumOp;
  v112[2] = 0;
  v113 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.modulo", (const unsigned __int8 *)0xA);
  v113[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostModuloOp;
  v113[2] = 0;
  v114 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.multiply", (const unsigned __int8 *)0xC);
  v114[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMultiplyOp;
  v114[2] = 0;
  v115 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.n_relu", (const unsigned __int8 *)0xA);
  v115[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNReluOp;
  v115[2] = 0;
  v116 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.nand", (const unsigned __int8 *)8);
  v116[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNandOp;
  v116[2] = 0;
  v117 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.negative", (const unsigned __int8 *)0xC);
  v117[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNegativeOp;
  v117[2] = 0;
  v118 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.non_maximum_suppression", (const unsigned __int8 *)0x1B);
  v118[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNonMaximumSuppressionOp;
  v118[2] = 0;
  v119 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.non_zero", (const unsigned __int8 *)0xC);
  v119[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNonZeroOp;
  v119[2] = 0;
  v120 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.nor", (const unsigned __int8 *)7);
  v120[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNorOp;
  v120[2] = 0;
  v121 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.normalization", (const unsigned __int8 *)0x11);
  v121[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNormalizationOp;
  v121[2] = 0;
  v122 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.not_equal", (const unsigned __int8 *)0xD);
  v122[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNotEqualToOp;
  v122[2] = 0;
  v123 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.not", (const unsigned __int8 *)7);
  v123[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNotOp;
  v123[2] = 0;
  v124 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.one_hot", (const unsigned __int8 *)0xB);
  v124[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostOneHotOp;
  v124[2] = 0;
  v125 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.or", (const unsigned __int8 *)6);
  v125[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostOrOp;
  v125[2] = 0;
  v126 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prelu", (const unsigned __int8 *)9);
  v126[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPReluOp;
  v126[2] = 0;
  v127 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pad_gradient", (const unsigned __int8 *)0x10);
  v127[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPadGradientOp;
  v127[2] = 0;
  v128 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pad", (const unsigned __int8 *)7);
  v128[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPadOp;
  v128[2] = 0;
  v129 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.permute", (const unsigned __int8 *)0xB);
  v129[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPermuteOp;
  v129[2] = 0;
  v130 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.placeholder", (const unsigned __int8 *)0xF);
  v130[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPlaceholderOp;
  v130[2] = 0;
  v131 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_average_gradient", (const unsigned __int8 *)0x1C);
  v131[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgGradientOp;
  v131[2] = 0;
  v132 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_average", (const unsigned __int8 *)0x13);
  v132[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgOp;
  v132[2] = 0;
  v133 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_l2_norm_gradient", (const unsigned __int8 *)0x1C);
  v133[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormGradientOp;
  v133[2] = 0;
  v134 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_l2_norm", (const unsigned __int8 *)0x13);
  v134[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormOp;
  v134[2] = 0;
  v135 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_max_gradient", (const unsigned __int8 *)0x18);
  v135[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxGradientOp;
  v135[2] = 0;
  v136 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_max", (const unsigned __int8 *)0xF);
  v136[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxOp;
  v136[2] = 0;
  v137 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.power", (const unsigned __int8 *)9);
  v137[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPowerOp;
  v137[2] = 0;
  v138 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prune_gradient", (const unsigned __int8 *)0x12);
  v138[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPruningGradientOp;
  v138[2] = 0;
  v139 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prune", (const unsigned __int8 *)9);
  v139[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPruningOp;
  v139[2] = 0;
  v140 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.quantize", (const unsigned __int8 *)0xC);
  v140[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostQuantizeOp;
  v140[2] = 0;
  v141 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_normal", (const unsigned __int8 *)0x11);
  v141[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomNormalOp;
  v141[2] = 0;
  v142 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_truncated_normal", (const unsigned __int8 *)0x1B);
  v142[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomTruncatedNormalOp;
  v142[2] = 0;
  v143 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_uniform", (const unsigned __int8 *)0x12);
  v143[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomUniformOp;
  v143[2] = 0;
  v144 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.rank", (const unsigned __int8 *)8);
  v144[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRankOp;
  v144[2] = 0;
  v145 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.read_variable", (const unsigned __int8 *)0x11);
  v145[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReadVariableOp;
  v145[2] = 0;
  v146 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.real_part", (const unsigned __int8 *)0xD);
  v146[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRealPartOp;
  v146[2] = 0;
  v147 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.real_to_hermitean_fft", (const unsigned __int8 *)0x19);
  v147[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRealToHermiteanFFTOp;
  v147[2] = 0;
  v148 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reciprocal", (const unsigned __int8 *)0xE);
  v148[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalOp;
  v148[2] = 0;
  v149 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_and", (const unsigned __int8 *)0x11);
  v149[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionAndOp;
  v149[2] = 0;
  v150 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_argmax", (const unsigned __int8 *)0x14);
  v150[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMaxOp;
  v150[2] = 0;
  v151 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_argmin", (const unsigned __int8 *)0x14);
  v151[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMinOp;
  v151[2] = 0;
  v152 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_logsumexp", (const unsigned __int8 *)0x17);
  v152[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionLogSumExpOp;
  v152[2] = 0;
  v153 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_max", (const unsigned __int8 *)0x11);
  v153[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMaxOp;
  v153[2] = 0;
  v154 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_mean", (const unsigned __int8 *)0x12);
  v154[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMeanOp;
  v154[2] = 0;
  v155 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_min", (const unsigned __int8 *)0x11);
  v155[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMinOp;
  v155[2] = 0;
  v156 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_or", (const unsigned __int8 *)0x10);
  v156[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionOrOp;
  v156[2] = 0;
  v157 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_prod", (const unsigned __int8 *)0x12);
  v157[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionProdOp;
  v157[2] = 0;
  v158 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_sum", (const unsigned __int8 *)0x11);
  v158[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionSumOp;
  v158[2] = 0;
  v159 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_variance", (const unsigned __int8 *)0x16);
  v159[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionVarianceOp;
  v159[2] = 0;
  v160 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14);
  v160[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReinterpretCastOp;
  v160[2] = 0;
  v161 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu6", (const unsigned __int8 *)9);
  v161[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRelu6Op;
  v161[2] = 0;
  v162 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu_grad", (const unsigned __int8 *)0xD);
  v162[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReluGradOp;
  v162[2] = 0;
  v163 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu", (const unsigned __int8 *)8);
  v163[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReluOp;
  v163[2] = 0;
  v164 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB);
  v164[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReshapeOp;
  v164[2] = 0;
  v165 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.resize_gradient", (const unsigned __int8 *)0x13);
  v165[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostResizeGradientOp;
  v165[2] = 0;
  v166 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.resize", (const unsigned __int8 *)0xA);
  v166[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostResizeOp;
  v166[2] = 0;
  v167 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reverse", (const unsigned __int8 *)0xB);
  v167[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReverseOp;
  v167[2] = 0;
  v168 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reverse_square_root", (const unsigned __int8 *)0x17);
  v168[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReverseSquareRootOp;
  v168[2] = 0;
  v169 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.rint", (const unsigned __int8 *)8);
  v169[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRintOp;
  v169[2] = 0;
  v170 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.round", (const unsigned __int8 *)9);
  v170[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRoundOp;
  v170[2] = 0;
  v171 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sample_grid_data_gradient", (const unsigned __int8 *)0x1D);
  v171[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridDataGradientOp;
  v171[2] = 0;
  v172 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sample_grid", (const unsigned __int8 *)0xF);
  v172[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridOp;
  v172[2] = 0;
  v173 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter_along_axis", (const unsigned __int8 *)0x16);
  v173[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterAlongAxisOp;
  v173[2] = 0;
  v174 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter_nd", (const unsigned __int8 *)0xE);
  v174[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterNDOp;
  v174[2] = 0;
  v175 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter", (const unsigned __int8 *)0xB);
  v175[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterOp;
  v175[2] = 0;
  v176 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.select", (const unsigned __int8 *)0xA);
  v176[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSelectOp;
  v176[2] = 0;
  v177 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.shape", (const unsigned __int8 *)9);
  v177[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostShapeOp;
  v177[2] = 0;
  v178 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_gradient", (const unsigned __int8 *)0x14);
  v178[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientOp;
  v178[2] = 0;
  v179 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_gradient_with_sigmoid", (const unsigned __int8 *)0x21);
  v179[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientWithSigmoidOp;
  v179[2] = 0;
  v180 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_hard", (const unsigned __int8 *)0x10);
  v180[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidHardOp;
  v180[2] = 0;
  v181 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid", (const unsigned __int8 *)0xB);
  v181[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidOp;
  v181[2] = 0;
  v182 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sign", (const unsigned __int8 *)8);
  v182[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSignOp;
  v182[2] = 0;
  v183 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.signbit", (const unsigned __int8 *)0xB);
  v183[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSignbitOp;
  v183[2] = 0;
  v184 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sin", (const unsigned __int8 *)7);
  v184[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSinOp;
  v184[2] = 0;
  v185 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.singlegate_rnn_gradient", (const unsigned __int8 *)0x1B);
  v185[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNGradientOp;
  v185[2] = 0;
  v186 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.singlegate_rnn", (const unsigned __int8 *)0x12);
  v186[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNOp;
  v186[2] = 0;
  v187 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sinh", (const unsigned __int8 *)8);
  v187[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSinhOp;
  v187[2] = 0;
  v188 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.size", (const unsigned __int8 *)8);
  v188[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSizeOp;
  v188[2] = 0;
  v189 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.slice", (const unsigned __int8 *)9);
  v189[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSliceOp;
  v189[2] = 0;
  v190 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softmax", (const unsigned __int8 *)0xB);
  v190[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftmaxOp;
  v190[2] = 0;
  v191 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softplus", (const unsigned __int8 *)0xC);
  v191[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusOp;
  v191[2] = 0;
  v192 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softplus_parametric", (const unsigned __int8 *)0x17);
  v192[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusParametricOp;
  v192[2] = 0;
  v193 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softsign", (const unsigned __int8 *)0xC);
  v193[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftsignOp;
  v193[2] = 0;
  v194 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sort", (const unsigned __int8 *)8);
  v194[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSortOp;
  v194[2] = 0;
  v195 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.space_to_batch", (const unsigned __int8 *)0x12);
  v195[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToBatchOp;
  v195[2] = 0;
  v196 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.space_to_depth_2d", (const unsigned __int8 *)0x15);
  v196[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToDepth2DOp;
  v196[2] = 0;
  v197 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.split", (const unsigned __int8 *)9);
  v197[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSplitOp;
  v197[2] = 0;
  v198 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.square", (const unsigned __int8 *)0xA);
  v198[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSquareOp;
  v198[2] = 0;
  v199 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.square_root", (const unsigned __int8 *)0xF);
  v199[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSquareRootOp;
  v199[2] = 0;
  v200 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB);
  v200[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSqueezeOp;
  v200[2] = 0;
  v201 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.stencil", (const unsigned __int8 *)0xB);
  v201[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStencilOp;
  v201[2] = 0;
  v202 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice_gradient", (const unsigned __int8 *)0x1A);
  v202[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceGradientOp;
  v202[2] = 0;
  v203 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11);
  v203[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceOp;
  v203[2] = 0;
  v204 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice_update", (const unsigned __int8 *)0x18);
  v204[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceUpdateOp;
  v204[2] = 0;
  v205 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.subtract", (const unsigned __int8 *)0xC);
  v205[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSubtractOp;
  v205[2] = 0;
  v206 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.swish", (const unsigned __int8 *)9);
  v206[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSwishOp;
  v206[2] = 0;
  v207 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tan", (const unsigned __int8 *)7);
  v207[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTanOp;
  v207[2] = 0;
  v208 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tanh", (const unsigned __int8 *)8);
  v208[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTanhOp;
  v208[2] = 0;
  v209 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tile_gradient", (const unsigned __int8 *)0x11);
  v209[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTileGradientOp;
  v209[2] = 0;
  v210 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tile", (const unsigned __int8 *)8);
  v210[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTileOp;
  v210[2] = 0;
  v211 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.top_k_grad", (const unsigned __int8 *)0xE);
  v211[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTopKGradientOp;
  v211[2] = 0;
  v212 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.top_k", (const unsigned __int8 *)9);
  v212[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTopKOp;
  v212[2] = 0;
  v213 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.transpose", (const unsigned __int8 *)0xD);
  v213[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTransposeOp;
  v213[2] = 0;
  v214 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.truncate", (const unsigned __int8 *)0xC);
  v214[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTruncateOp;
  v214[2] = 0;
  v215 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.type_constraint", (const unsigned __int8 *)0x13);
  v215[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTypeConstraintOp;
  v215[2] = 0;
  v216 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.unrealized_fold", (const unsigned __int8 *)0x13);
  v216[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostUnrealizedFoldOp;
  v216[2] = 0;
  v217 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.update_random_state", (const unsigned __int8 *)0x17);
  v217[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostUpdateRandomStateOp;
  v217[2] = 0;
  v218 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.variable_from_tensor", (const unsigned __int8 *)0x18);
  v218[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostVariableFromTensorOp;
  v218[2] = 0;
  v219 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.xnor", (const unsigned __int8 *)8);
  v219[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostXnorOp;
  v219[2] = 0;
  result = llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.xor", (const unsigned __int8 *)7);
  v221 = *result;
  v221[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostXorOp;
  v221[2] = 0;
  return result;
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostACosOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostACoshOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostASinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostASinhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATan2Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATanhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteSquareOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAddOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAssignVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBandPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBatchToSpaceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseLeftShiftOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseNotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwisePopcountOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseRightShiftOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseXorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastGradientArgsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCallOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCeilOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostClampOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostColToImOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConcatOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConjugateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConstantOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCosOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCoshOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCostVolumeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCreateComplexOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 360))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCreateTextureTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCropOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCropResizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMaximumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMinimumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeProductOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeSumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDegammaOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthToSpace2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 464))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 472))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 480))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeLUTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDimensionSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDiracOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDivideOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDynamicShapeCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostEluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostErfOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExpandDimsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase10Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 568))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase2Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 584))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFastFourierTransformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 592))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFlatten2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFloorDivideOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 608))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFloorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 616))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGRUGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGRUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 656))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGeluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 664))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGetCoordOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 672))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 680))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOrEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostHammingDistanceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 696))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostHermiteanToRealFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 704))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIdentityOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 712))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostImToColOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostImaginaryPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 728))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostInitRandomPhiloxStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 736))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostInstanceNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 744))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsFiniteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 752))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsInfiniteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 760))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsNaNOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 768))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLPNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 776))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 784))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 792))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLeakyReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 800))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 808))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOrEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 816))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 832))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionWeightGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase10Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase2Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatMulOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 872))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMaterializeSparseTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 880))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixDecompositionLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 888))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixInverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixSolverLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMaximumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 912))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMinimumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostModuloOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMultiplyOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNandOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNegativeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNonMaximumSuppressionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNonZeroOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNormalizationOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 992))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNotEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1000))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostOneHotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1016))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPadGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1040))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPadOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPermuteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPlaceholderOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1080))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1088))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1096))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1104))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1112))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPowerOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1120))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPruningGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1128))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPruningOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1136))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostQuantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1152))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomTruncatedNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1160))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomUniformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1168))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRankOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1176))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReadVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1184))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRealPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1192))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRealToHermiteanFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1200))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1208))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1216))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1224))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1232))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionLogSumExpOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1240))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMeanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1256))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1264))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1272))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionProdOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1280))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionSumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionVarianceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReinterpretCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRelu6Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1312))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReluGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1320))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1328))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReshapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostResizeGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1344))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostResizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReverseSquareRootOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1368))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRintOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1376))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRoundOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1392))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1400))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1408))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1416))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1424))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSelectOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostShapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1440))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1448))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientWithSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1456))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidHardOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1464))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1472))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSignOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1480))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSignbitOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1496))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1504))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1512))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSinhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1520))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1528))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1536))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftmaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1544))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1552))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusParametricOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1560))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftsignOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1568))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSortOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1576))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToBatchOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1584))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToDepth2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSplitOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1600))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSquareOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1608))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSquareRootOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1616))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSqueezeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1624))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStencilOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1632))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1648))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceUpdateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1656))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSubtractOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1664))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSwishOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1680))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTanhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1688))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTileGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1696))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTileOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1704))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTopKGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1712))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTopKOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1720))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTransposeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1728))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTruncateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1736))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTypeConstraintOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1744))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostUnrealizedFoldOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1752))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostUpdateRandomStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1760))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostVariableFromTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1768))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostXnorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1776))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostXorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1784))(a1);
}

const unsigned __int8 ***llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  const unsigned __int8 ***i;
  const unsigned __int8 **v8;
  const unsigned __int8 **v9;
  _QWORD *buffer;
  const unsigned __int8 **v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (const unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (const unsigned __int8 **)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (const unsigned __int8 **)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 25), (std::align_val_t)8uLL);
  v11 = (const unsigned __int8 **)buffer;
  v12 = (char *)(buffer + 3);
  if (a3)
    memcpy(buffer + 3, a2, (size_t)a3);
  a3[(_QWORD)v12] = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (const unsigned __int8 ***)(*(_QWORD *)a1
                                      + 8
                                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

unint64_t mlir::getANENextSupportedInterleaveValue(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = 4;
  if ((unint64_t)this > 4)
    v1 = 8;
  v2 = this & 0xFFFFFFFFFFFFFF00;
  if (this > 2)
    v2 = 0;
  else
    v1 = this;
  if (this <= 8)
  {
    v3 = v2;
  }
  else
  {
    v1 = 0;
    v3 = 0;
  }
  return v3 | v1;
}

uint64_t mlir::legalizeA12(mlir::SymbolRefAttr *InterfaceFor, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  mlir::SymbolRefAttr *v6;
  uint64_t isPublic;
  uint64_t v8;
  uint64_t Inputs;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *Results;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  char v30;
  llvm *v31;
  llvm *v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  void *v35;
  const char *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  __int128 *v41;
  uint64_t v43;
  ZinIrHalH13g *DefiningOp;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t Loc;
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrHalH13g **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  ZinIrHalH13g **i;
  ZinIrHalH13g *v78;
  uint64_t v79;
  mlir::Operation *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  ZinIrHalH13g *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 *v97;
  ZinIrHalH13g **v99;
  uint64_t v100;
  int v101;
  void *v102;
  ZinIrHalH13g *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _QWORD *v123;
  ZinIrHalH13g **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  mlir::MLIRContext *Context;
  uint64_t v137;
  char *v139;
  char *v142;
  ZinIrHalH13g **v143;
  uint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v150[2];
  uint64_t v151[2];
  ZinIrHalH13g *v152;
  mlir::SymbolRefAttr *v153[2];
  unint64_t v154[2];
  unint64_t v155[2];
  void *v156;
  uint64_t v157;
  _BYTE v158[32];
  void *v159;
  uint64_t v160;
  _BYTE v161[32];
  void *v162;
  uint64_t v163;
  _BYTE v164[32];
  __int128 v165;
  _QWORD v166[4];
  void *v167;
  uint64_t v168;
  _BYTE v169[96];
  char *v170;
  uint64_t v171;
  _QWORD v172[14];

  v6 = InterfaceFor;
  v172[12] = *MEMORY[0x24BDAC8D0];
  if (InterfaceFor)
    InterfaceFor = (mlir::SymbolRefAttr *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor);
  v153[0] = v6;
  v153[1] = InterfaceFor;
  isPublic = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  v8 = a4[1];
  v170 = (char *)v172;
  v171 = 0x400000000;
  v167 = v169;
  v168 = 0x400000000;
  *(_QWORD *)&v165 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v153);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v165);
  v11 = *(_QWORD *)(isPublic + 48);
  v12 = *(_QWORD *)(isPublic + 56) - v11;
  if (v10 && v12)
  {
    v13 = (_QWORD *)Inputs;
    v14 = 8 * (v12 >> 3) - 8;
    v15 = 8 * v10 - 8;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v165 = *(_QWORD *)v11;
      *((_QWORD *)&v165 + 1) = v16;
      v166[0] = *v13;
      if (v171 >= HIDWORD(v171))
      {
        if (!v15)
          break;
      }
      else
      {
        v17 = &v170[24 * v171];
        *(_OWORD *)v17 = v165;
        *((_QWORD *)v17 + 2) = v166[0];
        LODWORD(v171) = v171 + 1;
        if (!v15)
          break;
      }
      ++v13;
      v11 += 8;
      v18 = v14;
      v14 -= 8;
      v15 -= 8;
    }
    while (v18);
  }
  *(_QWORD *)&v165 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v153);
  Results = (_QWORD *)mlir::FunctionType::getResults((mlir::FunctionType *)&v165);
  v21 = v20;
  mlir::Block::getTerminator((ZinIrHalH13g **)isPublic);
  if ((*(_BYTE *)(v22 + 46) & 0x80) != 0)
  {
    if (v21)
    {
      v23 = *(unsigned int *)(v22 + 68);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v22 + 72) + 24;
        v25 = v23 - 1;
        v26 = 8 * v21 - 8;
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v165 = *(_QWORD *)v24;
          *((_QWORD *)&v165 + 1) = v27;
          v166[0] = *Results;
          if (v168 >= HIDWORD(v168))
          {
          }
          else
          {
            v28 = (char *)v167 + 24 * v168;
            *(_OWORD *)v28 = v165;
            *((_QWORD *)v28 + 2) = v166[0];
            LODWORD(v168) = v168 + 1;
          }
          v29 = v25-- != 0;
          v30 = v29;
          if (!v26)
            break;
          ++Results;
          v24 += 32;
          v26 -= 8;
        }
        while ((v30 & 1) != 0);
      }
    }
  }
  if (!(_BYTE)v31)
  {
    v34 = (llvm::raw_ostream *)llvm::errs(v31);
    v35 = (void *)*((_QWORD *)v34 + 4);
    if (*((_QWORD *)v34 + 3) - (_QWORD)v35 <= 0x1DuLL)
    {
      v36 = "checkAndCollectANEArgs failed\n";
      v37 = 30;
LABEL_32:
      llvm::raw_ostream::write(v34, v36, v37);
      v33 = 0;
      goto LABEL_152;
    }
    v33 = 0;
    qmemcpy(v35, "checkAndCollectANEArgs failed\n", 30);
    v137 = *((_QWORD *)v34 + 4) + 30;
LABEL_151:
    *((_QWORD *)v34 + 4) = v137;
    goto LABEL_152;
  }
  if (!(_BYTE)v32)
  {
    v34 = (llvm::raw_ostream *)llvm::errs(v32);
    v38 = (void *)*((_QWORD *)v34 + 4);
    if (*((_QWORD *)v34 + 3) - (_QWORD)v38 <= 0x20uLL)
    {
      v36 = "checkAndCollectANEResults failed\n";
      v37 = 33;
      goto LABEL_32;
    }
    v33 = 0;
    qmemcpy(v38, "checkAndCollectANEResults failed\n", 33);
    v137 = *((_QWORD *)v34 + 4) + 33;
    goto LABEL_151;
  }
  if (!(v171 | v168))
  {
    v33 = mlir::minimalLegalize((uint64_t)v153[0], a2, a3, (uint64_t *)a5);
    goto LABEL_152;
  }
  if ((_DWORD)v171)
  {
    v39 = 0;
    v40 = v170;
    v142 = &v170[24 * v171];
    v41 = (__int128 *)(v8 + 16);
    do
    {
      if (*((_QWORD *)v40 + 1) != *((_QWORD *)v40 + 2) && a3 != 0)
      {
        v43 = a2;
        do
        {
          v146 = *v41;
          v162 = *(void **)(*(_QWORD *)(*(_QWORD *)v43 + 72) + 32 * v39 + 24);
          *(_QWORD *)&v165 = v162;
          DefiningOp = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v165);
          if (DefiningOp)
          {
            v45 = *((_QWORD *)DefiningOp + 2);
            ZinIrHalH13g::~ZinIrHalH13g(DefiningOp);
            v47 = (uint64_t *)(v46 + 8);
          }
          else
          {
            v45 = *(_QWORD *)(v165 + 16);
            v47 = (uint64_t *)(v45 + 40);
          }
          v48 = *v47;
          *(_QWORD *)(v8 + 16) = v45;
          *(_QWORD *)(v8 + 24) = v48;
          Loc = mlir::Value::getLoc((mlir::Value *)&v162);
          v50 = v162;
          v51 = (uint64_t *)*((_QWORD *)v40 + 1);
          if (!v51)
            goto LABEL_55;
          v52 = *v51;
          v53 = mlir::TypeID::get<mlir::ShapedType>();
          v54 = *(unsigned int *)(v52 + 16);
          if (!(_DWORD)v54)
            goto LABEL_55;
          v55 = *(_QWORD **)(v52 + 8);
          v56 = &v55[2 * v54];
          do
          {
            v57 = v54 >> 1;
            v58 = &v55[2 * (v54 >> 1)];
            v60 = *v58;
            v59 = v58 + 2;
            v54 += ~(v54 >> 1);
            if (v60 < v53)
              v55 = v59;
            else
              v54 = v57;
          }
          while (v54);
          if (v55 != v56 && *v55 == v53)
            v61 = v55[1];
          else
LABEL_55:
            v61 = 0;
          (*(void (**)(_QWORD *, uint64_t, void *, uint64_t *, uint64_t, uint64_t))(*a4 + 136))(a4, Loc, v50, v51, v61, a5);
          if (v8)
          {
            if ((_QWORD)v146)
            {
              *v41 = v146;
            }
            else
            {
              *(_QWORD *)v41 = 0;
              *(_QWORD *)(v8 + 24) = 0;
            }
          }
          v43 += 8;
        }
        while (v43 != a2 + 8 * a3);
      }
      ++v39;
      v40 += 24;
    }
    while (v40 != v142);
  }
  *(_QWORD *)&v165 = v166;
  *((_QWORD *)&v165 + 1) = 0x400000000;
  v62 = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  v63 = *(_QWORD *)(v62 + 48);
  v64 = *(_QWORD *)(v62 + 56) - v63;
  if (v64)
  {
    v65 = v64 >> 3;
    v66 = DWORD2(v165);
    v67 = 8 * v65;
    do
    {
      v68 = *(_QWORD *)&v170[24 * *(unsigned int *)(*(_QWORD *)v63 + 24) + 8];
      if (v66 >= HIDWORD(v165))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, v166, v66 + 1, 8);
        v66 = DWORD2(v165);
      }
      *(_QWORD *)(v165 + 8 * v66) = v68;
      v66 = ++DWORD2(v165);
      v63 += 8;
      v67 -= 8;
    }
    while (v67);
  }
  v162 = v164;
  v163 = 0x400000000;
  v69 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  mlir::Block::getTerminator(v69);
  if ((*(_BYTE *)(v70 + 46) & 0x80) != 0)
  {
    v71 = *(unsigned int *)(v70 + 68);
    if ((_DWORD)v71)
    {
      v72 = 0;
      v73 = v163;
      v74 = 24 * v71;
      do
      {
        v75 = *(_QWORD *)((char *)v167 + v72 + 8);
        if (v73 >= HIDWORD(v163))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, v164, v73 + 1, 8);
          v73 = v163;
        }
        *((_QWORD *)v162 + v73) = v75;
        v73 = v163 + 1;
        LODWORD(v163) = v163 + 1;
        v72 += 24;
      }
      while (v74 != v72);
    }
  }
  v159 = v161;
  v160 = 0x400000000;
  v143 = (ZinIrHalH13g **)(a2 + 8 * a3);
  if (a3)
  {
    v76 = *(_QWORD *)(v8 + 16);
    v144 = v76;
    v147 = *(_QWORD *)(v8 + 24);
    for (i = (ZinIrHalH13g **)a2; i != v143; ++i)
    {
      v78 = *i;
      v79 = *((_QWORD *)*i + 2);
      ZinIrHalH13g::~ZinIrHalH13g(*i);
      *(_QWORD *)(v8 + 16) = v79;
      *(_QWORD *)(v8 + 24) = v81;
      if ((*((_BYTE *)v78 + 46) & 0x80) != 0)
      {
        v82 = *((_QWORD *)v78 + 9);
        v83 = *((unsigned int *)v78 + 17);
        v84 = v83;
        v156 = v158;
        v157 = 0x400000000;
        if (v83 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v83, 8);
          v85 = v157;
          goto LABEL_80;
        }
        if ((_DWORD)v83)
        {
          v85 = 0;
LABEL_80:
          v86 = (uint64_t *)((char *)v156 + 8 * v85);
          v87 = (uint64_t *)(v82 + 24);
          do
          {
            v88 = *v87;
            v150[0] = *v87;
            v151[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v150, v151)&& v151[0] != *(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16))
            {
              v88 = *(_QWORD *)(v151[0] + 8);
            }
            *v86++ = v88;
            v87 += 4;
            --v83;
          }
          while (v83);
          v89 = v157;
          v76 = v144;
          goto LABEL_86;
        }
        v89 = 0;
      }
      else
      {
        v84 = 0;
        v89 = 0;
        v156 = v158;
        HIDWORD(v157) = 4;
      }
LABEL_86:
      LODWORD(v157) = v89 + v84;
      v90 = *((_QWORD *)v78 + 3);
      v151[0] = mlir::SymbolRefAttr::get(v153[0], v80);
      v150[0] = mlir::placement::RegionTypeAttr::get(*(mlir::MLIRContext **)v8, 1u);
      v91 = mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)v8, v90, (uint64_t)&v162, v151, v150, (uint64_t)&v156);
      v152 = v91;
      v92 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, v161, v160 + 1, 8);
        v92 = v160;
      }
      *((_QWORD *)v159 + v92) = v91;
      LODWORD(v160) = v160 + 1;
      v93 = *((unsigned int *)v78 + 9);
      v94 = (uint64_t)v78 - 16;
      if (!(_DWORD)v93)
        v94 = 0;
      v151[0] = v94;
      v151[1] = v93;
      v150[0] = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v152);
      v150[1] = v95;
      mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(a5, v151, v150);
      if (v156 != v158)
        free(v156);
      if (v76)
      {
        *(_QWORD *)(v8 + 16) = v76;
        *(_QWORD *)(v8 + 24) = v147;
      }
      else
      {
        v147 = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
      }
    }
  }
  if ((_DWORD)v168)
  {
    v145 = 0;
    v96 = (char *)v167;
    v139 = (char *)v167 + 24 * v168;
    v97 = (__int128 *)(v8 + 16);
    do
    {
      if (*((_QWORD *)v96 + 1) != *((_QWORD *)v96 + 2) && a3 != 0)
      {
        v99 = (ZinIrHalH13g **)a2;
        do
        {
          v148 = *v97;
          if (v145 >= 6)
            v100 = (uint64_t)*v99 - 24 * (v145 - 5) - 96;
          else
            v100 = (uint64_t)*v99 + 16 * ~v145;
          v151[0] = v100;
          v156 = 0;
          v101 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156);
          v102 = 0;
          if (v101 && v156 != (void *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16)))
            v102 = (void *)*((_QWORD *)v156 + 1);
          v150[0] = (uint64_t)v102;
          v156 = v102;
          v103 = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v156);
          if (v103)
          {
            v104 = *((_QWORD *)v103 + 2);
            ZinIrHalH13g::~ZinIrHalH13g(v103);
            v106 = (uint64_t *)(v105 + 8);
          }
          else
          {
            v104 = *((_QWORD *)v156 + 2);
            v106 = (uint64_t *)(v104 + 40);
          }
          v107 = *v106;
          *(_QWORD *)(v8 + 16) = v104;
          *(_QWORD *)(v8 + 24) = v107;
          v108 = mlir::Value::getLoc((mlir::Value *)v150);
          v109 = v150[0];
          v110 = (uint64_t *)*((_QWORD *)v96 + 2);
          if (!v110)
            goto LABEL_124;
          v111 = *v110;
          v112 = mlir::TypeID::get<mlir::ShapedType>();
          v113 = *(unsigned int *)(v111 + 16);
          if (!(_DWORD)v113)
            goto LABEL_124;
          v114 = *(_QWORD **)(v111 + 8);
          v115 = &v114[2 * v113];
          do
          {
            v116 = v113 >> 1;
            v117 = &v114[2 * (v113 >> 1)];
            v119 = *v117;
            v118 = v117 + 2;
            v113 += ~(v113 >> 1);
            if (v119 < v112)
              v114 = v118;
            else
              v113 = v116;
          }
          while (v113);
          if (v114 != v115 && *v114 == v112)
            v120 = v114[1];
          else
LABEL_124:
            v120 = 0;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 136))(a4, v108, v109, v110, v120, a5);
          v121 = v150[0];
          v151[0] = v150[0];
          v156 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156)&& v156 != (void *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16)))
          {
            v121 = *((_QWORD *)v156 + 1);
          }
          v151[0] = v100;
          v156 = 0;
          v122 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156);
          v123 = v156;
          if ((v122 & 1) == 0)
          {
            v123 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a5, (uint64_t)v151, (unint64_t *)v151, v156);
            *v123 = v151[0];
            v123[1] = 0;
          }
          v123[1] = v121;
          if (v8)
          {
            if ((_QWORD)v148)
            {
              *v97 = v148;
            }
            else
            {
              *(_QWORD *)v97 = 0;
              *(_QWORD *)(v8 + 24) = 0;
            }
          }
          ++v99;
        }
        while (v99 != v143);
      }
      ++v145;
      v96 += 24;
    }
    while (v96 != v139);
  }
  v124 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  mlir::Block::getTerminator(v124);
  if ((*(_BYTE *)(v125 + 46) & 0x80) != 0)
  {
    v126 = *(unsigned int *)(v125 + 68);
    if ((_DWORD)v126 && (_DWORD)v163 != 0)
    {
      v128 = (uint64_t *)v162;
      v129 = (uint64_t *)(*(_QWORD *)(v125 + 72) + 24);
      v130 = v126 - 1;
      v131 = 8 * v163 - 8;
      do
      {
        v133 = *v129;
        v129 += 4;
        v132 = v133;
        v134 = *v128++;
        *(_QWORD *)(v132 + 8) = *(_QWORD *)(v132 + 8) & 7 | v134;
        v29 = v130-- != 0;
        if (!v29)
          break;
        v135 = v131;
        v131 -= 8;
      }
      while (v135);
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::SymbolRefAttr *)((char *)v153[0] + 24));
  mlir::ValueRange::ValueRange(v155, v165, DWORD2(v165));
  mlir::ValueRange::ValueRange(v154, (uint64_t)v162, v163);
  v33 = mlir::FunctionType::get(Context, v155[0], v155[1], v154[0], v154[1]);
  if (v159 != v161)
    free(v159);
  if (v162 != v164)
    free(v162);
  if ((_QWORD *)v165 != v166)
    free((void *)v165);
LABEL_152:
  if (v167 != v169)
    free(v167);
  if (v170 != (char *)v172)
    free(v170);
  return v33;
}

uint64_t mlir::`anonymous namespace'::checkAndCollectANEArgs(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *CanonicalMemRefType;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  const void **v23[4];
  __int16 v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD v33[20];

  v33[19] = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56) - (_QWORD)v3;
  if (!v4)
    return 1;
  v7 = 8 * (v4 >> 3);
  while (1)
  {
    v8 = *v3;
    if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v9 = (_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF8);
    else
      v9 = 0;
    v25 = v9;
    if (!v9)
    {
      v23[0] = (const void **)"Argument was not memref: ";
      v24 = 259;
      mlir::Operation::emitOpError(a1, v23, (uint64_t)&v28);
      mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v28, (uint64_t *)&v25);
      if (v28)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
      return 0;
    }
    if (v25 != CanonicalMemRefType)
      break;
LABEL_3:
    ++v3;
    v7 -= 8;
    if (!v7)
      return 1;
  }
  v11 = CanonicalMemRefType;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25);
  if (v12 == 4 || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25), v13 == 5))
  {
      return 0;
      *(_QWORD *)(*a3 + 24 * *(unsigned int *)(v8 + 24) + 8) = v11;
    goto LABEL_3;
  }
  v23[0] = (const void **)"Region input ";
  v24 = 259;
  mlir::Operation::emitOpError(a1, v23, (uint64_t)&v28);
  if (v28)
  {
    v16 = *(unsigned int *)(v8 + 24);
    v26 = 5;
    v27 = v16;
    v17 = &v26;
    v18 = v30;
    if (v31 >= v32)
    {
      v21 = v31 + 1;
      if (v30 <= (unint64_t)&v26 && v30 + 24 * v31 > (unint64_t)&v26)
      {
        v22 = (char *)&v26 - v30;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v33, v21, 24);
        v18 = v30;
        v17 = (int *)&v22[v30];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v33, v21, 24);
        v17 = &v26;
        v18 = v30;
      }
    }
    v19 = v18 + 24 * v31;
    v20 = *(_OWORD *)v17;
    *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 2);
    *(_OWORD *)v19 = v20;
    ++v31;
    if (v28)
      mlir::Diagnostic::operator<<((uint64_t)v29, " was not rank-4 or rank-5");
  }
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v28);
  if (v28)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
  return v14;
}

uint64_t mlir::`anonymous namespace'::checkAndCollectANEResults(uint64_t *a1, ZinIrHalH13g **this, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *CanonicalMemRefType;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  unint64_t v17;
  const void **v18[4];
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[24];

  v22[23] = *MEMORY[0x24BDAC8D0];
  mlir::Block::getTerminator(this);
  if ((*(_BYTE *)(v5 + 46) & 0x80) == 0)
    return 1;
  v6 = *(unsigned int *)(v5 + 68);
  if (!(_DWORD)v6)
    return 1;
  v7 = *(_QWORD *)(v5 + 72);
  v8 = 32 * v6;
  while (1)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    else
      v9 = 0;
    v20 = v9;
    if (!v9)
    {
      v18[0] = (const void **)"Result was not memref: ";
      v19 = 259;
      mlir::Operation::emitOpError(a1, v18, (uint64_t)&v21);
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v21, (uint64_t *)&v17);
      if (v21)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v21);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v22);
      return 0;
    }
    if (v20 != CanonicalMemRefType)
      break;
LABEL_4:
    v7 += 32;
    v8 -= 32;
    if (!v8)
      return 1;
  }
  v11 = CanonicalMemRefType;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20);
  if (v12 == 4 || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20), v13 == 5))
  {
      return 0;
      *(_QWORD *)(*a3 + 24 * mlir::OpOperand::getOperandNumber(v7) + 8) = v11;
    goto LABEL_4;
  }
  v16 = *(uint64_t **)(v7 + 16);
  v18[0] = (const void **)"Op output was not rank-4 or rank-5";
  v19 = 259;
  mlir::Operation::emitOpError(v16, v18, (uint64_t)&v21);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v21);
  if (v21)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v21);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v22);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  unint64_t v25[2];
  unint64_t v26[2];
  _QWORD v27[39];

  v27[38] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.region_call", (const unsigned __int8 *)0x15, Context);
  if (!v14)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"placement.region_call";
    v23[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v13);
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v15 = *a4;
  v16 = *a5;
  mlir::ValueRange::ValueRange(v25, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  mlir::placement::RegionCall::build((uint64_t)a1, (uint64_t)v27, v26[0], v26[1], v15, v16, v25[0], v25[1]);
  v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v18;
}

uint64_t mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NextResultAtOffset;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = a2[1];
  v4 = a3[1];
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = (uint64_t *)result;
    v7 = 0;
    v8 = *a2;
    v9 = *a3;
    v10 = v3 - 1;
    v11 = v4 - 1;
    do
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v7);
      v13 = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v7);
      v15 = NextResultAtOffset;
      v16 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v6, (unint64_t *)&v15, &v16);
      v14 = v16;
      if ((result & 1) == 0)
      {
        result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v6, (uint64_t)&v15, (unint64_t *)&v15, v16);
        v14 = (_QWORD *)result;
        *(_QWORD *)result = v15;
        *(_QWORD *)(result + 8) = 0;
      }
      v14[1] = v13;
      if (v10 == v7)
        break;
      v5 = v11 == v7++;
    }
    while (!v5);
  }
  return result;
}

uint64_t mlir::legalizeA12(mlir::SymbolRefAttr *InterfaceFor, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::SymbolRefAttr *v8;
  uint64_t isPublic;
  uint64_t Inputs;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *Results;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  BOOL v30;
  char v31;
  llvm *v32;
  llvm *v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm::raw_ostream *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  ZinIrHalH13g *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  ZinIrHalH13g **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  ZinIrHalH13g **v77;
  ZinIrHalH13g *v78;
  uint64_t v79;
  mlir::Operation *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  ZinIrHalH13g *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v98;
  ZinIrHalH13g **i;
  uint64_t v100;
  int v101;
  void *v102;
  ZinIrHalH13g *DefiningOp;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t Loc;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  _QWORD *v124;
  ZinIrHalH13g **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  mlir::MLIRContext *Context;
  char *v139;
  uint64_t v140;
  char *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  ZinIrHalH13g **v149;
  uint64_t v151[2];
  uint64_t v152[2];
  ZinIrHalH13g *v153;
  mlir::SymbolRefAttr *v154[2];
  unint64_t v155[2];
  unint64_t v156[2];
  void *v157;
  uint64_t v158;
  _BYTE v159[32];
  void *v160;
  uint64_t v161;
  _BYTE v162[32];
  void *v163;
  uint64_t v164;
  _BYTE v165[32];
  __int128 v166;
  _QWORD v167[4];
  void *v168;
  uint64_t v169;
  _BYTE v170[96];
  char *v171;
  uint64_t v172;
  _QWORD v173[14];

  v8 = InterfaceFor;
  v173[12] = *MEMORY[0x24BDAC8D0];
  if (InterfaceFor)
    InterfaceFor = (mlir::SymbolRefAttr *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor);
  v154[0] = v8;
  v154[1] = InterfaceFor;
  isPublic = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
  v171 = (char *)v173;
  v172 = 0x400000000;
  v168 = v170;
  v169 = 0x400000000;
  *(_QWORD *)&v166 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v154);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v166);
  v12 = *(_QWORD *)(isPublic + 48);
  v13 = *(_QWORD *)(isPublic + 56) - v12;
  if (v11 && v13)
  {
    v14 = (_QWORD *)Inputs;
    v15 = 8 * (v13 >> 3) - 8;
    v16 = 8 * v11 - 8;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v166 = *(_QWORD *)v12;
      *((_QWORD *)&v166 + 1) = v17;
      v167[0] = *v14;
      if (v172 >= HIDWORD(v172))
      {
        if (!v16)
          break;
      }
      else
      {
        v18 = &v171[24 * v172];
        *(_OWORD *)v18 = v166;
        *((_QWORD *)v18 + 2) = v167[0];
        LODWORD(v172) = v172 + 1;
        if (!v16)
          break;
      }
      ++v14;
      v12 += 8;
      v19 = v15;
      v15 -= 8;
      v16 -= 8;
    }
    while (v19);
  }
  *(_QWORD *)&v166 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v154);
  Results = (_QWORD *)mlir::FunctionType::getResults((mlir::FunctionType *)&v166);
  v22 = v21;
  mlir::Block::getTerminator((ZinIrHalH13g **)isPublic);
  if ((*(_BYTE *)(v23 + 46) & 0x80) != 0)
  {
    if (v22)
    {
      v24 = *(unsigned int *)(v23 + 68);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(v23 + 72) + 24;
        v26 = v24 - 1;
        v27 = 8 * v22 - 8;
        do
        {
          v28 = *(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v166 = *(_QWORD *)v25;
          *((_QWORD *)&v166 + 1) = v28;
          v167[0] = *Results;
          if (v169 >= HIDWORD(v169))
          {
          }
          else
          {
            v29 = (char *)v168 + 24 * v169;
            *(_OWORD *)v29 = v166;
            *((_QWORD *)v29 + 2) = v167[0];
            LODWORD(v169) = v169 + 1;
          }
          v30 = v26-- != 0;
          v31 = v30;
          if (!v27)
            break;
          ++Results;
          v25 += 32;
          v27 -= 8;
        }
        while ((v31 & 1) != 0);
      }
    }
  }
  if (!(_BYTE)v32)
  {
    v35 = (llvm::raw_ostream *)llvm::errs(v32);
    v36 = (void *)*((_QWORD *)v35 + 4);
    if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0x1DuLL)
    {
      v34 = 0;
      qmemcpy(v36, "checkAndCollectANEArgs failed\n", 30);
      *((_QWORD *)v35 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v35, "checkAndCollectANEArgs failed\n", 0x1EuLL);
      v34 = 0;
    }
    goto LABEL_141;
  }
  if (!(_BYTE)v33)
  {
    v37 = (llvm::raw_ostream *)llvm::errs(v33);
    v38 = (void *)*((_QWORD *)v37 + 4);
    if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0x20uLL)
    {
      v34 = 0;
      qmemcpy(v38, "checkAndCollectANEResults failed\n", 33);
      *((_QWORD *)v37 + 4) += 33;
    }
    else
    {
      llvm::raw_ostream::write(v37, "checkAndCollectANEResults failed\n", 0x21uLL);
      v34 = 0;
    }
    goto LABEL_141;
  }
  if (!(v172 | v169))
  {
    v34 = mlir::minimalLegalize((uint64_t)v154[0], a3, a4, (uint64_t *)a6);
    goto LABEL_141;
  }
  if (!(_DWORD)v172)
  {
LABEL_63:
    *(_QWORD *)&v166 = v167;
    *((_QWORD *)&v166 + 1) = 0x400000000;
    v62 = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
    v63 = *(_QWORD *)(v62 + 48);
    v64 = *(_QWORD *)(v62 + 56) - v63;
    if (v64)
    {
      v65 = v64 >> 3;
      v66 = DWORD2(v166);
      v67 = 8 * v65;
      do
      {
        v68 = *(_QWORD *)&v171[24 * *(unsigned int *)(*(_QWORD *)v63 + 24) + 8];
        if (v66 >= HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, v167, v66 + 1, 8);
          v66 = DWORD2(v166);
        }
        *(_QWORD *)(v166 + 8 * v66) = v68;
        v66 = ++DWORD2(v166);
        v63 += 8;
        v67 -= 8;
      }
      while (v67);
    }
    v163 = v165;
    v164 = 0x400000000;
    v69 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
    mlir::Block::getTerminator(v69);
    if ((*(_BYTE *)(v70 + 46) & 0x80) != 0)
    {
      v71 = *(unsigned int *)(v70 + 68);
      if ((_DWORD)v71)
      {
        v72 = 0;
        v73 = v164;
        v74 = 24 * v71;
        do
        {
          v75 = *(_QWORD *)((char *)v168 + v72 + 8);
          if (v73 >= HIDWORD(v164))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, v165, v73 + 1, 8);
            v73 = v164;
          }
          *((_QWORD *)v163 + v73) = v75;
          v73 = v164 + 1;
          LODWORD(v164) = v164 + 1;
          v72 += 24;
        }
        while (v74 != v72);
      }
    }
    v160 = v162;
    v161 = 0x400000000;
    v149 = (ZinIrHalH13g **)(a3 + 8 * a4);
    if (!a4)
    {
LABEL_99:
      if ((_DWORD)v169)
      {
        v147 = 0;
        v96 = (char *)v168;
        v139 = (char *)v168 + 24 * v169;
        do
        {
          if (*((_QWORD *)v96 + 1) != *((_QWORD *)v96 + 2) && a4 != 0)
          {
            v98 = *(_QWORD *)(a2 + 16);
            v140 = *(_QWORD *)(a2 + 24);
            for (i = (ZinIrHalH13g **)a3; i != v149; ++i)
            {
              if (v147 >= 6)
                v100 = (uint64_t)*i - 24 * (v147 - 5) - 96;
              else
                v100 = (uint64_t)*i + 16 * ~v147;
              v152[0] = v100;
              v157 = 0;
              v101 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157);
              v102 = 0;
              if (v101 && v157 != (void *)(*(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16)))
                v102 = (void *)*((_QWORD *)v157 + 1);
              v151[0] = (uint64_t)v102;
              v157 = v102;
              DefiningOp = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v157);
              if (DefiningOp)
              {
                v104 = *((_QWORD *)DefiningOp + 2);
                ZinIrHalH13g::~ZinIrHalH13g(DefiningOp);
                v106 = (uint64_t *)(v105 + 8);
              }
              else
              {
                v104 = *((_QWORD *)v157 + 2);
                v106 = (uint64_t *)(v104 + 40);
              }
              v107 = *v106;
              *(_QWORD *)(a2 + 16) = v104;
              *(_QWORD *)(a2 + 24) = v107;
              Loc = mlir::Value::getLoc((mlir::Value *)v151);
              v109 = v151[0];
              v110 = (uint64_t *)*((_QWORD *)v96 + 2);
              if (!v110)
                goto LABEL_127;
              v111 = *v110;
              v112 = mlir::TypeID::get<mlir::ShapedType>();
              v113 = *(unsigned int *)(v111 + 16);
              if (!(_DWORD)v113)
                goto LABEL_127;
              v114 = *(_QWORD **)(v111 + 8);
              v115 = &v114[2 * v113];
              do
              {
                v116 = v113 >> 1;
                v117 = &v114[2 * (v113 >> 1)];
                v119 = *v117;
                v118 = v117 + 2;
                v113 += ~(v113 >> 1);
                if (v119 < v112)
                  v114 = v118;
                else
                  v113 = v116;
              }
              while (v113);
              if (v114 != v115 && *v114 == v112)
                v120 = v114[1];
              else
LABEL_127:
                v120 = 0;
              v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, a2, Loc, v109, v110, v120, a6);
              if (v121)
              {
                v122 = v151[0];
                v152[0] = v151[0];
                v157 = 0;
                if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157)&& v157 != (void *)(*(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16)))
                {
                  v122 = *((_QWORD *)v157 + 1);
                }
                v152[0] = v100;
                v157 = 0;
                v123 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157);
                v124 = v157;
                if ((v123 & 1) == 0)
                {
                  v124 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)v152, (unint64_t *)v152, v157);
                  *v124 = v152[0];
                  v124[1] = 0;
                }
                v124[1] = v122;
              }
              if (v98)
              {
                *(_QWORD *)(a2 + 16) = v98;
                *(_QWORD *)(a2 + 24) = v140;
                if (!v121)
                {
LABEL_139:
                  v34 = 0;
                  goto LABEL_156;
                }
              }
              else
              {
                v140 = 0;
                *(_QWORD *)(a2 + 16) = 0;
                *(_QWORD *)(a2 + 24) = 0;
                if (!v121)
                  goto LABEL_139;
              }
            }
          }
          ++v147;
          v96 += 24;
        }
        while (v96 != v139);
      }
      v126 = (ZinIrHalH13g **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
      mlir::Block::getTerminator(v126);
      if ((*(_BYTE *)(v127 + 46) & 0x80) != 0)
      {
        v128 = *(unsigned int *)(v127 + 68);
        if ((_DWORD)v128 && (_DWORD)v164 != 0)
        {
          v130 = (uint64_t *)v163;
          v131 = (uint64_t *)(*(_QWORD *)(v127 + 72) + 24);
          v132 = v128 - 1;
          v133 = 8 * v164 - 8;
          do
          {
            v135 = *v131;
            v131 += 4;
            v134 = v135;
            v136 = *v130++;
            *(_QWORD *)(v134 + 8) = *(_QWORD *)(v134 + 8) & 7 | v136;
            v30 = v132-- != 0;
            if (!v30)
              break;
            v137 = v133;
            v133 -= 8;
          }
          while (v137);
        }
      }
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::SymbolRefAttr *)((char *)v154[0] + 24));
      mlir::ValueRange::ValueRange(v156, v166, DWORD2(v166));
      mlir::ValueRange::ValueRange(v155, (uint64_t)v163, v164);
      v34 = mlir::FunctionType::get(Context, v156[0], v156[1], v155[0], v155[1]);
LABEL_156:
      if (v160 != v162)
        free(v160);
      if (v163 != v165)
        free(v163);
      if ((_QWORD *)v166 != v167)
        free((void *)v166);
      goto LABEL_141;
    }
    v76 = *(_QWORD *)(a2 + 16);
    v143 = v76;
    v146 = *(_QWORD *)(a2 + 24);
    v77 = (ZinIrHalH13g **)a3;
    while (1)
    {
      v78 = *v77;
      v79 = *((_QWORD *)*v77 + 2);
      ZinIrHalH13g::~ZinIrHalH13g(*v77);
      *(_QWORD *)(a2 + 16) = v79;
      *(_QWORD *)(a2 + 24) = v81;
      if ((*((_BYTE *)v78 + 46) & 0x80) != 0)
      {
        v82 = *((_QWORD *)v78 + 9);
        v83 = *((unsigned int *)v78 + 17);
        v84 = v83;
        v157 = v159;
        v158 = 0x400000000;
        if (v83 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, v159, v83, 8);
          v85 = v158;
          goto LABEL_83;
        }
        if ((_DWORD)v83)
        {
          v85 = 0;
LABEL_83:
          v86 = (uint64_t *)((char *)v157 + 8 * v85);
          v87 = (uint64_t *)(v82 + 24);
          do
          {
            v88 = *v87;
            v151[0] = *v87;
            v152[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v151, v152)&& v152[0] != *(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16))
            {
              v88 = *(_QWORD *)(v152[0] + 8);
            }
            *v86++ = v88;
            v87 += 4;
            --v83;
          }
          while (v83);
          v89 = v158;
          v76 = v143;
          goto LABEL_89;
        }
        v89 = 0;
      }
      else
      {
        v84 = 0;
        v89 = 0;
        v157 = v159;
        HIDWORD(v158) = 4;
      }
LABEL_89:
      LODWORD(v158) = v89 + v84;
      v90 = *((_QWORD *)v78 + 3);
      v152[0] = mlir::SymbolRefAttr::get(v154[0], v80);
      v151[0] = mlir::placement::RegionTypeAttr::get(*(mlir::MLIRContext **)a2, 1u);
      v91 = mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)a2, v90, (uint64_t)&v163, v152, v151, (uint64_t)&v157);
      v153 = v91;
      v92 = v161;
      if (v161 >= (unint64_t)HIDWORD(v161))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160, v162, v161 + 1, 8);
        v92 = v161;
      }
      *((_QWORD *)v160 + v92) = v91;
      LODWORD(v161) = v161 + 1;
      v93 = *((unsigned int *)v78 + 9);
      v94 = (uint64_t)v78 - 16;
      if (!(_DWORD)v93)
        v94 = 0;
      v152[0] = v94;
      v152[1] = v93;
      v151[0] = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v153);
      v151[1] = v95;
      mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(a6, v152, v151);
      if (v157 != v159)
        free(v157);
      if (v76)
      {
        *(_QWORD *)(a2 + 16) = v76;
        *(_QWORD *)(a2 + 24) = v146;
      }
      else
      {
        v146 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
      }
      if (++v77 == v149)
        goto LABEL_99;
    }
  }
  v39 = 0;
  v40 = v171;
  v141 = &v171[24 * v172];
  v142 = (_QWORD *)(a2 + 16);
  while (*((_QWORD *)v40 + 1) == *((_QWORD *)v40 + 2) || a4 == 0)
  {
LABEL_34:
    ++v39;
    v40 += 24;
    if (v40 == v141)
      goto LABEL_63;
  }
  v42 = *(_QWORD *)(a2 + 16);
  v148 = *(_QWORD *)(a2 + 24);
  v43 = a3;
  while (1)
  {
    v163 = *(void **)(*(_QWORD *)(*(_QWORD *)v43 + 72) + 32 * v39 + 24);
    *(_QWORD *)&v166 = v163;
    v44 = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v166);
    if (v44)
    {
      v45 = *((_QWORD *)v44 + 2);
      ZinIrHalH13g::~ZinIrHalH13g(v44);
      v47 = (uint64_t *)(v46 + 8);
    }
    else
    {
      v45 = *(_QWORD *)(v166 + 16);
      v47 = (uint64_t *)(v45 + 40);
    }
    v48 = *v47;
    *(_QWORD *)(a2 + 16) = v45;
    *(_QWORD *)(a2 + 24) = v48;
    v49 = mlir::Value::getLoc((mlir::Value *)&v163);
    v50 = v163;
    v51 = (uint64_t *)*((_QWORD *)v40 + 1);
    if (!v51)
      goto LABEL_54;
    v52 = *v51;
    v53 = mlir::TypeID::get<mlir::ShapedType>();
    v54 = *(unsigned int *)(v52 + 16);
    if (!(_DWORD)v54)
      goto LABEL_54;
    v55 = *(_QWORD **)(v52 + 8);
    v56 = &v55[2 * v54];
    do
    {
      v57 = v54 >> 1;
      v58 = &v55[2 * (v54 >> 1)];
      v60 = *v58;
      v59 = v58 + 2;
      v54 += ~(v54 >> 1);
      if (v60 < v53)
        v55 = v59;
      else
        v54 = v57;
    }
    while (v54);
    if (v55 != v56 && *v55 == v53)
      v61 = v55[1];
    else
LABEL_54:
      v61 = 0;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, a2, v49, v50, v51, v61, a6))break;
    if (v42)
    {
      *(_QWORD *)(a2 + 16) = v42;
      *(_QWORD *)(a2 + 24) = v148;
    }
    else
    {
      v148 = 0;
      *v142 = 0;
      *(_QWORD *)(a2 + 24) = 0;
    }
    v43 += 8;
    if (v43 == a3 + 8 * a4)
      goto LABEL_34;
  }
  v34 = 0;
  if (v42)
  {
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v148;
  }
  else
  {
    *v142 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
LABEL_141:
  if (v168 != v170)
    free(v168);
  if (v171 != (char *)v173)
    free(v171);
  return v34;
}

_QWORD *mlir::`anonymous namespace'::makeCanonicalMemRefType(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  unsigned int IntOrFloatBitWidth;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t Shape;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  BOOL v30;
  mlir::MLIRContext *Context;
  unint64_t StridedLinearLayoutMap;
  uint64_t *v33;
  mlir::AffineMap *v34;
  mlir::AffineMap *v35;
  uint64_t OperandRange;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[2];
  void *v45;
  unsigned int v46;
  int v47;
  _BYTE v48[32];
  void *RHS;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x24BDAC8D0];
  v43 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
  if (!v1)
    return v43;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
  v3 = v2;
  v45 = v48;
  v47 = 4;
  if (v2 >= 5)
  {
    v46 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v2, 8);
    v4 = v45;
    v5 = 8 * v3;
LABEL_7:
    memset_pattern16(v4, &unk_207A80400, v5);
    goto LABEL_8;
  }
  if (v2)
  {
    v5 = 8 * v2;
    v4 = v48;
    goto LABEL_7;
  }
LABEL_8:
  v46 = v3;
  RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v43);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  *((_QWORD *)v45 + v46 - 1) = 0x40 / (IntOrFloatBitWidth >> 3);
  v8 = v43;
  if (!v43)
    goto LABEL_17;
  v9 = *v43;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_17;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_17:
    v18 = 0;
  v19 = (char *)v45;
  v20 = v46;
  v44[0] = v8;
  v44[1] = v18;
  RHS = v51;
  v51[0] = 1;
  v50 = 0x400000001;
  Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v44);
  LODWORD(v22) = v50;
  v24 = v23 - 1;
  if (v23 != 1)
  {
    v38 = Shape;
    v39 = &v19[8 * v20 - 8];
    do
    {
      v22 = v22;
      v41 = *(_QWORD *)v39;
      v39 -= 8;
      v40 = v41;
      if (v41)
        v42 = (v40 + *((_QWORD *)RHS + v22 - 1) * *(_QWORD *)(v38 + 8 * v24) - 1) / v40 * v40;
      else
        v42 = 0;
      if (v22 >= HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&RHS, v51, v22 + 1, 8);
        v22 = v50;
      }
      *((_QWORD *)RHS + v22) = v42;
      LODWORD(v22) = v50 + 1;
      LODWORD(v50) = v50 + 1;
      --v24;
    }
    while (v24);
  }
  v25 = RHS;
  v26 = v22;
  if ((_DWORD)v22)
  {
    v27 = (char *)RHS + 8 * v22 - 8;
    if (v27 > RHS)
    {
      v28 = (char *)RHS + 8;
      do
      {
        v29 = *((_QWORD *)v28 - 1);
        *((_QWORD *)v28 - 1) = *(_QWORD *)v27;
        *(_QWORD *)v27 = v29;
        v27 -= 8;
        v30 = v28 >= v27;
        v28 += 8;
      }
      while (!v30);
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v44);
  StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap((uint64_t)v25, v26, 0, Context);
  v33 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v44);
  v35 = v34;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v44);
  v6 = mlir::MemRefType::get(v33, v35, OperandRange, StridedLinearLayoutMap, 0);
  if (RHS != v51)
    free(RHS);
  if (v45 != v48)
    free(v45);
  return (_QWORD *)v6;
}

uint64_t mlir::`anonymous namespace'::checkStrideAndInterleave(uint64_t *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  const void **v35[4];
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE v46[152];
  char *v47;
  uint64_t v48;
  _QWORD v49[5];

  v49[4] = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v38 = a2;
  v47 = (char *)v49;
  v48 = 0x400000000;
  if (!mlir::getStridesAndOffset(a2, (uint64_t)&v47, &v37))
  {
    v3 = "Unable to get strides for type: ";
    goto LABEL_5;
  }
  if (v37)
  {
    v3 = "Invalid offset for type: ";
    goto LABEL_5;
  }
  v6 = &v47[8 * v48];
  if (v48 >= 2)
  {
    v9 = v47 + 8;
    v8 = *(_QWORD *)v47;
    v10 = 8 * v48 - 8;
    v7 = v47;
    v11 = v47 + 8;
    do
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      v12 = v13;
      if (v13 < v8)
      {
        v8 = v12;
        v7 = v9;
      }
      v9 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v7 = v47;
  }
  v15 = v48 < 3 || v7 - v47 != 8;
  v16 = v7 + 8;
  if (v7 + 8 != v6)
  {
    v17 = v7 + 8;
    while (*(_QWORD *)v7 < *v17)
    {
      if (++v17 == (_QWORD *)v6)
        goto LABEL_27;
    }
    goto LABEL_35;
  }
LABEL_27:
  if (!v15 && *(_QWORD *)v7 == 1)
  {
    v18 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    v19 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    v20 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    v21 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38);
    v4 = 1;
    if (v18 == 1 || v19 == 2 || v20 == 3 || v21 == 4 || *(_QWORD *)(Value + 8) == 8)
      goto LABEL_8;
    v3 = "Disallowed interleave size, cannot legalize argument of type: ";
LABEL_5:
    v35[0] = (const void **)v3;
    v36 = 259;
    mlir::Operation::emitOpError(a1, v35, (uint64_t)&v41);
    mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v41, &v38);
    if (v41)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
LABEL_7:
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
    v4 = 0;
    goto LABEL_8;
  }
LABEL_35:
  if (v16 != v6)
  {
    while (*(_QWORD *)v7 == *(_QWORD *)v16)
    {
      v16 += 8;
      if (v16 == v6)
        goto LABEL_38;
    }
    v35[0] = (const void **)"Smallest stride was: ";
    v36 = 259;
    mlir::Operation::emitOpError(a1, v35, (uint64_t)&v41);
    if (v41)
    {
      v39 = 2;
      v40 = (v7 - v47) >> 3;
      v23 = &v39;
      v24 = v43;
      if (v44 >= v45)
      {
        v31 = v44 + 1;
        if (v43 <= (unint64_t)&v39 && v43 + 24 * v44 > (unint64_t)&v39)
        {
          v33 = (char *)&v39 - v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
          v24 = v43;
          v23 = (int *)&v33[v43];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
          v23 = &v39;
          v24 = v43;
        }
      }
      v25 = v24 + 24 * v44;
      v26 = *(_OWORD *)v23;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v44;
      if (v41)
      {
        mlir::Diagnostic::operator<<((uint64_t)v42, " expected ");
        if (v41)
        {
          v39 = 5;
          v40 = v48 - 1;
          v27 = &v39;
          v28 = v43;
          if (v44 >= v45)
          {
            v32 = v44 + 1;
            if (v43 <= (unint64_t)&v39 && v43 + 24 * v44 > (unint64_t)&v39)
            {
              v34 = (char *)&v39 - v43;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              v28 = v43;
              v27 = (int *)&v34[v43];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              v27 = &v39;
              v28 = v43;
            }
          }
          v29 = v28 + 24 * v44;
          v30 = *(_OWORD *)v27;
          *(_QWORD *)(v29 + 16) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v29 = v30;
          ++v44;
          if (v41)
            mlir::Diagnostic::operator<<((uint64_t)v42, " for type ");
        }
      }
    }
    mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v41, &v38);
    if (v41)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
    goto LABEL_7;
  }
LABEL_38:
  v4 = 1;
LABEL_8:
  if (v47 != (char *)v49)
    free(v47);
  return v4;
}

BOOL mlir::`anonymous namespace'::isRowAligned(uint64_t *a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const std::nothrow_t *v11;
  unint64_t v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  char *v17;
  const void **v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t RHS;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = a2;
  v24 = (char *)v26;
  v25 = 0x400000000;
  if (mlir::getStridesAndOffset(a2, (uint64_t)&v24, &v20))
  {
    v3 = v24;
    v4 = v25;
    if (v25 > 1)
    {
      v7 = *(_QWORD *)v24;
      v8 = 8;
      v9 = v24;
      do
      {
        if (*(_QWORD *)&v24[v8] < v7)
        {
          v7 = *(_QWORD *)&v24[v8];
          v9 = &v24[v8];
        }
        v8 += 8;
      }
      while (8 * v25 != v8);
      v10 = 1;
      if ((_DWORD)v25 != 2)
        v10 = 2;
      if (v9 - v24 == 8)
        v5 = v10;
      else
        v5 = 1;
      if (v25 >= 0x81)
      {
        v11 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
        v12 = v25;
        while (1)
        {
          v13 = (char *)operator new(8 * v12, v11);
          if (v13)
            break;
          v14 = v12 > 1;
          v12 >>= 1;
          if (!v14)
            goto LABEL_20;
        }
        v17 = v13;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v3, &v3[8 * v4], (uint64_t)&RHS, v4, v13, v12);
        operator delete(v17);
        goto LABEL_21;
      }
    }
    else
    {
      v5 = 1;
    }
LABEL_20:
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v3, &v3[8 * v4], (uint64_t)&RHS, v4, 0, 0);
LABEL_21:
    v15 = *(_QWORD *)&v24[8 * v5];
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v21);
    v6 = ((v15 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS) >> 3)) & 0x3FLL) == 0;
    goto LABEL_22;
  }
  v18 = (const void **)"Unable to get strides for type: ";
  v19 = 259;
  mlir::Operation::emitOpError(a1, &v18, (uint64_t)&RHS);
  mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&RHS, &v21);
  if (RHS)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RHS);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v23);
  v6 = 0;
LABEL_22:
  if (v24 != (char *)v26)
    free(v24);
  return v6;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  char *v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;

  if (a4 >= 2)
  {
    v7 = a1;
    if (a4 == 2)
    {
      v8 = *((_QWORD *)a2 - 1);
      v9 = *(_QWORD *)a1;
      if (v8 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = v8;
        *((_QWORD *)a2 - 1) = v9;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v21 = a4 >> 1;
      v22 = &a1[8 * (a4 >> 1)];
      v23 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, v22, a3, v23, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v7, &v7[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, v22, a3, v23, a5);
      v25 = &a5[8 * v21];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v25).n128_u64[0];
      v26 = v7;
      v27 = v25;
      v28 = a5;
      v29 = &a5[8 * a4];
      do
      {
        if (v27 == v29)
        {
          if (v28 == v25)
            return result;
          v48 = &a5[8 * v21] - v28 - 8;
          if (v48 >= 0x38 && (unint64_t)(v26 - v28) >= 0x20)
          {
            v52 = 0;
            v53 = (v48 >> 3) + 1;
            v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
            v49 = &v7[v54];
            v50 = &v28[v54];
            v55 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = &v7[v52];
              result = *(__n128 *)&v28[v52];
              v57 = *(_OWORD *)&v28[v52 + 16];
              *(__n128 *)v56 = result;
              *((_OWORD *)v56 + 1) = v57;
              v52 += 32;
              v55 -= 4;
            }
            while (v55);
            if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v49 = v7;
            v50 = v28;
          }
          do
          {
            v51 = *(_QWORD *)v50;
            v50 += 8;
            *(_QWORD *)v49 = v51;
            v49 += 8;
          }
          while (v50 != v25);
          return result;
        }
        v30 = v27;
        v31 = *(_QWORD *)v27;
        v32 = *(_QWORD *)v28;
        v33 = *(_QWORD *)v27 < *(_QWORD *)v28;
        v34 = !v33;
        if (v33)
          v35 = *(_QWORD *)v27;
        else
          v35 = *(_QWORD *)v28;
        v28 += 8 * v34;
        v27 += 8 * v33;
        *(_QWORD *)v7 = v35;
        v7 += 8;
        v26 += 8;
      }
      while (v28 != v25);
      if (v27 != v29)
      {
        v36 = -8;
        if (v31 >= v32)
          v36 = 0;
        v37 = &a5[8 * a4] - v30 + v36 - 8;
        if (v37 < 0x78 || (unint64_t)(v26 - &v30[8 * (v31 < v32)]) < 0x20)
          goto LABEL_52;
        v38 = 0;
        v39 = (v37 >> 3) + 1;
        v33 = v31 < v32;
        v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v7[v40];
        v27 += v40;
        v42 = v33 ? 1 : 2;
        v43 = &v30[8 * (v42 & 1)];
        v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = &v7[v38];
          result = *(__n128 *)&v43[v38];
          v46 = *(_OWORD *)&v43[v38 + 16];
          *(__n128 *)v45 = result;
          *((_OWORD *)v45 + 1) = v46;
          v38 += 32;
          v44 -= 4;
        }
        while (v44);
        v7 = v41;
        if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          do
          {
            v47 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v7 = v47;
            v7 += 8;
          }
          while (v27 != v29);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 8;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a1;
        do
        {
          v16 = *(_QWORD *)v13;
          v15 = *((_QWORD *)v13 + 1);
          v13 = v11;
          if (v15 < v16)
          {
            v17 = v12;
            do
            {
              *(_QWORD *)&a1[v17 + 8] = v16;
              if (!v17)
              {
                v14 = a1;
                goto LABEL_10;
              }
              v16 = *(_QWORD *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v15 < v16);
            v14 = &a1[v17 + 8];
LABEL_10:
            *(_QWORD *)v14 = v15;
          }
          v11 = v13 + 8;
          v12 += 8;
        }
        while (v13 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_8:
      *(_QWORD *)v5 = *(_QWORD *)v7;
      return result;
    }
    if (a4 == 2)
    {
      v9 = *((_QWORD *)a2 - 1);
      v10 = v9 < *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)a1)
        v9 = *(_QWORD *)a1;
      *(_QWORD *)a5 = v9;
      v5 = a5 + 8;
      if (!v10)
        v7 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v21 = a4 >> 1;
      v22 = 8 * (a4 >> 1);
      v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, &a1[v22], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[v22], a2, a3, a4 - v21, &v5[v22], a4 - v21);
      v25 = v5;
      v26 = v7;
      v27 = &v7[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23)
            return result;
          v46 = &v7[8 * v21] - v26 - 8;
          if (v46 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            v50 = 0;
            v51 = (v46 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v5[v52];
            v48 = &v26[v52];
            v53 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v54 = &v5[v50];
              result = *(__n128 *)&v26[v50];
              v55 = *(_OWORD *)&v26[v50 + 16];
              *(__n128 *)v54 = result;
              *((_OWORD *)v54 + 1) = v55;
              v50 += 32;
              v53 -= 4;
            }
            while (v53);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v47 = v5;
            v48 = v26;
          }
          do
          {
            v49 = *(_QWORD *)v48;
            v48 += 8;
            *(_QWORD *)v47 = v49;
            v47 += 8;
          }
          while (v48 != v23);
          return result;
        }
        v28 = v27;
        v29 = *(_QWORD *)v27;
        v30 = *(_QWORD *)v26;
        v31 = *(_QWORD *)v27 < *(_QWORD *)v26;
        v32 = *(_QWORD *)v27 >= *(_QWORD *)v26;
        if (v31)
          v33 = *(_QWORD *)v27;
        else
          v33 = *(_QWORD *)v26;
        v27 += 8 * v31;
        v26 += 8 * v32;
        *(_QWORD *)v5 = v33;
        v5 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        v34 = -8;
        if (v29 >= v30)
          v34 = 0;
        v35 = a2 - v28 + v34 - 8;
        if (v35 < 0x68)
          goto LABEL_50;
        if ((unint64_t)(v25 - &v28[8 * (v29 < v30)]) < 0x20)
          goto LABEL_50;
        v36 = 0;
        v37 = (v35 >> 3) + 1;
        v38 = v29 < v30;
        v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v5[v39];
        v27 += v39;
        v41 = &v28[8 * v38];
        v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = &v5[v36];
          result = *(__n128 *)&v41[v36];
          v44 = *(_OWORD *)&v41[v36 + 16];
          *(__n128 *)v43 = result;
          *((_OWORD *)v43 + 1) = v44;
          v36 += 32;
          v42 -= 4;
        }
        while (v42);
        v5 = v40;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_50:
          do
          {
            v45 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v5 = v45;
            v5 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 8;
      *(_QWORD *)a5 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a5;
        v14 = (uint64_t *)a5;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_QWORD *)v11 >= v16)
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            *((_QWORD *)v13 + 1) = v15;
            v17 = a5;
            if (v13 != a5)
            {
              v18 = v12;
              while (1)
              {
                v17 = &a5[v18];
                v19 = *(_QWORD *)&a5[v18 - 8];
                if (*(_QWORD *)v11 >= v19)
                  break;
                *(_QWORD *)v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a5;
                  break;
                }
              }
            }
            *(_QWORD *)v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  _OWORD *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  char *v69;
  char *v70;

  if (a6)
  {
    v10 = a6;
    v12 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v13 = *(_QWORD *)a2;
      while (1)
      {
        v14 = *(_QWORD *)v12;
        if (v13 < *(_QWORD *)v12)
          break;
        v12 += 8;
        if (!--a5)
          return result;
      }
      v70 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          *(_QWORD *)v12 = v13;
          *(_QWORD *)a2 = v14;
          return result;
        }
        if (a5 >= 0)
          v25 = a5;
        else
          v25 = a5 + 1;
        v24 = v25 >> 1;
        v18 = &v12[8 * (v25 >> 1)];
        v17 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 3;
          v17 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v17[8 * (v26 >> 1)];
            v30 = *(_QWORD *)v28;
            v29 = v28 + 8;
            v26 += ~(v26 >> 1);
            if (v30 < *(_QWORD *)v18)
              v17 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v16 = (v17 - a2) >> 3;
      }
      else
      {
        if (v10 >= 0)
          v15 = v10;
        else
          v15 = v10 + 1;
        v16 = v15 >> 1;
        v17 = &a2[8 * (v15 >> 1)];
        v18 = a2;
        if (v12 != a2)
        {
          v19 = (a2 - v12) >> 3;
          v18 = v12;
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[8 * (v19 >> 1)];
            v23 = *(_QWORD *)v21;
            v22 = v21 + 8;
            v19 += ~(v19 >> 1);
            if (*(_QWORD *)v17 < v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = (v18 - v12) >> 3;
      }
      a5 -= v24;
      v10 -= v16;
      v31 = std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,unsigned long long *,unsigned long long *>(v18, a2, v17);
      v32 = v31;
      if (v24 + v16 >= a5 + v10)
      {
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v31, v17, v70, a4, a5, v10, a7, a8);
        v10 = v16;
        a5 = v24;
        a3 = v32;
        a2 = v18;
        if (!v16)
          return result;
      }
      else
      {
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v12, v18, v31, a4, v24, v16, a7, a8);
        v12 = v32;
        a3 = v70;
        a2 = v17;
        if (!v10)
          return result;
      }
    }
    if (a5 <= v10)
    {
      if (v12 != a2)
      {
        v47 = a2 - v12 - 8;
        v48 = a7;
        v49 = v12;
        if (v47 < 0x18)
          goto LABEL_81;
        v48 = a7;
        v49 = v12;
        if ((unint64_t)(a7 - v12) < 0x20)
          goto LABEL_81;
        v50 = (v47 >> 3) + 1;
        v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = &a7[v51];
        v49 = &v12[v51];
        v52 = (__int128 *)(v12 + 16);
        v53 = a7 + 16;
        v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *v52;
          *(v53 - 1) = *(v52 - 1);
          *v53 = v55;
          v52 += 2;
          v53 += 2;
          v54 -= 4;
        }
        while (v54);
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            v56 = *(_QWORD *)v49;
            v49 += 8;
            *(_QWORD *)v48 = v56;
            v48 += 8;
          }
          while (v49 != a2);
        }
        if (v48 != a7)
        {
          while (a2 != a3)
          {
            v57 = *(_QWORD *)a2;
            v58 = *(_QWORD *)a2 < *(_QWORD *)a7;
            if (*(_QWORD *)a2 >= *(_QWORD *)a7)
              v57 = *(_QWORD *)a7;
            a7 += 8 * (*(_QWORD *)a2 >= *(_QWORD *)a7);
            a2 += 8 * v58;
            *(_QWORD *)v12 = v57;
            v12 += 8;
            if (a7 == v48)
              return result;
          }
          return (char *)memmove(v12, a7, v48 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      v33 = a3 - a2 - 8;
      v34 = a7;
      v35 = a2;
      if (v33 < 0x18)
        goto LABEL_82;
      v34 = a7;
      v35 = a2;
      if ((unint64_t)(a7 - a2) < 0x20)
        goto LABEL_82;
      v36 = (v33 >> 3) + 1;
      v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &a7[v37];
      v35 = &a2[v37];
      v38 = (__int128 *)(a2 + 16);
      v39 = a7 + 16;
      v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *v38;
        *(v39 - 1) = *(v38 - 1);
        *v39 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v42 = *(_QWORD *)v35;
          v35 += 8;
          *(_QWORD *)v34 = v42;
          v34 += 8;
        }
        while (v35 != a3);
      }
      if (v34 != a7)
      {
        v43 = a3;
        while (a2 != v12)
        {
          v44 = *((_QWORD *)v34 - 1);
          v45 = *((_QWORD *)a2 - 1);
          v46 = v44 < v45;
          if (v44 <= v45)
            v44 = *((_QWORD *)a2 - 1);
          if (v46)
            a2 -= 8;
          else
            v34 -= 8;
          *((_QWORD *)a3 - 1) = v44;
          a3 -= 8;
          v43 -= 8;
          if (v34 == a7)
            return result;
        }
        v59 = v34 - a7 - 8;
        if (v59 < 0x58 || (unint64_t)(v34 - v43) < 0x20)
        {
          v60 = v34;
          v61 = a3;
LABEL_72:
          v62 = v61 - 8;
          do
          {
            v63 = *((_QWORD *)v60 - 1);
            v60 -= 8;
            *(_QWORD *)v62 = v63;
            v62 -= 8;
          }
          while (v60 != a7);
          return result;
        }
        v64 = 0;
        v65 = (v59 >> 3) + 1;
        v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        v60 = &v34[-v66];
        v61 = &a3[-v66];
        v67 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v68 = *(_OWORD *)&v34[v64 - 16];
          v69 = &a3[v64];
          *((_OWORD *)v69 - 2) = *(_OWORD *)&v34[v64 - 32];
          *((_OWORD *)v69 - 1) = v68;
          v64 -= 32;
          v67 -= 4;
        }
        while (v67);
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_72;
      }
    }
  }
  return result;
}

__n128 llvm::SmallVectorTemplateBase<mlir::`anonymous namespace'::ArgPack,true>::growAndEmplaceBack<mlir::`anonymous namespace'::ArgPack>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  __n128 *v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  BOOL v9;
  char *v10;
  __int128 v11;
  uint64_t v12;

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(_QWORD *)a1;
  v5 = (__n128 *)&v11;
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v3 + 1;
    v9 = v4 + 24 * v3 > (unint64_t)&v11;
    if (v4 <= (unint64_t)&v11 && v9)
    {
      v10 = (char *)&v11 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      v4 = *(_QWORD *)a1;
      v5 = (__n128 *)&v10[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      v4 = *(_QWORD *)a1;
      v5 = (__n128 *)&v11;
    }
  }
  v6 = (__n128 *)(v4 + 24 * *(unsigned int *)(a1 + 8));
  result = *v5;
  v6[1].n128_u64[0] = v5[1].n128_u64[0];
  *v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL mlir::hasUniqueValues(uint64_t a1)
{
  uint64_t NumElements;
  BOOL v3;
  llvm::APInt *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  llvm::APInt *v9;
  const void **v10;
  llvm::APInt *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::APInt *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  unsigned int v32;
  llvm::APInt *v33;
  uint64_t v34;
  _BYTE v35[64];
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v30 = a1;
  v33 = (llvm::APInt *)v35;
  v34 = 0x400000000;
  v37 = 0;
  v38 = 0;
  v36 = (uint64_t *)&v37;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v27, a1, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v30);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v24, a1, NumElements);
  while (1)
  {
    v3 = v27 == v24 && v28 == v25;
    if (v3 && v29 == v26)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v27, (llvm::APInt *)&v31);
    if (v38)
      goto LABEL_10;
    v4 = v33;
    v5 = v34;
    if (!(_DWORD)v34)
      goto LABEL_19;
    LODWORD(v6) = v34;
    v7 = v31;
    v8 = 16 * v34;
    v9 = v33;
    while (*((_DWORD *)v9 + 2) > 0x40u)
    {
      if (llvm::APInt::equalSlowCase((const void **)v9, &v31))
        goto LABEL_17;
LABEL_14:
      v9 = (llvm::APInt *)((char *)v9 + 16);
      v8 -= 16;
      if (!v8)
        goto LABEL_18;
    }
    if (*(const void **)v9 != v7)
      goto LABEL_14;
LABEL_17:
    if (v8)
      goto LABEL_29;
LABEL_18:
    if (v5 >= 4)
    {
      do
      {
        std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](&v36, (llvm::APInt *)((char *)v33 + 16 * v6 - 16));
        v6 = (v34 - 1);
        LODWORD(v34) = v6;
        if (*((_DWORD *)v33 + 4 * v6 + 2) >= 0x41u)
        {
          v13 = *((_QWORD *)v33 + 2 * v6);
          if (v13)
          {
            MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
            LODWORD(v6) = v34;
          }
        }
      }
      while ((_DWORD)v6);
LABEL_10:
      std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](&v36, (llvm::APInt *)&v31);
      goto LABEL_29;
    }
LABEL_19:
    if (v5 >= HIDWORD(v34))
    {
      v14 = v5 + 1;
      if (v4 <= (llvm::APInt *)&v31 && (char *)v4 + 16 * v5 > (char *)&v31)
      {
        v15 = (char *)((char *)&v31 - (char *)v4);
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v33, v14);
        v4 = v33;
        v10 = (const void **)&v15[(_QWORD)v33];
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v33, v14);
        v10 = &v31;
        v4 = v33;
      }
    }
    else
    {
      v10 = &v31;
    }
    v11 = (llvm::APInt *)((char *)v4 + 16 * v34);
    v12 = *((_DWORD *)v10 + 2);
    *((_DWORD *)v11 + 2) = v12;
    if (v12 > 0x40)
      llvm::APInt::initSlowCase(v11, v10);
    else
      *(_QWORD *)v11 = *v10;
    LODWORD(v34) = v34 + 1;
LABEL_29:
    if (v32 >= 0x41)
    {
      if (v31)
        MEMORY[0x20BD002D4](v31, 0x1000C8000313F17);
    }
    ++v29;
  }
  v16 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v30);
  v17 = v34;
  v18 = v38;
  std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(v37);
  v19 = v33;
  if ((_DWORD)v34)
  {
    v20 = 16 * v34;
    do
    {
      if (*(_DWORD *)((char *)v19 + v20 - 8) >= 0x41u)
      {
        v21 = *(_QWORD *)((char *)v19 + v20 - 16);
        if (v21)
          MEMORY[0x20BD002D4](v21, 0x1000C8000313F17);
      }
      v20 -= 16;
    }
    while (v20);
    v19 = v33;
  }
  if (v19 != (llvm::APInt *)v35)
    free(v19);
  if (v18)
    v22 = v18;
  else
    v22 = v17;
  return v16 == v22;
}

void std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(*a1);
    std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(a1[1]);
    if (*((_DWORD *)a1 + 10) >= 0x41u)
    {
      v2 = a1[4];
      if (v2)
        MEMORY[0x20BD002D4](v2, 0x1000C8000313F17);
    }
    operator delete(a1);
  }
}

uint64_t std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](uint64_t **a1, llvm::APInt *this)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  llvm::APInt *v7;
  uint64_t result;
  _DWORD *v9;
  llvm::APInt *v10;
  unsigned int v11;
  uint64_t *v12;

  v5 = (uint64_t *)(a1 + 1);
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = (llvm::APInt *)(v4 + 4);
        if ((llvm::APInt::compare(this, (const llvm::APInt *)(v4 + 4)) & 0x80000000) == 0)
          break;
        v4 = (uint64_t *)*v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      result = llvm::APInt::compare(v7, this);
      if ((result & 0x80000000) == 0)
        break;
      v4 = (uint64_t *)v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t *)(a1 + 1);
LABEL_8:
    v9 = operator new(0x30uLL);
    v10 = (llvm::APInt *)(v9 + 8);
    v11 = *((_DWORD *)this + 2);
    v9[10] = v11;
    if (v11 > 0x40)
      llvm::APInt::initSlowCase(v10, (const void **)this);
    else
      *(_QWORD *)v10 = *(_QWORD *)this;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v6;
    *v5 = (uint64_t)v9;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v9 = (_DWORD *)*v5;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  char *v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v15);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = v4 + 8;
    v9 = 16 * v7;
    v10 = v6 + 2;
    do
    {
      *v8 = *v10;
      *((_QWORD *)v8 - 1) = *((_QWORD *)v10 - 1);
      *v10 = 0;
      v10 += 4;
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
    v6 = *(_DWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 4 * v11;
      do
      {
        if (v6[v12 - 2] >= 0x41u)
        {
          v13 = *(_QWORD *)&v6[v12 - 4];
          if (v13)
            MEMORY[0x20BD002D4](v13, 0x1000C8000313F17);
        }
        v12 -= 4;
      }
      while (v12 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v14 = v15;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t mlir::writeConstantData(llvm::raw_ostream *a1)
{
  const char *v2;
  uint64_t v3;
  size_t ElementDataSize;
  uint64_t v5;
  uint64_t NumElements;
  uint64_t v7;
  void *v9[6];
  char v10;

  mlir::mps::CPUNDArray::CPUNDArray(v9);
  v2 = (const char *)v9[5];
  if (v10)
  {
    if (mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v9) >= 1)
    {
      v3 = 0;
      do
      {
        ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)v9);
        llvm::raw_ostream::write(a1, v2, ElementDataSize);
        ++v3;
      }
      while (v3 < mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v9));
    }
  }
  else
  {
    v5 = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)v9);
    NumElements = mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v9);
    llvm::raw_ostream::write(a1, v2, NumElements * v5);
  }
  if (*((_QWORD *)a1 + 4) != *((_QWORD *)a1 + 2))
    llvm::raw_ostream::flush_nonempty(a1);
  v7 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1)
     + *((_QWORD *)a1 + 4)
     - *((_QWORD *)a1 + 2);
  mlir::mps::CPUNDArray::~CPUNDArray(v9);
  return v7;
}

BOOL mlir::isConstantFPZero(uint64_t a1)
{
  return mlir::detail::is_constant_fp_value<unsigned long long>(a1, 0);
}

BOOL mlir::detail::is_constant_fp_value<unsigned long long>(uint64_t a1, unint64_t a2)
{
  void *v4;
  uint64_t DefiningOp;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  float v23;
  void *v24;
  llvm::APFloatBase *v25;
  unint64_t matched;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  v28 = 0;
  v29 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  if (DefiningOp)
  {
    v17 = DefiningOp;
    v18 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v17 + 48) + 32))(*(_QWORD *)(v17 + 48), v18))
    {
      v30 = v32;
      v31 = 0x100000000;
      mlir::Operation::fold(v17, 0, 0, (uint64_t)&v30);
      v19 = *(_QWORD *)v30;
      v20 = mlir::DenseFPElementsAttr::classof(*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8);
      v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) != 0)
        v22 = v20;
      else
        v22 = 0;
      if (v22 == 1)
        v28 = v21;
      if (v30 != v32)
        free(v30);
      if (v22 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v28, (uint64_t)&v30);
        v23 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v30);
        v24 = (void *)v31;
        if (llvm::APFloatBase::PPCDoubleDouble(v25) == v24)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v31);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v31);
        return v23 == (float)a2;
      }
    }
  }
  matched = mlir::matchConstantWithFloatValue<float>(a1);
  if ((matched & 0xFF00000000) != 0)
  {
    v23 = *(float *)&matched;
    return v23 == (float)a2;
  }
  return 0;
}

uint64_t mlir::ElementsAttr::value_begin<llvm::APInt>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  char v11;

  v4 = mlir::TypeID::get<llvm::APInt>();
  result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4);
  if (!v11)
    mlir::ElementsAttr::value_begin<llvm::APInt>((llvm *)v9, (uint64_t *)a1);
  v6 = v9[1];
  if (v9[0])
  {
    v7 = v10;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v7 = v10;
  }
  *(_BYTE *)a2 = v8;
  *(_BYTE *)(a2 + 1) = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

const char *llvm::getTypeName<llvm::APInt>()
{
  unint64_t v0;
  unint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v5;
  unint64_t v6;

  v5 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
  v6 = 61;
  v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0)
    v1 = v0;
  else
    v1 = v6;
  v2 = &v5[v1];
  if (v6 - v1 >= 0x12)
    v3 = 18;
  else
    v3 = v6 - v1;
  return &v2[v3];
}

uint64_t mlir::TypeID::get<llvm::APInt>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      v12 = 61;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[274];
}

unint64_t mlir::matchConstantWithFloatValue<float>(uint64_t a1)
{
  uint64_t DefiningOp;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t SingleFloat;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v13 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
  if (!DefiningOp)
    goto LABEL_10;
  v2 = DefiningOp;
  v3 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v3))
    goto LABEL_10;
  v14[0] = v15;
  v14[1] = (void *)0x100000000;
  mlir::Operation::fold(v2, 0, 0, (uint64_t)v14);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v14[0] & 0xFFFFFFFFFFFFFFF8));
  v6 = v5 ? v4 : 0;
  if (v14[0] != v15)
    free(v14[0]);
  if (v5)
  {
    SingleFloat = mlir::getSingleFloatValue<float>((uint64_t)v5, v6);
    v8 = SingleFloat & 0xFFFFFF0000000000;
    v9 = SingleFloat & 0xFF00000000;
    v10 = SingleFloat & 0xFFFFFF00;
    v11 = SingleFloat;
  }
  else
  {
LABEL_10:
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v10 = 0;
  }
  return v9 | v8 | v11 | v10;
}

uint64_t mlir::mps::CPUNDArray::CPUNDArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t v6;
  _BYTE *ElementsAttrRawData;
  uint64_t v8;
  uint64_t v9;
  BOOL isInteger;
  size_t ElementDataSize;
  unint64_t v12;
  size_t *v13;
  unint64_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  size_t *v20;
  size_t *v21;
  size_t *v23;
  size_t v24;
  uint64_t *Value;
  uint64_t v27;
  size_t NumElements;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64x2_t v37;
  int32x2_t v38;
  uint64_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  uint64_t v44;
  uint64_t RHS;
  uint64_t v46;
  uint64_t v47[2];

  v47[0] = a2;
  v47[1] = a3;
  Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)v47);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = Type;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 32) = v5;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 16) = v6;
  ElementsAttrRawData = (_BYTE *)mlir::getElementsAttrRawData(v47[0]);
  v9 = v8;
  isInteger = 0;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47))
  {
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && (v46 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1),
          mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v46) <= 7))
    {
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
      isInteger = 1;
      if (!mlir::Type::isInteger((mlir::Type *)&RHS, 1))
      {
        v44 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
        isInteger = mlir::Type::isInteger((mlir::Type *)&v44, 4);
      }
    }
    else
    {
      isInteger = 1;
    }
  }
  *(_BYTE *)(a1 + 49) = isInteger;
  ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)a1);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 <= 1)
    v12 = 1;
  v13 = *(size_t **)(a1 + 56);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v13) >> 3;
  if (v12 <= v14)
  {
    if (v12 < v14)
      *(_QWORD *)(a1 + 64) = &v13[v12];
  }
  else
  {
    std::vector<long long>::__append(a1 + 56, v12 - v14);
    v13 = *(size_t **)(a1 + 56);
  }
  v15 = *(unsigned __int8 *)(a1 + 49);
  if (*(_BYTE *)(a1 + 49))
    v16 = 0;
  else
    v16 = ElementDataSize;
  *v13 = v16;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 >= 2)
  {
    v18 = -1;
    for (i = 1; i < v17; ++i)
    {
      if (v15)
        v16 = 0;
      else
        v16 *= *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v17 + v18));
      v13[i] = v16;
      v17 = *(_QWORD *)(a1 + 16);
      --v18;
    }
  }
  v20 = *(size_t **)(a1 + 64);
  v21 = v20 - 1;
  if (v13 != v20 && v21 > v13)
  {
    v23 = v13 + 1;
    do
    {
      v24 = *(v23 - 1);
      *(v23 - 1) = *v21;
      *v21-- = v24;
    }
    while (v23++ < v21);
  }
  if (v15)
  {
    *(_BYTE *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 40) = malloc_type_malloc(ElementDataSize, 0x65433A94uLL);
    v46 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
    if (mlir::Type::isInteger((mlir::Type *)&v46, 1))
      **(_BYTE **)(a1 + 40) = *ElementsAttrRawData != 0;
    else
      memcpy(*(void **)(a1 + 40), ElementsAttrRawData, ElementDataSize);
    return a1;
  }
  v46 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
  if (!mlir::Type::isInteger((mlir::Type *)&v46, 1))
  {
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 40) = ElementsAttrRawData;
    return a1;
  }
  *(_BYTE *)(a1 + 48) = 1;
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  NumElements = mlir::ShapedType::getNumElements(Value, v27);
  v29 = (char *)malloc_type_malloc(NumElements, 0xC2E4D987uLL);
  *(_QWORD *)(a1 + 40) = v29;
  v30 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  v32 = mlir::ShapedType::getNumElements(v30, v31);
  if (v9)
  {
    v33 = (BOOL *)(v29 + 3);
    do
    {
      if (v32 >= 8)
        v34 = 8;
      else
        v34 = v32;
      if (!v34)
        goto LABEL_34;
      if (v32 >= 8)
        v35 = 8;
      else
        v35 = v32;
      v36 = *ElementsAttrRawData;
      v37 = (uint64x2_t)vdupq_n_s64(v35 - 1);
      v38 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)xmmword_207A80930));
      if ((v38.i8[0] & 1) != 0)
        *(v33 - 3) = v36 & 1;
      if ((v38.i8[4] & 1) != 0)
        *(v33 - 2) = (v36 & 2) != 0;
      v39 = ((_BYTE)v35 + 1) & 0x1E;
      if (v39 == 2)
        goto LABEL_34;
      v40 = vmovn_s64((int64x2_t)vcgtq_u64(v37, (uint64x2_t)xmmword_207A7F3C0));
      if ((v40.i8[0] & 1) != 0)
      {
        *(v33 - 1) = (v36 & 4) != 0;
        if ((v40.i8[4] & 1) != 0)
          goto LABEL_52;
      }
      else if ((v40.i8[4] & 1) != 0)
      {
LABEL_52:
        *v33 = (v36 & 8) != 0;
        if (v39 == 4)
          goto LABEL_34;
        goto LABEL_53;
      }
      if (v39 == 4)
        goto LABEL_34;
LABEL_53:
      v41 = vmovn_s64((int64x2_t)vcgtq_u64(v37, (uint64x2_t)xmmword_207AB5460));
      if ((v41.i8[0] & 1) != 0)
      {
        v33[1] = (v36 & 0x10) != 0;
        if ((v41.i8[4] & 1) == 0)
          goto LABEL_55;
      }
      else if ((v41.i8[4] & 1) == 0)
      {
LABEL_55:
        if (v39 != 6)
          goto LABEL_59;
        goto LABEL_34;
      }
      v33[2] = (v36 & 0x20) != 0;
      if (v39 != 6)
      {
LABEL_59:
        v42 = vmovn_s64((int64x2_t)vcgtq_u64(v37, (uint64x2_t)xmmword_207AB5470));
        if ((v42.i8[0] & 1) != 0)
          v33[3] = (v36 & 0x40) != 0;
        if ((v42.i8[4] & 1) != 0)
          v33[4] = v36 >> 7;
      }
LABEL_34:
      ++ElementsAttrRawData;
      v33 += 8;
      v32 -= 8;
      --v9;
    }
    while (v9);
  }
  return a1;
}

uint64_t mlir::mps::CPUNDArray::getElementDataSize(mlir::mps::CPUNDArray *this)
{
  uint64_t RHS;
  uint64_t Value;

  if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS(this) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    RHS = mlir::AffineBinaryOpExpr::getRHS(this);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&RHS);
    return ((mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value) + 7) >> 2) & 0x3FFFFFFE;
  }
  else
  {
    Value = mlir::AffineBinaryOpExpr::getRHS(this);
    return (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value) + 7) >> 3;
  }
}

uint64_t mlir::mps::CPUNDArray::CPUNDArray(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t **v7;
  uint64_t Shape;
  uint64_t v9;
  uint64_t v10;
  uint64_t OperandRange;
  uint64_t v12;
  uint64_t v13;
  uint64_t ElementDataSize;
  uint64_t *Value;
  uint64_t v16;
  uint64_t NumElements;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD v34[2];

  v34[0] = a2;
  v34[1] = a3;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (uint64_t **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v34);
  v10 = v9;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v34);
  *(_QWORD *)a1 = mlir::RankedTensorType::get(Shape, v10, OperandRange, 0);
  *v6 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 32) = v12;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 16) = v13;
  ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)a1);
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  NumElements = mlir::ShapedType::getNumElements(Value, v16);
  if (NumElements == 1)
    v18 = 1;
  else
    v18 = a4;
  *(_BYTE *)(a1 + 49) = v18;
  if (*(_QWORD *)(a1 + 16) <= 1uLL)
    v19 = 1;
  else
    v19 = *(_QWORD *)(a1 + 16);
  v20 = *v7;
  v21 = (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)*v7) >> 3;
  if (v19 <= v21)
  {
    if (v19 < v21)
      *(_QWORD *)(a1 + 64) = &v20[v19];
  }
  else
  {
    std::vector<long long>::__append((uint64_t)v7, v19 - v21);
    v18 = *(unsigned __int8 *)(a1 + 49);
    v20 = *(uint64_t **)(a1 + 56);
  }
  if (v18)
    v22 = 0;
  else
    v22 = ElementDataSize;
  *v20 = v22;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23 >= 2)
  {
    v24 = -1;
    for (i = 1; i < v23; ++i)
    {
      if (v18)
        v22 = 0;
      else
        v22 *= *(_QWORD *)(*v6 + 8 * (v23 + v24));
      v20[i] = v22;
      v23 = *(_QWORD *)(a1 + 16);
      --v24;
    }
  }
  v26 = *(uint64_t **)(a1 + 64);
  v27 = v26 - 1;
  if (v20 != v26 && v27 > v20)
  {
    v29 = v20 + 1;
    do
    {
      v30 = *(v29 - 1);
      *(v29 - 1) = *v27;
      *v27-- = v30;
    }
    while (v29++ < v27);
  }
  *(_BYTE *)(a1 + 48) = 1;
  if (v18)
    v32 = 1;
  else
    v32 = NumElements;
  *(_QWORD *)(a1 + 40) = malloc_type_malloc(v32 * ElementDataSize, 0x467E3164uLL);
  return a1;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

uint64_t mlir::mps::CPUNDArray::getNumElements(mlir::mps::CPUNDArray *this)
{
  uint64_t *Value;
  uint64_t v2;

  Value = (uint64_t *)mlir::ArrayAttr::getValue(this);
  return mlir::ShapedType::getNumElements(Value, v2);
}

uint64_t mlir::mps::CPUNDArray::tryMakeAliasedArray@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Shape;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t OperandRange;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v13);
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v13);
    v8 = v7;
    v9 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v13);
    v10 = (_QWORD *)mlir::RankedTensorType::get(Shape, v8, v9, 0);
    mlir::tryCreateMutableElementsAttr(v10, (__n128 **)a3);
    if (*(_QWORD *)a3)
      return mlir::mps::CPUNDArray::CPUNDArray(a4, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  }
  return mlir::mps::CPUNDArray::CPUNDArray(a4, v13, v14, 0);
}

void mlir::mps::CPUNDArray::~CPUNDArray(void **this)
{
  void *v2;

  if (*((_BYTE *)this + 48))
    free(this[5]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
}

_QWORD *mlir::mps::CPUNDArray::getElementsAttr(mlir::mps::CPUNDArray *this, int a2, int a3)
{
  unint64_t NumElements;
  uint64_t *Value;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v72;
  float v73;
  float v83;
  float v84;
  uint64_t v85;
  void *v86;
  float v87;
  float *v88;
  float v89;
  float v90;
  __int16 *v100;
  uint64_t v106;
  uint64_t v107;
  uint64_t RHS;

  if (*((_BYTE *)this + 49))
  {
    NumElements = 1;
  }
  else
  {
    Value = (uint64_t *)mlir::ArrayAttr::getValue(this);
    NumElements = mlir::ShapedType::getNumElements(Value, v8);
  }
  RHS = mlir::AffineBinaryOpExpr::getRHS(this);
  if (mlir::Type::isInteger((mlir::Type *)&RHS, 1))
  {
    v9 = (_BYTE *)*((_QWORD *)this + 5);
    v10 = *(uint64_t **)this;
    if (a2)
    {
      if (!v10)
        goto LABEL_15;
      v11 = *v10;
      v12 = mlir::TypeID::get<mlir::ShapedType>();
      v13 = *(unsigned int *)(v11 + 16);
      if (!(_DWORD)v13)
        goto LABEL_15;
      v14 = *(_QWORD **)(v11 + 8);
      v15 = &v14[2 * v13];
      do
      {
        v16 = v13 >> 1;
        v17 = &v14[2 * (v13 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12)
          v14 = v18;
        else
          v13 = v16;
      }
      while (v13);
      if (v14 != v15 && *v14 == v12)
        v20 = v14[1];
      else
LABEL_15:
        v20 = 0;
      v21 = (_QWORD *)mlir::DenseElementsAttr::get((uint64_t)v10, v20, v9, NumElements);
      v22 = v21;
      if (v21)
      {
        v23 = *v21;
        v24 = mlir::TypeID::get<mlir::ElementsAttr>();
        v25 = *(unsigned int *)(v23 + 16);
        if ((_DWORD)v25)
        {
          v26 = *(_QWORD **)(v23 + 8);
          do
          {
            v27 = v25 >> 1;
            v28 = &v26[2 * (v25 >> 1)];
            v30 = *v28;
            v29 = v28 + 2;
            v25 += ~(v25 >> 1);
            if (v30 < v24)
              v26 = v29;
            else
              v25 = v27;
          }
          while (v25);
        }
      }
      return v22;
    }
    return mlir::createElementsAttr<BOOL>(v10, v9, NumElements);
  }
  if (a3 && NumElements >= 2)
  {
    v31 = (unsigned __int8 *)*((_QWORD *)this + 5);
    RHS = mlir::AffineBinaryOpExpr::getRHS(this);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 8))
    {
      v32 = *v31;
      if (v32 != v31[1])
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v34 = v31[v33++];
        if (v32 != v34)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 8))
    {
      v36 = *v31;
      if (v36 != v31[1])
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v37 = v31[v33++];
        if (v36 != v37)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 16))
    {
      v38 = *(unsigned __int16 *)v31;
      if (v38 != *((unsigned __int16 *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v39 = *(unsigned __int16 *)&v31[2 * v33++];
        if (v38 != v39)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 16))
    {
      v40 = *(unsigned __int16 *)v31;
      if (v40 != *((unsigned __int16 *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v41 = *(unsigned __int16 *)&v31[2 * v33++];
        if (v40 != v41)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 32))
    {
      if (*(_DWORD *)v31 != *((_DWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v42 = *(_DWORD *)&v31[4 * v33++];
        if (*(_DWORD *)v31 != v42)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 32))
    {
      if (*(_DWORD *)v31 != *((_DWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v43 = *(_DWORD *)&v31[4 * v33++];
        if (*(_DWORD *)v31 != v43)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 64))
    {
      if (*(_QWORD *)v31 != *((_QWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v44 = *(_QWORD *)&v31[8 * v33++];
        if (*(_QWORD *)v31 != v44)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 64))
    {
      if (*(_QWORD *)v31 != *((_QWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v45 = *(_QWORD *)&v31[8 * v33++];
        if (*(_QWORD *)v31 != v45)
        {
LABEL_75:
          if (v33 - 1 < NumElements)
            goto LABEL_77;
          goto LABEL_76;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isF32((mlir::Type *)&RHS))
    {
      if (*(float *)v31 == *((float *)v31 + 1))
      {
        v72 = 2;
        while (NumElements != v72)
        {
          v73 = *(float *)&v31[4 * v72++];
          if (*(float *)v31 != v73)
            goto LABEL_117;
        }
LABEL_76:
        NumElements = 1;
      }
    }
    else if (mlir::Type::isF16((mlir::Type *)&RHS))
    {
      _H0 = *(_WORD *)v31;
      _H1 = *((_WORD *)v31 + 1);
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v72 = 2;
        while (NumElements != v72)
        {
          _H1 = *(_WORD *)&v31[2 * v72];
          __asm { FCVT            S1, H1 }
          ++v72;
          if (_S0 != _S1)
            goto LABEL_117;
        }
        goto LABEL_76;
      }
    }
    else if (mlir::Type::isBF16((mlir::Type *)&RHS))
    {
      LODWORD(v83) = *(unsigned __int16 *)v31 << 16;
      if (v83 == COERCE_FLOAT(*((unsigned __int16 *)v31 + 1) << 16))
      {
        v72 = 2;
        while (NumElements != v72)
        {
          LODWORD(v84) = *(unsigned __int16 *)&v31[2 * v72++] << 16;
          if (v83 != v84)
            goto LABEL_117;
        }
        goto LABEL_76;
      }
    }
    else
    {
      v85 = RHS;
      v86 = *(void **)(*(_QWORD *)RHS + 136);
      if (v86 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        v85 = 0;
      v107 = v85;
      if (v86 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v106 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v107);
        if (mlir::Type::isF32((mlir::Type *)&v106))
        {
          if (*(float *)v31 == *((float *)v31 + 2))
          {
            v87 = *((float *)v31 + 1);
            if (v87 == *((float *)v31 + 3))
            {
              v88 = (float *)(v31 + 20);
              v72 = 2;
              while (NumElements != v72)
              {
                v89 = *(v88 - 1);
                v90 = *v88;
                ++v72;
                v88 += 2;
                _ZF = *(float *)v31 == v89 && v87 == v90;
                if (!_ZF)
                  goto LABEL_117;
              }
              goto LABEL_76;
            }
          }
        }
        else
        {
          v106 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v107);
          if (mlir::Type::isF32((mlir::Type *)&v106))
          {
            _H0 = *(_WORD *)v31;
            _H1 = *((_WORD *)v31 + 2);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 == _S1)
            {
              _H1 = *((_WORD *)v31 + 1);
              _H2 = *((_WORD *)v31 + 3);
              __asm
              {
                FCVT            S2, H2
                FCVT            S1, H1
              }
              if (_S1 == _S2)
              {
                v100 = (__int16 *)(v31 + 10);
                v72 = 2;
                while (NumElements != v72)
                {
                  _H2 = *(v100 - 1);
                  _H3 = *v100;
                  __asm { FCVT            S2, H2 }
                  ++v72;
                  v100 += 2;
                  __asm { FCVT            S2, H3 }
                  if (!_ZF || _S1 != _S2)
                  {
LABEL_117:
                    if (v72 - 1 >= NumElements)
                      goto LABEL_76;
                    goto LABEL_77;
                  }
                }
                goto LABEL_76;
              }
            }
          }
        }
      }
    }
  }
LABEL_77:
  v46 = (const void *)*((_QWORD *)this + 5);
  v50 = mlir::mps::CPUNDArray::getElementDataSize(this) * NumElements;
  v51 = *(uint64_t **)this;
  if (!a2)
    return mlir::createRawElementsAttr(v51, v46, (const void *)v50);
  if (!v51)
    goto LABEL_87;
  v52 = *v51;
  v53 = mlir::TypeID::get<mlir::ShapedType>();
  v54 = *(unsigned int *)(v52 + 16);
  if (!(_DWORD)v54)
    goto LABEL_87;
  v55 = *(_QWORD **)(v52 + 8);
  v56 = &v55[2 * v54];
  do
  {
    v57 = v54 >> 1;
    v58 = &v55[2 * (v54 >> 1)];
    v60 = *v58;
    v59 = v58 + 2;
    v54 += ~(v54 >> 1);
    if (v60 < v53)
      v55 = v59;
    else
      v54 = v57;
  }
  while (v54);
  if (v55 != v56 && *v55 == v53)
    v61 = v55[1];
  else
LABEL_87:
    v61 = 0;
  v62 = (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(v51, v61, v46, v50, v47, v48, v49);
  v22 = v62;
  if (v62)
  {
    v63 = *v62;
    v64 = mlir::TypeID::get<mlir::ElementsAttr>();
    v65 = *(unsigned int *)(v63 + 16);
    if ((_DWORD)v65)
    {
      v66 = *(_QWORD **)(v63 + 8);
      do
      {
        v67 = v65 >> 1;
        v68 = &v66[2 * (v65 >> 1)];
        v70 = *v68;
        v69 = v68 + 2;
        v65 += ~(v65 >> 1);
        if (v70 < v64)
          v66 = v69;
        else
          v65 = v67;
      }
      while (v65);
    }
  }
  return v22;
}

_QWORD *mlir::createElementsAttr<BOOL>(_QWORD *a1, _BYTE *a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *RawElementsAttr;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  _QWORD v20[6];

  v20[5] = *MEMORY[0x24BDAC8D0];
  v4 = a3 + 7;
  v18 = v20;
  v19 = xmmword_207AB5450;
  if (a3 + 7 < 8)
    goto LABEL_9;
  v5 = a3;
  v7 = v4 >> 3;
  if (v4 < 0x148)
  {
    v9 = 0;
    v8 = v20;
    v10 = v7;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v18, v20, v4 >> 3, 1);
  v8 = v18;
  v9 = v19;
  v10 = v7 - v19;
  if (v7 != (_QWORD)v19)
  {
LABEL_6:
    bzero(&v8[v9], v10);
    v8 = v18;
  }
LABEL_7:
  *(_QWORD *)&v19 = v7;
  if (v5 == 1)
  {
    *v8 = -*a2;
  }
  else
  {
    v13 = a2 + 3;
    do
    {
      v15 = v5;
      v16 = v5 >= 8;
      v5 -= 8;
      if (v16)
        v17 = 8;
      else
        v17 = v15;
      if (v17)
      {
        v14 = *(v13 - 3);
        if (v17 != 1)
        {
          v14 |= 2 * *(v13 - 2);
          if (v17 != 2)
          {
            v14 |= 4 * *(v13 - 1);
            if (v17 != 3)
            {
              v14 |= 8 * *v13;
              if (v17 != 4)
              {
                v14 |= 16 * v13[1];
                if (v17 != 5)
                {
                  v14 |= 32 * v13[2];
                  if (v17 != 6)
                  {
                    v14 |= v13[3] << 6;
                    if (v17 != 7)
                      v14 |= v13[4] << 7;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v14 = 0;
      }
      *v8++ = v14;
      v13 += 8;
      --v7;
    }
    while (v7);
  }
LABEL_9:
  RawElementsAttr = mlir::createRawElementsAttr(a1, v18, (const void *)v19);
  if (v18 != v20)
    free(v18);
  return RawElementsAttr;
}

void mlir::mps::CPUNDArrayKernel::cpuTilingEngine(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char *v50;
  char *v51;
  void (*v52)(uint64_t *, uint64_t **, char **, char **, uint64_t, uint64_t, uint64_t);
  int64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v66;
  size_t __sz;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;

  v12 = *(uint64_t **)a4;
  v11 = *(_QWORD *)(a4 + 8);
  v13 = v11 - *(_QWORD *)a4;
  if (v11 == *(_QWORD *)a4)
  {
    v14 = 0;
    v74 = 0;
  }
  else
  {
    if (v13 < 0)
      goto LABEL_77;
    v14 = (char *)operator new(v11 - (_QWORD)v12);
    v74 = &v14[8 * (v13 >> 3)];
    memcpy(v14, v12, v13);
  }
  v16 = *(uint64_t **)a5;
  v15 = *(_QWORD *)(a5 + 8);
  v17 = v15 - *(_QWORD *)a5;
  if (v15 == *(_QWORD *)a5)
  {
    v18 = 0;
    v73 = 0;
  }
  else
  {
    if (v17 < 0)
      goto LABEL_77;
    v18 = (char *)operator new(v15 - *(_QWORD *)a5);
    v73 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v16, v17);
  }
  v64 = a7;
  if (*(_QWORD *)(a1 + 8) + a6 >= a7)
  {
    v52 = *(void (**)(uint64_t *, uint64_t **, char **, char **, uint64_t, uint64_t, uint64_t))a1;
    v85 = 0;
    v86 = 0;
    v84 = 0;
    v53 = v74 - v14;
    if (v74 != v14)
    {
      if (v53 < 0)
        goto LABEL_77;
      v54 = (char *)operator new(v74 - v14);
      v55 = &v54[8 * (v53 >> 3)];
      v84 = v54;
      v86 = v55;
      memcpy(v54, v14, v53);
      v85 = v55;
      a7 = v64;
    }
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v56 = v73 - v18;
    if (v73 == v18)
    {
LABEL_68:
      v52(a2, a3, &v84, &v81, a6, a7, a8);
      if (v81)
      {
        v82 = v81;
        operator delete(v81);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      goto LABEL_72;
    }
    if ((v56 & 0x8000000000000000) == 0)
    {
      v57 = (char *)operator new(v73 - v18);
      v58 = &v57[8 * (v56 >> 3)];
      v81 = v57;
      v83 = v58;
      memcpy(v57, v18, v56);
      v82 = v58;
      a7 = v64;
      goto LABEL_68;
    }
LABEL_77:
    abort();
  }
  v19 = **a3;
  v20 = *(_QWORD *)(v19 + 16);
  v72 = 1;
  v21 = (v20 & (a6 >> 63)) + a6;
  if (v21 < 0 || !v20 || (v72 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * v21), v72 >= 1))
  {
    v22 = 0;
    v71 = a7 - a6;
    __sz = v74 - v14;
    v23 = (v74 - v14) >> 3;
    v24 = a6 - a7;
    v25 = (int)a6 - (int)a7;
    v26 = v73 - v18;
    v27 = (v73 - v18) >> 3;
    v66 = a6 + 1;
    v59 = v27;
    v60 = v23;
    if (v23 <= 1)
      v23 = 1;
    if (v27 <= 1)
      v27 = 1;
    v61 = v27;
    v62 = v23;
    do
    {
      if (v71 <= *(_QWORD *)(a1 + 8))
        goto LABEL_20;
      if (v74 != v14)
      {
        v28 = v62;
        v29 = *(uint64_t **)a4;
        v30 = *a2;
        v31 = v14;
        do
        {
          v32 = *(_QWORD **)v30;
          if (*(_BYTE *)(*(_QWORD *)v30 + 49)
            || ((v35 = v32[2], v24 < 0) ? (v36 = v32[2]) : (v36 = 0),
                (v37 = v36 + v25, v37 < 0)
             || (v37 <= (int)v35 - 1 ? (v38 = v35 == 0) : (v38 = 1), v38 || *(_QWORD *)(v32[3] + 8 * v37) == 1)))
          {
            v33 = 0;
          }
          else
          {
            v33 = *(_QWORD *)(v32[7] + 8 * v37);
          }
          v34 = *v29++;
          *v31++ = v34 + v33 * v22;
          v30 += 8;
          --v28;
        }
        while (v28);
      }
      if (v73 != v18)
      {
        v39 = *(uint64_t **)a5;
        v40 = *a3;
        v41 = v18;
        v42 = v61;
        do
        {
          v43 = (_QWORD *)*v40;
          if (*(_BYTE *)(*v40 + 49)
            || ((v46 = v43[2], v24 < 0) ? (v47 = v43[2]) : (v47 = 0),
                (v48 = v47 + v25, v48 < 0)
             || (v48 <= (int)v46 - 1 ? (v49 = v46 == 0) : (v49 = 1), v49 || *(_QWORD *)(v43[3] + 8 * v48) == 1)))
          {
            v44 = 0;
          }
          else
          {
            v44 = *(_QWORD *)(v43[7] + 8 * v48);
          }
          v45 = *v39++;
          *v41++ = v45 + v44 * v22;
          ++v40;
          --v42;
        }
        while (v42);
      }
      v78 = 0;
      v79 = 0;
      v80 = 0;
      if (v74 == v14)
      {
        v50 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_77;
        v50 = (char *)operator new(__sz);
        v78 = v50;
        v80 = &v50[8 * v60];
        memcpy(v50, v14, __sz);
        v79 = &v50[8 * v60];
      }
      v75 = 0;
      v76 = 0;
      v77 = 0;
      if (v73 == v18)
      {
        mlir::mps::CPUNDArrayKernel::cpuTilingEngine(a1, a2, a3, &v78, &v75, v66, a7, a8);
        if (v50)
          goto LABEL_19;
      }
      else
      {
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_77;
        v51 = (char *)operator new(v26);
        v75 = v51;
        v77 = &v51[8 * v59];
        memcpy(v51, v18, v26);
        v76 = &v51[8 * v59];
        a7 = v64;
        mlir::mps::CPUNDArrayKernel::cpuTilingEngine(a1, a2, a3, &v78, &v75, v66, v64, a8);
        v76 = v51;
        operator delete(v51);
        if (v50)
        {
LABEL_19:
          v79 = v50;
          operator delete(v50);
        }
      }
LABEL_20:
      ++v22;
    }
    while (v22 != v72);
  }
LABEL_72:
  if (v18)
    operator delete(v18);
  if (v14)
    operator delete(v14);
}

void mlir::mps::CPUNDArrayArithmeticUnaryKernel::arithmeticUnaryTileKernel(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  const void *v40;
  int64_t v41;
  char *v42;
  char *v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  const void *v58;
  int64_t v59;
  char *v60;
  char *v61;
  const void *v62;
  int64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  const void *v80;
  int64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  const void *v85;
  int64_t v86;
  char *v87;
  char *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  void *v97;
  char *v98;
  void *v99;
  void *v100;
  char *v101;
  void *v102;
  char *v103;
  char *v104;
  void *v105;
  void *v106;
  char *v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  char *v113;
  void *v114;
  char *v115;
  char *v116;
  void *v117;
  void *v118;
  char *v119;
  void *v120;
  char *v121;
  char *v122;
  void *__p;
  void *v124;
  char *v125;
  void *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  void *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  void *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  void *v144;
  char *v145;
  char *v146;

  switch(*(_DWORD *)(a7 + 16))
  {
    case 6:
      v10 = *(double *)(a7 + 24);
      v145 = 0;
      v146 = 0;
      v144 = 0;
      v12 = *(const void **)a3;
      v11 = *(_QWORD *)(a3 + 8);
      v13 = v11 - *(_QWORD *)a3;
      if (v11 == *(_QWORD *)a3)
        goto LABEL_5;
      if (v13 < 0)
        goto LABEL_94;
      v14 = (char *)operator new(v11 - *(_QWORD *)a3);
      v15 = &v14[8 * (v13 >> 3)];
      v144 = v14;
      v146 = v15;
      memcpy(v14, v12, v13);
      v145 = v15;
LABEL_5:
      v141 = 0;
      v142 = 0;
      v143 = 0;
      v16 = *(const void **)a4;
      v17 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v17)
        goto LABEL_8;
      if (v17 < 0)
        goto LABEL_94;
      v18 = (char *)operator new(v17);
      v19 = &v18[8 * (v17 >> 3)];
      v141 = v18;
      v143 = v19;
      memcpy(v18, v16, v17);
      v142 = v19;
LABEL_8:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>(a1, a2, (const void **)&v144, (const void **)&v141, v10);
      if (v141)
      {
        v142 = v141;
        operator delete(v141);
      }
      v20 = v144;
      if (!v144)
        return;
      v145 = (char *)v144;
      break;
    case 7:
      v138 = 0;
      v139 = 0;
      v140 = 0;
      v22 = *(const void **)a3;
      v21 = *(_QWORD *)(a3 + 8);
      v23 = v21 - *(_QWORD *)a3;
      if (v21 == *(_QWORD *)a3)
        goto LABEL_15;
      if (v23 < 0)
        goto LABEL_94;
      v24 = (char *)operator new(v21 - *(_QWORD *)a3);
      v25 = &v24[8 * (v23 >> 3)];
      v138 = v24;
      v140 = v25;
      memcpy(v24, v22, v23);
      v139 = v25;
LABEL_15:
      v135 = 0;
      v136 = 0;
      v137 = 0;
      v26 = *(const void **)a4;
      v27 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v27)
        goto LABEL_18;
      if (v27 < 0)
        goto LABEL_94;
      v28 = (char *)operator new(v27);
      v29 = &v28[8 * (v27 >> 3)];
      v135 = v28;
      v137 = v29;
      memcpy(v28, v26, v27);
      v136 = v29;
LABEL_18:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)7>(a1, a2, (const void **)&v138, (const void **)&v135);
      if (v135)
      {
        v136 = v135;
        operator delete(v135);
      }
      v20 = v138;
      if (!v138)
        return;
      v139 = (char *)v138;
      break;
    case 8:
      v132 = 0;
      v133 = 0;
      v134 = 0;
      v31 = *(const void **)a3;
      v30 = *(_QWORD *)(a3 + 8);
      v32 = v30 - *(_QWORD *)a3;
      if (v30 == *(_QWORD *)a3)
        goto LABEL_25;
      if (v32 < 0)
        goto LABEL_94;
      v33 = (char *)operator new(v30 - *(_QWORD *)a3);
      v34 = &v33[8 * (v32 >> 3)];
      v132 = v33;
      v134 = v34;
      memcpy(v33, v31, v32);
      v133 = v34;
LABEL_25:
      v129 = 0;
      v130 = 0;
      v131 = 0;
      v35 = *(const void **)a4;
      v36 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v36)
        goto LABEL_28;
      if (v36 < 0)
        goto LABEL_94;
      v37 = (char *)operator new(v36);
      v38 = &v37[8 * (v36 >> 3)];
      v129 = v37;
      v131 = v38;
      memcpy(v37, v35, v36);
      v130 = v38;
LABEL_28:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)8>(a1, a2, (const void **)&v132, (const void **)&v129);
      if (v129)
      {
        v130 = v129;
        operator delete(v129);
      }
      v20 = v132;
      if (!v132)
        return;
      v133 = (char *)v132;
      break;
    case 9:
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v40 = *(const void **)a3;
      v39 = *(_QWORD *)(a3 + 8);
      v41 = v39 - *(_QWORD *)a3;
      if (v39 == *(_QWORD *)a3)
        goto LABEL_35;
      if (v41 < 0)
        goto LABEL_94;
      v42 = (char *)operator new(v39 - *(_QWORD *)a3);
      v43 = &v42[8 * (v41 >> 3)];
      v126 = v42;
      v128 = v43;
      memcpy(v42, v40, v41);
      v127 = v43;
LABEL_35:
      __p = 0;
      v124 = 0;
      v125 = 0;
      v44 = *(const void **)a4;
      v45 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v45)
        goto LABEL_38;
      if (v45 < 0)
        goto LABEL_94;
      v46 = (char *)operator new(v45);
      v47 = &v46[8 * (v45 >> 3)];
      __p = v46;
      v125 = v47;
      memcpy(v46, v44, v45);
      v124 = v47;
LABEL_38:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)9>(a1, a2, (const void **)&v126, (const void **)&__p, 0.0);
      if (__p)
      {
        v124 = __p;
        operator delete(__p);
      }
      v20 = v126;
      if (!v126)
        return;
      v127 = (char *)v126;
      break;
    case 0xA:
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v49 = *(const void **)a3;
      v48 = *(_QWORD *)(a3 + 8);
      v50 = v48 - *(_QWORD *)a3;
      if (v48 == *(_QWORD *)a3)
        goto LABEL_45;
      if (v50 < 0)
        goto LABEL_94;
      v51 = (char *)operator new(v48 - *(_QWORD *)a3);
      v52 = &v51[8 * (v50 >> 3)];
      v120 = v51;
      v122 = v52;
      memcpy(v51, v49, v50);
      v121 = v52;
LABEL_45:
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v53 = *(const void **)a4;
      v54 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v54)
        goto LABEL_48;
      if (v54 < 0)
        goto LABEL_94;
      v55 = (char *)operator new(v54);
      v56 = &v55[8 * (v54 >> 3)];
      v117 = v55;
      v119 = v56;
      memcpy(v55, v53, v54);
      v118 = v56;
LABEL_48:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)10>(a1, a2, (const void **)&v120, (const void **)&v117, 0.0);
      if (v117)
      {
        v118 = v117;
        operator delete(v117);
      }
      v20 = v120;
      if (!v120)
        return;
      v121 = (char *)v120;
      break;
    case 0xB:
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v58 = *(const void **)a3;
      v57 = *(_QWORD *)(a3 + 8);
      v59 = v57 - *(_QWORD *)a3;
      if (v57 == *(_QWORD *)a3)
        goto LABEL_55;
      if (v59 < 0)
        goto LABEL_94;
      v60 = (char *)operator new(v57 - *(_QWORD *)a3);
      v61 = &v60[8 * (v59 >> 3)];
      v114 = v60;
      v116 = v61;
      memcpy(v60, v58, v59);
      v115 = v61;
LABEL_55:
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v62 = *(const void **)a4;
      v63 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v63)
        goto LABEL_58;
      if (v63 < 0)
        goto LABEL_94;
      v64 = (char *)operator new(v63);
      v65 = &v64[8 * (v63 >> 3)];
      v111 = v64;
      v113 = v65;
      memcpy(v64, v62, v63);
      v112 = v65;
LABEL_58:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)11>(a1, a2, (const void **)&v114, (const void **)&v111);
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      v20 = v114;
      if (!v114)
        return;
      v115 = (char *)v114;
      break;
    case 0xC:
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v67 = *(const void **)a3;
      v66 = *(_QWORD *)(a3 + 8);
      v68 = v66 - *(_QWORD *)a3;
      if (v66 == *(_QWORD *)a3)
        goto LABEL_65;
      if (v68 < 0)
        goto LABEL_94;
      v69 = (char *)operator new(v66 - *(_QWORD *)a3);
      v70 = &v69[8 * (v68 >> 3)];
      v108 = v69;
      v110 = v70;
      memcpy(v69, v67, v68);
      v109 = v70;
LABEL_65:
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v71 = *(const void **)a4;
      v72 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v72)
        goto LABEL_68;
      if (v72 < 0)
        goto LABEL_94;
      v73 = (char *)operator new(v72);
      v74 = &v73[8 * (v72 >> 3)];
      v105 = v73;
      v107 = v74;
      memcpy(v73, v71, v72);
      v106 = v74;
LABEL_68:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)12>(a1, a2, (const void **)&v108, (const void **)&v105, 0.0);
      if (v105)
      {
        v106 = v105;
        operator delete(v105);
      }
      v20 = v108;
      if (!v108)
        return;
      v109 = (char *)v108;
      break;
    case 0xD:
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v76 = *(const void **)a3;
      v75 = *(_QWORD *)(a3 + 8);
      v77 = v75 - *(_QWORD *)a3;
      if (v75 == *(_QWORD *)a3)
        goto LABEL_75;
      if (v77 < 0)
        goto LABEL_94;
      v78 = (char *)operator new(v75 - *(_QWORD *)a3);
      v79 = &v78[8 * (v77 >> 3)];
      v102 = v78;
      v104 = v79;
      memcpy(v78, v76, v77);
      v103 = v79;
LABEL_75:
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v80 = *(const void **)a4;
      v81 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v81)
        goto LABEL_78;
      if (v81 < 0)
        goto LABEL_94;
      v82 = (char *)operator new(v81);
      v83 = &v82[8 * (v81 >> 3)];
      v99 = v82;
      v101 = v83;
      memcpy(v82, v80, v81);
      v100 = v83;
LABEL_78:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)13>(a1, a2, (const void **)&v102, (const void **)&v99, 0);
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v20 = v102;
      if (!v102)
        return;
      v103 = (char *)v102;
      break;
    case 0xE:
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v85 = *(const void **)a3;
      v84 = *(_QWORD *)(a3 + 8);
      v86 = v84 - *(_QWORD *)a3;
      if (v84 == *(_QWORD *)a3)
        goto LABEL_85;
      if (v86 < 0)
        goto LABEL_94;
      v87 = (char *)operator new(v84 - *(_QWORD *)a3);
      v88 = &v87[8 * (v86 >> 3)];
      v96 = v87;
      v98 = v88;
      memcpy(v87, v85, v86);
      v97 = v88;
LABEL_85:
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v89 = *(const void **)a4;
      v90 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v90)
        goto LABEL_88;
      if (v90 < 0)
LABEL_94:
        abort();
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v93 = v91;
      v95 = v92;
      memcpy(v91, v89, v90);
      v94 = v92;
LABEL_88:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)14>(a1, a2, (const void **)&v96, (const void **)&v93, 0.0);
      if (v93)
      {
        v94 = v93;
        operator delete(v93);
      }
      v20 = v96;
      if (!v96)
        return;
      v97 = v96;
      break;
    default:
      return;
  }
  operator delete(v20);
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v198, &v195, a5);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v192, &v189, a5);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)6>(a1, a2, &v168, (uint64_t **)&v165, a5);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v174, (uint64_t **)&v171, a5);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v150, (uint64_t **)&v147, a5);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)6>(a1, a2, &v144, (uint64_t **)&v141, a5);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)6>(a1, a2, &v138, (uint64_t **)&v135, a5);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)6>(a1, a2, &v132, (uint64_t **)&v129, a5);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)6>(a1, a2, v122, (uint64_t **)v121, a5);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)6>((uint64_t)a1, a2, (uint64_t **)v120, (uint64_t **)v119, a5);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)6>(a1, a2, &v126, (uint64_t **)&v123, a5);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)6>(a1, a2, &v156, (uint64_t **)&v153, a5);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v162, (uint64_t **)&v159, a5);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v180, (uint64_t **)&__p, a5);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  const void *v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  const void *v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  const void *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  const void *v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  void *v117[3];
  void *v118[3];
  void *v119[3];
  uint64_t *v120[3];
  void *v121;
  void *v122;
  char *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  void *v127;
  void *v128;
  char *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  void *v134;
  char *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  void *v139;
  void *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  void *v145;
  void *v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  void *v157;
  void *v158;
  char *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  void *v169;
  void *v170;
  char *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  void *__p;
  void *v176;
  char *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  void *v181;
  void *v182;
  char *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t Value;
  uint64_t v203;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v203 = ElementType;
  v201 = *(_QWORD *)**a2;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v201);
  v201 = v9;
  Value = v9;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v200 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v11 = ElementType;
    else
      v11 = 0;
    v199 = v11;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v200);
    v203 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v199);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
  {
    if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v77 = *a3;
      v78 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v78)
      {
        if (v78 < 0)
          goto LABEL_169;
        v79 = (uint64_t *)operator new(v78);
        v80 = &v79[v78 >> 3];
        v196 = v79;
        v198 = v80;
        memcpy(v79, v77, v78);
        v197 = v80;
      }
      v193 = 0;
      v194 = 0;
      v195 = 0;
      v81 = *a4;
      v82 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v193 = v83;
        v195 = v84;
        memcpy(v83, v81, v82);
        v194 = v84;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v196, &v193);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      v20 = v196;
      if (v196)
      {
        v197 = v196;
        goto LABEL_167;
      }
      return;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v12 = *a3;
    v13 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_169;
      v14 = (uint64_t *)operator new(v13);
      v15 = &v14[v13 >> 3];
      v190 = v14;
      v192 = v15;
      memcpy(v14, v12, v13);
      v191 = v15;
    }
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v16 = *a4;
    v17 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v17)
      goto LABEL_15;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v18 = (uint64_t *)operator new(v17);
      v19 = &v18[v17 >> 3];
      v187 = v18;
      v189 = v19;
      memcpy(v18, v16, v17);
      v188 = v19;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v190, &v187);
      if (v187)
      {
        v188 = v187;
        operator delete(v187);
      }
      v20 = v190;
      if (v190)
      {
        v191 = v190;
LABEL_167:
        operator delete(v20);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v203))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v203))
    {
      if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v29 = *a3;
        v30 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v30)
        {
          if (v30 < 0)
            goto LABEL_169;
          v31 = (uint64_t *)operator new(v30);
          v32 = &v31[v30 >> 3];
          v166 = v31;
          v168 = v32;
          memcpy(v31, v29, v30);
          v167 = v32;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v33 = *a4;
        v34 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v34)
        {
          if (v34 < 0)
            goto LABEL_169;
          v35 = (char *)operator new(v34);
          v36 = &v35[8 * (v34 >> 3)];
          v163 = v35;
          v165 = v36;
          memcpy(v35, v33, v34);
          v164 = v36;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)7>(a1, a2, &v166, (uint64_t **)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        v20 = v166;
        if (v166)
        {
          v167 = v166;
          goto LABEL_167;
        }
        return;
      }
      v173 = 0;
      v172 = 0;
      v174 = 0;
      v101 = *a3;
      v102 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (uint64_t *)operator new(v102);
        v104 = &v103[v102 >> 3];
        v172 = v103;
        v174 = v104;
        memcpy(v103, v101, v102);
        v173 = v104;
      }
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v105 = *a4;
      v106 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (char *)operator new(v106);
        v108 = &v107[8 * (v106 >> 3)];
        v169 = v107;
        v171 = v108;
        memcpy(v107, v105, v106);
        v170 = v108;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v172, (uint64_t **)&v169);
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v20 = v172;
      if (v172)
      {
        v173 = v172;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v203))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v45 = *a3;
        v46 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v46)
        {
          if (v46 < 0)
            goto LABEL_169;
          v47 = (uint64_t *)operator new(v46);
          v48 = &v47[v46 >> 3];
          v148 = v47;
          v150 = v48;
          memcpy(v47, v45, v46);
          v149 = v48;
        }
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v49 = *a4;
        v50 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (char *)operator new(v50);
          v52 = &v51[8 * (v50 >> 3)];
          v145 = v51;
          v147 = v52;
          memcpy(v51, v49, v50);
          v146 = v52;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v148, (uint64_t **)&v145);
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        v20 = v148;
        if (v148)
        {
          v149 = v148;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v53 = *a3;
        v54 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (uint64_t *)operator new(v54);
          v56 = &v55[v54 >> 3];
          v142 = v55;
          v144 = v56;
          memcpy(v55, v53, v54);
          v143 = v56;
        }
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v57 = *a4;
        v58 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (char *)operator new(v58);
          v60 = &v59[8 * (v58 >> 3)];
          v139 = v59;
          v141 = v60;
          memcpy(v59, v57, v58);
          v140 = v60;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)7>(a1, a2, &v142, (uint64_t **)&v139);
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        v20 = v142;
        if (v142)
        {
          v143 = v142;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v61 = *a3;
        v62 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (uint64_t *)operator new(v62);
          v64 = &v63[v62 >> 3];
          v136 = v63;
          v138 = v64;
          memcpy(v63, v61, v62);
          v137 = v64;
        }
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v65 = *a4;
        v66 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v133 = v67;
          v135 = v68;
          memcpy(v67, v65, v66);
          v134 = v68;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)7>(a1, a2, &v136, (uint64_t **)&v133);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v20 = v136;
        if (v136)
        {
          v137 = v136;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v69 = *a3;
        v70 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (uint64_t *)operator new(v70);
          v72 = &v71[v70 >> 3];
          v130 = v71;
          v132 = v72;
          memcpy(v71, v69, v70);
          v131 = v72;
        }
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v73 = *a4;
        v74 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v127 = v75;
          v129 = v76;
          memcpy(v75, v73, v74);
          v128 = v76;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v130, (uint64_t **)&v127);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v20 = v130;
        if (v130)
        {
          v131 = v130;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v20 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v118, (uint64_t)a3);
          std::vector<long long>::vector(v117, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v118, (uint64_t **)v117);
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          v20 = (uint64_t *)v118[0];
          if (v118[0])
          {
            v118[1] = v118[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v93 = *a3;
      v94 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_169;
        v95 = (uint64_t *)operator new(v94);
        v96 = &v95[v94 >> 3];
        v124 = v95;
        v126 = v96;
        memcpy(v95, v93, v94);
        v125 = v96;
      }
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v97 = *a4;
      v98 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v121 = v99;
        v123 = v100;
        memcpy(v99, v97, v98);
        v122 = v100;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v124, (uint64_t **)&v121);
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      v20 = v124;
      if (v124)
      {
        v125 = v124;
        goto LABEL_167;
      }
      return;
    }
    if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v37 = *a3;
      v38 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v38)
      {
        if (v38 < 0)
          goto LABEL_169;
        v39 = (uint64_t *)operator new(v38);
        v40 = &v39[v38 >> 3];
        v154 = v39;
        v156 = v40;
        memcpy(v39, v37, v38);
        v155 = v40;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v41 = *a4;
      v42 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (char *)operator new(v42);
        v44 = &v43[8 * (v42 >> 3)];
        v151 = v43;
        v153 = v44;
        memcpy(v43, v41, v42);
        v152 = v44;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)7>(a1, a2, &v154, (uint64_t **)&v151);
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      v20 = v154;
      if (v154)
      {
        v155 = v154;
        goto LABEL_167;
      }
      return;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v109 = *a3;
    v110 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_169;
      v111 = (uint64_t *)operator new(v110);
      v112 = &v111[v110 >> 3];
      v160 = v111;
      v162 = v112;
      memcpy(v111, v109, v110);
      v161 = v112;
    }
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v113 = *a4;
    v114 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v157 = v115;
      v159 = v116;
      memcpy(v115, v113, v114);
      v158 = v116;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v160, (uint64_t **)&v157);
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    v20 = v160;
    if (v160)
    {
      v161 = v160;
      goto LABEL_167;
    }
    return;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v85 = *a3;
    v86 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v86)
    {
      if (v86 < 0)
        goto LABEL_169;
      v87 = (uint64_t *)operator new(v86);
      v88 = &v87[v86 >> 3];
      v184 = v87;
      v186 = v88;
      memcpy(v87, v85, v86);
      v185 = v88;
    }
    v182 = 0;
    v181 = 0;
    v183 = 0;
    v89 = *a4;
    v90 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v181 = v91;
      v183 = v92;
      memcpy(v91, v89, v90);
      v182 = v92;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v184, (uint64_t **)&v181);
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    v20 = v184;
    if (v184)
    {
      v185 = v184;
      goto LABEL_167;
    }
    return;
  }
  v179 = 0;
  v178 = 0;
  v180 = 0;
  v21 = *a3;
  v22 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v22)
  {
    if (v22 < 0)
      goto LABEL_169;
    v23 = (uint64_t *)operator new(v22);
    v24 = &v23[v22 >> 3];
    v178 = v23;
    v180 = v24;
    memcpy(v23, v21, v22);
    v179 = v24;
  }
  v176 = 0;
  __p = 0;
  v177 = 0;
  v25 = *a4;
  v26 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v26)
  {
    if (v26 < 0)
      goto LABEL_169;
    v27 = (char *)operator new(v26);
    v28 = &v27[8 * (v26 >> 3)];
    __p = v27;
    v177 = v28;
    memcpy(v27, v25, v26);
    v176 = v28;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v178, (uint64_t **)&__p);
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  v20 = v178;
  if (v178)
  {
    v179 = v178;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  const void *v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  const void *v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  const void *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  const void *v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  void *v117[3];
  void *v118[3];
  void *v119[3];
  uint64_t *v120[3];
  void *v121;
  void *v122;
  char *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  void *v127;
  void *v128;
  char *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  void *v134;
  char *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  void *v139;
  void *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  void *v145;
  void *v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  void *v157;
  void *v158;
  char *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  void *v169;
  void *v170;
  char *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  void *__p;
  void *v176;
  char *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  void *v181;
  void *v182;
  char *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t Value;
  uint64_t v203;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v203 = ElementType;
  v201 = *(_QWORD *)**a2;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v201);
  v201 = v9;
  Value = v9;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v200 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v11 = ElementType;
    else
      v11 = 0;
    v199 = v11;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v200);
    v203 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v199);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
  {
    if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v77 = *a3;
      v78 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v78)
      {
        if (v78 < 0)
          goto LABEL_169;
        v79 = (uint64_t *)operator new(v78);
        v80 = &v79[v78 >> 3];
        v196 = v79;
        v198 = v80;
        memcpy(v79, v77, v78);
        v197 = v80;
      }
      v193 = 0;
      v194 = 0;
      v195 = 0;
      v81 = *a4;
      v82 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v193 = v83;
        v195 = v84;
        memcpy(v83, v81, v82);
        v194 = v84;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v196, &v193);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      v20 = v196;
      if (v196)
      {
        v197 = v196;
        goto LABEL_167;
      }
      return;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v12 = *a3;
    v13 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_169;
      v14 = (uint64_t *)operator new(v13);
      v15 = &v14[v13 >> 3];
      v190 = v14;
      v192 = v15;
      memcpy(v14, v12, v13);
      v191 = v15;
    }
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v16 = *a4;
    v17 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v17)
      goto LABEL_15;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v18 = (uint64_t *)operator new(v17);
      v19 = &v18[v17 >> 3];
      v187 = v18;
      v189 = v19;
      memcpy(v18, v16, v17);
      v188 = v19;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v190, &v187);
      if (v187)
      {
        v188 = v187;
        operator delete(v187);
      }
      v20 = v190;
      if (v190)
      {
        v191 = v190;
LABEL_167:
        operator delete(v20);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v203))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v203))
    {
      if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v29 = *a3;
        v30 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v30)
        {
          if (v30 < 0)
            goto LABEL_169;
          v31 = (uint64_t *)operator new(v30);
          v32 = &v31[v30 >> 3];
          v166 = v31;
          v168 = v32;
          memcpy(v31, v29, v30);
          v167 = v32;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v33 = *a4;
        v34 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v34)
        {
          if (v34 < 0)
            goto LABEL_169;
          v35 = (char *)operator new(v34);
          v36 = &v35[8 * (v34 >> 3)];
          v163 = v35;
          v165 = v36;
          memcpy(v35, v33, v34);
          v164 = v36;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)8>(a1, a2, &v166, (uint64_t **)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        v20 = v166;
        if (v166)
        {
          v167 = v166;
          goto LABEL_167;
        }
        return;
      }
      v173 = 0;
      v172 = 0;
      v174 = 0;
      v101 = *a3;
      v102 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (uint64_t *)operator new(v102);
        v104 = &v103[v102 >> 3];
        v172 = v103;
        v174 = v104;
        memcpy(v103, v101, v102);
        v173 = v104;
      }
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v105 = *a4;
      v106 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (char *)operator new(v106);
        v108 = &v107[8 * (v106 >> 3)];
        v169 = v107;
        v171 = v108;
        memcpy(v107, v105, v106);
        v170 = v108;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v172, (uint64_t **)&v169);
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v20 = v172;
      if (v172)
      {
        v173 = v172;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v203))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v45 = *a3;
        v46 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v46)
        {
          if (v46 < 0)
            goto LABEL_169;
          v47 = (uint64_t *)operator new(v46);
          v48 = &v47[v46 >> 3];
          v148 = v47;
          v150 = v48;
          memcpy(v47, v45, v46);
          v149 = v48;
        }
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v49 = *a4;
        v50 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (char *)operator new(v50);
          v52 = &v51[8 * (v50 >> 3)];
          v145 = v51;
          v147 = v52;
          memcpy(v51, v49, v50);
          v146 = v52;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v148, (uint64_t **)&v145);
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        v20 = v148;
        if (v148)
        {
          v149 = v148;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v53 = *a3;
        v54 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (uint64_t *)operator new(v54);
          v56 = &v55[v54 >> 3];
          v142 = v55;
          v144 = v56;
          memcpy(v55, v53, v54);
          v143 = v56;
        }
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v57 = *a4;
        v58 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (char *)operator new(v58);
          v60 = &v59[8 * (v58 >> 3)];
          v139 = v59;
          v141 = v60;
          memcpy(v59, v57, v58);
          v140 = v60;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)8>(a1, a2, &v142, (uint64_t **)&v139);
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        v20 = v142;
        if (v142)
        {
          v143 = v142;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v61 = *a3;
        v62 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (uint64_t *)operator new(v62);
          v64 = &v63[v62 >> 3];
          v136 = v63;
          v138 = v64;
          memcpy(v63, v61, v62);
          v137 = v64;
        }
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v65 = *a4;
        v66 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v133 = v67;
          v135 = v68;
          memcpy(v67, v65, v66);
          v134 = v68;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)8>(a1, a2, &v136, (uint64_t **)&v133);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v20 = v136;
        if (v136)
        {
          v137 = v136;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v69 = *a3;
        v70 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (uint64_t *)operator new(v70);
          v72 = &v71[v70 >> 3];
          v130 = v71;
          v132 = v72;
          memcpy(v71, v69, v70);
          v131 = v72;
        }
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v73 = *a4;
        v74 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v127 = v75;
          v129 = v76;
          memcpy(v75, v73, v74);
          v128 = v76;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v130, (uint64_t **)&v127);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v20 = v130;
        if (v130)
        {
          v131 = v130;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v20 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v118, (uint64_t)a3);
          std::vector<long long>::vector(v117, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v118, (uint64_t **)v117);
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          v20 = (uint64_t *)v118[0];
          if (v118[0])
          {
            v118[1] = v118[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v93 = *a3;
      v94 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_169;
        v95 = (uint64_t *)operator new(v94);
        v96 = &v95[v94 >> 3];
        v124 = v95;
        v126 = v96;
        memcpy(v95, v93, v94);
        v125 = v96;
      }
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v97 = *a4;
      v98 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v121 = v99;
        v123 = v100;
        memcpy(v99, v97, v98);
        v122 = v100;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v124, (uint64_t **)&v121);
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      v20 = v124;
      if (v124)
      {
        v125 = v124;
        goto LABEL_167;
      }
      return;
    }
    if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v37 = *a3;
      v38 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v38)
      {
        if (v38 < 0)
          goto LABEL_169;
        v39 = (uint64_t *)operator new(v38);
        v40 = &v39[v38 >> 3];
        v154 = v39;
        v156 = v40;
        memcpy(v39, v37, v38);
        v155 = v40;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v41 = *a4;
      v42 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (char *)operator new(v42);
        v44 = &v43[8 * (v42 >> 3)];
        v151 = v43;
        v153 = v44;
        memcpy(v43, v41, v42);
        v152 = v44;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)8>(a1, a2, &v154, (uint64_t **)&v151);
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      v20 = v154;
      if (v154)
      {
        v155 = v154;
        goto LABEL_167;
      }
      return;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v109 = *a3;
    v110 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_169;
      v111 = (uint64_t *)operator new(v110);
      v112 = &v111[v110 >> 3];
      v160 = v111;
      v162 = v112;
      memcpy(v111, v109, v110);
      v161 = v112;
    }
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v113 = *a4;
    v114 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v157 = v115;
      v159 = v116;
      memcpy(v115, v113, v114);
      v158 = v116;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v160, (uint64_t **)&v157);
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    v20 = v160;
    if (v160)
    {
      v161 = v160;
      goto LABEL_167;
    }
    return;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v85 = *a3;
    v86 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v86)
    {
      if (v86 < 0)
        goto LABEL_169;
      v87 = (uint64_t *)operator new(v86);
      v88 = &v87[v86 >> 3];
      v184 = v87;
      v186 = v88;
      memcpy(v87, v85, v86);
      v185 = v88;
    }
    v182 = 0;
    v181 = 0;
    v183 = 0;
    v89 = *a4;
    v90 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v181 = v91;
      v183 = v92;
      memcpy(v91, v89, v90);
      v182 = v92;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v184, (uint64_t **)&v181);
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    v20 = v184;
    if (v184)
    {
      v185 = v184;
      goto LABEL_167;
    }
    return;
  }
  v179 = 0;
  v178 = 0;
  v180 = 0;
  v21 = *a3;
  v22 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v22)
  {
    if (v22 < 0)
      goto LABEL_169;
    v23 = (uint64_t *)operator new(v22);
    v24 = &v23[v22 >> 3];
    v178 = v23;
    v180 = v24;
    memcpy(v23, v21, v22);
    v179 = v24;
  }
  v176 = 0;
  __p = 0;
  v177 = 0;
  v25 = *a4;
  v26 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v26)
  {
    if (v26 < 0)
      goto LABEL_169;
    v27 = (char *)operator new(v26);
    v28 = &v27[8 * (v26 >> 3)];
    __p = v27;
    v177 = v28;
    memcpy(v27, v25, v26);
    v176 = v28;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v178, (uint64_t **)&__p);
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  v20 = v178;
  if (v178)
  {
    v179 = v178;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v198, &v195);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v192, &v189);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)9>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)9>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)9>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)9>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)9>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)9>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)9>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)9>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  float v31;
  const void *v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  const void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  float v40;
  const void *v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  const void *v45;
  int64_t v46;
  char *v47;
  char *v48;
  const void *v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  const void *v53;
  int64_t v54;
  char *v55;
  char *v56;
  const void *v57;
  int64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  const void *v61;
  int64_t v62;
  char *v63;
  char *v64;
  const void *v65;
  int64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  const void *v69;
  int64_t v70;
  char *v71;
  char *v72;
  const void *v73;
  int64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  const void *v77;
  int64_t v78;
  char *v79;
  char *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  const void *v93;
  int64_t v94;
  char *v95;
  char *v96;
  const void *v97;
  int64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  const void *v101;
  int64_t v102;
  char *v103;
  char *v104;
  const void *v105;
  int64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  const void *v109;
  int64_t v110;
  char *v111;
  char *v112;
  const void *v113;
  int64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  const void *v117;
  int64_t v118;
  char *v119;
  char *v120;
  void *v121[3];
  void *v122[3];
  void *v123[3];
  uint64_t *v124[3];
  void *v125;
  void *v126;
  char *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  void *v131;
  void *v132;
  char *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  void *v137;
  void *v138;
  char *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  void *v143;
  void *v144;
  char *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  void *v149;
  void *v150;
  char *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  void *v155;
  void *v156;
  char *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  void *v161;
  void *v162;
  char *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  void *v167;
  void *v168;
  char *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  void *v173;
  void *v174;
  char *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  void *__p;
  void *v180;
  char *v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  void *v185;
  void *v186;
  char *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t Value;
  uint64_t v207;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v207 = ElementType;
  v205 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v205);
  v205 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v204 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v203 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
    v207 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v207))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v81 = *a3;
      v82 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v200 = v83;
        v202 = v84;
        memcpy(v83, v81, v82);
        v201 = v84;
      }
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v85 = *a4;
      v86 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v86)
      {
        if (v86 < 0)
          goto LABEL_169;
        v87 = (uint64_t *)operator new(v86);
        v88 = &v87[v86 >> 3];
        v197 = v87;
        v199 = v88;
        memcpy(v87, v85, v86);
        v198 = v88;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v200, &v197);
      if (v197)
      {
        v198 = v197;
        operator delete(v197);
      }
      v22 = v200;
      if (v200)
      {
        v201 = v200;
        goto LABEL_167;
      }
      return;
    }
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v194 = v16;
      v196 = v17;
      memcpy(v16, v14, v15);
      v195 = v17;
    }
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v191 = v20;
      v193 = v21;
      memcpy(v20, v18, v19);
      v192 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v194, &v191);
      if (v191)
      {
        v192 = v191;
        operator delete(v191);
      }
      v22 = v194;
      if (v194)
      {
        v195 = v194;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v207))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v207))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v170 = 0;
        v171 = 0;
        v172 = 0;
        v32 = *a3;
        v33 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v33)
        {
          if (v33 < 0)
            goto LABEL_169;
          v34 = (uint64_t *)operator new(v33);
          v35 = &v34[v33 >> 3];
          v170 = v34;
          v172 = v35;
          memcpy(v34, v32, v33);
          v171 = v35;
        }
        v167 = 0;
        v168 = 0;
        v169 = 0;
        v36 = *a4;
        v37 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v37)
        {
          if (v37 < 0)
            goto LABEL_169;
          v38 = (char *)operator new(v37);
          v39 = &v38[8 * (v37 >> 3)];
          v167 = v38;
          v169 = v39;
          memcpy(v38, v36, v37);
          v168 = v39;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)10>(a1, a2, &v170, (uint64_t **)&v167, a5, v31);
        if (v167)
        {
          v168 = v167;
          operator delete(v167);
        }
        v22 = v170;
        if (v170)
        {
          v171 = v170;
          goto LABEL_167;
        }
        return;
      }
      v177 = 0;
      v176 = 0;
      v178 = 0;
      v105 = *a3;
      v106 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (uint64_t *)operator new(v106);
        v108 = &v107[v106 >> 3];
        v176 = v107;
        v178 = v108;
        memcpy(v107, v105, v106);
        v177 = v108;
      }
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v109 = *a4;
      v110 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v110)
      {
        if (v110 < 0)
          goto LABEL_169;
        v111 = (char *)operator new(v110);
        v112 = &v111[8 * (v110 >> 3)];
        v173 = v111;
        v175 = v112;
        memcpy(v111, v109, v110);
        v174 = v112;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v176, (uint64_t **)&v173);
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      v22 = v176;
      if (v176)
      {
        v177 = v176;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v207))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v207))
      {
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v49 = *a3;
        v50 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (uint64_t *)operator new(v50);
          v52 = &v51[v50 >> 3];
          v152 = v51;
          v154 = v52;
          memcpy(v51, v49, v50);
          v153 = v52;
        }
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v53 = *a4;
        v54 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (char *)operator new(v54);
          v56 = &v55[8 * (v54 >> 3)];
          v149 = v55;
          v151 = v56;
          memcpy(v55, v53, v54);
          v150 = v56;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v152, (uint64_t **)&v149);
        if (v149)
        {
          v150 = v149;
          operator delete(v149);
        }
        v22 = v152;
        if (v152)
        {
          v153 = v152;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v207))
      {
        v146 = 0;
        v147 = 0;
        v148 = 0;
        v57 = *a3;
        v58 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (uint64_t *)operator new(v58);
          v60 = &v59[v58 >> 3];
          v146 = v59;
          v148 = v60;
          memcpy(v59, v57, v58);
          v147 = v60;
        }
        v143 = 0;
        v144 = 0;
        v145 = 0;
        v61 = *a4;
        v62 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (char *)operator new(v62);
          v64 = &v63[8 * (v62 >> 3)];
          v143 = v63;
          v145 = v64;
          memcpy(v63, v61, v62);
          v144 = v64;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)10>(a1, a2, &v146, (uint64_t **)&v143);
        if (v143)
        {
          v144 = v143;
          operator delete(v143);
        }
        v22 = v146;
        if (v146)
        {
          v147 = v146;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v207))
      {
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v65 = *a3;
        v66 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (uint64_t *)operator new(v66);
          v68 = &v67[v66 >> 3];
          v140 = v67;
          v142 = v68;
          memcpy(v67, v65, v66);
          v141 = v68;
        }
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v69 = *a4;
        v70 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (char *)operator new(v70);
          v72 = &v71[8 * (v70 >> 3)];
          v137 = v71;
          v139 = v72;
          memcpy(v71, v69, v70);
          v138 = v72;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)10>(a1, a2, &v140, (uint64_t **)&v137);
        if (v137)
        {
          v138 = v137;
          operator delete(v137);
        }
        v22 = v140;
        if (v140)
        {
          v141 = v140;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v134 = 0;
        v135 = 0;
        v136 = 0;
        v73 = *a3;
        v74 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (uint64_t *)operator new(v74);
          v76 = &v75[v74 >> 3];
          v134 = v75;
          v136 = v76;
          memcpy(v75, v73, v74);
          v135 = v76;
        }
        v131 = 0;
        v132 = 0;
        v133 = 0;
        v77 = *a4;
        v78 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v78)
        {
          if (v78 < 0)
            goto LABEL_169;
          v79 = (char *)operator new(v78);
          v80 = &v79[8 * (v78 >> 3)];
          v131 = v79;
          v133 = v80;
          memcpy(v79, v77, v78);
          v132 = v80;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)10>(a1, a2, &v134, (uint64_t **)&v131);
        if (v131)
        {
          v132 = v131;
          operator delete(v131);
        }
        v22 = v134;
        if (v134)
        {
          v135 = v134;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v124, (uint64_t)a3);
          std::vector<long long>::vector(v123, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)10>(a1, a2, v124, (uint64_t **)v123);
          if (v123[0])
          {
            v123[1] = v123[0];
            operator delete(v123[0]);
          }
          v22 = v124[0];
          if (v124[0])
          {
            v124[1] = v124[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)10>(a1, a2, (uint64_t **)v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = (uint64_t *)v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v97 = *a3;
      v98 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (uint64_t *)operator new(v98);
        v100 = &v99[v98 >> 3];
        v128 = v99;
        v130 = v100;
        memcpy(v99, v97, v98);
        v129 = v100;
      }
      v125 = 0;
      v126 = 0;
      v127 = 0;
      v101 = *a4;
      v102 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (char *)operator new(v102);
        v104 = &v103[8 * (v102 >> 3)];
        v125 = v103;
        v127 = v104;
        memcpy(v103, v101, v102);
        v126 = v104;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)10>(a1, a2, &v128, (uint64_t **)&v125);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      v22 = v128;
      if (v128)
      {
        v129 = v128;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v41 = *a3;
      v42 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (uint64_t *)operator new(v42);
        v44 = &v43[v42 >> 3];
        v158 = v43;
        v160 = v44;
        memcpy(v43, v41, v42);
        v159 = v44;
      }
      v155 = 0;
      v156 = 0;
      v157 = 0;
      v45 = *a4;
      v46 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v46)
      {
        if (v46 < 0)
          goto LABEL_169;
        v47 = (char *)operator new(v46);
        v48 = &v47[8 * (v46 >> 3)];
        v155 = v47;
        v157 = v48;
        memcpy(v47, v45, v46);
        v156 = v48;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)10>(a1, a2, &v158, (uint64_t **)&v155, a5, v40);
      if (v155)
      {
        v156 = v155;
        operator delete(v155);
      }
      v22 = v158;
      if (v158)
      {
        v159 = v158;
        goto LABEL_167;
      }
      return;
    }
    v164 = 0;
    v165 = 0;
    v166 = 0;
    v113 = *a3;
    v114 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (uint64_t *)operator new(v114);
      v116 = &v115[v114 >> 3];
      v164 = v115;
      v166 = v116;
      memcpy(v115, v113, v114);
      v165 = v116;
    }
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v117 = *a4;
    v118 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v118)
    {
      if (v118 < 0)
        goto LABEL_169;
      v119 = (char *)operator new(v118);
      v120 = &v119[8 * (v118 >> 3)];
      v161 = v119;
      v163 = v120;
      memcpy(v119, v117, v118);
      v162 = v120;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v164, (uint64_t **)&v161);
    if (v161)
    {
      v162 = v161;
      operator delete(v161);
    }
    v22 = v164;
    if (v164)
    {
      v165 = v164;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v89 = *a3;
    v90 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (uint64_t *)operator new(v90);
      v92 = &v91[v90 >> 3];
      v188 = v91;
      v190 = v92;
      memcpy(v91, v89, v90);
      v189 = v92;
    }
    v186 = 0;
    v185 = 0;
    v187 = 0;
    v93 = *a4;
    v94 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v94)
    {
      if (v94 < 0)
        goto LABEL_169;
      v95 = (char *)operator new(v94);
      v96 = &v95[8 * (v94 >> 3)];
      v185 = v95;
      v187 = v96;
      memcpy(v95, v93, v94);
      v186 = v96;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v188, (uint64_t **)&v185);
    if (v185)
    {
      v186 = v185;
      operator delete(v185);
    }
    v22 = v188;
    if (v188)
    {
      v189 = v188;
      goto LABEL_167;
    }
    return;
  }
  v183 = 0;
  v182 = 0;
  v184 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v182 = v25;
    v184 = v26;
    memcpy(v25, v23, v24);
    v183 = v26;
  }
  v180 = 0;
  __p = 0;
  v181 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v181 = v30;
    memcpy(v29, v27, v28);
    v180 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v182, (uint64_t **)&__p);
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  v22 = v182;
  if (v182)
  {
    v183 = v182;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  const void *v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  const void *v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  const void *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  const void *v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  void *v117[3];
  void *v118[3];
  void *v119[3];
  uint64_t *v120[3];
  void *v121;
  void *v122;
  char *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  void *v127;
  void *v128;
  char *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  void *v134;
  char *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  void *v139;
  void *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  void *v145;
  void *v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  void *v157;
  void *v158;
  char *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  void *v169;
  void *v170;
  char *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  void *__p;
  void *v176;
  char *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  void *v181;
  void *v182;
  char *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t Value;
  uint64_t v203;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v203 = ElementType;
  v201 = *(_QWORD *)**a2;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v201);
  v201 = v9;
  Value = v9;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v200 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v11 = ElementType;
    else
      v11 = 0;
    v199 = v11;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v200);
    v203 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v199);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
  {
    if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v77 = *a3;
      v78 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v78)
      {
        if (v78 < 0)
          goto LABEL_169;
        v79 = (uint64_t *)operator new(v78);
        v80 = &v79[v78 >> 3];
        v196 = v79;
        v198 = v80;
        memcpy(v79, v77, v78);
        v197 = v80;
      }
      v193 = 0;
      v194 = 0;
      v195 = 0;
      v81 = *a4;
      v82 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v193 = v83;
        v195 = v84;
        memcpy(v83, v81, v82);
        v194 = v84;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v196, &v193);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      v20 = v196;
      if (v196)
      {
        v197 = v196;
        goto LABEL_167;
      }
      return;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v12 = *a3;
    v13 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_169;
      v14 = (uint64_t *)operator new(v13);
      v15 = &v14[v13 >> 3];
      v190 = v14;
      v192 = v15;
      memcpy(v14, v12, v13);
      v191 = v15;
    }
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v16 = *a4;
    v17 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v17)
      goto LABEL_15;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v18 = (uint64_t *)operator new(v17);
      v19 = &v18[v17 >> 3];
      v187 = v18;
      v189 = v19;
      memcpy(v18, v16, v17);
      v188 = v19;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v190, &v187);
      if (v187)
      {
        v188 = v187;
        operator delete(v187);
      }
      v20 = v190;
      if (v190)
      {
        v191 = v190;
LABEL_167:
        operator delete(v20);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v203))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v203))
    {
      if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v29 = *a3;
        v30 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v30)
        {
          if (v30 < 0)
            goto LABEL_169;
          v31 = (uint64_t *)operator new(v30);
          v32 = &v31[v30 >> 3];
          v166 = v31;
          v168 = v32;
          memcpy(v31, v29, v30);
          v167 = v32;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v33 = *a4;
        v34 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v34)
        {
          if (v34 < 0)
            goto LABEL_169;
          v35 = (char *)operator new(v34);
          v36 = &v35[8 * (v34 >> 3)];
          v163 = v35;
          v165 = v36;
          memcpy(v35, v33, v34);
          v164 = v36;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)11>(a1, a2, &v166, (uint64_t **)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        v20 = v166;
        if (v166)
        {
          v167 = v166;
          goto LABEL_167;
        }
        return;
      }
      v173 = 0;
      v172 = 0;
      v174 = 0;
      v101 = *a3;
      v102 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (uint64_t *)operator new(v102);
        v104 = &v103[v102 >> 3];
        v172 = v103;
        v174 = v104;
        memcpy(v103, v101, v102);
        v173 = v104;
      }
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v105 = *a4;
      v106 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (char *)operator new(v106);
        v108 = &v107[8 * (v106 >> 3)];
        v169 = v107;
        v171 = v108;
        memcpy(v107, v105, v106);
        v170 = v108;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v172, (uint64_t **)&v169);
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v20 = v172;
      if (v172)
      {
        v173 = v172;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v203))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v45 = *a3;
        v46 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v46)
        {
          if (v46 < 0)
            goto LABEL_169;
          v47 = (uint64_t *)operator new(v46);
          v48 = &v47[v46 >> 3];
          v148 = v47;
          v150 = v48;
          memcpy(v47, v45, v46);
          v149 = v48;
        }
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v49 = *a4;
        v50 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (char *)operator new(v50);
          v52 = &v51[8 * (v50 >> 3)];
          v145 = v51;
          v147 = v52;
          memcpy(v51, v49, v50);
          v146 = v52;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v148, (uint64_t **)&v145);
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        v20 = v148;
        if (v148)
        {
          v149 = v148;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v53 = *a3;
        v54 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (uint64_t *)operator new(v54);
          v56 = &v55[v54 >> 3];
          v142 = v55;
          v144 = v56;
          memcpy(v55, v53, v54);
          v143 = v56;
        }
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v57 = *a4;
        v58 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (char *)operator new(v58);
          v60 = &v59[8 * (v58 >> 3)];
          v139 = v59;
          v141 = v60;
          memcpy(v59, v57, v58);
          v140 = v60;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)11>(a1, a2, &v142, (uint64_t **)&v139);
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        v20 = v142;
        if (v142)
        {
          v143 = v142;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v61 = *a3;
        v62 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (uint64_t *)operator new(v62);
          v64 = &v63[v62 >> 3];
          v136 = v63;
          v138 = v64;
          memcpy(v63, v61, v62);
          v137 = v64;
        }
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v65 = *a4;
        v66 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v133 = v67;
          v135 = v68;
          memcpy(v67, v65, v66);
          v134 = v68;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)11>(a1, a2, &v136, (uint64_t **)&v133);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v20 = v136;
        if (v136)
        {
          v137 = v136;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v69 = *a3;
        v70 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (uint64_t *)operator new(v70);
          v72 = &v71[v70 >> 3];
          v130 = v71;
          v132 = v72;
          memcpy(v71, v69, v70);
          v131 = v72;
        }
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v73 = *a4;
        v74 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v127 = v75;
          v129 = v76;
          memcpy(v75, v73, v74);
          v128 = v76;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v130, (uint64_t **)&v127);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v20 = v130;
        if (v130)
        {
          v131 = v130;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v20 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v118, (uint64_t)a3);
          std::vector<long long>::vector(v117, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v118, (uint64_t **)v117);
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          v20 = (uint64_t *)v118[0];
          if (v118[0])
          {
            v118[1] = v118[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v93 = *a3;
      v94 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_169;
        v95 = (uint64_t *)operator new(v94);
        v96 = &v95[v94 >> 3];
        v124 = v95;
        v126 = v96;
        memcpy(v95, v93, v94);
        v125 = v96;
      }
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v97 = *a4;
      v98 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v121 = v99;
        v123 = v100;
        memcpy(v99, v97, v98);
        v122 = v100;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v124, (uint64_t **)&v121);
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      v20 = v124;
      if (v124)
      {
        v125 = v124;
        goto LABEL_167;
      }
      return;
    }
    if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v37 = *a3;
      v38 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v38)
      {
        if (v38 < 0)
          goto LABEL_169;
        v39 = (uint64_t *)operator new(v38);
        v40 = &v39[v38 >> 3];
        v154 = v39;
        v156 = v40;
        memcpy(v39, v37, v38);
        v155 = v40;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v41 = *a4;
      v42 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (char *)operator new(v42);
        v44 = &v43[8 * (v42 >> 3)];
        v151 = v43;
        v153 = v44;
        memcpy(v43, v41, v42);
        v152 = v44;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)11>(a1, a2, &v154, (uint64_t **)&v151);
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      v20 = v154;
      if (v154)
      {
        v155 = v154;
        goto LABEL_167;
      }
      return;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v109 = *a3;
    v110 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_169;
      v111 = (uint64_t *)operator new(v110);
      v112 = &v111[v110 >> 3];
      v160 = v111;
      v162 = v112;
      memcpy(v111, v109, v110);
      v161 = v112;
    }
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v113 = *a4;
    v114 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v157 = v115;
      v159 = v116;
      memcpy(v115, v113, v114);
      v158 = v116;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v160, (uint64_t **)&v157);
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    v20 = v160;
    if (v160)
    {
      v161 = v160;
      goto LABEL_167;
    }
    return;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v85 = *a3;
    v86 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v86)
    {
      if (v86 < 0)
        goto LABEL_169;
      v87 = (uint64_t *)operator new(v86);
      v88 = &v87[v86 >> 3];
      v184 = v87;
      v186 = v88;
      memcpy(v87, v85, v86);
      v185 = v88;
    }
    v182 = 0;
    v181 = 0;
    v183 = 0;
    v89 = *a4;
    v90 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v181 = v91;
      v183 = v92;
      memcpy(v91, v89, v90);
      v182 = v92;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v184, (uint64_t **)&v181);
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    v20 = v184;
    if (v184)
    {
      v185 = v184;
      goto LABEL_167;
    }
    return;
  }
  v179 = 0;
  v178 = 0;
  v180 = 0;
  v21 = *a3;
  v22 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v22)
  {
    if (v22 < 0)
      goto LABEL_169;
    v23 = (uint64_t *)operator new(v22);
    v24 = &v23[v22 >> 3];
    v178 = v23;
    v180 = v24;
    memcpy(v23, v21, v22);
    v179 = v24;
  }
  v176 = 0;
  __p = 0;
  v177 = 0;
  v25 = *a4;
  v26 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v26)
  {
    if (v26 < 0)
      goto LABEL_169;
    v27 = (char *)operator new(v26);
    v28 = &v27[8 * (v26 >> 3)];
    __p = v27;
    v177 = v28;
    memcpy(v27, v25, v26);
    v176 = v28;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v178, (uint64_t **)&__p);
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  v20 = v178;
  if (v178)
  {
    v179 = v178;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v198, &v195);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v192, &v189);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)12>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v174, (uint64_t **)&v171, a5);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)12>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)12>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)12>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)12>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)12>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)12>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)12>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float16x4_t a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v198, &v195);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v192, &v189);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)13>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)13>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)13>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  float v31;
  const void *v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  const void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  const void *v40;
  int64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  const void *v48;
  int64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  const void *v52;
  int64_t v53;
  char *v54;
  char *v55;
  const void *v56;
  int64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  const void *v60;
  int64_t v61;
  char *v62;
  char *v63;
  const void *v64;
  int64_t v65;
  uint64_t *v66;
  char *v67;
  const void *v68;
  int64_t v69;
  char *v70;
  char *v71;
  const void *v72;
  int64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  const void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  const void *v80;
  int64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  const void *v84;
  int64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  const void *v88;
  int64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  const void *v92;
  int64_t v93;
  char *v94;
  char *v95;
  const void *v96;
  int64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  const void *v100;
  int64_t v101;
  char *v102;
  char *v103;
  const void *v104;
  int64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  const void *v108;
  int64_t v109;
  char *v110;
  char *v111;
  const void *v112;
  int64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  const void *v116;
  int64_t v117;
  char *v118;
  char *v119;
  void *v120[3];
  void *v121[3];
  void *v122[3];
  uint64_t *v123[3];
  void *v124;
  void *v125;
  char *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  void *v130;
  void *v131;
  char *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  void *v136;
  void *v137;
  char *v138;
  uint64_t *v139;
  uint64_t *v140;
  char *v141;
  void *v142;
  void *v143;
  char *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  void *v148;
  void *v149;
  char *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  void *v154;
  void *v155;
  char *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  void *v160;
  void *v161;
  char *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  void *v166;
  void *v167;
  char *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  void *v172;
  void *v173;
  char *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  void *__p;
  void *v179;
  char *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  void *v184;
  void *v185;
  char *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t Value;
  uint64_t v206;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v206 = ElementType;
  v204 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v204);
  v204 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v203 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v202 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
    v206 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v206))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v199 = 0;
      v200 = 0;
      v201 = 0;
      v80 = *a3;
      v81 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v81)
      {
        if (v81 < 0)
          goto LABEL_169;
        v82 = (uint64_t *)operator new(v81);
        v83 = &v82[v81 >> 3];
        v199 = v82;
        v201 = v83;
        memcpy(v82, v80, v81);
        v200 = v83;
      }
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v84 = *a4;
      v85 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v85)
      {
        if (v85 < 0)
          goto LABEL_169;
        v86 = (uint64_t *)operator new(v85);
        v87 = &v86[v85 >> 3];
        v196 = v86;
        v198 = v87;
        memcpy(v86, v84, v85);
        v197 = v87;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(a1, a2, &v199, &v196);
      if (v196)
      {
        v197 = v196;
        operator delete(v196);
      }
      v22 = v199;
      if (v199)
      {
        v200 = v199;
        goto LABEL_167;
      }
      return;
    }
    v193 = 0;
    v194 = 0;
    v195 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v193 = v16;
      v195 = v17;
      memcpy(v16, v14, v15);
      v194 = v17;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v190 = v20;
      v192 = v21;
      memcpy(v20, v18, v19);
      v191 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v193, &v190);
      if (v190)
      {
        v191 = v190;
        operator delete(v190);
      }
      v22 = v193;
      if (v193)
      {
        v194 = v193;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v206))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v206))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v169 = 0;
        v170 = 0;
        v171 = 0;
        v32 = *a3;
        v33 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v33)
        {
          if (v33 < 0)
            goto LABEL_169;
          v34 = (uint64_t *)operator new(v33);
          v35 = &v34[v33 >> 3];
          v169 = v34;
          v171 = v35;
          memcpy(v34, v32, v33);
          v170 = v35;
        }
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v36 = *a4;
        v37 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v37)
        {
          if (v37 < 0)
            goto LABEL_169;
          v38 = (char *)operator new(v37);
          v39 = &v38[8 * (v37 >> 3)];
          v166 = v38;
          v168 = v39;
          memcpy(v38, v36, v37);
          v167 = v39;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v169, (uint64_t **)&v166, a5, v31);
        if (v166)
        {
          v167 = v166;
          operator delete(v166);
        }
        v22 = v169;
        if (v169)
        {
          v170 = v169;
          goto LABEL_167;
        }
        return;
      }
      v176 = 0;
      v175 = 0;
      v177 = 0;
      v104 = *a3;
      v105 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v105)
      {
        if (v105 < 0)
          goto LABEL_169;
        v106 = (uint64_t *)operator new(v105);
        v107 = &v106[v105 >> 3];
        v175 = v106;
        v177 = v107;
        memcpy(v106, v104, v105);
        v176 = v107;
      }
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v108 = *a4;
      v109 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v109)
      {
        if (v109 < 0)
          goto LABEL_169;
        v110 = (char *)operator new(v109);
        v111 = &v110[8 * (v109 >> 3)];
        v172 = v110;
        v174 = v111;
        memcpy(v110, v108, v109);
        v173 = v111;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v175, (uint64_t **)&v172, a5, v31);
      if (v172)
      {
        v173 = v172;
        operator delete(v172);
      }
      v22 = v175;
      if (v175)
      {
        v176 = v175;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v206))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v206))
      {
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v48 = *a3;
        v49 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_169;
          v50 = (uint64_t *)operator new(v49);
          v51 = &v50[v49 >> 3];
          v151 = v50;
          v153 = v51;
          memcpy(v50, v48, v49);
          v152 = v51;
        }
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v52 = *a4;
        v53 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v53)
        {
          if (v53 < 0)
            goto LABEL_169;
          v54 = (char *)operator new(v53);
          v55 = &v54[8 * (v53 >> 3)];
          v148 = v54;
          v150 = v55;
          memcpy(v54, v52, v53);
          v149 = v55;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)14>(a1, a2, &v151, (uint64_t **)&v148);
        if (v148)
        {
          v149 = v148;
          operator delete(v148);
        }
        v22 = v151;
        if (v151)
        {
          v152 = v151;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v206))
      {
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v56 = *a3;
        v57 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v57)
        {
          if (v57 < 0)
            goto LABEL_169;
          v58 = (uint64_t *)operator new(v57);
          v59 = &v58[v57 >> 3];
          v145 = v58;
          v147 = v59;
          memcpy(v58, v56, v57);
          v146 = v59;
        }
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v60 = *a4;
        v61 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v61)
        {
          if (v61 < 0)
            goto LABEL_169;
          v62 = (char *)operator new(v61);
          v63 = &v62[8 * (v61 >> 3)];
          v142 = v62;
          v144 = v63;
          memcpy(v62, v60, v61);
          v143 = v63;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)14>(a1, a2, &v145, (uint64_t **)&v142);
        if (v142)
        {
          v143 = v142;
          operator delete(v142);
        }
        v22 = v145;
        if (v145)
        {
          v146 = v145;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v206))
      {
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v64 = *a3;
        v65 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v65)
        {
          if (v65 < 0)
            goto LABEL_169;
          v66 = (uint64_t *)operator new(v65);
          v67 = (char *)&v66[v65 >> 3];
          v139 = v66;
          v141 = v67;
          memcpy(v66, v64, v65);
          v140 = (uint64_t *)v67;
        }
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v68 = *a4;
        v69 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v69)
        {
          if (v69 < 0)
            goto LABEL_169;
          v70 = (char *)operator new(v69);
          v71 = &v70[8 * (v69 >> 3)];
          v136 = v70;
          v138 = v71;
          memcpy(v70, v68, v69);
          v137 = v71;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, (uint64_t)&v139, (uint64_t **)&v136);
        if (v136)
        {
          v137 = v136;
          operator delete(v136);
        }
        v22 = v139;
        if (v139)
        {
          v140 = v139;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v72 = *a3;
        v73 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v73)
        {
          if (v73 < 0)
            goto LABEL_169;
          v74 = (uint64_t *)operator new(v73);
          v75 = &v74[v73 >> 3];
          v133 = v74;
          v135 = v75;
          memcpy(v74, v72, v73);
          v134 = v75;
        }
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v76 = *a4;
        v77 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v77)
        {
          if (v77 < 0)
            goto LABEL_169;
          v78 = (char *)operator new(v77);
          v79 = &v78[8 * (v77 >> 3)];
          v130 = v78;
          v132 = v79;
          memcpy(v78, v76, v77);
          v131 = v79;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(a1, a2, &v133, (uint64_t **)&v130);
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        v22 = v133;
        if (v133)
        {
          v134 = v133;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v123, (uint64_t)a3);
          std::vector<long long>::vector(v122, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v123, (uint64_t **)v122);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          v22 = v123[0];
          if (v123[0])
          {
            v123[1] = v123[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v121, (uint64_t)a3);
          std::vector<long long>::vector(v120, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v121, (uint64_t **)v120);
          if (v120[0])
          {
            v120[1] = v120[0];
            operator delete(v120[0]);
          }
          v22 = (uint64_t *)v121[0];
          if (v121[0])
          {
            v121[1] = v121[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v96 = *a3;
      v97 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v97)
      {
        if (v97 < 0)
          goto LABEL_169;
        v98 = (uint64_t *)operator new(v97);
        v99 = &v98[v97 >> 3];
        v127 = v98;
        v129 = v99;
        memcpy(v98, v96, v97);
        v128 = v99;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v100 = *a4;
      v101 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v101)
      {
        if (v101 < 0)
          goto LABEL_169;
        v102 = (char *)operator new(v101);
        v103 = &v102[8 * (v101 >> 3)];
        v124 = v102;
        v126 = v103;
        memcpy(v102, v100, v101);
        v125 = v103;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v127, (uint64_t **)&v124);
      if (v124)
      {
        v125 = v124;
        operator delete(v124);
      }
      v22 = v127;
      if (v127)
      {
        v128 = v127;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v157 = 0;
      v158 = 0;
      v159 = 0;
      v40 = *a3;
      v41 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_169;
        v42 = (uint64_t *)operator new(v41);
        v43 = &v42[v41 >> 3];
        v157 = v42;
        v159 = v43;
        memcpy(v42, v40, v41);
        v158 = v43;
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v44 = *a4;
      v45 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v45)
      {
        if (v45 < 0)
          goto LABEL_169;
        v46 = (char *)operator new(v45);
        v47 = &v46[8 * (v45 >> 3)];
        v154 = v46;
        v156 = v47;
        memcpy(v46, v44, v45);
        v155 = v47;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v157, (uint64_t **)&v154);
      if (v154)
      {
        v155 = v154;
        operator delete(v154);
      }
      v22 = v157;
      if (v157)
      {
        v158 = v157;
        goto LABEL_167;
      }
      return;
    }
    v163 = 0;
    v164 = 0;
    v165 = 0;
    v112 = *a3;
    v113 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v113)
    {
      if (v113 < 0)
        goto LABEL_169;
      v114 = (uint64_t *)operator new(v113);
      v115 = &v114[v113 >> 3];
      v163 = v114;
      v165 = v115;
      memcpy(v114, v112, v113);
      v164 = v115;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v116 = *a4;
    v117 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v117)
    {
      if (v117 < 0)
        goto LABEL_169;
      v118 = (char *)operator new(v117);
      v119 = &v118[8 * (v117 >> 3)];
      v160 = v118;
      v162 = v119;
      memcpy(v118, v116, v117);
      v161 = v119;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v163, (uint64_t **)&v160);
    if (v160)
    {
      v161 = v160;
      operator delete(v160);
    }
    v22 = v163;
    if (v163)
    {
      v164 = v163;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v88 = *a3;
    v89 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v89)
    {
      if (v89 < 0)
        goto LABEL_169;
      v90 = (uint64_t *)operator new(v89);
      v91 = &v90[v89 >> 3];
      v187 = v90;
      v189 = v91;
      memcpy(v90, v88, v89);
      v188 = v91;
    }
    v185 = 0;
    v184 = 0;
    v186 = 0;
    v92 = *a4;
    v93 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v93)
    {
      if (v93 < 0)
        goto LABEL_169;
      v94 = (char *)operator new(v93);
      v95 = &v94[8 * (v93 >> 3)];
      v184 = v94;
      v186 = v95;
      memcpy(v94, v92, v93);
      v185 = v95;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v187, (uint64_t **)&v184, a5);
    if (v184)
    {
      v185 = v184;
      operator delete(v184);
    }
    v22 = v187;
    if (v187)
    {
      v188 = v187;
      goto LABEL_167;
    }
    return;
  }
  v182 = 0;
  v181 = 0;
  v183 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v181 = v25;
    v183 = v26;
    memcpy(v25, v23, v24);
    v182 = v26;
  }
  v179 = 0;
  __p = 0;
  v180 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v180 = v30;
    memcpy(v29, v27, v28);
    v179 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)14>(a1, a2, &v181, (uint64_t **)&__p, a5);
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  v22 = v181;
  if (v181)
  {
    v182 = v181;
    goto LABEL_167;
  }
}

